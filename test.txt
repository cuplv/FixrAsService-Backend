{
  "_header": {
    "nvPairs": ["status", 0, "QTime", 2, "params", {
      "nvPairs": ["q", "*:*", "qt", "/select", "indent", "on", "fq", "c_callsites_t:startTransaction OR c_imports_added_t:startTransaction OR c_imports_removed_t:startTransaction", "wt", "javabin", "version", "2"]
    }]
  },
  "_results": [{
    "c_patch_no_context_t": ["+import org.prx.playerhater.util.Log;\n+\t\tstartTransaction();\n+\t\tstartTransaction();\n+\t\t\tstartTransaction();\n-\t\tboolean willContinuePlaying = isPlaying();\n-\t\tSynchronousPlayer player = mMediaPlayerPool.getPlayer(\n-\t\t\t\tgetApplicationContext(), nowPlaying.getUri());\n+\t\tstartTransaction();\n+\t\tLog.d(\"Currently in state \" + getState());\n-\t\t\tmMediaPlayerPool.recycle(swapMediaPlayer(player,\n-\t\t\t\t\twillContinuePlaying));\n+\t\t\tmMediaPlayerPool.recycle(peekMediaPlayer());\n-\t\t\tmMediaPlayerPool.recycle(\n-\t\t\t\t\tswapMediaPlayer(player, willContinuePlaying), was.getUri());\n+\t\t\tmMediaPlayerPool.recycle(peekMediaPlayer(), was.getUri());\n+\t\tLog.d(\"Currently in state \" + getState());\n+\t\tsetMediaPlayer(mMediaPlayerPool.getPlayer(getApplicationContext(),\n+\t\t\t\tnowPlaying.getUri()));\n+\t\tLog.d(\"Currently in state \" + getState());\n+\t\tif (isPlaying()) {\n+\t\t\tgetMediaPlayer().start();\n+\t\t}\n+\t\tLog.d(\"Currently in state \" + getState());\n+\t\tcommitTransaction();\n+\t\t\tstartTransaction();\n+\t\t\tstartTransaction();"],
    "p_patch_no_context_t": ["+import org.prx.playerhater.mediaplayer.MediaPlayerPool;\n+import org.prx.playerhater.mediaplayer.SynchronousPlayer;\n-public class PlaybackService extends PlayerHaterService implements\n-\t\tOnQueuedSongsChangedListener {\n-\n-\t@Override\n-\tpublic boolean pause() {\n-\t\treturn getMediaPlayer().conditionalPause();\n-\t}\n+import android.media.MediaPlayer;\n+import android.media.MediaPlayer.OnCompletionListener;\n+import android.media.MediaPlayer.OnErrorListener;\n-\t@Override\n-\tpublic boolean stop() {\n-\t\tonStopped();\n-\t\treturn getMediaPlayer().conditionalStop();\n-\t}\n+public class PlaybackService extends PlayerHaterService implements\n+\t\tOnQueuedSongsChangedListener, OnErrorListener, OnCompletionListener {\n-\t@Override\n-\tpublic boolean play() {\n-\t\treturn getMediaPlayer().conditionalPlay();\n-\t}\n+\tprivate MediaPlayerPool mMediaPlayerPool;\n-\tpublic boolean play(int startTime) {\n-\t\tgetMediaPlayer().conditionalPause();\n-\t\tgetMediaPlayer().seekTo(startTime);\n-\t\tgetMediaPlayer().conditionalPlay();\n-\t\treturn true;\n+\tpublic void onCreate() {\n+\t\tsuper.onCreate();\n+\t\tmMediaPlayerPool = new MediaPlayerPool();\n-\t\tgetMediaPlayer().prepareAndPlay(getApplicationContext(), song.getUri(),\n-\t\t\t\tstartTime);\n-\t\treturn true;\n+\t\tint position = enqueue(song);\n+\t\tonSongFinished(PlayerHater.FINISH_SKIP_BUTTON);\n+\t\tgetQueue().skipTo(position);\n+\t\tseekTo(startTime);\n+\t\treturn play();\n+\t\tonSongFinished(PlayerHater.FINISH_SKIP_BUTTON);\n+\t\tonSongFinished(PlayerHater.FINISH_SKIP_BUTTON);\n-\t\tgetQueue().back();\n+\t\tif (getCurrentPosition() < 2000) {\n+\t\t\tonSongFinished(PlayerHater.FINISH_SKIP_BUTTON);\n+\t\t\tgetQueue().back();\n+\t\t} else {\n+\t\t\tseekTo(0);\n+\t\t}\n-\t\treturn getQueue().getPosition();\n+\t\treturn getQueue().getPosition() + (isPlaying() ? 1 : 0);\n-\tpublic void onNowPlayingChanged(Song nowPlaying) {\n-\t\tgetMediaPlayer().prepare(getApplicationContext(), nowPlaying.getUri());\n+\tpublic void onNowPlayingChanged(Song nowPlaying, Song was) {\n+\t\tboolean willContinuePlaying = isPlaying();\n+\t\tSynchronousPlayer player = mMediaPlayerPool.getPlayer(\n+\t\t\t\tgetApplicationContext(), nowPlaying.getUri());\n+\t\tif (was == null) {\n+\t\t\tmMediaPlayerPool.recycle(swapMediaPlayer(player,\n+\t\t\t\t\twillContinuePlaying));\n+\t\t} else {\n+\t\t\tmMediaPlayerPool.recycle(\n+\t\t\t\t\tswapMediaPlayer(player, willContinuePlaying), was.getUri());\n+\t\t}\n-\tpublic void onNextSongChanged(Song nextSong) {\n+\tpublic void onNextSongChanged(Song nextSong, Song was) {\n+\t\tif (nextSong != null) {\n+\t\t\tmMediaPlayerPool\n+\t\t\t\t\t.prepare(getApplicationContext(), nextSong.getUri());\n+\t\t}\n-\t\n+\n+\t@Override\n+\tpublic void onCompletion(MediaPlayer mp) {\n+\t\tif (peekMediaPlayer() != null && peekMediaPlayer().equals(mp)) {\n+\t\t\tonSongFinished(PlayerHater.FINISH_SONG_END);\n+\t\t\tgetQueue().next();\n+\t\t}\n+\t}\n+\n+\t@Override\n+\tpublic boolean onError(MediaPlayer mp, int what, int extra) {\n+\t\tif (peekMediaPlayer() != null && peekMediaPlayer().equals(mp)) {\n+\t\t\tonSongFinished(PlayerHater.FINISH_ERROR);\n+\t\t\tgetQueue().next();\n+\t\t\treturn true;\n+\t\t}\n+\t\treturn false;\n+\t}\n+\n+\n+\t@Override\n+\tprotected void setMediaPlayer(SynchronousPlayer mediaPlayer) {\n+\t\tSynchronousPlayer oldPlayer = peekMediaPlayer();\n+\t\tif (oldPlayer != null) {\n+\t\t\toldPlayer.setOnErrorListener(null);\n+\t\t\toldPlayer.setOnCompletionListener(null);\n+\t\t}\n+\t\tsuper.setMediaPlayer(mediaPlayer);\n+\t\tmediaPlayer.setOnErrorListener(this);\n+\t\tmediaPlayer.setOnCompletionListener(this);\n+\t}"],
    "c_date_tdt": "May 31, 2013 1:07:52 PM",
    "c_imports_t": ["org.prx.playerhater.songs.SongQueue org.prx.playerhater.util.Log org.prx.playerhater.service.PlayerHaterService android.media.MediaPlayer.OnCompletionListener org.prx.playerhater.mediaplayer.SynchronousPlayer org.prx.playerhater.songs.SongQueue.OnQueuedSongsChangedListener android.media.MediaPlayer.OnErrorListener android.media.MediaPlayer org.prx.playerhater.mediaplayer.MediaPlayerPool"],
    "c_contents_t": ["package org.prx.playerhater;\n\nimport org.prx.playerhater.mediaplayer.MediaPlayerPool;\nimport org.prx.playerhater.mediaplayer.SynchronousPlayer;\nimport org.prx.playerhater.service.PlayerHaterService;\nimport org.prx.playerhater.songs.SongQueue;\nimport org.prx.playerhater.songs.SongQueue.OnQueuedSongsChangedListener;\nimport org.prx.playerhater.util.Log;\n\nimport android.media.MediaPlayer;\nimport android.media.MediaPlayer.OnCompletionListener;\nimport android.media.MediaPlayer.OnErrorListener;\n\npublic class PlaybackService extends PlayerHaterService implements\n\t\tOnQueuedSongsChangedListener, OnErrorListener, OnCompletionListener {\n\n\tprivate MediaPlayerPool mMediaPlayerPool;\n\n\t@Override\n\tpublic void onCreate() {\n\t\tsuper.onCreate();\n\t\tmMediaPlayerPool = new MediaPlayerPool();\n\t}\n\n\t@Override\n\tpublic boolean play(Song song, int startTime) {\n\t\tint position = enqueue(song);\n\t\tonSongFinished(PlayerHater.FINISH_SKIP_BUTTON);\n\t\tgetQueue().skipTo(position);\n\t\tseekTo(startTime);\n\t\treturn play();\n\t}\n\n\t@Override\n\tpublic boolean seekTo(int startTime) {\n\t\tgetMediaPlayer().seekTo(startTime);\n\t\treturn true;\n\t}\n\n\t@Override\n\tpublic int enqueue(Song song) {\n\t\treturn getQueue().appendSong(song);\n\t}\n\n\t@Override\n\tpublic boolean skipTo(int position) {\n\t\tstartTransaction();\n\t\tonSongFinished(PlayerHater.FINISH_SKIP_BUTTON);\n\t\treturn getQueue().skipTo(position);\n\t}\n\n\t@Override\n\tpublic void skip() {\n\t\tstartTransaction();\n\t\tonSongFinished(PlayerHater.FINISH_SKIP_BUTTON);\n\t\tgetQueue().next();\n\t}\n\n\t@Override\n\tpublic void skipBack() {\n\t\tif (getCurrentPosition() < 2000) {\n\t\t\tstartTransaction();\n\t\t\tonSongFinished(PlayerHater.FINISH_SKIP_BUTTON);\n\t\t\tgetQueue().back();\n\t\t} else {\n\t\t\tseekTo(0);\n\t\t}\n\t}\n\n\t@Override\n\tpublic void emptyQueue() {\n\t\tgetQueue().empty();\n\t}\n\n\t@Override\n\tpublic Song nowPlaying() {\n\t\treturn getQueue().getNowPlaying();\n\t}\n\n\tprivate SongQueue mQueue;\n\n\tprivate SongQueue getQueue() {\n\t\tif (mQueue == null) {\n\t\t\tmQueue = new SongQueue();\n\t\t\tmQueue.setQueuedSongsChangedListener(this);\n\t\t}\n\t\treturn mQueue;\n\t}\n\n\t@Override\n\tpublic int getQueueLength() {\n\t\treturn getQueue().size();\n\t}\n\n\t@Override\n\tpublic int getQueuePosition() {\n\t\treturn getQueue().getPosition() + (isPlaying() ? 1 : 0);\n\t}\n\n\t@Override\n\tpublic boolean removeFromQueue(int position) {\n\t\treturn getQueue().remove(position);\n\t}\n\n\t@Override\n\tpublic void onNowPlayingChanged(Song nowPlaying, Song was) {\n\t\tstartTransaction();\n\t\tLog.d(\"Currently in state \" + getState());\n\t\tif (was == null) {\n\t\t\tmMediaPlayerPool.recycle(peekMediaPlayer());\n\t\t} else {\n\t\t\tmMediaPlayerPool.recycle(peekMediaPlayer(), was.getUri());\n\t\t}\n\t\tLog.d(\"Currently in state \" + getState());\n\t\tsetMediaPlayer(mMediaPlayerPool.getPlayer(getApplicationContext(),\n\t\t\t\tnowPlaying.getUri()));\n\t\tLog.d(\"Currently in state \" + getState());\n\t\tif (isPlaying()) {\n\t\t\tgetMediaPlayer().start();\n\t\t}\n\t\tLog.d(\"Currently in state \" + getState());\n\t\tcommitTransaction();\n\t\tonSongChanged();\n\t}\n\n\t@Override\n\tpublic void onNextSongChanged(Song nextSong, Song was) {\n\t\tif (nextSong != null) {\n\t\t\tmMediaPlayerPool\n\t\t\t\t\t.prepare(getApplicationContext(), nextSong.getUri());\n\t\t}\n\t\tonNextSongChanged();\n\t}\n\n\t@Override\n\tpublic void onCompletion(MediaPlayer mp) {\n\t\tif (peekMediaPlayer() != null && peekMediaPlayer().equals(mp)) {\n\t\t\tstartTransaction();\n\t\t\tonSongFinished(PlayerHater.FINISH_SONG_END);\n\t\t\tgetQueue().next();\n\t\t}\n\t}\n\n\t@Override\n\tpublic boolean onError(MediaPlayer mp, int what, int extra) {\n\t\tif (peekMediaPlayer() != null && peekMediaPlayer().equals(mp)) {\n\t\t\tstartTransaction();\n\t\t\tonSongFinished(PlayerHater.FINISH_ERROR);\n\t\t\tgetQueue().next();\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\t@Override\n\tpublic Song getNextSong() {\n\t\treturn getQueue().getNextPlaying();\n\t}\n\n\t@Override\n\tprotected void setMediaPlayer(SynchronousPlayer mediaPlayer) {\n\t\tSynchronousPlayer oldPlayer = peekMediaPlayer();\n\t\tif (oldPlayer != null) {\n\t\t\toldPlayer.setOnErrorListener(null);\n\t\t\toldPlayer.setOnCompletionListener(null);\n\t\t}\n\t\tsuper.setMediaPlayer(mediaPlayer);\n\t\tmediaPlayer.setOnErrorListener(this);\n\t\tmediaPlayer.setOnCompletionListener(this);\n\t}\n}\n"],
    "p_date_tdt": "May 31, 2013 11:44:05 AM",
    "c_comments_t": ["<empty>"],
    "p_contents_t": ["package org.prx.playerhater;\n\nimport org.prx.playerhater.mediaplayer.MediaPlayerPool;\nimport org.prx.playerhater.mediaplayer.SynchronousPlayer;\nimport org.prx.playerhater.service.PlayerHaterService;\nimport org.prx.playerhater.songs.SongQueue;\nimport org.prx.playerhater.songs.SongQueue.OnQueuedSongsChangedListener;\n\nimport android.media.MediaPlayer;\nimport android.media.MediaPlayer.OnCompletionListener;\nimport android.media.MediaPlayer.OnErrorListener;\n\npublic class PlaybackService extends PlayerHaterService implements\n\t\tOnQueuedSongsChangedListener, OnErrorListener, OnCompletionListener {\n\n\tprivate MediaPlayerPool mMediaPlayerPool;\n\n\t@Override\n\tpublic void onCreate() {\n\t\tsuper.onCreate();\n\t\tmMediaPlayerPool = new MediaPlayerPool();\n\t}\n\n\t@Override\n\tpublic boolean play(Song song, int startTime) {\n\t\tint position = enqueue(song);\n\t\tonSongFinished(PlayerHater.FINISH_SKIP_BUTTON);\n\t\tgetQueue().skipTo(position);\n\t\tseekTo(startTime);\n\t\treturn play();\n\t}\n\n\t@Override\n\tpublic boolean seekTo(int startTime) {\n\t\tgetMediaPlayer().seekTo(startTime);\n\t\treturn true;\n\t}\n\n\t@Override\n\tpublic int enqueue(Song song) {\n\t\treturn getQueue().appendSong(song);\n\t}\n\n\t@Override\n\tpublic boolean skipTo(int position) {\n\t\tonSongFinished(PlayerHater.FINISH_SKIP_BUTTON);\n\t\treturn getQueue().skipTo(position);\n\t}\n\n\t@Override\n\tpublic void skip() {\n\t\tonSongFinished(PlayerHater.FINISH_SKIP_BUTTON);\n\t\tgetQueue().next();\n\t}\n\n\t@Override\n\tpublic void skipBack() {\n\t\tif (getCurrentPosition() < 2000) {\n\t\t\tonSongFinished(PlayerHater.FINISH_SKIP_BUTTON);\n\t\t\tgetQueue().back();\n\t\t} else {\n\t\t\tseekTo(0);\n\t\t}\n\t}\n\n\t@Override\n\tpublic void emptyQueue() {\n\t\tgetQueue().empty();\n\t}\n\n\t@Override\n\tpublic Song nowPlaying() {\n\t\treturn getQueue().getNowPlaying();\n\t}\n\n\tprivate SongQueue mQueue;\n\n\tprivate SongQueue getQueue() {\n\t\tif (mQueue == null) {\n\t\t\tmQueue = new SongQueue();\n\t\t\tmQueue.setQueuedSongsChangedListener(this);\n\t\t}\n\t\treturn mQueue;\n\t}\n\n\t@Override\n\tpublic int getQueueLength() {\n\t\treturn getQueue().size();\n\t}\n\n\t@Override\n\tpublic int getQueuePosition() {\n\t\treturn getQueue().getPosition() + (isPlaying() ? 1 : 0);\n\t}\n\n\t@Override\n\tpublic boolean removeFromQueue(int position) {\n\t\treturn getQueue().remove(position);\n\t}\n\n\t@Override\n\tpublic void onNowPlayingChanged(Song nowPlaying, Song was) {\n\t\tboolean willContinuePlaying = isPlaying();\n\t\tSynchronousPlayer player = mMediaPlayerPool.getPlayer(\n\t\t\t\tgetApplicationContext(), nowPlaying.getUri());\n\t\tif (was == null) {\n\t\t\tmMediaPlayerPool.recycle(swapMediaPlayer(player,\n\t\t\t\t\twillContinuePlaying));\n\t\t} else {\n\t\t\tmMediaPlayerPool.recycle(\n\t\t\t\t\tswapMediaPlayer(player, willContinuePlaying), was.getUri());\n\t\t}\n\t\tonSongChanged();\n\t}\n\n\t@Override\n\tpublic void onNextSongChanged(Song nextSong, Song was) {\n\t\tif (nextSong != null) {\n\t\t\tmMediaPlayerPool\n\t\t\t\t\t.prepare(getApplicationContext(), nextSong.getUri());\n\t\t}\n\t\tonNextSongChanged();\n\t}\n\n\t@Override\n\tpublic void onCompletion(MediaPlayer mp) {\n\t\tif (peekMediaPlayer() != null && peekMediaPlayer().equals(mp)) {\n\t\t\tonSongFinished(PlayerHater.FINISH_SONG_END);\n\t\t\tgetQueue().next();\n\t\t}\n\t}\n\n\t@Override\n\tpublic boolean onError(MediaPlayer mp, int what, int extra) {\n\t\tif (peekMediaPlayer() != null && peekMediaPlayer().equals(mp)) {\n\t\t\tonSongFinished(PlayerHater.FINISH_ERROR);\n\t\t\tgetQueue().next();\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\t@Override\n\tpublic Song getNextSong() {\n\t\treturn getQueue().getNextPlaying();\n\t}\n\n\t@Override\n\tprotected void setMediaPlayer(SynchronousPlayer mediaPlayer) {\n\t\tSynchronousPlayer oldPlayer = peekMediaPlayer();\n\t\tif (oldPlayer != null) {\n\t\t\toldPlayer.setOnErrorListener(null);\n\t\t\toldPlayer.setOnCompletionListener(null);\n\t\t}\n\t\tsuper.setMediaPlayer(mediaPlayer);\n\t\tmediaPlayer.setOnErrorListener(this);\n\t\tmediaPlayer.setOnCompletionListener(this);\n\t}\n}\n"],
    "c_hash_sni": "32d9e7db8bb4324c6638adea2e43a7cfbf173797",
    "name_sni": "src/org/prx/playerhater/PlaybackService.java",
    "c_parents_ss": ["a5f377899e973f3adf3094c36111b5e63a63482b"],
    "c_imports_removed_t": ["<empty>"],
    "p_hash_sni": "a5f377899e973f3adf3094c36111b5e63a63482b",
    "c_imports_added_t": ["org.prx.playerhater.util.Log"],
    "p_methods_t": ["MediaPlayerPool SongQueue appendSong back empty enqueue equals getApplicationContext getCurrentPosition getMediaPlayer getNextPlaying getNowPlaying getPlayer getPosition getQueue getUri isPlaying next onNextSongChanged onSongChanged onSongFinished peekMediaPlayer play prepare recycle remove seekTo setOnCompletionListener setOnErrorListener setQueuedSongsChangedListener size skipTo swapMediaPlayer"],
    "c_imports_removed_cs": "<empty>",
    "p_imports_t": ["org.prx.playerhater.songs.SongQueue org.prx.playerhater.service.PlayerHaterService android.media.MediaPlayer.OnCompletionListener org.prx.playerhater.mediaplayer.SynchronousPlayer org.prx.playerhater.songs.SongQueue.OnQueuedSongsChangedListener android.media.MediaPlayer.OnErrorListener android.media.MediaPlayer org.prx.playerhater.mediaplayer.MediaPlayerPool"],
    "p_subject_t": ["completion events"],
    "p_callsites_cs": "<unknown>.peekMediaPlayer()#<unknown>.setOnErrorListener(null)#<unknown>.remove(int)#<unknown>.recycle(<unknown>, <unknown>)#<unknown>.skipTo(int)#org.prx.playerhater.PlaybackService.getQueue()#<unknown>.setQueuedSongsChangedListener(org.prx.playerhater.PlaybackService)#<unknown>.SongQueue()#org.prx.playerhater.PlaybackService.enqueue(org.prx.playerhater.Song)#<unknown>.next()#<unknown>.next()#<unknown>.onSongFinished(<unknown>)#<unknown>.equals(android.media.MediaPlayer)#<unknown>.peekMediaPlayer()#<unknown>.setOnCompletionListener(org.prx.playerhater.PlaybackService)#org.prx.playerhater.PlaybackService.getQueue()#<unknown>.onSongFinished(<unknown>)#<unknown>.next()#<unknown>.swapMediaPlayer(org.prx.playerhater.SynchronousPlayer, boolean)#org.prx.playerhater.PlaybackService.getQueue()#org.prx.playerhater.PlaybackService.getQueue()#<unknown>.setOnErrorListener(org.prx.playerhater.PlaybackService)#<unknown>.onSongFinished(<unknown>)#<unknown>.skipTo(int)#org.prx.playerhater.PlaybackService.onNextSongChanged()#org.prx.playerhater.PlaybackService.play()#<unknown>.appendSong(org.prx.playerhater.Song)#<unknown>.onSongFinished(<unknown>)#org.prx.playerhater.PlaybackService.getQueue()#<unknown>.seekTo(int)#org.prx.playerhater.PlaybackService.getQueue()#org.prx.playerhater.PlaybackService.getQueue()#org.prx.playerhater.PlaybackService.getQueue()#<unknown>.onSongChanged()#<unknown>.isPlaying()#<unknown>.getNextPlaying()#<unknown>.size()#<unknown>.getUri()#<unknown>.MediaPlayerPool()#<unknown>.getApplicationContext()#org.prx.playerhater.PlaybackService.getQueue()#<unknown>.peekMediaPlayer()#org.prx.playerhater.PlaybackService.getQueue()#org.prx.playerhater.PlaybackService.getQueue()#<unknown>.getApplicationContext()#org.prx.playerhater.PlaybackService.seekTo(int)#<unknown>.empty()#org.prx.playerhater.PlaybackService.seekTo(int)#<unknown>.prepare(<unknown>, <unknown>)#<unknown>.onSongFinished(<unknown>)#<unknown>.equals(android.media.MediaPlayer)#<unknown>.getCurrentPosition()#<unknown>.getMediaPlayer()#<unknown>.getUri()#org.prx.playerhater.PlaybackService.getQueue()#<unknown>.onSongFinished(<unknown>)#<unknown>.isPlaying()#org.prx.playerhater.PlaybackService.getQueue()#<unknown>.getUri()#<unknown>.getNowPlaying()#<unknown>.back()#<unknown>.getPosition()#<unknown>.getPlayer(<unknown>, <unknown>)#<unknown>.setOnCompletionListener(null)#<unknown>.recycle(<unknown>)",
    "p_callsites_t": ["<unknown>.peekMediaPlayer() <unknown>.setOnErrorListener(null) <unknown>.remove(int) <unknown>.recycle(<unknown>, <unknown>) <unknown>.skipTo(int) org.prx.playerhater.PlaybackService.getQueue() <unknown>.setQueuedSongsChangedListener(org.prx.playerhater.PlaybackService) <unknown>.SongQueue() org.prx.playerhater.PlaybackService.enqueue(org.prx.playerhater.Song) <unknown>.next() <unknown>.next() <unknown>.onSongFinished(<unknown>) <unknown>.equals(android.media.MediaPlayer) <unknown>.peekMediaPlayer() <unknown>.setOnCompletionListener(org.prx.playerhater.PlaybackService) org.prx.playerhater.PlaybackService.getQueue() <unknown>.onSongFinished(<unknown>) <unknown>.next() <unknown>.swapMediaPlayer(org.prx.playerhater.SynchronousPlayer, boolean) org.prx.playerhater.PlaybackService.getQueue() org.prx.playerhater.PlaybackService.getQueue() <unknown>.setOnErrorListener(org.prx.playerhater.PlaybackService) <unknown>.onSongFinished(<unknown>) <unknown>.skipTo(int) org.prx.playerhater.PlaybackService.onNextSongChanged() org.prx.playerhater.PlaybackService.play() <unknown>.appendSong(org.prx.playerhater.Song) <unknown>.onSongFinished(<unknown>) org.prx.playerhater.PlaybackService.getQueue() <unknown>.seekTo(int) org.prx.playerhater.PlaybackService.getQueue() org.prx.playerhater.PlaybackService.getQueue() org.prx.playerhater.PlaybackService.getQueue() <unknown>.onSongChanged() <unknown>.isPlaying() <unknown>.getNextPlaying() <unknown>.size() <unknown>.getUri() <unknown>.MediaPlayerPool() <unknown>.getApplicationContext() org.prx.playerhater.PlaybackService.getQueue() <unknown>.peekMediaPlayer() org.prx.playerhater.PlaybackService.getQueue() org.prx.playerhater.PlaybackService.getQueue() <unknown>.getApplicationContext() org.prx.playerhater.PlaybackService.seekTo(int) <unknown>.empty() org.prx.playerhater.PlaybackService.seekTo(int) <unknown>.prepare(<unknown>, <unknown>) <unknown>.onSongFinished(<unknown>) <unknown>.equals(android.media.MediaPlayer) <unknown>.getCurrentPosition() <unknown>.getMediaPlayer() <unknown>.getUri() org.prx.playerhater.PlaybackService.getQueue() <unknown>.onSongFinished(<unknown>) <unknown>.isPlaying() org.prx.playerhater.PlaybackService.getQueue() <unknown>.getUri() <unknown>.getNowPlaying() <unknown>.back() <unknown>.getPosition() <unknown>.getPlayer(<unknown>, <unknown>) <unknown>.setOnCompletionListener(null) <unknown>.recycle(<unknown>)"],
    "c_callsites_t": ["<unknown>.peekMediaPlayer() <unknown>.setOnErrorListener(null) <unknown>.recycle(<unknown>) <unknown>.remove(int) <unknown>.skipTo(int) org.prx.playerhater.PlaybackService.getQueue() <unknown>.setQueuedSongsChangedListener(org.prx.playerhater.PlaybackService) <unknown>.SongQueue() org.prx.playerhater.PlaybackService.enqueue(org.prx.playerhater.Song) <unknown>.d(<unknown>) <unknown>.next() <unknown>.next() <unknown>.onSongFinished(<unknown>) <unknown>.getMediaPlayer() <unknown>.equals(android.media.MediaPlayer) <unknown>.peekMediaPlayer() <unknown>.setOnCompletionListener(org.prx.playerhater.PlaybackService) org.prx.playerhater.PlaybackService.getQueue() <unknown>.onSongFinished(<unknown>) <unknown>.getState() <unknown>.next() <unknown>.startTransaction() org.prx.playerhater.PlaybackService.getQueue() org.prx.playerhater.PlaybackService.getQueue() <unknown>.setOnErrorListener(org.prx.playerhater.PlaybackService) org.prx.playerhater.PlaybackService.setMediaPlayer(<unknown>) <unknown>.onSongFinished(<unknown>) <unknown>.skipTo(int) org.prx.playerhater.PlaybackService.onNextSongChanged() org.prx.playerhater.PlaybackService.play() <unknown>.appendSong(org.prx.playerhater.Song) <unknown>.onSongFinished(<unknown>) org.prx.playerhater.PlaybackService.getQueue() <unknown>.seekTo(int) <unknown>.recycle(<unknown>, <unknown>) <unknown>.startTransaction() org.prx.playerhater.PlaybackService.getQueue() org.prx.playerhater.PlaybackService.getQueue() <unknown>.startTransaction() org.prx.playerhater.PlaybackService.getQueue() <unknown>.start() <unknown>.onSongChanged() <unknown>.isPlaying() <unknown>.getNextPlaying() <unknown>.size() <unknown>.commitTransaction() <unknown>.startTransaction() <unknown>.getUri() <unknown>.MediaPlayerPool() <unknown>.getApplicationContext() org.prx.playerhater.PlaybackService.getQueue() <unknown>.startTransaction() <unknown>.peekMediaPlayer() <unknown>.peekMediaPlayer() org.prx.playerhater.PlaybackService.getQueue() org.prx.playerhater.PlaybackService.getQueue() <unknown>.getApplicationContext() org.prx.playerhater.PlaybackService.seekTo(int) <unknown>.empty() org.prx.playerhater.PlaybackService.seekTo(int) <unknown>.prepare(<unknown>, <unknown>) <unknown>.onSongFinished(<unknown>) <unknown>.equals(android.media.MediaPlayer) <unknown>.getCurrentPosition() <unknown>.getMediaPlayer() <unknown>.getUri() org.prx.playerhater.PlaybackService.getQueue() <unknown>.onSongFinished(<unknown>) <unknown>.isPlaying() org.prx.playerhater.PlaybackService.getQueue() <unknown>.getUri() <unknown>.getNowPlaying() <unknown>.back() <unknown>.getPosition() <unknown>.getPlayer(<unknown>, <unknown>) <unknown>.setOnCompletionListener(null) <unknown>.startTransaction()"],
    "c_callsites_added_t": ["<unknown>.d(<unknown>) <unknown>.getState() <unknown>.startTransaction() org.prx.playerhater.PlaybackService.setMediaPlayer(<unknown>) <unknown>.startTransaction() <unknown>.startTransaction() <unknown>.start() <unknown>.commitTransaction() <unknown>.startTransaction() <unknown>.startTransaction() <unknown>.peekMediaPlayer() <unknown>.getMediaPlayer() <unknown>.startTransaction()"],
    "c_methods_t": ["MediaPlayerPool SongQueue appendSong back commitTransaction d empty enqueue equals getApplicationContext getCurrentPosition getMediaPlayer getNextPlaying getNowPlaying getPlayer getPosition getQueue getState getUri isPlaying next onNextSongChanged onSongChanged onSongFinished peekMediaPlayer play prepare recycle remove seekTo setMediaPlayer setOnCompletionListener setOnErrorListener setQueuedSongsChangedListener size skipTo start startTransaction"],
    "id": "chrisrhoden/PlayerHater\u0000src/org/prx/playerhater/PlaybackService.java\u0000a5f377899e973f3adf3094c36111b5e63a63482b\u000032d9e7db8bb4324c6638adea2e43a7cfbf173797",
    "p_comments_t": ["<empty>"],
    "p_email_sni": "carhoden@gmail.com",
    "c_callsites_removed_t": ["<unknown>.swapMediaPlayer(org.prx.playerhater.SynchronousPlayer, boolean)"],
    "c_callsites_cs": "<unknown>.peekMediaPlayer()#<unknown>.setOnErrorListener(null)#<unknown>.recycle(<unknown>)#<unknown>.remove(int)#<unknown>.skipTo(int)#org.prx.playerhater.PlaybackService.getQueue()#<unknown>.setQueuedSongsChangedListener(org.prx.playerhater.PlaybackService)#<unknown>.SongQueue()#org.prx.playerhater.PlaybackService.enqueue(org.prx.playerhater.Song)#<unknown>.d(<unknown>)#<unknown>.next()#<unknown>.next()#<unknown>.onSongFinished(<unknown>)#<unknown>.getMediaPlayer()#<unknown>.equals(android.media.MediaPlayer)#<unknown>.peekMediaPlayer()#<unknown>.setOnCompletionListener(org.prx.playerhater.PlaybackService)#org.prx.playerhater.PlaybackService.getQueue()#<unknown>.onSongFinished(<unknown>)#<unknown>.getState()#<unknown>.next()#<unknown>.startTransaction()#org.prx.playerhater.PlaybackService.getQueue()#org.prx.playerhater.PlaybackService.getQueue()#<unknown>.setOnErrorListener(org.prx.playerhater.PlaybackService)#org.prx.playerhater.PlaybackService.setMediaPlayer(<unknown>)#<unknown>.onSongFinished(<unknown>)#<unknown>.skipTo(int)#org.prx.playerhater.PlaybackService.onNextSongChanged()#org.prx.playerhater.PlaybackService.play()#<unknown>.appendSong(org.prx.playerhater.Song)#<unknown>.onSongFinished(<unknown>)#org.prx.playerhater.PlaybackService.getQueue()#<unknown>.seekTo(int)#<unknown>.recycle(<unknown>, <unknown>)#<unknown>.startTransaction()#org.prx.playerhater.PlaybackService.getQueue()#org.prx.playerhater.PlaybackService.getQueue()#<unknown>.startTransaction()#org.prx.playerhater.PlaybackService.getQueue()#<unknown>.start()#<unknown>.onSongChanged()#<unknown>.isPlaying()#<unknown>.getNextPlaying()#<unknown>.size()#<unknown>.commitTransaction()#<unknown>.startTransaction()#<unknown>.getUri()#<unknown>.MediaPlayerPool()#<unknown>.getApplicationContext()#org.prx.playerhater.PlaybackService.getQueue()#<unknown>.startTransaction()#<unknown>.peekMediaPlayer()#<unknown>.peekMediaPlayer()#org.prx.playerhater.PlaybackService.getQueue()#org.prx.playerhater.PlaybackService.getQueue()#<unknown>.getApplicationContext()#org.prx.playerhater.PlaybackService.seekTo(int)#<unknown>.empty()#org.prx.playerhater.PlaybackService.seekTo(int)#<unknown>.prepare(<unknown>, <unknown>)#<unknown>.onSongFinished(<unknown>)#<unknown>.equals(android.media.MediaPlayer)#<unknown>.getCurrentPosition()#<unknown>.getMediaPlayer()#<unknown>.getUri()#org.prx.playerhater.PlaybackService.getQueue()#<unknown>.onSongFinished(<unknown>)#<unknown>.isPlaying()#org.prx.playerhater.PlaybackService.getQueue()#<unknown>.getUri()#<unknown>.getNowPlaying()#<unknown>.back()#<unknown>.getPosition()#<unknown>.getPlayer(<unknown>, <unknown>)#<unknown>.setOnCompletionListener(null)#<unknown>.startTransaction()",
    "p_body_t": ["<empty>"],
    "c_patch_t": [" import org.prx.playerhater.service.PlayerHaterService;\n import org.prx.playerhater.songs.SongQueue;\n import org.prx.playerhater.songs.SongQueue.OnQueuedSongsChangedListener;\n+import org.prx.playerhater.util.Log;\n \n import android.media.MediaPlayer;\n import android.media.MediaPlayer.OnCompletionListener;\n@@ -43,12 +44,14 @@ public class PlaybackService extends PlayerHaterService implements\n \n \t@Override\n \tpublic boolean skipTo(int position) {\n+\t\tstartTransaction();\n \t\tonSongFinished(PlayerHater.FINISH_SKIP_BUTTON);\n \t\treturn getQueue().skipTo(position);\n \t}\n \n \t@Override\n \tpublic void skip() {\n+\t\tstartTransaction();\n \t\tonSongFinished(PlayerHater.FINISH_SKIP_BUTTON);\n \t\tgetQueue().next();\n \t}\n@@ -56,6 +59,7 @@ public class PlaybackService extends PlayerHaterService implements\n \t@Override\n \tpublic void skipBack() {\n \t\tif (getCurrentPosition() < 2000) {\n+\t\t\tstartTransaction();\n \t\t\tonSongFinished(PlayerHater.FINISH_SKIP_BUTTON);\n \t\t\tgetQueue().back();\n \t\t} else {\n@@ -100,16 +104,22 @@ public class PlaybackService extends PlayerHaterService implements\n \n \t@Override\n \tpublic void onNowPlayingChanged(Song nowPlaying, Song was) {\n-\t\tboolean willContinuePlaying = isPlaying();\n-\t\tSynchronousPlayer player = mMediaPlayerPool.getPlayer(\n-\t\t\t\tgetApplicationContext(), nowPlaying.getUri());\n+\t\tstartTransaction();\n+\t\tLog.d(\"Currently in state \" + getState());\n \t\tif (was == null) {\n-\t\t\tmMediaPlayerPool.recycle(swapMediaPlayer(player,\n-\t\t\t\t\twillContinuePlaying));\n+\t\t\tmMediaPlayerPool.recycle(peekMediaPlayer());\n \t\t} else {\n-\t\t\tmMediaPlayerPool.recycle(\n-\t\t\t\t\tswapMediaPlayer(player, willContinuePlaying), was.getUri());\n+\t\t\tmMediaPlayerPool.recycle(peekMediaPlayer(), was.getUri());\n \t\t}\n+\t\tLog.d(\"Currently in state \" + getState());\n+\t\tsetMediaPlayer(mMediaPlayerPool.getPlayer(getApplicationContext(),\n+\t\t\t\tnowPlaying.getUri()));\n+\t\tLog.d(\"Currently in state \" + getState());\n+\t\tif (isPlaying()) {\n+\t\t\tgetMediaPlayer().start();\n+\t\t}\n+\t\tLog.d(\"Currently in state \" + getState());\n+\t\tcommitTransaction();\n \t\tonSongChanged();\n \t}\n \n@@ -125,6 +135,7 @@ public class PlaybackService extends PlayerHaterService implements\n \t@Override\n \tpublic void onCompletion(MediaPlayer mp) {\n \t\tif (peekMediaPlayer() != null && peekMediaPlayer().equals(mp)) {\n+\t\t\tstartTransaction();\n \t\t\tonSongFinished(PlayerHater.FINISH_SONG_END);\n \t\t\tgetQueue().next();\n \t\t}\n@@ -133,6 +144,7 @@ public class PlaybackService extends PlayerHaterService implements\n \t@Override\n \tpublic boolean onError(MediaPlayer mp, int what, int extra) {\n \t\tif (peekMediaPlayer() != null && peekMediaPlayer().equals(mp)) {\n+\t\t\tstartTransaction();\n \t\t\tonSongFinished(PlayerHater.FINISH_ERROR);\n \t\t\tgetQueue().next();\n \t\t\treturn true;"],
    "c_body_t": ["<empty>"],
    "c_email_sni": "carhoden@gmail.com",
    "p_patch_t": [" package org.prx.playerhater;\n \n+import org.prx.playerhater.mediaplayer.MediaPlayerPool;\n+import org.prx.playerhater.mediaplayer.SynchronousPlayer;\n import org.prx.playerhater.service.PlayerHaterService;\n import org.prx.playerhater.songs.SongQueue;\n import org.prx.playerhater.songs.SongQueue.OnQueuedSongsChangedListener;\n \n-public class PlaybackService extends PlayerHaterService implements\n-\t\tOnQueuedSongsChangedListener {\n-\n-\t@Override\n-\tpublic boolean pause() {\n-\t\treturn getMediaPlayer().conditionalPause();\n-\t}\n+import android.media.MediaPlayer;\n+import android.media.MediaPlayer.OnCompletionListener;\n+import android.media.MediaPlayer.OnErrorListener;\n \n-\t@Override\n-\tpublic boolean stop() {\n-\t\tonStopped();\n-\t\treturn getMediaPlayer().conditionalStop();\n-\t}\n+public class PlaybackService extends PlayerHaterService implements\n+\t\tOnQueuedSongsChangedListener, OnErrorListener, OnCompletionListener {\n \n-\t@Override\n-\tpublic boolean play() {\n-\t\treturn getMediaPlayer().conditionalPlay();\n-\t}\n+\tprivate MediaPlayerPool mMediaPlayerPool;\n \n \t@Override\n-\tpublic boolean play(int startTime) {\n-\t\tgetMediaPlayer().conditionalPause();\n-\t\tgetMediaPlayer().seekTo(startTime);\n-\t\tgetMediaPlayer().conditionalPlay();\n-\t\treturn true;\n+\tpublic void onCreate() {\n+\t\tsuper.onCreate();\n+\t\tmMediaPlayerPool = new MediaPlayerPool();\n \t}\n \n \t@Override\n \tpublic boolean play(Song song, int startTime) {\n-\t\tgetMediaPlayer().prepareAndPlay(getApplicationContext(), song.getUri(),\n-\t\t\t\tstartTime);\n-\t\treturn true;\n+\t\tint position = enqueue(song);\n+\t\tonSongFinished(PlayerHater.FINISH_SKIP_BUTTON);\n+\t\tgetQueue().skipTo(position);\n+\t\tseekTo(startTime);\n+\t\treturn play();\n \t}\n \n \t@Override\n@@ -51,17 +43,24 @@ public class PlaybackService extends PlayerHaterService implements\n \n \t@Override\n \tpublic boolean skipTo(int position) {\n+\t\tonSongFinished(PlayerHater.FINISH_SKIP_BUTTON);\n \t\treturn getQueue().skipTo(position);\n \t}\n \n \t@Override\n \tpublic void skip() {\n+\t\tonSongFinished(PlayerHater.FINISH_SKIP_BUTTON);\n \t\tgetQueue().next();\n \t}\n \n \t@Override\n \tpublic void skipBack() {\n-\t\tgetQueue().back();\n+\t\tif (getCurrentPosition() < 2000) {\n+\t\t\tonSongFinished(PlayerHater.FINISH_SKIP_BUTTON);\n+\t\t\tgetQueue().back();\n+\t\t} else {\n+\t\t\tseekTo(0);\n+\t\t}\n \t}\n \n \t@Override\n@@ -91,7 +90,7 @@ public class PlaybackService extends PlayerHaterService implements\n \n \t@Override\n \tpublic int getQueuePosition() {\n-\t\treturn getQueue().getPosition();\n+\t\treturn getQueue().getPosition() + (isPlaying() ? 1 : 0);\n \t}\n \n \t@Override\n@@ -100,18 +99,61 @@ public class PlaybackService extends PlayerHaterService implements\n \t}\n \n \t@Override\n-\tpublic void onNowPlayingChanged(Song nowPlaying) {\n-\t\tgetMediaPlayer().prepare(getApplicationContext(), nowPlaying.getUri());\n+\tpublic void onNowPlayingChanged(Song nowPlaying, Song was) {\n+\t\tboolean willContinuePlaying = isPlaying();\n+\t\tSynchronousPlayer player = mMediaPlayerPool.getPlayer(\n+\t\t\t\tgetApplicationContext(), nowPlaying.getUri());\n+\t\tif (was == null) {\n+\t\t\tmMediaPlayerPool.recycle(swapMediaPlayer(player,\n+\t\t\t\t\twillContinuePlaying));\n+\t\t} else {\n+\t\t\tmMediaPlayerPool.recycle(\n+\t\t\t\t\tswapMediaPlayer(player, willContinuePlaying), was.getUri());\n+\t\t}\n \t\tonSongChanged();\n \t}\n \n \t@Override\n-\tpublic void onNextSongChanged(Song nextSong) {\n+\tpublic void onNextSongChanged(Song nextSong, Song was) {\n+\t\tif (nextSong != null) {\n+\t\t\tmMediaPlayerPool\n+\t\t\t\t\t.prepare(getApplicationContext(), nextSong.getUri());\n+\t\t}\n \t\tonNextSongChanged();\n \t}\n-\t\n+\n+\t@Override\n+\tpublic void onCompletion(MediaPlayer mp) {\n+\t\tif (peekMediaPlayer() != null && peekMediaPlayer().equals(mp)) {\n+\t\t\tonSongFinished(PlayerHater.FINISH_SONG_END);\n+\t\t\tgetQueue().next();\n+\t\t}\n+\t}\n+\n+\t@Override\n+\tpublic boolean onError(MediaPlayer mp, int what, int extra) {\n+\t\tif (peekMediaPlayer() != null && peekMediaPlayer().equals(mp)) {\n+\t\t\tonSongFinished(PlayerHater.FINISH_ERROR);\n+\t\t\tgetQueue().next();\n+\t\t\treturn true;\n+\t\t}\n+\t\treturn false;\n+\t}\n+\n \t@Override\n \tpublic Song getNextSong() {\n \t\treturn getQueue().getNextPlaying();\n \t}\n+\n+\t@Override\n+\tprotected void setMediaPlayer(SynchronousPlayer mediaPlayer) {\n+\t\tSynchronousPlayer oldPlayer = peekMediaPlayer();\n+\t\tif (oldPlayer != null) {\n+\t\t\toldPlayer.setOnErrorListener(null);\n+\t\t\toldPlayer.setOnCompletionListener(null);\n+\t\t}\n+\t\tsuper.setMediaPlayer(mediaPlayer);\n+\t\tmediaPlayer.setOnErrorListener(this);\n+\t\tmediaPlayer.setOnCompletionListener(this);\n+\t}\n }"],
    "repo_sni": "chrisrhoden/PlayerHater",
    "_version_": 1526826138538606592,
    "c_user_sni": "chrisrhoden",
    "c_callsites_added_cs": "<unknown>.d(<unknown>)#<unknown>.getState()#<unknown>.startTransaction()#org.prx.playerhater.PlaybackService.setMediaPlayer(<unknown>)#<unknown>.startTransaction()#<unknown>.startTransaction()#<unknown>.start()#<unknown>.commitTransaction()#<unknown>.startTransaction()#<unknown>.startTransaction()#<unknown>.peekMediaPlayer()#<unknown>.getMediaPlayer()#<unknown>.startTransaction()",
    "p_parents_ss": ["2ff9c40d96a27549a40442f7e9acb99f766cafe5"],
    "p_user_sni": "chrisrhoden",
    "c_subject_t": ["transact player changes"],
    "c_imports_added_cs": "org.prx.playerhater.util.Log",
    "c_callsites_removed_cs": "<unknown>.swapMediaPlayer(org.prx.playerhater.SynchronousPlayer, boolean)"
  }, {
    "c_patch_no_context_t": ["-\t\tLog.d(\"Currently in state \" + getState());\n-\t\tif (was == null) {\n-\t\t\tmMediaPlayerPool.recycle(peekMediaPlayer());\n-\t\t} else {\n-\t\t\tmMediaPlayerPool.recycle(peekMediaPlayer(), was.getUri());\n+\t\tif (peekMediaPlayer() != null) {\n+\t\t\tmMediaPlayerPool.recycle(peekMediaPlayer(), was == null ? null : was.getUri());\n-\t\tLog.d(\"Currently in state \" + getState());\n-\t\tLog.d(\"Currently in state \" + getState());\n-\t\tLog.d(\"Currently in state \" + getState());\n+\t\t\tSynchronousPlayer player = peekMediaPlayer();\n+\t\t\tsetMediaPlayer(null);\n+\t\t\tmMediaPlayerPool.recycle(player, nowPlaying().getUri());\n+\t\t\tSynchronousPlayer player = peekMediaPlayer();\n+\t\t\tsetMediaPlayer(null);\n+\t\t\tmMediaPlayerPool.recycle(player, nowPlaying().getUri());"],
    "p_patch_no_context_t": ["+import org.prx.playerhater.util.Log;\n+\t\tstartTransaction();\n+\t\tstartTransaction();\n+\t\t\tstartTransaction();\n-\t\tboolean willContinuePlaying = isPlaying();\n-\t\tSynchronousPlayer player = mMediaPlayerPool.getPlayer(\n-\t\t\t\tgetApplicationContext(), nowPlaying.getUri());\n+\t\tstartTransaction();\n+\t\tLog.d(\"Currently in state \" + getState());\n-\t\t\tmMediaPlayerPool.recycle(swapMediaPlayer(player,\n-\t\t\t\t\twillContinuePlaying));\n+\t\t\tmMediaPlayerPool.recycle(peekMediaPlayer());\n-\t\t\tmMediaPlayerPool.recycle(\n-\t\t\t\t\tswapMediaPlayer(player, willContinuePlaying), was.getUri());\n+\t\t\tmMediaPlayerPool.recycle(peekMediaPlayer(), was.getUri());\n+\t\tLog.d(\"Currently in state \" + getState());\n+\t\tsetMediaPlayer(mMediaPlayerPool.getPlayer(getApplicationContext(),\n+\t\t\t\tnowPlaying.getUri()));\n+\t\tLog.d(\"Currently in state \" + getState());\n+\t\tif (isPlaying()) {\n+\t\t\tgetMediaPlayer().start();\n+\t\t}\n+\t\tLog.d(\"Currently in state \" + getState());\n+\t\tcommitTransaction();\n+\t\t\tstartTransaction();\n+\t\t\tstartTransaction();"],
    "c_date_tdt": "May 31, 2013 1:53:27 PM",
    "c_imports_t": ["org.prx.playerhater.songs.SongQueue org.prx.playerhater.util.Log org.prx.playerhater.service.PlayerHaterService android.media.MediaPlayer.OnCompletionListener org.prx.playerhater.mediaplayer.SynchronousPlayer org.prx.playerhater.songs.SongQueue.OnQueuedSongsChangedListener android.media.MediaPlayer.OnErrorListener android.media.MediaPlayer org.prx.playerhater.mediaplayer.MediaPlayerPool"],
    "c_contents_t": ["package org.prx.playerhater;\n\nimport org.prx.playerhater.mediaplayer.MediaPlayerPool;\nimport org.prx.playerhater.mediaplayer.SynchronousPlayer;\nimport org.prx.playerhater.service.PlayerHaterService;\nimport org.prx.playerhater.songs.SongQueue;\nimport org.prx.playerhater.songs.SongQueue.OnQueuedSongsChangedListener;\nimport org.prx.playerhater.util.Log;\n\nimport android.media.MediaPlayer;\nimport android.media.MediaPlayer.OnCompletionListener;\nimport android.media.MediaPlayer.OnErrorListener;\n\npublic class PlaybackService extends PlayerHaterService implements\n\t\tOnQueuedSongsChangedListener, OnErrorListener, OnCompletionListener {\n\n\tprivate MediaPlayerPool mMediaPlayerPool;\n\n\t@Override\n\tpublic void onCreate() {\n\t\tsuper.onCreate();\n\t\tmMediaPlayerPool = new MediaPlayerPool();\n\t}\n\n\t@Override\n\tpublic boolean play(Song song, int startTime) {\n\t\tint position = enqueue(song);\n\t\tonSongFinished(PlayerHater.FINISH_SKIP_BUTTON);\n\t\tgetQueue().skipTo(position);\n\t\tseekTo(startTime);\n\t\treturn play();\n\t}\n\n\t@Override\n\tpublic boolean seekTo(int startTime) {\n\t\tgetMediaPlayer().seekTo(startTime);\n\t\treturn true;\n\t}\n\n\t@Override\n\tpublic int enqueue(Song song) {\n\t\treturn getQueue().appendSong(song);\n\t}\n\n\t@Override\n\tpublic boolean skipTo(int position) {\n\t\tstartTransaction();\n\t\tonSongFinished(PlayerHater.FINISH_SKIP_BUTTON);\n\t\treturn getQueue().skipTo(position);\n\t}\n\n\t@Override\n\tpublic void skip() {\n\t\tstartTransaction();\n\t\tonSongFinished(PlayerHater.FINISH_SKIP_BUTTON);\n\t\tgetQueue().next();\n\t}\n\n\t@Override\n\tpublic void skipBack() {\n\t\tif (getCurrentPosition() < 2000) {\n\t\t\tstartTransaction();\n\t\t\tonSongFinished(PlayerHater.FINISH_SKIP_BUTTON);\n\t\t\tgetQueue().back();\n\t\t} else {\n\t\t\tseekTo(0);\n\t\t}\n\t}\n\n\t@Override\n\tpublic void emptyQueue() {\n\t\tgetQueue().empty();\n\t}\n\n\t@Override\n\tpublic Song nowPlaying() {\n\t\treturn getQueue().getNowPlaying();\n\t}\n\n\tprivate SongQueue mQueue;\n\n\tprivate SongQueue getQueue() {\n\t\tif (mQueue == null) {\n\t\t\tmQueue = new SongQueue();\n\t\t\tmQueue.setQueuedSongsChangedListener(this);\n\t\t}\n\t\treturn mQueue;\n\t}\n\n\t@Override\n\tpublic int getQueueLength() {\n\t\treturn getQueue().size();\n\t}\n\n\t@Override\n\tpublic int getQueuePosition() {\n\t\treturn getQueue().getPosition() + (isPlaying() ? 1 : 0);\n\t}\n\n\t@Override\n\tpublic boolean removeFromQueue(int position) {\n\t\treturn getQueue().remove(position);\n\t}\n\n\t@Override\n\tpublic void onNowPlayingChanged(Song nowPlaying, Song was) {\n\t\tstartTransaction();\n\t\tif (peekMediaPlayer() != null) {\n\t\t\tmMediaPlayerPool.recycle(peekMediaPlayer(), was == null ? null : was.getUri());\n\t\t}\n\t\tsetMediaPlayer(mMediaPlayerPool.getPlayer(getApplicationContext(),\n\t\t\t\tnowPlaying.getUri()));\n\t\tif (isPlaying()) {\n\t\t\tgetMediaPlayer().start();\n\t\t}\n\t\tcommitTransaction();\n\t\tonSongChanged();\n\t}\n\n\t@Override\n\tpublic void onNextSongChanged(Song nextSong, Song was) {\n\t\tif (nextSong != null) {\n\t\t\tmMediaPlayerPool\n\t\t\t\t\t.prepare(getApplicationContext(), nextSong.getUri());\n\t\t}\n\t\tonNextSongChanged();\n\t}\n\n\t@Override\n\tpublic void onCompletion(MediaPlayer mp) {\n\t\tif (peekMediaPlayer() != null && peekMediaPlayer().equals(mp)) {\n\t\t\tstartTransaction();\n\t\t\tSynchronousPlayer player = peekMediaPlayer();\n\t\t\tsetMediaPlayer(null);\n\t\t\tmMediaPlayerPool.recycle(player, nowPlaying().getUri());\n\t\t\tonSongFinished(PlayerHater.FINISH_SONG_END);\n\t\t\tgetQueue().next();\n\t\t}\n\t}\n\n\t@Override\n\tpublic boolean onError(MediaPlayer mp, int what, int extra) {\n\t\tif (peekMediaPlayer() != null && peekMediaPlayer().equals(mp)) {\n\t\t\tstartTransaction();\n\t\t\tSynchronousPlayer player = peekMediaPlayer();\n\t\t\tsetMediaPlayer(null);\n\t\t\tmMediaPlayerPool.recycle(player, nowPlaying().getUri());\n\t\t\tonSongFinished(PlayerHater.FINISH_ERROR);\n\t\t\tgetQueue().next();\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\t@Override\n\tpublic Song getNextSong() {\n\t\treturn getQueue().getNextPlaying();\n\t}\n\n\t@Override\n\tprotected void setMediaPlayer(SynchronousPlayer mediaPlayer) {\n\t\tSynchronousPlayer oldPlayer = peekMediaPlayer();\n\t\tif (oldPlayer != null) {\n\t\t\toldPlayer.setOnErrorListener(null);\n\t\t\toldPlayer.setOnCompletionListener(null);\n\t\t}\n\t\tsuper.setMediaPlayer(mediaPlayer);\n\t\tmediaPlayer.setOnErrorListener(this);\n\t\tmediaPlayer.setOnCompletionListener(this);\n\t}\n}\n"],
    "p_date_tdt": "May 31, 2013 1:07:52 PM",
    "c_comments_t": ["<empty>"],
    "p_contents_t": ["package org.prx.playerhater;\n\nimport org.prx.playerhater.mediaplayer.MediaPlayerPool;\nimport org.prx.playerhater.mediaplayer.SynchronousPlayer;\nimport org.prx.playerhater.service.PlayerHaterService;\nimport org.prx.playerhater.songs.SongQueue;\nimport org.prx.playerhater.songs.SongQueue.OnQueuedSongsChangedListener;\nimport org.prx.playerhater.util.Log;\n\nimport android.media.MediaPlayer;\nimport android.media.MediaPlayer.OnCompletionListener;\nimport android.media.MediaPlayer.OnErrorListener;\n\npublic class PlaybackService extends PlayerHaterService implements\n\t\tOnQueuedSongsChangedListener, OnErrorListener, OnCompletionListener {\n\n\tprivate MediaPlayerPool mMediaPlayerPool;\n\n\t@Override\n\tpublic void onCreate() {\n\t\tsuper.onCreate();\n\t\tmMediaPlayerPool = new MediaPlayerPool();\n\t}\n\n\t@Override\n\tpublic boolean play(Song song, int startTime) {\n\t\tint position = enqueue(song);\n\t\tonSongFinished(PlayerHater.FINISH_SKIP_BUTTON);\n\t\tgetQueue().skipTo(position);\n\t\tseekTo(startTime);\n\t\treturn play();\n\t}\n\n\t@Override\n\tpublic boolean seekTo(int startTime) {\n\t\tgetMediaPlayer().seekTo(startTime);\n\t\treturn true;\n\t}\n\n\t@Override\n\tpublic int enqueue(Song song) {\n\t\treturn getQueue().appendSong(song);\n\t}\n\n\t@Override\n\tpublic boolean skipTo(int position) {\n\t\tstartTransaction();\n\t\tonSongFinished(PlayerHater.FINISH_SKIP_BUTTON);\n\t\treturn getQueue().skipTo(position);\n\t}\n\n\t@Override\n\tpublic void skip() {\n\t\tstartTransaction();\n\t\tonSongFinished(PlayerHater.FINISH_SKIP_BUTTON);\n\t\tgetQueue().next();\n\t}\n\n\t@Override\n\tpublic void skipBack() {\n\t\tif (getCurrentPosition() < 2000) {\n\t\t\tstartTransaction();\n\t\t\tonSongFinished(PlayerHater.FINISH_SKIP_BUTTON);\n\t\t\tgetQueue().back();\n\t\t} else {\n\t\t\tseekTo(0);\n\t\t}\n\t}\n\n\t@Override\n\tpublic void emptyQueue() {\n\t\tgetQueue().empty();\n\t}\n\n\t@Override\n\tpublic Song nowPlaying() {\n\t\treturn getQueue().getNowPlaying();\n\t}\n\n\tprivate SongQueue mQueue;\n\n\tprivate SongQueue getQueue() {\n\t\tif (mQueue == null) {\n\t\t\tmQueue = new SongQueue();\n\t\t\tmQueue.setQueuedSongsChangedListener(this);\n\t\t}\n\t\treturn mQueue;\n\t}\n\n\t@Override\n\tpublic int getQueueLength() {\n\t\treturn getQueue().size();\n\t}\n\n\t@Override\n\tpublic int getQueuePosition() {\n\t\treturn getQueue().getPosition() + (isPlaying() ? 1 : 0);\n\t}\n\n\t@Override\n\tpublic boolean removeFromQueue(int position) {\n\t\treturn getQueue().remove(position);\n\t}\n\n\t@Override\n\tpublic void onNowPlayingChanged(Song nowPlaying, Song was) {\n\t\tstartTransaction();\n\t\tLog.d(\"Currently in state \" + getState());\n\t\tif (was == null) {\n\t\t\tmMediaPlayerPool.recycle(peekMediaPlayer());\n\t\t} else {\n\t\t\tmMediaPlayerPool.recycle(peekMediaPlayer(), was.getUri());\n\t\t}\n\t\tLog.d(\"Currently in state \" + getState());\n\t\tsetMediaPlayer(mMediaPlayerPool.getPlayer(getApplicationContext(),\n\t\t\t\tnowPlaying.getUri()));\n\t\tLog.d(\"Currently in state \" + getState());\n\t\tif (isPlaying()) {\n\t\t\tgetMediaPlayer().start();\n\t\t}\n\t\tLog.d(\"Currently in state \" + getState());\n\t\tcommitTransaction();\n\t\tonSongChanged();\n\t}\n\n\t@Override\n\tpublic void onNextSongChanged(Song nextSong, Song was) {\n\t\tif (nextSong != null) {\n\t\t\tmMediaPlayerPool\n\t\t\t\t\t.prepare(getApplicationContext(), nextSong.getUri());\n\t\t}\n\t\tonNextSongChanged();\n\t}\n\n\t@Override\n\tpublic void onCompletion(MediaPlayer mp) {\n\t\tif (peekMediaPlayer() != null && peekMediaPlayer().equals(mp)) {\n\t\t\tstartTransaction();\n\t\t\tonSongFinished(PlayerHater.FINISH_SONG_END);\n\t\t\tgetQueue().next();\n\t\t}\n\t}\n\n\t@Override\n\tpublic boolean onError(MediaPlayer mp, int what, int extra) {\n\t\tif (peekMediaPlayer() != null && peekMediaPlayer().equals(mp)) {\n\t\t\tstartTransaction();\n\t\t\tonSongFinished(PlayerHater.FINISH_ERROR);\n\t\t\tgetQueue().next();\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\t@Override\n\tpublic Song getNextSong() {\n\t\treturn getQueue().getNextPlaying();\n\t}\n\n\t@Override\n\tprotected void setMediaPlayer(SynchronousPlayer mediaPlayer) {\n\t\tSynchronousPlayer oldPlayer = peekMediaPlayer();\n\t\tif (oldPlayer != null) {\n\t\t\toldPlayer.setOnErrorListener(null);\n\t\t\toldPlayer.setOnCompletionListener(null);\n\t\t}\n\t\tsuper.setMediaPlayer(mediaPlayer);\n\t\tmediaPlayer.setOnErrorListener(this);\n\t\tmediaPlayer.setOnCompletionListener(this);\n\t}\n}\n"],
    "c_hash_sni": "016e87cd537186f979b4abb14c640679a02d91b1",
    "name_sni": "src/org/prx/playerhater/PlaybackService.java",
    "c_parents_ss": ["32d9e7db8bb4324c6638adea2e43a7cfbf173797"],
    "c_imports_removed_t": ["<empty>"],
    "p_hash_sni": "32d9e7db8bb4324c6638adea2e43a7cfbf173797",
    "c_imports_added_t": ["<empty>"],
    "p_methods_t": ["MediaPlayerPool SongQueue appendSong back commitTransaction d empty enqueue equals getApplicationContext getCurrentPosition getMediaPlayer getNextPlaying getNowPlaying getPlayer getPosition getQueue getState getUri isPlaying next onNextSongChanged onSongChanged onSongFinished peekMediaPlayer play prepare recycle remove seekTo setMediaPlayer setOnCompletionListener setOnErrorListener setQueuedSongsChangedListener size skipTo start startTransaction"],
    "c_imports_removed_cs": "<empty>",
    "p_imports_t": ["org.prx.playerhater.songs.SongQueue org.prx.playerhater.util.Log org.prx.playerhater.service.PlayerHaterService android.media.MediaPlayer.OnCompletionListener org.prx.playerhater.mediaplayer.SynchronousPlayer org.prx.playerhater.songs.SongQueue.OnQueuedSongsChangedListener android.media.MediaPlayer.OnErrorListener android.media.MediaPlayer org.prx.playerhater.mediaplayer.MediaPlayerPool"],
    "p_subject_t": ["transact player changes"],
    "p_callsites_cs": "<unknown>.peekMediaPlayer()#<unknown>.setOnErrorListener(null)#<unknown>.recycle(<unknown>)#<unknown>.remove(int)#<unknown>.skipTo(int)#org.prx.playerhater.PlaybackService.getQueue()#<unknown>.setQueuedSongsChangedListener(org.prx.playerhater.PlaybackService)#<unknown>.SongQueue()#org.prx.playerhater.PlaybackService.enqueue(org.prx.playerhater.Song)#<unknown>.d(<unknown>)#<unknown>.next()#<unknown>.next()#<unknown>.onSongFinished(<unknown>)#<unknown>.getMediaPlayer()#<unknown>.equals(android.media.MediaPlayer)#<unknown>.peekMediaPlayer()#<unknown>.setOnCompletionListener(org.prx.playerhater.PlaybackService)#org.prx.playerhater.PlaybackService.getQueue()#<unknown>.onSongFinished(<unknown>)#<unknown>.getState()#<unknown>.next()#<unknown>.startTransaction()#org.prx.playerhater.PlaybackService.getQueue()#org.prx.playerhater.PlaybackService.getQueue()#<unknown>.setOnErrorListener(org.prx.playerhater.PlaybackService)#org.prx.playerhater.PlaybackService.setMediaPlayer(<unknown>)#<unknown>.onSongFinished(<unknown>)#<unknown>.skipTo(int)#org.prx.playerhater.PlaybackService.onNextSongChanged()#org.prx.playerhater.PlaybackService.play()#<unknown>.appendSong(org.prx.playerhater.Song)#<unknown>.onSongFinished(<unknown>)#org.prx.playerhater.PlaybackService.getQueue()#<unknown>.seekTo(int)#<unknown>.recycle(<unknown>, <unknown>)#<unknown>.startTransaction()#org.prx.playerhater.PlaybackService.getQueue()#org.prx.playerhater.PlaybackService.getQueue()#<unknown>.startTransaction()#org.prx.playerhater.PlaybackService.getQueue()#<unknown>.start()#<unknown>.onSongChanged()#<unknown>.isPlaying()#<unknown>.getNextPlaying()#<unknown>.size()#<unknown>.commitTransaction()#<unknown>.startTransaction()#<unknown>.getUri()#<unknown>.MediaPlayerPool()#<unknown>.getApplicationContext()#org.prx.playerhater.PlaybackService.getQueue()#<unknown>.startTransaction()#<unknown>.peekMediaPlayer()#<unknown>.peekMediaPlayer()#org.prx.playerhater.PlaybackService.getQueue()#org.prx.playerhater.PlaybackService.getQueue()#<unknown>.getApplicationContext()#org.prx.playerhater.PlaybackService.seekTo(int)#<unknown>.empty()#org.prx.playerhater.PlaybackService.seekTo(int)#<unknown>.prepare(<unknown>, <unknown>)#<unknown>.onSongFinished(<unknown>)#<unknown>.equals(android.media.MediaPlayer)#<unknown>.getCurrentPosition()#<unknown>.getMediaPlayer()#<unknown>.getUri()#org.prx.playerhater.PlaybackService.getQueue()#<unknown>.onSongFinished(<unknown>)#<unknown>.isPlaying()#org.prx.playerhater.PlaybackService.getQueue()#<unknown>.getUri()#<unknown>.getNowPlaying()#<unknown>.back()#<unknown>.getPosition()#<unknown>.getPlayer(<unknown>, <unknown>)#<unknown>.setOnCompletionListener(null)#<unknown>.startTransaction()",
    "p_callsites_t": ["<unknown>.peekMediaPlayer() <unknown>.setOnErrorListener(null) <unknown>.recycle(<unknown>) <unknown>.remove(int) <unknown>.skipTo(int) org.prx.playerhater.PlaybackService.getQueue() <unknown>.setQueuedSongsChangedListener(org.prx.playerhater.PlaybackService) <unknown>.SongQueue() org.prx.playerhater.PlaybackService.enqueue(org.prx.playerhater.Song) <unknown>.d(<unknown>) <unknown>.next() <unknown>.next() <unknown>.onSongFinished(<unknown>) <unknown>.getMediaPlayer() <unknown>.equals(android.media.MediaPlayer) <unknown>.peekMediaPlayer() <unknown>.setOnCompletionListener(org.prx.playerhater.PlaybackService) org.prx.playerhater.PlaybackService.getQueue() <unknown>.onSongFinished(<unknown>) <unknown>.getState() <unknown>.next() <unknown>.startTransaction() org.prx.playerhater.PlaybackService.getQueue() org.prx.playerhater.PlaybackService.getQueue() <unknown>.setOnErrorListener(org.prx.playerhater.PlaybackService) org.prx.playerhater.PlaybackService.setMediaPlayer(<unknown>) <unknown>.onSongFinished(<unknown>) <unknown>.skipTo(int) org.prx.playerhater.PlaybackService.onNextSongChanged() org.prx.playerhater.PlaybackService.play() <unknown>.appendSong(org.prx.playerhater.Song) <unknown>.onSongFinished(<unknown>) org.prx.playerhater.PlaybackService.getQueue() <unknown>.seekTo(int) <unknown>.recycle(<unknown>, <unknown>) <unknown>.startTransaction() org.prx.playerhater.PlaybackService.getQueue() org.prx.playerhater.PlaybackService.getQueue() <unknown>.startTransaction() org.prx.playerhater.PlaybackService.getQueue() <unknown>.start() <unknown>.onSongChanged() <unknown>.isPlaying() <unknown>.getNextPlaying() <unknown>.size() <unknown>.commitTransaction() <unknown>.startTransaction() <unknown>.getUri() <unknown>.MediaPlayerPool() <unknown>.getApplicationContext() org.prx.playerhater.PlaybackService.getQueue() <unknown>.startTransaction() <unknown>.peekMediaPlayer() <unknown>.peekMediaPlayer() org.prx.playerhater.PlaybackService.getQueue() org.prx.playerhater.PlaybackService.getQueue() <unknown>.getApplicationContext() org.prx.playerhater.PlaybackService.seekTo(int) <unknown>.empty() org.prx.playerhater.PlaybackService.seekTo(int) <unknown>.prepare(<unknown>, <unknown>) <unknown>.onSongFinished(<unknown>) <unknown>.equals(android.media.MediaPlayer) <unknown>.getCurrentPosition() <unknown>.getMediaPlayer() <unknown>.getUri() org.prx.playerhater.PlaybackService.getQueue() <unknown>.onSongFinished(<unknown>) <unknown>.isPlaying() org.prx.playerhater.PlaybackService.getQueue() <unknown>.getUri() <unknown>.getNowPlaying() <unknown>.back() <unknown>.getPosition() <unknown>.getPlayer(<unknown>, <unknown>) <unknown>.setOnCompletionListener(null) <unknown>.startTransaction()"],
    "c_callsites_t": ["<unknown>.peekMediaPlayer() <unknown>.setOnErrorListener(null) org.prx.playerhater.PlaybackService.setMediaPlayer(null) <unknown>.remove(int) <unknown>.skipTo(int) org.prx.playerhater.PlaybackService.getQueue() <unknown>.recycle(org.prx.playerhater.SynchronousPlayer, <unknown>) <unknown>.setQueuedSongsChangedListener(org.prx.playerhater.PlaybackService) <unknown>.SongQueue() org.prx.playerhater.PlaybackService.enqueue(org.prx.playerhater.Song) <unknown>.next() <unknown>.next() <unknown>.onSongFinished(<unknown>) <unknown>.getMediaPlayer() <unknown>.equals(android.media.MediaPlayer) <unknown>.peekMediaPlayer() <unknown>.setOnCompletionListener(org.prx.playerhater.PlaybackService) org.prx.playerhater.PlaybackService.getQueue() <unknown>.recycle(org.prx.playerhater.SynchronousPlayer, <unknown>) <unknown>.onSongFinished(<unknown>) <unknown>.next() <unknown>.startTransaction() org.prx.playerhater.PlaybackService.getQueue() org.prx.playerhater.PlaybackService.setMediaPlayer(null) org.prx.playerhater.PlaybackService.getQueue() <unknown>.setOnErrorListener(org.prx.playerhater.PlaybackService) org.prx.playerhater.PlaybackService.setMediaPlayer(<unknown>) org.prx.playerhater.PlaybackService.nowPlaying() <unknown>.onSongFinished(<unknown>) <unknown>.skipTo(int) org.prx.playerhater.PlaybackService.onNextSongChanged() org.prx.playerhater.PlaybackService.play() <unknown>.appendSong(org.prx.playerhater.Song) <unknown>.onSongFinished(<unknown>) org.prx.playerhater.PlaybackService.getQueue() <unknown>.seekTo(int) <unknown>.startTransaction() <unknown>.getUri() org.prx.playerhater.PlaybackService.getQueue() org.prx.playerhater.PlaybackService.getQueue() <unknown>.startTransaction() org.prx.playerhater.PlaybackService.getQueue() <unknown>.start() <unknown>.onSongChanged() org.prx.playerhater.PlaybackService.nowPlaying() <unknown>.isPlaying() <unknown>.getNextPlaying() <unknown>.size() <unknown>.commitTransaction() <unknown>.startTransaction() <unknown>.getUri() <unknown>.MediaPlayerPool() <unknown>.getApplicationContext() org.prx.playerhater.PlaybackService.getQueue() <unknown>.startTransaction() <unknown>.peekMediaPlayer() <unknown>.peekMediaPlayer() <unknown>.recycle(<unknown>, <unknown>) <unknown>.getUri() org.prx.playerhater.PlaybackService.getQueue() org.prx.playerhater.PlaybackService.getQueue() <unknown>.getApplicationContext() org.prx.playerhater.PlaybackService.seekTo(int) <unknown>.empty() org.prx.playerhater.PlaybackService.seekTo(int) <unknown>.prepare(<unknown>, <unknown>) <unknown>.onSongFinished(<unknown>) <unknown>.equals(android.media.MediaPlayer) <unknown>.getCurrentPosition() <unknown>.getMediaPlayer() <unknown>.getUri() org.prx.playerhater.PlaybackService.getQueue() <unknown>.onSongFinished(<unknown>) <unknown>.isPlaying() org.prx.playerhater.PlaybackService.getQueue() <unknown>.getUri() <unknown>.getNowPlaying() <unknown>.back() <unknown>.getPosition() <unknown>.getPlayer(<unknown>, <unknown>) <unknown>.setOnCompletionListener(null) <unknown>.startTransaction()"],
    "c_callsites_added_t": ["org.prx.playerhater.PlaybackService.setMediaPlayer(null) <unknown>.recycle(org.prx.playerhater.SynchronousPlayer, <unknown>) <unknown>.recycle(org.prx.playerhater.SynchronousPlayer, <unknown>) org.prx.playerhater.PlaybackService.setMediaPlayer(null) org.prx.playerhater.PlaybackService.nowPlaying() org.prx.playerhater.PlaybackService.nowPlaying() <unknown>.getUri() <unknown>.getUri()"],
    "c_methods_t": ["MediaPlayerPool SongQueue appendSong back commitTransaction empty enqueue equals getApplicationContext getCurrentPosition getMediaPlayer getNextPlaying getNowPlaying getPlayer getPosition getQueue getUri isPlaying next nowPlaying onNextSongChanged onSongChanged onSongFinished peekMediaPlayer play prepare recycle remove seekTo setMediaPlayer setOnCompletionListener setOnErrorListener setQueuedSongsChangedListener size skipTo start startTransaction"],
    "id": "chrisrhoden/PlayerHater\u0000src/org/prx/playerhater/PlaybackService.java\u000032d9e7db8bb4324c6638adea2e43a7cfbf173797\u0000016e87cd537186f979b4abb14c640679a02d91b1",
    "p_comments_t": ["<empty>"],
    "p_email_sni": "carhoden@gmail.com",
    "c_callsites_removed_t": ["<unknown>.recycle(<unknown>) <unknown>.d(<unknown>) <unknown>.getState()"],
    "c_callsites_cs": "<unknown>.peekMediaPlayer()#<unknown>.setOnErrorListener(null)#org.prx.playerhater.PlaybackService.setMediaPlayer(null)#<unknown>.remove(int)#<unknown>.skipTo(int)#org.prx.playerhater.PlaybackService.getQueue()#<unknown>.recycle(org.prx.playerhater.SynchronousPlayer, <unknown>)#<unknown>.setQueuedSongsChangedListener(org.prx.playerhater.PlaybackService)#<unknown>.SongQueue()#org.prx.playerhater.PlaybackService.enqueue(org.prx.playerhater.Song)#<unknown>.next()#<unknown>.next()#<unknown>.onSongFinished(<unknown>)#<unknown>.getMediaPlayer()#<unknown>.equals(android.media.MediaPlayer)#<unknown>.peekMediaPlayer()#<unknown>.setOnCompletionListener(org.prx.playerhater.PlaybackService)#org.prx.playerhater.PlaybackService.getQueue()#<unknown>.recycle(org.prx.playerhater.SynchronousPlayer, <unknown>)#<unknown>.onSongFinished(<unknown>)#<unknown>.next()#<unknown>.startTransaction()#org.prx.playerhater.PlaybackService.getQueue()#org.prx.playerhater.PlaybackService.setMediaPlayer(null)#org.prx.playerhater.PlaybackService.getQueue()#<unknown>.setOnErrorListener(org.prx.playerhater.PlaybackService)#org.prx.playerhater.PlaybackService.setMediaPlayer(<unknown>)#org.prx.playerhater.PlaybackService.nowPlaying()#<unknown>.onSongFinished(<unknown>)#<unknown>.skipTo(int)#org.prx.playerhater.PlaybackService.onNextSongChanged()#org.prx.playerhater.PlaybackService.play()#<unknown>.appendSong(org.prx.playerhater.Song)#<unknown>.onSongFinished(<unknown>)#org.prx.playerhater.PlaybackService.getQueue()#<unknown>.seekTo(int)#<unknown>.startTransaction()#<unknown>.getUri()#org.prx.playerhater.PlaybackService.getQueue()#org.prx.playerhater.PlaybackService.getQueue()#<unknown>.startTransaction()#org.prx.playerhater.PlaybackService.getQueue()#<unknown>.start()#<unknown>.onSongChanged()#org.prx.playerhater.PlaybackService.nowPlaying()#<unknown>.isPlaying()#<unknown>.getNextPlaying()#<unknown>.size()#<unknown>.commitTransaction()#<unknown>.startTransaction()#<unknown>.getUri()#<unknown>.MediaPlayerPool()#<unknown>.getApplicationContext()#org.prx.playerhater.PlaybackService.getQueue()#<unknown>.startTransaction()#<unknown>.peekMediaPlayer()#<unknown>.peekMediaPlayer()#<unknown>.recycle(<unknown>, <unknown>)#<unknown>.getUri()#org.prx.playerhater.PlaybackService.getQueue()#org.prx.playerhater.PlaybackService.getQueue()#<unknown>.getApplicationContext()#org.prx.playerhater.PlaybackService.seekTo(int)#<unknown>.empty()#org.prx.playerhater.PlaybackService.seekTo(int)#<unknown>.prepare(<unknown>, <unknown>)#<unknown>.onSongFinished(<unknown>)#<unknown>.equals(android.media.MediaPlayer)#<unknown>.getCurrentPosition()#<unknown>.getMediaPlayer()#<unknown>.getUri()#org.prx.playerhater.PlaybackService.getQueue()#<unknown>.onSongFinished(<unknown>)#<unknown>.isPlaying()#org.prx.playerhater.PlaybackService.getQueue()#<unknown>.getUri()#<unknown>.getNowPlaying()#<unknown>.back()#<unknown>.getPosition()#<unknown>.getPlayer(<unknown>, <unknown>)#<unknown>.setOnCompletionListener(null)#<unknown>.startTransaction()",
    "p_body_t": ["<empty>"],
    "c_patch_t": [" \t@Override\n \tpublic void onNowPlayingChanged(Song nowPlaying, Song was) {\n \t\tstartTransaction();\n-\t\tLog.d(\"Currently in state \" + getState());\n-\t\tif (was == null) {\n-\t\t\tmMediaPlayerPool.recycle(peekMediaPlayer());\n-\t\t} else {\n-\t\t\tmMediaPlayerPool.recycle(peekMediaPlayer(), was.getUri());\n+\t\tif (peekMediaPlayer() != null) {\n+\t\t\tmMediaPlayerPool.recycle(peekMediaPlayer(), was == null ? null : was.getUri());\n \t\t}\n-\t\tLog.d(\"Currently in state \" + getState());\n \t\tsetMediaPlayer(mMediaPlayerPool.getPlayer(getApplicationContext(),\n \t\t\t\tnowPlaying.getUri()));\n-\t\tLog.d(\"Currently in state \" + getState());\n \t\tif (isPlaying()) {\n \t\t\tgetMediaPlayer().start();\n \t\t}\n-\t\tLog.d(\"Currently in state \" + getState());\n \t\tcommitTransaction();\n \t\tonSongChanged();\n \t}\n@@ -136,6 +130,9 @@ public class PlaybackService extends PlayerHaterService implements\n \tpublic void onCompletion(MediaPlayer mp) {\n \t\tif (peekMediaPlayer() != null && peekMediaPlayer().equals(mp)) {\n \t\t\tstartTransaction();\n+\t\t\tSynchronousPlayer player = peekMediaPlayer();\n+\t\t\tsetMediaPlayer(null);\n+\t\t\tmMediaPlayerPool.recycle(player, nowPlaying().getUri());\n \t\t\tonSongFinished(PlayerHater.FINISH_SONG_END);\n \t\t\tgetQueue().next();\n \t\t}\n@@ -145,6 +142,9 @@ public class PlaybackService extends PlayerHaterService implements\n \tpublic boolean onError(MediaPlayer mp, int what, int extra) {\n \t\tif (peekMediaPlayer() != null && peekMediaPlayer().equals(mp)) {\n \t\t\tstartTransaction();\n+\t\t\tSynchronousPlayer player = peekMediaPlayer();\n+\t\t\tsetMediaPlayer(null);\n+\t\t\tmMediaPlayerPool.recycle(player, nowPlaying().getUri());\n \t\t\tonSongFinished(PlayerHater.FINISH_ERROR);\n \t\t\tgetQueue().next();\n \t\t\treturn true;"],
    "c_body_t": ["<empty>"],
    "c_email_sni": "carhoden@gmail.com",
    "p_patch_t": [" import org.prx.playerhater.service.PlayerHaterService;\n import org.prx.playerhater.songs.SongQueue;\n import org.prx.playerhater.songs.SongQueue.OnQueuedSongsChangedListener;\n+import org.prx.playerhater.util.Log;\n \n import android.media.MediaPlayer;\n import android.media.MediaPlayer.OnCompletionListener;\n@@ -43,12 +44,14 @@ public class PlaybackService extends PlayerHaterService implements\n \n \t@Override\n \tpublic boolean skipTo(int position) {\n+\t\tstartTransaction();\n \t\tonSongFinished(PlayerHater.FINISH_SKIP_BUTTON);\n \t\treturn getQueue().skipTo(position);\n \t}\n \n \t@Override\n \tpublic void skip() {\n+\t\tstartTransaction();\n \t\tonSongFinished(PlayerHater.FINISH_SKIP_BUTTON);\n \t\tgetQueue().next();\n \t}\n@@ -56,6 +59,7 @@ public class PlaybackService extends PlayerHaterService implements\n \t@Override\n \tpublic void skipBack() {\n \t\tif (getCurrentPosition() < 2000) {\n+\t\t\tstartTransaction();\n \t\t\tonSongFinished(PlayerHater.FINISH_SKIP_BUTTON);\n \t\t\tgetQueue().back();\n \t\t} else {\n@@ -100,16 +104,22 @@ public class PlaybackService extends PlayerHaterService implements\n \n \t@Override\n \tpublic void onNowPlayingChanged(Song nowPlaying, Song was) {\n-\t\tboolean willContinuePlaying = isPlaying();\n-\t\tSynchronousPlayer player = mMediaPlayerPool.getPlayer(\n-\t\t\t\tgetApplicationContext(), nowPlaying.getUri());\n+\t\tstartTransaction();\n+\t\tLog.d(\"Currently in state \" + getState());\n \t\tif (was == null) {\n-\t\t\tmMediaPlayerPool.recycle(swapMediaPlayer(player,\n-\t\t\t\t\twillContinuePlaying));\n+\t\t\tmMediaPlayerPool.recycle(peekMediaPlayer());\n \t\t} else {\n-\t\t\tmMediaPlayerPool.recycle(\n-\t\t\t\t\tswapMediaPlayer(player, willContinuePlaying), was.getUri());\n+\t\t\tmMediaPlayerPool.recycle(peekMediaPlayer(), was.getUri());\n \t\t}\n+\t\tLog.d(\"Currently in state \" + getState());\n+\t\tsetMediaPlayer(mMediaPlayerPool.getPlayer(getApplicationContext(),\n+\t\t\t\tnowPlaying.getUri()));\n+\t\tLog.d(\"Currently in state \" + getState());\n+\t\tif (isPlaying()) {\n+\t\t\tgetMediaPlayer().start();\n+\t\t}\n+\t\tLog.d(\"Currently in state \" + getState());\n+\t\tcommitTransaction();\n \t\tonSongChanged();\n \t}\n \n@@ -125,6 +135,7 @@ public class PlaybackService extends PlayerHaterService implements\n \t@Override\n \tpublic void onCompletion(MediaPlayer mp) {\n \t\tif (peekMediaPlayer() != null && peekMediaPlayer().equals(mp)) {\n+\t\t\tstartTransaction();\n \t\t\tonSongFinished(PlayerHater.FINISH_SONG_END);\n \t\t\tgetQueue().next();\n \t\t}\n@@ -133,6 +144,7 @@ public class PlaybackService extends PlayerHaterService implements\n \t@Override\n \tpublic boolean onError(MediaPlayer mp, int what, int extra) {\n \t\tif (peekMediaPlayer() != null && peekMediaPlayer().equals(mp)) {\n+\t\t\tstartTransaction();\n \t\t\tonSongFinished(PlayerHater.FINISH_ERROR);\n \t\t\tgetQueue().next();\n \t\t\treturn true;"],
    "repo_sni": "chrisrhoden/PlayerHater",
    "_version_": 1526826138551189504,
    "c_user_sni": "chrisrhoden",
    "c_callsites_added_cs": "org.prx.playerhater.PlaybackService.setMediaPlayer(null)#<unknown>.recycle(org.prx.playerhater.SynchronousPlayer, <unknown>)#<unknown>.recycle(org.prx.playerhater.SynchronousPlayer, <unknown>)#org.prx.playerhater.PlaybackService.setMediaPlayer(null)#org.prx.playerhater.PlaybackService.nowPlaying()#org.prx.playerhater.PlaybackService.nowPlaying()#<unknown>.getUri()#<unknown>.getUri()",
    "p_parents_ss": ["a5f377899e973f3adf3094c36111b5e63a63482b"],
    "p_user_sni": "chrisrhoden",
    "c_subject_t": ["Zeno"],
    "c_imports_added_cs": "<empty>",
    "c_callsites_removed_cs": "<unknown>.recycle(<unknown>)#<unknown>.d(<unknown>)#<unknown>.getState()"
  }, {
    "c_patch_no_context_t": ["+/*******************************************************************************\n+ * Copyright 2013 Chris Rhoden, Rebecca Nesson, Public Radio Exchange\n+ * \n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * \n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ ******************************************************************************/\n+\n-import org.prx.playerhater.util.Log;\n+\t\n+\t@Override\n+\tpublic void onDestroy() {\n+\t\tmMediaPlayerPool.release();\n+\t\tsuper.onDestroy();\n+\t}\n+\t\n-\t\tmediaPlayer.setOnErrorListener(this);\n-\t\tmediaPlayer.setOnCompletionListener(this);\n+\t\tif (mediaPlayer != null) {\n+\t\t\tmediaPlayer.setOnErrorListener(this);\n+\t\t\tmediaPlayer.setOnCompletionListener(this);\n+\t\t}"],
    "p_patch_no_context_t": ["-\t\tLog.d(\"Currently in state \" + getState());\n-\t\tif (was == null) {\n-\t\t\tmMediaPlayerPool.recycle(peekMediaPlayer());\n-\t\t} else {\n-\t\t\tmMediaPlayerPool.recycle(peekMediaPlayer(), was.getUri());\n+\t\tif (peekMediaPlayer() != null) {\n+\t\t\tmMediaPlayerPool.recycle(peekMediaPlayer(), was == null ? null : was.getUri());\n-\t\tLog.d(\"Currently in state \" + getState());\n-\t\tLog.d(\"Currently in state \" + getState());\n-\t\tLog.d(\"Currently in state \" + getState());\n+\t\t\tSynchronousPlayer player = peekMediaPlayer();\n+\t\t\tsetMediaPlayer(null);\n+\t\t\tmMediaPlayerPool.recycle(player, nowPlaying().getUri());\n+\t\t\tSynchronousPlayer player = peekMediaPlayer();\n+\t\t\tsetMediaPlayer(null);\n+\t\t\tmMediaPlayerPool.recycle(player, nowPlaying().getUri());"],
    "c_date_tdt": "May 31, 2013 3:17:47 PM",
    "c_imports_t": ["org.prx.playerhater.songs.SongQueue org.prx.playerhater.service.PlayerHaterService android.media.MediaPlayer.OnCompletionListener org.prx.playerhater.mediaplayer.SynchronousPlayer org.prx.playerhater.songs.SongQueue.OnQueuedSongsChangedListener android.media.MediaPlayer.OnErrorListener android.media.MediaPlayer org.prx.playerhater.mediaplayer.MediaPlayerPool"],
    "c_contents_t": ["/*******************************************************************************\n * Copyright 2013 Chris Rhoden, Rebecca Nesson, Public Radio Exchange\n * \n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * \n *   http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n ******************************************************************************/\n\npackage org.prx.playerhater;\n\nimport org.prx.playerhater.mediaplayer.MediaPlayerPool;\nimport org.prx.playerhater.mediaplayer.SynchronousPlayer;\nimport org.prx.playerhater.service.PlayerHaterService;\nimport org.prx.playerhater.songs.SongQueue;\nimport org.prx.playerhater.songs.SongQueue.OnQueuedSongsChangedListener;\n\nimport android.media.MediaPlayer;\nimport android.media.MediaPlayer.OnCompletionListener;\nimport android.media.MediaPlayer.OnErrorListener;\n\npublic class PlaybackService extends PlayerHaterService implements\n\t\tOnQueuedSongsChangedListener, OnErrorListener, OnCompletionListener {\n\n\tprivate MediaPlayerPool mMediaPlayerPool;\n\n\t@Override\n\tpublic void onCreate() {\n\t\tsuper.onCreate();\n\t\tmMediaPlayerPool = new MediaPlayerPool();\n\t}\n\n\t\n\t@Override\n\tpublic void onDestroy() {\n\t\tmMediaPlayerPool.release();\n\t\tsuper.onDestroy();\n\t}\n\t\n\t@Override\n\tpublic boolean play(Song song, int startTime) {\n\t\tint position = enqueue(song);\n\t\tonSongFinished(PlayerHater.FINISH_SKIP_BUTTON);\n\t\tgetQueue().skipTo(position);\n\t\tseekTo(startTime);\n\t\treturn play();\n\t}\n\n\t@Override\n\tpublic boolean seekTo(int startTime) {\n\t\tgetMediaPlayer().seekTo(startTime);\n\t\treturn true;\n\t}\n\n\t@Override\n\tpublic int enqueue(Song song) {\n\t\treturn getQueue().appendSong(song);\n\t}\n\n\t@Override\n\tpublic boolean skipTo(int position) {\n\t\tstartTransaction();\n\t\tonSongFinished(PlayerHater.FINISH_SKIP_BUTTON);\n\t\treturn getQueue().skipTo(position);\n\t}\n\n\t@Override\n\tpublic void skip() {\n\t\tstartTransaction();\n\t\tonSongFinished(PlayerHater.FINISH_SKIP_BUTTON);\n\t\tgetQueue().next();\n\t}\n\n\t@Override\n\tpublic void skipBack() {\n\t\tif (getCurrentPosition() < 2000) {\n\t\t\tstartTransaction();\n\t\t\tonSongFinished(PlayerHater.FINISH_SKIP_BUTTON);\n\t\t\tgetQueue().back();\n\t\t} else {\n\t\t\tseekTo(0);\n\t\t}\n\t}\n\n\t@Override\n\tpublic void emptyQueue() {\n\t\tgetQueue().empty();\n\t}\n\n\t@Override\n\tpublic Song nowPlaying() {\n\t\treturn getQueue().getNowPlaying();\n\t}\n\n\tprivate SongQueue mQueue;\n\n\tprivate SongQueue getQueue() {\n\t\tif (mQueue == null) {\n\t\t\tmQueue = new SongQueue();\n\t\t\tmQueue.setQueuedSongsChangedListener(this);\n\t\t}\n\t\treturn mQueue;\n\t}\n\n\t@Override\n\tpublic int getQueueLength() {\n\t\treturn getQueue().size();\n\t}\n\n\t@Override\n\tpublic int getQueuePosition() {\n\t\treturn getQueue().getPosition() + (isPlaying() ? 1 : 0);\n\t}\n\n\t@Override\n\tpublic boolean removeFromQueue(int position) {\n\t\treturn getQueue().remove(position);\n\t}\n\n\t@Override\n\tpublic void onNowPlayingChanged(Song nowPlaying, Song was) {\n\t\tstartTransaction();\n\t\tif (peekMediaPlayer() != null) {\n\t\t\tmMediaPlayerPool.recycle(peekMediaPlayer(), was == null ? null : was.getUri());\n\t\t}\n\t\tsetMediaPlayer(mMediaPlayerPool.getPlayer(getApplicationContext(),\n\t\t\t\tnowPlaying.getUri()));\n\t\tif (isPlaying()) {\n\t\t\tgetMediaPlayer().start();\n\t\t}\n\t\tcommitTransaction();\n\t\tonSongChanged();\n\t}\n\n\t@Override\n\tpublic void onNextSongChanged(Song nextSong, Song was) {\n\t\tif (nextSong != null) {\n\t\t\tmMediaPlayerPool\n\t\t\t\t\t.prepare(getApplicationContext(), nextSong.getUri());\n\t\t}\n\t\tonNextSongChanged();\n\t}\n\n\t@Override\n\tpublic void onCompletion(MediaPlayer mp) {\n\t\tif (peekMediaPlayer() != null && peekMediaPlayer().equals(mp)) {\n\t\t\tstartTransaction();\n\t\t\tSynchronousPlayer player = peekMediaPlayer();\n\t\t\tsetMediaPlayer(null);\n\t\t\tmMediaPlayerPool.recycle(player, nowPlaying().getUri());\n\t\t\tonSongFinished(PlayerHater.FINISH_SONG_END);\n\t\t\tgetQueue().next();\n\t\t}\n\t}\n\n\t@Override\n\tpublic boolean onError(MediaPlayer mp, int what, int extra) {\n\t\tif (peekMediaPlayer() != null && peekMediaPlayer().equals(mp)) {\n\t\t\tstartTransaction();\n\t\t\tSynchronousPlayer player = peekMediaPlayer();\n\t\t\tsetMediaPlayer(null);\n\t\t\tmMediaPlayerPool.recycle(player, nowPlaying().getUri());\n\t\t\tonSongFinished(PlayerHater.FINISH_ERROR);\n\t\t\tgetQueue().next();\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\t@Override\n\tpublic Song getNextSong() {\n\t\treturn getQueue().getNextPlaying();\n\t}\n\n\t@Override\n\tprotected void setMediaPlayer(SynchronousPlayer mediaPlayer) {\n\t\tSynchronousPlayer oldPlayer = peekMediaPlayer();\n\t\tif (oldPlayer != null) {\n\t\t\toldPlayer.setOnErrorListener(null);\n\t\t\toldPlayer.setOnCompletionListener(null);\n\t\t}\n\t\tsuper.setMediaPlayer(mediaPlayer);\n\t\tif (mediaPlayer != null) {\n\t\t\tmediaPlayer.setOnErrorListener(this);\n\t\t\tmediaPlayer.setOnCompletionListener(this);\n\t\t}\n\t}\n}\n"],
    "p_date_tdt": "May 31, 2013 1:53:27 PM",
    "c_comments_t": ["<empty>"],
    "p_contents_t": ["package org.prx.playerhater;\n\nimport org.prx.playerhater.mediaplayer.MediaPlayerPool;\nimport org.prx.playerhater.mediaplayer.SynchronousPlayer;\nimport org.prx.playerhater.service.PlayerHaterService;\nimport org.prx.playerhater.songs.SongQueue;\nimport org.prx.playerhater.songs.SongQueue.OnQueuedSongsChangedListener;\nimport org.prx.playerhater.util.Log;\n\nimport android.media.MediaPlayer;\nimport android.media.MediaPlayer.OnCompletionListener;\nimport android.media.MediaPlayer.OnErrorListener;\n\npublic class PlaybackService extends PlayerHaterService implements\n\t\tOnQueuedSongsChangedListener, OnErrorListener, OnCompletionListener {\n\n\tprivate MediaPlayerPool mMediaPlayerPool;\n\n\t@Override\n\tpublic void onCreate() {\n\t\tsuper.onCreate();\n\t\tmMediaPlayerPool = new MediaPlayerPool();\n\t}\n\n\t@Override\n\tpublic boolean play(Song song, int startTime) {\n\t\tint position = enqueue(song);\n\t\tonSongFinished(PlayerHater.FINISH_SKIP_BUTTON);\n\t\tgetQueue().skipTo(position);\n\t\tseekTo(startTime);\n\t\treturn play();\n\t}\n\n\t@Override\n\tpublic boolean seekTo(int startTime) {\n\t\tgetMediaPlayer().seekTo(startTime);\n\t\treturn true;\n\t}\n\n\t@Override\n\tpublic int enqueue(Song song) {\n\t\treturn getQueue().appendSong(song);\n\t}\n\n\t@Override\n\tpublic boolean skipTo(int position) {\n\t\tstartTransaction();\n\t\tonSongFinished(PlayerHater.FINISH_SKIP_BUTTON);\n\t\treturn getQueue().skipTo(position);\n\t}\n\n\t@Override\n\tpublic void skip() {\n\t\tstartTransaction();\n\t\tonSongFinished(PlayerHater.FINISH_SKIP_BUTTON);\n\t\tgetQueue().next();\n\t}\n\n\t@Override\n\tpublic void skipBack() {\n\t\tif (getCurrentPosition() < 2000) {\n\t\t\tstartTransaction();\n\t\t\tonSongFinished(PlayerHater.FINISH_SKIP_BUTTON);\n\t\t\tgetQueue().back();\n\t\t} else {\n\t\t\tseekTo(0);\n\t\t}\n\t}\n\n\t@Override\n\tpublic void emptyQueue() {\n\t\tgetQueue().empty();\n\t}\n\n\t@Override\n\tpublic Song nowPlaying() {\n\t\treturn getQueue().getNowPlaying();\n\t}\n\n\tprivate SongQueue mQueue;\n\n\tprivate SongQueue getQueue() {\n\t\tif (mQueue == null) {\n\t\t\tmQueue = new SongQueue();\n\t\t\tmQueue.setQueuedSongsChangedListener(this);\n\t\t}\n\t\treturn mQueue;\n\t}\n\n\t@Override\n\tpublic int getQueueLength() {\n\t\treturn getQueue().size();\n\t}\n\n\t@Override\n\tpublic int getQueuePosition() {\n\t\treturn getQueue().getPosition() + (isPlaying() ? 1 : 0);\n\t}\n\n\t@Override\n\tpublic boolean removeFromQueue(int position) {\n\t\treturn getQueue().remove(position);\n\t}\n\n\t@Override\n\tpublic void onNowPlayingChanged(Song nowPlaying, Song was) {\n\t\tstartTransaction();\n\t\tif (peekMediaPlayer() != null) {\n\t\t\tmMediaPlayerPool.recycle(peekMediaPlayer(), was == null ? null : was.getUri());\n\t\t}\n\t\tsetMediaPlayer(mMediaPlayerPool.getPlayer(getApplicationContext(),\n\t\t\t\tnowPlaying.getUri()));\n\t\tif (isPlaying()) {\n\t\t\tgetMediaPlayer().start();\n\t\t}\n\t\tcommitTransaction();\n\t\tonSongChanged();\n\t}\n\n\t@Override\n\tpublic void onNextSongChanged(Song nextSong, Song was) {\n\t\tif (nextSong != null) {\n\t\t\tmMediaPlayerPool\n\t\t\t\t\t.prepare(getApplicationContext(), nextSong.getUri());\n\t\t}\n\t\tonNextSongChanged();\n\t}\n\n\t@Override\n\tpublic void onCompletion(MediaPlayer mp) {\n\t\tif (peekMediaPlayer() != null && peekMediaPlayer().equals(mp)) {\n\t\t\tstartTransaction();\n\t\t\tSynchronousPlayer player = peekMediaPlayer();\n\t\t\tsetMediaPlayer(null);\n\t\t\tmMediaPlayerPool.recycle(player, nowPlaying().getUri());\n\t\t\tonSongFinished(PlayerHater.FINISH_SONG_END);\n\t\t\tgetQueue().next();\n\t\t}\n\t}\n\n\t@Override\n\tpublic boolean onError(MediaPlayer mp, int what, int extra) {\n\t\tif (peekMediaPlayer() != null && peekMediaPlayer().equals(mp)) {\n\t\t\tstartTransaction();\n\t\t\tSynchronousPlayer player = peekMediaPlayer();\n\t\t\tsetMediaPlayer(null);\n\t\t\tmMediaPlayerPool.recycle(player, nowPlaying().getUri());\n\t\t\tonSongFinished(PlayerHater.FINISH_ERROR);\n\t\t\tgetQueue().next();\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\t@Override\n\tpublic Song getNextSong() {\n\t\treturn getQueue().getNextPlaying();\n\t}\n\n\t@Override\n\tprotected void setMediaPlayer(SynchronousPlayer mediaPlayer) {\n\t\tSynchronousPlayer oldPlayer = peekMediaPlayer();\n\t\tif (oldPlayer != null) {\n\t\t\toldPlayer.setOnErrorListener(null);\n\t\t\toldPlayer.setOnCompletionListener(null);\n\t\t}\n\t\tsuper.setMediaPlayer(mediaPlayer);\n\t\tmediaPlayer.setOnErrorListener(this);\n\t\tmediaPlayer.setOnCompletionListener(this);\n\t}\n}\n"],
    "c_hash_sni": "26b7a482e7714b9a19094ab9ad47210aa43e9fb6",
    "name_sni": "src/org/prx/playerhater/PlaybackService.java",
    "c_parents_ss": ["016e87cd537186f979b4abb14c640679a02d91b1"],
    "c_imports_removed_t": ["org.prx.playerhater.util.Log"],
    "p_hash_sni": "016e87cd537186f979b4abb14c640679a02d91b1",
    "c_imports_added_t": ["<empty>"],
    "p_methods_t": ["MediaPlayerPool SongQueue appendSong back commitTransaction empty enqueue equals getApplicationContext getCurrentPosition getMediaPlayer getNextPlaying getNowPlaying getPlayer getPosition getQueue getUri isPlaying next nowPlaying onNextSongChanged onSongChanged onSongFinished peekMediaPlayer play prepare recycle remove seekTo setMediaPlayer setOnCompletionListener setOnErrorListener setQueuedSongsChangedListener size skipTo start startTransaction"],
    "c_imports_removed_cs": "org.prx.playerhater.util.Log",
    "p_imports_t": ["org.prx.playerhater.songs.SongQueue org.prx.playerhater.util.Log org.prx.playerhater.service.PlayerHaterService android.media.MediaPlayer.OnCompletionListener org.prx.playerhater.mediaplayer.SynchronousPlayer org.prx.playerhater.songs.SongQueue.OnQueuedSongsChangedListener android.media.MediaPlayer.OnErrorListener android.media.MediaPlayer org.prx.playerhater.mediaplayer.MediaPlayerPool"],
    "p_subject_t": ["Zeno"],
    "p_callsites_cs": "<unknown>.peekMediaPlayer()#<unknown>.setOnErrorListener(null)#org.prx.playerhater.PlaybackService.setMediaPlayer(null)#<unknown>.remove(int)#<unknown>.skipTo(int)#org.prx.playerhater.PlaybackService.getQueue()#<unknown>.recycle(org.prx.playerhater.SynchronousPlayer, <unknown>)#<unknown>.setQueuedSongsChangedListener(org.prx.playerhater.PlaybackService)#<unknown>.SongQueue()#org.prx.playerhater.PlaybackService.enqueue(org.prx.playerhater.Song)#<unknown>.next()#<unknown>.next()#<unknown>.onSongFinished(<unknown>)#<unknown>.getMediaPlayer()#<unknown>.equals(android.media.MediaPlayer)#<unknown>.peekMediaPlayer()#<unknown>.setOnCompletionListener(org.prx.playerhater.PlaybackService)#org.prx.playerhater.PlaybackService.getQueue()#<unknown>.recycle(org.prx.playerhater.SynchronousPlayer, <unknown>)#<unknown>.onSongFinished(<unknown>)#<unknown>.next()#<unknown>.startTransaction()#org.prx.playerhater.PlaybackService.getQueue()#org.prx.playerhater.PlaybackService.setMediaPlayer(null)#org.prx.playerhater.PlaybackService.getQueue()#<unknown>.setOnErrorListener(org.prx.playerhater.PlaybackService)#org.prx.playerhater.PlaybackService.setMediaPlayer(<unknown>)#org.prx.playerhater.PlaybackService.nowPlaying()#<unknown>.onSongFinished(<unknown>)#<unknown>.skipTo(int)#org.prx.playerhater.PlaybackService.onNextSongChanged()#org.prx.playerhater.PlaybackService.play()#<unknown>.appendSong(org.prx.playerhater.Song)#<unknown>.onSongFinished(<unknown>)#org.prx.playerhater.PlaybackService.getQueue()#<unknown>.seekTo(int)#<unknown>.startTransaction()#<unknown>.getUri()#org.prx.playerhater.PlaybackService.getQueue()#org.prx.playerhater.PlaybackService.getQueue()#<unknown>.startTransaction()#org.prx.playerhater.PlaybackService.getQueue()#<unknown>.start()#<unknown>.onSongChanged()#org.prx.playerhater.PlaybackService.nowPlaying()#<unknown>.isPlaying()#<unknown>.getNextPlaying()#<unknown>.size()#<unknown>.commitTransaction()#<unknown>.startTransaction()#<unknown>.getUri()#<unknown>.MediaPlayerPool()#<unknown>.getApplicationContext()#org.prx.playerhater.PlaybackService.getQueue()#<unknown>.startTransaction()#<unknown>.peekMediaPlayer()#<unknown>.peekMediaPlayer()#<unknown>.recycle(<unknown>, <unknown>)#<unknown>.getUri()#org.prx.playerhater.PlaybackService.getQueue()#org.prx.playerhater.PlaybackService.getQueue()#<unknown>.getApplicationContext()#org.prx.playerhater.PlaybackService.seekTo(int)#<unknown>.empty()#org.prx.playerhater.PlaybackService.seekTo(int)#<unknown>.prepare(<unknown>, <unknown>)#<unknown>.onSongFinished(<unknown>)#<unknown>.equals(android.media.MediaPlayer)#<unknown>.getCurrentPosition()#<unknown>.getMediaPlayer()#<unknown>.getUri()#org.prx.playerhater.PlaybackService.getQueue()#<unknown>.onSongFinished(<unknown>)#<unknown>.isPlaying()#org.prx.playerhater.PlaybackService.getQueue()#<unknown>.getUri()#<unknown>.getNowPlaying()#<unknown>.back()#<unknown>.getPosition()#<unknown>.getPlayer(<unknown>, <unknown>)#<unknown>.setOnCompletionListener(null)#<unknown>.startTransaction()",
    "p_callsites_t": ["<unknown>.peekMediaPlayer() <unknown>.setOnErrorListener(null) org.prx.playerhater.PlaybackService.setMediaPlayer(null) <unknown>.remove(int) <unknown>.skipTo(int) org.prx.playerhater.PlaybackService.getQueue() <unknown>.recycle(org.prx.playerhater.SynchronousPlayer, <unknown>) <unknown>.setQueuedSongsChangedListener(org.prx.playerhater.PlaybackService) <unknown>.SongQueue() org.prx.playerhater.PlaybackService.enqueue(org.prx.playerhater.Song) <unknown>.next() <unknown>.next() <unknown>.onSongFinished(<unknown>) <unknown>.getMediaPlayer() <unknown>.equals(android.media.MediaPlayer) <unknown>.peekMediaPlayer() <unknown>.setOnCompletionListener(org.prx.playerhater.PlaybackService) org.prx.playerhater.PlaybackService.getQueue() <unknown>.recycle(org.prx.playerhater.SynchronousPlayer, <unknown>) <unknown>.onSongFinished(<unknown>) <unknown>.next() <unknown>.startTransaction() org.prx.playerhater.PlaybackService.getQueue() org.prx.playerhater.PlaybackService.setMediaPlayer(null) org.prx.playerhater.PlaybackService.getQueue() <unknown>.setOnErrorListener(org.prx.playerhater.PlaybackService) org.prx.playerhater.PlaybackService.setMediaPlayer(<unknown>) org.prx.playerhater.PlaybackService.nowPlaying() <unknown>.onSongFinished(<unknown>) <unknown>.skipTo(int) org.prx.playerhater.PlaybackService.onNextSongChanged() org.prx.playerhater.PlaybackService.play() <unknown>.appendSong(org.prx.playerhater.Song) <unknown>.onSongFinished(<unknown>) org.prx.playerhater.PlaybackService.getQueue() <unknown>.seekTo(int) <unknown>.startTransaction() <unknown>.getUri() org.prx.playerhater.PlaybackService.getQueue() org.prx.playerhater.PlaybackService.getQueue() <unknown>.startTransaction() org.prx.playerhater.PlaybackService.getQueue() <unknown>.start() <unknown>.onSongChanged() org.prx.playerhater.PlaybackService.nowPlaying() <unknown>.isPlaying() <unknown>.getNextPlaying() <unknown>.size() <unknown>.commitTransaction() <unknown>.startTransaction() <unknown>.getUri() <unknown>.MediaPlayerPool() <unknown>.getApplicationContext() org.prx.playerhater.PlaybackService.getQueue() <unknown>.startTransaction() <unknown>.peekMediaPlayer() <unknown>.peekMediaPlayer() <unknown>.recycle(<unknown>, <unknown>) <unknown>.getUri() org.prx.playerhater.PlaybackService.getQueue() org.prx.playerhater.PlaybackService.getQueue() <unknown>.getApplicationContext() org.prx.playerhater.PlaybackService.seekTo(int) <unknown>.empty() org.prx.playerhater.PlaybackService.seekTo(int) <unknown>.prepare(<unknown>, <unknown>) <unknown>.onSongFinished(<unknown>) <unknown>.equals(android.media.MediaPlayer) <unknown>.getCurrentPosition() <unknown>.getMediaPlayer() <unknown>.getUri() org.prx.playerhater.PlaybackService.getQueue() <unknown>.onSongFinished(<unknown>) <unknown>.isPlaying() org.prx.playerhater.PlaybackService.getQueue() <unknown>.getUri() <unknown>.getNowPlaying() <unknown>.back() <unknown>.getPosition() <unknown>.getPlayer(<unknown>, <unknown>) <unknown>.setOnCompletionListener(null) <unknown>.startTransaction()"],
    "c_callsites_t": ["<unknown>.peekMediaPlayer() <unknown>.setOnErrorListener(null) org.prx.playerhater.PlaybackService.setMediaPlayer(null) <unknown>.remove(int) <unknown>.skipTo(int) org.prx.playerhater.PlaybackService.getQueue() <unknown>.recycle(org.prx.playerhater.SynchronousPlayer, <unknown>) <unknown>.setQueuedSongsChangedListener(org.prx.playerhater.PlaybackService) <unknown>.SongQueue() org.prx.playerhater.PlaybackService.enqueue(org.prx.playerhater.Song) <unknown>.next() <unknown>.next() <unknown>.onSongFinished(<unknown>) <unknown>.getMediaPlayer() <unknown>.equals(android.media.MediaPlayer) <unknown>.peekMediaPlayer() <unknown>.setOnCompletionListener(org.prx.playerhater.PlaybackService) org.prx.playerhater.PlaybackService.getQueue() <unknown>.recycle(org.prx.playerhater.SynchronousPlayer, <unknown>) <unknown>.onSongFinished(<unknown>) <unknown>.next() <unknown>.release() <unknown>.startTransaction() org.prx.playerhater.PlaybackService.getQueue() org.prx.playerhater.PlaybackService.setMediaPlayer(null) org.prx.playerhater.PlaybackService.getQueue() <unknown>.setOnErrorListener(org.prx.playerhater.PlaybackService) org.prx.playerhater.PlaybackService.setMediaPlayer(<unknown>) org.prx.playerhater.PlaybackService.nowPlaying() <unknown>.onSongFinished(<unknown>) <unknown>.skipTo(int) org.prx.playerhater.PlaybackService.onNextSongChanged() org.prx.playerhater.PlaybackService.play() <unknown>.appendSong(org.prx.playerhater.Song) <unknown>.onSongFinished(<unknown>) org.prx.playerhater.PlaybackService.getQueue() <unknown>.seekTo(int) <unknown>.startTransaction() <unknown>.getUri() org.prx.playerhater.PlaybackService.getQueue() org.prx.playerhater.PlaybackService.getQueue() <unknown>.startTransaction() org.prx.playerhater.PlaybackService.getQueue() <unknown>.start() <unknown>.onSongChanged() org.prx.playerhater.PlaybackService.nowPlaying() <unknown>.isPlaying() <unknown>.getNextPlaying() <unknown>.size() <unknown>.commitTransaction() <unknown>.startTransaction() <unknown>.getUri() <unknown>.MediaPlayerPool() <unknown>.getApplicationContext() org.prx.playerhater.PlaybackService.getQueue() <unknown>.startTransaction() <unknown>.peekMediaPlayer() <unknown>.peekMediaPlayer() <unknown>.recycle(<unknown>, <unknown>) <unknown>.getUri() org.prx.playerhater.PlaybackService.getQueue() org.prx.playerhater.PlaybackService.getQueue() <unknown>.getApplicationContext() org.prx.playerhater.PlaybackService.seekTo(int) <unknown>.empty() org.prx.playerhater.PlaybackService.seekTo(int) <unknown>.prepare(<unknown>, <unknown>) <unknown>.onSongFinished(<unknown>) <unknown>.equals(android.media.MediaPlayer) <unknown>.getCurrentPosition() <unknown>.getMediaPlayer() <unknown>.getUri() org.prx.playerhater.PlaybackService.getQueue() <unknown>.onSongFinished(<unknown>) <unknown>.isPlaying() org.prx.playerhater.PlaybackService.getQueue() <unknown>.getUri() <unknown>.getNowPlaying() <unknown>.back() <unknown>.getPosition() <unknown>.getPlayer(<unknown>, <unknown>) <unknown>.setOnCompletionListener(null) <unknown>.startTransaction()"],
    "c_callsites_added_t": ["<unknown>.release()"],
    "c_methods_t": ["MediaPlayerPool SongQueue appendSong back commitTransaction empty enqueue equals getApplicationContext getCurrentPosition getMediaPlayer getNextPlaying getNowPlaying getPlayer getPosition getQueue getUri isPlaying next nowPlaying onNextSongChanged onSongChanged onSongFinished peekMediaPlayer play prepare recycle release remove seekTo setMediaPlayer setOnCompletionListener setOnErrorListener setQueuedSongsChangedListener size skipTo start startTransaction"],
    "id": "chrisrhoden/PlayerHater\u0000src/org/prx/playerhater/PlaybackService.java\u0000016e87cd537186f979b4abb14c640679a02d91b1\u000026b7a482e7714b9a19094ab9ad47210aa43e9fb6",
    "p_comments_t": ["<empty>"],
    "p_email_sni": "carhoden@gmail.com",
    "c_callsites_removed_t": ["<empty>"],
    "c_callsites_cs": "<unknown>.peekMediaPlayer()#<unknown>.setOnErrorListener(null)#org.prx.playerhater.PlaybackService.setMediaPlayer(null)#<unknown>.remove(int)#<unknown>.skipTo(int)#org.prx.playerhater.PlaybackService.getQueue()#<unknown>.recycle(org.prx.playerhater.SynchronousPlayer, <unknown>)#<unknown>.setQueuedSongsChangedListener(org.prx.playerhater.PlaybackService)#<unknown>.SongQueue()#org.prx.playerhater.PlaybackService.enqueue(org.prx.playerhater.Song)#<unknown>.next()#<unknown>.next()#<unknown>.onSongFinished(<unknown>)#<unknown>.getMediaPlayer()#<unknown>.equals(android.media.MediaPlayer)#<unknown>.peekMediaPlayer()#<unknown>.setOnCompletionListener(org.prx.playerhater.PlaybackService)#org.prx.playerhater.PlaybackService.getQueue()#<unknown>.recycle(org.prx.playerhater.SynchronousPlayer, <unknown>)#<unknown>.onSongFinished(<unknown>)#<unknown>.next()#<unknown>.release()#<unknown>.startTransaction()#org.prx.playerhater.PlaybackService.getQueue()#org.prx.playerhater.PlaybackService.setMediaPlayer(null)#org.prx.playerhater.PlaybackService.getQueue()#<unknown>.setOnErrorListener(org.prx.playerhater.PlaybackService)#org.prx.playerhater.PlaybackService.setMediaPlayer(<unknown>)#org.prx.playerhater.PlaybackService.nowPlaying()#<unknown>.onSongFinished(<unknown>)#<unknown>.skipTo(int)#org.prx.playerhater.PlaybackService.onNextSongChanged()#org.prx.playerhater.PlaybackService.play()#<unknown>.appendSong(org.prx.playerhater.Song)#<unknown>.onSongFinished(<unknown>)#org.prx.playerhater.PlaybackService.getQueue()#<unknown>.seekTo(int)#<unknown>.startTransaction()#<unknown>.getUri()#org.prx.playerhater.PlaybackService.getQueue()#org.prx.playerhater.PlaybackService.getQueue()#<unknown>.startTransaction()#org.prx.playerhater.PlaybackService.getQueue()#<unknown>.start()#<unknown>.onSongChanged()#org.prx.playerhater.PlaybackService.nowPlaying()#<unknown>.isPlaying()#<unknown>.getNextPlaying()#<unknown>.size()#<unknown>.commitTransaction()#<unknown>.startTransaction()#<unknown>.getUri()#<unknown>.MediaPlayerPool()#<unknown>.getApplicationContext()#org.prx.playerhater.PlaybackService.getQueue()#<unknown>.startTransaction()#<unknown>.peekMediaPlayer()#<unknown>.peekMediaPlayer()#<unknown>.recycle(<unknown>, <unknown>)#<unknown>.getUri()#org.prx.playerhater.PlaybackService.getQueue()#org.prx.playerhater.PlaybackService.getQueue()#<unknown>.getApplicationContext()#org.prx.playerhater.PlaybackService.seekTo(int)#<unknown>.empty()#org.prx.playerhater.PlaybackService.seekTo(int)#<unknown>.prepare(<unknown>, <unknown>)#<unknown>.onSongFinished(<unknown>)#<unknown>.equals(android.media.MediaPlayer)#<unknown>.getCurrentPosition()#<unknown>.getMediaPlayer()#<unknown>.getUri()#org.prx.playerhater.PlaybackService.getQueue()#<unknown>.onSongFinished(<unknown>)#<unknown>.isPlaying()#org.prx.playerhater.PlaybackService.getQueue()#<unknown>.getUri()#<unknown>.getNowPlaying()#<unknown>.back()#<unknown>.getPosition()#<unknown>.getPlayer(<unknown>, <unknown>)#<unknown>.setOnCompletionListener(null)#<unknown>.startTransaction()",
    "p_body_t": ["<empty>"],
    "c_patch_t": ["+/*******************************************************************************\n+ * Copyright 2013 Chris Rhoden, Rebecca Nesson, Public Radio Exchange\n+ * \n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * \n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ ******************************************************************************/\n+\n package org.prx.playerhater;\n \n import org.prx.playerhater.mediaplayer.MediaPlayerPool;\n@@ -5,7 +21,6 @@ import org.prx.playerhater.mediaplayer.SynchronousPlayer;\n import org.prx.playerhater.service.PlayerHaterService;\n import org.prx.playerhater.songs.SongQueue;\n import org.prx.playerhater.songs.SongQueue.OnQueuedSongsChangedListener;\n-import org.prx.playerhater.util.Log;\n \n import android.media.MediaPlayer;\n import android.media.MediaPlayer.OnCompletionListener;\n@@ -22,6 +37,13 @@ public class PlaybackService extends PlayerHaterService implements\n \t\tmMediaPlayerPool = new MediaPlayerPool();\n \t}\n \n+\t\n+\t@Override\n+\tpublic void onDestroy() {\n+\t\tmMediaPlayerPool.release();\n+\t\tsuper.onDestroy();\n+\t}\n+\t\n \t@Override\n \tpublic boolean play(Song song, int startTime) {\n \t\tint position = enqueue(song);\n@@ -165,7 +187,9 @@ public class PlaybackService extends PlayerHaterService implements\n \t\t\toldPlayer.setOnCompletionListener(null);\n \t\t}\n \t\tsuper.setMediaPlayer(mediaPlayer);\n-\t\tmediaPlayer.setOnErrorListener(this);\n-\t\tmediaPlayer.setOnCompletionListener(this);\n+\t\tif (mediaPlayer != null) {\n+\t\t\tmediaPlayer.setOnErrorListener(this);\n+\t\t\tmediaPlayer.setOnCompletionListener(this);\n+\t\t}\n \t}\n }"],
    "c_body_t": ["<empty>"],
    "c_email_sni": "carhoden@gmail.com",
    "p_patch_t": [" \t@Override\n \tpublic void onNowPlayingChanged(Song nowPlaying, Song was) {\n \t\tstartTransaction();\n-\t\tLog.d(\"Currently in state \" + getState());\n-\t\tif (was == null) {\n-\t\t\tmMediaPlayerPool.recycle(peekMediaPlayer());\n-\t\t} else {\n-\t\t\tmMediaPlayerPool.recycle(peekMediaPlayer(), was.getUri());\n+\t\tif (peekMediaPlayer() != null) {\n+\t\t\tmMediaPlayerPool.recycle(peekMediaPlayer(), was == null ? null : was.getUri());\n \t\t}\n-\t\tLog.d(\"Currently in state \" + getState());\n \t\tsetMediaPlayer(mMediaPlayerPool.getPlayer(getApplicationContext(),\n \t\t\t\tnowPlaying.getUri()));\n-\t\tLog.d(\"Currently in state \" + getState());\n \t\tif (isPlaying()) {\n \t\t\tgetMediaPlayer().start();\n \t\t}\n-\t\tLog.d(\"Currently in state \" + getState());\n \t\tcommitTransaction();\n \t\tonSongChanged();\n \t}\n@@ -136,6 +130,9 @@ public class PlaybackService extends PlayerHaterService implements\n \tpublic void onCompletion(MediaPlayer mp) {\n \t\tif (peekMediaPlayer() != null && peekMediaPlayer().equals(mp)) {\n \t\t\tstartTransaction();\n+\t\t\tSynchronousPlayer player = peekMediaPlayer();\n+\t\t\tsetMediaPlayer(null);\n+\t\t\tmMediaPlayerPool.recycle(player, nowPlaying().getUri());\n \t\t\tonSongFinished(PlayerHater.FINISH_SONG_END);\n \t\t\tgetQueue().next();\n \t\t}\n@@ -145,6 +142,9 @@ public class PlaybackService extends PlayerHaterService implements\n \tpublic boolean onError(MediaPlayer mp, int what, int extra) {\n \t\tif (peekMediaPlayer() != null && peekMediaPlayer().equals(mp)) {\n \t\t\tstartTransaction();\n+\t\t\tSynchronousPlayer player = peekMediaPlayer();\n+\t\t\tsetMediaPlayer(null);\n+\t\t\tmMediaPlayerPool.recycle(player, nowPlaying().getUri());\n \t\t\tonSongFinished(PlayerHater.FINISH_ERROR);\n \t\t\tgetQueue().next();\n \t\t\treturn true;"],
    "repo_sni": "chrisrhoden/PlayerHater",
    "_version_": 1526826138556432384,
    "c_user_sni": "chrisrhoden",
    "c_callsites_added_cs": "<unknown>.release()",
    "p_parents_ss": ["32d9e7db8bb4324c6638adea2e43a7cfbf173797"],
    "p_user_sni": "chrisrhoden",
    "c_subject_t": ["v 0.3.0"],
    "c_imports_added_cs": "<empty>",
    "c_callsites_removed_cs": "<empty>"
  }, {
    "c_patch_no_context_t": ["-\tprivate JsonArrayReader _queryStream(String method, JSONObject params) throws JSONException, IOException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n+\tprivate JsonArrayOrObjectReader _queryStream(String method, JSONObject params) throws JSONException, IOException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n+\t\tLog.d(\"ZabbixService\", \"_queryStream: \"+url);\n+\t\tLog.d(\"ZabbixService\", \"_queryStream: \"+json.toString());\n+\n-\t\t\t\t\t\t\tJsonArrayReader r = _queryStream(method, params);\n+\t\t\t\t\t\t\tJsonArrayOrObjectReader r = _queryStream(method, params);\n-\t\t\tif (jp.nextToken() != JsonToken.START_ARRAY) { // go inside the array\n+\t\t\tif (jp.nextToken() != JsonToken.START_ARRAY && jp.getCurrentToken() != JsonToken.START_OBJECT) { // go inside the array\n+\t\t\t\ttry {\n+\t\t\t\t\tLog.d(\"ZabbixService\", \"current token: \"+jp.getCurrentToken());\n+\t\t\t\t\tLog.d(\"ZabbixService\", \"current name: \"+jp.getCurrentName());\n+\t\t\t\t\tLog.d(\"ZabbixService\", \"get text: \"+jp.getText());\n+\t\t\t\t\tLog.d(\"ZabbixService\", \"next value: \"+jp.nextValue());\n+\t\t\t\t\tLog.d(\"ZabbixService\", \"next token: \"+jp.nextToken());\n+\t\t\t\t\tLog.d(\"ZabbixService\", \"current token: \"+jp.getCurrentToken());\n+\t\t\t\t\tLog.d(\"ZabbixService\", \"current name: \"+jp.getCurrentName());\n+\t\t\t\t\tLog.d(\"ZabbixService\", \"get text: \"+jp.getText());\n+\t\t\t\t} catch (Exception e) {}\n-\t\t\treturn new JsonArrayReader(jp);\n+\t\t\treturn new JsonArrayOrObjectReader(jp);\n+\t\t\tLog.i(\"ZabbixService\", \"Zabbix Server Version: isVersion2=\"+isVersion2);\n-\tprivate void importApplications(long hostid, long itemid, JsonArrayReader jsonArray) throws JsonParseException, NumberFormatException, IOException {\n+\tprivate void importApplications(long hostid, long itemid, JsonArrayOrObjectReader jsonArray) throws JsonParseException, NumberFormatException, IOException {\n-\t\t\tJsonArrayReader events = _queryStream(\n+\t\t\tJsonArrayOrObjectReader events = _queryStream(\n-\t\t\tJsonArrayReader events = _queryStream(\n+\t\t\tJsonArrayOrObjectReader events = _queryStream(\n-\tprivate void importEvents(JsonArrayReader events, Integer numEvents) throws JsonParseException, IOException {\n+\tprivate void importEvents(JsonArrayOrObjectReader events, Integer numEvents) throws JsonParseException, IOException {\n-\tprivate boolean importGraphItems(JsonArrayReader graphItems) throws JsonParseException, NumberFormatException, IOException {\n+\tprivate boolean importGraphItems(JsonArrayOrObjectReader graphItems) throws JsonParseException, NumberFormatException, IOException {\n-\t\t\tJsonArrayReader graphs = _queryStream(\n+\t\t\tJsonArrayOrObjectReader graphs = _queryStream(\n-\t\t\t\tJsonArrayReader historydetails = _queryStream(\n+\t\t\t\tJsonArrayOrObjectReader historydetails = _queryStream(\n-\tprivate long importHostGroups(JsonArrayReader jsonArray) throws JsonParseException, IOException {\n+\tprivate long importHostGroups(JsonArrayOrObjectReader jsonArray) throws JsonParseException, IOException {\n-\tprivate Object[] importHosts(JsonArrayReader jsonArray, Integer numHosts) throws JsonParseException, IOException {\n+\tprivate Object[] importHosts(JsonArrayOrObjectReader jsonArray, Integer numHosts) throws JsonParseException, IOException {\n-\t\t\tJsonArrayReader hosts = _queryStream(\n+\t\t\tJsonArrayOrObjectReader hosts = _queryStream(\n-\tprivate long importItems(JsonArrayReader items, int numItems, boolean checkBeforeInsert) throws JsonParseException, IOException {\n+\tprivate long importItems(JsonArrayOrObjectReader items, int numItems, boolean checkBeforeInsert) throws JsonParseException, IOException {\n-\t\t\tJsonArrayReader items = _queryStream(\n+\t\t\tJsonArrayOrObjectReader items = _queryStream(\n-\tprivate void importScreenItems(JsonArrayReader screenItems) throws JsonParseException, NumberFormatException, IOException {\n+\tprivate void importScreenItems(JsonArrayOrObjectReader screenItems) throws JsonParseException, NumberFormatException, IOException {\n-\t\t\tJsonArrayReader screens = _queryStream(\n+\t\t\tJsonArrayOrObjectReader screens = _queryStream(\n-\t\t\tJsonArrayReader trigger = _queryStream(\n+\t\t\tJsonArrayOrObjectReader trigger = _queryStream(\n-\t\t\tJsonArrayReader triggers = _queryStream(\n+\t\t\tJsonArrayOrObjectReader triggers = _queryStream(\n-\t\t\tJsonArrayReader triggers = _queryStream(\n+\t\t\tJsonArrayOrObjectReader triggers = _queryStream(\n-\tprivate void importTriggers(JsonArrayReader jsonArray) throws JsonParseException, IOException {\n+\tprivate void importTriggers(JsonArrayOrObjectReader jsonArray) throws JsonParseException, IOException {\n-\t\t\tJsonArrayReader triggers = _queryStream(\n+\t\t\tJsonArrayOrObjectReader triggers = _queryStream("],
    "p_patch_no_context_t": ["+package com.inovex.zabbixmobile.api;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.net.Socket;\n+import java.net.UnknownHostException;\n+import java.security.KeyManagementException;\n+import java.security.KeyStore;\n+import java.security.KeyStoreException;\n+import java.security.NoSuchAlgorithmException;\n+import java.security.UnrecoverableKeyException;\n+import java.security.cert.CertificateException;\n+import java.security.cert.X509Certificate;\n+import java.util.ArrayList;\n+import java.util.Date;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+\n+import javax.net.ssl.SSLContext;\n+import javax.net.ssl.SSLPeerUnverifiedException;\n+import javax.net.ssl.TrustManager;\n+import javax.net.ssl.X509TrustManager;\n+\n+import org.apache.http.HttpResponse;\n+import org.apache.http.HttpVersion;\n+import org.apache.http.auth.AuthScope;\n+import org.apache.http.auth.UsernamePasswordCredentials;\n+import org.apache.http.client.ClientProtocolException;\n+import org.apache.http.client.methods.HttpPost;\n+import org.apache.http.client.params.HttpClientParams;\n+import org.apache.http.conn.ClientConnectionManager;\n+import org.apache.http.conn.scheme.PlainSocketFactory;\n+import org.apache.http.conn.scheme.Scheme;\n+import org.apache.http.conn.scheme.SchemeRegistry;\n+import org.apache.http.conn.ssl.SSLSocketFactory;\n+import org.apache.http.entity.StringEntity;\n+import org.apache.http.impl.client.DefaultHttpClient;\n+import org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager;\n+import org.apache.http.params.BasicHttpParams;\n+import org.apache.http.params.HttpConnectionParams;\n+import org.apache.http.params.HttpParams;\n+import org.apache.http.params.HttpProtocolParams;\n+import org.apache.http.protocol.HTTP;\n+import org.codehaus.jackson.JsonFactory;\n+import org.codehaus.jackson.JsonParseException;\n+import org.codehaus.jackson.JsonParser;\n+import org.codehaus.jackson.JsonToken;\n+import org.json.JSONArray;\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+\n+import android.content.ContentValues;\n+import android.content.Context;\n+import android.content.Intent;\n+import android.content.SharedPreferences;\n+import android.database.Cursor;\n+import android.database.sqlite.SQLiteDatabase;\n+import android.database.sqlite.SQLiteQueryBuilder;\n+import android.graphics.Color;\n+import android.preference.PreferenceManager;\n+import android.util.Log;\n+\n+import com.inovex.zabbixmobile.R;\n+import com.inovex.zabbixmobile.ZabbixContentProvider;\n+import com.inovex.zabbixmobile.model.ApplicationData;\n+import com.inovex.zabbixmobile.model.ApplicationItemRelationData;\n+import com.inovex.zabbixmobile.model.CacheData;\n+import com.inovex.zabbixmobile.model.EventData;\n+import com.inovex.zabbixmobile.model.GraphData;\n+import com.inovex.zabbixmobile.model.GraphItemData;\n+import com.inovex.zabbixmobile.model.HistoryDetailData;\n+import com.inovex.zabbixmobile.model.HostData;\n+import com.inovex.zabbixmobile.model.HostGroupData;\n+import com.inovex.zabbixmobile.model.ItemData;\n+import com.inovex.zabbixmobile.model.ScreenData;\n+import com.inovex.zabbixmobile.model.ScreenItemData;\n+import com.inovex.zabbixmobile.model.TriggerData;\n+\n+/**\n+ * interface to connect to the zabbix server\n+ */\n+public class ZabbixService {\n+\tclass CustomSSLSocketFactory extends SSLSocketFactory {\n+\t\tSSLContext sslContext = SSLContext.getInstance(\"TLS\");\n+\n+\t\tpublic CustomSSLSocketFactory(KeyStore truststore) throws NoSuchAlgorithmException, KeyManagementException, KeyStoreException, UnrecoverableKeyException {\n+\t\t\tsuper(truststore);\n+\t\t\tTrustManager tm = new X509TrustManager() {\n+\t\t\t\t@Override\n+\t\t\t\tpublic void checkClientTrusted(X509Certificate[] chain,\n+\t\t\t\t\t\tString authType) throws CertificateException {\n+\t\t\t\t}\n+\t\t\t\t@Override\n+\t\t\t\tpublic void checkServerTrusted(X509Certificate[] chain,\n+\t\t\t\t\t\tString authType) throws CertificateException {\n+\t\t\t\t}\n+\t\t\t\t@Override\n+\t\t\t\tpublic X509Certificate[] getAcceptedIssuers() {\n+\t\t\t\t\treturn null;\n+\t\t\t\t}\n+\t\t\t};\n+\t\t\tsslContext.init(null, new TrustManager[] { tm }, null);\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic Socket createSocket() throws IOException {\n+\t\t\treturn sslContext.getSocketFactory().createSocket();\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic Socket createSocket(Socket socket, String host, int port, boolean autoClose) throws IOException, UnknownHostException {\n+\t\t\treturn sslContext.getSocketFactory().createSocket(socket, host, port, autoClose);\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * http auth is needed\n+\t */\n+\tpublic class HttpAuthorizationRequiredException extends Exception {\n+\t\tprivate static final long serialVersionUID = 6632422081858878147L;\n+\t}\n+\n+\t/**\n+\t * zabbix error: no api access\n+\t */\n+\tpublic class NoAPIAccessException extends Exception {\n+\t\tprivate static final long serialVersionUID = 6381395987443456382L;\n+\t}\n+\n+\t/**\n+\t * probably too old zabbix <= 1.8.2\n+\t */\n+\tpublic class PreconditionFailedException extends Exception {\n+\t\tprivate static final long serialVersionUID = -2529885710860745023L;\n+\t}\n+\n+\t/**\n+\t * global constants\n+\t */\n+\tpublic class ZabbixConfig {\n+\t\tpublic static final int APPLICATION_GET_LIMIT = 1000;\n+\t\tpublic static final int EVENTS_GET_LIMIT = 60;\n+\t\tpublic static final int HISTORY_GET_TIME_FROM_SHIFT = 8*60*60; // -8h\n+\t\tpublic static final int HISTORY_GET_LIMIT = 8000;\n+\t\tpublic static final int HOSTGROUP_GET_LIMIT = 200;\n+\t\tpublic static final int HOST_GET_LIMIT = 300;\n+\t\tpublic static final int ITEM_GET_LIMIT = 200;\n+\t\tpublic static final int TRIGGER_GET_LIMIT = 100;\n+\t\tpublic static final int EVENT_GET_TIME_FROM_SHIFT = 7*24*60*60; // -7 days\n+\t\tpublic static final int CACHE_LIFETIME_APPLICATIONS = 2*24*60*60; // 2 days\n+\t\tpublic static final int CACHE_LIFETIME_EVENTS = 120;\n+\t\tpublic static final int CACHE_LIFETIME_HISTORY_DETAILS = 4*60;\n+\t\tpublic static final int CACHE_LIFETIME_HOST_GROUPS = 7*24*60*60;\n+\t\tpublic static final int CACHE_LIFETIME_HOSTS = 2*24*60*60;\n+\t\tpublic static final int CACHE_LIFETIME_SCREENS = 2*24*60*60;\n+\t\tpublic static final int CACHE_LIFETIME_ITEMS = 4*60;\n+\t\tpublic static final int CACHE_LIFETIME_TRIGGERS = 2*60;\n+\t\tpublic static final long STATUS_SHOW_TRIGGER_TIME = 14*24*60*60;\n+\t\tpublic static final int HTTP_CONNECTION_TIMEOUT = 30000;\n+\t}\n+\n+\tprivate final DefaultHttpClient httpClient;\n+\tprivate final SQLiteDatabase zabbixLocalDB;\n+\tprivate String url;\n+\tprivate String token;\n+\tprivate final Context context;\n+\tprivate int _transactionStack;\n+\tprivate JsonParser lastStream;\n+\tprivate int transformProgressStart;\n+\tprivate int transformProgressEnd;\n+\tprivate boolean _notAuthorizedRetry;\n+\tprivate boolean isVersion2 = true;\n+\n+\t/**\n+\t * init\n+\t * @param context android context\n+\t * @param zabbixLocalDB sqlite\n+\t */\n+\tpublic ZabbixService(Context context, SQLiteDatabase zabbixLocalDB) {\n+\t\tClientConnectionManager ccm = null;\n+\t\tHttpParams params = null;\n+\n+\t\ttry {\n+\t\t\tSharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(context);\n+\t\t\tif (prefs.getBoolean(\"zabbix_trust_all_ssl_ca\", false)) {\n+\t\t\t\tKeyStore trustStore = KeyStore.getInstance(KeyStore.getDefaultType());\n+\t\t\t\ttrustStore.load(null, null);\n+\n+\t\t\t\tSSLSocketFactory sf = new CustomSSLSocketFactory(trustStore);\n+\t\t\t\tsf.setHostnameVerifier(SSLSocketFactory.ALLOW_ALL_HOSTNAME_VERIFIER);\n+\n+\t\t\t\tparams = new BasicHttpParams();\n+\t\t\t\tHttpProtocolParams.setVersion(params, HttpVersion.HTTP_1_1);\n+\t\t\t\tHttpProtocolParams.setContentCharset(params, HTTP.UTF_8);\n+\n+\t\t\t\tSchemeRegistry registry = new SchemeRegistry();\n+\t\t\t\tregistry.register(new Scheme(\"http\", PlainSocketFactory.getSocketFactory(), 80));\n+\t\t\t\tregistry.register(new Scheme(\"https\", sf, 443));\n+\n+\t\t\t\tccm = new ThreadSafeClientConnManager(params, registry);\n+\t\t\t}\n+\t\t} catch (Exception e) {\n+\t\t\t// ignore for unit test\n+\t\t}\n+\n+\t\tif (ccm == null || params == null) {\n+\t\t\thttpClient = new DefaultHttpClient();\n+\t\t} else {\n+\t\t\thttpClient = new DefaultHttpClient(ccm, params);\n+\t\t}\n+\n+\t\t// if applicable http auth\n+\t\ttry {\n+\t\t\tSharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(context);\n+\t\t\tif (prefs.getBoolean(\"http_auth_enabled\", false)) {\n+\t\t\t\tString user = prefs.getString(\"http_auth_username\", \"\");\n+\t\t\t\tString pwd = prefs.getString(\"http_auth_password\", \"\");\n+\t\t\t\thttpClient.getCredentialsProvider().setCredentials(AuthScope.ANY, new UsernamePasswordCredentials(user, pwd));\n+\t\t\t}\n+\t\t} catch (java.lang.UnsupportedOperationException e1) {\n+\t\t\t// for unit test\n+\t\t}\n+\n+\t\tparams = httpClient.getParams();\n+\t\tHttpClientParams.setRedirecting(params, true); // redirecting\n+\t\tHttpConnectionParams.setConnectionTimeout(params, ZabbixConfig.HTTP_CONNECTION_TIMEOUT);\n+\t\tthis.context = context;\n+\t\tthis.zabbixLocalDB = zabbixLocalDB;\n+\t}\n+\n+\t/**\n+\t * counts the sql inserts/updates and do a transaction commit to save the memory\n+\t */\n+\tprivate void _commitTransactionIfRecommended() {\n+\t\tif (_transactionStack++ > 50) {\n+\t\t\t_endTransaction();\n+\t\t\t_startTransaction();\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * commit sql transaction\n+\t */\n+\tpublic void _endTransaction() {\n+\t\tif (zabbixLocalDB.inTransaction()) {\n+\t\t\tzabbixLocalDB.setTransactionSuccessful();\n+\t\t\tzabbixLocalDB.endTransaction();\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * zabbix api call. data will be parsed as json object on-the-fly.\n+\t * Caution: use this only for api calls with a small return data.\n+\t * @param method\n+\t * @param params\n+\t * @return\n+\t * @throws ClientProtocolException\n+\t * @throws IOException\n+\t * @throws JSONException\n+\t * @throws HttpAuthorizationRequiredException\n+\t * @throws NoAPIAccessException\n+\t */\n+\tprivate JSONObject _queryBuffer(String method, JSONObject params) throws ClientProtocolException, IOException, JSONException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n+\t\tHttpPost post = new HttpPost(url);\n+\t\tpost.addHeader(\"Content-Type\", \"application/json; charset=utf-8\");\n+\n+\t\tString json =\n+\t\t\t\"{\" +\n+\t\t\t\"\t\\\"jsonrpc\\\" : \\\"2.0\\\",\" +\n+\t\t\t\"\t\\\"method\\\" : \\\"\"+method+\"\\\",\" +\n+\t\t\t\"\t\\\"params\\\" : \"+params.toString()+\",\" +\n+\t\t\t\"\t\\\"auth\\\" : \"+(token==null?\"null\":'\"'+token+'\"')+\",\" +\n+\t\t\t\"\t\\\"id\\\" : 0\" +\n+\t\t\t\"}\";\n+\n+\t\tpost.setEntity(new StringEntity(json, \"UTF-8\"));\n+\t\ttry {\n+\t\t\tHttpResponse resp = httpClient.execute(post);\n+\t\t\tif (resp.getStatusLine().getStatusCode() == 401) {\n+\t\t\t\t// http auth failed\n+\t\t\t\tthrow new HttpAuthorizationRequiredException();\n+\t\t\t} else if (resp.getStatusLine().getStatusCode() == 412) {\n+\t\t\t\t\t// Precondition failed / Looks like Zabbix 1.8.2\n+\t\t\t\tthrow new PreconditionFailedException();\n+\t\t\t} else if (resp.getStatusLine().getStatusCode() == 404) {\n+\t\t\t\t// file not found\n+\t\t\t\tthrow new IOException(resp.getStatusLine().getStatusCode()+\" \"+resp.getStatusLine().getReasonPhrase());\n+\t\t\t} else {\n+\t\t\t\tLog.d(\"ZabbixService\", resp.getStatusLine().getStatusCode()+\" \"+resp.getStatusLine().getReasonPhrase());\n+\t\t\t}\n+\t\t\tStringBuilder total = new StringBuilder();\n+\t\t\tBufferedReader rd = new BufferedReader(new InputStreamReader(resp.getEntity().getContent()));\n+\t\t\tint chr;\n+\t\t\twhile ((chr = rd.read()) != -1) {\n+\t\t\t\ttotal.append((char) chr);\n+\t\t\t}\n+\t\t\tJSONObject result = new JSONObject(total.toString());\n+\t\t\ttry {\n+\t\t\t\tif (result.getJSONObject(\"error\") != null) {\n+\t\t\t\t\tif (result.getJSONObject(\"error\").getString(\"data\").equals(\"No API access\")) {\n+\t\t\t\t\t\tthrow new NoAPIAccessException();\n+\t\t\t\t\t} else throw new RuntimeException(result.getJSONObject(\"error\").toString());\n+\t\t\t\t}\n+\t\t\t\tif (result.getString(\"data\").equals(\"Not authorized\")) {\n+\t\t\t\t\t// first do a new auth and then try the same api call again\n+\t\t\t\t\tif (authenticate() && !_notAuthorizedRetry) {\n+\t\t\t\t\t\t_notAuthorizedRetry = true;\n+\t\t\t\t\t\tJSONObject r = _queryBuffer(method, params);\n+\t\t\t\t\t\t_notAuthorizedRetry = false;\n+\t\t\t\t\t\treturn r;\n+\t\t\t\t\t} throw new IllegalStateException(result.toString());\n+\t\t\t\t}\n+\t\t\t} catch (JSONException e) {\n+\t\t\t\t// ignore\n+\t\t\t}\n+\t\t\treturn result;\n+\t\t} catch (SSLPeerUnverifiedException e) {\n+\t\t\t// SSL not trusted\n+\t\t\tIntent intent = new Intent(ZabbixContentProvider.CONTENT_PROVIDER_INTENT_ACTION);\n+\t\t\tintent.putExtra(\"flag\", ZabbixContentProvider.INTENT_FLAG_SSL_NOT_TRUSTED);\n+\t\t\tcontext.sendBroadcast(intent);\n+\t\t\tthrow e;\n+\t\t} catch (IOException e) {\n+\t\t\t// internet problem\n+\t\t\t// send intent to GUI\n+\t\t\tIntent intent = new Intent(ZabbixContentProvider.CONTENT_PROVIDER_INTENT_ACTION);\n+\t\t\tintent.putExtra(\"flag\", ZabbixContentProvider.INTENT_FLAG_CONNECTION_FAILED);\n+\t\t\tintent.putExtra(\"value\", e.getMessage());\n+\t\t\tcontext.sendBroadcast(intent);\n+\t\t\tthrow e;\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * zabbix api call as stream.\n+\t * @param method\n+\t * @param params\n+\t * @return stream im json array wrapper\n+\t * @throws JSONException\n+\t * @throws IOException\n+\t * @throws HttpAuthorizationRequiredException\n+\t * @throws NoAPIAccessException\n+\t */\n+\tprivate JsonArrayReader _queryStream(String method, JSONObject params) throws JSONException, IOException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n+\t\t// http request\n+\t\tHttpPost post = new HttpPost(url);\n+\t\tpost.addHeader(\"Content-Type\", \"application/json; charset=utf-8\");\n+\n+\t\tJSONObject json = new JSONObject()\n+\t\t\t.put(\"jsonrpc\", \"2.0\")\n+\t\t\t.put(\"method\", method)\n+\t\t\t.put(\"params\", params)\n+\t\t\t.put(\"auth\", token)\n+\t\t\t.put(\"id\", 0);\n+\n+\t\tpost.setEntity(new StringEntity(json.toString(), \"UTF-8\"));\n+\t\ttry {\n+\t\t\tHttpResponse resp = httpClient.execute(post);\n+\t\t\tif (resp.getStatusLine().getStatusCode() == 401) {\n+\t\t\t\t// http auth failed\n+\t\t\t\tthrow new HttpAuthorizationRequiredException();\n+\t\t\t}\n+\n+\t\t\tJsonFactory jsonFac = new JsonFactory();\n+\t\t\tJsonParser jp = jsonFac.createJsonParser(resp.getEntity().getContent());\n+\t\t\t// store the last stream to close it if an exception will be thrown\n+\t\t\tlastStream = jp;\n+\t\t\tif (jp.nextToken() != JsonToken.START_OBJECT) {\n+\t\t\t\tthrow new IOException(\"Expected data to start with an Object\");\n+\t\t\t}\n+\t\t\tdo {\n+\t\t\t\tjp.nextToken();\n+\t\t\t\tif (jp.getCurrentName().equals(\"error\")) {\n+\t\t\t\t\tjp.nextToken();\n+\t\t\t\t\tString errortxt = \"\";\n+\t\t\t\t\twhile (jp.nextToken() != JsonToken.END_OBJECT) {\n+\t\t\t\t\t\terrortxt += jp.getText();\n+\t\t\t\t\t}\n+\t\t\t\t\tif (errortxt.contains(\"No API access\")) {\n+\t\t\t\t\t\tthrow new NoAPIAccessException();\n+\t\t\t\t\t} else if (errortxt.contains(\"Not authorized\")) {\n+\t\t\t\t\t\t// first do a new auth and then try the same api call again\n+\t\t\t\t\t\tif (authenticate() && !_notAuthorizedRetry) {\n+\t\t\t\t\t\t\t_notAuthorizedRetry = true;\n+\t\t\t\t\t\t\tJsonArrayReader r = _queryStream(method, params);\n+\t\t\t\t\t\t\t_notAuthorizedRetry = false;\n+\t\t\t\t\t\t\treturn r;\n+\t\t\t\t\t\t} else throw new IllegalStateException(errortxt);\n+\t\t\t\t\t} else throw new IllegalStateException(\"JSON API Error: \"+errortxt);\n+\t\t\t\t}\n+\t\t\t} while (!jp.getCurrentName().equals(\"result\"));\n+\n+\t\t\t// result array found\n+\t\t\tif (jp.nextToken() != JsonToken.START_ARRAY) { // go inside the array\n+\t\t\t\tthrow new IOException(\"Expected data to start with an Array\");\n+\t\t\t}\n+\t\t\treturn new JsonArrayReader(jp);\n+\t\t} catch (SSLPeerUnverifiedException e) {\n+\t\t\tthrow e;\n+\t\t} catch (IOException e) {\n+\t\t\t// internet problem\n+\t\t\t// send intent to GUI\n+\t\t\tIntent intent = new Intent(ZabbixContentProvider.CONTENT_PROVIDER_INTENT_ACTION);\n+\t\t\tintent.putExtra(\"flag\", ZabbixContentProvider.INTENT_FLAG_CONNECTION_FAILED);\n+\t\t\tcontext.sendBroadcast(intent);\n+\t\t\tthrow e;\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * begin sql transaction\n+\t */\n+\tprivate void _startTransaction() {\n+\t\tzabbixLocalDB.beginTransaction();\n+\t\t_transactionStack = 0;\n+\t}\n+\n+\t/**\n+\t * acknowledge zabbix event. Sets ack-flag with comment.\n+\t * Caution: This is supported only for Zabbix version >= 1.8.4\n+\t * @param eventid\n+\t * @param comment\n+\t * @return true, success.\n+\t * @throws ClientProtocolException\n+\t * @throws IOException\n+\t * @throws JSONException\n+\t * @throws HttpAuthorizationRequiredException\n+\t * @throws NoAPIAccessException\n+\t */\n+\tpublic boolean acknowledgeEvent(String eventid, String comment) throws ClientProtocolException, IOException, JSONException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n+\t\t// for GUI unit test, just return true\n+\t\tif (comment != null && comment.equals(\"__UNIT_TEST__RETURN_TRUE__\")) return true;\n+\n+\t\tJSONObject result = _queryBuffer(\n+\t\t\t\t\"event.acknowledge\"\n+\t\t\t\t, new JSONObject()\n+\t\t\t\t\t.put(\"eventids\", new JSONArray().put(eventid))\n+\t\t);\n+\t\t// it can be an (empty) array\n+\t\ttry {\n+\t\t\treturn result.getJSONObject(\"result\").getJSONArray(\"eventids\").length() == 1;\n+\t\t} catch (JSONException e) {\n+\t\t\t// or a json object\n+\t\t\treturn result.getJSONObject(\"result\").getJSONObject(\"eventids\").length() == 1;\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * zabbix auth. user and pwd from app preferences\n+\t * @return true success\n+\t * @throws ClientProtocolException\n+\t * @throws IOException\n+\t * @throws JSONException\n+\t * @throws HttpAuthorizationRequiredException\n+\t * @throws NoAPIAccessException\n+\t */\n+\tpublic boolean authenticate() throws ClientProtocolException, IOException, JSONException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n+\t\tSharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(context);\n+\t\tString url = prefs.getString(\"zabbix_url\", \"\").trim();\n+\t\tString user = prefs.getString(\"zabbix_username\", \"\").trim();\n+\t\tString password = prefs.getString(\"zabbix_password\", \"\");\n+\n+\t\tthis.url = url+(url.endsWith(\"/\")?\"\":'/')+\"api_jsonrpc.php\";\n+\t\tLog.d(\"ZabbixContentProvider\", url+\"//\"+user);\n+\n+\t\ttry {\n+\t\t\tJSONObject result = _queryBuffer(\n+\t\t\t\t\t\"user.authenticate\"\n+\t\t\t\t\t, new JSONObject()\n+\t\t\t\t\t\t.put(\"user\", user)\n+\t\t\t\t\t\t.put(\"password\", password)\n+\t\t\t);\n+\t\t\ttoken = result.getString(\"result\");\n+\t\t} catch (JSONException e) {\n+\t\t\t// there's no result\n+\t\t\te.printStackTrace();\n+\t\t} catch (RuntimeException e) {\n+\t\t\t// wrong password. token remains null\n+\t\t\te.printStackTrace();\n+\t\t}\n+\t\tif (token != null) {\n+\t\t\t// get API version\n+\t\t\tJSONObject result = _queryBuffer(\n+\t\t\t\t\t\"apiinfo.version\"\n+\t\t\t\t\t, new JSONObject()\n+\t\t\t);\n+\t\t\tisVersion2 = result.getString(\"result\").equals(\"1.4\");\n+\t\t}\n+\t\treturn token != null;\n+\t}\n+\n+\t/**\n+\t * close the last http stream\n+\t */\n+\tpublic void closeLastStream() {\n+\t\tif (lastStream != null && !lastStream.isClosed()) {\n+\t\t\ttry {\n+\t\t\t\tlastStream.close();\n+\t\t\t} catch (IOException e) {\n+\t\t\t\te.printStackTrace();\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\tprivate void importApplications(long hostid, long itemid, JsonArrayReader jsonArray) throws JsonParseException, NumberFormatException, IOException {\n+\t\tint num = 0;\n+\t\tJsonObjectReader application;\n+\t\twhile ((application = jsonArray.next()) != null) {\n+\t\t\tApplicationData app = new ApplicationData();\n+\t\t\twhile (application.nextValueToken()) {\n+\t\t\t\tString propName = application.getCurrentName();\n+\t\t\t\tif (propName.equals(ApplicationData.COLUMN_APPLICATIONID)) {\n+\t\t\t\t\tapp.set(ApplicationData.COLUMN_APPLICATIONID, Long.parseLong(application.getText()));\n+\t\t\t\t} else if (propName.equals(ApplicationData.COLUMN_NAME)) {\n+\t\t\t\t\tapp.set(ApplicationData.COLUMN_NAME, application.getText());\n+\t\t\t\t} else if (propName.equals(ApplicationData.COLUMN_HOSTID)) {\n+\t\t\t\t\tapp.set(ApplicationData.COLUMN_HOSTID, Long.parseLong(application.getText()));\n+\t\t\t\t} else {\n+\t\t\t\t\tapplication.nextProperty();\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\t// create applications that does not exist\n+\t\t\tapp.insert(zabbixLocalDB, ApplicationData.COLUMN_APPLICATIONID);\n+\t\t\t_commitTransactionIfRecommended();\n+\n+\t\t\t// create ApplicationItemRelation\n+\t\t\tlong appid = (Long) app.get(ApplicationData.COLUMN_APPLICATIONID);\n+\t\t\tApplicationItemRelationData rel = new ApplicationItemRelationData();\n+\t\t\trel.set(ApplicationItemRelationData.COLUMN_APPLICATIONID, appid);\n+\t\t\trel.set(ApplicationItemRelationData.COLUMN_ITEMID, itemid);\n+\t\t\trel.set(ApplicationItemRelationData.COLUMN_HOSTID, hostid);\n+\t\t\trel.insert(zabbixLocalDB);\n+\t\t\t_commitTransactionIfRecommended();\n+\n+\t\t\tnum++;\n+\t\t}\n+\t\tif (num == 0) {\n+\t\t\t// if there's no application, the ID #0 must be added (for other)\n+\t\t\tApplicationItemRelationData rel = new ApplicationItemRelationData();\n+\t\t\trel.set(ApplicationItemRelationData.COLUMN_APPLICATIONID, 0);\n+\t\t\trel.set(ApplicationItemRelationData.COLUMN_ITEMID, itemid);\n+\t\t\trel.set(ApplicationItemRelationData.COLUMN_HOSTID, hostid);\n+\t\t\trel.insert(zabbixLocalDB);\n+\n+\t\t\t// if #0 \"other\" does not exist yet, it has to be created\n+\t\t\tApplicationData app = new ApplicationData();\n+\t\t\tapp.set(ApplicationData.COLUMN_APPLICATIONID, 0);\n+\t\t\tapp.set(ApplicationData.COLUMN_NAME, \"- \"+context.getResources().getString(R.string.other)+\" -\");\n+\t\t\tapp.insert(zabbixLocalDB, ApplicationData.COLUMN_APPLICATIONID);\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * import the newest event of a trigger\n+\t * @param triggerid\n+\t * @throws JSONException\n+\t * @throws IOException\n+\t * @throws HttpAuthorizationRequiredException\n+\t * @throws NoAPIAccessException\n+\t */\n+\tpublic void importEventByTriggerId(String triggerid) throws JSONException, IOException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n+\t\tif (!isCached(EventData.TABLE_NAME, \"triggerid=\"+triggerid)) {\n+\t\t\t_startTransaction();\n+\t\t\tzabbixLocalDB.delete(EventData.TABLE_NAME, EventData.COLUMN_OBJECTID+\"=\"+triggerid, null);\n+\n+\t\t\tJSONObject params = new JSONObject()\n+\t\t\t\t.put(\"output\", \"extend\")\n+\t\t\t\t.put(isVersion2?\"selectHosts\":\"select_hosts\", \"extend\")\n+\t\t\t\t.put(\"triggerids\", new JSONArray().put(triggerid))\n+\t\t\t\t.put(\"limit\", 1)\n+\t\t\t\t.put(\"source\", 0);\n+\t\t\tif (!isVersion2) {\n+\t\t\t\tparams.put(\"sortfield\", \"clock\")\n+\t\t\t\t\t.put(\"sortorder\", \"DESC\");\n+\t\t\t}\n+\n+\t\t\tJsonArrayReader events = _queryStream(\n+\t\t\t\t\t\"event.get\"\n+\t\t\t\t\t, params\n+\t\t\t);\n+\t\t\timportEvents(events, null);\n+\t\t\tevents.close();\n+\n+\t\t\tsetCached(EventData.TABLE_NAME, \"triggerid=\"+triggerid, ZabbixConfig.CACHE_LIFETIME_EVENTS);\n+\t\t\t_endTransaction();\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * import the newest events\n+\t * @throws ClientProtocolException\n+\t * @throws IOException\n+\t * @throws JSONException\n+\t * @throws HttpAuthorizationRequiredException\n+\t * @throws NoAPIAccessException\n+\t */\n+\tpublic void importEvents() throws ClientProtocolException, IOException, JSONException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n+\t\tif (!isCached(EventData.TABLE_NAME, null)) {\n+\t\t\t_startTransaction();\n+\t\t\tzabbixLocalDB.delete(EventData.TABLE_NAME, null, null);\n+\t\t\tzabbixLocalDB.delete(TriggerData.TABLE_NAME, null, null);\n+\t\t\tzabbixLocalDB.delete(CacheData.TABLE_NAME, CacheData.COLUMN_KIND+\"='\"+EventData.TABLE_NAME+\"'\", null);\n+\t\t\tzabbixLocalDB.delete(CacheData.TABLE_NAME, CacheData.COLUMN_KIND+\"='\"+TriggerData.TABLE_NAME+\"'\", null);\n+\n+\t\t\tint numEvents = ZabbixConfig.EVENTS_GET_LIMIT;\n+\n+\t\t\tJSONObject params = new JSONObject()\n+\t\t\t\t.put(\"output\", \"extend\")\n+\t\t\t\t.put(\"limit\", ZabbixConfig.EVENTS_GET_LIMIT)\n+\t\t\t\t.put(isVersion2?\"selectHosts\":\"select_hosts\", \"extend\")\n+\t\t\t\t.put(isVersion2?\"selectTriggers\":\"select_triggers\", \"extend\")\n+\t\t\t\t.put(\"source\", 0)\n+\t\t\t\t.put(\"time_from\", (new Date().getTime()/1000) - ZabbixConfig.EVENT_GET_TIME_FROM_SHIFT);\n+\t\t\tif (!isVersion2) {\n+\t\t\t\t// in Zabbix version <2.0, this is not default\n+\t\t\t\tparams.put(\"sortfield\", \"clock\")\n+\t\t\t\t\t.put(\"sortorder\", \"DESC\");\n+\t\t\t}\n+\t\t\tJsonArrayReader events = _queryStream(\n+\t\t\t\t\t\"event.get\"\n+\t\t\t\t\t, params\n+\t\t\t);\n+\t\t\timportEvents(events, numEvents);\n+\t\t\tevents.close();\n+\n+\t\t\tsetCached(EventData.TABLE_NAME, null, ZabbixConfig.CACHE_LIFETIME_EVENTS);\n+\t\t\t_endTransaction();\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * @param events stream\n+\t * @param numEvents if null, no progressbar-update AND only isert, if it does not exist. If !null, progressbar-update AND always insert without checking\n+\t * @throws JsonParseException\n+\t * @throws IOException\n+\t */\n+\tprivate void importEvents(JsonArrayReader events, Integer numEvents) throws JsonParseException, IOException {\n+\t\tint i=0;\n+\t\tJsonObjectReader eventReader;\n+\t\twhile ((eventReader = events.next()) != null) {\n+\t\t\tEventData e = new EventData();\n+\t\t\twhile (eventReader.nextValueToken()) {\n+\t\t\t\tString propName = eventReader.getCurrentName();\n+\t\t\t\tif (propName.equals(\"hosts\")) {\n+\t\t\t\t\t// import hosts\n+\t\t\t\t\tString hostnames = (String) importHosts(eventReader.getJsonArray(), null)[0];\n+\t\t\t\t\t// store hosts namen\n+\t\t\t\t\te.set(EventData.COLUMN_HOSTS, hostnames);\n+\t\t\t\t} else if (propName.equals(\"triggers\")) {\n+\t\t\t\t\t// import triggers\n+\t\t\t\t\timportTriggers(eventReader.getJsonArray());\n+\t\t\t\t} else if (propName.equals(EventData.COLUMN_EVENTID)) {\n+\t\t\t\t\te.set(EventData.COLUMN_EVENTID, Long.parseLong(eventReader.getText()));\n+\t\t\t\t} else if (propName.equals(EventData.COLUMN_CLOCK)) {\n+\t\t\t\t\te.set(EventData.COLUMN_CLOCK, Integer.parseInt(eventReader.getText()));\n+\t\t\t\t} else if (propName.equals(EventData.COLUMN_OBJECTID)) {\n+\t\t\t\t\te.set(EventData.COLUMN_OBJECTID, Long.parseLong(eventReader.getText()));\n+\t\t\t\t} else if (propName.equals(EventData.COLUMN_ACK)) {\n+\t\t\t\t\te.set(EventData.COLUMN_ACK, Integer.parseInt(eventReader.getText()) == 1);\n+\t\t\t\t} else if (propName.equals(EventData.COLUMN_VALUE)) {\n+\t\t\t\t\te.set(EventData.COLUMN_VALUE, Integer.parseInt(eventReader.getText()));\n+\t\t\t\t} else {\n+\t\t\t\t\teventReader.nextProperty();\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\t// event is parsed and can be inserted into the db\n+\t\t\tif (numEvents == null) {\n+\t\t\t\te.insert(zabbixLocalDB, EventData.COLUMN_EVENTID);\n+\t\t\t} else {\n+\t\t\t\te.insert(zabbixLocalDB);\n+\t\t\t\tif (++i % 10 == 0) {\n+\t\t\t\t\tshowProgress(i*100/numEvents);\n+\t\t\t\t}\n+\t\t\t}\n+\n+\t\t\t_commitTransactionIfRecommended();\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * import graph items\n+\t *\n+\t * @param graphItems\n+\t * @return true, if graphid column has to be updated from -1 to the correct graphid later.\n+\t * @throws JsonParseException\n+\t * @throws NumberFormatException\n+\t * @throws IOException\n+\t */\n+\tprivate boolean importGraphItems(JsonArrayReader graphItems) throws JsonParseException, NumberFormatException, IOException {\n+\t\tboolean mustSetGraphid = false;\n+\t\tJsonObjectReader graphItemReader;\n+\t\twhile ((graphItemReader = graphItems.next()) != null) {\n+\t\t\tGraphItemData gi = new GraphItemData();\n+\t\t\twhile (graphItemReader.nextValueToken()) {\n+\t\t\t\tString propName = graphItemReader.getCurrentName();\n+\t\t\t\tif (propName.equals(\"gitemid\")) {\n+\t\t\t\t\tgi.set(GraphItemData.COLUMN_GRAPHITEMID, Long.parseLong(graphItemReader.getText()));\n+\t\t\t\t} else if (propName.equals(GraphItemData.COLUMN_GRAPHID)) {\n+\t\t\t\t\tgi.set(GraphItemData.COLUMN_GRAPHID, Long.parseLong(graphItemReader.getText()));\n+\t\t\t\t} else if (propName.equals(GraphItemData.COLUMN_ITEMID)) {\n+\t\t\t\t\tgi.set(GraphItemData.COLUMN_ITEMID, Long.parseLong(graphItemReader.getText()));\n+\t\t\t\t} else if (propName.equals(GraphItemData.COLUMN_COLOR)) {\n+\t\t\t\t\t// hex string => color int\n+\t\t\t\t\tgi.set(GraphItemData.COLUMN_COLOR, Color.parseColor(\"#\"+graphItemReader.getText()));\n+\t\t\t\t} else {\n+\t\t\t\t\tgraphItemReader.nextProperty();\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\t// if graphid-column was not set, this must be done later. temporary graphid=-1\n+\t\t\tif (gi.get(GraphItemData.COLUMN_GRAPHID) == null) {\n+\t\t\t\tgi.set(GraphItemData.COLUMN_GRAPHID, -1);\n+\t\t\t\tmustSetGraphid = true;\n+\t\t\t}\n+\t\t\tgi.insert(zabbixLocalDB);\n+\t\t}\n+\t\treturn mustSetGraphid;\n+\t}\n+\n+\tpublic void importGraphsForScreen(long screenid) throws ClientProtocolException, IOException, JSONException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n+\t\tif (!isCached(GraphData.TABLE_NAME, \"screenid=\"+screenid)) {\n+\t\t\t_startTransaction();\n+\n+\t\t\t// collect all graphids\n+\t\t\tSet<Long> graphids = new HashSet<Long>();\n+\t\t\tCursor cur = zabbixLocalDB.query(ScreenItemData.TABLE_NAME, null, ScreenItemData.COLUMN_SCREENID+\"=\"+screenid, null, null, null, null);\n+\t\t\twhile (cur.moveToNext()) {\n+\t\t\t\tgraphids.add(cur.getLong(cur.getColumnIndex(ScreenItemData.COLUMN_RESOURCEID)));\n+\t\t\t}\n+\n+\t\t\t// delete old graphs\n+\t\t\tString str_graphids = graphids.toString().replace(\"[\", \"\").replace(\"]\", \"\");\n+\t\t\tif (str_graphids.length()>0) {\n+\t\t\t\tzabbixLocalDB.delete(GraphData.TABLE_NAME, GraphData.COLUMN_GRAPHID+\" IN (\"+str_graphids+\")\", null);\n+\t\t\t\tzabbixLocalDB.delete(GraphItemData.TABLE_NAME, GraphItemData.COLUMN_GRAPHID+\" IN (\"+str_graphids+\")\", null);\n+\t\t\t}\n+\t\t\tzabbixLocalDB.delete(CacheData.TABLE_NAME, CacheData.COLUMN_KIND+\"='\"+GraphData.TABLE_NAME+\"' AND \"+CacheData.COLUMN_FILTER+\"='screenid=\"+screenid+'\\'', null);\n+\n+\t\t\tJsonArrayReader graphs = _queryStream(\n+\t\t\t\t\t\"graph.get\"\n+\t\t\t\t\t, new JSONObject()\n+\t\t\t\t\t\t.put(isVersion2?\"selectGraphItems\":\"select_graph_items\", \"extend\")\n+\t\t\t\t\t\t.put(isVersion2?\"selectItems\":\"select_items\", \"extend\")\n+\t\t\t\t\t\t.put(\"output\", \"extend\")\n+\t\t\t\t\t\t.put(\"graphids\", new JSONArray(graphids))\n+\t\t\t);\n+\t\t\tJsonObjectReader graphReader;\n+\t\t\twhile ((graphReader = graphs.next()) != null) {\n+\t\t\t\tboolean mustSetGraphid = false;\n+\t\t\t\tGraphData scr = new GraphData();\n+\t\t\t\twhile (graphReader.nextValueToken()) {\n+\t\t\t\t\tString propName = graphReader.getCurrentName();\n+\t\t\t\t\tif (propName.equals(GraphData.COLUMN_GRAPHID)) {\n+\t\t\t\t\t\tscr.set(GraphData.COLUMN_GRAPHID, Long.parseLong(graphReader.getText()));\n+\t\t\t\t\t} else if (propName.equals(GraphData.COLUMN_NAME)) {\n+\t\t\t\t\t\tscr.set(GraphData.COLUMN_NAME, graphReader.getText());\n+\t\t\t\t\t} else if (propName.equals(\"gitems\")) {\n+\t\t\t\t\t\tmustSetGraphid = importGraphItems(graphReader.getJsonArray());\n+\t\t\t\t\t} else if (propName.equals(\"items\")) {\n+\t\t\t\t\t\timportItems(graphReader.getJsonArray(), 0, true);\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tgraphReader.nextProperty();\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\tscr.insert(zabbixLocalDB);\n+\t\t\t\tif (mustSetGraphid) {\n+\t\t\t\t\tContentValues values = new ContentValues(1);\n+\t\t\t\t\tvalues.put(GraphItemData.COLUMN_GRAPHID, (Long) scr.get(GraphData.COLUMN_GRAPHID));\n+\t\t\t\t\tzabbixLocalDB.update(\n+\t\t\t\t\t\t\tGraphItemData.TABLE_NAME\n+\t\t\t\t\t\t\t, values\n+\t\t\t\t\t\t\t, GraphItemData.COLUMN_GRAPHID+\"=-1\"\n+\t\t\t\t\t\t\t, null);\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\tgraphs.close();\n+\n+\t\t\tsetCached(GraphData.TABLE_NAME, \"screenid=\"+screenid, ZabbixConfig.CACHE_LIFETIME_SCREENS);\n+\t\t\t_endTransaction();\n+\t\t}\n+\t}\n+\n+\tpublic void importHistoryDetails(String itemid) throws ClientProtocolException, IOException, JSONException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n+\t\tif (!isCached(HistoryDetailData.TABLE_NAME, itemid)) {\n+\t\t\t_startTransaction();\n+\t\t\tzabbixLocalDB.delete(HistoryDetailData.TABLE_NAME, HistoryDetailData.COLUMN_ITEMID+\"=\"+itemid, null);\n+\n+\t\t\t// the past 2 hours\n+\t\t\tlong time_till = new Date().getTime() / 1000;\n+\t\t\tlong time_from = time_till - ZabbixConfig.HISTORY_GET_TIME_FROM_SHIFT; // jetzt-2h\n+\n+\t\t\t// Workaround: historydetails only comes if you use the correct \"history\"-parameter.\n+\t\t\t// this parameter can be \"null\" or a number 0-4. Because we don't know when to use which,\n+\t\t\t// we try them all, until we get results.\n+\t\t\tInteger historytype = null;\n+\t\t\tJSONObject result = _queryBuffer(\n+\t\t\t\t\t\"history.get\"\n+\t\t\t\t\t, new JSONObject()\n+\t\t\t\t\t\t.put(\"limit\", 1)\n+\t\t\t\t\t\t.put(\"history\", historytype) // for integer ?\n+\t\t\t\t\t\t.put(\"itemids\", new JSONArray().put(itemid))\n+\t\t\t\t\t\t.put(\"time_from\", time_from)\n+\t\t\t);\n+\n+\t\t\tJSONArray testHistorydetails = result.getJSONArray(\"result\");\n+\t\t\tif (testHistorydetails.length() == 0) {\n+\t\t\t\thistorytype = -1;\n+\t\t\t\twhile (testHistorydetails.length() == 0 && ++historytype <= 4) {\n+\t\t\t\t\t// if we get an empty array, we try another history parameter\n+\t\t\t\t\tresult = _queryBuffer(\n+\t\t\t\t\t\t\t\"history.get\"\n+\t\t\t\t\t\t\t, new JSONObject()\n+\t\t\t\t\t\t\t\t.put(\"output\", \"extend\")\n+\t\t\t\t\t\t\t\t.put(\"limit\", 1)\n+\t\t\t\t\t\t\t\t.put(\"history\", historytype)\n+\t\t\t\t\t\t\t\t.put(\"itemids\", new JSONArray().put(itemid))\n+\t\t\t\t\t\t\t\t.put(\"time_from\", time_from)\n+\t\t\t\t\t);\n+\t\t\t\t\ttestHistorydetails = result.getJSONArray(\"result\");\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\t// correct historytype found and there are data\n+\t\t\tif (testHistorydetails.length() > 0) {\n+\t\t\t\t// count of the entries cannot be detected (zabbix bug),\n+\t\t\t\t// so we use a fiction\n+\t\t\t\tint numDetails = 400;\n+\t\t\t\tint curI=0;\n+\t\t\t\tJsonArrayReader historydetails = _queryStream(\n+\t\t\t\t\t\t\"history.get\"\n+\t\t\t\t\t\t, new JSONObject()\n+\t\t\t\t\t\t\t.put(\"output\", \"extend\")\n+\t\t\t\t\t\t\t.put(\"limit\", ZabbixConfig.HISTORY_GET_LIMIT)\n+\t\t\t\t\t\t\t.put(\"history\", historytype)\n+\t\t\t\t\t\t\t.put(\"itemids\", new JSONArray().put(itemid))\n+\t\t\t\t\t\t\t.put(\"time_from\", time_from)\n+\t\t\t\t\t\t\t.put(\"sortfield\", \"clock\")\n+\t\t\t\t\t\t\t.put(\"sortorder\", \"DESC\")\n+\t\t\t\t);\n+\t\t\t\tJsonObjectReader historydetail;\n+\t\t\t\ttry {\n+\t\t\t\t\tint selI = 0;\n+\t\t\t\t\twhile ((historydetail = historydetails.next()) != null) {\n+\t\t\t\t\t\t// save only every 20th\n+\t\t\t\t\t\tif (selI++ % 20 != 0) {\n+\t\t\t\t\t\t\twhile (historydetail.nextValueToken()) {\n+\t\t\t\t\t\t\t\thistorydetail.nextProperty();\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\tcontinue;\n+\t\t\t\t\t\t}\n+\n+\t\t\t\t\t\tHistoryDetailData h = new HistoryDetailData();\n+\t\t\t\t\t\twhile (historydetail.nextValueToken()) {\n+\t\t\t\t\t\t\tString propName = historydetail.getCurrentName();\n+\t\t\t\t\t\t\tif (propName.equals(HistoryDetailData.COLUMN_CLOCK)) {\n+\t\t\t\t\t\t\t\th.set(HistoryDetailData.COLUMN_CLOCK, Integer.parseInt(historydetail.getText()));\n+\t\t\t\t\t\t\t} else if (propName.equals(HistoryDetailData.COLUMN_ITEMID)) {\n+\t\t\t\t\t\t\t\th.set(HistoryDetailData.COLUMN_ITEMID, Long.parseLong(historydetail.getText()));\n+\t\t\t\t\t\t\t} else if (propName.equals(HistoryDetailData.COLUMN_VALUE)) {\n+\t\t\t\t\t\t\t\th.set(HistoryDetailData.COLUMN_VALUE, Double.parseDouble(historydetail.getText()));\n+\t\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\t\thistorydetail.nextProperty();\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\th.insert(zabbixLocalDB);\n+\t\t\t\t\t\tif (++curI % 10 == 0) {\n+\t\t\t\t\t\t\tshowProgress(Math.min(curI*100/numDetails, 84));\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\t_commitTransactionIfRecommended();\n+\t\t\t\t\t}\n+\t\t\t\t} catch (NumberFormatException e) {\n+\t\t\t\t\t// data are unuseable, e.g. because it's a string\n+\t\t\t\t}\n+\t\t\t\thistorydetails.close();\n+\t\t\t}\n+\t\t\tsetCached(HistoryDetailData.TABLE_NAME, itemid, ZabbixConfig.CACHE_LIFETIME_HISTORY_DETAILS);\n+\t\t\t_endTransaction();\n+\t\t}\n+\t}\n+\n+\tprivate long importHostGroups(JsonArrayReader jsonArray) throws JsonParseException, IOException {\n+\t\tlong firstHostGroupId = -1;\n+\t\tJsonObjectReader hostReader;\n+\t\twhile ((hostReader = jsonArray.next()) != null) {\n+\t\t\tHostGroupData h = new HostGroupData();\n+\t\t\twhile (hostReader.nextValueToken()) {\n+\t\t\t\tString propName = hostReader.getCurrentName();\n+\t\t\t\tif (propName.equals(HostGroupData.COLUMN_GROUPID)) {\n+\t\t\t\t\tlong id = Long.parseLong(hostReader.getText());\n+\t\t\t\t\tif (firstHostGroupId == -1) firstHostGroupId = id;\n+\t\t\t\t\th.set(HostGroupData.COLUMN_GROUPID, id);\n+\t\t\t\t} else if (propName.equals(HostGroupData.COLUMN_NAME)) {\n+\t\t\t\t\th.set(HostGroupData.COLUMN_NAME, hostReader.getText());\n+\t\t\t\t} else {\n+\t\t\t\t\thostReader.nextProperty();\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\th.insert(zabbixLocalDB, HostGroupData.COLUMN_GROUPID);\n+\t\t\t_commitTransactionIfRecommended();\n+\t\t}\n+\n+\t\treturn firstHostGroupId;\n+\t}\n+\n+\t/**\n+\t * import the hosts from stream\n+\t * @param jsonArray stream\n+\t * @param numHosts count of hosts for progressbar. null if unknown.\n+\t * @return Object[] {(String) comma-separated all Hostnames, (Long) 1. host id}\n+\t * @throws JsonParseException\n+\t * @throws IOException\n+\t */\n+\tprivate Object[] importHosts(JsonArrayReader jsonArray, Integer numHosts) throws JsonParseException, IOException {\n+\t\tList<String> hostnames = new ArrayList<String>();\n+\t\tlong firstHostId = -1;\n+\t\tJsonObjectReader hostReader;\n+\t\tint i=0;\n+\t\twhile ((hostReader = jsonArray.next()) != null) {\n+\t\t\tHostData h = new HostData();\n+\t\t\twhile (hostReader.nextValueToken()) {\n+\t\t\t\tString propName = hostReader.getCurrentName();\n+\t\t\t\tif (propName.equals(HostData.COLUMN_HOSTID)) {\n+\t\t\t\t\th.set(HostData.COLUMN_HOSTID, Long.parseLong(hostReader.getText()));\n+\t\t\t\t\tif (firstHostId == -1) {\n+\t\t\t\t\t\tfirstHostId = (Long) h.get(HostData.COLUMN_HOSTID);\n+\t\t\t\t\t}\n+\t\t\t\t} else if (propName.equals(HostData.COLUMN_HOST)) {\n+\t\t\t\t\tString host = hostReader.getText();\n+\t\t\t\t\thostnames.add(host);\n+\t\t\t\t\th.set(HostData.COLUMN_HOST, host);\n+\t\t\t\t} else if (propName.equals(\"groups\")) {\n+\t\t\t\t\tlong groupid = importHostGroups(hostReader.getJsonArray());\n+\t\t\t\t\tif (groupid != -1) {\n+\t\t\t\t\t\th.set(HostData.COLUMN_GROUPID, groupid);\n+\t\t\t\t\t}\n+\t\t\t\t} else {\n+\t\t\t\t\thostReader.nextProperty();\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\t// host without group will get group #0 (other)\n+\t\t\tif (h.get(HostData.COLUMN_GROUPID) == null) {\n+\t\t\t\th.set(HostData.COLUMN_GROUPID, 0);\n+\t\t\t\t// create \"other\" hostgroup #1\n+\t\t\t\tHostGroupData hg = new HostGroupData();\n+\t\t\t\thg.set(HostGroupData.COLUMN_GROUPID, 0);\n+\t\t\t\thg.set(HostGroupData.COLUMN_NAME, \"- \"+context.getResources().getString(R.string.other)+\" -\");\n+\t\t\t\thg.insert(zabbixLocalDB, HostGroupData.COLUMN_GROUPID);\n+\t\t\t}\n+\t\t\th.insert(zabbixLocalDB, HostData.COLUMN_HOSTID);\n+\t\t\tif (numHosts != null && ++i % 10 == 0) {\n+\t\t\t\tshowProgress(i*100/numHosts);\n+\t\t\t}\n+\t\t\t_commitTransactionIfRecommended();\n+\t\t}\n+\n+\t\treturn new Object[] {hostnames.toString().replaceAll(\"[\\\\[\\\\]]\", \"\"), firstHostId};\n+\t}\n+\n+\tpublic void importHostsAndGroups() throws JSONException, IOException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n+\t\tif (!isCached(HostData.TABLE_NAME, null)) {\n+\t\t\t_startTransaction();\n+\t\t\tzabbixLocalDB.delete(HostData.TABLE_NAME, null, null);\n+\t\t\tzabbixLocalDB.delete(HostGroupData.TABLE_NAME, null, null);\n+\n+\t\t\t// get count of hosts\n+\t\t\tJSONObject result = _queryBuffer(\n+\t\t\t\t\t\"host.get\"\n+\t\t\t\t\t, new JSONObject()\n+\t\t\t\t\t\t.put(\"countOutput\", 1)\n+\t\t\t\t\t\t.put(\"limit\", ZabbixConfig.HOST_GET_LIMIT)\n+\t\t\t\t\t\t.put(isVersion2?\"selectGroups\":\"select_groups\", \"extend\")\n+\t\t\t);\n+\t\t\tint numHosts = result.getInt(\"result\");\n+\t\t\tJsonArrayReader hosts = _queryStream(\n+\t\t\t\t\t\"host.get\"\n+\t\t\t\t\t, new JSONObject()\n+\t\t\t\t\t\t.put(\"output\", \"extend\")\n+\t\t\t\t\t\t.put(\"limit\", ZabbixConfig.HOST_GET_LIMIT)\n+\t\t\t\t\t\t.put(isVersion2?\"selectGroups\":\"select_groups\", \"extend\")\n+\t\t\t);\n+\t\t\timportHosts(hosts, numHosts);\n+\t\t\thosts.close();\n+\n+\t\t\tsetCached(HostData.TABLE_NAME, null, ZabbixConfig.CACHE_LIFETIME_HOSTS);\n+\t\t\t_endTransaction();\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * import items from stream.\n+\t * @param items stream\n+\t * @param numItems count for progressbar, if 0 no progressbarupdate\n+\t * @param checkBeforeInsert if true, only make an insert if item does not exist\n+\t * @return the first item id\n+\t * @throws JsonParseException\n+\t * @throws IOException\n+\t */\n+\tprivate long importItems(JsonArrayReader items, int numItems, boolean checkBeforeInsert) throws JsonParseException, IOException {\n+\t\tlong firstItemId = -1;\n+\t\tint curI=0;\n+\t\tJsonObjectReader itemReader;\n+\t\twhile ((itemReader = items.next()) != null) {\n+\t\t\tItemData i = new ItemData();\n+\t\t\tString key_ = null;\n+\t\t\twhile (itemReader.nextValueToken()) {\n+\t\t\t\tString propName = itemReader.getCurrentName();\n+\t\t\t\tif (propName.equals(ItemData.COLUMN_ITEMID)) {\n+\t\t\t\t\ti.set(ItemData.COLUMN_ITEMID, Long.parseLong(itemReader.getText()));\n+\t\t\t\t\tif (firstItemId == -1) {\n+\t\t\t\t\t\tfirstItemId = (Long) i.get(ItemData.COLUMN_ITEMID);\n+\t\t\t\t\t}\n+\t\t\t\t} else if (propName.equals(ItemData.COLUMN_HOSTID)) {\n+\t\t\t\t\ti.set(ItemData.COLUMN_HOSTID, Long.parseLong(itemReader.getText()));\n+\t\t\t\t} else if (propName.equals(ItemData.COLUMN_DESCRIPTION) || propName.equals(\"name\")) {\n+\t\t\t\t\t// since zabbix 2.x is the name of the item \"name\"\n+\t\t\t\t\t// before zabbix 2.x the name field was \"description\"\n+\t\t\t\t\tif (isVersion2 && propName.equals(\"name\")) {\n+\t\t\t\t\t\ti.set(ItemData.COLUMN_DESCRIPTION, itemReader.getText());\n+\t\t\t\t\t} else if (!isVersion2) {\n+\t\t\t\t\t\ti.set(ItemData.COLUMN_DESCRIPTION, itemReader.getText());\n+\t\t\t\t\t}\n+\t\t\t\t} else if (propName.equals(ItemData.COLUMN_LASTCLOCK)) {\n+\t\t\t\t\ttry {\n+\t\t\t\t\t\ti.set(ItemData.COLUMN_LASTCLOCK, Integer.parseInt(itemReader.getText()));\n+\t\t\t\t\t} catch (NumberFormatException e) {\n+\t\t\t\t\t\t// ignore\n+\t\t\t\t\t}\n+\t\t\t\t} else if (propName.equals(ItemData.COLUMN_LASTVALUE)) {\n+\t\t\t\t\ti.set(ItemData.COLUMN_LASTVALUE, itemReader.getText());\n+\t\t\t\t} else if (propName.equals(ItemData.COLUMN_UNITS)) {\n+\t\t\t\t\ti.set(ItemData.COLUMN_UNITS, itemReader.getText());\n+\t\t\t\t} else if (propName.equals(\"key_\")) {\n+\t\t\t\t\tkey_ = itemReader.getText();\n+\t\t\t\t} else if (propName.equals(\"applications\")) {\n+\t\t\t\t\t// at this point itemid and hostid is unknown\n+\t\t\t\t\t// because of this, all applicationrelations will be saved with itemid and hostid \"-1\".\n+\t\t\t\t\t// later the IDs will be replaced with the correct\n+\t\t\t\t\timportApplications(-1, -1, itemReader.getJsonArray());\n+\t\t\t\t} else {\n+\t\t\t\t\titemReader.nextProperty();\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\t// if applicable replace placeholder\n+\t\t\tString description = (String) i.get(ItemData.COLUMN_DESCRIPTION);\n+\t\t\tif (description.matches(\".*\\\\$[0-9].*\")) {\n+\t\t\t\tif (key_ != null && key_.indexOf('[') != -1) {\n+\t\t\t\t\tString[] keys = key_.substring(key_.indexOf('[')+1, key_.indexOf(']')).split(\",\");\n+\t\t\t\t\tfor (int ix=0; ix<keys.length; ix++) {\n+\t\t\t\t\t\tdescription = description.replace(\"$\"+(ix+1), keys[ix]);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\ti.set(ItemData.COLUMN_DESCRIPTION, description);\n+\t\t\tif (checkBeforeInsert) {\n+\t\t\t\ti.insert(zabbixLocalDB, ItemData.COLUMN_ITEMID);\n+\t\t\t} else {\n+\t\t\t\ti.insert(zabbixLocalDB);\n+\t\t\t}\n+\t\t\tif (numItems > 0 && ++curI % 10 == 0) {\n+\t\t\t\tshowProgress(curI*100/numItems);\n+\t\t\t}\n+\n+\t\t\t// now the \"-1\" IDs of applicationsrelation will be replaced with the correct itemID\n+\t\t\tContentValues values = new ContentValues(2);\n+\t\t\tvalues.put(ApplicationItemRelationData.COLUMN_ITEMID, (Long) i.get(ItemData.COLUMN_ITEMID));\n+\t\t\tvalues.put(ApplicationItemRelationData.COLUMN_HOSTID, (Long) i.get(ItemData.COLUMN_HOSTID));\n+\t\t\tzabbixLocalDB.update(\n+\t\t\t\t\tApplicationItemRelationData.TABLE_NAME\n+\t\t\t\t\t, values\n+\t\t\t\t\t, ApplicationItemRelationData.COLUMN_ITEMID+\"=-1\"\n+\t\t\t\t\t, null\n+\t\t\t);\n+\t\t}\n+\t\treturn firstItemId;\n+\t}\n+\n+\tpublic void importItems(long hostid) throws JSONException, IOException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n+\t\tif (!isCached(ItemData.TABLE_NAME, \"hostid=\"+hostid)) {\n+\t\t\t_startTransaction();\n+\t\t\tzabbixLocalDB.delete(ItemData.TABLE_NAME, ItemData.COLUMN_HOSTID+\"=\"+hostid, null);\n+\t\t\tzabbixLocalDB.delete(ApplicationItemRelationData.TABLE_NAME, ApplicationItemRelationData.COLUMN_HOSTID+\"=\"+hostid, null);\n+\n+\t\t\t// count of items\n+\t\t\tJSONObject result = _queryBuffer(\n+\t\t\t\t\t\"item.get\"\n+\t\t\t\t\t, new JSONObject()\n+\t\t\t\t\t.put(\"output\", \"extend\")\n+\t\t\t\t\t.put(\"countOutput\", 1)\n+\t\t\t\t\t.put(\"limit\", ZabbixConfig.ITEM_GET_LIMIT)\n+\t\t\t\t\t.put(\"hostids\", new JSONArray().put(hostid))\n+\t\t\t);\n+\t\t\tint numItems = result.getInt(\"result\");\n+\t\t\tJsonArrayReader items = _queryStream(\n+\t\t\t\t\t\"item.get\"\n+\t\t\t\t\t, new JSONObject()\n+\t\t\t\t\t\t.put(\"output\", \"extend\")\n+\t\t\t\t\t\t.put(\"limit\", ZabbixConfig.ITEM_GET_LIMIT)\n+\t\t\t\t\t\t.put(isVersion2?\"selectApplications\":\"select_applications\", \"extend\")\n+\t\t\t\t\t\t.put(\"hostids\", new JSONArray().put(hostid))\n+\t\t\t);\n+\t\t\timportItems(items, numItems, false);\n+\t\t\titems.close();\n+\n+\t\t\tsetCached(ItemData.TABLE_NAME, \"hostid=\"+hostid, ZabbixConfig.CACHE_LIFETIME_ITEMS);\n+\t\t\t_endTransaction();\n+\t\t}\n+\t}\n+\n+\tprivate void importScreenItems(JsonArrayReader screenItems) throws JsonParseException, NumberFormatException, IOException {\n+\t\tJsonObjectReader screenItemReader;\n+\t\twhile ((screenItemReader = screenItems.next()) != null) {\n+\t\t\tScreenItemData si = new ScreenItemData();\n+\t\t\tint resourcetype = -1;\n+\t\t\twhile (screenItemReader.nextValueToken()) {\n+\t\t\t\tString propName = screenItemReader.getCurrentName();\n+\t\t\t\tif (propName.equals(ScreenItemData.COLUMN_SCREENITEMID)) {\n+\t\t\t\t\tsi.set(ScreenItemData.COLUMN_SCREENITEMID, Long.parseLong(screenItemReader.getText()));\n+\t\t\t\t} else if (propName.equals(ScreenItemData.COLUMN_SCREENID)) {\n+\t\t\t\t\tsi.set(ScreenItemData.COLUMN_SCREENID, Long.parseLong(screenItemReader.getText()));\n+\t\t\t\t} else if (propName.equals(ScreenItemData.COLUMN_RESOURCEID)) {\n+\t\t\t\t\tsi.set(ScreenItemData.COLUMN_RESOURCEID, Long.parseLong(screenItemReader.getText()));\n+\t\t\t\t} else if (propName.equals(\"resourcetype\")) {\n+\t\t\t\t\tresourcetype = Integer.parseInt(screenItemReader.getText());\n+\t\t\t\t} else {\n+\t\t\t\t\tscreenItemReader.nextProperty();\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\t// only resouretype == 0\n+\t\t\tif (resourcetype == 0) {\n+\t\t\t\tsi.insert(zabbixLocalDB);\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\tpublic void importScreens() throws ClientProtocolException, IOException, JSONException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n+\t\tif (!isCached(ScreenData.TABLE_NAME, null)) {\n+\t\t\t_startTransaction();\n+\n+\t\t\tzabbixLocalDB.delete(ScreenData.TABLE_NAME, null, null);\n+\t\t\tzabbixLocalDB.delete(ScreenItemData.TABLE_NAME, null, null);\n+\t\t\tzabbixLocalDB.delete(CacheData.TABLE_NAME, CacheData.COLUMN_KIND+\"='\"+ScreenData.TABLE_NAME+\"'\", null);\n+\n+\t\t\tJsonArrayReader screens = _queryStream(\n+\t\t\t\t\t(isVersion2?\"s\":\"S\")+\"creen.get\"\n+\t\t\t\t\t, new JSONObject()\n+\t\t\t\t\t\t.put(\"output\", \"extend\")\n+\t\t\t\t\t\t.put(isVersion2?\"selectScreenItems\":\"select_screenitems\", \"extend\")\n+\t\t\t);\n+\t\t\tJsonObjectReader screenReader;\n+\t\t\twhile ((screenReader = screens.next()) != null) {\n+\t\t\t\tScreenData scr = new ScreenData();\n+\t\t\t\twhile (screenReader.nextValueToken()) {\n+\t\t\t\t\tString propName = screenReader.getCurrentName();\n+\t\t\t\t\tif (propName.equals(ScreenData.COLUMN_SCREENID)) {\n+\t\t\t\t\t\tscr.set(ScreenData.COLUMN_SCREENID, Long.parseLong(screenReader.getText()));\n+\t\t\t\t\t} else if (propName.equals(ScreenData.COLUMN_NAME)) {\n+\t\t\t\t\t\tscr.set(ScreenData.COLUMN_NAME, screenReader.getText());\n+\t\t\t\t\t} else if (propName.equals(\"screenitems\")) {\n+\t\t\t\t\t\timportScreenItems(screenReader.getJsonArray());\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tscreenReader.nextProperty();\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\tscr.insert(zabbixLocalDB);\n+\t\t\t}\n+\t\t\tscreens.close();\n+\n+\t\t\tsetCached(ScreenData.TABLE_NAME, null, ZabbixConfig.CACHE_LIFETIME_SCREENS);\n+\t\t\t_endTransaction();\n+\t\t}\n+\t}\n+\n+\tpublic void importTrigger(String triggerid) throws JSONException, IOException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n+\t\tif (!isCached(TriggerData.TABLE_NAME, \"triggerid=\"+triggerid)) {\n+\t\t\t_startTransaction();\n+\n+\t\t\tJsonArrayReader trigger = _queryStream(\n+\t\t\t\t\t\"trigger.get\"\n+\t\t\t\t\t, new JSONObject()\n+\t\t\t\t\t\t.put(\"output\", \"extend\")\n+\t\t\t\t\t\t.put(isVersion2?\"selectHosts\":\"select_hosts\", \"extend\")\n+\t\t\t\t\t\t.put(\"triggerids\", new JSONArray().put(triggerid))\n+\t\t\t);\n+\t\t\timportTriggers(trigger);\n+\t\t\ttrigger.close();\n+\n+\t\t\tsetCached(TriggerData.TABLE_NAME, \"triggerid=\"+triggerid, ZabbixConfig.CACHE_LIFETIME_TRIGGERS);\n+\t\t\t_endTransaction();\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * importiert ein trigger mit dem attribute itemid. ggf. wird der trigger zuerst gelöscht und neu angelegt.\n+\t * imports a trigger with the attribute itemid. if trigger already exists, it will be removed first.\n+\t * @param triggerid\n+\t * @throws JSONException\n+\t * @throws IOException\n+\t * @throws HttpAuthorizationRequiredException\n+\t * @throws NoAPIAccessException\n+\t */\n+\tpublic void importTriggerColumnItemId(String triggerid) throws JSONException, IOException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n+\t\t// check if the trigger exists and if the itemid was set\n+\t\tboolean mustImport = true;\n+\t\tCursor cur = zabbixLocalDB.query(TriggerData.TABLE_NAME, null, TriggerData.COLUMN_TRIGGERID+\"=\"+triggerid, null, null, null, null);\n+\t\tif (cur.moveToFirst()) {\n+\t\t\tlong itemid = 0;\n+\t\t\ttry {\n+\t\t\t\titemid = cur.getLong(cur.getColumnIndex(TriggerData.COLUMN_ITEMID));\n+\t\t\t} catch (Exception e) {\n+\t\t\t\t// no itemid\n+\t\t\t}\n+\t\t\tif (itemid > 0) {\n+\t\t\t\tmustImport = false;\n+\t\t\t}\n+\t\t}\n+\t\tif (mustImport) {\n+\t\t\t_startTransaction();\n+\t\t\tzabbixLocalDB.delete(TriggerData.TABLE_NAME, TriggerData.COLUMN_TRIGGERID+\"=\"+triggerid, null);\n+\t\t\tJsonArrayReader triggers = _queryStream(\n+\t\t\t\t\t\"trigger.get\"\n+\t\t\t\t\t, new JSONObject()\n+\t\t\t\t\t\t.put(\"output\", \"extend\")\n+\t\t\t\t\t\t.put(isVersion2?\"selectHosts\":\"select_hosts\", \"extend\")\n+\t\t\t\t\t\t.put(isVersion2?\"selectGroups\":\"select_groups\", \"extend\")\n+\t\t\t\t\t\t.put(isVersion2?\"selectItems\":\"select_items\", \"extend\")\n+\t\t\t\t\t\t.put(\"triggerids\", new JSONArray().put(triggerid))\n+\t\t\t\t\t\t.put(\"limit\", 1)\n+\t\t\t);\n+\t\t\timportTriggers(triggers);\n+\t\t\t_endTransaction();\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * imports the \"warning\"-triggers\n+\t * @throws JSONException\n+\t * @throws IOException\n+\t * @throws HttpAuthorizationRequiredException\n+\t * @throws NoAPIAccessException\n+\t */\n+\tpublic void importTriggers() throws JSONException, IOException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n+\t\tif (!isCached(TriggerData.TABLE_NAME, null)) {\n+\t\t\t_startTransaction();\n+\n+\t\t\tlong min = (new Date().getTime()/1000)-ZabbixConfig.STATUS_SHOW_TRIGGER_TIME;\n+\t\t\tJsonArrayReader triggers = _queryStream(\n+\t\t\t\t\t\"trigger.get\"\n+\t\t\t\t\t, new JSONObject()\n+\t\t\t\t\t\t.put(\"output\", \"extend\")\n+\t\t\t\t\t\t.put(\"sortfield\", \"lastchange\")\n+\t\t\t\t\t\t.put(\"sortorder\", \"desc\")\n+\t\t\t\t\t\t.put(isVersion2?\"selectHosts\":\"select_hosts\", \"extend\")\n+\t\t\t\t\t\t.put(isVersion2?\"selectGroups\":\"select_groups\", \"extend\")\n+\t\t\t\t\t\t.put(isVersion2?\"selectItems\":\"select_items\", \"extend\")\n+\t\t\t\t\t\t.put(\"lastChangeSince\", min)\n+\t\t\t\t\t\t.put(\"only_true\", \"1\")\n+\t\t\t\t\t\t.put(\"limit\", ZabbixConfig.TRIGGER_GET_LIMIT)\n+\t\t\t\t\t\t.put(\"expandDescription\", true)\n+\t\t\t);\n+\t\t\timportTriggers(triggers);\n+\t\t\ttriggers.close();\n+\n+\t\t\tsetCached(TriggerData.TABLE_NAME, null, ZabbixConfig.CACHE_LIFETIME_TRIGGERS);\n+\t\t\t_endTransaction();\n+\t\t}\n+\t}\n+\n+\tprivate void importTriggers(JsonArrayReader jsonArray) throws JsonParseException, IOException {\n+\t\tJsonObjectReader triggerReader;\n+\t\twhile ((triggerReader = jsonArray.next()) != null) {\n+\t\t\tTriggerData t = new TriggerData();\n+\t\t\twhile (triggerReader.nextValueToken()) {\n+\t\t\t\tString propName = triggerReader.getCurrentName();\n+\t\t\t\tif (propName.equals(TriggerData.COLUMN_TRIGGERID)) {\n+\t\t\t\t\tt.set(TriggerData.COLUMN_TRIGGERID, Long.parseLong(triggerReader.getText()));\n+\t\t\t\t} else if (propName.equals(TriggerData.COLUMN_COMMENTS)) {\n+\t\t\t\t\tt.set(TriggerData.COLUMN_COMMENTS, triggerReader.getText());\n+\t\t\t\t} else if (propName.equals(TriggerData.COLUMN_DESCRIPTION)) {\n+\t\t\t\t\tt.set(TriggerData.COLUMN_DESCRIPTION, triggerReader.getText());\n+\t\t\t\t} else if (propName.equals(TriggerData.COLUMN_EXPRESSION)) {\n+\t\t\t\t\tt.set(TriggerData.COLUMN_EXPRESSION, triggerReader.getText());\n+\t\t\t\t} else if (propName.equals(TriggerData.COLUMN_LASTCHANGE)) {\n+\t\t\t\t\tt.set(TriggerData.COLUMN_LASTCHANGE, Integer.parseInt(triggerReader.getText()));\n+\t\t\t\t} else if (propName.equals(TriggerData.COLUMN_PRIORITY)) {\n+\t\t\t\t\tt.set(TriggerData.COLUMN_PRIORITY, Integer.parseInt(triggerReader.getText()));\n+\t\t\t\t} else if (propName.equals(TriggerData.COLUMN_STATUS)) {\n+\t\t\t\t\tt.set(TriggerData.COLUMN_STATUS, Integer.parseInt(triggerReader.getText()));\n+\t\t\t\t} else if (propName.equals(TriggerData.COLUMN_VALUE)) {\n+\t\t\t\t\tt.set(TriggerData.COLUMN_VALUE, Integer.parseInt(triggerReader.getText()));\n+\t\t\t\t} else if (propName.equals(TriggerData.COLUMN_URL)) {\n+\t\t\t\t\tt.set(TriggerData.COLUMN_URL, triggerReader.getText());\n+\t\t\t\t} else if (propName.equals(\"hosts\")) {\n+\t\t\t\t\tObject[] hostsCache = importHosts(triggerReader.getJsonArray(), null);\n+\t\t\t\t\tt.set(TriggerData.COLUMN_HOSTS, hostsCache[0]);\n+\t\t\t\t\tt.set(TriggerData.COLUMN_HOSTID, hostsCache[1]);\n+\t\t\t\t} else if (propName.equals(\"groups\")) {\n+\t\t\t\t\timportHostGroups(triggerReader.getJsonArray());\n+\t\t\t\t} else if (propName.equals(\"items\")) {\n+\t\t\t\t\t// store the first item id\n+\t\t\t\t\tt.set(TriggerData.COLUMN_ITEMID, importItems(triggerReader.getJsonArray(), 1, true));\n+\t\t\t\t} else {\n+\t\t\t\t\ttriggerReader.nextProperty();\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\tt.insert(zabbixLocalDB, TriggerData.COLUMN_TRIGGERID);\n+\t\t\t_commitTransactionIfRecommended();\n+\t\t}\n+\t}\n+\n+\tpublic void importTriggersByItemId(String itemid) throws JSONException, IOException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n+\t\tif (!isCached(TriggerData.TABLE_NAME, \"itemid=\"+itemid)) {\n+\t\t\t_startTransaction();\n+\t\t\tzabbixLocalDB.delete(TriggerData.TABLE_NAME, TriggerData.COLUMN_ITEMID+\"=\"+itemid, null);\n+\t\t\tJsonArrayReader triggers = _queryStream(\n+\t\t\t\t\t\"trigger.get\"\n+\t\t\t\t\t, new JSONObject()\n+\t\t\t\t\t\t.put(\"output\", \"extend\")\n+\t\t\t\t\t\t.put(isVersion2?\"selectHosts\":\"select_hosts\", \"extend\")\n+\t\t\t\t\t\t.put(isVersion2?\"selectGroups\":\"select_groups\", \"extend\")\n+\t\t\t\t\t\t.put(isVersion2?\"selectItems\":\"select_items\", \"extend\")\n+\t\t\t\t\t\t.put(\"itemids\", new JSONArray().put(itemid))\n+\t\t\t\t\t\t.put(\"limit\", 1)\n+\t\t\t\t\t\t.put(\"sortfield\", \"lastchange\")\n+\t\t\t\t\t\t.put(\"sortorder\", \"DESC\")\n+\t\t\t);\n+\t\t\timportTriggers(triggers);\n+\t\t\tsetCached(TriggerData.TABLE_NAME, \"itemid=\"+itemid, ZabbixConfig.CACHE_LIFETIME_TRIGGERS);\n+\t\t\t_endTransaction();\n+\t\t}\n+\t}\n+\n+\tpublic boolean isCached(String kind, String filter) {\n+\t\tSQLiteQueryBuilder sqlBuilder = new SQLiteQueryBuilder();\n+\t\tsqlBuilder.setTables(CacheData.TABLE_NAME);\n+\t\tsqlBuilder.appendWhere(CacheData.COLUMN_KIND+\"='\"+kind+\"' AND \");\n+\t\tsqlBuilder.appendWhere(CacheData.COLUMN_FILTER+\n+\t\t\t\t(filter==null?\" IS NULL\":\"='\"+filter+\"'\")\n+\t\t);\n+\t\tsqlBuilder.appendWhere(\" AND \"+CacheData.COLUMN_EXPIRE_DATE+\">\"+new Date().getTime()/1000);\n+\t\tCursor cur = sqlBuilder.query(\n+\t\t\tzabbixLocalDB,\n+\t\t\tnull,\n+\t\t\tnull,\n+\t\t\tnull,\n+\t\t\tnull,\n+\t\t\tnull,\n+\t\t\tnull\n+\t\t);\n+\t\tLog.i(\"ZabbixContentProvider\", \"isCached \"+kind+\"//\"+filter+\"//\"+cur.moveToFirst());\n+\t\treturn cur.moveToFirst();\n+\t}\n+\n+\t/**\n+\t * public, for the unit test\n+\t */\n+\tpublic void setCached(String kind, String filter, int lifetime) {\n+\t\tCacheData cache = new CacheData();\n+\t\tcache.set(CacheData.COLUMN_EXPIRE_DATE, new Date().getTime()/1000 + lifetime);\n+\t\tcache.set(CacheData.COLUMN_KIND, kind);\n+\t\tif (filter != null) {\n+\t\t\tcache.set(CacheData.COLUMN_FILTER, filter);\n+\t\t}\n+\t\tcache.insert(zabbixLocalDB);\n+\t}\n+\n+\t/**\n+\t * updates the progressbar in the gui\n+\t * @param i 0..100\n+\t */\n+\tpublic void showProgress(int i) {\n+\t\t// if applicable, transform the progress\n+\t\tif (transformProgressStart != 0 && transformProgressEnd != 0) {\n+\t\t\ti = (int) (transformProgressStart + (transformProgressEnd-transformProgressStart)*(double)i/100);\n+\t\t}\n+\n+\t\tIntent intent = new Intent(ZabbixContentProvider.CONTENT_PROVIDER_INTENT_ACTION);\n+\t\tintent.putExtra(\"flag\", ZabbixContentProvider.INTENT_FLAG_SHOW_PROGRESS);\n+\t\tintent.putExtra(\"value\", i);\n+\t\tcontext.sendBroadcast(intent);\n+\t}\n+\n+\t/**\n+\t * transforms the progress\n+\t * @param start 0% => start%\n+\t * @param end 100% => end%\n+\t */\n+\tpublic void transformProgress(int start, int end) {\n+\t\ttransformProgressStart = start;\n+\t\ttransformProgressEnd = end;\n+\t}\n+}"],
    "c_date_tdt": "Sep 12, 2012 5:48:12 AM",
    "c_imports_t": ["android.database.sqlite.SQLiteQueryBuilder org.apache.http.conn.scheme.SchemeRegistry java.util.HashSet org.apache.http.params.BasicHttpParams android.content.Context org.apache.http.params.HttpParams org.apache.http.conn.scheme.PlainSocketFactory java.util.ArrayList com.inovex.zabbixmobile.model.ItemData com.inovex.zabbixmobile.model.HostData com.inovex.zabbixmobile.model.GraphData com.inovex.zabbixmobile.model.EventData org.apache.http.auth.UsernamePasswordCredentials org.apache.http.params.HttpConnectionParams android.content.SharedPreferences java.security.KeyManagementException org.apache.http.conn.ClientConnectionManager org.codehaus.jackson.JsonFactory org.apache.http.entity.StringEntity java.util.Set org.apache.http.params.HttpProtocolParams com.inovex.zabbixmobile.model.ApplicationItemRelationData com.inovex.zabbixmobile.model.TriggerData org.codehaus.jackson.JsonToken android.database.Cursor java.net.Socket android.content.Intent org.apache.http.protocol.HTTP org.json.JSONException java.net.UnknownHostException com.inovex.zabbixmobile.model.HistoryDetailData org.apache.http.HttpResponse java.security.KeyStore com.inovex.zabbixmobile.ZabbixContentProvider android.preference.PreferenceManager android.util.Log org.json.JSONObject java.security.NoSuchAlgorithmException org.apache.http.client.params.HttpClientParams java.io.IOException org.apache.http.conn.scheme.Scheme org.apache.http.client.methods.HttpPost javax.net.ssl.SSLContext org.apache.http.auth.AuthScope org.apache.http.conn.ssl.SSLSocketFactory java.security.KeyStoreException android.content.ContentValues java.io.InputStreamReader java.util.Date java.security.UnrecoverableKeyException android.graphics.Color org.apache.http.client.ClientProtocolException com.inovex.zabbixmobile.model.GraphItemData org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager org.json.JSONArray com.inovex.zabbixmobile.model.CacheData javax.net.ssl.SSLPeerUnverifiedException com.inovex.zabbixmobile.model.HostGroupData org.codehaus.jackson.JsonParseException java.security.cert.X509Certificate org.apache.http.HttpVersion android.database.sqlite.SQLiteDatabase java.util.List java.security.cert.CertificateException java.io.BufferedReader com.inovex.zabbixmobile.model.ApplicationData com.inovex.zabbixmobile.model.ScreenItemData javax.net.ssl.TrustManager com.inovex.zabbixmobile.model.ScreenData com.inovex.zabbixmobile.R org.codehaus.jackson.JsonParser org.apache.http.impl.client.DefaultHttpClient javax.net.ssl.X509TrustManager"],
    "c_contents_t": ["package com.inovex.zabbixmobile.api;\n\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.net.Socket;\nimport java.net.UnknownHostException;\nimport java.security.KeyManagementException;\nimport java.security.KeyStore;\nimport java.security.KeyStoreException;\nimport java.security.NoSuchAlgorithmException;\nimport java.security.UnrecoverableKeyException;\nimport java.security.cert.CertificateException;\nimport java.security.cert.X509Certificate;\nimport java.util.ArrayList;\nimport java.util.Date;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Set;\n\nimport javax.net.ssl.SSLContext;\nimport javax.net.ssl.SSLPeerUnverifiedException;\nimport javax.net.ssl.TrustManager;\nimport javax.net.ssl.X509TrustManager;\n\nimport org.apache.http.HttpResponse;\nimport org.apache.http.HttpVersion;\nimport org.apache.http.auth.AuthScope;\nimport org.apache.http.auth.UsernamePasswordCredentials;\nimport org.apache.http.client.ClientProtocolException;\nimport org.apache.http.client.methods.HttpPost;\nimport org.apache.http.client.params.HttpClientParams;\nimport org.apache.http.conn.ClientConnectionManager;\nimport org.apache.http.conn.scheme.PlainSocketFactory;\nimport org.apache.http.conn.scheme.Scheme;\nimport org.apache.http.conn.scheme.SchemeRegistry;\nimport org.apache.http.conn.ssl.SSLSocketFactory;\nimport org.apache.http.entity.StringEntity;\nimport org.apache.http.impl.client.DefaultHttpClient;\nimport org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager;\nimport org.apache.http.params.BasicHttpParams;\nimport org.apache.http.params.HttpConnectionParams;\nimport org.apache.http.params.HttpParams;\nimport org.apache.http.params.HttpProtocolParams;\nimport org.apache.http.protocol.HTTP;\nimport org.codehaus.jackson.JsonFactory;\nimport org.codehaus.jackson.JsonParseException;\nimport org.codehaus.jackson.JsonParser;\nimport org.codehaus.jackson.JsonToken;\nimport org.json.JSONArray;\nimport org.json.JSONException;\nimport org.json.JSONObject;\n\nimport android.content.ContentValues;\nimport android.content.Context;\nimport android.content.Intent;\nimport android.content.SharedPreferences;\nimport android.database.Cursor;\nimport android.database.sqlite.SQLiteDatabase;\nimport android.database.sqlite.SQLiteQueryBuilder;\nimport android.graphics.Color;\nimport android.preference.PreferenceManager;\nimport android.util.Log;\n\nimport com.inovex.zabbixmobile.R;\nimport com.inovex.zabbixmobile.ZabbixContentProvider;\nimport com.inovex.zabbixmobile.model.ApplicationData;\nimport com.inovex.zabbixmobile.model.ApplicationItemRelationData;\nimport com.inovex.zabbixmobile.model.CacheData;\nimport com.inovex.zabbixmobile.model.EventData;\nimport com.inovex.zabbixmobile.model.GraphData;\nimport com.inovex.zabbixmobile.model.GraphItemData;\nimport com.inovex.zabbixmobile.model.HistoryDetailData;\nimport com.inovex.zabbixmobile.model.HostData;\nimport com.inovex.zabbixmobile.model.HostGroupData;\nimport com.inovex.zabbixmobile.model.ItemData;\nimport com.inovex.zabbixmobile.model.ScreenData;\nimport com.inovex.zabbixmobile.model.ScreenItemData;\nimport com.inovex.zabbixmobile.model.TriggerData;\n\n/**\n * interface to connect to the zabbix server\n */\npublic class ZabbixService {\n\tclass CustomSSLSocketFactory extends SSLSocketFactory {\n\t\tSSLContext sslContext = SSLContext.getInstance(\"TLS\");\n\n\t\tpublic CustomSSLSocketFactory(KeyStore truststore) throws NoSuchAlgorithmException, KeyManagementException, KeyStoreException, UnrecoverableKeyException {\n\t\t\tsuper(truststore);\n\t\t\tTrustManager tm = new X509TrustManager() {\n\t\t\t\t@Override\n\t\t\t\tpublic void checkClientTrusted(X509Certificate[] chain,\n\t\t\t\t\t\tString authType) throws CertificateException {\n\t\t\t\t}\n\t\t\t\t@Override\n\t\t\t\tpublic void checkServerTrusted(X509Certificate[] chain,\n\t\t\t\t\t\tString authType) throws CertificateException {\n\t\t\t\t}\n\t\t\t\t@Override\n\t\t\t\tpublic X509Certificate[] getAcceptedIssuers() {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t};\n\t\t\tsslContext.init(null, new TrustManager[] { tm }, null);\n\t\t}\n\n\t\t@Override\n\t\tpublic Socket createSocket() throws IOException {\n\t\t\treturn sslContext.getSocketFactory().createSocket();\n\t\t}\n\n\t\t@Override\n\t\tpublic Socket createSocket(Socket socket, String host, int port, boolean autoClose) throws IOException, UnknownHostException {\n\t\t\treturn sslContext.getSocketFactory().createSocket(socket, host, port, autoClose);\n\t\t}\n\t}\n\n\t/**\n\t * http auth is needed\n\t */\n\tpublic class HttpAuthorizationRequiredException extends Exception {\n\t\tprivate static final long serialVersionUID = 6632422081858878147L;\n\t}\n\n\t/**\n\t * zabbix error: no api access\n\t */\n\tpublic class NoAPIAccessException extends Exception {\n\t\tprivate static final long serialVersionUID = 6381395987443456382L;\n\t}\n\n\t/**\n\t * probably too old zabbix <= 1.8.2\n\t */\n\tpublic class PreconditionFailedException extends Exception {\n\t\tprivate static final long serialVersionUID = -2529885710860745023L;\n\t}\n\n\t/**\n\t * global constants\n\t */\n\tpublic class ZabbixConfig {\n\t\tpublic static final int APPLICATION_GET_LIMIT = 1000;\n\t\tpublic static final int EVENTS_GET_LIMIT = 60;\n\t\tpublic static final int HISTORY_GET_TIME_FROM_SHIFT = 8*60*60; // -8h\n\t\tpublic static final int HISTORY_GET_LIMIT = 8000;\n\t\tpublic static final int HOSTGROUP_GET_LIMIT = 200;\n\t\tpublic static final int HOST_GET_LIMIT = 300;\n\t\tpublic static final int ITEM_GET_LIMIT = 200;\n\t\tpublic static final int TRIGGER_GET_LIMIT = 100;\n\t\tpublic static final int EVENT_GET_TIME_FROM_SHIFT = 7*24*60*60; // -7 days\n\t\tpublic static final int CACHE_LIFETIME_APPLICATIONS = 2*24*60*60; // 2 days\n\t\tpublic static final int CACHE_LIFETIME_EVENTS = 120;\n\t\tpublic static final int CACHE_LIFETIME_HISTORY_DETAILS = 4*60;\n\t\tpublic static final int CACHE_LIFETIME_HOST_GROUPS = 7*24*60*60;\n\t\tpublic static final int CACHE_LIFETIME_HOSTS = 2*24*60*60;\n\t\tpublic static final int CACHE_LIFETIME_SCREENS = 2*24*60*60;\n\t\tpublic static final int CACHE_LIFETIME_ITEMS = 4*60;\n\t\tpublic static final int CACHE_LIFETIME_TRIGGERS = 2*60;\n\t\tpublic static final long STATUS_SHOW_TRIGGER_TIME = 14*24*60*60;\n\t\tpublic static final int HTTP_CONNECTION_TIMEOUT = 30000;\n\t}\n\n\tprivate final DefaultHttpClient httpClient;\n\tprivate final SQLiteDatabase zabbixLocalDB;\n\tprivate String url;\n\tprivate String token;\n\tprivate final Context context;\n\tprivate int _transactionStack;\n\tprivate JsonParser lastStream;\n\tprivate int transformProgressStart;\n\tprivate int transformProgressEnd;\n\tprivate boolean _notAuthorizedRetry;\n\tprivate boolean isVersion2 = true;\n\n\t/**\n\t * init\n\t * @param context android context\n\t * @param zabbixLocalDB sqlite\n\t */\n\tpublic ZabbixService(Context context, SQLiteDatabase zabbixLocalDB) {\n\t\tClientConnectionManager ccm = null;\n\t\tHttpParams params = null;\n\n\t\ttry {\n\t\t\tSharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(context);\n\t\t\tif (prefs.getBoolean(\"zabbix_trust_all_ssl_ca\", false)) {\n\t\t\t\tKeyStore trustStore = KeyStore.getInstance(KeyStore.getDefaultType());\n\t\t\t\ttrustStore.load(null, null);\n\n\t\t\t\tSSLSocketFactory sf = new CustomSSLSocketFactory(trustStore);\n\t\t\t\tsf.setHostnameVerifier(SSLSocketFactory.ALLOW_ALL_HOSTNAME_VERIFIER);\n\n\t\t\t\tparams = new BasicHttpParams();\n\t\t\t\tHttpProtocolParams.setVersion(params, HttpVersion.HTTP_1_1);\n\t\t\t\tHttpProtocolParams.setContentCharset(params, HTTP.UTF_8);\n\n\t\t\t\tSchemeRegistry registry = new SchemeRegistry();\n\t\t\t\tregistry.register(new Scheme(\"http\", PlainSocketFactory.getSocketFactory(), 80));\n\t\t\t\tregistry.register(new Scheme(\"https\", sf, 443));\n\n\t\t\t\tccm = new ThreadSafeClientConnManager(params, registry);\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\t// ignore for unit test\n\t\t}\n\n\t\tif (ccm == null || params == null) {\n\t\t\thttpClient = new DefaultHttpClient();\n\t\t} else {\n\t\t\thttpClient = new DefaultHttpClient(ccm, params);\n\t\t}\n\n\t\t// if applicable http auth\n\t\ttry {\n\t\t\tSharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(context);\n\t\t\tif (prefs.getBoolean(\"http_auth_enabled\", false)) {\n\t\t\t\tString user = prefs.getString(\"http_auth_username\", \"\");\n\t\t\t\tString pwd = prefs.getString(\"http_auth_password\", \"\");\n\t\t\t\thttpClient.getCredentialsProvider().setCredentials(AuthScope.ANY, new UsernamePasswordCredentials(user, pwd));\n\t\t\t}\n\t\t} catch (java.lang.UnsupportedOperationException e1) {\n\t\t\t// for unit test\n\t\t}\n\n\t\tparams = httpClient.getParams();\n\t\tHttpClientParams.setRedirecting(params, true); // redirecting\n\t\tHttpConnectionParams.setConnectionTimeout(params, ZabbixConfig.HTTP_CONNECTION_TIMEOUT);\n\t\tthis.context = context;\n\t\tthis.zabbixLocalDB = zabbixLocalDB;\n\t}\n\n\t/**\n\t * counts the sql inserts/updates and do a transaction commit to save the memory\n\t */\n\tprivate void _commitTransactionIfRecommended() {\n\t\tif (_transactionStack++ > 50) {\n\t\t\t_endTransaction();\n\t\t\t_startTransaction();\n\t\t}\n\t}\n\n\t/**\n\t * commit sql transaction\n\t */\n\tpublic void _endTransaction() {\n\t\tif (zabbixLocalDB.inTransaction()) {\n\t\t\tzabbixLocalDB.setTransactionSuccessful();\n\t\t\tzabbixLocalDB.endTransaction();\n\t\t}\n\t}\n\n\t/**\n\t * zabbix api call. data will be parsed as json object on-the-fly.\n\t * Caution: use this only for api calls with a small return data.\n\t * @param method\n\t * @param params\n\t * @return\n\t * @throws ClientProtocolException\n\t * @throws IOException\n\t * @throws JSONException\n\t * @throws HttpAuthorizationRequiredException\n\t * @throws NoAPIAccessException\n\t */\n\tprivate JSONObject _queryBuffer(String method, JSONObject params) throws ClientProtocolException, IOException, JSONException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\tHttpPost post = new HttpPost(url);\n\t\tpost.addHeader(\"Content-Type\", \"application/json; charset=utf-8\");\n\n\t\tString json =\n\t\t\t\"{\" +\n\t\t\t\"\t\\\"jsonrpc\\\" : \\\"2.0\\\",\" +\n\t\t\t\"\t\\\"method\\\" : \\\"\"+method+\"\\\",\" +\n\t\t\t\"\t\\\"params\\\" : \"+params.toString()+\",\" +\n\t\t\t\"\t\\\"auth\\\" : \"+(token==null?\"null\":'\"'+token+'\"')+\",\" +\n\t\t\t\"\t\\\"id\\\" : 0\" +\n\t\t\t\"}\";\n\n\t\tpost.setEntity(new StringEntity(json, \"UTF-8\"));\n\t\ttry {\n\t\t\tHttpResponse resp = httpClient.execute(post);\n\t\t\tif (resp.getStatusLine().getStatusCode() == 401) {\n\t\t\t\t// http auth failed\n\t\t\t\tthrow new HttpAuthorizationRequiredException();\n\t\t\t} else if (resp.getStatusLine().getStatusCode() == 412) {\n\t\t\t\t\t// Precondition failed / Looks like Zabbix 1.8.2\n\t\t\t\tthrow new PreconditionFailedException();\n\t\t\t} else if (resp.getStatusLine().getStatusCode() == 404) {\n\t\t\t\t// file not found\n\t\t\t\tthrow new IOException(resp.getStatusLine().getStatusCode()+\" \"+resp.getStatusLine().getReasonPhrase());\n\t\t\t} else {\n\t\t\t\tLog.d(\"ZabbixService\", resp.getStatusLine().getStatusCode()+\" \"+resp.getStatusLine().getReasonPhrase());\n\t\t\t}\n\t\t\tStringBuilder total = new StringBuilder();\n\t\t\tBufferedReader rd = new BufferedReader(new InputStreamReader(resp.getEntity().getContent()));\n\t\t\tint chr;\n\t\t\twhile ((chr = rd.read()) != -1) {\n\t\t\t\ttotal.append((char) chr);\n\t\t\t}\n\t\t\tJSONObject result = new JSONObject(total.toString());\n\t\t\ttry {\n\t\t\t\tif (result.getJSONObject(\"error\") != null) {\n\t\t\t\t\tif (result.getJSONObject(\"error\").getString(\"data\").equals(\"No API access\")) {\n\t\t\t\t\t\tthrow new NoAPIAccessException();\n\t\t\t\t\t} else throw new RuntimeException(result.getJSONObject(\"error\").toString());\n\t\t\t\t}\n\t\t\t\tif (result.getString(\"data\").equals(\"Not authorized\")) {\n\t\t\t\t\t// first do a new auth and then try the same api call again\n\t\t\t\t\tif (authenticate() && !_notAuthorizedRetry) {\n\t\t\t\t\t\t_notAuthorizedRetry = true;\n\t\t\t\t\t\tJSONObject r = _queryBuffer(method, params);\n\t\t\t\t\t\t_notAuthorizedRetry = false;\n\t\t\t\t\t\treturn r;\n\t\t\t\t\t} throw new IllegalStateException(result.toString());\n\t\t\t\t}\n\t\t\t} catch (JSONException e) {\n\t\t\t\t// ignore\n\t\t\t}\n\t\t\treturn result;\n\t\t} catch (SSLPeerUnverifiedException e) {\n\t\t\t// SSL not trusted\n\t\t\tIntent intent = new Intent(ZabbixContentProvider.CONTENT_PROVIDER_INTENT_ACTION);\n\t\t\tintent.putExtra(\"flag\", ZabbixContentProvider.INTENT_FLAG_SSL_NOT_TRUSTED);\n\t\t\tcontext.sendBroadcast(intent);\n\t\t\tthrow e;\n\t\t} catch (IOException e) {\n\t\t\t// internet problem\n\t\t\t// send intent to GUI\n\t\t\tIntent intent = new Intent(ZabbixContentProvider.CONTENT_PROVIDER_INTENT_ACTION);\n\t\t\tintent.putExtra(\"flag\", ZabbixContentProvider.INTENT_FLAG_CONNECTION_FAILED);\n\t\t\tintent.putExtra(\"value\", e.getMessage());\n\t\t\tcontext.sendBroadcast(intent);\n\t\t\tthrow e;\n\t\t}\n\t}\n\n\t/**\n\t * zabbix api call as stream.\n\t * @param method\n\t * @param params\n\t * @return stream im json array wrapper\n\t * @throws JSONException\n\t * @throws IOException\n\t * @throws HttpAuthorizationRequiredException\n\t * @throws NoAPIAccessException\n\t */\n\tprivate JsonArrayOrObjectReader _queryStream(String method, JSONObject params) throws JSONException, IOException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\t// http request\n\t\tHttpPost post = new HttpPost(url);\n\t\tpost.addHeader(\"Content-Type\", \"application/json; charset=utf-8\");\n\n\t\tJSONObject json = new JSONObject()\n\t\t\t.put(\"jsonrpc\", \"2.0\")\n\t\t\t.put(\"method\", method)\n\t\t\t.put(\"params\", params)\n\t\t\t.put(\"auth\", token)\n\t\t\t.put(\"id\", 0);\n\n\t\tLog.d(\"ZabbixService\", \"_queryStream: \"+url);\n\t\tLog.d(\"ZabbixService\", \"_queryStream: \"+json.toString());\n\n\t\tpost.setEntity(new StringEntity(json.toString(), \"UTF-8\"));\n\t\ttry {\n\t\t\tHttpResponse resp = httpClient.execute(post);\n\t\t\tif (resp.getStatusLine().getStatusCode() == 401) {\n\t\t\t\t// http auth failed\n\t\t\t\tthrow new HttpAuthorizationRequiredException();\n\t\t\t}\n\n\t\t\tJsonFactory jsonFac = new JsonFactory();\n\t\t\tJsonParser jp = jsonFac.createJsonParser(resp.getEntity().getContent());\n\t\t\t// store the last stream to close it if an exception will be thrown\n\t\t\tlastStream = jp;\n\t\t\tif (jp.nextToken() != JsonToken.START_OBJECT) {\n\t\t\t\tthrow new IOException(\"Expected data to start with an Object\");\n\t\t\t}\n\t\t\tdo {\n\t\t\t\tjp.nextToken();\n\t\t\t\tif (jp.getCurrentName().equals(\"error\")) {\n\t\t\t\t\tjp.nextToken();\n\t\t\t\t\tString errortxt = \"\";\n\t\t\t\t\twhile (jp.nextToken() != JsonToken.END_OBJECT) {\n\t\t\t\t\t\terrortxt += jp.getText();\n\t\t\t\t\t}\n\t\t\t\t\tif (errortxt.contains(\"No API access\")) {\n\t\t\t\t\t\tthrow new NoAPIAccessException();\n\t\t\t\t\t} else if (errortxt.contains(\"Not authorized\")) {\n\t\t\t\t\t\t// first do a new auth and then try the same api call again\n\t\t\t\t\t\tif (authenticate() && !_notAuthorizedRetry) {\n\t\t\t\t\t\t\t_notAuthorizedRetry = true;\n\t\t\t\t\t\t\tJsonArrayOrObjectReader r = _queryStream(method, params);\n\t\t\t\t\t\t\t_notAuthorizedRetry = false;\n\t\t\t\t\t\t\treturn r;\n\t\t\t\t\t\t} else throw new IllegalStateException(errortxt);\n\t\t\t\t\t} else throw new IllegalStateException(\"JSON API Error: \"+errortxt);\n\t\t\t\t}\n\t\t\t} while (!jp.getCurrentName().equals(\"result\"));\n\n\t\t\t// result array found\n\t\t\tif (jp.nextToken() != JsonToken.START_ARRAY && jp.getCurrentToken() != JsonToken.START_OBJECT) { // go inside the array\n\t\t\t\ttry {\n\t\t\t\t\tLog.d(\"ZabbixService\", \"current token: \"+jp.getCurrentToken());\n\t\t\t\t\tLog.d(\"ZabbixService\", \"current name: \"+jp.getCurrentName());\n\t\t\t\t\tLog.d(\"ZabbixService\", \"get text: \"+jp.getText());\n\t\t\t\t\tLog.d(\"ZabbixService\", \"next value: \"+jp.nextValue());\n\t\t\t\t\tLog.d(\"ZabbixService\", \"next token: \"+jp.nextToken());\n\t\t\t\t\tLog.d(\"ZabbixService\", \"current token: \"+jp.getCurrentToken());\n\t\t\t\t\tLog.d(\"ZabbixService\", \"current name: \"+jp.getCurrentName());\n\t\t\t\t\tLog.d(\"ZabbixService\", \"get text: \"+jp.getText());\n\t\t\t\t} catch (Exception e) {}\n\t\t\t\tthrow new IOException(\"Expected data to start with an Array\");\n\t\t\t}\n\t\t\treturn new JsonArrayOrObjectReader(jp);\n\t\t} catch (SSLPeerUnverifiedException e) {\n\t\t\tthrow e;\n\t\t} catch (IOException e) {\n\t\t\t// internet problem\n\t\t\t// send intent to GUI\n\t\t\tIntent intent = new Intent(ZabbixContentProvider.CONTENT_PROVIDER_INTENT_ACTION);\n\t\t\tintent.putExtra(\"flag\", ZabbixContentProvider.INTENT_FLAG_CONNECTION_FAILED);\n\t\t\tcontext.sendBroadcast(intent);\n\t\t\tthrow e;\n\t\t}\n\t}\n\n\t/**\n\t * begin sql transaction\n\t */\n\tprivate void _startTransaction() {\n\t\tzabbixLocalDB.beginTransaction();\n\t\t_transactionStack = 0;\n\t}\n\n\t/**\n\t * acknowledge zabbix event. Sets ack-flag with comment.\n\t * Caution: This is supported only for Zabbix version >= 1.8.4\n\t * @param eventid\n\t * @param comment\n\t * @return true, success.\n\t * @throws ClientProtocolException\n\t * @throws IOException\n\t * @throws JSONException\n\t * @throws HttpAuthorizationRequiredException\n\t * @throws NoAPIAccessException\n\t */\n\tpublic boolean acknowledgeEvent(String eventid, String comment) throws ClientProtocolException, IOException, JSONException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\t// for GUI unit test, just return true\n\t\tif (comment != null && comment.equals(\"__UNIT_TEST__RETURN_TRUE__\")) return true;\n\n\t\tJSONObject result = _queryBuffer(\n\t\t\t\t\"event.acknowledge\"\n\t\t\t\t, new JSONObject()\n\t\t\t\t\t.put(\"eventids\", new JSONArray().put(eventid))\n\t\t);\n\t\t// it can be an (empty) array\n\t\ttry {\n\t\t\treturn result.getJSONObject(\"result\").getJSONArray(\"eventids\").length() == 1;\n\t\t} catch (JSONException e) {\n\t\t\t// or a json object\n\t\t\treturn result.getJSONObject(\"result\").getJSONObject(\"eventids\").length() == 1;\n\t\t}\n\t}\n\n\t/**\n\t * zabbix auth. user and pwd from app preferences\n\t * @return true success\n\t * @throws ClientProtocolException\n\t * @throws IOException\n\t * @throws JSONException\n\t * @throws HttpAuthorizationRequiredException\n\t * @throws NoAPIAccessException\n\t */\n\tpublic boolean authenticate() throws ClientProtocolException, IOException, JSONException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\tSharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(context);\n\t\tString url = prefs.getString(\"zabbix_url\", \"\").trim();\n\t\tString user = prefs.getString(\"zabbix_username\", \"\").trim();\n\t\tString password = prefs.getString(\"zabbix_password\", \"\");\n\n\t\tthis.url = url+(url.endsWith(\"/\")?\"\":'/')+\"api_jsonrpc.php\";\n\t\tLog.d(\"ZabbixContentProvider\", url+\"//\"+user);\n\n\t\ttry {\n\t\t\tJSONObject result = _queryBuffer(\n\t\t\t\t\t\"user.authenticate\"\n\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t\t.put(\"user\", user)\n\t\t\t\t\t\t.put(\"password\", password)\n\t\t\t);\n\t\t\ttoken = result.getString(\"result\");\n\t\t} catch (JSONException e) {\n\t\t\t// there's no result\n\t\t\te.printStackTrace();\n\t\t} catch (RuntimeException e) {\n\t\t\t// wrong password. token remains null\n\t\t\te.printStackTrace();\n\t\t}\n\t\tif (token != null) {\n\t\t\t// get API version\n\t\t\tJSONObject result = _queryBuffer(\n\t\t\t\t\t\"apiinfo.version\"\n\t\t\t\t\t, new JSONObject()\n\t\t\t);\n\t\t\tisVersion2 = result.getString(\"result\").equals(\"1.4\");\n\t\t\tLog.i(\"ZabbixService\", \"Zabbix Server Version: isVersion2=\"+isVersion2);\n\t\t}\n\t\treturn token != null;\n\t}\n\n\t/**\n\t * close the last http stream\n\t */\n\tpublic void closeLastStream() {\n\t\tif (lastStream != null && !lastStream.isClosed()) {\n\t\t\ttry {\n\t\t\t\tlastStream.close();\n\t\t\t} catch (IOException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate void importApplications(long hostid, long itemid, JsonArrayOrObjectReader jsonArray) throws JsonParseException, NumberFormatException, IOException {\n\t\tint num = 0;\n\t\tJsonObjectReader application;\n\t\twhile ((application = jsonArray.next()) != null) {\n\t\t\tApplicationData app = new ApplicationData();\n\t\t\twhile (application.nextValueToken()) {\n\t\t\t\tString propName = application.getCurrentName();\n\t\t\t\tif (propName.equals(ApplicationData.COLUMN_APPLICATIONID)) {\n\t\t\t\t\tapp.set(ApplicationData.COLUMN_APPLICATIONID, Long.parseLong(application.getText()));\n\t\t\t\t} else if (propName.equals(ApplicationData.COLUMN_NAME)) {\n\t\t\t\t\tapp.set(ApplicationData.COLUMN_NAME, application.getText());\n\t\t\t\t} else if (propName.equals(ApplicationData.COLUMN_HOSTID)) {\n\t\t\t\t\tapp.set(ApplicationData.COLUMN_HOSTID, Long.parseLong(application.getText()));\n\t\t\t\t} else {\n\t\t\t\t\tapplication.nextProperty();\n\t\t\t\t}\n\t\t\t}\n\t\t\t// create applications that does not exist\n\t\t\tapp.insert(zabbixLocalDB, ApplicationData.COLUMN_APPLICATIONID);\n\t\t\t_commitTransactionIfRecommended();\n\n\t\t\t// create ApplicationItemRelation\n\t\t\tlong appid = (Long) app.get(ApplicationData.COLUMN_APPLICATIONID);\n\t\t\tApplicationItemRelationData rel = new ApplicationItemRelationData();\n\t\t\trel.set(ApplicationItemRelationData.COLUMN_APPLICATIONID, appid);\n\t\t\trel.set(ApplicationItemRelationData.COLUMN_ITEMID, itemid);\n\t\t\trel.set(ApplicationItemRelationData.COLUMN_HOSTID, hostid);\n\t\t\trel.insert(zabbixLocalDB);\n\t\t\t_commitTransactionIfRecommended();\n\n\t\t\tnum++;\n\t\t}\n\t\tif (num == 0) {\n\t\t\t// if there's no application, the ID #0 must be added (for other)\n\t\t\tApplicationItemRelationData rel = new ApplicationItemRelationData();\n\t\t\trel.set(ApplicationItemRelationData.COLUMN_APPLICATIONID, 0);\n\t\t\trel.set(ApplicationItemRelationData.COLUMN_ITEMID, itemid);\n\t\t\trel.set(ApplicationItemRelationData.COLUMN_HOSTID, hostid);\n\t\t\trel.insert(zabbixLocalDB);\n\n\t\t\t// if #0 \"other\" does not exist yet, it has to be created\n\t\t\tApplicationData app = new ApplicationData();\n\t\t\tapp.set(ApplicationData.COLUMN_APPLICATIONID, 0);\n\t\t\tapp.set(ApplicationData.COLUMN_NAME, \"- \"+context.getResources().getString(R.string.other)+\" -\");\n\t\t\tapp.insert(zabbixLocalDB, ApplicationData.COLUMN_APPLICATIONID);\n\t\t}\n\t}\n\n\t/**\n\t * import the newest event of a trigger\n\t * @param triggerid\n\t * @throws JSONException\n\t * @throws IOException\n\t * @throws HttpAuthorizationRequiredException\n\t * @throws NoAPIAccessException\n\t */\n\tpublic void importEventByTriggerId(String triggerid) throws JSONException, IOException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\tif (!isCached(EventData.TABLE_NAME, \"triggerid=\"+triggerid)) {\n\t\t\t_startTransaction();\n\t\t\tzabbixLocalDB.delete(EventData.TABLE_NAME, EventData.COLUMN_OBJECTID+\"=\"+triggerid, null);\n\n\t\t\tJSONObject params = new JSONObject()\n\t\t\t\t.put(\"output\", \"extend\")\n\t\t\t\t.put(isVersion2?\"selectHosts\":\"select_hosts\", \"extend\")\n\t\t\t\t.put(\"triggerids\", new JSONArray().put(triggerid))\n\t\t\t\t.put(\"limit\", 1)\n\t\t\t\t.put(\"source\", 0);\n\t\t\tif (!isVersion2) {\n\t\t\t\tparams.put(\"sortfield\", \"clock\")\n\t\t\t\t\t.put(\"sortorder\", \"DESC\");\n\t\t\t}\n\n\t\t\tJsonArrayOrObjectReader events = _queryStream(\n\t\t\t\t\t\"event.get\"\n\t\t\t\t\t, params\n\t\t\t);\n\t\t\timportEvents(events, null);\n\t\t\tevents.close();\n\n\t\t\tsetCached(EventData.TABLE_NAME, \"triggerid=\"+triggerid, ZabbixConfig.CACHE_LIFETIME_EVENTS);\n\t\t\t_endTransaction();\n\t\t}\n\t}\n\n\t/**\n\t * import the newest events\n\t * @throws ClientProtocolException\n\t * @throws IOException\n\t * @throws JSONException\n\t * @throws HttpAuthorizationRequiredException\n\t * @throws NoAPIAccessException\n\t */\n\tpublic void importEvents() throws ClientProtocolException, IOException, JSONException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\tif (!isCached(EventData.TABLE_NAME, null)) {\n\t\t\t_startTransaction();\n\t\t\tzabbixLocalDB.delete(EventData.TABLE_NAME, null, null);\n\t\t\tzabbixLocalDB.delete(TriggerData.TABLE_NAME, null, null);\n\t\t\tzabbixLocalDB.delete(CacheData.TABLE_NAME, CacheData.COLUMN_KIND+\"='\"+EventData.TABLE_NAME+\"'\", null);\n\t\t\tzabbixLocalDB.delete(CacheData.TABLE_NAME, CacheData.COLUMN_KIND+\"='\"+TriggerData.TABLE_NAME+\"'\", null);\n\n\t\t\tint numEvents = ZabbixConfig.EVENTS_GET_LIMIT;\n\n\t\t\tJSONObject params = new JSONObject()\n\t\t\t\t.put(\"output\", \"extend\")\n\t\t\t\t.put(\"limit\", ZabbixConfig.EVENTS_GET_LIMIT)\n\t\t\t\t.put(isVersion2?\"selectHosts\":\"select_hosts\", \"extend\")\n\t\t\t\t.put(isVersion2?\"selectTriggers\":\"select_triggers\", \"extend\")\n\t\t\t\t.put(\"source\", 0)\n\t\t\t\t.put(\"time_from\", (new Date().getTime()/1000) - ZabbixConfig.EVENT_GET_TIME_FROM_SHIFT);\n\t\t\tif (!isVersion2) {\n\t\t\t\t// in Zabbix version <2.0, this is not default\n\t\t\t\tparams.put(\"sortfield\", \"clock\")\n\t\t\t\t\t.put(\"sortorder\", \"DESC\");\n\t\t\t}\n\t\t\tJsonArrayOrObjectReader events = _queryStream(\n\t\t\t\t\t\"event.get\"\n\t\t\t\t\t, params\n\t\t\t);\n\t\t\timportEvents(events, numEvents);\n\t\t\tevents.close();\n\n\t\t\tsetCached(EventData.TABLE_NAME, null, ZabbixConfig.CACHE_LIFETIME_EVENTS);\n\t\t\t_endTransaction();\n\t\t}\n\t}\n\n\t/**\n\t * @param events stream\n\t * @param numEvents if null, no progressbar-update AND only isert, if it does not exist. If !null, progressbar-update AND always insert without checking\n\t * @throws JsonParseException\n\t * @throws IOException\n\t */\n\tprivate void importEvents(JsonArrayOrObjectReader events, Integer numEvents) throws JsonParseException, IOException {\n\t\tint i=0;\n\t\tJsonObjectReader eventReader;\n\t\twhile ((eventReader = events.next()) != null) {\n\t\t\tEventData e = new EventData();\n\t\t\twhile (eventReader.nextValueToken()) {\n\t\t\t\tString propName = eventReader.getCurrentName();\n\t\t\t\tif (propName.equals(\"hosts\")) {\n\t\t\t\t\t// import hosts\n\t\t\t\t\tString hostnames = (String) importHosts(eventReader.getJsonArray(), null)[0];\n\t\t\t\t\t// store hosts namen\n\t\t\t\t\te.set(EventData.COLUMN_HOSTS, hostnames);\n\t\t\t\t} else if (propName.equals(\"triggers\")) {\n\t\t\t\t\t// import triggers\n\t\t\t\t\timportTriggers(eventReader.getJsonArray());\n\t\t\t\t} else if (propName.equals(EventData.COLUMN_EVENTID)) {\n\t\t\t\t\te.set(EventData.COLUMN_EVENTID, Long.parseLong(eventReader.getText()));\n\t\t\t\t} else if (propName.equals(EventData.COLUMN_CLOCK)) {\n\t\t\t\t\te.set(EventData.COLUMN_CLOCK, Integer.parseInt(eventReader.getText()));\n\t\t\t\t} else if (propName.equals(EventData.COLUMN_OBJECTID)) {\n\t\t\t\t\te.set(EventData.COLUMN_OBJECTID, Long.parseLong(eventReader.getText()));\n\t\t\t\t} else if (propName.equals(EventData.COLUMN_ACK)) {\n\t\t\t\t\te.set(EventData.COLUMN_ACK, Integer.parseInt(eventReader.getText()) == 1);\n\t\t\t\t} else if (propName.equals(EventData.COLUMN_VALUE)) {\n\t\t\t\t\te.set(EventData.COLUMN_VALUE, Integer.parseInt(eventReader.getText()));\n\t\t\t\t} else {\n\t\t\t\t\teventReader.nextProperty();\n\t\t\t\t}\n\t\t\t}\n\t\t\t// event is parsed and can be inserted into the db\n\t\t\tif (numEvents == null) {\n\t\t\t\te.insert(zabbixLocalDB, EventData.COLUMN_EVENTID);\n\t\t\t} else {\n\t\t\t\te.insert(zabbixLocalDB);\n\t\t\t\tif (++i % 10 == 0) {\n\t\t\t\t\tshowProgress(i*100/numEvents);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t_commitTransactionIfRecommended();\n\t\t}\n\t}\n\n\t/**\n\t * import graph items\n\t *\n\t * @param graphItems\n\t * @return true, if graphid column has to be updated from -1 to the correct graphid later.\n\t * @throws JsonParseException\n\t * @throws NumberFormatException\n\t * @throws IOException\n\t */\n\tprivate boolean importGraphItems(JsonArrayOrObjectReader graphItems) throws JsonParseException, NumberFormatException, IOException {\n\t\tboolean mustSetGraphid = false;\n\t\tJsonObjectReader graphItemReader;\n\t\twhile ((graphItemReader = graphItems.next()) != null) {\n\t\t\tGraphItemData gi = new GraphItemData();\n\t\t\twhile (graphItemReader.nextValueToken()) {\n\t\t\t\tString propName = graphItemReader.getCurrentName();\n\t\t\t\tif (propName.equals(\"gitemid\")) {\n\t\t\t\t\tgi.set(GraphItemData.COLUMN_GRAPHITEMID, Long.parseLong(graphItemReader.getText()));\n\t\t\t\t} else if (propName.equals(GraphItemData.COLUMN_GRAPHID)) {\n\t\t\t\t\tgi.set(GraphItemData.COLUMN_GRAPHID, Long.parseLong(graphItemReader.getText()));\n\t\t\t\t} else if (propName.equals(GraphItemData.COLUMN_ITEMID)) {\n\t\t\t\t\tgi.set(GraphItemData.COLUMN_ITEMID, Long.parseLong(graphItemReader.getText()));\n\t\t\t\t} else if (propName.equals(GraphItemData.COLUMN_COLOR)) {\n\t\t\t\t\t// hex string => color int\n\t\t\t\t\tgi.set(GraphItemData.COLUMN_COLOR, Color.parseColor(\"#\"+graphItemReader.getText()));\n\t\t\t\t} else {\n\t\t\t\t\tgraphItemReader.nextProperty();\n\t\t\t\t}\n\t\t\t}\n\t\t\t// if graphid-column was not set, this must be done later. temporary graphid=-1\n\t\t\tif (gi.get(GraphItemData.COLUMN_GRAPHID) == null) {\n\t\t\t\tgi.set(GraphItemData.COLUMN_GRAPHID, -1);\n\t\t\t\tmustSetGraphid = true;\n\t\t\t}\n\t\t\tgi.insert(zabbixLocalDB);\n\t\t}\n\t\treturn mustSetGraphid;\n\t}\n\n\tpublic void importGraphsForScreen(long screenid) throws ClientProtocolException, IOException, JSONException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\tif (!isCached(GraphData.TABLE_NAME, \"screenid=\"+screenid)) {\n\t\t\t_startTransaction();\n\n\t\t\t// collect all graphids\n\t\t\tSet<Long> graphids = new HashSet<Long>();\n\t\t\tCursor cur = zabbixLocalDB.query(ScreenItemData.TABLE_NAME, null, ScreenItemData.COLUMN_SCREENID+\"=\"+screenid, null, null, null, null);\n\t\t\twhile (cur.moveToNext()) {\n\t\t\t\tgraphids.add(cur.getLong(cur.getColumnIndex(ScreenItemData.COLUMN_RESOURCEID)));\n\t\t\t}\n\n\t\t\t// delete old graphs\n\t\t\tString str_graphids = graphids.toString().replace(\"[\", \"\").replace(\"]\", \"\");\n\t\t\tif (str_graphids.length()>0) {\n\t\t\t\tzabbixLocalDB.delete(GraphData.TABLE_NAME, GraphData.COLUMN_GRAPHID+\" IN (\"+str_graphids+\")\", null);\n\t\t\t\tzabbixLocalDB.delete(GraphItemData.TABLE_NAME, GraphItemData.COLUMN_GRAPHID+\" IN (\"+str_graphids+\")\", null);\n\t\t\t}\n\t\t\tzabbixLocalDB.delete(CacheData.TABLE_NAME, CacheData.COLUMN_KIND+\"='\"+GraphData.TABLE_NAME+\"' AND \"+CacheData.COLUMN_FILTER+\"='screenid=\"+screenid+'\\'', null);\n\n\t\t\tJsonArrayOrObjectReader graphs = _queryStream(\n\t\t\t\t\t\"graph.get\"\n\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t\t.put(isVersion2?\"selectGraphItems\":\"select_graph_items\", \"extend\")\n\t\t\t\t\t\t.put(isVersion2?\"selectItems\":\"select_items\", \"extend\")\n\t\t\t\t\t\t.put(\"output\", \"extend\")\n\t\t\t\t\t\t.put(\"graphids\", new JSONArray(graphids))\n\t\t\t);\n\t\t\tJsonObjectReader graphReader;\n\t\t\twhile ((graphReader = graphs.next()) != null) {\n\t\t\t\tboolean mustSetGraphid = false;\n\t\t\t\tGraphData scr = new GraphData();\n\t\t\t\twhile (graphReader.nextValueToken()) {\n\t\t\t\t\tString propName = graphReader.getCurrentName();\n\t\t\t\t\tif (propName.equals(GraphData.COLUMN_GRAPHID)) {\n\t\t\t\t\t\tscr.set(GraphData.COLUMN_GRAPHID, Long.parseLong(graphReader.getText()));\n\t\t\t\t\t} else if (propName.equals(GraphData.COLUMN_NAME)) {\n\t\t\t\t\t\tscr.set(GraphData.COLUMN_NAME, graphReader.getText());\n\t\t\t\t\t} else if (propName.equals(\"gitems\")) {\n\t\t\t\t\t\tmustSetGraphid = importGraphItems(graphReader.getJsonArray());\n\t\t\t\t\t} else if (propName.equals(\"items\")) {\n\t\t\t\t\t\timportItems(graphReader.getJsonArray(), 0, true);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tgraphReader.nextProperty();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tscr.insert(zabbixLocalDB);\n\t\t\t\tif (mustSetGraphid) {\n\t\t\t\t\tContentValues values = new ContentValues(1);\n\t\t\t\t\tvalues.put(GraphItemData.COLUMN_GRAPHID, (Long) scr.get(GraphData.COLUMN_GRAPHID));\n\t\t\t\t\tzabbixLocalDB.update(\n\t\t\t\t\t\t\tGraphItemData.TABLE_NAME\n\t\t\t\t\t\t\t, values\n\t\t\t\t\t\t\t, GraphItemData.COLUMN_GRAPHID+\"=-1\"\n\t\t\t\t\t\t\t, null);\n\t\t\t\t}\n\t\t\t}\n\t\t\tgraphs.close();\n\n\t\t\tsetCached(GraphData.TABLE_NAME, \"screenid=\"+screenid, ZabbixConfig.CACHE_LIFETIME_SCREENS);\n\t\t\t_endTransaction();\n\t\t}\n\t}\n\n\tpublic void importHistoryDetails(String itemid) throws ClientProtocolException, IOException, JSONException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\tif (!isCached(HistoryDetailData.TABLE_NAME, itemid)) {\n\t\t\t_startTransaction();\n\t\t\tzabbixLocalDB.delete(HistoryDetailData.TABLE_NAME, HistoryDetailData.COLUMN_ITEMID+\"=\"+itemid, null);\n\n\t\t\t// the past 2 hours\n\t\t\tlong time_till = new Date().getTime() / 1000;\n\t\t\tlong time_from = time_till - ZabbixConfig.HISTORY_GET_TIME_FROM_SHIFT; // jetzt-2h\n\n\t\t\t// Workaround: historydetails only comes if you use the correct \"history\"-parameter.\n\t\t\t// this parameter can be \"null\" or a number 0-4. Because we don't know when to use which,\n\t\t\t// we try them all, until we get results.\n\t\t\tInteger historytype = null;\n\t\t\tJSONObject result = _queryBuffer(\n\t\t\t\t\t\"history.get\"\n\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t\t.put(\"limit\", 1)\n\t\t\t\t\t\t.put(\"history\", historytype) // for integer ?\n\t\t\t\t\t\t.put(\"itemids\", new JSONArray().put(itemid))\n\t\t\t\t\t\t.put(\"time_from\", time_from)\n\t\t\t);\n\n\t\t\tJSONArray testHistorydetails = result.getJSONArray(\"result\");\n\t\t\tif (testHistorydetails.length() == 0) {\n\t\t\t\thistorytype = -1;\n\t\t\t\twhile (testHistorydetails.length() == 0 && ++historytype <= 4) {\n\t\t\t\t\t// if we get an empty array, we try another history parameter\n\t\t\t\t\tresult = _queryBuffer(\n\t\t\t\t\t\t\t\"history.get\"\n\t\t\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t\t\t\t.put(\"output\", \"extend\")\n\t\t\t\t\t\t\t\t.put(\"limit\", 1)\n\t\t\t\t\t\t\t\t.put(\"history\", historytype)\n\t\t\t\t\t\t\t\t.put(\"itemids\", new JSONArray().put(itemid))\n\t\t\t\t\t\t\t\t.put(\"time_from\", time_from)\n\t\t\t\t\t);\n\t\t\t\t\ttestHistorydetails = result.getJSONArray(\"result\");\n\t\t\t\t}\n\t\t\t}\n\t\t\t// correct historytype found and there are data\n\t\t\tif (testHistorydetails.length() > 0) {\n\t\t\t\t// count of the entries cannot be detected (zabbix bug),\n\t\t\t\t// so we use a fiction\n\t\t\t\tint numDetails = 400;\n\t\t\t\tint curI=0;\n\t\t\t\tJsonArrayOrObjectReader historydetails = _queryStream(\n\t\t\t\t\t\t\"history.get\"\n\t\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t\t\t.put(\"output\", \"extend\")\n\t\t\t\t\t\t\t.put(\"limit\", ZabbixConfig.HISTORY_GET_LIMIT)\n\t\t\t\t\t\t\t.put(\"history\", historytype)\n\t\t\t\t\t\t\t.put(\"itemids\", new JSONArray().put(itemid))\n\t\t\t\t\t\t\t.put(\"time_from\", time_from)\n\t\t\t\t\t\t\t.put(\"sortfield\", \"clock\")\n\t\t\t\t\t\t\t.put(\"sortorder\", \"DESC\")\n\t\t\t\t);\n\t\t\t\tJsonObjectReader historydetail;\n\t\t\t\ttry {\n\t\t\t\t\tint selI = 0;\n\t\t\t\t\twhile ((historydetail = historydetails.next()) != null) {\n\t\t\t\t\t\t// save only every 20th\n\t\t\t\t\t\tif (selI++ % 20 != 0) {\n\t\t\t\t\t\t\twhile (historydetail.nextValueToken()) {\n\t\t\t\t\t\t\t\thistorydetail.nextProperty();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tHistoryDetailData h = new HistoryDetailData();\n\t\t\t\t\t\twhile (historydetail.nextValueToken()) {\n\t\t\t\t\t\t\tString propName = historydetail.getCurrentName();\n\t\t\t\t\t\t\tif (propName.equals(HistoryDetailData.COLUMN_CLOCK)) {\n\t\t\t\t\t\t\t\th.set(HistoryDetailData.COLUMN_CLOCK, Integer.parseInt(historydetail.getText()));\n\t\t\t\t\t\t\t} else if (propName.equals(HistoryDetailData.COLUMN_ITEMID)) {\n\t\t\t\t\t\t\t\th.set(HistoryDetailData.COLUMN_ITEMID, Long.parseLong(historydetail.getText()));\n\t\t\t\t\t\t\t} else if (propName.equals(HistoryDetailData.COLUMN_VALUE)) {\n\t\t\t\t\t\t\t\th.set(HistoryDetailData.COLUMN_VALUE, Double.parseDouble(historydetail.getText()));\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\thistorydetail.nextProperty();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\th.insert(zabbixLocalDB);\n\t\t\t\t\t\tif (++curI % 10 == 0) {\n\t\t\t\t\t\t\tshowProgress(Math.min(curI*100/numDetails, 84));\n\t\t\t\t\t\t}\n\t\t\t\t\t\t_commitTransactionIfRecommended();\n\t\t\t\t\t}\n\t\t\t\t} catch (NumberFormatException e) {\n\t\t\t\t\t// data are unuseable, e.g. because it's a string\n\t\t\t\t}\n\t\t\t\thistorydetails.close();\n\t\t\t}\n\t\t\tsetCached(HistoryDetailData.TABLE_NAME, itemid, ZabbixConfig.CACHE_LIFETIME_HISTORY_DETAILS);\n\t\t\t_endTransaction();\n\t\t}\n\t}\n\n\tprivate long importHostGroups(JsonArrayOrObjectReader jsonArray) throws JsonParseException, IOException {\n\t\tlong firstHostGroupId = -1;\n\t\tJsonObjectReader hostReader;\n\t\twhile ((hostReader = jsonArray.next()) != null) {\n\t\t\tHostGroupData h = new HostGroupData();\n\t\t\twhile (hostReader.nextValueToken()) {\n\t\t\t\tString propName = hostReader.getCurrentName();\n\t\t\t\tif (propName.equals(HostGroupData.COLUMN_GROUPID)) {\n\t\t\t\t\tlong id = Long.parseLong(hostReader.getText());\n\t\t\t\t\tif (firstHostGroupId == -1) firstHostGroupId = id;\n\t\t\t\t\th.set(HostGroupData.COLUMN_GROUPID, id);\n\t\t\t\t} else if (propName.equals(HostGroupData.COLUMN_NAME)) {\n\t\t\t\t\th.set(HostGroupData.COLUMN_NAME, hostReader.getText());\n\t\t\t\t} else {\n\t\t\t\t\thostReader.nextProperty();\n\t\t\t\t}\n\t\t\t}\n\t\t\th.insert(zabbixLocalDB, HostGroupData.COLUMN_GROUPID);\n\t\t\t_commitTransactionIfRecommended();\n\t\t}\n\n\t\treturn firstHostGroupId;\n\t}\n\n\t/**\n\t * import the hosts from stream\n\t * @param jsonArray stream\n\t * @param numHosts count of hosts for progressbar. null if unknown.\n\t * @return Object[] {(String) comma-separated all Hostnames, (Long) 1. host id}\n\t * @throws JsonParseException\n\t * @throws IOException\n\t */\n\tprivate Object[] importHosts(JsonArrayOrObjectReader jsonArray, Integer numHosts) throws JsonParseException, IOException {\n\t\tList<String> hostnames = new ArrayList<String>();\n\t\tlong firstHostId = -1;\n\t\tJsonObjectReader hostReader;\n\t\tint i=0;\n\t\twhile ((hostReader = jsonArray.next()) != null) {\n\t\t\tHostData h = new HostData();\n\t\t\twhile (hostReader.nextValueToken()) {\n\t\t\t\tString propName = hostReader.getCurrentName();\n\t\t\t\tif (propName.equals(HostData.COLUMN_HOSTID)) {\n\t\t\t\t\th.set(HostData.COLUMN_HOSTID, Long.parseLong(hostReader.getText()));\n\t\t\t\t\tif (firstHostId == -1) {\n\t\t\t\t\t\tfirstHostId = (Long) h.get(HostData.COLUMN_HOSTID);\n\t\t\t\t\t}\n\t\t\t\t} else if (propName.equals(HostData.COLUMN_HOST)) {\n\t\t\t\t\tString host = hostReader.getText();\n\t\t\t\t\thostnames.add(host);\n\t\t\t\t\th.set(HostData.COLUMN_HOST, host);\n\t\t\t\t} else if (propName.equals(\"groups\")) {\n\t\t\t\t\tlong groupid = importHostGroups(hostReader.getJsonArray());\n\t\t\t\t\tif (groupid != -1) {\n\t\t\t\t\t\th.set(HostData.COLUMN_GROUPID, groupid);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\thostReader.nextProperty();\n\t\t\t\t}\n\t\t\t}\n\t\t\t// host without group will get group #0 (other)\n\t\t\tif (h.get(HostData.COLUMN_GROUPID) == null) {\n\t\t\t\th.set(HostData.COLUMN_GROUPID, 0);\n\t\t\t\t// create \"other\" hostgroup #1\n\t\t\t\tHostGroupData hg = new HostGroupData();\n\t\t\t\thg.set(HostGroupData.COLUMN_GROUPID, 0);\n\t\t\t\thg.set(HostGroupData.COLUMN_NAME, \"- \"+context.getResources().getString(R.string.other)+\" -\");\n\t\t\t\thg.insert(zabbixLocalDB, HostGroupData.COLUMN_GROUPID);\n\t\t\t}\n\t\t\th.insert(zabbixLocalDB, HostData.COLUMN_HOSTID);\n\t\t\tif (numHosts != null && ++i % 10 == 0) {\n\t\t\t\tshowProgress(i*100/numHosts);\n\t\t\t}\n\t\t\t_commitTransactionIfRecommended();\n\t\t}\n\n\t\treturn new Object[] {hostnames.toString().replaceAll(\"[\\\\[\\\\]]\", \"\"), firstHostId};\n\t}\n\n\tpublic void importHostsAndGroups() throws JSONException, IOException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\tif (!isCached(HostData.TABLE_NAME, null)) {\n\t\t\t_startTransaction();\n\t\t\tzabbixLocalDB.delete(HostData.TABLE_NAME, null, null);\n\t\t\tzabbixLocalDB.delete(HostGroupData.TABLE_NAME, null, null);\n\n\t\t\t// get count of hosts\n\t\t\tJSONObject result = _queryBuffer(\n\t\t\t\t\t\"host.get\"\n\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t\t.put(\"countOutput\", 1)\n\t\t\t\t\t\t.put(\"limit\", ZabbixConfig.HOST_GET_LIMIT)\n\t\t\t\t\t\t.put(isVersion2?\"selectGroups\":\"select_groups\", \"extend\")\n\t\t\t);\n\t\t\tint numHosts = result.getInt(\"result\");\n\t\t\tJsonArrayOrObjectReader hosts = _queryStream(\n\t\t\t\t\t\"host.get\"\n\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t\t.put(\"output\", \"extend\")\n\t\t\t\t\t\t.put(\"limit\", ZabbixConfig.HOST_GET_LIMIT)\n\t\t\t\t\t\t.put(isVersion2?\"selectGroups\":\"select_groups\", \"extend\")\n\t\t\t);\n\t\t\timportHosts(hosts, numHosts);\n\t\t\thosts.close();\n\n\t\t\tsetCached(HostData.TABLE_NAME, null, ZabbixConfig.CACHE_LIFETIME_HOSTS);\n\t\t\t_endTransaction();\n\t\t}\n\t}\n\n\t/**\n\t * import items from stream.\n\t * @param items stream\n\t * @param numItems count for progressbar, if 0 no progressbarupdate\n\t * @param checkBeforeInsert if true, only make an insert if item does not exist\n\t * @return the first item id\n\t * @throws JsonParseException\n\t * @throws IOException\n\t */\n\tprivate long importItems(JsonArrayOrObjectReader items, int numItems, boolean checkBeforeInsert) throws JsonParseException, IOException {\n\t\tlong firstItemId = -1;\n\t\tint curI=0;\n\t\tJsonObjectReader itemReader;\n\t\twhile ((itemReader = items.next()) != null) {\n\t\t\tItemData i = new ItemData();\n\t\t\tString key_ = null;\n\t\t\twhile (itemReader.nextValueToken()) {\n\t\t\t\tString propName = itemReader.getCurrentName();\n\t\t\t\tif (propName.equals(ItemData.COLUMN_ITEMID)) {\n\t\t\t\t\ti.set(ItemData.COLUMN_ITEMID, Long.parseLong(itemReader.getText()));\n\t\t\t\t\tif (firstItemId == -1) {\n\t\t\t\t\t\tfirstItemId = (Long) i.get(ItemData.COLUMN_ITEMID);\n\t\t\t\t\t}\n\t\t\t\t} else if (propName.equals(ItemData.COLUMN_HOSTID)) {\n\t\t\t\t\ti.set(ItemData.COLUMN_HOSTID, Long.parseLong(itemReader.getText()));\n\t\t\t\t} else if (propName.equals(ItemData.COLUMN_DESCRIPTION) || propName.equals(\"name\")) {\n\t\t\t\t\t// since zabbix 2.x is the name of the item \"name\"\n\t\t\t\t\t// before zabbix 2.x the name field was \"description\"\n\t\t\t\t\tif (isVersion2 && propName.equals(\"name\")) {\n\t\t\t\t\t\ti.set(ItemData.COLUMN_DESCRIPTION, itemReader.getText());\n\t\t\t\t\t} else if (!isVersion2) {\n\t\t\t\t\t\ti.set(ItemData.COLUMN_DESCRIPTION, itemReader.getText());\n\t\t\t\t\t}\n\t\t\t\t} else if (propName.equals(ItemData.COLUMN_LASTCLOCK)) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\ti.set(ItemData.COLUMN_LASTCLOCK, Integer.parseInt(itemReader.getText()));\n\t\t\t\t\t} catch (NumberFormatException e) {\n\t\t\t\t\t\t// ignore\n\t\t\t\t\t}\n\t\t\t\t} else if (propName.equals(ItemData.COLUMN_LASTVALUE)) {\n\t\t\t\t\ti.set(ItemData.COLUMN_LASTVALUE, itemReader.getText());\n\t\t\t\t} else if (propName.equals(ItemData.COLUMN_UNITS)) {\n\t\t\t\t\ti.set(ItemData.COLUMN_UNITS, itemReader.getText());\n\t\t\t\t} else if (propName.equals(\"key_\")) {\n\t\t\t\t\tkey_ = itemReader.getText();\n\t\t\t\t} else if (propName.equals(\"applications\")) {\n\t\t\t\t\t// at this point itemid and hostid is unknown\n\t\t\t\t\t// because of this, all applicationrelations will be saved with itemid and hostid \"-1\".\n\t\t\t\t\t// later the IDs will be replaced with the correct\n\t\t\t\t\timportApplications(-1, -1, itemReader.getJsonArray());\n\t\t\t\t} else {\n\t\t\t\t\titemReader.nextProperty();\n\t\t\t\t}\n\t\t\t}\n\t\t\t// if applicable replace placeholder\n\t\t\tString description = (String) i.get(ItemData.COLUMN_DESCRIPTION);\n\t\t\tif (description.matches(\".*\\\\$[0-9].*\")) {\n\t\t\t\tif (key_ != null && key_.indexOf('[') != -1) {\n\t\t\t\t\tString[] keys = key_.substring(key_.indexOf('[')+1, key_.indexOf(']')).split(\",\");\n\t\t\t\t\tfor (int ix=0; ix<keys.length; ix++) {\n\t\t\t\t\t\tdescription = description.replace(\"$\"+(ix+1), keys[ix]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\ti.set(ItemData.COLUMN_DESCRIPTION, description);\n\t\t\tif (checkBeforeInsert) {\n\t\t\t\ti.insert(zabbixLocalDB, ItemData.COLUMN_ITEMID);\n\t\t\t} else {\n\t\t\t\ti.insert(zabbixLocalDB);\n\t\t\t}\n\t\t\tif (numItems > 0 && ++curI % 10 == 0) {\n\t\t\t\tshowProgress(curI*100/numItems);\n\t\t\t}\n\n\t\t\t// now the \"-1\" IDs of applicationsrelation will be replaced with the correct itemID\n\t\t\tContentValues values = new ContentValues(2);\n\t\t\tvalues.put(ApplicationItemRelationData.COLUMN_ITEMID, (Long) i.get(ItemData.COLUMN_ITEMID));\n\t\t\tvalues.put(ApplicationItemRelationData.COLUMN_HOSTID, (Long) i.get(ItemData.COLUMN_HOSTID));\n\t\t\tzabbixLocalDB.update(\n\t\t\t\t\tApplicationItemRelationData.TABLE_NAME\n\t\t\t\t\t, values\n\t\t\t\t\t, ApplicationItemRelationData.COLUMN_ITEMID+\"=-1\"\n\t\t\t\t\t, null\n\t\t\t);\n\t\t}\n\t\treturn firstItemId;\n\t}\n\n\tpublic void importItems(long hostid) throws JSONException, IOException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\tif (!isCached(ItemData.TABLE_NAME, \"hostid=\"+hostid)) {\n\t\t\t_startTransaction();\n\t\t\tzabbixLocalDB.delete(ItemData.TABLE_NAME, ItemData.COLUMN_HOSTID+\"=\"+hostid, null);\n\t\t\tzabbixLocalDB.delete(ApplicationItemRelationData.TABLE_NAME, ApplicationItemRelationData.COLUMN_HOSTID+\"=\"+hostid, null);\n\n\t\t\t// count of items\n\t\t\tJSONObject result = _queryBuffer(\n\t\t\t\t\t\"item.get\"\n\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t.put(\"output\", \"extend\")\n\t\t\t\t\t.put(\"countOutput\", 1)\n\t\t\t\t\t.put(\"limit\", ZabbixConfig.ITEM_GET_LIMIT)\n\t\t\t\t\t.put(\"hostids\", new JSONArray().put(hostid))\n\t\t\t);\n\t\t\tint numItems = result.getInt(\"result\");\n\t\t\tJsonArrayOrObjectReader items = _queryStream(\n\t\t\t\t\t\"item.get\"\n\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t\t.put(\"output\", \"extend\")\n\t\t\t\t\t\t.put(\"limit\", ZabbixConfig.ITEM_GET_LIMIT)\n\t\t\t\t\t\t.put(isVersion2?\"selectApplications\":\"select_applications\", \"extend\")\n\t\t\t\t\t\t.put(\"hostids\", new JSONArray().put(hostid))\n\t\t\t);\n\t\t\timportItems(items, numItems, false);\n\t\t\titems.close();\n\n\t\t\tsetCached(ItemData.TABLE_NAME, \"hostid=\"+hostid, ZabbixConfig.CACHE_LIFETIME_ITEMS);\n\t\t\t_endTransaction();\n\t\t}\n\t}\n\n\tprivate void importScreenItems(JsonArrayOrObjectReader screenItems) throws JsonParseException, NumberFormatException, IOException {\n\t\tJsonObjectReader screenItemReader;\n\t\twhile ((screenItemReader = screenItems.next()) != null) {\n\t\t\tScreenItemData si = new ScreenItemData();\n\t\t\tint resourcetype = -1;\n\t\t\twhile (screenItemReader.nextValueToken()) {\n\t\t\t\tString propName = screenItemReader.getCurrentName();\n\t\t\t\tif (propName.equals(ScreenItemData.COLUMN_SCREENITEMID)) {\n\t\t\t\t\tsi.set(ScreenItemData.COLUMN_SCREENITEMID, Long.parseLong(screenItemReader.getText()));\n\t\t\t\t} else if (propName.equals(ScreenItemData.COLUMN_SCREENID)) {\n\t\t\t\t\tsi.set(ScreenItemData.COLUMN_SCREENID, Long.parseLong(screenItemReader.getText()));\n\t\t\t\t} else if (propName.equals(ScreenItemData.COLUMN_RESOURCEID)) {\n\t\t\t\t\tsi.set(ScreenItemData.COLUMN_RESOURCEID, Long.parseLong(screenItemReader.getText()));\n\t\t\t\t} else if (propName.equals(\"resourcetype\")) {\n\t\t\t\t\tresourcetype = Integer.parseInt(screenItemReader.getText());\n\t\t\t\t} else {\n\t\t\t\t\tscreenItemReader.nextProperty();\n\t\t\t\t}\n\t\t\t}\n\t\t\t// only resouretype == 0\n\t\t\tif (resourcetype == 0) {\n\t\t\t\tsi.insert(zabbixLocalDB);\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic void importScreens() throws ClientProtocolException, IOException, JSONException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\tif (!isCached(ScreenData.TABLE_NAME, null)) {\n\t\t\t_startTransaction();\n\n\t\t\tzabbixLocalDB.delete(ScreenData.TABLE_NAME, null, null);\n\t\t\tzabbixLocalDB.delete(ScreenItemData.TABLE_NAME, null, null);\n\t\t\tzabbixLocalDB.delete(CacheData.TABLE_NAME, CacheData.COLUMN_KIND+\"='\"+ScreenData.TABLE_NAME+\"'\", null);\n\n\t\t\tJsonArrayOrObjectReader screens = _queryStream(\n\t\t\t\t\t(isVersion2?\"s\":\"S\")+\"creen.get\"\n\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t\t.put(\"output\", \"extend\")\n\t\t\t\t\t\t.put(isVersion2?\"selectScreenItems\":\"select_screenitems\", \"extend\")\n\t\t\t);\n\t\t\tJsonObjectReader screenReader;\n\t\t\twhile ((screenReader = screens.next()) != null) {\n\t\t\t\tScreenData scr = new ScreenData();\n\t\t\t\twhile (screenReader.nextValueToken()) {\n\t\t\t\t\tString propName = screenReader.getCurrentName();\n\t\t\t\t\tif (propName.equals(ScreenData.COLUMN_SCREENID)) {\n\t\t\t\t\t\tscr.set(ScreenData.COLUMN_SCREENID, Long.parseLong(screenReader.getText()));\n\t\t\t\t\t} else if (propName.equals(ScreenData.COLUMN_NAME)) {\n\t\t\t\t\t\tscr.set(ScreenData.COLUMN_NAME, screenReader.getText());\n\t\t\t\t\t} else if (propName.equals(\"screenitems\")) {\n\t\t\t\t\t\timportScreenItems(screenReader.getJsonArray());\n\t\t\t\t\t} else {\n\t\t\t\t\t\tscreenReader.nextProperty();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tscr.insert(zabbixLocalDB);\n\t\t\t}\n\t\t\tscreens.close();\n\n\t\t\tsetCached(ScreenData.TABLE_NAME, null, ZabbixConfig.CACHE_LIFETIME_SCREENS);\n\t\t\t_endTransaction();\n\t\t}\n\t}\n\n\tpublic void importTrigger(String triggerid) throws JSONException, IOException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\tif (!isCached(TriggerData.TABLE_NAME, \"triggerid=\"+triggerid)) {\n\t\t\t_startTransaction();\n\n\t\t\tJsonArrayOrObjectReader trigger = _queryStream(\n\t\t\t\t\t\"trigger.get\"\n\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t\t.put(\"output\", \"extend\")\n\t\t\t\t\t\t.put(isVersion2?\"selectHosts\":\"select_hosts\", \"extend\")\n\t\t\t\t\t\t.put(\"triggerids\", new JSONArray().put(triggerid))\n\t\t\t);\n\t\t\timportTriggers(trigger);\n\t\t\ttrigger.close();\n\n\t\t\tsetCached(TriggerData.TABLE_NAME, \"triggerid=\"+triggerid, ZabbixConfig.CACHE_LIFETIME_TRIGGERS);\n\t\t\t_endTransaction();\n\t\t}\n\t}\n\n\t/**\n\t * importiert ein trigger mit dem attribute itemid. ggf. wird der trigger zuerst gelöscht und neu angelegt.\n\t * imports a trigger with the attribute itemid. if trigger already exists, it will be removed first.\n\t * @param triggerid\n\t * @throws JSONException\n\t * @throws IOException\n\t * @throws HttpAuthorizationRequiredException\n\t * @throws NoAPIAccessException\n\t */\n\tpublic void importTriggerColumnItemId(String triggerid) throws JSONException, IOException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\t// check if the trigger exists and if the itemid was set\n\t\tboolean mustImport = true;\n\t\tCursor cur = zabbixLocalDB.query(TriggerData.TABLE_NAME, null, TriggerData.COLUMN_TRIGGERID+\"=\"+triggerid, null, null, null, null);\n\t\tif (cur.moveToFirst()) {\n\t\t\tlong itemid = 0;\n\t\t\ttry {\n\t\t\t\titemid = cur.getLong(cur.getColumnIndex(TriggerData.COLUMN_ITEMID));\n\t\t\t} catch (Exception e) {\n\t\t\t\t// no itemid\n\t\t\t}\n\t\t\tif (itemid > 0) {\n\t\t\t\tmustImport = false;\n\t\t\t}\n\t\t}\n\t\tif (mustImport) {\n\t\t\t_startTransaction();\n\t\t\tzabbixLocalDB.delete(TriggerData.TABLE_NAME, TriggerData.COLUMN_TRIGGERID+\"=\"+triggerid, null);\n\t\t\tJsonArrayOrObjectReader triggers = _queryStream(\n\t\t\t\t\t\"trigger.get\"\n\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t\t.put(\"output\", \"extend\")\n\t\t\t\t\t\t.put(isVersion2?\"selectHosts\":\"select_hosts\", \"extend\")\n\t\t\t\t\t\t.put(isVersion2?\"selectGroups\":\"select_groups\", \"extend\")\n\t\t\t\t\t\t.put(isVersion2?\"selectItems\":\"select_items\", \"extend\")\n\t\t\t\t\t\t.put(\"triggerids\", new JSONArray().put(triggerid))\n\t\t\t\t\t\t.put(\"limit\", 1)\n\t\t\t);\n\t\t\timportTriggers(triggers);\n\t\t\t_endTransaction();\n\t\t}\n\t}\n\n\t/**\n\t * imports the \"warning\"-triggers\n\t * @throws JSONException\n\t * @throws IOException\n\t * @throws HttpAuthorizationRequiredException\n\t * @throws NoAPIAccessException\n\t */\n\tpublic void importTriggers() throws JSONException, IOException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\tif (!isCached(TriggerData.TABLE_NAME, null)) {\n\t\t\t_startTransaction();\n\n\t\t\tlong min = (new Date().getTime()/1000)-ZabbixConfig.STATUS_SHOW_TRIGGER_TIME;\n\t\t\tJsonArrayOrObjectReader triggers = _queryStream(\n\t\t\t\t\t\"trigger.get\"\n\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t\t.put(\"output\", \"extend\")\n\t\t\t\t\t\t.put(\"sortfield\", \"lastchange\")\n\t\t\t\t\t\t.put(\"sortorder\", \"desc\")\n\t\t\t\t\t\t.put(isVersion2?\"selectHosts\":\"select_hosts\", \"extend\")\n\t\t\t\t\t\t.put(isVersion2?\"selectGroups\":\"select_groups\", \"extend\")\n\t\t\t\t\t\t.put(isVersion2?\"selectItems\":\"select_items\", \"extend\")\n\t\t\t\t\t\t.put(\"lastChangeSince\", min)\n\t\t\t\t\t\t.put(\"only_true\", \"1\")\n\t\t\t\t\t\t.put(\"limit\", ZabbixConfig.TRIGGER_GET_LIMIT)\n\t\t\t\t\t\t.put(\"expandDescription\", true)\n\t\t\t);\n\t\t\timportTriggers(triggers);\n\t\t\ttriggers.close();\n\n\t\t\tsetCached(TriggerData.TABLE_NAME, null, ZabbixConfig.CACHE_LIFETIME_TRIGGERS);\n\t\t\t_endTransaction();\n\t\t}\n\t}\n\n\tprivate void importTriggers(JsonArrayOrObjectReader jsonArray) throws JsonParseException, IOException {\n\t\tJsonObjectReader triggerReader;\n\t\twhile ((triggerReader = jsonArray.next()) != null) {\n\t\t\tTriggerData t = new TriggerData();\n\t\t\twhile (triggerReader.nextValueToken()) {\n\t\t\t\tString propName = triggerReader.getCurrentName();\n\t\t\t\tif (propName.equals(TriggerData.COLUMN_TRIGGERID)) {\n\t\t\t\t\tt.set(TriggerData.COLUMN_TRIGGERID, Long.parseLong(triggerReader.getText()));\n\t\t\t\t} else if (propName.equals(TriggerData.COLUMN_COMMENTS)) {\n\t\t\t\t\tt.set(TriggerData.COLUMN_COMMENTS, triggerReader.getText());\n\t\t\t\t} else if (propName.equals(TriggerData.COLUMN_DESCRIPTION)) {\n\t\t\t\t\tt.set(TriggerData.COLUMN_DESCRIPTION, triggerReader.getText());\n\t\t\t\t} else if (propName.equals(TriggerData.COLUMN_EXPRESSION)) {\n\t\t\t\t\tt.set(TriggerData.COLUMN_EXPRESSION, triggerReader.getText());\n\t\t\t\t} else if (propName.equals(TriggerData.COLUMN_LASTCHANGE)) {\n\t\t\t\t\tt.set(TriggerData.COLUMN_LASTCHANGE, Integer.parseInt(triggerReader.getText()));\n\t\t\t\t} else if (propName.equals(TriggerData.COLUMN_PRIORITY)) {\n\t\t\t\t\tt.set(TriggerData.COLUMN_PRIORITY, Integer.parseInt(triggerReader.getText()));\n\t\t\t\t} else if (propName.equals(TriggerData.COLUMN_STATUS)) {\n\t\t\t\t\tt.set(TriggerData.COLUMN_STATUS, Integer.parseInt(triggerReader.getText()));\n\t\t\t\t} else if (propName.equals(TriggerData.COLUMN_VALUE)) {\n\t\t\t\t\tt.set(TriggerData.COLUMN_VALUE, Integer.parseInt(triggerReader.getText()));\n\t\t\t\t} else if (propName.equals(TriggerData.COLUMN_URL)) {\n\t\t\t\t\tt.set(TriggerData.COLUMN_URL, triggerReader.getText());\n\t\t\t\t} else if (propName.equals(\"hosts\")) {\n\t\t\t\t\tObject[] hostsCache = importHosts(triggerReader.getJsonArray(), null);\n\t\t\t\t\tt.set(TriggerData.COLUMN_HOSTS, hostsCache[0]);\n\t\t\t\t\tt.set(TriggerData.COLUMN_HOSTID, hostsCache[1]);\n\t\t\t\t} else if (propName.equals(\"groups\")) {\n\t\t\t\t\timportHostGroups(triggerReader.getJsonArray());\n\t\t\t\t} else if (propName.equals(\"items\")) {\n\t\t\t\t\t// store the first item id\n\t\t\t\t\tt.set(TriggerData.COLUMN_ITEMID, importItems(triggerReader.getJsonArray(), 1, true));\n\t\t\t\t} else {\n\t\t\t\t\ttriggerReader.nextProperty();\n\t\t\t\t}\n\t\t\t}\n\t\t\tt.insert(zabbixLocalDB, TriggerData.COLUMN_TRIGGERID);\n\t\t\t_commitTransactionIfRecommended();\n\t\t}\n\t}\n\n\tpublic void importTriggersByItemId(String itemid) throws JSONException, IOException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\tif (!isCached(TriggerData.TABLE_NAME, \"itemid=\"+itemid)) {\n\t\t\t_startTransaction();\n\t\t\tzabbixLocalDB.delete(TriggerData.TABLE_NAME, TriggerData.COLUMN_ITEMID+\"=\"+itemid, null);\n\t\t\tJsonArrayOrObjectReader triggers = _queryStream(\n\t\t\t\t\t\"trigger.get\"\n\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t\t.put(\"output\", \"extend\")\n\t\t\t\t\t\t.put(isVersion2?\"selectHosts\":\"select_hosts\", \"extend\")\n\t\t\t\t\t\t.put(isVersion2?\"selectGroups\":\"select_groups\", \"extend\")\n\t\t\t\t\t\t.put(isVersion2?\"selectItems\":\"select_items\", \"extend\")\n\t\t\t\t\t\t.put(\"itemids\", new JSONArray().put(itemid))\n\t\t\t\t\t\t.put(\"limit\", 1)\n\t\t\t\t\t\t.put(\"sortfield\", \"lastchange\")\n\t\t\t\t\t\t.put(\"sortorder\", \"DESC\")\n\t\t\t);\n\t\t\timportTriggers(triggers);\n\t\t\tsetCached(TriggerData.TABLE_NAME, \"itemid=\"+itemid, ZabbixConfig.CACHE_LIFETIME_TRIGGERS);\n\t\t\t_endTransaction();\n\t\t}\n\t}\n\n\tpublic boolean isCached(String kind, String filter) {\n\t\tSQLiteQueryBuilder sqlBuilder = new SQLiteQueryBuilder();\n\t\tsqlBuilder.setTables(CacheData.TABLE_NAME);\n\t\tsqlBuilder.appendWhere(CacheData.COLUMN_KIND+\"='\"+kind+\"' AND \");\n\t\tsqlBuilder.appendWhere(CacheData.COLUMN_FILTER+\n\t\t\t\t(filter==null?\" IS NULL\":\"='\"+filter+\"'\")\n\t\t);\n\t\tsqlBuilder.appendWhere(\" AND \"+CacheData.COLUMN_EXPIRE_DATE+\">\"+new Date().getTime()/1000);\n\t\tCursor cur = sqlBuilder.query(\n\t\t\tzabbixLocalDB,\n\t\t\tnull,\n\t\t\tnull,\n\t\t\tnull,\n\t\t\tnull,\n\t\t\tnull,\n\t\t\tnull\n\t\t);\n\t\tLog.i(\"ZabbixContentProvider\", \"isCached \"+kind+\"//\"+filter+\"//\"+cur.moveToFirst());\n\t\treturn cur.moveToFirst();\n\t}\n\n\t/**\n\t * public, for the unit test\n\t */\n\tpublic void setCached(String kind, String filter, int lifetime) {\n\t\tCacheData cache = new CacheData();\n\t\tcache.set(CacheData.COLUMN_EXPIRE_DATE, new Date().getTime()/1000 + lifetime);\n\t\tcache.set(CacheData.COLUMN_KIND, kind);\n\t\tif (filter != null) {\n\t\t\tcache.set(CacheData.COLUMN_FILTER, filter);\n\t\t}\n\t\tcache.insert(zabbixLocalDB);\n\t}\n\n\t/**\n\t * updates the progressbar in the gui\n\t * @param i 0..100\n\t */\n\tpublic void showProgress(int i) {\n\t\t// if applicable, transform the progress\n\t\tif (transformProgressStart != 0 && transformProgressEnd != 0) {\n\t\t\ti = (int) (transformProgressStart + (transformProgressEnd-transformProgressStart)*(double)i/100);\n\t\t}\n\n\t\tIntent intent = new Intent(ZabbixContentProvider.CONTENT_PROVIDER_INTENT_ACTION);\n\t\tintent.putExtra(\"flag\", ZabbixContentProvider.INTENT_FLAG_SHOW_PROGRESS);\n\t\tintent.putExtra(\"value\", i);\n\t\tcontext.sendBroadcast(intent);\n\t}\n\n\t/**\n\t * transforms the progress\n\t * @param start 0% => start%\n\t * @param end 100% => end%\n\t */\n\tpublic void transformProgress(int start, int end) {\n\t\ttransformProgressStart = start;\n\t\ttransformProgressEnd = end;\n\t}\n}\n"],
    "p_date_tdt": "Jun 12, 2012 7:16:24 AM",
    "c_comments_t": ["\t\t\t// create ApplicationItemRelation /** \n * public, for the unit test\n */\n /** \n * import the hosts from stream\n * @param jsonArray stream\n * @param numHosts count of hosts for progressbar. null if unknown.\n * @return Object[] {(String) comma-separated all Hostnames, (Long) 1. host id}\n * @throws JsonParseException\n * @throws IOException\n */\n \t\t\t// result array found /** \n * import graph items\n * @param graphItems\n * @return true, if graphid column has to be updated from -1 to the correct graphid later.\n * @throws JsonParseException\n * @throws NumberFormatException\n * @throws IOException\n */\n \t\t\t\t\t\t// save only every 20th \t\t\t// wrong password. token remains null \t\t\t// the past 2 hours \t\t\t\t\t// data are unuseable, e.g. because it's a string /** \n * @param events stream\n * @param numEvents if null, no progressbar-update AND only isert, if it does not exist. If !null, progressbar-update AND always insert without checking\n * @throws JsonParseException\n * @throws IOException\n */\n \t\t\t\t\t// Precondition failed / Looks like Zabbix 1.8.2 \t\t\t// get API version \t\t\t// if #0 \"other\" does not exist yet, it has to be created \t\t\t\t\t// later the IDs will be replaced with the correct /** \n * zabbix api call. data will be parsed as json object on-the-fly. Caution: use this only for api calls with a small return data.\n * @param method\n * @param params\n * @return\n * @throws ClientProtocolException\n * @throws IOException\n * @throws JSONException\n * @throws HttpAuthorizationRequiredException\n * @throws NoAPIAccessException\n */\n /** \n * begin sql transaction\n */\n \t\t\t\t\t\t// first do a new auth and then try the same api call again \t\t\t\t// no itemid \t\t\t// count of items /** \n * init\n * @param context android context\n * @param zabbixLocalDB sqlite\n */\n \t\t\t// create applications that does not exist \t\t\t\t// so we use a fiction \t\t\t// only resouretype == 0 /** \n * probably too old zabbix <= 1.8.2\n */\n /** \n * zabbix auth. user and pwd from app preferences\n * @return true success\n * @throws ClientProtocolException\n * @throws IOException\n * @throws JSONException\n * @throws HttpAuthorizationRequiredException\n * @throws NoAPIAccessException\n */\n /** \n * close the last http stream\n */\n \t\t\t// Workaround: historydetails only comes if you use the correct \"history\"-parameter. /** \n * transforms the progress\n * @param start 0% => start%\n * @param end 100% => end%\n */\n \t\t\t\t// in Zabbix version <2.0, this is not default \t\t\t\t// file not found \t\t\t\t\t// hex string => color int \t\tHttpClientParams.setRedirecting(params, true); // redirecting \t\t\t// if applicable replace placeholder \t\t\t// if graphid-column was not set, this must be done later. temporary graphid=-1 \t\t// for GUI unit test, just return true /** \n * imports the \"warning\"-triggers\n * @throws JSONException\n * @throws IOException\n * @throws HttpAuthorizationRequiredException\n * @throws NoAPIAccessException\n */\n \t\t\t// event is parsed and can be inserted into the db \t\tpublic static final int EVENT_GET_TIME_FROM_SHIFT = 7*24*60*60; // -7 days \t\t// http request \t\t\t\t\t// store hosts namen \t\t\t\t// http auth failed \t\t\t\t\t// at this point itemid and hostid is unknown \t\t\t\t\t// import triggers \t\t\t// we try them all, until we get results. /** \n * importiert ein trigger mit dem attribute itemid. ggf. wird der trigger zuerst gelöscht und neu angelegt. imports a trigger with the attribute itemid. if trigger already exists, it will be removed first.\n * @param triggerid\n * @throws JSONException\n * @throws IOException\n * @throws HttpAuthorizationRequiredException\n * @throws NoAPIAccessException\n */\n \t\t\t\t\t// import hosts \t\t\t// for unit test \t\t\t\t// ignore \t\t\tlong time_from = time_till - ZabbixConfig.HISTORY_GET_TIME_FROM_SHIFT; // jetzt-2h \t\t\t// or a json object /** \n * zabbix error: no api access\n */\n /** \n * counts the sql inserts/updates and do a transaction commit to save the memory\n */\n \t\t\t// send intent to GUI \t\t\t\t\t// before zabbix 2.x the name field was \"description\" \t\t\t\t\t// if we get an empty array, we try another history parameter \t\t\t\t\t// store the first item id \t\t// check if the trigger exists and if the itemid was set /** \n * global constants\n */\n \t\t\t\t// create \"other\" hostgroup #1 \t\t\t// if there's no application, the ID #0 must be added (for other) \t\t\t\t\t// because of this, all applicationrelations will be saved with itemid and hostid \"-1\". \t\tpublic static final int HISTORY_GET_TIME_FROM_SHIFT = 8*60*60; // -8h \t\t\t\t\t\t.put(\"history\", historytype) // for integer ? /** \n * interface to connect to the zabbix server\n */\n /** \n * acknowledge zabbix event. Sets ack-flag with comment. Caution: This is supported only for Zabbix version >= 1.8.4\n * @param eventid\n * @param comment\n * @return true, success.\n * @throws ClientProtocolException\n * @throws IOException\n * @throws JSONException\n * @throws HttpAuthorizationRequiredException\n * @throws NoAPIAccessException\n */\n \t\t\t// store the last stream to close it if an exception will be thrown /** \n * zabbix api call as stream.\n * @param method\n * @param params\n * @return stream im json array wrapper\n * @throws JSONException\n * @throws IOException\n * @throws HttpAuthorizationRequiredException\n * @throws NoAPIAccessException\n */\n \t\t// if applicable http auth \t\t\t// correct historytype found and there are data \t\t\t\t// count of the entries cannot be detected (zabbix bug), /** \n * import items from stream.\n * @param items stream\n * @param numItems count for progressbar, if 0 no progressbarupdate\n * @param checkBeforeInsert if true, only make an insert if item does not exist\n * @return the first item id\n * @throws JsonParseException\n * @throws IOException\n */\n \t\t\t// collect all graphids /** \n * http auth is needed\n */\n \t\t\t// ignore for unit test /** \n * commit sql transaction\n */\n \t\t\t// delete old graphs \t\t\t// host without group will get group #0 (other) \t\t\t// there's no result \t\t// if applicable, transform the progress \t\t\t// SSL not trusted \t\t\t// internet problem \t\t\tif (jp.nextToken() != JsonToken.START_ARRAY && jp.getCurrentToken() != JsonToken.START_OBJECT) { // go inside the array \t\tpublic static final int CACHE_LIFETIME_APPLICATIONS = 2*24*60*60; // 2 days \t\t\t\t\t// since zabbix 2.x is the name of the item \"name\" \t\t\t// now the \"-1\" IDs of applicationsrelation will be replaced with the correct itemID \t\t\t// get count of hosts /** \n * import the newest events\n * @throws ClientProtocolException\n * @throws IOException\n * @throws JSONException\n * @throws HttpAuthorizationRequiredException\n * @throws NoAPIAccessException\n */\n /** \n * updates the progressbar in the gui\n * @param i 0..100\n */\n \t\t\t\t\t\t// ignore \t\t\t\t\t// first do a new auth and then try the same api call again /** \n * import the newest event of a trigger\n * @param triggerid\n * @throws JSONException\n * @throws IOException\n * @throws HttpAuthorizationRequiredException\n * @throws NoAPIAccessException\n */\n \t\t// it can be an (empty) array \t\t\t// this parameter can be \"null\" or a number 0-4. Because we don't know when to use which,"],
    "p_contents_t": ["package com.inovex.zabbixmobile.api;\n\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.net.Socket;\nimport java.net.UnknownHostException;\nimport java.security.KeyManagementException;\nimport java.security.KeyStore;\nimport java.security.KeyStoreException;\nimport java.security.NoSuchAlgorithmException;\nimport java.security.UnrecoverableKeyException;\nimport java.security.cert.CertificateException;\nimport java.security.cert.X509Certificate;\nimport java.util.ArrayList;\nimport java.util.Date;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Set;\n\nimport javax.net.ssl.SSLContext;\nimport javax.net.ssl.SSLPeerUnverifiedException;\nimport javax.net.ssl.TrustManager;\nimport javax.net.ssl.X509TrustManager;\n\nimport org.apache.http.HttpResponse;\nimport org.apache.http.HttpVersion;\nimport org.apache.http.auth.AuthScope;\nimport org.apache.http.auth.UsernamePasswordCredentials;\nimport org.apache.http.client.ClientProtocolException;\nimport org.apache.http.client.methods.HttpPost;\nimport org.apache.http.client.params.HttpClientParams;\nimport org.apache.http.conn.ClientConnectionManager;\nimport org.apache.http.conn.scheme.PlainSocketFactory;\nimport org.apache.http.conn.scheme.Scheme;\nimport org.apache.http.conn.scheme.SchemeRegistry;\nimport org.apache.http.conn.ssl.SSLSocketFactory;\nimport org.apache.http.entity.StringEntity;\nimport org.apache.http.impl.client.DefaultHttpClient;\nimport org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager;\nimport org.apache.http.params.BasicHttpParams;\nimport org.apache.http.params.HttpConnectionParams;\nimport org.apache.http.params.HttpParams;\nimport org.apache.http.params.HttpProtocolParams;\nimport org.apache.http.protocol.HTTP;\nimport org.codehaus.jackson.JsonFactory;\nimport org.codehaus.jackson.JsonParseException;\nimport org.codehaus.jackson.JsonParser;\nimport org.codehaus.jackson.JsonToken;\nimport org.json.JSONArray;\nimport org.json.JSONException;\nimport org.json.JSONObject;\n\nimport android.content.ContentValues;\nimport android.content.Context;\nimport android.content.Intent;\nimport android.content.SharedPreferences;\nimport android.database.Cursor;\nimport android.database.sqlite.SQLiteDatabase;\nimport android.database.sqlite.SQLiteQueryBuilder;\nimport android.graphics.Color;\nimport android.preference.PreferenceManager;\nimport android.util.Log;\n\nimport com.inovex.zabbixmobile.R;\nimport com.inovex.zabbixmobile.ZabbixContentProvider;\nimport com.inovex.zabbixmobile.model.ApplicationData;\nimport com.inovex.zabbixmobile.model.ApplicationItemRelationData;\nimport com.inovex.zabbixmobile.model.CacheData;\nimport com.inovex.zabbixmobile.model.EventData;\nimport com.inovex.zabbixmobile.model.GraphData;\nimport com.inovex.zabbixmobile.model.GraphItemData;\nimport com.inovex.zabbixmobile.model.HistoryDetailData;\nimport com.inovex.zabbixmobile.model.HostData;\nimport com.inovex.zabbixmobile.model.HostGroupData;\nimport com.inovex.zabbixmobile.model.ItemData;\nimport com.inovex.zabbixmobile.model.ScreenData;\nimport com.inovex.zabbixmobile.model.ScreenItemData;\nimport com.inovex.zabbixmobile.model.TriggerData;\n\n/**\n * interface to connect to the zabbix server\n */\npublic class ZabbixService {\n\tclass CustomSSLSocketFactory extends SSLSocketFactory {\n\t\tSSLContext sslContext = SSLContext.getInstance(\"TLS\");\n\n\t\tpublic CustomSSLSocketFactory(KeyStore truststore) throws NoSuchAlgorithmException, KeyManagementException, KeyStoreException, UnrecoverableKeyException {\n\t\t\tsuper(truststore);\n\t\t\tTrustManager tm = new X509TrustManager() {\n\t\t\t\t@Override\n\t\t\t\tpublic void checkClientTrusted(X509Certificate[] chain,\n\t\t\t\t\t\tString authType) throws CertificateException {\n\t\t\t\t}\n\t\t\t\t@Override\n\t\t\t\tpublic void checkServerTrusted(X509Certificate[] chain,\n\t\t\t\t\t\tString authType) throws CertificateException {\n\t\t\t\t}\n\t\t\t\t@Override\n\t\t\t\tpublic X509Certificate[] getAcceptedIssuers() {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t};\n\t\t\tsslContext.init(null, new TrustManager[] { tm }, null);\n\t\t}\n\n\t\t@Override\n\t\tpublic Socket createSocket() throws IOException {\n\t\t\treturn sslContext.getSocketFactory().createSocket();\n\t\t}\n\n\t\t@Override\n\t\tpublic Socket createSocket(Socket socket, String host, int port, boolean autoClose) throws IOException, UnknownHostException {\n\t\t\treturn sslContext.getSocketFactory().createSocket(socket, host, port, autoClose);\n\t\t}\n\t}\n\n\t/**\n\t * http auth is needed\n\t */\n\tpublic class HttpAuthorizationRequiredException extends Exception {\n\t\tprivate static final long serialVersionUID = 6632422081858878147L;\n\t}\n\n\t/**\n\t * zabbix error: no api access\n\t */\n\tpublic class NoAPIAccessException extends Exception {\n\t\tprivate static final long serialVersionUID = 6381395987443456382L;\n\t}\n\n\t/**\n\t * probably too old zabbix <= 1.8.2\n\t */\n\tpublic class PreconditionFailedException extends Exception {\n\t\tprivate static final long serialVersionUID = -2529885710860745023L;\n\t}\n\n\t/**\n\t * global constants\n\t */\n\tpublic class ZabbixConfig {\n\t\tpublic static final int APPLICATION_GET_LIMIT = 1000;\n\t\tpublic static final int EVENTS_GET_LIMIT = 60;\n\t\tpublic static final int HISTORY_GET_TIME_FROM_SHIFT = 8*60*60; // -8h\n\t\tpublic static final int HISTORY_GET_LIMIT = 8000;\n\t\tpublic static final int HOSTGROUP_GET_LIMIT = 200;\n\t\tpublic static final int HOST_GET_LIMIT = 300;\n\t\tpublic static final int ITEM_GET_LIMIT = 200;\n\t\tpublic static final int TRIGGER_GET_LIMIT = 100;\n\t\tpublic static final int EVENT_GET_TIME_FROM_SHIFT = 7*24*60*60; // -7 days\n\t\tpublic static final int CACHE_LIFETIME_APPLICATIONS = 2*24*60*60; // 2 days\n\t\tpublic static final int CACHE_LIFETIME_EVENTS = 120;\n\t\tpublic static final int CACHE_LIFETIME_HISTORY_DETAILS = 4*60;\n\t\tpublic static final int CACHE_LIFETIME_HOST_GROUPS = 7*24*60*60;\n\t\tpublic static final int CACHE_LIFETIME_HOSTS = 2*24*60*60;\n\t\tpublic static final int CACHE_LIFETIME_SCREENS = 2*24*60*60;\n\t\tpublic static final int CACHE_LIFETIME_ITEMS = 4*60;\n\t\tpublic static final int CACHE_LIFETIME_TRIGGERS = 2*60;\n\t\tpublic static final long STATUS_SHOW_TRIGGER_TIME = 14*24*60*60;\n\t\tpublic static final int HTTP_CONNECTION_TIMEOUT = 30000;\n\t}\n\n\tprivate final DefaultHttpClient httpClient;\n\tprivate final SQLiteDatabase zabbixLocalDB;\n\tprivate String url;\n\tprivate String token;\n\tprivate final Context context;\n\tprivate int _transactionStack;\n\tprivate JsonParser lastStream;\n\tprivate int transformProgressStart;\n\tprivate int transformProgressEnd;\n\tprivate boolean _notAuthorizedRetry;\n\tprivate boolean isVersion2 = true;\n\n\t/**\n\t * init\n\t * @param context android context\n\t * @param zabbixLocalDB sqlite\n\t */\n\tpublic ZabbixService(Context context, SQLiteDatabase zabbixLocalDB) {\n\t\tClientConnectionManager ccm = null;\n\t\tHttpParams params = null;\n\n\t\ttry {\n\t\t\tSharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(context);\n\t\t\tif (prefs.getBoolean(\"zabbix_trust_all_ssl_ca\", false)) {\n\t\t\t\tKeyStore trustStore = KeyStore.getInstance(KeyStore.getDefaultType());\n\t\t\t\ttrustStore.load(null, null);\n\n\t\t\t\tSSLSocketFactory sf = new CustomSSLSocketFactory(trustStore);\n\t\t\t\tsf.setHostnameVerifier(SSLSocketFactory.ALLOW_ALL_HOSTNAME_VERIFIER);\n\n\t\t\t\tparams = new BasicHttpParams();\n\t\t\t\tHttpProtocolParams.setVersion(params, HttpVersion.HTTP_1_1);\n\t\t\t\tHttpProtocolParams.setContentCharset(params, HTTP.UTF_8);\n\n\t\t\t\tSchemeRegistry registry = new SchemeRegistry();\n\t\t\t\tregistry.register(new Scheme(\"http\", PlainSocketFactory.getSocketFactory(), 80));\n\t\t\t\tregistry.register(new Scheme(\"https\", sf, 443));\n\n\t\t\t\tccm = new ThreadSafeClientConnManager(params, registry);\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\t// ignore for unit test\n\t\t}\n\n\t\tif (ccm == null || params == null) {\n\t\t\thttpClient = new DefaultHttpClient();\n\t\t} else {\n\t\t\thttpClient = new DefaultHttpClient(ccm, params);\n\t\t}\n\n\t\t// if applicable http auth\n\t\ttry {\n\t\t\tSharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(context);\n\t\t\tif (prefs.getBoolean(\"http_auth_enabled\", false)) {\n\t\t\t\tString user = prefs.getString(\"http_auth_username\", \"\");\n\t\t\t\tString pwd = prefs.getString(\"http_auth_password\", \"\");\n\t\t\t\thttpClient.getCredentialsProvider().setCredentials(AuthScope.ANY, new UsernamePasswordCredentials(user, pwd));\n\t\t\t}\n\t\t} catch (java.lang.UnsupportedOperationException e1) {\n\t\t\t// for unit test\n\t\t}\n\n\t\tparams = httpClient.getParams();\n\t\tHttpClientParams.setRedirecting(params, true); // redirecting\n\t\tHttpConnectionParams.setConnectionTimeout(params, ZabbixConfig.HTTP_CONNECTION_TIMEOUT);\n\t\tthis.context = context;\n\t\tthis.zabbixLocalDB = zabbixLocalDB;\n\t}\n\n\t/**\n\t * counts the sql inserts/updates and do a transaction commit to save the memory\n\t */\n\tprivate void _commitTransactionIfRecommended() {\n\t\tif (_transactionStack++ > 50) {\n\t\t\t_endTransaction();\n\t\t\t_startTransaction();\n\t\t}\n\t}\n\n\t/**\n\t * commit sql transaction\n\t */\n\tpublic void _endTransaction() {\n\t\tif (zabbixLocalDB.inTransaction()) {\n\t\t\tzabbixLocalDB.setTransactionSuccessful();\n\t\t\tzabbixLocalDB.endTransaction();\n\t\t}\n\t}\n\n\t/**\n\t * zabbix api call. data will be parsed as json object on-the-fly.\n\t * Caution: use this only for api calls with a small return data.\n\t * @param method\n\t * @param params\n\t * @return\n\t * @throws ClientProtocolException\n\t * @throws IOException\n\t * @throws JSONException\n\t * @throws HttpAuthorizationRequiredException\n\t * @throws NoAPIAccessException\n\t */\n\tprivate JSONObject _queryBuffer(String method, JSONObject params) throws ClientProtocolException, IOException, JSONException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\tHttpPost post = new HttpPost(url);\n\t\tpost.addHeader(\"Content-Type\", \"application/json; charset=utf-8\");\n\n\t\tString json =\n\t\t\t\"{\" +\n\t\t\t\"\t\\\"jsonrpc\\\" : \\\"2.0\\\",\" +\n\t\t\t\"\t\\\"method\\\" : \\\"\"+method+\"\\\",\" +\n\t\t\t\"\t\\\"params\\\" : \"+params.toString()+\",\" +\n\t\t\t\"\t\\\"auth\\\" : \"+(token==null?\"null\":'\"'+token+'\"')+\",\" +\n\t\t\t\"\t\\\"id\\\" : 0\" +\n\t\t\t\"}\";\n\n\t\tpost.setEntity(new StringEntity(json, \"UTF-8\"));\n\t\ttry {\n\t\t\tHttpResponse resp = httpClient.execute(post);\n\t\t\tif (resp.getStatusLine().getStatusCode() == 401) {\n\t\t\t\t// http auth failed\n\t\t\t\tthrow new HttpAuthorizationRequiredException();\n\t\t\t} else if (resp.getStatusLine().getStatusCode() == 412) {\n\t\t\t\t\t// Precondition failed / Looks like Zabbix 1.8.2\n\t\t\t\tthrow new PreconditionFailedException();\n\t\t\t} else if (resp.getStatusLine().getStatusCode() == 404) {\n\t\t\t\t// file not found\n\t\t\t\tthrow new IOException(resp.getStatusLine().getStatusCode()+\" \"+resp.getStatusLine().getReasonPhrase());\n\t\t\t} else {\n\t\t\t\tLog.d(\"ZabbixService\", resp.getStatusLine().getStatusCode()+\" \"+resp.getStatusLine().getReasonPhrase());\n\t\t\t}\n\t\t\tStringBuilder total = new StringBuilder();\n\t\t\tBufferedReader rd = new BufferedReader(new InputStreamReader(resp.getEntity().getContent()));\n\t\t\tint chr;\n\t\t\twhile ((chr = rd.read()) != -1) {\n\t\t\t\ttotal.append((char) chr);\n\t\t\t}\n\t\t\tJSONObject result = new JSONObject(total.toString());\n\t\t\ttry {\n\t\t\t\tif (result.getJSONObject(\"error\") != null) {\n\t\t\t\t\tif (result.getJSONObject(\"error\").getString(\"data\").equals(\"No API access\")) {\n\t\t\t\t\t\tthrow new NoAPIAccessException();\n\t\t\t\t\t} else throw new RuntimeException(result.getJSONObject(\"error\").toString());\n\t\t\t\t}\n\t\t\t\tif (result.getString(\"data\").equals(\"Not authorized\")) {\n\t\t\t\t\t// first do a new auth and then try the same api call again\n\t\t\t\t\tif (authenticate() && !_notAuthorizedRetry) {\n\t\t\t\t\t\t_notAuthorizedRetry = true;\n\t\t\t\t\t\tJSONObject r = _queryBuffer(method, params);\n\t\t\t\t\t\t_notAuthorizedRetry = false;\n\t\t\t\t\t\treturn r;\n\t\t\t\t\t} throw new IllegalStateException(result.toString());\n\t\t\t\t}\n\t\t\t} catch (JSONException e) {\n\t\t\t\t// ignore\n\t\t\t}\n\t\t\treturn result;\n\t\t} catch (SSLPeerUnverifiedException e) {\n\t\t\t// SSL not trusted\n\t\t\tIntent intent = new Intent(ZabbixContentProvider.CONTENT_PROVIDER_INTENT_ACTION);\n\t\t\tintent.putExtra(\"flag\", ZabbixContentProvider.INTENT_FLAG_SSL_NOT_TRUSTED);\n\t\t\tcontext.sendBroadcast(intent);\n\t\t\tthrow e;\n\t\t} catch (IOException e) {\n\t\t\t// internet problem\n\t\t\t// send intent to GUI\n\t\t\tIntent intent = new Intent(ZabbixContentProvider.CONTENT_PROVIDER_INTENT_ACTION);\n\t\t\tintent.putExtra(\"flag\", ZabbixContentProvider.INTENT_FLAG_CONNECTION_FAILED);\n\t\t\tintent.putExtra(\"value\", e.getMessage());\n\t\t\tcontext.sendBroadcast(intent);\n\t\t\tthrow e;\n\t\t}\n\t}\n\n\t/**\n\t * zabbix api call as stream.\n\t * @param method\n\t * @param params\n\t * @return stream im json array wrapper\n\t * @throws JSONException\n\t * @throws IOException\n\t * @throws HttpAuthorizationRequiredException\n\t * @throws NoAPIAccessException\n\t */\n\tprivate JsonArrayReader _queryStream(String method, JSONObject params) throws JSONException, IOException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\t// http request\n\t\tHttpPost post = new HttpPost(url);\n\t\tpost.addHeader(\"Content-Type\", \"application/json; charset=utf-8\");\n\n\t\tJSONObject json = new JSONObject()\n\t\t\t.put(\"jsonrpc\", \"2.0\")\n\t\t\t.put(\"method\", method)\n\t\t\t.put(\"params\", params)\n\t\t\t.put(\"auth\", token)\n\t\t\t.put(\"id\", 0);\n\n\t\tpost.setEntity(new StringEntity(json.toString(), \"UTF-8\"));\n\t\ttry {\n\t\t\tHttpResponse resp = httpClient.execute(post);\n\t\t\tif (resp.getStatusLine().getStatusCode() == 401) {\n\t\t\t\t// http auth failed\n\t\t\t\tthrow new HttpAuthorizationRequiredException();\n\t\t\t}\n\n\t\t\tJsonFactory jsonFac = new JsonFactory();\n\t\t\tJsonParser jp = jsonFac.createJsonParser(resp.getEntity().getContent());\n\t\t\t// store the last stream to close it if an exception will be thrown\n\t\t\tlastStream = jp;\n\t\t\tif (jp.nextToken() != JsonToken.START_OBJECT) {\n\t\t\t\tthrow new IOException(\"Expected data to start with an Object\");\n\t\t\t}\n\t\t\tdo {\n\t\t\t\tjp.nextToken();\n\t\t\t\tif (jp.getCurrentName().equals(\"error\")) {\n\t\t\t\t\tjp.nextToken();\n\t\t\t\t\tString errortxt = \"\";\n\t\t\t\t\twhile (jp.nextToken() != JsonToken.END_OBJECT) {\n\t\t\t\t\t\terrortxt += jp.getText();\n\t\t\t\t\t}\n\t\t\t\t\tif (errortxt.contains(\"No API access\")) {\n\t\t\t\t\t\tthrow new NoAPIAccessException();\n\t\t\t\t\t} else if (errortxt.contains(\"Not authorized\")) {\n\t\t\t\t\t\t// first do a new auth and then try the same api call again\n\t\t\t\t\t\tif (authenticate() && !_notAuthorizedRetry) {\n\t\t\t\t\t\t\t_notAuthorizedRetry = true;\n\t\t\t\t\t\t\tJsonArrayReader r = _queryStream(method, params);\n\t\t\t\t\t\t\t_notAuthorizedRetry = false;\n\t\t\t\t\t\t\treturn r;\n\t\t\t\t\t\t} else throw new IllegalStateException(errortxt);\n\t\t\t\t\t} else throw new IllegalStateException(\"JSON API Error: \"+errortxt);\n\t\t\t\t}\n\t\t\t} while (!jp.getCurrentName().equals(\"result\"));\n\n\t\t\t// result array found\n\t\t\tif (jp.nextToken() != JsonToken.START_ARRAY) { // go inside the array\n\t\t\t\tthrow new IOException(\"Expected data to start with an Array\");\n\t\t\t}\n\t\t\treturn new JsonArrayReader(jp);\n\t\t} catch (SSLPeerUnverifiedException e) {\n\t\t\tthrow e;\n\t\t} catch (IOException e) {\n\t\t\t// internet problem\n\t\t\t// send intent to GUI\n\t\t\tIntent intent = new Intent(ZabbixContentProvider.CONTENT_PROVIDER_INTENT_ACTION);\n\t\t\tintent.putExtra(\"flag\", ZabbixContentProvider.INTENT_FLAG_CONNECTION_FAILED);\n\t\t\tcontext.sendBroadcast(intent);\n\t\t\tthrow e;\n\t\t}\n\t}\n\n\t/**\n\t * begin sql transaction\n\t */\n\tprivate void _startTransaction() {\n\t\tzabbixLocalDB.beginTransaction();\n\t\t_transactionStack = 0;\n\t}\n\n\t/**\n\t * acknowledge zabbix event. Sets ack-flag with comment.\n\t * Caution: This is supported only for Zabbix version >= 1.8.4\n\t * @param eventid\n\t * @param comment\n\t * @return true, success.\n\t * @throws ClientProtocolException\n\t * @throws IOException\n\t * @throws JSONException\n\t * @throws HttpAuthorizationRequiredException\n\t * @throws NoAPIAccessException\n\t */\n\tpublic boolean acknowledgeEvent(String eventid, String comment) throws ClientProtocolException, IOException, JSONException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\t// for GUI unit test, just return true\n\t\tif (comment != null && comment.equals(\"__UNIT_TEST__RETURN_TRUE__\")) return true;\n\n\t\tJSONObject result = _queryBuffer(\n\t\t\t\t\"event.acknowledge\"\n\t\t\t\t, new JSONObject()\n\t\t\t\t\t.put(\"eventids\", new JSONArray().put(eventid))\n\t\t);\n\t\t// it can be an (empty) array\n\t\ttry {\n\t\t\treturn result.getJSONObject(\"result\").getJSONArray(\"eventids\").length() == 1;\n\t\t} catch (JSONException e) {\n\t\t\t// or a json object\n\t\t\treturn result.getJSONObject(\"result\").getJSONObject(\"eventids\").length() == 1;\n\t\t}\n\t}\n\n\t/**\n\t * zabbix auth. user and pwd from app preferences\n\t * @return true success\n\t * @throws ClientProtocolException\n\t * @throws IOException\n\t * @throws JSONException\n\t * @throws HttpAuthorizationRequiredException\n\t * @throws NoAPIAccessException\n\t */\n\tpublic boolean authenticate() throws ClientProtocolException, IOException, JSONException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\tSharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(context);\n\t\tString url = prefs.getString(\"zabbix_url\", \"\").trim();\n\t\tString user = prefs.getString(\"zabbix_username\", \"\").trim();\n\t\tString password = prefs.getString(\"zabbix_password\", \"\");\n\n\t\tthis.url = url+(url.endsWith(\"/\")?\"\":'/')+\"api_jsonrpc.php\";\n\t\tLog.d(\"ZabbixContentProvider\", url+\"//\"+user);\n\n\t\ttry {\n\t\t\tJSONObject result = _queryBuffer(\n\t\t\t\t\t\"user.authenticate\"\n\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t\t.put(\"user\", user)\n\t\t\t\t\t\t.put(\"password\", password)\n\t\t\t);\n\t\t\ttoken = result.getString(\"result\");\n\t\t} catch (JSONException e) {\n\t\t\t// there's no result\n\t\t\te.printStackTrace();\n\t\t} catch (RuntimeException e) {\n\t\t\t// wrong password. token remains null\n\t\t\te.printStackTrace();\n\t\t}\n\t\tif (token != null) {\n\t\t\t// get API version\n\t\t\tJSONObject result = _queryBuffer(\n\t\t\t\t\t\"apiinfo.version\"\n\t\t\t\t\t, new JSONObject()\n\t\t\t);\n\t\t\tisVersion2 = result.getString(\"result\").equals(\"1.4\");\n\t\t}\n\t\treturn token != null;\n\t}\n\n\t/**\n\t * close the last http stream\n\t */\n\tpublic void closeLastStream() {\n\t\tif (lastStream != null && !lastStream.isClosed()) {\n\t\t\ttry {\n\t\t\t\tlastStream.close();\n\t\t\t} catch (IOException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate void importApplications(long hostid, long itemid, JsonArrayReader jsonArray) throws JsonParseException, NumberFormatException, IOException {\n\t\tint num = 0;\n\t\tJsonObjectReader application;\n\t\twhile ((application = jsonArray.next()) != null) {\n\t\t\tApplicationData app = new ApplicationData();\n\t\t\twhile (application.nextValueToken()) {\n\t\t\t\tString propName = application.getCurrentName();\n\t\t\t\tif (propName.equals(ApplicationData.COLUMN_APPLICATIONID)) {\n\t\t\t\t\tapp.set(ApplicationData.COLUMN_APPLICATIONID, Long.parseLong(application.getText()));\n\t\t\t\t} else if (propName.equals(ApplicationData.COLUMN_NAME)) {\n\t\t\t\t\tapp.set(ApplicationData.COLUMN_NAME, application.getText());\n\t\t\t\t} else if (propName.equals(ApplicationData.COLUMN_HOSTID)) {\n\t\t\t\t\tapp.set(ApplicationData.COLUMN_HOSTID, Long.parseLong(application.getText()));\n\t\t\t\t} else {\n\t\t\t\t\tapplication.nextProperty();\n\t\t\t\t}\n\t\t\t}\n\t\t\t// create applications that does not exist\n\t\t\tapp.insert(zabbixLocalDB, ApplicationData.COLUMN_APPLICATIONID);\n\t\t\t_commitTransactionIfRecommended();\n\n\t\t\t// create ApplicationItemRelation\n\t\t\tlong appid = (Long) app.get(ApplicationData.COLUMN_APPLICATIONID);\n\t\t\tApplicationItemRelationData rel = new ApplicationItemRelationData();\n\t\t\trel.set(ApplicationItemRelationData.COLUMN_APPLICATIONID, appid);\n\t\t\trel.set(ApplicationItemRelationData.COLUMN_ITEMID, itemid);\n\t\t\trel.set(ApplicationItemRelationData.COLUMN_HOSTID, hostid);\n\t\t\trel.insert(zabbixLocalDB);\n\t\t\t_commitTransactionIfRecommended();\n\n\t\t\tnum++;\n\t\t}\n\t\tif (num == 0) {\n\t\t\t// if there's no application, the ID #0 must be added (for other)\n\t\t\tApplicationItemRelationData rel = new ApplicationItemRelationData();\n\t\t\trel.set(ApplicationItemRelationData.COLUMN_APPLICATIONID, 0);\n\t\t\trel.set(ApplicationItemRelationData.COLUMN_ITEMID, itemid);\n\t\t\trel.set(ApplicationItemRelationData.COLUMN_HOSTID, hostid);\n\t\t\trel.insert(zabbixLocalDB);\n\n\t\t\t// if #0 \"other\" does not exist yet, it has to be created\n\t\t\tApplicationData app = new ApplicationData();\n\t\t\tapp.set(ApplicationData.COLUMN_APPLICATIONID, 0);\n\t\t\tapp.set(ApplicationData.COLUMN_NAME, \"- \"+context.getResources().getString(R.string.other)+\" -\");\n\t\t\tapp.insert(zabbixLocalDB, ApplicationData.COLUMN_APPLICATIONID);\n\t\t}\n\t}\n\n\t/**\n\t * import the newest event of a trigger\n\t * @param triggerid\n\t * @throws JSONException\n\t * @throws IOException\n\t * @throws HttpAuthorizationRequiredException\n\t * @throws NoAPIAccessException\n\t */\n\tpublic void importEventByTriggerId(String triggerid) throws JSONException, IOException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\tif (!isCached(EventData.TABLE_NAME, \"triggerid=\"+triggerid)) {\n\t\t\t_startTransaction();\n\t\t\tzabbixLocalDB.delete(EventData.TABLE_NAME, EventData.COLUMN_OBJECTID+\"=\"+triggerid, null);\n\n\t\t\tJSONObject params = new JSONObject()\n\t\t\t\t.put(\"output\", \"extend\")\n\t\t\t\t.put(isVersion2?\"selectHosts\":\"select_hosts\", \"extend\")\n\t\t\t\t.put(\"triggerids\", new JSONArray().put(triggerid))\n\t\t\t\t.put(\"limit\", 1)\n\t\t\t\t.put(\"source\", 0);\n\t\t\tif (!isVersion2) {\n\t\t\t\tparams.put(\"sortfield\", \"clock\")\n\t\t\t\t\t.put(\"sortorder\", \"DESC\");\n\t\t\t}\n\n\t\t\tJsonArrayReader events = _queryStream(\n\t\t\t\t\t\"event.get\"\n\t\t\t\t\t, params\n\t\t\t);\n\t\t\timportEvents(events, null);\n\t\t\tevents.close();\n\n\t\t\tsetCached(EventData.TABLE_NAME, \"triggerid=\"+triggerid, ZabbixConfig.CACHE_LIFETIME_EVENTS);\n\t\t\t_endTransaction();\n\t\t}\n\t}\n\n\t/**\n\t * import the newest events\n\t * @throws ClientProtocolException\n\t * @throws IOException\n\t * @throws JSONException\n\t * @throws HttpAuthorizationRequiredException\n\t * @throws NoAPIAccessException\n\t */\n\tpublic void importEvents() throws ClientProtocolException, IOException, JSONException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\tif (!isCached(EventData.TABLE_NAME, null)) {\n\t\t\t_startTransaction();\n\t\t\tzabbixLocalDB.delete(EventData.TABLE_NAME, null, null);\n\t\t\tzabbixLocalDB.delete(TriggerData.TABLE_NAME, null, null);\n\t\t\tzabbixLocalDB.delete(CacheData.TABLE_NAME, CacheData.COLUMN_KIND+\"='\"+EventData.TABLE_NAME+\"'\", null);\n\t\t\tzabbixLocalDB.delete(CacheData.TABLE_NAME, CacheData.COLUMN_KIND+\"='\"+TriggerData.TABLE_NAME+\"'\", null);\n\n\t\t\tint numEvents = ZabbixConfig.EVENTS_GET_LIMIT;\n\n\t\t\tJSONObject params = new JSONObject()\n\t\t\t\t.put(\"output\", \"extend\")\n\t\t\t\t.put(\"limit\", ZabbixConfig.EVENTS_GET_LIMIT)\n\t\t\t\t.put(isVersion2?\"selectHosts\":\"select_hosts\", \"extend\")\n\t\t\t\t.put(isVersion2?\"selectTriggers\":\"select_triggers\", \"extend\")\n\t\t\t\t.put(\"source\", 0)\n\t\t\t\t.put(\"time_from\", (new Date().getTime()/1000) - ZabbixConfig.EVENT_GET_TIME_FROM_SHIFT);\n\t\t\tif (!isVersion2) {\n\t\t\t\t// in Zabbix version <2.0, this is not default\n\t\t\t\tparams.put(\"sortfield\", \"clock\")\n\t\t\t\t\t.put(\"sortorder\", \"DESC\");\n\t\t\t}\n\t\t\tJsonArrayReader events = _queryStream(\n\t\t\t\t\t\"event.get\"\n\t\t\t\t\t, params\n\t\t\t);\n\t\t\timportEvents(events, numEvents);\n\t\t\tevents.close();\n\n\t\t\tsetCached(EventData.TABLE_NAME, null, ZabbixConfig.CACHE_LIFETIME_EVENTS);\n\t\t\t_endTransaction();\n\t\t}\n\t}\n\n\t/**\n\t * @param events stream\n\t * @param numEvents if null, no progressbar-update AND only isert, if it does not exist. If !null, progressbar-update AND always insert without checking\n\t * @throws JsonParseException\n\t * @throws IOException\n\t */\n\tprivate void importEvents(JsonArrayReader events, Integer numEvents) throws JsonParseException, IOException {\n\t\tint i=0;\n\t\tJsonObjectReader eventReader;\n\t\twhile ((eventReader = events.next()) != null) {\n\t\t\tEventData e = new EventData();\n\t\t\twhile (eventReader.nextValueToken()) {\n\t\t\t\tString propName = eventReader.getCurrentName();\n\t\t\t\tif (propName.equals(\"hosts\")) {\n\t\t\t\t\t// import hosts\n\t\t\t\t\tString hostnames = (String) importHosts(eventReader.getJsonArray(), null)[0];\n\t\t\t\t\t// store hosts namen\n\t\t\t\t\te.set(EventData.COLUMN_HOSTS, hostnames);\n\t\t\t\t} else if (propName.equals(\"triggers\")) {\n\t\t\t\t\t// import triggers\n\t\t\t\t\timportTriggers(eventReader.getJsonArray());\n\t\t\t\t} else if (propName.equals(EventData.COLUMN_EVENTID)) {\n\t\t\t\t\te.set(EventData.COLUMN_EVENTID, Long.parseLong(eventReader.getText()));\n\t\t\t\t} else if (propName.equals(EventData.COLUMN_CLOCK)) {\n\t\t\t\t\te.set(EventData.COLUMN_CLOCK, Integer.parseInt(eventReader.getText()));\n\t\t\t\t} else if (propName.equals(EventData.COLUMN_OBJECTID)) {\n\t\t\t\t\te.set(EventData.COLUMN_OBJECTID, Long.parseLong(eventReader.getText()));\n\t\t\t\t} else if (propName.equals(EventData.COLUMN_ACK)) {\n\t\t\t\t\te.set(EventData.COLUMN_ACK, Integer.parseInt(eventReader.getText()) == 1);\n\t\t\t\t} else if (propName.equals(EventData.COLUMN_VALUE)) {\n\t\t\t\t\te.set(EventData.COLUMN_VALUE, Integer.parseInt(eventReader.getText()));\n\t\t\t\t} else {\n\t\t\t\t\teventReader.nextProperty();\n\t\t\t\t}\n\t\t\t}\n\t\t\t// event is parsed and can be inserted into the db\n\t\t\tif (numEvents == null) {\n\t\t\t\te.insert(zabbixLocalDB, EventData.COLUMN_EVENTID);\n\t\t\t} else {\n\t\t\t\te.insert(zabbixLocalDB);\n\t\t\t\tif (++i % 10 == 0) {\n\t\t\t\t\tshowProgress(i*100/numEvents);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t_commitTransactionIfRecommended();\n\t\t}\n\t}\n\n\t/**\n\t * import graph items\n\t *\n\t * @param graphItems\n\t * @return true, if graphid column has to be updated from -1 to the correct graphid later.\n\t * @throws JsonParseException\n\t * @throws NumberFormatException\n\t * @throws IOException\n\t */\n\tprivate boolean importGraphItems(JsonArrayReader graphItems) throws JsonParseException, NumberFormatException, IOException {\n\t\tboolean mustSetGraphid = false;\n\t\tJsonObjectReader graphItemReader;\n\t\twhile ((graphItemReader = graphItems.next()) != null) {\n\t\t\tGraphItemData gi = new GraphItemData();\n\t\t\twhile (graphItemReader.nextValueToken()) {\n\t\t\t\tString propName = graphItemReader.getCurrentName();\n\t\t\t\tif (propName.equals(\"gitemid\")) {\n\t\t\t\t\tgi.set(GraphItemData.COLUMN_GRAPHITEMID, Long.parseLong(graphItemReader.getText()));\n\t\t\t\t} else if (propName.equals(GraphItemData.COLUMN_GRAPHID)) {\n\t\t\t\t\tgi.set(GraphItemData.COLUMN_GRAPHID, Long.parseLong(graphItemReader.getText()));\n\t\t\t\t} else if (propName.equals(GraphItemData.COLUMN_ITEMID)) {\n\t\t\t\t\tgi.set(GraphItemData.COLUMN_ITEMID, Long.parseLong(graphItemReader.getText()));\n\t\t\t\t} else if (propName.equals(GraphItemData.COLUMN_COLOR)) {\n\t\t\t\t\t// hex string => color int\n\t\t\t\t\tgi.set(GraphItemData.COLUMN_COLOR, Color.parseColor(\"#\"+graphItemReader.getText()));\n\t\t\t\t} else {\n\t\t\t\t\tgraphItemReader.nextProperty();\n\t\t\t\t}\n\t\t\t}\n\t\t\t// if graphid-column was not set, this must be done later. temporary graphid=-1\n\t\t\tif (gi.get(GraphItemData.COLUMN_GRAPHID) == null) {\n\t\t\t\tgi.set(GraphItemData.COLUMN_GRAPHID, -1);\n\t\t\t\tmustSetGraphid = true;\n\t\t\t}\n\t\t\tgi.insert(zabbixLocalDB);\n\t\t}\n\t\treturn mustSetGraphid;\n\t}\n\n\tpublic void importGraphsForScreen(long screenid) throws ClientProtocolException, IOException, JSONException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\tif (!isCached(GraphData.TABLE_NAME, \"screenid=\"+screenid)) {\n\t\t\t_startTransaction();\n\n\t\t\t// collect all graphids\n\t\t\tSet<Long> graphids = new HashSet<Long>();\n\t\t\tCursor cur = zabbixLocalDB.query(ScreenItemData.TABLE_NAME, null, ScreenItemData.COLUMN_SCREENID+\"=\"+screenid, null, null, null, null);\n\t\t\twhile (cur.moveToNext()) {\n\t\t\t\tgraphids.add(cur.getLong(cur.getColumnIndex(ScreenItemData.COLUMN_RESOURCEID)));\n\t\t\t}\n\n\t\t\t// delete old graphs\n\t\t\tString str_graphids = graphids.toString().replace(\"[\", \"\").replace(\"]\", \"\");\n\t\t\tif (str_graphids.length()>0) {\n\t\t\t\tzabbixLocalDB.delete(GraphData.TABLE_NAME, GraphData.COLUMN_GRAPHID+\" IN (\"+str_graphids+\")\", null);\n\t\t\t\tzabbixLocalDB.delete(GraphItemData.TABLE_NAME, GraphItemData.COLUMN_GRAPHID+\" IN (\"+str_graphids+\")\", null);\n\t\t\t}\n\t\t\tzabbixLocalDB.delete(CacheData.TABLE_NAME, CacheData.COLUMN_KIND+\"='\"+GraphData.TABLE_NAME+\"' AND \"+CacheData.COLUMN_FILTER+\"='screenid=\"+screenid+'\\'', null);\n\n\t\t\tJsonArrayReader graphs = _queryStream(\n\t\t\t\t\t\"graph.get\"\n\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t\t.put(isVersion2?\"selectGraphItems\":\"select_graph_items\", \"extend\")\n\t\t\t\t\t\t.put(isVersion2?\"selectItems\":\"select_items\", \"extend\")\n\t\t\t\t\t\t.put(\"output\", \"extend\")\n\t\t\t\t\t\t.put(\"graphids\", new JSONArray(graphids))\n\t\t\t);\n\t\t\tJsonObjectReader graphReader;\n\t\t\twhile ((graphReader = graphs.next()) != null) {\n\t\t\t\tboolean mustSetGraphid = false;\n\t\t\t\tGraphData scr = new GraphData();\n\t\t\t\twhile (graphReader.nextValueToken()) {\n\t\t\t\t\tString propName = graphReader.getCurrentName();\n\t\t\t\t\tif (propName.equals(GraphData.COLUMN_GRAPHID)) {\n\t\t\t\t\t\tscr.set(GraphData.COLUMN_GRAPHID, Long.parseLong(graphReader.getText()));\n\t\t\t\t\t} else if (propName.equals(GraphData.COLUMN_NAME)) {\n\t\t\t\t\t\tscr.set(GraphData.COLUMN_NAME, graphReader.getText());\n\t\t\t\t\t} else if (propName.equals(\"gitems\")) {\n\t\t\t\t\t\tmustSetGraphid = importGraphItems(graphReader.getJsonArray());\n\t\t\t\t\t} else if (propName.equals(\"items\")) {\n\t\t\t\t\t\timportItems(graphReader.getJsonArray(), 0, true);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tgraphReader.nextProperty();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tscr.insert(zabbixLocalDB);\n\t\t\t\tif (mustSetGraphid) {\n\t\t\t\t\tContentValues values = new ContentValues(1);\n\t\t\t\t\tvalues.put(GraphItemData.COLUMN_GRAPHID, (Long) scr.get(GraphData.COLUMN_GRAPHID));\n\t\t\t\t\tzabbixLocalDB.update(\n\t\t\t\t\t\t\tGraphItemData.TABLE_NAME\n\t\t\t\t\t\t\t, values\n\t\t\t\t\t\t\t, GraphItemData.COLUMN_GRAPHID+\"=-1\"\n\t\t\t\t\t\t\t, null);\n\t\t\t\t}\n\t\t\t}\n\t\t\tgraphs.close();\n\n\t\t\tsetCached(GraphData.TABLE_NAME, \"screenid=\"+screenid, ZabbixConfig.CACHE_LIFETIME_SCREENS);\n\t\t\t_endTransaction();\n\t\t}\n\t}\n\n\tpublic void importHistoryDetails(String itemid) throws ClientProtocolException, IOException, JSONException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\tif (!isCached(HistoryDetailData.TABLE_NAME, itemid)) {\n\t\t\t_startTransaction();\n\t\t\tzabbixLocalDB.delete(HistoryDetailData.TABLE_NAME, HistoryDetailData.COLUMN_ITEMID+\"=\"+itemid, null);\n\n\t\t\t// the past 2 hours\n\t\t\tlong time_till = new Date().getTime() / 1000;\n\t\t\tlong time_from = time_till - ZabbixConfig.HISTORY_GET_TIME_FROM_SHIFT; // jetzt-2h\n\n\t\t\t// Workaround: historydetails only comes if you use the correct \"history\"-parameter.\n\t\t\t// this parameter can be \"null\" or a number 0-4. Because we don't know when to use which,\n\t\t\t// we try them all, until we get results.\n\t\t\tInteger historytype = null;\n\t\t\tJSONObject result = _queryBuffer(\n\t\t\t\t\t\"history.get\"\n\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t\t.put(\"limit\", 1)\n\t\t\t\t\t\t.put(\"history\", historytype) // for integer ?\n\t\t\t\t\t\t.put(\"itemids\", new JSONArray().put(itemid))\n\t\t\t\t\t\t.put(\"time_from\", time_from)\n\t\t\t);\n\n\t\t\tJSONArray testHistorydetails = result.getJSONArray(\"result\");\n\t\t\tif (testHistorydetails.length() == 0) {\n\t\t\t\thistorytype = -1;\n\t\t\t\twhile (testHistorydetails.length() == 0 && ++historytype <= 4) {\n\t\t\t\t\t// if we get an empty array, we try another history parameter\n\t\t\t\t\tresult = _queryBuffer(\n\t\t\t\t\t\t\t\"history.get\"\n\t\t\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t\t\t\t.put(\"output\", \"extend\")\n\t\t\t\t\t\t\t\t.put(\"limit\", 1)\n\t\t\t\t\t\t\t\t.put(\"history\", historytype)\n\t\t\t\t\t\t\t\t.put(\"itemids\", new JSONArray().put(itemid))\n\t\t\t\t\t\t\t\t.put(\"time_from\", time_from)\n\t\t\t\t\t);\n\t\t\t\t\ttestHistorydetails = result.getJSONArray(\"result\");\n\t\t\t\t}\n\t\t\t}\n\t\t\t// correct historytype found and there are data\n\t\t\tif (testHistorydetails.length() > 0) {\n\t\t\t\t// count of the entries cannot be detected (zabbix bug),\n\t\t\t\t// so we use a fiction\n\t\t\t\tint numDetails = 400;\n\t\t\t\tint curI=0;\n\t\t\t\tJsonArrayReader historydetails = _queryStream(\n\t\t\t\t\t\t\"history.get\"\n\t\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t\t\t.put(\"output\", \"extend\")\n\t\t\t\t\t\t\t.put(\"limit\", ZabbixConfig.HISTORY_GET_LIMIT)\n\t\t\t\t\t\t\t.put(\"history\", historytype)\n\t\t\t\t\t\t\t.put(\"itemids\", new JSONArray().put(itemid))\n\t\t\t\t\t\t\t.put(\"time_from\", time_from)\n\t\t\t\t\t\t\t.put(\"sortfield\", \"clock\")\n\t\t\t\t\t\t\t.put(\"sortorder\", \"DESC\")\n\t\t\t\t);\n\t\t\t\tJsonObjectReader historydetail;\n\t\t\t\ttry {\n\t\t\t\t\tint selI = 0;\n\t\t\t\t\twhile ((historydetail = historydetails.next()) != null) {\n\t\t\t\t\t\t// save only every 20th\n\t\t\t\t\t\tif (selI++ % 20 != 0) {\n\t\t\t\t\t\t\twhile (historydetail.nextValueToken()) {\n\t\t\t\t\t\t\t\thistorydetail.nextProperty();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tHistoryDetailData h = new HistoryDetailData();\n\t\t\t\t\t\twhile (historydetail.nextValueToken()) {\n\t\t\t\t\t\t\tString propName = historydetail.getCurrentName();\n\t\t\t\t\t\t\tif (propName.equals(HistoryDetailData.COLUMN_CLOCK)) {\n\t\t\t\t\t\t\t\th.set(HistoryDetailData.COLUMN_CLOCK, Integer.parseInt(historydetail.getText()));\n\t\t\t\t\t\t\t} else if (propName.equals(HistoryDetailData.COLUMN_ITEMID)) {\n\t\t\t\t\t\t\t\th.set(HistoryDetailData.COLUMN_ITEMID, Long.parseLong(historydetail.getText()));\n\t\t\t\t\t\t\t} else if (propName.equals(HistoryDetailData.COLUMN_VALUE)) {\n\t\t\t\t\t\t\t\th.set(HistoryDetailData.COLUMN_VALUE, Double.parseDouble(historydetail.getText()));\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\thistorydetail.nextProperty();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\th.insert(zabbixLocalDB);\n\t\t\t\t\t\tif (++curI % 10 == 0) {\n\t\t\t\t\t\t\tshowProgress(Math.min(curI*100/numDetails, 84));\n\t\t\t\t\t\t}\n\t\t\t\t\t\t_commitTransactionIfRecommended();\n\t\t\t\t\t}\n\t\t\t\t} catch (NumberFormatException e) {\n\t\t\t\t\t// data are unuseable, e.g. because it's a string\n\t\t\t\t}\n\t\t\t\thistorydetails.close();\n\t\t\t}\n\t\t\tsetCached(HistoryDetailData.TABLE_NAME, itemid, ZabbixConfig.CACHE_LIFETIME_HISTORY_DETAILS);\n\t\t\t_endTransaction();\n\t\t}\n\t}\n\n\tprivate long importHostGroups(JsonArrayReader jsonArray) throws JsonParseException, IOException {\n\t\tlong firstHostGroupId = -1;\n\t\tJsonObjectReader hostReader;\n\t\twhile ((hostReader = jsonArray.next()) != null) {\n\t\t\tHostGroupData h = new HostGroupData();\n\t\t\twhile (hostReader.nextValueToken()) {\n\t\t\t\tString propName = hostReader.getCurrentName();\n\t\t\t\tif (propName.equals(HostGroupData.COLUMN_GROUPID)) {\n\t\t\t\t\tlong id = Long.parseLong(hostReader.getText());\n\t\t\t\t\tif (firstHostGroupId == -1) firstHostGroupId = id;\n\t\t\t\t\th.set(HostGroupData.COLUMN_GROUPID, id);\n\t\t\t\t} else if (propName.equals(HostGroupData.COLUMN_NAME)) {\n\t\t\t\t\th.set(HostGroupData.COLUMN_NAME, hostReader.getText());\n\t\t\t\t} else {\n\t\t\t\t\thostReader.nextProperty();\n\t\t\t\t}\n\t\t\t}\n\t\t\th.insert(zabbixLocalDB, HostGroupData.COLUMN_GROUPID);\n\t\t\t_commitTransactionIfRecommended();\n\t\t}\n\n\t\treturn firstHostGroupId;\n\t}\n\n\t/**\n\t * import the hosts from stream\n\t * @param jsonArray stream\n\t * @param numHosts count of hosts for progressbar. null if unknown.\n\t * @return Object[] {(String) comma-separated all Hostnames, (Long) 1. host id}\n\t * @throws JsonParseException\n\t * @throws IOException\n\t */\n\tprivate Object[] importHosts(JsonArrayReader jsonArray, Integer numHosts) throws JsonParseException, IOException {\n\t\tList<String> hostnames = new ArrayList<String>();\n\t\tlong firstHostId = -1;\n\t\tJsonObjectReader hostReader;\n\t\tint i=0;\n\t\twhile ((hostReader = jsonArray.next()) != null) {\n\t\t\tHostData h = new HostData();\n\t\t\twhile (hostReader.nextValueToken()) {\n\t\t\t\tString propName = hostReader.getCurrentName();\n\t\t\t\tif (propName.equals(HostData.COLUMN_HOSTID)) {\n\t\t\t\t\th.set(HostData.COLUMN_HOSTID, Long.parseLong(hostReader.getText()));\n\t\t\t\t\tif (firstHostId == -1) {\n\t\t\t\t\t\tfirstHostId = (Long) h.get(HostData.COLUMN_HOSTID);\n\t\t\t\t\t}\n\t\t\t\t} else if (propName.equals(HostData.COLUMN_HOST)) {\n\t\t\t\t\tString host = hostReader.getText();\n\t\t\t\t\thostnames.add(host);\n\t\t\t\t\th.set(HostData.COLUMN_HOST, host);\n\t\t\t\t} else if (propName.equals(\"groups\")) {\n\t\t\t\t\tlong groupid = importHostGroups(hostReader.getJsonArray());\n\t\t\t\t\tif (groupid != -1) {\n\t\t\t\t\t\th.set(HostData.COLUMN_GROUPID, groupid);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\thostReader.nextProperty();\n\t\t\t\t}\n\t\t\t}\n\t\t\t// host without group will get group #0 (other)\n\t\t\tif (h.get(HostData.COLUMN_GROUPID) == null) {\n\t\t\t\th.set(HostData.COLUMN_GROUPID, 0);\n\t\t\t\t// create \"other\" hostgroup #1\n\t\t\t\tHostGroupData hg = new HostGroupData();\n\t\t\t\thg.set(HostGroupData.COLUMN_GROUPID, 0);\n\t\t\t\thg.set(HostGroupData.COLUMN_NAME, \"- \"+context.getResources().getString(R.string.other)+\" -\");\n\t\t\t\thg.insert(zabbixLocalDB, HostGroupData.COLUMN_GROUPID);\n\t\t\t}\n\t\t\th.insert(zabbixLocalDB, HostData.COLUMN_HOSTID);\n\t\t\tif (numHosts != null && ++i % 10 == 0) {\n\t\t\t\tshowProgress(i*100/numHosts);\n\t\t\t}\n\t\t\t_commitTransactionIfRecommended();\n\t\t}\n\n\t\treturn new Object[] {hostnames.toString().replaceAll(\"[\\\\[\\\\]]\", \"\"), firstHostId};\n\t}\n\n\tpublic void importHostsAndGroups() throws JSONException, IOException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\tif (!isCached(HostData.TABLE_NAME, null)) {\n\t\t\t_startTransaction();\n\t\t\tzabbixLocalDB.delete(HostData.TABLE_NAME, null, null);\n\t\t\tzabbixLocalDB.delete(HostGroupData.TABLE_NAME, null, null);\n\n\t\t\t// get count of hosts\n\t\t\tJSONObject result = _queryBuffer(\n\t\t\t\t\t\"host.get\"\n\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t\t.put(\"countOutput\", 1)\n\t\t\t\t\t\t.put(\"limit\", ZabbixConfig.HOST_GET_LIMIT)\n\t\t\t\t\t\t.put(isVersion2?\"selectGroups\":\"select_groups\", \"extend\")\n\t\t\t);\n\t\t\tint numHosts = result.getInt(\"result\");\n\t\t\tJsonArrayReader hosts = _queryStream(\n\t\t\t\t\t\"host.get\"\n\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t\t.put(\"output\", \"extend\")\n\t\t\t\t\t\t.put(\"limit\", ZabbixConfig.HOST_GET_LIMIT)\n\t\t\t\t\t\t.put(isVersion2?\"selectGroups\":\"select_groups\", \"extend\")\n\t\t\t);\n\t\t\timportHosts(hosts, numHosts);\n\t\t\thosts.close();\n\n\t\t\tsetCached(HostData.TABLE_NAME, null, ZabbixConfig.CACHE_LIFETIME_HOSTS);\n\t\t\t_endTransaction();\n\t\t}\n\t}\n\n\t/**\n\t * import items from stream.\n\t * @param items stream\n\t * @param numItems count for progressbar, if 0 no progressbarupdate\n\t * @param checkBeforeInsert if true, only make an insert if item does not exist\n\t * @return the first item id\n\t * @throws JsonParseException\n\t * @throws IOException\n\t */\n\tprivate long importItems(JsonArrayReader items, int numItems, boolean checkBeforeInsert) throws JsonParseException, IOException {\n\t\tlong firstItemId = -1;\n\t\tint curI=0;\n\t\tJsonObjectReader itemReader;\n\t\twhile ((itemReader = items.next()) != null) {\n\t\t\tItemData i = new ItemData();\n\t\t\tString key_ = null;\n\t\t\twhile (itemReader.nextValueToken()) {\n\t\t\t\tString propName = itemReader.getCurrentName();\n\t\t\t\tif (propName.equals(ItemData.COLUMN_ITEMID)) {\n\t\t\t\t\ti.set(ItemData.COLUMN_ITEMID, Long.parseLong(itemReader.getText()));\n\t\t\t\t\tif (firstItemId == -1) {\n\t\t\t\t\t\tfirstItemId = (Long) i.get(ItemData.COLUMN_ITEMID);\n\t\t\t\t\t}\n\t\t\t\t} else if (propName.equals(ItemData.COLUMN_HOSTID)) {\n\t\t\t\t\ti.set(ItemData.COLUMN_HOSTID, Long.parseLong(itemReader.getText()));\n\t\t\t\t} else if (propName.equals(ItemData.COLUMN_DESCRIPTION) || propName.equals(\"name\")) {\n\t\t\t\t\t// since zabbix 2.x is the name of the item \"name\"\n\t\t\t\t\t// before zabbix 2.x the name field was \"description\"\n\t\t\t\t\tif (isVersion2 && propName.equals(\"name\")) {\n\t\t\t\t\t\ti.set(ItemData.COLUMN_DESCRIPTION, itemReader.getText());\n\t\t\t\t\t} else if (!isVersion2) {\n\t\t\t\t\t\ti.set(ItemData.COLUMN_DESCRIPTION, itemReader.getText());\n\t\t\t\t\t}\n\t\t\t\t} else if (propName.equals(ItemData.COLUMN_LASTCLOCK)) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\ti.set(ItemData.COLUMN_LASTCLOCK, Integer.parseInt(itemReader.getText()));\n\t\t\t\t\t} catch (NumberFormatException e) {\n\t\t\t\t\t\t// ignore\n\t\t\t\t\t}\n\t\t\t\t} else if (propName.equals(ItemData.COLUMN_LASTVALUE)) {\n\t\t\t\t\ti.set(ItemData.COLUMN_LASTVALUE, itemReader.getText());\n\t\t\t\t} else if (propName.equals(ItemData.COLUMN_UNITS)) {\n\t\t\t\t\ti.set(ItemData.COLUMN_UNITS, itemReader.getText());\n\t\t\t\t} else if (propName.equals(\"key_\")) {\n\t\t\t\t\tkey_ = itemReader.getText();\n\t\t\t\t} else if (propName.equals(\"applications\")) {\n\t\t\t\t\t// at this point itemid and hostid is unknown\n\t\t\t\t\t// because of this, all applicationrelations will be saved with itemid and hostid \"-1\".\n\t\t\t\t\t// later the IDs will be replaced with the correct\n\t\t\t\t\timportApplications(-1, -1, itemReader.getJsonArray());\n\t\t\t\t} else {\n\t\t\t\t\titemReader.nextProperty();\n\t\t\t\t}\n\t\t\t}\n\t\t\t// if applicable replace placeholder\n\t\t\tString description = (String) i.get(ItemData.COLUMN_DESCRIPTION);\n\t\t\tif (description.matches(\".*\\\\$[0-9].*\")) {\n\t\t\t\tif (key_ != null && key_.indexOf('[') != -1) {\n\t\t\t\t\tString[] keys = key_.substring(key_.indexOf('[')+1, key_.indexOf(']')).split(\",\");\n\t\t\t\t\tfor (int ix=0; ix<keys.length; ix++) {\n\t\t\t\t\t\tdescription = description.replace(\"$\"+(ix+1), keys[ix]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\ti.set(ItemData.COLUMN_DESCRIPTION, description);\n\t\t\tif (checkBeforeInsert) {\n\t\t\t\ti.insert(zabbixLocalDB, ItemData.COLUMN_ITEMID);\n\t\t\t} else {\n\t\t\t\ti.insert(zabbixLocalDB);\n\t\t\t}\n\t\t\tif (numItems > 0 && ++curI % 10 == 0) {\n\t\t\t\tshowProgress(curI*100/numItems);\n\t\t\t}\n\n\t\t\t// now the \"-1\" IDs of applicationsrelation will be replaced with the correct itemID\n\t\t\tContentValues values = new ContentValues(2);\n\t\t\tvalues.put(ApplicationItemRelationData.COLUMN_ITEMID, (Long) i.get(ItemData.COLUMN_ITEMID));\n\t\t\tvalues.put(ApplicationItemRelationData.COLUMN_HOSTID, (Long) i.get(ItemData.COLUMN_HOSTID));\n\t\t\tzabbixLocalDB.update(\n\t\t\t\t\tApplicationItemRelationData.TABLE_NAME\n\t\t\t\t\t, values\n\t\t\t\t\t, ApplicationItemRelationData.COLUMN_ITEMID+\"=-1\"\n\t\t\t\t\t, null\n\t\t\t);\n\t\t}\n\t\treturn firstItemId;\n\t}\n\n\tpublic void importItems(long hostid) throws JSONException, IOException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\tif (!isCached(ItemData.TABLE_NAME, \"hostid=\"+hostid)) {\n\t\t\t_startTransaction();\n\t\t\tzabbixLocalDB.delete(ItemData.TABLE_NAME, ItemData.COLUMN_HOSTID+\"=\"+hostid, null);\n\t\t\tzabbixLocalDB.delete(ApplicationItemRelationData.TABLE_NAME, ApplicationItemRelationData.COLUMN_HOSTID+\"=\"+hostid, null);\n\n\t\t\t// count of items\n\t\t\tJSONObject result = _queryBuffer(\n\t\t\t\t\t\"item.get\"\n\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t.put(\"output\", \"extend\")\n\t\t\t\t\t.put(\"countOutput\", 1)\n\t\t\t\t\t.put(\"limit\", ZabbixConfig.ITEM_GET_LIMIT)\n\t\t\t\t\t.put(\"hostids\", new JSONArray().put(hostid))\n\t\t\t);\n\t\t\tint numItems = result.getInt(\"result\");\n\t\t\tJsonArrayReader items = _queryStream(\n\t\t\t\t\t\"item.get\"\n\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t\t.put(\"output\", \"extend\")\n\t\t\t\t\t\t.put(\"limit\", ZabbixConfig.ITEM_GET_LIMIT)\n\t\t\t\t\t\t.put(isVersion2?\"selectApplications\":\"select_applications\", \"extend\")\n\t\t\t\t\t\t.put(\"hostids\", new JSONArray().put(hostid))\n\t\t\t);\n\t\t\timportItems(items, numItems, false);\n\t\t\titems.close();\n\n\t\t\tsetCached(ItemData.TABLE_NAME, \"hostid=\"+hostid, ZabbixConfig.CACHE_LIFETIME_ITEMS);\n\t\t\t_endTransaction();\n\t\t}\n\t}\n\n\tprivate void importScreenItems(JsonArrayReader screenItems) throws JsonParseException, NumberFormatException, IOException {\n\t\tJsonObjectReader screenItemReader;\n\t\twhile ((screenItemReader = screenItems.next()) != null) {\n\t\t\tScreenItemData si = new ScreenItemData();\n\t\t\tint resourcetype = -1;\n\t\t\twhile (screenItemReader.nextValueToken()) {\n\t\t\t\tString propName = screenItemReader.getCurrentName();\n\t\t\t\tif (propName.equals(ScreenItemData.COLUMN_SCREENITEMID)) {\n\t\t\t\t\tsi.set(ScreenItemData.COLUMN_SCREENITEMID, Long.parseLong(screenItemReader.getText()));\n\t\t\t\t} else if (propName.equals(ScreenItemData.COLUMN_SCREENID)) {\n\t\t\t\t\tsi.set(ScreenItemData.COLUMN_SCREENID, Long.parseLong(screenItemReader.getText()));\n\t\t\t\t} else if (propName.equals(ScreenItemData.COLUMN_RESOURCEID)) {\n\t\t\t\t\tsi.set(ScreenItemData.COLUMN_RESOURCEID, Long.parseLong(screenItemReader.getText()));\n\t\t\t\t} else if (propName.equals(\"resourcetype\")) {\n\t\t\t\t\tresourcetype = Integer.parseInt(screenItemReader.getText());\n\t\t\t\t} else {\n\t\t\t\t\tscreenItemReader.nextProperty();\n\t\t\t\t}\n\t\t\t}\n\t\t\t// only resouretype == 0\n\t\t\tif (resourcetype == 0) {\n\t\t\t\tsi.insert(zabbixLocalDB);\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic void importScreens() throws ClientProtocolException, IOException, JSONException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\tif (!isCached(ScreenData.TABLE_NAME, null)) {\n\t\t\t_startTransaction();\n\n\t\t\tzabbixLocalDB.delete(ScreenData.TABLE_NAME, null, null);\n\t\t\tzabbixLocalDB.delete(ScreenItemData.TABLE_NAME, null, null);\n\t\t\tzabbixLocalDB.delete(CacheData.TABLE_NAME, CacheData.COLUMN_KIND+\"='\"+ScreenData.TABLE_NAME+\"'\", null);\n\n\t\t\tJsonArrayReader screens = _queryStream(\n\t\t\t\t\t(isVersion2?\"s\":\"S\")+\"creen.get\"\n\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t\t.put(\"output\", \"extend\")\n\t\t\t\t\t\t.put(isVersion2?\"selectScreenItems\":\"select_screenitems\", \"extend\")\n\t\t\t);\n\t\t\tJsonObjectReader screenReader;\n\t\t\twhile ((screenReader = screens.next()) != null) {\n\t\t\t\tScreenData scr = new ScreenData();\n\t\t\t\twhile (screenReader.nextValueToken()) {\n\t\t\t\t\tString propName = screenReader.getCurrentName();\n\t\t\t\t\tif (propName.equals(ScreenData.COLUMN_SCREENID)) {\n\t\t\t\t\t\tscr.set(ScreenData.COLUMN_SCREENID, Long.parseLong(screenReader.getText()));\n\t\t\t\t\t} else if (propName.equals(ScreenData.COLUMN_NAME)) {\n\t\t\t\t\t\tscr.set(ScreenData.COLUMN_NAME, screenReader.getText());\n\t\t\t\t\t} else if (propName.equals(\"screenitems\")) {\n\t\t\t\t\t\timportScreenItems(screenReader.getJsonArray());\n\t\t\t\t\t} else {\n\t\t\t\t\t\tscreenReader.nextProperty();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tscr.insert(zabbixLocalDB);\n\t\t\t}\n\t\t\tscreens.close();\n\n\t\t\tsetCached(ScreenData.TABLE_NAME, null, ZabbixConfig.CACHE_LIFETIME_SCREENS);\n\t\t\t_endTransaction();\n\t\t}\n\t}\n\n\tpublic void importTrigger(String triggerid) throws JSONException, IOException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\tif (!isCached(TriggerData.TABLE_NAME, \"triggerid=\"+triggerid)) {\n\t\t\t_startTransaction();\n\n\t\t\tJsonArrayReader trigger = _queryStream(\n\t\t\t\t\t\"trigger.get\"\n\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t\t.put(\"output\", \"extend\")\n\t\t\t\t\t\t.put(isVersion2?\"selectHosts\":\"select_hosts\", \"extend\")\n\t\t\t\t\t\t.put(\"triggerids\", new JSONArray().put(triggerid))\n\t\t\t);\n\t\t\timportTriggers(trigger);\n\t\t\ttrigger.close();\n\n\t\t\tsetCached(TriggerData.TABLE_NAME, \"triggerid=\"+triggerid, ZabbixConfig.CACHE_LIFETIME_TRIGGERS);\n\t\t\t_endTransaction();\n\t\t}\n\t}\n\n\t/**\n\t * importiert ein trigger mit dem attribute itemid. ggf. wird der trigger zuerst gelöscht und neu angelegt.\n\t * imports a trigger with the attribute itemid. if trigger already exists, it will be removed first.\n\t * @param triggerid\n\t * @throws JSONException\n\t * @throws IOException\n\t * @throws HttpAuthorizationRequiredException\n\t * @throws NoAPIAccessException\n\t */\n\tpublic void importTriggerColumnItemId(String triggerid) throws JSONException, IOException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\t// check if the trigger exists and if the itemid was set\n\t\tboolean mustImport = true;\n\t\tCursor cur = zabbixLocalDB.query(TriggerData.TABLE_NAME, null, TriggerData.COLUMN_TRIGGERID+\"=\"+triggerid, null, null, null, null);\n\t\tif (cur.moveToFirst()) {\n\t\t\tlong itemid = 0;\n\t\t\ttry {\n\t\t\t\titemid = cur.getLong(cur.getColumnIndex(TriggerData.COLUMN_ITEMID));\n\t\t\t} catch (Exception e) {\n\t\t\t\t// no itemid\n\t\t\t}\n\t\t\tif (itemid > 0) {\n\t\t\t\tmustImport = false;\n\t\t\t}\n\t\t}\n\t\tif (mustImport) {\n\t\t\t_startTransaction();\n\t\t\tzabbixLocalDB.delete(TriggerData.TABLE_NAME, TriggerData.COLUMN_TRIGGERID+\"=\"+triggerid, null);\n\t\t\tJsonArrayReader triggers = _queryStream(\n\t\t\t\t\t\"trigger.get\"\n\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t\t.put(\"output\", \"extend\")\n\t\t\t\t\t\t.put(isVersion2?\"selectHosts\":\"select_hosts\", \"extend\")\n\t\t\t\t\t\t.put(isVersion2?\"selectGroups\":\"select_groups\", \"extend\")\n\t\t\t\t\t\t.put(isVersion2?\"selectItems\":\"select_items\", \"extend\")\n\t\t\t\t\t\t.put(\"triggerids\", new JSONArray().put(triggerid))\n\t\t\t\t\t\t.put(\"limit\", 1)\n\t\t\t);\n\t\t\timportTriggers(triggers);\n\t\t\t_endTransaction();\n\t\t}\n\t}\n\n\t/**\n\t * imports the \"warning\"-triggers\n\t * @throws JSONException\n\t * @throws IOException\n\t * @throws HttpAuthorizationRequiredException\n\t * @throws NoAPIAccessException\n\t */\n\tpublic void importTriggers() throws JSONException, IOException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\tif (!isCached(TriggerData.TABLE_NAME, null)) {\n\t\t\t_startTransaction();\n\n\t\t\tlong min = (new Date().getTime()/1000)-ZabbixConfig.STATUS_SHOW_TRIGGER_TIME;\n\t\t\tJsonArrayReader triggers = _queryStream(\n\t\t\t\t\t\"trigger.get\"\n\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t\t.put(\"output\", \"extend\")\n\t\t\t\t\t\t.put(\"sortfield\", \"lastchange\")\n\t\t\t\t\t\t.put(\"sortorder\", \"desc\")\n\t\t\t\t\t\t.put(isVersion2?\"selectHosts\":\"select_hosts\", \"extend\")\n\t\t\t\t\t\t.put(isVersion2?\"selectGroups\":\"select_groups\", \"extend\")\n\t\t\t\t\t\t.put(isVersion2?\"selectItems\":\"select_items\", \"extend\")\n\t\t\t\t\t\t.put(\"lastChangeSince\", min)\n\t\t\t\t\t\t.put(\"only_true\", \"1\")\n\t\t\t\t\t\t.put(\"limit\", ZabbixConfig.TRIGGER_GET_LIMIT)\n\t\t\t\t\t\t.put(\"expandDescription\", true)\n\t\t\t);\n\t\t\timportTriggers(triggers);\n\t\t\ttriggers.close();\n\n\t\t\tsetCached(TriggerData.TABLE_NAME, null, ZabbixConfig.CACHE_LIFETIME_TRIGGERS);\n\t\t\t_endTransaction();\n\t\t}\n\t}\n\n\tprivate void importTriggers(JsonArrayReader jsonArray) throws JsonParseException, IOException {\n\t\tJsonObjectReader triggerReader;\n\t\twhile ((triggerReader = jsonArray.next()) != null) {\n\t\t\tTriggerData t = new TriggerData();\n\t\t\twhile (triggerReader.nextValueToken()) {\n\t\t\t\tString propName = triggerReader.getCurrentName();\n\t\t\t\tif (propName.equals(TriggerData.COLUMN_TRIGGERID)) {\n\t\t\t\t\tt.set(TriggerData.COLUMN_TRIGGERID, Long.parseLong(triggerReader.getText()));\n\t\t\t\t} else if (propName.equals(TriggerData.COLUMN_COMMENTS)) {\n\t\t\t\t\tt.set(TriggerData.COLUMN_COMMENTS, triggerReader.getText());\n\t\t\t\t} else if (propName.equals(TriggerData.COLUMN_DESCRIPTION)) {\n\t\t\t\t\tt.set(TriggerData.COLUMN_DESCRIPTION, triggerReader.getText());\n\t\t\t\t} else if (propName.equals(TriggerData.COLUMN_EXPRESSION)) {\n\t\t\t\t\tt.set(TriggerData.COLUMN_EXPRESSION, triggerReader.getText());\n\t\t\t\t} else if (propName.equals(TriggerData.COLUMN_LASTCHANGE)) {\n\t\t\t\t\tt.set(TriggerData.COLUMN_LASTCHANGE, Integer.parseInt(triggerReader.getText()));\n\t\t\t\t} else if (propName.equals(TriggerData.COLUMN_PRIORITY)) {\n\t\t\t\t\tt.set(TriggerData.COLUMN_PRIORITY, Integer.parseInt(triggerReader.getText()));\n\t\t\t\t} else if (propName.equals(TriggerData.COLUMN_STATUS)) {\n\t\t\t\t\tt.set(TriggerData.COLUMN_STATUS, Integer.parseInt(triggerReader.getText()));\n\t\t\t\t} else if (propName.equals(TriggerData.COLUMN_VALUE)) {\n\t\t\t\t\tt.set(TriggerData.COLUMN_VALUE, Integer.parseInt(triggerReader.getText()));\n\t\t\t\t} else if (propName.equals(TriggerData.COLUMN_URL)) {\n\t\t\t\t\tt.set(TriggerData.COLUMN_URL, triggerReader.getText());\n\t\t\t\t} else if (propName.equals(\"hosts\")) {\n\t\t\t\t\tObject[] hostsCache = importHosts(triggerReader.getJsonArray(), null);\n\t\t\t\t\tt.set(TriggerData.COLUMN_HOSTS, hostsCache[0]);\n\t\t\t\t\tt.set(TriggerData.COLUMN_HOSTID, hostsCache[1]);\n\t\t\t\t} else if (propName.equals(\"groups\")) {\n\t\t\t\t\timportHostGroups(triggerReader.getJsonArray());\n\t\t\t\t} else if (propName.equals(\"items\")) {\n\t\t\t\t\t// store the first item id\n\t\t\t\t\tt.set(TriggerData.COLUMN_ITEMID, importItems(triggerReader.getJsonArray(), 1, true));\n\t\t\t\t} else {\n\t\t\t\t\ttriggerReader.nextProperty();\n\t\t\t\t}\n\t\t\t}\n\t\t\tt.insert(zabbixLocalDB, TriggerData.COLUMN_TRIGGERID);\n\t\t\t_commitTransactionIfRecommended();\n\t\t}\n\t}\n\n\tpublic void importTriggersByItemId(String itemid) throws JSONException, IOException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\tif (!isCached(TriggerData.TABLE_NAME, \"itemid=\"+itemid)) {\n\t\t\t_startTransaction();\n\t\t\tzabbixLocalDB.delete(TriggerData.TABLE_NAME, TriggerData.COLUMN_ITEMID+\"=\"+itemid, null);\n\t\t\tJsonArrayReader triggers = _queryStream(\n\t\t\t\t\t\"trigger.get\"\n\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t\t.put(\"output\", \"extend\")\n\t\t\t\t\t\t.put(isVersion2?\"selectHosts\":\"select_hosts\", \"extend\")\n\t\t\t\t\t\t.put(isVersion2?\"selectGroups\":\"select_groups\", \"extend\")\n\t\t\t\t\t\t.put(isVersion2?\"selectItems\":\"select_items\", \"extend\")\n\t\t\t\t\t\t.put(\"itemids\", new JSONArray().put(itemid))\n\t\t\t\t\t\t.put(\"limit\", 1)\n\t\t\t\t\t\t.put(\"sortfield\", \"lastchange\")\n\t\t\t\t\t\t.put(\"sortorder\", \"DESC\")\n\t\t\t);\n\t\t\timportTriggers(triggers);\n\t\t\tsetCached(TriggerData.TABLE_NAME, \"itemid=\"+itemid, ZabbixConfig.CACHE_LIFETIME_TRIGGERS);\n\t\t\t_endTransaction();\n\t\t}\n\t}\n\n\tpublic boolean isCached(String kind, String filter) {\n\t\tSQLiteQueryBuilder sqlBuilder = new SQLiteQueryBuilder();\n\t\tsqlBuilder.setTables(CacheData.TABLE_NAME);\n\t\tsqlBuilder.appendWhere(CacheData.COLUMN_KIND+\"='\"+kind+\"' AND \");\n\t\tsqlBuilder.appendWhere(CacheData.COLUMN_FILTER+\n\t\t\t\t(filter==null?\" IS NULL\":\"='\"+filter+\"'\")\n\t\t);\n\t\tsqlBuilder.appendWhere(\" AND \"+CacheData.COLUMN_EXPIRE_DATE+\">\"+new Date().getTime()/1000);\n\t\tCursor cur = sqlBuilder.query(\n\t\t\tzabbixLocalDB,\n\t\t\tnull,\n\t\t\tnull,\n\t\t\tnull,\n\t\t\tnull,\n\t\t\tnull,\n\t\t\tnull\n\t\t);\n\t\tLog.i(\"ZabbixContentProvider\", \"isCached \"+kind+\"//\"+filter+\"//\"+cur.moveToFirst());\n\t\treturn cur.moveToFirst();\n\t}\n\n\t/**\n\t * public, for the unit test\n\t */\n\tpublic void setCached(String kind, String filter, int lifetime) {\n\t\tCacheData cache = new CacheData();\n\t\tcache.set(CacheData.COLUMN_EXPIRE_DATE, new Date().getTime()/1000 + lifetime);\n\t\tcache.set(CacheData.COLUMN_KIND, kind);\n\t\tif (filter != null) {\n\t\t\tcache.set(CacheData.COLUMN_FILTER, filter);\n\t\t}\n\t\tcache.insert(zabbixLocalDB);\n\t}\n\n\t/**\n\t * updates the progressbar in the gui\n\t * @param i 0..100\n\t */\n\tpublic void showProgress(int i) {\n\t\t// if applicable, transform the progress\n\t\tif (transformProgressStart != 0 && transformProgressEnd != 0) {\n\t\t\ti = (int) (transformProgressStart + (transformProgressEnd-transformProgressStart)*(double)i/100);\n\t\t}\n\n\t\tIntent intent = new Intent(ZabbixContentProvider.CONTENT_PROVIDER_INTENT_ACTION);\n\t\tintent.putExtra(\"flag\", ZabbixContentProvider.INTENT_FLAG_SHOW_PROGRESS);\n\t\tintent.putExtra(\"value\", i);\n\t\tcontext.sendBroadcast(intent);\n\t}\n\n\t/**\n\t * transforms the progress\n\t * @param start 0% => start%\n\t * @param end 100% => end%\n\t */\n\tpublic void transformProgress(int start, int end) {\n\t\ttransformProgressStart = start;\n\t\ttransformProgressEnd = end;\n\t}\n}\n"],
    "c_hash_sni": "df53c588a80d246f2f77494f72b9fc4b285728ad",
    "name_sni": "src/com/inovex/zabbixmobile/api/ZabbixService.java",
    "c_parents_ss": ["2bbdeb660e92821bffb04b3315e354e34764dc43"],
    "c_imports_removed_t": ["<empty>"],
    "p_hash_sni": "2bbdeb660e92821bffb04b3315e354e34764dc43",
    "c_imports_added_t": ["<empty>"],
    "p_methods_t": ["ApplicationData ApplicationItemRelationData ArrayList, String BasicHttpParams BufferedReader CacheData ContentValues CustomSSLSocketFactory Date DefaultHttpClient EventData GraphData GraphItemData HashSet, Long HistoryDetailData HostData HostGroupData HttpAuthorizationRequiredException HttpPost IOException IllegalStateException InputStreamReader Intent ItemData JSONArray JSONObject JsonArrayReader JsonFactory NoAPIAccessException PreconditionFailedException RuntimeException SQLiteQueryBuilder Scheme SchemeRegistry ScreenData ScreenItemData StringBuilder StringEntity ThreadSafeClientConnManager TriggerData UsernamePasswordCredentials X509TrustManager _commitTransactionIfRecommended _endTransaction _queryBuffer _queryStream _startTransaction add addHeader append appendWhere authenticate beginTransaction close contains createJsonParser createSocket d delete endTransaction endsWith equals execute get getBoolean getColumnIndex getContent getCredentialsProvider getCurrentName getDefaultSharedPreferences getDefaultType getEntity getInstance getInt getJSONArray getJSONObject getJsonArray getLong getMessage getParams getReasonPhrase getResources getSocketFactory getStatusCode getStatusLine getString getText getTime i importApplications importEvents importGraphItems importHostGroups importHosts importItems importScreenItems importTriggers inTransaction indexOf init insert isCached isClosed length load matches min moveToFirst moveToNext next nextProperty nextToken nextValueToken parseColor parseDouble parseInt parseLong printStackTrace put putExtra query read register replace replaceAll sendBroadcast set setCached setConnectionTimeout setContentCharset setCredentials setEntity setHostnameVerifier setRedirecting setTables setTransactionSuccessful setVersion showProgress split substring toString trim update"],
    "c_imports_removed_cs": "<empty>",
    "p_imports_t": ["android.database.sqlite.SQLiteQueryBuilder org.apache.http.conn.scheme.SchemeRegistry java.util.HashSet org.apache.http.params.BasicHttpParams android.content.Context org.apache.http.params.HttpParams org.apache.http.conn.scheme.PlainSocketFactory java.util.ArrayList com.inovex.zabbixmobile.model.ItemData com.inovex.zabbixmobile.model.HostData com.inovex.zabbixmobile.model.GraphData com.inovex.zabbixmobile.model.EventData org.apache.http.auth.UsernamePasswordCredentials org.apache.http.params.HttpConnectionParams android.content.SharedPreferences java.security.KeyManagementException org.apache.http.conn.ClientConnectionManager org.codehaus.jackson.JsonFactory org.apache.http.entity.StringEntity java.util.Set org.apache.http.params.HttpProtocolParams com.inovex.zabbixmobile.model.ApplicationItemRelationData com.inovex.zabbixmobile.model.TriggerData org.codehaus.jackson.JsonToken android.database.Cursor java.net.Socket android.content.Intent org.apache.http.protocol.HTTP org.json.JSONException java.net.UnknownHostException com.inovex.zabbixmobile.model.HistoryDetailData org.apache.http.HttpResponse java.security.KeyStore com.inovex.zabbixmobile.ZabbixContentProvider android.preference.PreferenceManager android.util.Log org.json.JSONObject java.security.NoSuchAlgorithmException org.apache.http.client.params.HttpClientParams java.io.IOException org.apache.http.conn.scheme.Scheme org.apache.http.client.methods.HttpPost javax.net.ssl.SSLContext org.apache.http.auth.AuthScope org.apache.http.conn.ssl.SSLSocketFactory java.security.KeyStoreException android.content.ContentValues java.io.InputStreamReader java.util.Date java.security.UnrecoverableKeyException android.graphics.Color org.apache.http.client.ClientProtocolException com.inovex.zabbixmobile.model.GraphItemData org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager org.json.JSONArray com.inovex.zabbixmobile.model.CacheData javax.net.ssl.SSLPeerUnverifiedException com.inovex.zabbixmobile.model.HostGroupData org.codehaus.jackson.JsonParseException java.security.cert.X509Certificate org.apache.http.HttpVersion android.database.sqlite.SQLiteDatabase java.util.List java.security.cert.CertificateException java.io.BufferedReader com.inovex.zabbixmobile.model.ApplicationData com.inovex.zabbixmobile.model.ScreenItemData javax.net.ssl.TrustManager com.inovex.zabbixmobile.model.ScreenData com.inovex.zabbixmobile.R org.codehaus.jackson.JsonParser org.apache.http.impl.client.DefaultHttpClient javax.net.ssl.X509TrustManager"],
    "p_subject_t": ["zabbix 1.4.2"],
    "p_callsites_cs": "<unknown>.set(<unknown>, <unknown>)#org.apache.http.HttpEntity.getContent()#java.lang.String.equals(java.lang.String)#org.json.JSONArray.JSONArray()#<unknown>.set(<unknown>, java.lang.Object)#org.json.JSONObject.put(java.lang.String, java.lang.Integer)#org.json.JSONArray.put(java.lang.String)#org.json.JSONObject.JSONObject()#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.codehaus.jackson.JsonFactory.createJsonParser(java.io.InputStream)#java.lang.String.equals(<unknown>)#org.apache.http.StatusLine.getStatusCode()#<unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>)#org.json.JSONObject.put(java.lang.String, java.lang.String)#android.database.sqlite.SQLiteDatabase.inTransaction()#com.inovex.zabbixmobile.api.ZabbixService._startTransaction()#java.lang.String.equals(java.lang.String)#org.codehaus.jackson.JsonFactory.JsonFactory()#com.inovex.zabbixmobile.api.ZabbixService._endTransaction()#org.json.JSONObject.put(java.lang.String, int)#android.content.ContentValues.ContentValues(int)#org.apache.http.conn.scheme.SchemeRegistry.SchemeRegistry()#<unknown>.insert(android.database.sqlite.SQLiteDatabase)#<unknown>.insert(android.database.sqlite.SQLiteDatabase)#com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject)#com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject)#com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject)#org.json.JSONObject.getJSONObject(java.lang.String)#java.io.InputStreamReader.InputStreamReader(java.io.InputStream)#android.content.Intent.putExtra(java.lang.String, <unknown>)#org.json.JSONArray.length()#java.lang.String.equals(java.lang.String)#<unknown>.set(<unknown>, <unknown>)#java.lang.String.equals(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService.PreconditionFailedException.PreconditionFailedException()#java.lang.StringBuilder.StringBuilder()#android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null)#<unknown>.nextValueToken()#org.json.JSONObject.JSONObject()#org.json.JSONObject.put(java.lang.String, int)#org.json.JSONObject.put(java.lang.String, org.json.JSONArray)#java.lang.String.equals(<unknown>)#<unknown>.get(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService.importTriggers(com.inovex.zabbixmobile.api.JsonArrayReader)#<unknown>.insert(android.database.sqlite.SQLiteDatabase)#android.content.Intent.putExtra(java.lang.String, <unknown>)#java.lang.String.equals(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService.importItems(<unknown>, int, boolean)#com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, java.lang.String, int)#org.json.JSONObject.put(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject)#org.apache.http.conn.scheme.Scheme.Scheme(java.lang.String, org.apache.http.conn.ssl.SSLSocketFactory, int)#org.apache.http.HttpEntity.getContent()#org.codehaus.jackson.JsonParser.close()#java.lang.String.equals(<unknown>)#<unknown>.nextValueToken()#<unknown>.getCurrentName()#org.json.JSONArray.JSONArray(java.util.Set<java.lang.Long>)#<unknown>.nextValueToken()#android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null)#<unknown>.getJsonArray()#com.inovex.zabbixmobile.api.ZabbixService._startTransaction()#org.json.JSONArray.JSONArray()#<unknown>.nextProperty()#java.lang.String.equals(java.lang.String)#android.database.sqlite.SQLiteDatabase.update(<unknown>, android.content.ContentValues, <unknown>, null)#java.util.Set<java.lang.Long>.add(<unknown>)#<unknown>.get(<unknown>)#<unknown>.get(<unknown>)#android.content.ContentValues.put(<unknown>, java.lang.Long)#java.lang.String.equals(java.lang.String)#org.apache.http.StatusLine.getReasonPhrase()#java.lang.RuntimeException.RuntimeException(java.lang.String)#<unknown>.nextProperty()#java.lang.Throwable.printStackTrace()#java.lang.String.equals(<unknown>)#java.lang.Long.parseLong(<unknown>)#org.json.JSONObject.put(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject)#<unknown>.getCurrentName()#android.content.ContentValues.put(<unknown>, java.lang.Long)#org.apache.http.entity.StringEntity.StringEntity(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject)#java.lang.String.equals(<unknown>)#<unknown>.EventData()#<unknown>.next()#<unknown>.set(<unknown>, <unknown>)#com.inovex.zabbixmobile.api.ZabbixService.CustomSSLSocketFactory.CustomSSLSocketFactory(java.security.KeyStore)#com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject)#<unknown>.getCurrentName()#java.util.List<java.lang.String>.add(java.lang.String)#org.json.JSONObject.put(java.lang.String, int)#<unknown>.getText()#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.apache.http.conn.ssl.SSLSocketFactory.setHostnameVerifier(org.apache.http.conn.ssl.X509HostnameVerifier)#<unknown>.set(<unknown>, <unknown>)#<unknown>.getText()#org.json.JSONObject.put(java.lang.String, long)#java.util.Date.Date()#<unknown>.JsonArrayReader(org.codehaus.jackson.JsonParser)#org.json.JSONObject.put(java.lang.String, int)#org.json.JSONObject.put(java.lang.String, int)#<unknown>.set(<unknown>, <unknown>)#com.inovex.zabbixmobile.api.ZabbixService.authenticate()#android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null)#java.lang.String.equals(java.lang.String)#org.apache.http.HttpResponse.getEntity()#org.json.JSONObject.JSONObject()#com.inovex.zabbixmobile.api.ZabbixService._startTransaction()#com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, null, int)#java.io.BufferedReader.read()#org.json.JSONObject.put(java.lang.String, long)#<unknown>.set(<unknown>, <unknown>)#android.database.Cursor.getLong(<unknown>)#java.lang.IllegalStateException.IllegalStateException(java.lang.String)#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.getCurrentName()#android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null)#android.util.Log.d(java.lang.String, java.lang.String)#<unknown>.set(<unknown>, <unknown>)#java.lang.String.equals(<unknown>)#org.json.JSONObject.put(java.lang.String, java.lang.String)#android.database.Cursor.moveToFirst()#com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, java.lang.String)#android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null)#java.lang.String.equals(java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, java.lang.String)#<unknown>.getText()#org.json.JSONObject.put(java.lang.String, java.lang.String)#android.content.Intent.putExtra(java.lang.String, <unknown>)#<unknown>.getCurrentName()#android.content.res.Resources.getString(<unknown>)#android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null)#android.database.sqlite.SQLiteDatabase.setTransactionSuccessful()#<unknown>.next()#<unknown>.getText()#<unknown>.nextValueToken()#com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject)#com.inovex.zabbixmobile.api.ZabbixService.showProgress(<unknown>)#java.io.IOException.IOException(java.lang.String)#<unknown>.getCurrentName()#android.util.Log.d(java.lang.String, java.lang.String)#java.lang.Object.toString()#org.json.JSONObject.toString()#<unknown>.set(<unknown>, <unknown>)#org.json.JSONArray.JSONArray()#org.apache.http.HttpResponse.getStatusLine()#org.json.JSONArray.JSONArray()#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.apache.http.impl.client.DefaultHttpClient.DefaultHttpClient()#org.json.JSONObject.put(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject)#org.apache.http.HttpResponse.getStatusLine()#java.lang.String.equals(<unknown>)#java.util.Date.Date()#android.util.Log.i(java.lang.String, java.lang.String)#android.content.Context.getResources()#org.apache.http.impl.client.CloseableHttpClient.execute(org.apache.http.client.methods.HttpPost)#com.inovex.zabbixmobile.api.ZabbixService._commitTransactionIfRecommended()#com.inovex.zabbixmobile.api.ZabbixService.importHostGroups(<unknown>)#android.content.Context.sendBroadcast(android.content.Intent)#android.content.Context.sendBroadcast(android.content.Intent)#com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, null, int)#java.lang.Integer.parseInt(<unknown>)#<unknown>.ApplicationData()#com.inovex.zabbixmobile.api.ZabbixService.NoAPIAccessException.NoAPIAccessException()#com.inovex.zabbixmobile.api.ZabbixService._commitTransactionIfRecommended()#<unknown>.getJsonArray()#org.apache.http.message.AbstractHttpMessage.addHeader(java.lang.String, java.lang.String)#org.json.JSONObject.put(java.lang.String, int)#java.lang.String.replace(java.lang.String, java.lang.String)#org.json.JSONArray.JSONArray()#<unknown>.set(<unknown>, <unknown>)#org.json.JSONObject.put(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService.importTriggers(com.inovex.zabbixmobile.api.JsonArrayReader)#<unknown>.set(<unknown>, <unknown>)#org.json.JSONArray.JSONArray()#java.lang.String.equals(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, java.lang.String, int)#<unknown>.nextProperty()#<unknown>.set(<unknown>, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject)#org.json.JSONObject.JSONObject()#java.lang.String.contains(java.lang.String)#org.apache.http.client.methods.HttpEntityEnclosingRequestBase.setEntity(org.apache.http.entity.StringEntity)#org.json.JSONObject.put(java.lang.String, int)#<unknown>.HostGroupData()#<unknown>.HostGroupData()#<unknown>.nextProperty()#java.lang.Long.parseLong(<unknown>)#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.json.JSONObject.put(java.lang.String, org.json.JSONArray)#org.json.JSONObject.put(java.lang.String, java.lang.Integer)#<unknown>.set(<unknown>, <unknown>)#<unknown>.close()#com.inovex.zabbixmobile.api.ZabbixService.importEvents(com.inovex.zabbixmobile.api.JsonArrayReader, int)#<unknown>.set(<unknown>, <unknown>)#org.json.JSONObject.put(java.lang.String, org.json.JSONArray)#java.lang.String.equals(java.lang.String)#android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null)#<unknown>.next()#org.json.JSONObject.toString()#java.lang.String.equals(<unknown>)#java.lang.String.equals(<unknown>)#android.database.sqlite.SQLiteDatabase.query(<unknown>, null, <unknown>, null, null, null, null)#<unknown>.set(<unknown>, <unknown>)#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.CacheData()#<unknown>.getText()#com.inovex.zabbixmobile.api.ZabbixService._startTransaction()#<unknown>.set(<unknown>, <unknown>)#com.inovex.zabbixmobile.api.ZabbixService._endTransaction()#<unknown>.set(<unknown>, int)#<unknown>.getJsonArray()#java.lang.String.equals(<unknown>)#java.util.Date.getTime()#java.lang.String.equals(java.lang.String)#org.json.JSONObject.put(java.lang.String, int)#<unknown>.set(<unknown>, <unknown>)#java.lang.Integer.parseInt(<unknown>)#org.codehaus.jackson.JsonParser.getCurrentName()#<unknown>.nextProperty()#com.inovex.zabbixmobile.api.ZabbixService._endTransaction()#java.lang.String.equals(<unknown>)#org.json.JSONObject.put(java.lang.String, int)#android.database.sqlite.SQLiteDatabase.update(<unknown>, android.content.ContentValues, <unknown>, null)#com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject)#com.inovex.zabbixmobile.api.ZabbixService._endTransaction()#java.lang.StringBuilder.append(char)#<unknown>.set(<unknown>, <unknown>)#<unknown>.get(<unknown>)#<unknown>.set(<unknown>, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject)#org.json.JSONObject.put(java.lang.String, java.lang.String)#android.database.Cursor.getLong(<unknown>)#java.lang.String.equals(<unknown>)#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.json.JSONObject.JSONObject()#org.apache.http.params.HttpProtocolParams.setVersion(org.apache.http.params.HttpParams, org.apache.http.HttpVersion)#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.HistoryDetailData()#com.inovex.zabbixmobile.api.ZabbixService._startTransaction()#<unknown>.next()#<unknown>.set(<unknown>, <unknown>)#<unknown>.nextValueToken()#org.json.JSONObject.JSONObject()#java.lang.String.equals(<unknown>)#java.lang.Long.parseLong(<unknown>)#java.lang.Integer.parseInt(<unknown>)#org.apache.http.client.methods.HttpPost.HttpPost(java.lang.String)#org.apache.http.StatusLine.getStatusCode()#<unknown>.set(<unknown>, int)#java.lang.String.equals(java.lang.String)#java.lang.String.equals(<unknown>)#java.lang.String.equals(<unknown>)#<unknown>.getCurrentName()#java.util.ArrayList<java.lang.String>.ArrayList, String()#com.inovex.zabbixmobile.api.ZabbixService._startTransaction()#org.json.JSONArray.put(java.lang.String)#<unknown>.nextValueToken()#org.json.JSONArray.put(java.lang.String)#<unknown>.set(<unknown>, <unknown>)#org.json.JSONObject.put(java.lang.String, int)#com.inovex.zabbixmobile.api.ZabbixService.importItems(<unknown>, int, boolean)#org.json.JSONObject.JSONObject()#com.inovex.zabbixmobile.api.ZabbixService.importTriggers(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService.importGraphItems(<unknown>)#<unknown>.ScreenItemData()#<unknown>.set(<unknown>, <unknown>)#<unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>)#android.preference.PreferenceManager.getDefaultSharedPreferences(android.content.Context)#org.json.JSONObject.length()#<unknown>.nextValueToken()#java.util.HashSet<java.lang.Long>.HashSet, Long()#java.lang.String.equals(java.lang.String)#android.content.SharedPreferences.getBoolean(java.lang.String, boolean)#<unknown>.insert(android.database.sqlite.SQLiteDatabase)#org.json.JSONObject.put(java.lang.String, org.json.JSONArray)#<unknown>.close()#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.next()#android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null)#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.json.JSONObject.getString(java.lang.String)#<unknown>.set(<unknown>, <unknown>)#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.close()#org.json.JSONObject.getString(java.lang.String)#java.lang.String.equals(java.lang.String)#java.lang.Long.parseLong(<unknown>)#org.codehaus.jackson.JsonParser.isClosed()#org.json.JSONObject.put(java.lang.String, int)#org.json.JSONObject.put(java.lang.String, org.json.JSONArray)#org.json.JSONObject.put(java.lang.String, long)#<unknown>.close()#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.set(<unknown>, long)#org.json.JSONObject.put(java.lang.String, org.json.JSONObject)#<unknown>.set(<unknown>, <unknown>)#com.inovex.zabbixmobile.api.ZabbixService._endTransaction()#java.lang.String.replaceAll(java.lang.String, java.lang.String)#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.nextValueToken()#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.apache.http.params.BasicHttpParams.BasicHttpParams()#android.database.sqlite.SQLiteDatabase.beginTransaction()#com.inovex.zabbixmobile.api.ZabbixService._commitTransactionIfRecommended()#com.inovex.zabbixmobile.api.ZabbixService._endTransaction()#java.lang.String.equals(<unknown>)#<unknown>.insert(android.database.sqlite.SQLiteDatabase)#<unknown>.insert(android.database.sqlite.SQLiteDatabase)#org.json.JSONObject.put(java.lang.String, int)#<unknown>.next()#com.inovex.zabbixmobile.api.ZabbixService._startTransaction()#<unknown>.getJsonArray()#android.content.SharedPreferences.getString(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, null, int)#javax.net.SocketFactory.createSocket()#java.lang.Long.parseLong(<unknown>)#org.apache.http.client.CredentialsProvider.setCredentials(org.apache.http.auth.AuthScope, org.apache.http.auth.UsernamePasswordCredentials)#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.json.JSONObject.put(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService.importTriggers(com.inovex.zabbixmobile.api.JsonArrayReader)#<unknown>.next()#com.inovex.zabbixmobile.api.ZabbixService.HttpAuthorizationRequiredException.HttpAuthorizationRequiredException()#android.database.sqlite.SQLiteQueryBuilder.query(android.database.sqlite.SQLiteDatabase, null, null, null, null, null, null)#java.util.Date.Date()#com.inovex.zabbixmobile.api.ZabbixService._commitTransactionIfRecommended()#<unknown>.set(<unknown>, java.lang.String)#org.json.JSONObject.JSONObject()#<unknown>.next()#<unknown>.set(<unknown>, <unknown>)#<unknown>.set(<unknown>, <unknown>)#com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject)#java.lang.String.equals(java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, java.lang.String)#java.lang.String.indexOf(char)#android.database.sqlite.SQLiteDatabase.query(<unknown>, null, <unknown>, null, null, null, null)#android.preference.PreferenceManager.getDefaultSharedPreferences(android.content.Context)#<unknown>.nextProperty()#org.apache.http.impl.client.CloseableHttpClient.execute(org.apache.http.client.methods.HttpPost)#<unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>)#com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, java.lang.String)#org.json.JSONObject.JSONObject()#<unknown>.close()#android.database.Cursor.getColumnIndex(<unknown>)#android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null)#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.nextProperty()#org.apache.http.conn.scheme.PlainSocketFactory.getSocketFactory()#com.inovex.zabbixmobile.api.ZabbixService._commitTransactionIfRecommended()#com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject)#java.lang.StringBuilder.toString()#org.json.JSONObject.put(java.lang.String, java.lang.String)#android.database.sqlite.SQLiteQueryBuilder.SQLiteQueryBuilder()#<unknown>.insert(android.database.sqlite.SQLiteDatabase)#org.apache.http.conn.scheme.SchemeRegistry.register(org.apache.http.conn.scheme.Scheme)#<unknown>.set(<unknown>, <unknown>)#org.json.JSONObject.JSONObject(java.lang.String)#java.lang.String.equals(<unknown>)#<unknown>.set(<unknown>, <unknown>)#<unknown>.set(<unknown>, <unknown>)#java.lang.IllegalStateException.IllegalStateException(java.lang.String)#java.lang.Double.parseDouble(<unknown>)#android.content.ContentValues.put(<unknown>, java.lang.Long)#android.database.sqlite.SQLiteQueryBuilder.appendWhere(<unknown>)#org.apache.http.conn.scheme.SchemeRegistry.register(org.apache.http.conn.scheme.Scheme)#org.json.JSONObject.getInt(java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService.importHosts(<unknown>, null)#org.json.JSONObject.put(java.lang.String, boolean)#java.lang.Long.parseLong(<unknown>)#java.lang.String.indexOf(char)#android.database.sqlite.SQLiteQueryBuilder.appendWhere(<unknown>)#java.lang.String.length()#java.lang.String.equals(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject)#<unknown>.nextProperty()#<unknown>.next()#android.content.SharedPreferences.getString(java.lang.String, java.lang.String)#<unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>)#<unknown>.GraphData()#org.json.JSONArray.put(java.lang.String)#org.apache.http.impl.client.AbstractHttpClient.getParams()#<unknown>.set(<unknown>, long)#<unknown>.set(<unknown>, <unknown>)#org.json.JSONObject.getJSONObject(java.lang.String)#org.json.JSONObject.put(java.lang.String, java.lang.String)#java.lang.String.equals(java.lang.String)#org.json.JSONObject.getString(java.lang.String)#java.lang.String.equals(<unknown>)#java.lang.String.equals(<unknown>)#<unknown>.getCurrentName()#java.lang.String.equals(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService.showProgress(int)#<unknown>.getCurrentName()#com.inovex.zabbixmobile.api.ZabbixService.importHosts(<unknown>, null)#com.inovex.zabbixmobile.api.ZabbixService.importItems(com.inovex.zabbixmobile.api.JsonArrayReader, int, boolean)#com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, java.lang.String, int)#org.json.JSONObject.put(java.lang.String, int)#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.close()#java.lang.String.replace(java.lang.String, java.lang.String)#java.lang.String.equals(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject)#com.inovex.zabbixmobile.api.ZabbixService._endTransaction()#android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null)#android.database.Cursor.moveToNext()#<unknown>.HostData()#<unknown>.set(<unknown>, long)#<unknown>.next()#com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject)#android.database.sqlite.SQLiteQueryBuilder.setTables(<unknown>)#java.util.Date.getTime()#org.json.JSONObject.put(java.lang.String, long)#android.content.ContentValues.ContentValues(int)#java.lang.Long.parseLong(<unknown>)#org.apache.http.HttpResponse.getEntity()#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.getText()#java.lang.String.equals(java.lang.String)#<unknown>.set(<unknown>, <unknown>)#<unknown>.set(<unknown>, <unknown>)#javax.net.ssl.SSLContext.init(null, javax.net.ssl.TrustManager[], null)#android.database.sqlite.SQLiteDatabase.endTransaction()#java.lang.String.equals(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, java.lang.String)#<unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>)#<unknown>.next()#<unknown>.close()#<unknown>.insert(android.database.sqlite.SQLiteDatabase)#org.json.JSONObject.put(java.lang.String, java.lang.String)#java.lang.Throwable.getMessage()#java.lang.String.equals(<unknown>)#java.lang.String.equals(<unknown>)#<unknown>.set(<unknown>, <unknown>)#com.inovex.zabbixmobile.api.ZabbixService._endTransaction()#javax.net.ssl.SSLContext.getSocketFactory()#org.json.JSONObject.JSONObject()#android.content.Context.getResources()#org.json.JSONObject.put(java.lang.String, int)#com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, null)#com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, java.lang.String, int)#java.lang.String.matches(java.lang.String)#<unknown>.set(<unknown>, <unknown>)#org.json.JSONArray.put(java.lang.String)#<unknown>.set(<unknown>, <unknown>)#android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null)#android.content.Context.sendBroadcast(android.content.Intent)#org.json.JSONObject.getJSONObject(java.lang.String)#<unknown>.get(<unknown>)#android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null)#java.lang.String.equals(<unknown>)#android.content.SharedPreferences.getBoolean(java.lang.String, boolean)#java.lang.Throwable.printStackTrace()#android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null)#org.json.JSONObject.put(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService._startTransaction()#android.content.Intent.putExtra(java.lang.String, int)#org.json.JSONObject.JSONObject()#<unknown>.getText()#com.inovex.zabbixmobile.api.ZabbixService.importHosts(com.inovex.zabbixmobile.api.JsonArrayReader, int)#com.inovex.zabbixmobile.api.ZabbixService._endTransaction()#org.apache.http.client.methods.HttpPost.HttpPost(java.lang.String)#android.content.SharedPreferences.getString(java.lang.String, java.lang.String)#<unknown>.GraphItemData()#com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, java.lang.String, int)#<unknown>.nextValueToken()#com.inovex.zabbixmobile.api.ZabbixService.importTriggers(com.inovex.zabbixmobile.api.JsonArrayReader)#org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager.ThreadSafeClientConnManager(org.apache.http.params.HttpParams, org.apache.http.conn.scheme.SchemeRegistry)#<unknown>.ApplicationItemRelationData()#java.lang.Object.toString()#android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null)#org.json.JSONArray.JSONArray()#java.lang.String.equals(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService._startTransaction()#org.json.JSONObject.put(java.lang.String, org.json.JSONArray)#com.inovex.zabbixmobile.api.ZabbixService.importApplications(int, int, <unknown>)#<unknown>.set(<unknown>, int)#org.json.JSONObject.put(java.lang.String, int)#com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, java.lang.String, int)#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.json.JSONObject.JSONObject()#java.lang.Math.min(int, int)#com.inovex.zabbixmobile.api.ZabbixService.showProgress(<unknown>)#java.lang.String.equals(java.lang.String)#android.content.Intent.Intent(<unknown>)#java.lang.String.equals(<unknown>)#org.json.JSONObject.put(java.lang.String, int)#javax.net.ssl.SSLContext.getInstance(java.lang.String)#android.content.res.Resources.getString(<unknown>)#org.json.JSONObject.JSONObject()#android.content.Intent.Intent(<unknown>)#java.lang.String.equals(<unknown>)#<unknown>.nextProperty()#javax.net.ssl.SSLSocketFactory.createSocket(java.net.Socket, java.lang.String, int, boolean)#org.json.JSONObject.put(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject)#<unknown>.get(<unknown>)#java.io.IOException.IOException(java.lang.String)#java.lang.String.trim()#java.lang.String.contains(java.lang.String)#org.apache.http.entity.StringEntity.StringEntity(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService._endTransaction()#.X509TrustManager()#com.inovex.zabbixmobile.api.ZabbixService.importEvents(com.inovex.zabbixmobile.api.JsonArrayReader, null)#com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject)#android.graphics.Color.parseColor(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, null)#org.json.JSONObject.getJSONArray(java.lang.String)#org.apache.http.client.params.HttpClientParams.setRedirecting(org.apache.http.params.HttpParams, boolean)#com.inovex.zabbixmobile.api.ZabbixService._startTransaction()#<unknown>.getCurrentName()#java.lang.String.equals(<unknown>)#java.lang.Long.parseLong(<unknown>)#java.lang.Long.parseLong(<unknown>)#<unknown>.getText()#java.util.Date.getTime()#android.content.Intent.putExtra(java.lang.String, <unknown>)#android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null)#<unknown>.get(<unknown>)#android.database.Cursor.moveToFirst()#org.apache.http.client.methods.HttpEntityEnclosingRequestBase.setEntity(org.apache.http.entity.StringEntity)#com.inovex.zabbixmobile.api.ZabbixService._commitTransactionIfRecommended()#com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, null)#android.database.sqlite.SQLiteQueryBuilder.appendWhere(<unknown>)#org.apache.http.auth.UsernamePasswordCredentials.UsernamePasswordCredentials(java.lang.String, java.lang.String)#java.util.Date.getTime()#java.lang.String.equals(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService._endTransaction()#org.json.JSONObject.put(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService.authenticate()#java.lang.String.equals(<unknown>)#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.json.JSONObject.put(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService.NoAPIAccessException.NoAPIAccessException()#org.json.JSONArray.put(long)#com.inovex.zabbixmobile.api.ZabbixService._endTransaction()#android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null)#<unknown>.getJsonArray()#<unknown>.ScreenData()#java.util.Date.Date()#java.util.Date.Date()#<unknown>.set(<unknown>, long)#<unknown>.getCurrentName()#org.json.JSONObject.put(java.lang.String, org.json.JSONArray)#<unknown>.set(<unknown>, long)#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.apache.http.params.HttpConnectionParams.setConnectionTimeout(org.apache.http.params.HttpParams, int)#org.json.JSONArray.length()#<unknown>.set(<unknown>, java.lang.String)#<unknown>.set(<unknown>, long)#java.util.Date.getTime()#<unknown>.set(<unknown>, <unknown>)#<unknown>.set(<unknown>, <unknown>)#org.json.JSONArray.put(java.lang.String)#java.lang.String.equals(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService.importScreenItems(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService.HttpAuthorizationRequiredException.HttpAuthorizationRequiredException()#<unknown>.getText()#org.json.JSONObject.put(java.lang.String, org.json.JSONArray)#org.json.JSONObject.JSONObject()#<unknown>.set(<unknown>, <unknown>)#com.inovex.zabbixmobile.api.ZabbixService.importHostGroups(<unknown>)#org.json.JSONObject.toString()#java.lang.Integer.parseInt(<unknown>)#java.lang.String.equals(java.lang.String)#org.apache.http.params.HttpProtocolParams.setContentCharset(org.apache.http.params.HttpParams, java.lang.String)#<unknown>.get(<unknown>)#android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null)#java.lang.String.equals(<unknown>)#<unknown>.set(<unknown>, <unknown>)#<unknown>.nextValueToken()#<unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>)#org.json.JSONObject.put(java.lang.String, org.json.JSONArray)#org.json.JSONObject.put(java.lang.String, java.lang.Integer)#<unknown>.getText()#<unknown>.set(<unknown>, <unknown>)#org.apache.http.message.AbstractHttpMessage.addHeader(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject)#org.json.JSONObject.getJSONArray(java.lang.String)#java.security.KeyStore.load(null, null)#java.lang.String.replace(java.lang.String, java.lang.String)#java.lang.Long.parseLong(<unknown>)#org.json.JSONObject.toString()#android.content.SharedPreferences.getString(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, java.lang.String)#<unknown>.TriggerData()#android.content.SharedPreferences.getString(java.lang.String, java.lang.String)#android.content.Intent.Intent(<unknown>)#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.apache.http.impl.client.AbstractHttpClient.getCredentialsProvider()#<unknown>.set(<unknown>, <unknown>)#java.io.IOException.IOException(java.lang.String)#java.lang.String.trim()#org.json.JSONObject.put(java.lang.String, org.json.JSONArray)#java.lang.String.split(java.lang.String)#java.lang.String.equals(java.lang.String)#java.lang.String.endsWith(java.lang.String)#<unknown>.set(<unknown>, int)#com.inovex.zabbixmobile.api.ZabbixService.showProgress(int)#<unknown>.ItemData()#org.json.JSONObject.put(java.lang.String, int)#<unknown>.set(<unknown>, <unknown>)#org.codehaus.jackson.JsonParser.getText()#android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null)#org.apache.http.impl.client.DefaultHttpClient.DefaultHttpClient(org.apache.http.conn.ClientConnectionManager, org.apache.http.params.HttpParams)#<unknown>.close()#java.lang.IllegalStateException.IllegalStateException(java.lang.String)#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.codehaus.jackson.JsonParser.nextToken()#android.database.Cursor.getColumnIndex(<unknown>)#org.json.JSONObject.put(java.lang.String, org.json.JSONArray)#<unknown>.nextValueToken()#com.inovex.zabbixmobile.api.ZabbixService._startTransaction()#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.set(<unknown>, java.lang.String)#java.lang.String.substring(int, int)#java.lang.Long.parseLong(<unknown>)#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.json.JSONObject.getInt(java.lang.String)#java.lang.String.equals(java.lang.String)#<unknown>.set(<unknown>, <unknown>)#<unknown>.set(<unknown>, <unknown>)#java.security.KeyStore.getInstance(java.lang.String)#java.lang.Integer.parseInt(<unknown>)#java.lang.String.equals(java.lang.String)#<unknown>.nextProperty()#android.content.Intent.putExtra(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, null)#<unknown>.set(<unknown>, int)#java.io.BufferedReader.BufferedReader(java.io.InputStreamReader)#java.security.KeyStore.getDefaultType()#java.lang.String.equals(<unknown>)#<unknown>.getText()#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.set(<unknown>, java.lang.Object)#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.insert(android.database.sqlite.SQLiteDatabase)#<unknown>.nextProperty()#com.inovex.zabbixmobile.api.ZabbixService._startTransaction()#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.close()#<unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>)#org.json.JSONObject.put(java.lang.String, long)#com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, null, int)#<unknown>.getJsonArray()#<unknown>.set(<unknown>, <unknown>)#java.lang.String.equals(<unknown>)#org.apache.http.conn.scheme.Scheme.Scheme(java.lang.String, org.apache.http.conn.scheme.PlainSocketFactory, int)#org.json.JSONObject.put(java.lang.String, java.lang.String)#java.lang.String.equals(<unknown>)",
    "p_callsites_t": ["<unknown>.set(<unknown>, <unknown>) org.apache.http.HttpEntity.getContent() java.lang.String.equals(java.lang.String) org.json.JSONArray.JSONArray() <unknown>.set(<unknown>, java.lang.Object) org.json.JSONObject.put(java.lang.String, java.lang.Integer) org.json.JSONArray.put(java.lang.String) org.json.JSONObject.JSONObject() org.json.JSONObject.put(java.lang.String, java.lang.String) org.codehaus.jackson.JsonFactory.createJsonParser(java.io.InputStream) java.lang.String.equals(<unknown>) org.apache.http.StatusLine.getStatusCode() <unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>) org.json.JSONObject.put(java.lang.String, java.lang.String) android.database.sqlite.SQLiteDatabase.inTransaction() com.inovex.zabbixmobile.api.ZabbixService._startTransaction() java.lang.String.equals(java.lang.String) org.codehaus.jackson.JsonFactory.JsonFactory() com.inovex.zabbixmobile.api.ZabbixService._endTransaction() org.json.JSONObject.put(java.lang.String, int) android.content.ContentValues.ContentValues(int) org.apache.http.conn.scheme.SchemeRegistry.SchemeRegistry() <unknown>.insert(android.database.sqlite.SQLiteDatabase) <unknown>.insert(android.database.sqlite.SQLiteDatabase) com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject) com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject) com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject) org.json.JSONObject.getJSONObject(java.lang.String) java.io.InputStreamReader.InputStreamReader(java.io.InputStream) android.content.Intent.putExtra(java.lang.String, <unknown>) org.json.JSONArray.length() java.lang.String.equals(java.lang.String) <unknown>.set(<unknown>, <unknown>) java.lang.String.equals(<unknown>) com.inovex.zabbixmobile.api.ZabbixService.PreconditionFailedException.PreconditionFailedException() java.lang.StringBuilder.StringBuilder() android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null) <unknown>.nextValueToken() org.json.JSONObject.JSONObject() org.json.JSONObject.put(java.lang.String, int) org.json.JSONObject.put(java.lang.String, org.json.JSONArray) java.lang.String.equals(<unknown>) <unknown>.get(<unknown>) com.inovex.zabbixmobile.api.ZabbixService.importTriggers(com.inovex.zabbixmobile.api.JsonArrayReader) <unknown>.insert(android.database.sqlite.SQLiteDatabase) android.content.Intent.putExtra(java.lang.String, <unknown>) java.lang.String.equals(<unknown>) com.inovex.zabbixmobile.api.ZabbixService.importItems(<unknown>, int, boolean) com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, java.lang.String, int) org.json.JSONObject.put(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject) org.apache.http.conn.scheme.Scheme.Scheme(java.lang.String, org.apache.http.conn.ssl.SSLSocketFactory, int) org.apache.http.HttpEntity.getContent() org.codehaus.jackson.JsonParser.close() java.lang.String.equals(<unknown>) <unknown>.nextValueToken() <unknown>.getCurrentName() org.json.JSONArray.JSONArray(java.util.Set<java.lang.Long>) <unknown>.nextValueToken() android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null) <unknown>.getJsonArray() com.inovex.zabbixmobile.api.ZabbixService._startTransaction() org.json.JSONArray.JSONArray() <unknown>.nextProperty() java.lang.String.equals(java.lang.String) android.database.sqlite.SQLiteDatabase.update(<unknown>, android.content.ContentValues, <unknown>, null) java.util.Set<java.lang.Long>.add(<unknown>) <unknown>.get(<unknown>) <unknown>.get(<unknown>) android.content.ContentValues.put(<unknown>, java.lang.Long) java.lang.String.equals(java.lang.String) org.apache.http.StatusLine.getReasonPhrase() java.lang.RuntimeException.RuntimeException(java.lang.String) <unknown>.nextProperty() java.lang.Throwable.printStackTrace() java.lang.String.equals(<unknown>) java.lang.Long.parseLong(<unknown>) org.json.JSONObject.put(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject) <unknown>.getCurrentName() android.content.ContentValues.put(<unknown>, java.lang.Long) org.apache.http.entity.StringEntity.StringEntity(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject) java.lang.String.equals(<unknown>) <unknown>.EventData() <unknown>.next() <unknown>.set(<unknown>, <unknown>) com.inovex.zabbixmobile.api.ZabbixService.CustomSSLSocketFactory.CustomSSLSocketFactory(java.security.KeyStore) com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject) <unknown>.getCurrentName() java.util.List<java.lang.String>.add(java.lang.String) org.json.JSONObject.put(java.lang.String, int) <unknown>.getText() org.json.JSONObject.put(java.lang.String, java.lang.String) org.apache.http.conn.ssl.SSLSocketFactory.setHostnameVerifier(org.apache.http.conn.ssl.X509HostnameVerifier) <unknown>.set(<unknown>, <unknown>) <unknown>.getText() org.json.JSONObject.put(java.lang.String, long) java.util.Date.Date() <unknown>.JsonArrayReader(org.codehaus.jackson.JsonParser) org.json.JSONObject.put(java.lang.String, int) org.json.JSONObject.put(java.lang.String, int) <unknown>.set(<unknown>, <unknown>) com.inovex.zabbixmobile.api.ZabbixService.authenticate() android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null) java.lang.String.equals(java.lang.String) org.apache.http.HttpResponse.getEntity() org.json.JSONObject.JSONObject() com.inovex.zabbixmobile.api.ZabbixService._startTransaction() com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, null, int) java.io.BufferedReader.read() org.json.JSONObject.put(java.lang.String, long) <unknown>.set(<unknown>, <unknown>) android.database.Cursor.getLong(<unknown>) java.lang.IllegalStateException.IllegalStateException(java.lang.String) org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.getCurrentName() android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null) android.util.Log.d(java.lang.String, java.lang.String) <unknown>.set(<unknown>, <unknown>) java.lang.String.equals(<unknown>) org.json.JSONObject.put(java.lang.String, java.lang.String) android.database.Cursor.moveToFirst() com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, java.lang.String) android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null) java.lang.String.equals(java.lang.String) com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, java.lang.String) <unknown>.getText() org.json.JSONObject.put(java.lang.String, java.lang.String) android.content.Intent.putExtra(java.lang.String, <unknown>) <unknown>.getCurrentName() android.content.res.Resources.getString(<unknown>) android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null) android.database.sqlite.SQLiteDatabase.setTransactionSuccessful() <unknown>.next() <unknown>.getText() <unknown>.nextValueToken() com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject) com.inovex.zabbixmobile.api.ZabbixService.showProgress(<unknown>) java.io.IOException.IOException(java.lang.String) <unknown>.getCurrentName() android.util.Log.d(java.lang.String, java.lang.String) java.lang.Object.toString() org.json.JSONObject.toString() <unknown>.set(<unknown>, <unknown>) org.json.JSONArray.JSONArray() org.apache.http.HttpResponse.getStatusLine() org.json.JSONArray.JSONArray() org.json.JSONObject.put(java.lang.String, java.lang.String) org.apache.http.impl.client.DefaultHttpClient.DefaultHttpClient() org.json.JSONObject.put(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject) org.apache.http.HttpResponse.getStatusLine() java.lang.String.equals(<unknown>) java.util.Date.Date() android.util.Log.i(java.lang.String, java.lang.String) android.content.Context.getResources() org.apache.http.impl.client.CloseableHttpClient.execute(org.apache.http.client.methods.HttpPost) com.inovex.zabbixmobile.api.ZabbixService._commitTransactionIfRecommended() com.inovex.zabbixmobile.api.ZabbixService.importHostGroups(<unknown>) android.content.Context.sendBroadcast(android.content.Intent) android.content.Context.sendBroadcast(android.content.Intent) com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, null, int) java.lang.Integer.parseInt(<unknown>) <unknown>.ApplicationData() com.inovex.zabbixmobile.api.ZabbixService.NoAPIAccessException.NoAPIAccessException() com.inovex.zabbixmobile.api.ZabbixService._commitTransactionIfRecommended() <unknown>.getJsonArray() org.apache.http.message.AbstractHttpMessage.addHeader(java.lang.String, java.lang.String) org.json.JSONObject.put(java.lang.String, int) java.lang.String.replace(java.lang.String, java.lang.String) org.json.JSONArray.JSONArray() <unknown>.set(<unknown>, <unknown>) org.json.JSONObject.put(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService.importTriggers(com.inovex.zabbixmobile.api.JsonArrayReader) <unknown>.set(<unknown>, <unknown>) org.json.JSONArray.JSONArray() java.lang.String.equals(<unknown>) com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, java.lang.String, int) <unknown>.nextProperty() <unknown>.set(<unknown>, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject) org.json.JSONObject.JSONObject() java.lang.String.contains(java.lang.String) org.apache.http.client.methods.HttpEntityEnclosingRequestBase.setEntity(org.apache.http.entity.StringEntity) org.json.JSONObject.put(java.lang.String, int) <unknown>.HostGroupData() <unknown>.HostGroupData() <unknown>.nextProperty() java.lang.Long.parseLong(<unknown>) org.json.JSONObject.put(java.lang.String, java.lang.String) org.json.JSONObject.put(java.lang.String, org.json.JSONArray) org.json.JSONObject.put(java.lang.String, java.lang.Integer) <unknown>.set(<unknown>, <unknown>) <unknown>.close() com.inovex.zabbixmobile.api.ZabbixService.importEvents(com.inovex.zabbixmobile.api.JsonArrayReader, int) <unknown>.set(<unknown>, <unknown>) org.json.JSONObject.put(java.lang.String, org.json.JSONArray) java.lang.String.equals(java.lang.String) android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null) <unknown>.next() org.json.JSONObject.toString() java.lang.String.equals(<unknown>) java.lang.String.equals(<unknown>) android.database.sqlite.SQLiteDatabase.query(<unknown>, null, <unknown>, null, null, null, null) <unknown>.set(<unknown>, <unknown>) org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.CacheData() <unknown>.getText() com.inovex.zabbixmobile.api.ZabbixService._startTransaction() <unknown>.set(<unknown>, <unknown>) com.inovex.zabbixmobile.api.ZabbixService._endTransaction() <unknown>.set(<unknown>, int) <unknown>.getJsonArray() java.lang.String.equals(<unknown>) java.util.Date.getTime() java.lang.String.equals(java.lang.String) org.json.JSONObject.put(java.lang.String, int) <unknown>.set(<unknown>, <unknown>) java.lang.Integer.parseInt(<unknown>) org.codehaus.jackson.JsonParser.getCurrentName() <unknown>.nextProperty() com.inovex.zabbixmobile.api.ZabbixService._endTransaction() java.lang.String.equals(<unknown>) org.json.JSONObject.put(java.lang.String, int) android.database.sqlite.SQLiteDatabase.update(<unknown>, android.content.ContentValues, <unknown>, null) com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject) com.inovex.zabbixmobile.api.ZabbixService._endTransaction() java.lang.StringBuilder.append(char) <unknown>.set(<unknown>, <unknown>) <unknown>.get(<unknown>) <unknown>.set(<unknown>, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject) org.json.JSONObject.put(java.lang.String, java.lang.String) android.database.Cursor.getLong(<unknown>) java.lang.String.equals(<unknown>) org.json.JSONObject.put(java.lang.String, java.lang.String) org.json.JSONObject.JSONObject() org.apache.http.params.HttpProtocolParams.setVersion(org.apache.http.params.HttpParams, org.apache.http.HttpVersion) org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.HistoryDetailData() com.inovex.zabbixmobile.api.ZabbixService._startTransaction() <unknown>.next() <unknown>.set(<unknown>, <unknown>) <unknown>.nextValueToken() org.json.JSONObject.JSONObject() java.lang.String.equals(<unknown>) java.lang.Long.parseLong(<unknown>) java.lang.Integer.parseInt(<unknown>) org.apache.http.client.methods.HttpPost.HttpPost(java.lang.String) org.apache.http.StatusLine.getStatusCode() <unknown>.set(<unknown>, int) java.lang.String.equals(java.lang.String) java.lang.String.equals(<unknown>) java.lang.String.equals(<unknown>) <unknown>.getCurrentName() java.util.ArrayList<java.lang.String>.ArrayList, String() com.inovex.zabbixmobile.api.ZabbixService._startTransaction() org.json.JSONArray.put(java.lang.String) <unknown>.nextValueToken() org.json.JSONArray.put(java.lang.String) <unknown>.set(<unknown>, <unknown>) org.json.JSONObject.put(java.lang.String, int) com.inovex.zabbixmobile.api.ZabbixService.importItems(<unknown>, int, boolean) org.json.JSONObject.JSONObject() com.inovex.zabbixmobile.api.ZabbixService.importTriggers(<unknown>) com.inovex.zabbixmobile.api.ZabbixService.importGraphItems(<unknown>) <unknown>.ScreenItemData() <unknown>.set(<unknown>, <unknown>) <unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>) android.preference.PreferenceManager.getDefaultSharedPreferences(android.content.Context) org.json.JSONObject.length() <unknown>.nextValueToken() java.util.HashSet<java.lang.Long>.HashSet, Long() java.lang.String.equals(java.lang.String) android.content.SharedPreferences.getBoolean(java.lang.String, boolean) <unknown>.insert(android.database.sqlite.SQLiteDatabase) org.json.JSONObject.put(java.lang.String, org.json.JSONArray) <unknown>.close() org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.next() android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null) org.json.JSONObject.put(java.lang.String, java.lang.String) org.json.JSONObject.getString(java.lang.String) <unknown>.set(<unknown>, <unknown>) org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.close() org.json.JSONObject.getString(java.lang.String) java.lang.String.equals(java.lang.String) java.lang.Long.parseLong(<unknown>) org.codehaus.jackson.JsonParser.isClosed() org.json.JSONObject.put(java.lang.String, int) org.json.JSONObject.put(java.lang.String, org.json.JSONArray) org.json.JSONObject.put(java.lang.String, long) <unknown>.close() org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.set(<unknown>, long) org.json.JSONObject.put(java.lang.String, org.json.JSONObject) <unknown>.set(<unknown>, <unknown>) com.inovex.zabbixmobile.api.ZabbixService._endTransaction() java.lang.String.replaceAll(java.lang.String, java.lang.String) org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.nextValueToken() org.json.JSONObject.put(java.lang.String, java.lang.String) org.json.JSONObject.put(java.lang.String, java.lang.String) org.apache.http.params.BasicHttpParams.BasicHttpParams() android.database.sqlite.SQLiteDatabase.beginTransaction() com.inovex.zabbixmobile.api.ZabbixService._commitTransactionIfRecommended() com.inovex.zabbixmobile.api.ZabbixService._endTransaction() java.lang.String.equals(<unknown>) <unknown>.insert(android.database.sqlite.SQLiteDatabase) <unknown>.insert(android.database.sqlite.SQLiteDatabase) org.json.JSONObject.put(java.lang.String, int) <unknown>.next() com.inovex.zabbixmobile.api.ZabbixService._startTransaction() <unknown>.getJsonArray() android.content.SharedPreferences.getString(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, null, int) javax.net.SocketFactory.createSocket() java.lang.Long.parseLong(<unknown>) org.apache.http.client.CredentialsProvider.setCredentials(org.apache.http.auth.AuthScope, org.apache.http.auth.UsernamePasswordCredentials) org.json.JSONObject.put(java.lang.String, java.lang.String) org.json.JSONObject.put(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService.importTriggers(com.inovex.zabbixmobile.api.JsonArrayReader) <unknown>.next() com.inovex.zabbixmobile.api.ZabbixService.HttpAuthorizationRequiredException.HttpAuthorizationRequiredException() android.database.sqlite.SQLiteQueryBuilder.query(android.database.sqlite.SQLiteDatabase, null, null, null, null, null, null) java.util.Date.Date() com.inovex.zabbixmobile.api.ZabbixService._commitTransactionIfRecommended() <unknown>.set(<unknown>, java.lang.String) org.json.JSONObject.JSONObject() <unknown>.next() <unknown>.set(<unknown>, <unknown>) <unknown>.set(<unknown>, <unknown>) com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject) java.lang.String.equals(java.lang.String) com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, java.lang.String) java.lang.String.indexOf(char) android.database.sqlite.SQLiteDatabase.query(<unknown>, null, <unknown>, null, null, null, null) android.preference.PreferenceManager.getDefaultSharedPreferences(android.content.Context) <unknown>.nextProperty() org.apache.http.impl.client.CloseableHttpClient.execute(org.apache.http.client.methods.HttpPost) <unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>) com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, java.lang.String) org.json.JSONObject.JSONObject() <unknown>.close() android.database.Cursor.getColumnIndex(<unknown>) android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null) org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.nextProperty() org.apache.http.conn.scheme.PlainSocketFactory.getSocketFactory() com.inovex.zabbixmobile.api.ZabbixService._commitTransactionIfRecommended() com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject) java.lang.StringBuilder.toString() org.json.JSONObject.put(java.lang.String, java.lang.String) android.database.sqlite.SQLiteQueryBuilder.SQLiteQueryBuilder() <unknown>.insert(android.database.sqlite.SQLiteDatabase) org.apache.http.conn.scheme.SchemeRegistry.register(org.apache.http.conn.scheme.Scheme) <unknown>.set(<unknown>, <unknown>) org.json.JSONObject.JSONObject(java.lang.String) java.lang.String.equals(<unknown>) <unknown>.set(<unknown>, <unknown>) <unknown>.set(<unknown>, <unknown>) java.lang.IllegalStateException.IllegalStateException(java.lang.String) java.lang.Double.parseDouble(<unknown>) android.content.ContentValues.put(<unknown>, java.lang.Long) android.database.sqlite.SQLiteQueryBuilder.appendWhere(<unknown>) org.apache.http.conn.scheme.SchemeRegistry.register(org.apache.http.conn.scheme.Scheme) org.json.JSONObject.getInt(java.lang.String) com.inovex.zabbixmobile.api.ZabbixService.importHosts(<unknown>, null) org.json.JSONObject.put(java.lang.String, boolean) java.lang.Long.parseLong(<unknown>) java.lang.String.indexOf(char) android.database.sqlite.SQLiteQueryBuilder.appendWhere(<unknown>) java.lang.String.length() java.lang.String.equals(<unknown>) com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject) <unknown>.nextProperty() <unknown>.next() android.content.SharedPreferences.getString(java.lang.String, java.lang.String) <unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>) <unknown>.GraphData() org.json.JSONArray.put(java.lang.String) org.apache.http.impl.client.AbstractHttpClient.getParams() <unknown>.set(<unknown>, long) <unknown>.set(<unknown>, <unknown>) org.json.JSONObject.getJSONObject(java.lang.String) org.json.JSONObject.put(java.lang.String, java.lang.String) java.lang.String.equals(java.lang.String) org.json.JSONObject.getString(java.lang.String) java.lang.String.equals(<unknown>) java.lang.String.equals(<unknown>) <unknown>.getCurrentName() java.lang.String.equals(<unknown>) com.inovex.zabbixmobile.api.ZabbixService.showProgress(int) <unknown>.getCurrentName() com.inovex.zabbixmobile.api.ZabbixService.importHosts(<unknown>, null) com.inovex.zabbixmobile.api.ZabbixService.importItems(com.inovex.zabbixmobile.api.JsonArrayReader, int, boolean) com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, java.lang.String, int) org.json.JSONObject.put(java.lang.String, int) org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.close() java.lang.String.replace(java.lang.String, java.lang.String) java.lang.String.equals(<unknown>) com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject) com.inovex.zabbixmobile.api.ZabbixService._endTransaction() android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null) android.database.Cursor.moveToNext() <unknown>.HostData() <unknown>.set(<unknown>, long) <unknown>.next() com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject) android.database.sqlite.SQLiteQueryBuilder.setTables(<unknown>) java.util.Date.getTime() org.json.JSONObject.put(java.lang.String, long) android.content.ContentValues.ContentValues(int) java.lang.Long.parseLong(<unknown>) org.apache.http.HttpResponse.getEntity() org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.getText() java.lang.String.equals(java.lang.String) <unknown>.set(<unknown>, <unknown>) <unknown>.set(<unknown>, <unknown>) javax.net.ssl.SSLContext.init(null, javax.net.ssl.TrustManager[], null) android.database.sqlite.SQLiteDatabase.endTransaction() java.lang.String.equals(<unknown>) com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, java.lang.String) <unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>) <unknown>.next() <unknown>.close() <unknown>.insert(android.database.sqlite.SQLiteDatabase) org.json.JSONObject.put(java.lang.String, java.lang.String) java.lang.Throwable.getMessage() java.lang.String.equals(<unknown>) java.lang.String.equals(<unknown>) <unknown>.set(<unknown>, <unknown>) com.inovex.zabbixmobile.api.ZabbixService._endTransaction() javax.net.ssl.SSLContext.getSocketFactory() org.json.JSONObject.JSONObject() android.content.Context.getResources() org.json.JSONObject.put(java.lang.String, int) com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, null) com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, java.lang.String, int) java.lang.String.matches(java.lang.String) <unknown>.set(<unknown>, <unknown>) org.json.JSONArray.put(java.lang.String) <unknown>.set(<unknown>, <unknown>) android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null) android.content.Context.sendBroadcast(android.content.Intent) org.json.JSONObject.getJSONObject(java.lang.String) <unknown>.get(<unknown>) android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null) java.lang.String.equals(<unknown>) android.content.SharedPreferences.getBoolean(java.lang.String, boolean) java.lang.Throwable.printStackTrace() android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null) org.json.JSONObject.put(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService._startTransaction() android.content.Intent.putExtra(java.lang.String, int) org.json.JSONObject.JSONObject() <unknown>.getText() com.inovex.zabbixmobile.api.ZabbixService.importHosts(com.inovex.zabbixmobile.api.JsonArrayReader, int) com.inovex.zabbixmobile.api.ZabbixService._endTransaction() org.apache.http.client.methods.HttpPost.HttpPost(java.lang.String) android.content.SharedPreferences.getString(java.lang.String, java.lang.String) <unknown>.GraphItemData() com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, java.lang.String, int) <unknown>.nextValueToken() com.inovex.zabbixmobile.api.ZabbixService.importTriggers(com.inovex.zabbixmobile.api.JsonArrayReader) org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager.ThreadSafeClientConnManager(org.apache.http.params.HttpParams, org.apache.http.conn.scheme.SchemeRegistry) <unknown>.ApplicationItemRelationData() java.lang.Object.toString() android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null) org.json.JSONArray.JSONArray() java.lang.String.equals(<unknown>) com.inovex.zabbixmobile.api.ZabbixService._startTransaction() org.json.JSONObject.put(java.lang.String, org.json.JSONArray) com.inovex.zabbixmobile.api.ZabbixService.importApplications(int, int, <unknown>) <unknown>.set(<unknown>, int) org.json.JSONObject.put(java.lang.String, int) com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, java.lang.String, int) org.json.JSONObject.put(java.lang.String, java.lang.String) org.json.JSONObject.JSONObject() java.lang.Math.min(int, int) com.inovex.zabbixmobile.api.ZabbixService.showProgress(<unknown>) java.lang.String.equals(java.lang.String) android.content.Intent.Intent(<unknown>) java.lang.String.equals(<unknown>) org.json.JSONObject.put(java.lang.String, int) javax.net.ssl.SSLContext.getInstance(java.lang.String) android.content.res.Resources.getString(<unknown>) org.json.JSONObject.JSONObject() android.content.Intent.Intent(<unknown>) java.lang.String.equals(<unknown>) <unknown>.nextProperty() javax.net.ssl.SSLSocketFactory.createSocket(java.net.Socket, java.lang.String, int, boolean) org.json.JSONObject.put(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject) <unknown>.get(<unknown>) java.io.IOException.IOException(java.lang.String) java.lang.String.trim() java.lang.String.contains(java.lang.String) org.apache.http.entity.StringEntity.StringEntity(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService._endTransaction() .X509TrustManager() com.inovex.zabbixmobile.api.ZabbixService.importEvents(com.inovex.zabbixmobile.api.JsonArrayReader, null) com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject) android.graphics.Color.parseColor(<unknown>) com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, null) org.json.JSONObject.getJSONArray(java.lang.String) org.apache.http.client.params.HttpClientParams.setRedirecting(org.apache.http.params.HttpParams, boolean) com.inovex.zabbixmobile.api.ZabbixService._startTransaction() <unknown>.getCurrentName() java.lang.String.equals(<unknown>) java.lang.Long.parseLong(<unknown>) java.lang.Long.parseLong(<unknown>) <unknown>.getText() java.util.Date.getTime() android.content.Intent.putExtra(java.lang.String, <unknown>) android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null) <unknown>.get(<unknown>) android.database.Cursor.moveToFirst() org.apache.http.client.methods.HttpEntityEnclosingRequestBase.setEntity(org.apache.http.entity.StringEntity) com.inovex.zabbixmobile.api.ZabbixService._commitTransactionIfRecommended() com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, null) android.database.sqlite.SQLiteQueryBuilder.appendWhere(<unknown>) org.apache.http.auth.UsernamePasswordCredentials.UsernamePasswordCredentials(java.lang.String, java.lang.String) java.util.Date.getTime() java.lang.String.equals(<unknown>) com.inovex.zabbixmobile.api.ZabbixService._endTransaction() org.json.JSONObject.put(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService.authenticate() java.lang.String.equals(<unknown>) org.json.JSONObject.put(java.lang.String, java.lang.String) org.json.JSONObject.put(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService.NoAPIAccessException.NoAPIAccessException() org.json.JSONArray.put(long) com.inovex.zabbixmobile.api.ZabbixService._endTransaction() android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null) <unknown>.getJsonArray() <unknown>.ScreenData() java.util.Date.Date() java.util.Date.Date() <unknown>.set(<unknown>, long) <unknown>.getCurrentName() org.json.JSONObject.put(java.lang.String, org.json.JSONArray) <unknown>.set(<unknown>, long) org.json.JSONObject.put(java.lang.String, java.lang.String) org.apache.http.params.HttpConnectionParams.setConnectionTimeout(org.apache.http.params.HttpParams, int) org.json.JSONArray.length() <unknown>.set(<unknown>, java.lang.String) <unknown>.set(<unknown>, long) java.util.Date.getTime() <unknown>.set(<unknown>, <unknown>) <unknown>.set(<unknown>, <unknown>) org.json.JSONArray.put(java.lang.String) java.lang.String.equals(<unknown>) com.inovex.zabbixmobile.api.ZabbixService.importScreenItems(<unknown>) com.inovex.zabbixmobile.api.ZabbixService.HttpAuthorizationRequiredException.HttpAuthorizationRequiredException() <unknown>.getText() org.json.JSONObject.put(java.lang.String, org.json.JSONArray) org.json.JSONObject.JSONObject() <unknown>.set(<unknown>, <unknown>) com.inovex.zabbixmobile.api.ZabbixService.importHostGroups(<unknown>) org.json.JSONObject.toString() java.lang.Integer.parseInt(<unknown>) java.lang.String.equals(java.lang.String) org.apache.http.params.HttpProtocolParams.setContentCharset(org.apache.http.params.HttpParams, java.lang.String) <unknown>.get(<unknown>) android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null) java.lang.String.equals(<unknown>) <unknown>.set(<unknown>, <unknown>) <unknown>.nextValueToken() <unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>) org.json.JSONObject.put(java.lang.String, org.json.JSONArray) org.json.JSONObject.put(java.lang.String, java.lang.Integer) <unknown>.getText() <unknown>.set(<unknown>, <unknown>) org.apache.http.message.AbstractHttpMessage.addHeader(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject) org.json.JSONObject.getJSONArray(java.lang.String) java.security.KeyStore.load(null, null) java.lang.String.replace(java.lang.String, java.lang.String) java.lang.Long.parseLong(<unknown>) org.json.JSONObject.toString() android.content.SharedPreferences.getString(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, java.lang.String) <unknown>.TriggerData() android.content.SharedPreferences.getString(java.lang.String, java.lang.String) android.content.Intent.Intent(<unknown>) org.json.JSONObject.put(java.lang.String, java.lang.String) org.apache.http.impl.client.AbstractHttpClient.getCredentialsProvider() <unknown>.set(<unknown>, <unknown>) java.io.IOException.IOException(java.lang.String) java.lang.String.trim() org.json.JSONObject.put(java.lang.String, org.json.JSONArray) java.lang.String.split(java.lang.String) java.lang.String.equals(java.lang.String) java.lang.String.endsWith(java.lang.String) <unknown>.set(<unknown>, int) com.inovex.zabbixmobile.api.ZabbixService.showProgress(int) <unknown>.ItemData() org.json.JSONObject.put(java.lang.String, int) <unknown>.set(<unknown>, <unknown>) org.codehaus.jackson.JsonParser.getText() android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null) org.apache.http.impl.client.DefaultHttpClient.DefaultHttpClient(org.apache.http.conn.ClientConnectionManager, org.apache.http.params.HttpParams) <unknown>.close() java.lang.IllegalStateException.IllegalStateException(java.lang.String) org.json.JSONObject.put(java.lang.String, java.lang.String) org.codehaus.jackson.JsonParser.nextToken() android.database.Cursor.getColumnIndex(<unknown>) org.json.JSONObject.put(java.lang.String, org.json.JSONArray) <unknown>.nextValueToken() com.inovex.zabbixmobile.api.ZabbixService._startTransaction() org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.set(<unknown>, java.lang.String) java.lang.String.substring(int, int) java.lang.Long.parseLong(<unknown>) org.json.JSONObject.put(java.lang.String, java.lang.String) org.json.JSONObject.getInt(java.lang.String) java.lang.String.equals(java.lang.String) <unknown>.set(<unknown>, <unknown>) <unknown>.set(<unknown>, <unknown>) java.security.KeyStore.getInstance(java.lang.String) java.lang.Integer.parseInt(<unknown>) java.lang.String.equals(java.lang.String) <unknown>.nextProperty() android.content.Intent.putExtra(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, null) <unknown>.set(<unknown>, int) java.io.BufferedReader.BufferedReader(java.io.InputStreamReader) java.security.KeyStore.getDefaultType() java.lang.String.equals(<unknown>) <unknown>.getText() org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.set(<unknown>, java.lang.Object) org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.insert(android.database.sqlite.SQLiteDatabase) <unknown>.nextProperty() com.inovex.zabbixmobile.api.ZabbixService._startTransaction() org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.close() <unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>) org.json.JSONObject.put(java.lang.String, long) com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, null, int) <unknown>.getJsonArray() <unknown>.set(<unknown>, <unknown>) java.lang.String.equals(<unknown>) org.apache.http.conn.scheme.Scheme.Scheme(java.lang.String, org.apache.http.conn.scheme.PlainSocketFactory, int) org.json.JSONObject.put(java.lang.String, java.lang.String) java.lang.String.equals(<unknown>)"],
    "c_callsites_t": ["<unknown>.set(<unknown>, <unknown>) org.apache.http.HttpEntity.getContent() java.lang.String.equals(java.lang.String) org.json.JSONArray.JSONArray() <unknown>.set(<unknown>, java.lang.Object) org.json.JSONObject.put(java.lang.String, java.lang.Integer) org.json.JSONArray.put(java.lang.String) org.json.JSONObject.JSONObject() org.json.JSONObject.put(java.lang.String, java.lang.String) org.codehaus.jackson.JsonFactory.createJsonParser(java.io.InputStream) java.lang.String.equals(<unknown>) org.apache.http.StatusLine.getStatusCode() <unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>) org.json.JSONObject.put(java.lang.String, java.lang.String) android.database.sqlite.SQLiteDatabase.inTransaction() android.util.Log.d(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService._startTransaction() java.lang.String.equals(java.lang.String) org.codehaus.jackson.JsonFactory.JsonFactory() com.inovex.zabbixmobile.api.ZabbixService._endTransaction() org.json.JSONObject.put(java.lang.String, int) android.content.ContentValues.ContentValues(int) org.apache.http.conn.scheme.SchemeRegistry.SchemeRegistry() <unknown>.insert(android.database.sqlite.SQLiteDatabase) <unknown>.insert(android.database.sqlite.SQLiteDatabase) com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject) com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject) com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject) org.json.JSONObject.getJSONObject(java.lang.String) java.io.InputStreamReader.InputStreamReader(java.io.InputStream) android.content.Intent.putExtra(java.lang.String, <unknown>) org.json.JSONArray.length() java.lang.String.equals(java.lang.String) <unknown>.set(<unknown>, <unknown>) java.lang.String.equals(<unknown>) com.inovex.zabbixmobile.api.ZabbixService.PreconditionFailedException.PreconditionFailedException() java.lang.StringBuilder.StringBuilder() android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null) <unknown>.nextValueToken() org.json.JSONObject.JSONObject() org.json.JSONObject.put(java.lang.String, int) org.json.JSONObject.put(java.lang.String, org.json.JSONArray) java.lang.String.equals(<unknown>) <unknown>.get(<unknown>) <unknown>.insert(android.database.sqlite.SQLiteDatabase) android.content.Intent.putExtra(java.lang.String, <unknown>) java.lang.String.equals(<unknown>) com.inovex.zabbixmobile.api.ZabbixService.importItems(<unknown>, int, boolean) com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, java.lang.String, int) android.util.Log.d(java.lang.String, java.lang.String) org.json.JSONObject.put(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject) org.apache.http.conn.scheme.Scheme.Scheme(java.lang.String, org.apache.http.conn.ssl.SSLSocketFactory, int) org.apache.http.HttpEntity.getContent() org.codehaus.jackson.JsonParser.close() java.lang.String.equals(<unknown>) <unknown>.nextValueToken() <unknown>.getCurrentName() org.json.JSONArray.JSONArray(java.util.Set<java.lang.Long>) <unknown>.nextValueToken() android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null) <unknown>.getJsonArray() com.inovex.zabbixmobile.api.ZabbixService._startTransaction() org.json.JSONArray.JSONArray() <unknown>.nextProperty() java.lang.String.equals(java.lang.String) android.database.sqlite.SQLiteDatabase.update(<unknown>, android.content.ContentValues, <unknown>, null) java.util.Set<java.lang.Long>.add(<unknown>) <unknown>.get(<unknown>) <unknown>.get(<unknown>) android.content.ContentValues.put(<unknown>, java.lang.Long) java.lang.String.equals(java.lang.String) org.apache.http.StatusLine.getReasonPhrase() java.lang.RuntimeException.RuntimeException(java.lang.String) <unknown>.nextProperty() java.lang.Throwable.printStackTrace() java.lang.String.equals(<unknown>) java.lang.Long.parseLong(<unknown>) org.json.JSONObject.put(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject) <unknown>.getCurrentName() android.content.ContentValues.put(<unknown>, java.lang.Long) org.apache.http.entity.StringEntity.StringEntity(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject) java.lang.String.equals(<unknown>) <unknown>.EventData() <unknown>.next() <unknown>.set(<unknown>, <unknown>) com.inovex.zabbixmobile.api.ZabbixService.CustomSSLSocketFactory.CustomSSLSocketFactory(java.security.KeyStore) com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject) <unknown>.getCurrentName() java.util.List<java.lang.String>.add(java.lang.String) org.json.JSONObject.put(java.lang.String, int) <unknown>.getText() org.json.JSONObject.put(java.lang.String, java.lang.String) org.apache.http.conn.ssl.SSLSocketFactory.setHostnameVerifier(org.apache.http.conn.ssl.X509HostnameVerifier) <unknown>.set(<unknown>, <unknown>) <unknown>.getText() org.json.JSONObject.put(java.lang.String, long) java.util.Date.Date() android.util.Log.i(java.lang.String, java.lang.String) org.json.JSONObject.put(java.lang.String, int) org.json.JSONObject.put(java.lang.String, int) <unknown>.set(<unknown>, <unknown>) com.inovex.zabbixmobile.api.ZabbixService.authenticate() android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null) android.util.Log.d(java.lang.String, java.lang.String) java.lang.String.equals(java.lang.String) org.apache.http.HttpResponse.getEntity() org.json.JSONObject.JSONObject() com.inovex.zabbixmobile.api.ZabbixService.importItems(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader, int, boolean) com.inovex.zabbixmobile.api.ZabbixService._startTransaction() com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, null, int) java.io.BufferedReader.read() org.json.JSONObject.put(java.lang.String, long) <unknown>.set(<unknown>, <unknown>) android.database.Cursor.getLong(<unknown>) java.lang.IllegalStateException.IllegalStateException(java.lang.String) org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.getCurrentName() android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null) android.util.Log.d(java.lang.String, java.lang.String) <unknown>.set(<unknown>, <unknown>) java.lang.String.equals(<unknown>) org.json.JSONObject.put(java.lang.String, java.lang.String) android.database.Cursor.moveToFirst() com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, java.lang.String) android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null) java.lang.String.equals(java.lang.String) com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, java.lang.String) <unknown>.getText() org.json.JSONObject.put(java.lang.String, java.lang.String) android.content.Intent.putExtra(java.lang.String, <unknown>) <unknown>.getCurrentName() android.content.res.Resources.getString(<unknown>) android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null) android.database.sqlite.SQLiteDatabase.setTransactionSuccessful() <unknown>.next() <unknown>.getText() <unknown>.nextValueToken() com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject) com.inovex.zabbixmobile.api.ZabbixService.showProgress(<unknown>) java.io.IOException.IOException(java.lang.String) <unknown>.getCurrentName() android.util.Log.d(java.lang.String, java.lang.String) java.lang.Object.toString() org.json.JSONObject.toString() <unknown>.set(<unknown>, <unknown>) org.json.JSONArray.JSONArray() org.apache.http.HttpResponse.getStatusLine() org.json.JSONArray.JSONArray() org.json.JSONObject.put(java.lang.String, java.lang.String) org.apache.http.impl.client.DefaultHttpClient.DefaultHttpClient() org.json.JSONObject.put(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject) org.apache.http.HttpResponse.getStatusLine() java.lang.String.equals(<unknown>) java.util.Date.Date() android.util.Log.i(java.lang.String, java.lang.String) android.content.Context.getResources() org.apache.http.impl.client.CloseableHttpClient.execute(org.apache.http.client.methods.HttpPost) com.inovex.zabbixmobile.api.ZabbixService._commitTransactionIfRecommended() com.inovex.zabbixmobile.api.ZabbixService.importHostGroups(<unknown>) android.content.Context.sendBroadcast(android.content.Intent) android.content.Context.sendBroadcast(android.content.Intent) com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, null, int) java.lang.Integer.parseInt(<unknown>) <unknown>.ApplicationData() com.inovex.zabbixmobile.api.ZabbixService.NoAPIAccessException.NoAPIAccessException() com.inovex.zabbixmobile.api.ZabbixService._commitTransactionIfRecommended() <unknown>.getJsonArray() org.apache.http.message.AbstractHttpMessage.addHeader(java.lang.String, java.lang.String) org.json.JSONObject.put(java.lang.String, int) java.lang.String.replace(java.lang.String, java.lang.String) org.json.JSONArray.JSONArray() <unknown>.set(<unknown>, <unknown>) org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.set(<unknown>, <unknown>) org.json.JSONArray.JSONArray() java.lang.String.equals(<unknown>) com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, java.lang.String, int) <unknown>.nextProperty() <unknown>.set(<unknown>, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject) org.json.JSONObject.JSONObject() java.lang.String.contains(java.lang.String) org.apache.http.client.methods.HttpEntityEnclosingRequestBase.setEntity(org.apache.http.entity.StringEntity) com.inovex.zabbixmobile.api.ZabbixService.importTriggers(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader) org.json.JSONObject.put(java.lang.String, int) <unknown>.HostGroupData() <unknown>.JsonArrayOrObjectReader(org.codehaus.jackson.JsonParser) <unknown>.HostGroupData() <unknown>.nextProperty() java.lang.Long.parseLong(<unknown>) org.json.JSONObject.put(java.lang.String, java.lang.String) org.json.JSONObject.put(java.lang.String, org.json.JSONArray) org.json.JSONObject.put(java.lang.String, java.lang.Integer) <unknown>.set(<unknown>, <unknown>) <unknown>.close() org.json.JSONObject.put(java.lang.String, org.json.JSONArray) <unknown>.set(<unknown>, <unknown>) java.lang.String.equals(java.lang.String) android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null) <unknown>.next() org.json.JSONObject.toString() java.lang.String.equals(<unknown>) java.lang.String.equals(<unknown>) android.database.sqlite.SQLiteDatabase.query(<unknown>, null, <unknown>, null, null, null, null) <unknown>.set(<unknown>, <unknown>) org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.CacheData() <unknown>.getText() com.inovex.zabbixmobile.api.ZabbixService._startTransaction() <unknown>.set(<unknown>, <unknown>) com.inovex.zabbixmobile.api.ZabbixService._endTransaction() <unknown>.set(<unknown>, int) <unknown>.getJsonArray() java.lang.String.equals(<unknown>) java.util.Date.getTime() java.lang.String.equals(java.lang.String) org.json.JSONObject.put(java.lang.String, int) <unknown>.set(<unknown>, <unknown>) java.lang.Integer.parseInt(<unknown>) org.codehaus.jackson.JsonParser.getCurrentName() <unknown>.nextProperty() com.inovex.zabbixmobile.api.ZabbixService._endTransaction() java.lang.String.equals(<unknown>) org.json.JSONObject.put(java.lang.String, int) android.database.sqlite.SQLiteDatabase.update(<unknown>, android.content.ContentValues, <unknown>, null) com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject) com.inovex.zabbixmobile.api.ZabbixService._endTransaction() java.lang.StringBuilder.append(char) <unknown>.set(<unknown>, <unknown>) <unknown>.get(<unknown>) <unknown>.set(<unknown>, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject) org.json.JSONObject.put(java.lang.String, java.lang.String) android.database.Cursor.getLong(<unknown>) java.lang.String.equals(<unknown>) org.json.JSONObject.put(java.lang.String, java.lang.String) org.json.JSONObject.JSONObject() org.apache.http.params.HttpProtocolParams.setVersion(org.apache.http.params.HttpParams, org.apache.http.HttpVersion) org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.HistoryDetailData() android.util.Log.d(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService._startTransaction() <unknown>.next() <unknown>.set(<unknown>, <unknown>) <unknown>.nextValueToken() org.json.JSONObject.JSONObject() java.lang.String.equals(<unknown>) java.lang.Long.parseLong(<unknown>) java.lang.Integer.parseInt(<unknown>) org.apache.http.client.methods.HttpPost.HttpPost(java.lang.String) org.apache.http.StatusLine.getStatusCode() <unknown>.set(<unknown>, int) java.lang.String.equals(java.lang.String) java.lang.String.equals(<unknown>) java.lang.String.equals(<unknown>) <unknown>.getCurrentName() java.util.ArrayList<java.lang.String>.ArrayList, String() com.inovex.zabbixmobile.api.ZabbixService._startTransaction() com.inovex.zabbixmobile.api.ZabbixService.importTriggers(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader) org.json.JSONArray.put(java.lang.String) <unknown>.nextValueToken() org.json.JSONArray.put(java.lang.String) <unknown>.set(<unknown>, <unknown>) org.json.JSONObject.put(java.lang.String, int) com.inovex.zabbixmobile.api.ZabbixService.importItems(<unknown>, int, boolean) org.json.JSONObject.JSONObject() com.inovex.zabbixmobile.api.ZabbixService.importTriggers(<unknown>) com.inovex.zabbixmobile.api.ZabbixService.importGraphItems(<unknown>) <unknown>.ScreenItemData() <unknown>.set(<unknown>, <unknown>) <unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>) android.preference.PreferenceManager.getDefaultSharedPreferences(android.content.Context) org.json.JSONObject.length() <unknown>.nextValueToken() java.util.HashSet<java.lang.Long>.HashSet, Long() java.lang.String.equals(java.lang.String) android.content.SharedPreferences.getBoolean(java.lang.String, boolean) <unknown>.insert(android.database.sqlite.SQLiteDatabase) org.json.JSONObject.put(java.lang.String, org.json.JSONArray) <unknown>.close() com.inovex.zabbixmobile.api.ZabbixService.importHosts(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader, int) org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.next() android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null) org.json.JSONObject.put(java.lang.String, java.lang.String) org.json.JSONObject.getString(java.lang.String) <unknown>.set(<unknown>, <unknown>) org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.close() org.json.JSONObject.getString(java.lang.String) java.lang.String.equals(java.lang.String) java.lang.Long.parseLong(<unknown>) org.codehaus.jackson.JsonParser.isClosed() org.json.JSONObject.put(java.lang.String, int) org.json.JSONObject.put(java.lang.String, org.json.JSONArray) org.json.JSONObject.put(java.lang.String, long) <unknown>.close() org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.set(<unknown>, long) org.json.JSONObject.put(java.lang.String, org.json.JSONObject) <unknown>.set(<unknown>, <unknown>) com.inovex.zabbixmobile.api.ZabbixService._endTransaction() java.lang.String.replaceAll(java.lang.String, java.lang.String) org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.nextValueToken() org.json.JSONObject.put(java.lang.String, java.lang.String) org.json.JSONObject.put(java.lang.String, java.lang.String) org.apache.http.params.BasicHttpParams.BasicHttpParams() android.database.sqlite.SQLiteDatabase.beginTransaction() com.inovex.zabbixmobile.api.ZabbixService._commitTransactionIfRecommended() com.inovex.zabbixmobile.api.ZabbixService._endTransaction() java.lang.String.equals(<unknown>) <unknown>.insert(android.database.sqlite.SQLiteDatabase) <unknown>.insert(android.database.sqlite.SQLiteDatabase) org.json.JSONObject.put(java.lang.String, int) <unknown>.next() com.inovex.zabbixmobile.api.ZabbixService._startTransaction() <unknown>.getJsonArray() android.content.SharedPreferences.getString(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, null, int) javax.net.SocketFactory.createSocket() java.lang.Long.parseLong(<unknown>) org.apache.http.client.CredentialsProvider.setCredentials(org.apache.http.auth.AuthScope, org.apache.http.auth.UsernamePasswordCredentials) org.json.JSONObject.put(java.lang.String, java.lang.String) org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.next() com.inovex.zabbixmobile.api.ZabbixService.HttpAuthorizationRequiredException.HttpAuthorizationRequiredException() android.database.sqlite.SQLiteQueryBuilder.query(android.database.sqlite.SQLiteDatabase, null, null, null, null, null, null) java.util.Date.Date() com.inovex.zabbixmobile.api.ZabbixService._commitTransactionIfRecommended() <unknown>.set(<unknown>, java.lang.String) org.json.JSONObject.JSONObject() <unknown>.next() <unknown>.set(<unknown>, <unknown>) <unknown>.set(<unknown>, <unknown>) com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject) java.lang.String.equals(java.lang.String) com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, java.lang.String) java.lang.String.indexOf(char) android.database.sqlite.SQLiteDatabase.query(<unknown>, null, <unknown>, null, null, null, null) android.preference.PreferenceManager.getDefaultSharedPreferences(android.content.Context) <unknown>.nextProperty() org.apache.http.impl.client.CloseableHttpClient.execute(org.apache.http.client.methods.HttpPost) <unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>) com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, java.lang.String) org.json.JSONObject.JSONObject() <unknown>.close() android.database.Cursor.getColumnIndex(<unknown>) android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null) org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.nextProperty() org.apache.http.conn.scheme.PlainSocketFactory.getSocketFactory() com.inovex.zabbixmobile.api.ZabbixService._commitTransactionIfRecommended() com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject) java.lang.StringBuilder.toString() org.json.JSONObject.put(java.lang.String, java.lang.String) android.database.sqlite.SQLiteQueryBuilder.SQLiteQueryBuilder() <unknown>.insert(android.database.sqlite.SQLiteDatabase) org.apache.http.conn.scheme.SchemeRegistry.register(org.apache.http.conn.scheme.Scheme) <unknown>.set(<unknown>, <unknown>) org.json.JSONObject.JSONObject(java.lang.String) java.lang.String.equals(<unknown>) <unknown>.set(<unknown>, <unknown>) <unknown>.set(<unknown>, <unknown>) java.lang.IllegalStateException.IllegalStateException(java.lang.String) java.lang.Double.parseDouble(<unknown>) android.content.ContentValues.put(<unknown>, java.lang.Long) android.database.sqlite.SQLiteQueryBuilder.appendWhere(<unknown>) org.apache.http.conn.scheme.SchemeRegistry.register(org.apache.http.conn.scheme.Scheme) org.json.JSONObject.getInt(java.lang.String) com.inovex.zabbixmobile.api.ZabbixService.importHosts(<unknown>, null) org.json.JSONObject.put(java.lang.String, boolean) java.lang.Long.parseLong(<unknown>) java.lang.String.indexOf(char) android.database.sqlite.SQLiteQueryBuilder.appendWhere(<unknown>) java.lang.String.length() java.lang.String.equals(<unknown>) com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject) <unknown>.nextProperty() <unknown>.next() android.content.SharedPreferences.getString(java.lang.String, java.lang.String) <unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>) com.inovex.zabbixmobile.api.ZabbixService.importTriggers(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader) <unknown>.GraphData() org.json.JSONArray.put(java.lang.String) org.apache.http.impl.client.AbstractHttpClient.getParams() <unknown>.set(<unknown>, long) <unknown>.set(<unknown>, <unknown>) org.json.JSONObject.getJSONObject(java.lang.String) org.json.JSONObject.put(java.lang.String, java.lang.String) java.lang.String.equals(java.lang.String) org.json.JSONObject.getString(java.lang.String) java.lang.String.equals(<unknown>) java.lang.String.equals(<unknown>) <unknown>.getCurrentName() java.lang.String.equals(<unknown>) com.inovex.zabbixmobile.api.ZabbixService.showProgress(int) <unknown>.getCurrentName() com.inovex.zabbixmobile.api.ZabbixService.importHosts(<unknown>, null) com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, java.lang.String, int) org.json.JSONObject.put(java.lang.String, int) org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.close() java.lang.String.replace(java.lang.String, java.lang.String) java.lang.String.equals(<unknown>) com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject) com.inovex.zabbixmobile.api.ZabbixService._endTransaction() android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null) android.database.Cursor.moveToNext() <unknown>.HostData() <unknown>.set(<unknown>, long) <unknown>.next() com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject) android.database.sqlite.SQLiteQueryBuilder.setTables(<unknown>) java.util.Date.getTime() org.json.JSONObject.put(java.lang.String, long) android.content.ContentValues.ContentValues(int) java.lang.Long.parseLong(<unknown>) org.apache.http.HttpResponse.getEntity() org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.getText() java.lang.String.equals(java.lang.String) <unknown>.set(<unknown>, <unknown>) <unknown>.set(<unknown>, <unknown>) javax.net.ssl.SSLContext.init(null, javax.net.ssl.TrustManager[], null) android.database.sqlite.SQLiteDatabase.endTransaction() java.lang.String.equals(<unknown>) com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, java.lang.String) android.util.Log.d(java.lang.String, java.lang.String) <unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>) <unknown>.next() <unknown>.close() <unknown>.insert(android.database.sqlite.SQLiteDatabase) org.json.JSONObject.put(java.lang.String, java.lang.String) java.lang.Throwable.getMessage() java.lang.String.equals(<unknown>) java.lang.String.equals(<unknown>) <unknown>.set(<unknown>, <unknown>) com.inovex.zabbixmobile.api.ZabbixService._endTransaction() javax.net.ssl.SSLContext.getSocketFactory() org.json.JSONObject.JSONObject() android.content.Context.getResources() org.json.JSONObject.put(java.lang.String, int) com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, null) com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, java.lang.String, int) java.lang.String.matches(java.lang.String) <unknown>.set(<unknown>, <unknown>) org.json.JSONArray.put(java.lang.String) <unknown>.set(<unknown>, <unknown>) android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null) android.content.Context.sendBroadcast(android.content.Intent) org.json.JSONObject.getJSONObject(java.lang.String) <unknown>.get(<unknown>) android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null) java.lang.String.equals(<unknown>) android.content.SharedPreferences.getBoolean(java.lang.String, boolean) java.lang.Throwable.printStackTrace() android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null) org.json.JSONObject.put(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService._startTransaction() android.content.Intent.putExtra(java.lang.String, int) org.json.JSONObject.JSONObject() <unknown>.getText() com.inovex.zabbixmobile.api.ZabbixService._endTransaction() org.apache.http.client.methods.HttpPost.HttpPost(java.lang.String) android.content.SharedPreferences.getString(java.lang.String, java.lang.String) <unknown>.GraphItemData() com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, java.lang.String, int) <unknown>.nextValueToken() org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager.ThreadSafeClientConnManager(org.apache.http.params.HttpParams, org.apache.http.conn.scheme.SchemeRegistry) <unknown>.ApplicationItemRelationData() java.lang.Object.toString() android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null) org.json.JSONArray.JSONArray() java.lang.String.equals(<unknown>) com.inovex.zabbixmobile.api.ZabbixService._startTransaction() org.json.JSONObject.put(java.lang.String, org.json.JSONArray) com.inovex.zabbixmobile.api.ZabbixService.importApplications(int, int, <unknown>) <unknown>.set(<unknown>, int) org.json.JSONObject.put(java.lang.String, int) com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, java.lang.String, int) org.json.JSONObject.put(java.lang.String, java.lang.String) org.json.JSONObject.JSONObject() java.lang.Math.min(int, int) com.inovex.zabbixmobile.api.ZabbixService.showProgress(<unknown>) java.lang.String.equals(java.lang.String) android.content.Intent.Intent(<unknown>) java.lang.String.equals(<unknown>) org.json.JSONObject.put(java.lang.String, int) javax.net.ssl.SSLContext.getInstance(java.lang.String) android.content.res.Resources.getString(<unknown>) org.json.JSONObject.JSONObject() android.content.Intent.Intent(<unknown>) java.lang.String.equals(<unknown>) <unknown>.nextProperty() javax.net.ssl.SSLSocketFactory.createSocket(java.net.Socket, java.lang.String, int, boolean) org.json.JSONObject.put(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject) <unknown>.get(<unknown>) java.io.IOException.IOException(java.lang.String) java.lang.String.trim() java.lang.String.contains(java.lang.String) org.apache.http.entity.StringEntity.StringEntity(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService._endTransaction() .X509TrustManager() com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject) android.graphics.Color.parseColor(<unknown>) com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, null) org.json.JSONObject.getJSONArray(java.lang.String) org.apache.http.client.params.HttpClientParams.setRedirecting(org.apache.http.params.HttpParams, boolean) com.inovex.zabbixmobile.api.ZabbixService._startTransaction() <unknown>.getCurrentName() java.lang.String.equals(<unknown>) java.lang.Long.parseLong(<unknown>) android.util.Log.d(java.lang.String, java.lang.String) org.codehaus.jackson.JsonParser.getCurrentToken() org.codehaus.jackson.JsonParser.nextValue() java.lang.Long.parseLong(<unknown>) <unknown>.getText() java.util.Date.getTime() android.content.Intent.putExtra(java.lang.String, <unknown>) android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null) <unknown>.get(<unknown>) android.database.Cursor.moveToFirst() org.apache.http.client.methods.HttpEntityEnclosingRequestBase.setEntity(org.apache.http.entity.StringEntity) com.inovex.zabbixmobile.api.ZabbixService._commitTransactionIfRecommended() com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, null) android.database.sqlite.SQLiteQueryBuilder.appendWhere(<unknown>) org.apache.http.auth.UsernamePasswordCredentials.UsernamePasswordCredentials(java.lang.String, java.lang.String) java.util.Date.getTime() java.lang.String.equals(<unknown>) com.inovex.zabbixmobile.api.ZabbixService._endTransaction() org.json.JSONObject.put(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService.authenticate() java.lang.String.equals(<unknown>) org.json.JSONObject.put(java.lang.String, java.lang.String) org.json.JSONObject.put(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService.NoAPIAccessException.NoAPIAccessException() org.json.JSONArray.put(long) com.inovex.zabbixmobile.api.ZabbixService._endTransaction() android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null) <unknown>.getJsonArray() <unknown>.ScreenData() java.util.Date.Date() java.util.Date.Date() <unknown>.set(<unknown>, long) <unknown>.getCurrentName() org.json.JSONObject.put(java.lang.String, org.json.JSONArray) <unknown>.set(<unknown>, long) org.json.JSONObject.put(java.lang.String, java.lang.String) org.apache.http.params.HttpConnectionParams.setConnectionTimeout(org.apache.http.params.HttpParams, int) org.json.JSONArray.length() <unknown>.set(<unknown>, java.lang.String) <unknown>.set(<unknown>, long) java.util.Date.getTime() <unknown>.set(<unknown>, <unknown>) <unknown>.set(<unknown>, <unknown>) org.json.JSONArray.put(java.lang.String) java.lang.String.equals(<unknown>) com.inovex.zabbixmobile.api.ZabbixService.importScreenItems(<unknown>) com.inovex.zabbixmobile.api.ZabbixService.HttpAuthorizationRequiredException.HttpAuthorizationRequiredException() <unknown>.getText() org.json.JSONObject.put(java.lang.String, org.json.JSONArray) com.inovex.zabbixmobile.api.ZabbixService.importEvents(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader, null) org.json.JSONObject.JSONObject() <unknown>.set(<unknown>, <unknown>) com.inovex.zabbixmobile.api.ZabbixService.importHostGroups(<unknown>) org.json.JSONObject.toString() java.lang.Integer.parseInt(<unknown>) java.lang.String.equals(java.lang.String) org.apache.http.params.HttpProtocolParams.setContentCharset(org.apache.http.params.HttpParams, java.lang.String) <unknown>.get(<unknown>) android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null) java.lang.String.equals(<unknown>) <unknown>.set(<unknown>, <unknown>) <unknown>.nextValueToken() <unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>) org.json.JSONObject.put(java.lang.String, org.json.JSONArray) org.json.JSONObject.put(java.lang.String, java.lang.Integer) <unknown>.getText() <unknown>.set(<unknown>, <unknown>) org.apache.http.message.AbstractHttpMessage.addHeader(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject) org.json.JSONObject.getJSONArray(java.lang.String) java.security.KeyStore.load(null, null) java.lang.String.replace(java.lang.String, java.lang.String) java.lang.Long.parseLong(<unknown>) org.json.JSONObject.toString() com.inovex.zabbixmobile.api.ZabbixService.importTriggers(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader) android.util.Log.d(java.lang.String, java.lang.String) android.content.SharedPreferences.getString(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, java.lang.String) <unknown>.TriggerData() android.content.SharedPreferences.getString(java.lang.String, java.lang.String) android.content.Intent.Intent(<unknown>) org.json.JSONObject.put(java.lang.String, java.lang.String) org.apache.http.impl.client.AbstractHttpClient.getCredentialsProvider() <unknown>.set(<unknown>, <unknown>) java.io.IOException.IOException(java.lang.String) java.lang.String.trim() org.json.JSONObject.put(java.lang.String, org.json.JSONArray) java.lang.String.split(java.lang.String) java.lang.String.equals(java.lang.String) java.lang.String.endsWith(java.lang.String) <unknown>.set(<unknown>, int) com.inovex.zabbixmobile.api.ZabbixService.showProgress(int) <unknown>.ItemData() org.json.JSONObject.put(java.lang.String, int) <unknown>.set(<unknown>, <unknown>) org.codehaus.jackson.JsonParser.getText() android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null) org.apache.http.impl.client.DefaultHttpClient.DefaultHttpClient(org.apache.http.conn.ClientConnectionManager, org.apache.http.params.HttpParams) <unknown>.close() java.lang.IllegalStateException.IllegalStateException(java.lang.String) org.json.JSONObject.put(java.lang.String, java.lang.String) org.codehaus.jackson.JsonParser.nextToken() android.database.Cursor.getColumnIndex(<unknown>) org.json.JSONObject.put(java.lang.String, org.json.JSONArray) <unknown>.nextValueToken() com.inovex.zabbixmobile.api.ZabbixService._startTransaction() org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.set(<unknown>, java.lang.String) java.lang.String.substring(int, int) java.lang.Long.parseLong(<unknown>) org.json.JSONObject.put(java.lang.String, java.lang.String) org.json.JSONObject.getInt(java.lang.String) java.lang.String.equals(java.lang.String) <unknown>.set(<unknown>, <unknown>) <unknown>.set(<unknown>, <unknown>) java.security.KeyStore.getInstance(java.lang.String) java.lang.Integer.parseInt(<unknown>) java.lang.String.equals(java.lang.String) <unknown>.nextProperty() android.content.Intent.putExtra(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, null) <unknown>.set(<unknown>, int) java.io.BufferedReader.BufferedReader(java.io.InputStreamReader) com.inovex.zabbixmobile.api.ZabbixService.importEvents(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader, int) java.security.KeyStore.getDefaultType() java.lang.String.equals(<unknown>) <unknown>.getText() org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.set(<unknown>, java.lang.Object) org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.insert(android.database.sqlite.SQLiteDatabase) <unknown>.nextProperty() com.inovex.zabbixmobile.api.ZabbixService._startTransaction() org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.close() <unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>) org.json.JSONObject.put(java.lang.String, long) com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, null, int) <unknown>.getJsonArray() <unknown>.set(<unknown>, <unknown>) java.lang.String.equals(<unknown>) org.apache.http.conn.scheme.Scheme.Scheme(java.lang.String, org.apache.http.conn.scheme.PlainSocketFactory, int) org.json.JSONObject.put(java.lang.String, java.lang.String) java.lang.String.equals(<unknown>)"],
    "c_callsites_added_t": ["android.util.Log.d(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService.importItems(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader, int, boolean) android.util.Log.d(java.lang.String, java.lang.String) android.util.Log.d(java.lang.String, java.lang.String) android.util.Log.i(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService.importTriggers(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader) <unknown>.JsonArrayOrObjectReader(org.codehaus.jackson.JsonParser) android.util.Log.d(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService.importTriggers(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader) com.inovex.zabbixmobile.api.ZabbixService.importHosts(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader, int) com.inovex.zabbixmobile.api.ZabbixService.importTriggers(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader) android.util.Log.d(java.lang.String, java.lang.String) android.util.Log.d(java.lang.String, java.lang.String) org.codehaus.jackson.JsonParser.getCurrentToken() org.codehaus.jackson.JsonParser.nextValue() com.inovex.zabbixmobile.api.ZabbixService.importEvents(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader, null) com.inovex.zabbixmobile.api.ZabbixService.importTriggers(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader) android.util.Log.d(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService.importEvents(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader, int)"],
    "c_methods_t": ["ApplicationData ApplicationItemRelationData ArrayList, String BasicHttpParams BufferedReader CacheData ContentValues CustomSSLSocketFactory Date DefaultHttpClient EventData GraphData GraphItemData HashSet, Long HistoryDetailData HostData HostGroupData HttpAuthorizationRequiredException HttpPost IOException IllegalStateException InputStreamReader Intent ItemData JSONArray JSONObject JsonArrayOrObjectReader JsonFactory NoAPIAccessException PreconditionFailedException RuntimeException SQLiteQueryBuilder Scheme SchemeRegistry ScreenData ScreenItemData StringBuilder StringEntity ThreadSafeClientConnManager TriggerData UsernamePasswordCredentials X509TrustManager _commitTransactionIfRecommended _endTransaction _queryBuffer _queryStream _startTransaction add addHeader append appendWhere authenticate beginTransaction close contains createJsonParser createSocket d delete endTransaction endsWith equals execute get getBoolean getColumnIndex getContent getCredentialsProvider getCurrentName getCurrentToken getDefaultSharedPreferences getDefaultType getEntity getInstance getInt getJSONArray getJSONObject getJsonArray getLong getMessage getParams getReasonPhrase getResources getSocketFactory getStatusCode getStatusLine getString getText getTime i importApplications importEvents importGraphItems importHostGroups importHosts importItems importScreenItems importTriggers inTransaction indexOf init insert isCached isClosed length load matches min moveToFirst moveToNext next nextProperty nextToken nextValue nextValueToken parseColor parseDouble parseInt parseLong printStackTrace put putExtra query read register replace replaceAll sendBroadcast set setCached setConnectionTimeout setContentCharset setCredentials setEntity setHostnameVerifier setRedirecting setTables setTransactionSuccessful setVersion showProgress split substring toString trim update"],
    "id": "inovex/zax\u0000src/com/inovex/zabbixmobile/api/ZabbixService.java\u00002bbdeb660e92821bffb04b3315e354e34764dc43\u0000df53c588a80d246f2f77494f72b9fc4b285728ad",
    "p_comments_t": ["\t\t\t// create ApplicationItemRelation /** \n * public, for the unit test\n */\n /** \n * import the hosts from stream\n * @param jsonArray stream\n * @param numHosts count of hosts for progressbar. null if unknown.\n * @return Object[] {(String) comma-separated all Hostnames, (Long) 1. host id}\n * @throws JsonParseException\n * @throws IOException\n */\n \t\t\t// result array found /** \n * import graph items\n * @param graphItems\n * @return true, if graphid column has to be updated from -1 to the correct graphid later.\n * @throws JsonParseException\n * @throws NumberFormatException\n * @throws IOException\n */\n \t\t\t\t\t\t// save only every 20th \t\t\t// wrong password. token remains null \t\t\t// the past 2 hours \t\t\t\t\t// data are unuseable, e.g. because it's a string /** \n * @param events stream\n * @param numEvents if null, no progressbar-update AND only isert, if it does not exist. If !null, progressbar-update AND always insert without checking\n * @throws JsonParseException\n * @throws IOException\n */\n \t\t\t\t\t// Precondition failed / Looks like Zabbix 1.8.2 \t\t\t// get API version \t\t\t// if #0 \"other\" does not exist yet, it has to be created \t\t\t\t\t// later the IDs will be replaced with the correct /** \n * zabbix api call. data will be parsed as json object on-the-fly. Caution: use this only for api calls with a small return data.\n * @param method\n * @param params\n * @return\n * @throws ClientProtocolException\n * @throws IOException\n * @throws JSONException\n * @throws HttpAuthorizationRequiredException\n * @throws NoAPIAccessException\n */\n /** \n * begin sql transaction\n */\n \t\t\t\t\t\t// first do a new auth and then try the same api call again \t\t\t\t// no itemid \t\t\t// count of items /** \n * init\n * @param context android context\n * @param zabbixLocalDB sqlite\n */\n \t\t\t// create applications that does not exist \t\t\t\t// so we use a fiction \t\t\t// only resouretype == 0 /** \n * probably too old zabbix <= 1.8.2\n */\n /** \n * zabbix auth. user and pwd from app preferences\n * @return true success\n * @throws ClientProtocolException\n * @throws IOException\n * @throws JSONException\n * @throws HttpAuthorizationRequiredException\n * @throws NoAPIAccessException\n */\n /** \n * close the last http stream\n */\n \t\t\t// Workaround: historydetails only comes if you use the correct \"history\"-parameter. /** \n * transforms the progress\n * @param start 0% => start%\n * @param end 100% => end%\n */\n \t\t\t\t// in Zabbix version <2.0, this is not default \t\t\t\t// file not found \t\t\t\t\t// hex string => color int \t\tHttpClientParams.setRedirecting(params, true); // redirecting \t\t\t// if applicable replace placeholder \t\t\t// if graphid-column was not set, this must be done later. temporary graphid=-1 \t\t// for GUI unit test, just return true /** \n * imports the \"warning\"-triggers\n * @throws JSONException\n * @throws IOException\n * @throws HttpAuthorizationRequiredException\n * @throws NoAPIAccessException\n */\n \t\t\t// event is parsed and can be inserted into the db \t\tpublic static final int EVENT_GET_TIME_FROM_SHIFT = 7*24*60*60; // -7 days \t\t// http request \t\t\t\t\t// store hosts namen \t\t\t\t// http auth failed \t\t\t\t\t// at this point itemid and hostid is unknown \t\t\t\t\t// import triggers \t\t\t// we try them all, until we get results. /** \n * importiert ein trigger mit dem attribute itemid. ggf. wird der trigger zuerst gelöscht und neu angelegt. imports a trigger with the attribute itemid. if trigger already exists, it will be removed first.\n * @param triggerid\n * @throws JSONException\n * @throws IOException\n * @throws HttpAuthorizationRequiredException\n * @throws NoAPIAccessException\n */\n \t\t\t\t\t// import hosts \t\t\t// for unit test \t\t\t\t// ignore \t\t\tlong time_from = time_till - ZabbixConfig.HISTORY_GET_TIME_FROM_SHIFT; // jetzt-2h \t\t\t// or a json object /** \n * zabbix error: no api access\n */\n /** \n * counts the sql inserts/updates and do a transaction commit to save the memory\n */\n \t\t\t// send intent to GUI \t\t\t\t\t// before zabbix 2.x the name field was \"description\" \t\t\t\t\t// if we get an empty array, we try another history parameter \t\t\t\t\t// store the first item id \t\t// check if the trigger exists and if the itemid was set /** \n * global constants\n */\n \t\t\t\t// create \"other\" hostgroup #1 \t\t\t// if there's no application, the ID #0 must be added (for other) \t\t\t\t\t// because of this, all applicationrelations will be saved with itemid and hostid \"-1\". \t\tpublic static final int HISTORY_GET_TIME_FROM_SHIFT = 8*60*60; // -8h \t\t\t\t\t\t.put(\"history\", historytype) // for integer ? /** \n * interface to connect to the zabbix server\n */\n /** \n * acknowledge zabbix event. Sets ack-flag with comment. Caution: This is supported only for Zabbix version >= 1.8.4\n * @param eventid\n * @param comment\n * @return true, success.\n * @throws ClientProtocolException\n * @throws IOException\n * @throws JSONException\n * @throws HttpAuthorizationRequiredException\n * @throws NoAPIAccessException\n */\n \t\t\t// store the last stream to close it if an exception will be thrown /** \n * zabbix api call as stream.\n * @param method\n * @param params\n * @return stream im json array wrapper\n * @throws JSONException\n * @throws IOException\n * @throws HttpAuthorizationRequiredException\n * @throws NoAPIAccessException\n */\n \t\t// if applicable http auth \t\t\t// correct historytype found and there are data \t\t\t\t// count of the entries cannot be detected (zabbix bug), /** \n * import items from stream.\n * @param items stream\n * @param numItems count for progressbar, if 0 no progressbarupdate\n * @param checkBeforeInsert if true, only make an insert if item does not exist\n * @return the first item id\n * @throws JsonParseException\n * @throws IOException\n */\n \t\t\t// collect all graphids /** \n * http auth is needed\n */\n \t\t\t// ignore for unit test /** \n * commit sql transaction\n */\n \t\t\t// delete old graphs \t\t\t// host without group will get group #0 (other) \t\t\t// there's no result \t\t\tif (jp.nextToken() != JsonToken.START_ARRAY) { // go inside the array \t\t// if applicable, transform the progress \t\t\t// SSL not trusted \t\t\t// internet problem \t\tpublic static final int CACHE_LIFETIME_APPLICATIONS = 2*24*60*60; // 2 days \t\t\t\t\t// since zabbix 2.x is the name of the item \"name\" \t\t\t// now the \"-1\" IDs of applicationsrelation will be replaced with the correct itemID \t\t\t// get count of hosts /** \n * import the newest events\n * @throws ClientProtocolException\n * @throws IOException\n * @throws JSONException\n * @throws HttpAuthorizationRequiredException\n * @throws NoAPIAccessException\n */\n /** \n * updates the progressbar in the gui\n * @param i 0..100\n */\n \t\t\t\t\t\t// ignore \t\t\t\t\t// first do a new auth and then try the same api call again /** \n * import the newest event of a trigger\n * @param triggerid\n * @throws JSONException\n * @throws IOException\n * @throws HttpAuthorizationRequiredException\n * @throws NoAPIAccessException\n */\n \t\t// it can be an (empty) array \t\t\t// this parameter can be \"null\" or a number 0-4. Because we don't know when to use which,"],
    "p_email_sni": "jonas.gehring@inovex.de",
    "c_callsites_removed_t": ["com.inovex.zabbixmobile.api.ZabbixService.importTriggers(com.inovex.zabbixmobile.api.JsonArrayReader) <unknown>.JsonArrayReader(org.codehaus.jackson.JsonParser) com.inovex.zabbixmobile.api.ZabbixService.importTriggers(com.inovex.zabbixmobile.api.JsonArrayReader) com.inovex.zabbixmobile.api.ZabbixService.importEvents(com.inovex.zabbixmobile.api.JsonArrayReader, int) com.inovex.zabbixmobile.api.ZabbixService.importTriggers(com.inovex.zabbixmobile.api.JsonArrayReader) com.inovex.zabbixmobile.api.ZabbixService.importItems(com.inovex.zabbixmobile.api.JsonArrayReader, int, boolean) com.inovex.zabbixmobile.api.ZabbixService.importHosts(com.inovex.zabbixmobile.api.JsonArrayReader, int) com.inovex.zabbixmobile.api.ZabbixService.importTriggers(com.inovex.zabbixmobile.api.JsonArrayReader) com.inovex.zabbixmobile.api.ZabbixService.importEvents(com.inovex.zabbixmobile.api.JsonArrayReader, null)"],
    "c_callsites_cs": "<unknown>.set(<unknown>, <unknown>)#org.apache.http.HttpEntity.getContent()#java.lang.String.equals(java.lang.String)#org.json.JSONArray.JSONArray()#<unknown>.set(<unknown>, java.lang.Object)#org.json.JSONObject.put(java.lang.String, java.lang.Integer)#org.json.JSONArray.put(java.lang.String)#org.json.JSONObject.JSONObject()#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.codehaus.jackson.JsonFactory.createJsonParser(java.io.InputStream)#java.lang.String.equals(<unknown>)#org.apache.http.StatusLine.getStatusCode()#<unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>)#org.json.JSONObject.put(java.lang.String, java.lang.String)#android.database.sqlite.SQLiteDatabase.inTransaction()#android.util.Log.d(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService._startTransaction()#java.lang.String.equals(java.lang.String)#org.codehaus.jackson.JsonFactory.JsonFactory()#com.inovex.zabbixmobile.api.ZabbixService._endTransaction()#org.json.JSONObject.put(java.lang.String, int)#android.content.ContentValues.ContentValues(int)#org.apache.http.conn.scheme.SchemeRegistry.SchemeRegistry()#<unknown>.insert(android.database.sqlite.SQLiteDatabase)#<unknown>.insert(android.database.sqlite.SQLiteDatabase)#com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject)#com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject)#com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject)#org.json.JSONObject.getJSONObject(java.lang.String)#java.io.InputStreamReader.InputStreamReader(java.io.InputStream)#android.content.Intent.putExtra(java.lang.String, <unknown>)#org.json.JSONArray.length()#java.lang.String.equals(java.lang.String)#<unknown>.set(<unknown>, <unknown>)#java.lang.String.equals(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService.PreconditionFailedException.PreconditionFailedException()#java.lang.StringBuilder.StringBuilder()#android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null)#<unknown>.nextValueToken()#org.json.JSONObject.JSONObject()#org.json.JSONObject.put(java.lang.String, int)#org.json.JSONObject.put(java.lang.String, org.json.JSONArray)#java.lang.String.equals(<unknown>)#<unknown>.get(<unknown>)#<unknown>.insert(android.database.sqlite.SQLiteDatabase)#android.content.Intent.putExtra(java.lang.String, <unknown>)#java.lang.String.equals(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService.importItems(<unknown>, int, boolean)#com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, java.lang.String, int)#android.util.Log.d(java.lang.String, java.lang.String)#org.json.JSONObject.put(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject)#org.apache.http.conn.scheme.Scheme.Scheme(java.lang.String, org.apache.http.conn.ssl.SSLSocketFactory, int)#org.apache.http.HttpEntity.getContent()#org.codehaus.jackson.JsonParser.close()#java.lang.String.equals(<unknown>)#<unknown>.nextValueToken()#<unknown>.getCurrentName()#org.json.JSONArray.JSONArray(java.util.Set<java.lang.Long>)#<unknown>.nextValueToken()#android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null)#<unknown>.getJsonArray()#com.inovex.zabbixmobile.api.ZabbixService._startTransaction()#org.json.JSONArray.JSONArray()#<unknown>.nextProperty()#java.lang.String.equals(java.lang.String)#android.database.sqlite.SQLiteDatabase.update(<unknown>, android.content.ContentValues, <unknown>, null)#java.util.Set<java.lang.Long>.add(<unknown>)#<unknown>.get(<unknown>)#<unknown>.get(<unknown>)#android.content.ContentValues.put(<unknown>, java.lang.Long)#java.lang.String.equals(java.lang.String)#org.apache.http.StatusLine.getReasonPhrase()#java.lang.RuntimeException.RuntimeException(java.lang.String)#<unknown>.nextProperty()#java.lang.Throwable.printStackTrace()#java.lang.String.equals(<unknown>)#java.lang.Long.parseLong(<unknown>)#org.json.JSONObject.put(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject)#<unknown>.getCurrentName()#android.content.ContentValues.put(<unknown>, java.lang.Long)#org.apache.http.entity.StringEntity.StringEntity(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject)#java.lang.String.equals(<unknown>)#<unknown>.EventData()#<unknown>.next()#<unknown>.set(<unknown>, <unknown>)#com.inovex.zabbixmobile.api.ZabbixService.CustomSSLSocketFactory.CustomSSLSocketFactory(java.security.KeyStore)#com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject)#<unknown>.getCurrentName()#java.util.List<java.lang.String>.add(java.lang.String)#org.json.JSONObject.put(java.lang.String, int)#<unknown>.getText()#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.apache.http.conn.ssl.SSLSocketFactory.setHostnameVerifier(org.apache.http.conn.ssl.X509HostnameVerifier)#<unknown>.set(<unknown>, <unknown>)#<unknown>.getText()#org.json.JSONObject.put(java.lang.String, long)#java.util.Date.Date()#android.util.Log.i(java.lang.String, java.lang.String)#org.json.JSONObject.put(java.lang.String, int)#org.json.JSONObject.put(java.lang.String, int)#<unknown>.set(<unknown>, <unknown>)#com.inovex.zabbixmobile.api.ZabbixService.authenticate()#android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null)#android.util.Log.d(java.lang.String, java.lang.String)#java.lang.String.equals(java.lang.String)#org.apache.http.HttpResponse.getEntity()#org.json.JSONObject.JSONObject()#com.inovex.zabbixmobile.api.ZabbixService.importItems(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader, int, boolean)#com.inovex.zabbixmobile.api.ZabbixService._startTransaction()#com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, null, int)#java.io.BufferedReader.read()#org.json.JSONObject.put(java.lang.String, long)#<unknown>.set(<unknown>, <unknown>)#android.database.Cursor.getLong(<unknown>)#java.lang.IllegalStateException.IllegalStateException(java.lang.String)#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.getCurrentName()#android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null)#android.util.Log.d(java.lang.String, java.lang.String)#<unknown>.set(<unknown>, <unknown>)#java.lang.String.equals(<unknown>)#org.json.JSONObject.put(java.lang.String, java.lang.String)#android.database.Cursor.moveToFirst()#com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, java.lang.String)#android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null)#java.lang.String.equals(java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, java.lang.String)#<unknown>.getText()#org.json.JSONObject.put(java.lang.String, java.lang.String)#android.content.Intent.putExtra(java.lang.String, <unknown>)#<unknown>.getCurrentName()#android.content.res.Resources.getString(<unknown>)#android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null)#android.database.sqlite.SQLiteDatabase.setTransactionSuccessful()#<unknown>.next()#<unknown>.getText()#<unknown>.nextValueToken()#com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject)#com.inovex.zabbixmobile.api.ZabbixService.showProgress(<unknown>)#java.io.IOException.IOException(java.lang.String)#<unknown>.getCurrentName()#android.util.Log.d(java.lang.String, java.lang.String)#java.lang.Object.toString()#org.json.JSONObject.toString()#<unknown>.set(<unknown>, <unknown>)#org.json.JSONArray.JSONArray()#org.apache.http.HttpResponse.getStatusLine()#org.json.JSONArray.JSONArray()#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.apache.http.impl.client.DefaultHttpClient.DefaultHttpClient()#org.json.JSONObject.put(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject)#org.apache.http.HttpResponse.getStatusLine()#java.lang.String.equals(<unknown>)#java.util.Date.Date()#android.util.Log.i(java.lang.String, java.lang.String)#android.content.Context.getResources()#org.apache.http.impl.client.CloseableHttpClient.execute(org.apache.http.client.methods.HttpPost)#com.inovex.zabbixmobile.api.ZabbixService._commitTransactionIfRecommended()#com.inovex.zabbixmobile.api.ZabbixService.importHostGroups(<unknown>)#android.content.Context.sendBroadcast(android.content.Intent)#android.content.Context.sendBroadcast(android.content.Intent)#com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, null, int)#java.lang.Integer.parseInt(<unknown>)#<unknown>.ApplicationData()#com.inovex.zabbixmobile.api.ZabbixService.NoAPIAccessException.NoAPIAccessException()#com.inovex.zabbixmobile.api.ZabbixService._commitTransactionIfRecommended()#<unknown>.getJsonArray()#org.apache.http.message.AbstractHttpMessage.addHeader(java.lang.String, java.lang.String)#org.json.JSONObject.put(java.lang.String, int)#java.lang.String.replace(java.lang.String, java.lang.String)#org.json.JSONArray.JSONArray()#<unknown>.set(<unknown>, <unknown>)#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.set(<unknown>, <unknown>)#org.json.JSONArray.JSONArray()#java.lang.String.equals(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, java.lang.String, int)#<unknown>.nextProperty()#<unknown>.set(<unknown>, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject)#org.json.JSONObject.JSONObject()#java.lang.String.contains(java.lang.String)#org.apache.http.client.methods.HttpEntityEnclosingRequestBase.setEntity(org.apache.http.entity.StringEntity)#com.inovex.zabbixmobile.api.ZabbixService.importTriggers(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader)#org.json.JSONObject.put(java.lang.String, int)#<unknown>.HostGroupData()#<unknown>.JsonArrayOrObjectReader(org.codehaus.jackson.JsonParser)#<unknown>.HostGroupData()#<unknown>.nextProperty()#java.lang.Long.parseLong(<unknown>)#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.json.JSONObject.put(java.lang.String, org.json.JSONArray)#org.json.JSONObject.put(java.lang.String, java.lang.Integer)#<unknown>.set(<unknown>, <unknown>)#<unknown>.close()#org.json.JSONObject.put(java.lang.String, org.json.JSONArray)#<unknown>.set(<unknown>, <unknown>)#java.lang.String.equals(java.lang.String)#android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null)#<unknown>.next()#org.json.JSONObject.toString()#java.lang.String.equals(<unknown>)#java.lang.String.equals(<unknown>)#android.database.sqlite.SQLiteDatabase.query(<unknown>, null, <unknown>, null, null, null, null)#<unknown>.set(<unknown>, <unknown>)#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.CacheData()#<unknown>.getText()#com.inovex.zabbixmobile.api.ZabbixService._startTransaction()#<unknown>.set(<unknown>, <unknown>)#com.inovex.zabbixmobile.api.ZabbixService._endTransaction()#<unknown>.set(<unknown>, int)#<unknown>.getJsonArray()#java.lang.String.equals(<unknown>)#java.util.Date.getTime()#java.lang.String.equals(java.lang.String)#org.json.JSONObject.put(java.lang.String, int)#<unknown>.set(<unknown>, <unknown>)#java.lang.Integer.parseInt(<unknown>)#org.codehaus.jackson.JsonParser.getCurrentName()#<unknown>.nextProperty()#com.inovex.zabbixmobile.api.ZabbixService._endTransaction()#java.lang.String.equals(<unknown>)#org.json.JSONObject.put(java.lang.String, int)#android.database.sqlite.SQLiteDatabase.update(<unknown>, android.content.ContentValues, <unknown>, null)#com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject)#com.inovex.zabbixmobile.api.ZabbixService._endTransaction()#java.lang.StringBuilder.append(char)#<unknown>.set(<unknown>, <unknown>)#<unknown>.get(<unknown>)#<unknown>.set(<unknown>, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject)#org.json.JSONObject.put(java.lang.String, java.lang.String)#android.database.Cursor.getLong(<unknown>)#java.lang.String.equals(<unknown>)#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.json.JSONObject.JSONObject()#org.apache.http.params.HttpProtocolParams.setVersion(org.apache.http.params.HttpParams, org.apache.http.HttpVersion)#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.HistoryDetailData()#android.util.Log.d(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService._startTransaction()#<unknown>.next()#<unknown>.set(<unknown>, <unknown>)#<unknown>.nextValueToken()#org.json.JSONObject.JSONObject()#java.lang.String.equals(<unknown>)#java.lang.Long.parseLong(<unknown>)#java.lang.Integer.parseInt(<unknown>)#org.apache.http.client.methods.HttpPost.HttpPost(java.lang.String)#org.apache.http.StatusLine.getStatusCode()#<unknown>.set(<unknown>, int)#java.lang.String.equals(java.lang.String)#java.lang.String.equals(<unknown>)#java.lang.String.equals(<unknown>)#<unknown>.getCurrentName()#java.util.ArrayList<java.lang.String>.ArrayList, String()#com.inovex.zabbixmobile.api.ZabbixService._startTransaction()#com.inovex.zabbixmobile.api.ZabbixService.importTriggers(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader)#org.json.JSONArray.put(java.lang.String)#<unknown>.nextValueToken()#org.json.JSONArray.put(java.lang.String)#<unknown>.set(<unknown>, <unknown>)#org.json.JSONObject.put(java.lang.String, int)#com.inovex.zabbixmobile.api.ZabbixService.importItems(<unknown>, int, boolean)#org.json.JSONObject.JSONObject()#com.inovex.zabbixmobile.api.ZabbixService.importTriggers(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService.importGraphItems(<unknown>)#<unknown>.ScreenItemData()#<unknown>.set(<unknown>, <unknown>)#<unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>)#android.preference.PreferenceManager.getDefaultSharedPreferences(android.content.Context)#org.json.JSONObject.length()#<unknown>.nextValueToken()#java.util.HashSet<java.lang.Long>.HashSet, Long()#java.lang.String.equals(java.lang.String)#android.content.SharedPreferences.getBoolean(java.lang.String, boolean)#<unknown>.insert(android.database.sqlite.SQLiteDatabase)#org.json.JSONObject.put(java.lang.String, org.json.JSONArray)#<unknown>.close()#com.inovex.zabbixmobile.api.ZabbixService.importHosts(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader, int)#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.next()#android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null)#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.json.JSONObject.getString(java.lang.String)#<unknown>.set(<unknown>, <unknown>)#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.close()#org.json.JSONObject.getString(java.lang.String)#java.lang.String.equals(java.lang.String)#java.lang.Long.parseLong(<unknown>)#org.codehaus.jackson.JsonParser.isClosed()#org.json.JSONObject.put(java.lang.String, int)#org.json.JSONObject.put(java.lang.String, org.json.JSONArray)#org.json.JSONObject.put(java.lang.String, long)#<unknown>.close()#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.set(<unknown>, long)#org.json.JSONObject.put(java.lang.String, org.json.JSONObject)#<unknown>.set(<unknown>, <unknown>)#com.inovex.zabbixmobile.api.ZabbixService._endTransaction()#java.lang.String.replaceAll(java.lang.String, java.lang.String)#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.nextValueToken()#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.apache.http.params.BasicHttpParams.BasicHttpParams()#android.database.sqlite.SQLiteDatabase.beginTransaction()#com.inovex.zabbixmobile.api.ZabbixService._commitTransactionIfRecommended()#com.inovex.zabbixmobile.api.ZabbixService._endTransaction()#java.lang.String.equals(<unknown>)#<unknown>.insert(android.database.sqlite.SQLiteDatabase)#<unknown>.insert(android.database.sqlite.SQLiteDatabase)#org.json.JSONObject.put(java.lang.String, int)#<unknown>.next()#com.inovex.zabbixmobile.api.ZabbixService._startTransaction()#<unknown>.getJsonArray()#android.content.SharedPreferences.getString(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, null, int)#javax.net.SocketFactory.createSocket()#java.lang.Long.parseLong(<unknown>)#org.apache.http.client.CredentialsProvider.setCredentials(org.apache.http.auth.AuthScope, org.apache.http.auth.UsernamePasswordCredentials)#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.next()#com.inovex.zabbixmobile.api.ZabbixService.HttpAuthorizationRequiredException.HttpAuthorizationRequiredException()#android.database.sqlite.SQLiteQueryBuilder.query(android.database.sqlite.SQLiteDatabase, null, null, null, null, null, null)#java.util.Date.Date()#com.inovex.zabbixmobile.api.ZabbixService._commitTransactionIfRecommended()#<unknown>.set(<unknown>, java.lang.String)#org.json.JSONObject.JSONObject()#<unknown>.next()#<unknown>.set(<unknown>, <unknown>)#<unknown>.set(<unknown>, <unknown>)#com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject)#java.lang.String.equals(java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, java.lang.String)#java.lang.String.indexOf(char)#android.database.sqlite.SQLiteDatabase.query(<unknown>, null, <unknown>, null, null, null, null)#android.preference.PreferenceManager.getDefaultSharedPreferences(android.content.Context)#<unknown>.nextProperty()#org.apache.http.impl.client.CloseableHttpClient.execute(org.apache.http.client.methods.HttpPost)#<unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>)#com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, java.lang.String)#org.json.JSONObject.JSONObject()#<unknown>.close()#android.database.Cursor.getColumnIndex(<unknown>)#android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null)#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.nextProperty()#org.apache.http.conn.scheme.PlainSocketFactory.getSocketFactory()#com.inovex.zabbixmobile.api.ZabbixService._commitTransactionIfRecommended()#com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject)#java.lang.StringBuilder.toString()#org.json.JSONObject.put(java.lang.String, java.lang.String)#android.database.sqlite.SQLiteQueryBuilder.SQLiteQueryBuilder()#<unknown>.insert(android.database.sqlite.SQLiteDatabase)#org.apache.http.conn.scheme.SchemeRegistry.register(org.apache.http.conn.scheme.Scheme)#<unknown>.set(<unknown>, <unknown>)#org.json.JSONObject.JSONObject(java.lang.String)#java.lang.String.equals(<unknown>)#<unknown>.set(<unknown>, <unknown>)#<unknown>.set(<unknown>, <unknown>)#java.lang.IllegalStateException.IllegalStateException(java.lang.String)#java.lang.Double.parseDouble(<unknown>)#android.content.ContentValues.put(<unknown>, java.lang.Long)#android.database.sqlite.SQLiteQueryBuilder.appendWhere(<unknown>)#org.apache.http.conn.scheme.SchemeRegistry.register(org.apache.http.conn.scheme.Scheme)#org.json.JSONObject.getInt(java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService.importHosts(<unknown>, null)#org.json.JSONObject.put(java.lang.String, boolean)#java.lang.Long.parseLong(<unknown>)#java.lang.String.indexOf(char)#android.database.sqlite.SQLiteQueryBuilder.appendWhere(<unknown>)#java.lang.String.length()#java.lang.String.equals(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject)#<unknown>.nextProperty()#<unknown>.next()#android.content.SharedPreferences.getString(java.lang.String, java.lang.String)#<unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>)#com.inovex.zabbixmobile.api.ZabbixService.importTriggers(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader)#<unknown>.GraphData()#org.json.JSONArray.put(java.lang.String)#org.apache.http.impl.client.AbstractHttpClient.getParams()#<unknown>.set(<unknown>, long)#<unknown>.set(<unknown>, <unknown>)#org.json.JSONObject.getJSONObject(java.lang.String)#org.json.JSONObject.put(java.lang.String, java.lang.String)#java.lang.String.equals(java.lang.String)#org.json.JSONObject.getString(java.lang.String)#java.lang.String.equals(<unknown>)#java.lang.String.equals(<unknown>)#<unknown>.getCurrentName()#java.lang.String.equals(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService.showProgress(int)#<unknown>.getCurrentName()#com.inovex.zabbixmobile.api.ZabbixService.importHosts(<unknown>, null)#com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, java.lang.String, int)#org.json.JSONObject.put(java.lang.String, int)#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.close()#java.lang.String.replace(java.lang.String, java.lang.String)#java.lang.String.equals(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject)#com.inovex.zabbixmobile.api.ZabbixService._endTransaction()#android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null)#android.database.Cursor.moveToNext()#<unknown>.HostData()#<unknown>.set(<unknown>, long)#<unknown>.next()#com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject)#android.database.sqlite.SQLiteQueryBuilder.setTables(<unknown>)#java.util.Date.getTime()#org.json.JSONObject.put(java.lang.String, long)#android.content.ContentValues.ContentValues(int)#java.lang.Long.parseLong(<unknown>)#org.apache.http.HttpResponse.getEntity()#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.getText()#java.lang.String.equals(java.lang.String)#<unknown>.set(<unknown>, <unknown>)#<unknown>.set(<unknown>, <unknown>)#javax.net.ssl.SSLContext.init(null, javax.net.ssl.TrustManager[], null)#android.database.sqlite.SQLiteDatabase.endTransaction()#java.lang.String.equals(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, java.lang.String)#android.util.Log.d(java.lang.String, java.lang.String)#<unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>)#<unknown>.next()#<unknown>.close()#<unknown>.insert(android.database.sqlite.SQLiteDatabase)#org.json.JSONObject.put(java.lang.String, java.lang.String)#java.lang.Throwable.getMessage()#java.lang.String.equals(<unknown>)#java.lang.String.equals(<unknown>)#<unknown>.set(<unknown>, <unknown>)#com.inovex.zabbixmobile.api.ZabbixService._endTransaction()#javax.net.ssl.SSLContext.getSocketFactory()#org.json.JSONObject.JSONObject()#android.content.Context.getResources()#org.json.JSONObject.put(java.lang.String, int)#com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, null)#com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, java.lang.String, int)#java.lang.String.matches(java.lang.String)#<unknown>.set(<unknown>, <unknown>)#org.json.JSONArray.put(java.lang.String)#<unknown>.set(<unknown>, <unknown>)#android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null)#android.content.Context.sendBroadcast(android.content.Intent)#org.json.JSONObject.getJSONObject(java.lang.String)#<unknown>.get(<unknown>)#android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null)#java.lang.String.equals(<unknown>)#android.content.SharedPreferences.getBoolean(java.lang.String, boolean)#java.lang.Throwable.printStackTrace()#android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null)#org.json.JSONObject.put(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService._startTransaction()#android.content.Intent.putExtra(java.lang.String, int)#org.json.JSONObject.JSONObject()#<unknown>.getText()#com.inovex.zabbixmobile.api.ZabbixService._endTransaction()#org.apache.http.client.methods.HttpPost.HttpPost(java.lang.String)#android.content.SharedPreferences.getString(java.lang.String, java.lang.String)#<unknown>.GraphItemData()#com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, java.lang.String, int)#<unknown>.nextValueToken()#org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager.ThreadSafeClientConnManager(org.apache.http.params.HttpParams, org.apache.http.conn.scheme.SchemeRegistry)#<unknown>.ApplicationItemRelationData()#java.lang.Object.toString()#android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null)#org.json.JSONArray.JSONArray()#java.lang.String.equals(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService._startTransaction()#org.json.JSONObject.put(java.lang.String, org.json.JSONArray)#com.inovex.zabbixmobile.api.ZabbixService.importApplications(int, int, <unknown>)#<unknown>.set(<unknown>, int)#org.json.JSONObject.put(java.lang.String, int)#com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, java.lang.String, int)#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.json.JSONObject.JSONObject()#java.lang.Math.min(int, int)#com.inovex.zabbixmobile.api.ZabbixService.showProgress(<unknown>)#java.lang.String.equals(java.lang.String)#android.content.Intent.Intent(<unknown>)#java.lang.String.equals(<unknown>)#org.json.JSONObject.put(java.lang.String, int)#javax.net.ssl.SSLContext.getInstance(java.lang.String)#android.content.res.Resources.getString(<unknown>)#org.json.JSONObject.JSONObject()#android.content.Intent.Intent(<unknown>)#java.lang.String.equals(<unknown>)#<unknown>.nextProperty()#javax.net.ssl.SSLSocketFactory.createSocket(java.net.Socket, java.lang.String, int, boolean)#org.json.JSONObject.put(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject)#<unknown>.get(<unknown>)#java.io.IOException.IOException(java.lang.String)#java.lang.String.trim()#java.lang.String.contains(java.lang.String)#org.apache.http.entity.StringEntity.StringEntity(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService._endTransaction()#.X509TrustManager()#com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject)#android.graphics.Color.parseColor(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, null)#org.json.JSONObject.getJSONArray(java.lang.String)#org.apache.http.client.params.HttpClientParams.setRedirecting(org.apache.http.params.HttpParams, boolean)#com.inovex.zabbixmobile.api.ZabbixService._startTransaction()#<unknown>.getCurrentName()#java.lang.String.equals(<unknown>)#java.lang.Long.parseLong(<unknown>)#android.util.Log.d(java.lang.String, java.lang.String)#org.codehaus.jackson.JsonParser.getCurrentToken()#org.codehaus.jackson.JsonParser.nextValue()#java.lang.Long.parseLong(<unknown>)#<unknown>.getText()#java.util.Date.getTime()#android.content.Intent.putExtra(java.lang.String, <unknown>)#android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null)#<unknown>.get(<unknown>)#android.database.Cursor.moveToFirst()#org.apache.http.client.methods.HttpEntityEnclosingRequestBase.setEntity(org.apache.http.entity.StringEntity)#com.inovex.zabbixmobile.api.ZabbixService._commitTransactionIfRecommended()#com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, null)#android.database.sqlite.SQLiteQueryBuilder.appendWhere(<unknown>)#org.apache.http.auth.UsernamePasswordCredentials.UsernamePasswordCredentials(java.lang.String, java.lang.String)#java.util.Date.getTime()#java.lang.String.equals(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService._endTransaction()#org.json.JSONObject.put(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService.authenticate()#java.lang.String.equals(<unknown>)#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.json.JSONObject.put(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService.NoAPIAccessException.NoAPIAccessException()#org.json.JSONArray.put(long)#com.inovex.zabbixmobile.api.ZabbixService._endTransaction()#android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null)#<unknown>.getJsonArray()#<unknown>.ScreenData()#java.util.Date.Date()#java.util.Date.Date()#<unknown>.set(<unknown>, long)#<unknown>.getCurrentName()#org.json.JSONObject.put(java.lang.String, org.json.JSONArray)#<unknown>.set(<unknown>, long)#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.apache.http.params.HttpConnectionParams.setConnectionTimeout(org.apache.http.params.HttpParams, int)#org.json.JSONArray.length()#<unknown>.set(<unknown>, java.lang.String)#<unknown>.set(<unknown>, long)#java.util.Date.getTime()#<unknown>.set(<unknown>, <unknown>)#<unknown>.set(<unknown>, <unknown>)#org.json.JSONArray.put(java.lang.String)#java.lang.String.equals(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService.importScreenItems(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService.HttpAuthorizationRequiredException.HttpAuthorizationRequiredException()#<unknown>.getText()#org.json.JSONObject.put(java.lang.String, org.json.JSONArray)#com.inovex.zabbixmobile.api.ZabbixService.importEvents(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader, null)#org.json.JSONObject.JSONObject()#<unknown>.set(<unknown>, <unknown>)#com.inovex.zabbixmobile.api.ZabbixService.importHostGroups(<unknown>)#org.json.JSONObject.toString()#java.lang.Integer.parseInt(<unknown>)#java.lang.String.equals(java.lang.String)#org.apache.http.params.HttpProtocolParams.setContentCharset(org.apache.http.params.HttpParams, java.lang.String)#<unknown>.get(<unknown>)#android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null)#java.lang.String.equals(<unknown>)#<unknown>.set(<unknown>, <unknown>)#<unknown>.nextValueToken()#<unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>)#org.json.JSONObject.put(java.lang.String, org.json.JSONArray)#org.json.JSONObject.put(java.lang.String, java.lang.Integer)#<unknown>.getText()#<unknown>.set(<unknown>, <unknown>)#org.apache.http.message.AbstractHttpMessage.addHeader(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject)#org.json.JSONObject.getJSONArray(java.lang.String)#java.security.KeyStore.load(null, null)#java.lang.String.replace(java.lang.String, java.lang.String)#java.lang.Long.parseLong(<unknown>)#org.json.JSONObject.toString()#com.inovex.zabbixmobile.api.ZabbixService.importTriggers(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader)#android.util.Log.d(java.lang.String, java.lang.String)#android.content.SharedPreferences.getString(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, java.lang.String)#<unknown>.TriggerData()#android.content.SharedPreferences.getString(java.lang.String, java.lang.String)#android.content.Intent.Intent(<unknown>)#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.apache.http.impl.client.AbstractHttpClient.getCredentialsProvider()#<unknown>.set(<unknown>, <unknown>)#java.io.IOException.IOException(java.lang.String)#java.lang.String.trim()#org.json.JSONObject.put(java.lang.String, org.json.JSONArray)#java.lang.String.split(java.lang.String)#java.lang.String.equals(java.lang.String)#java.lang.String.endsWith(java.lang.String)#<unknown>.set(<unknown>, int)#com.inovex.zabbixmobile.api.ZabbixService.showProgress(int)#<unknown>.ItemData()#org.json.JSONObject.put(java.lang.String, int)#<unknown>.set(<unknown>, <unknown>)#org.codehaus.jackson.JsonParser.getText()#android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null)#org.apache.http.impl.client.DefaultHttpClient.DefaultHttpClient(org.apache.http.conn.ClientConnectionManager, org.apache.http.params.HttpParams)#<unknown>.close()#java.lang.IllegalStateException.IllegalStateException(java.lang.String)#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.codehaus.jackson.JsonParser.nextToken()#android.database.Cursor.getColumnIndex(<unknown>)#org.json.JSONObject.put(java.lang.String, org.json.JSONArray)#<unknown>.nextValueToken()#com.inovex.zabbixmobile.api.ZabbixService._startTransaction()#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.set(<unknown>, java.lang.String)#java.lang.String.substring(int, int)#java.lang.Long.parseLong(<unknown>)#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.json.JSONObject.getInt(java.lang.String)#java.lang.String.equals(java.lang.String)#<unknown>.set(<unknown>, <unknown>)#<unknown>.set(<unknown>, <unknown>)#java.security.KeyStore.getInstance(java.lang.String)#java.lang.Integer.parseInt(<unknown>)#java.lang.String.equals(java.lang.String)#<unknown>.nextProperty()#android.content.Intent.putExtra(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, null)#<unknown>.set(<unknown>, int)#java.io.BufferedReader.BufferedReader(java.io.InputStreamReader)#com.inovex.zabbixmobile.api.ZabbixService.importEvents(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader, int)#java.security.KeyStore.getDefaultType()#java.lang.String.equals(<unknown>)#<unknown>.getText()#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.set(<unknown>, java.lang.Object)#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.insert(android.database.sqlite.SQLiteDatabase)#<unknown>.nextProperty()#com.inovex.zabbixmobile.api.ZabbixService._startTransaction()#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.close()#<unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>)#org.json.JSONObject.put(java.lang.String, long)#com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, null, int)#<unknown>.getJsonArray()#<unknown>.set(<unknown>, <unknown>)#java.lang.String.equals(<unknown>)#org.apache.http.conn.scheme.Scheme.Scheme(java.lang.String, org.apache.http.conn.scheme.PlainSocketFactory, int)#org.json.JSONObject.put(java.lang.String, java.lang.String)#java.lang.String.equals(<unknown>)",
    "p_body_t": ["<empty>"],
    "c_patch_t": [" \t * @throws HttpAuthorizationRequiredException\n \t * @throws NoAPIAccessException\n \t */\n-\tprivate JsonArrayReader _queryStream(String method, JSONObject params) throws JSONException, IOException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n+\tprivate JsonArrayOrObjectReader _queryStream(String method, JSONObject params) throws JSONException, IOException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n \t\t// http request\n \t\tHttpPost post = new HttpPost(url);\n \t\tpost.addHeader(\"Content-Type\", \"application/json; charset=utf-8\");\n@@ -355,6 +355,9 @@ public class ZabbixService {\n \t\t\t.put(\"auth\", token)\n \t\t\t.put(\"id\", 0);\n \n+\t\tLog.d(\"ZabbixService\", \"_queryStream: \"+url);\n+\t\tLog.d(\"ZabbixService\", \"_queryStream: \"+json.toString());\n+\n \t\tpost.setEntity(new StringEntity(json.toString(), \"UTF-8\"));\n \t\ttry {\n \t\t\tHttpResponse resp = httpClient.execute(post);\n@@ -384,7 +387,7 @@ public class ZabbixService {\n \t\t\t\t\t\t// first do a new auth and then try the same api call again\n \t\t\t\t\t\tif (authenticate() && !_notAuthorizedRetry) {\n \t\t\t\t\t\t\t_notAuthorizedRetry = true;\n-\t\t\t\t\t\t\tJsonArrayReader r = _queryStream(method, params);\n+\t\t\t\t\t\t\tJsonArrayOrObjectReader r = _queryStream(method, params);\n \t\t\t\t\t\t\t_notAuthorizedRetry = false;\n \t\t\t\t\t\t\treturn r;\n \t\t\t\t\t\t} else throw new IllegalStateException(errortxt);\n@@ -393,10 +396,20 @@ public class ZabbixService {\n \t\t\t} while (!jp.getCurrentName().equals(\"result\"));\n \n \t\t\t// result array found\n-\t\t\tif (jp.nextToken() != JsonToken.START_ARRAY) { // go inside the array\n+\t\t\tif (jp.nextToken() != JsonToken.START_ARRAY && jp.getCurrentToken() != JsonToken.START_OBJECT) { // go inside the array\n+\t\t\t\ttry {\n+\t\t\t\t\tLog.d(\"ZabbixService\", \"current token: \"+jp.getCurrentToken());\n+\t\t\t\t\tLog.d(\"ZabbixService\", \"current name: \"+jp.getCurrentName());\n+\t\t\t\t\tLog.d(\"ZabbixService\", \"get text: \"+jp.getText());\n+\t\t\t\t\tLog.d(\"ZabbixService\", \"next value: \"+jp.nextValue());\n+\t\t\t\t\tLog.d(\"ZabbixService\", \"next token: \"+jp.nextToken());\n+\t\t\t\t\tLog.d(\"ZabbixService\", \"current token: \"+jp.getCurrentToken());\n+\t\t\t\t\tLog.d(\"ZabbixService\", \"current name: \"+jp.getCurrentName());\n+\t\t\t\t\tLog.d(\"ZabbixService\", \"get text: \"+jp.getText());\n+\t\t\t\t} catch (Exception e) {}\n \t\t\t\tthrow new IOException(\"Expected data to start with an Array\");\n \t\t\t}\n-\t\t\treturn new JsonArrayReader(jp);\n+\t\t\treturn new JsonArrayOrObjectReader(jp);\n \t\t} catch (SSLPeerUnverifiedException e) {\n \t\t\tthrow e;\n \t\t} catch (IOException e) {\n@@ -487,6 +500,7 @@ public class ZabbixService {\n \t\t\t\t\t, new JSONObject()\n \t\t\t);\n \t\t\tisVersion2 = result.getString(\"result\").equals(\"1.4\");\n+\t\t\tLog.i(\"ZabbixService\", \"Zabbix Server Version: isVersion2=\"+isVersion2);\n \t\t}\n \t\treturn token != null;\n \t}\n@@ -504,7 +518,7 @@ public class ZabbixService {\n \t\t}\n \t}\n \n-\tprivate void importApplications(long hostid, long itemid, JsonArrayReader jsonArray) throws JsonParseException, NumberFormatException, IOException {\n+\tprivate void importApplications(long hostid, long itemid, JsonArrayOrObjectReader jsonArray) throws JsonParseException, NumberFormatException, IOException {\n \t\tint num = 0;\n \t\tJsonObjectReader application;\n \t\twhile ((application = jsonArray.next()) != null) {\n@@ -576,7 +590,7 @@ public class ZabbixService {\n \t\t\t\t\t.put(\"sortorder\", \"DESC\");\n \t\t\t}\n \n-\t\t\tJsonArrayReader events = _queryStream(\n+\t\t\tJsonArrayOrObjectReader events = _queryStream(\n \t\t\t\t\t\"event.get\"\n \t\t\t\t\t, params\n \t\t\t);\n@@ -618,7 +632,7 @@ public class ZabbixService {\n \t\t\t\tparams.put(\"sortfield\", \"clock\")\n \t\t\t\t\t.put(\"sortorder\", \"DESC\");\n \t\t\t}\n-\t\t\tJsonArrayReader events = _queryStream(\n+\t\t\tJsonArrayOrObjectReader events = _queryStream(\n \t\t\t\t\t\"event.get\"\n \t\t\t\t\t, params\n \t\t\t);\n@@ -636,7 +650,7 @@ public class ZabbixService {\n \t * @throws JsonParseException\n \t * @throws IOException\n \t */\n-\tprivate void importEvents(JsonArrayReader events, Integer numEvents) throws JsonParseException, IOException {\n+\tprivate void importEvents(JsonArrayOrObjectReader events, Integer numEvents) throws JsonParseException, IOException {\n \t\tint i=0;\n \t\tJsonObjectReader eventReader;\n \t\twhile ((eventReader = events.next()) != null) {\n@@ -688,7 +702,7 @@ public class ZabbixService {\n \t * @throws NumberFormatException\n \t * @throws IOException\n \t */\n-\tprivate boolean importGraphItems(JsonArrayReader graphItems) throws JsonParseException, NumberFormatException, IOException {\n+\tprivate boolean importGraphItems(JsonArrayOrObjectReader graphItems) throws JsonParseException, NumberFormatException, IOException {\n \t\tboolean mustSetGraphid = false;\n \t\tJsonObjectReader graphItemReader;\n \t\twhile ((graphItemReader = graphItems.next()) != null) {\n@@ -737,7 +751,7 @@ public class ZabbixService {\n \t\t\t}\n \t\t\tzabbixLocalDB.delete(CacheData.TABLE_NAME, CacheData.COLUMN_KIND+\"='\"+GraphData.TABLE_NAME+\"' AND \"+CacheData.COLUMN_FILTER+\"='screenid=\"+screenid+'\\'', null);\n \n-\t\t\tJsonArrayReader graphs = _queryStream(\n+\t\t\tJsonArrayOrObjectReader graphs = _queryStream(\n \t\t\t\t\t\"graph.get\"\n \t\t\t\t\t, new JSONObject()\n \t\t\t\t\t\t.put(isVersion2?\"selectGraphItems\":\"select_graph_items\", \"extend\")\n@@ -826,7 +840,7 @@ public class ZabbixService {\n \t\t\t\t// so we use a fiction\n \t\t\t\tint numDetails = 400;\n \t\t\t\tint curI=0;\n-\t\t\t\tJsonArrayReader historydetails = _queryStream(\n+\t\t\t\tJsonArrayOrObjectReader historydetails = _queryStream(\n \t\t\t\t\t\t\"history.get\"\n \t\t\t\t\t\t, new JSONObject()\n \t\t\t\t\t\t\t.put(\"output\", \"extend\")\n@@ -878,7 +892,7 @@ public class ZabbixService {\n \t\t}\n \t}\n \n-\tprivate long importHostGroups(JsonArrayReader jsonArray) throws JsonParseException, IOException {\n+\tprivate long importHostGroups(JsonArrayOrObjectReader jsonArray) throws JsonParseException, IOException {\n \t\tlong firstHostGroupId = -1;\n \t\tJsonObjectReader hostReader;\n \t\twhile ((hostReader = jsonArray.next()) != null) {\n@@ -910,7 +924,7 @@ public class ZabbixService {\n \t * @throws JsonParseException\n \t * @throws IOException\n \t */\n-\tprivate Object[] importHosts(JsonArrayReader jsonArray, Integer numHosts) throws JsonParseException, IOException {\n+\tprivate Object[] importHosts(JsonArrayOrObjectReader jsonArray, Integer numHosts) throws JsonParseException, IOException {\n \t\tList<String> hostnames = new ArrayList<String>();\n \t\tlong firstHostId = -1;\n \t\tJsonObjectReader hostReader;\n@@ -971,7 +985,7 @@ public class ZabbixService {\n \t\t\t\t\t\t.put(isVersion2?\"selectGroups\":\"select_groups\", \"extend\")\n \t\t\t);\n \t\t\tint numHosts = result.getInt(\"result\");\n-\t\t\tJsonArrayReader hosts = _queryStream(\n+\t\t\tJsonArrayOrObjectReader hosts = _queryStream(\n \t\t\t\t\t\"host.get\"\n \t\t\t\t\t, new JSONObject()\n \t\t\t\t\t\t.put(\"output\", \"extend\")\n@@ -995,7 +1009,7 @@ public class ZabbixService {\n \t * @throws JsonParseException\n \t * @throws IOException\n \t */\n-\tprivate long importItems(JsonArrayReader items, int numItems, boolean checkBeforeInsert) throws JsonParseException, IOException {\n+\tprivate long importItems(JsonArrayOrObjectReader items, int numItems, boolean checkBeforeInsert) throws JsonParseException, IOException {\n \t\tlong firstItemId = -1;\n \t\tint curI=0;\n \t\tJsonObjectReader itemReader;\n@@ -1090,7 +1104,7 @@ public class ZabbixService {\n \t\t\t\t\t.put(\"hostids\", new JSONArray().put(hostid))\n \t\t\t);\n \t\t\tint numItems = result.getInt(\"result\");\n-\t\t\tJsonArrayReader items = _queryStream(\n+\t\t\tJsonArrayOrObjectReader items = _queryStream(\n \t\t\t\t\t\"item.get\"\n \t\t\t\t\t, new JSONObject()\n \t\t\t\t\t\t.put(\"output\", \"extend\")\n@@ -1106,7 +1120,7 @@ public class ZabbixService {\n \t\t}\n \t}\n \n-\tprivate void importScreenItems(JsonArrayReader screenItems) throws JsonParseException, NumberFormatException, IOException {\n+\tprivate void importScreenItems(JsonArrayOrObjectReader screenItems) throws JsonParseException, NumberFormatException, IOException {\n \t\tJsonObjectReader screenItemReader;\n \t\twhile ((screenItemReader = screenItems.next()) != null) {\n \t\t\tScreenItemData si = new ScreenItemData();\n@@ -1140,7 +1154,7 @@ public class ZabbixService {\n \t\t\tzabbixLocalDB.delete(ScreenItemData.TABLE_NAME, null, null);\n \t\t\tzabbixLocalDB.delete(CacheData.TABLE_NAME, CacheData.COLUMN_KIND+\"='\"+ScreenData.TABLE_NAME+\"'\", null);\n \n-\t\t\tJsonArrayReader screens = _queryStream(\n+\t\t\tJsonArrayOrObjectReader screens = _queryStream(\n \t\t\t\t\t(isVersion2?\"s\":\"S\")+\"creen.get\"\n \t\t\t\t\t, new JSONObject()\n \t\t\t\t\t\t.put(\"output\", \"extend\")\n@@ -1174,7 +1188,7 @@ public class ZabbixService {\n \t\tif (!isCached(TriggerData.TABLE_NAME, \"triggerid=\"+triggerid)) {\n \t\t\t_startTransaction();\n \n-\t\t\tJsonArrayReader trigger = _queryStream(\n+\t\t\tJsonArrayOrObjectReader trigger = _queryStream(\n \t\t\t\t\t\"trigger.get\"\n \t\t\t\t\t, new JSONObject()\n \t\t\t\t\t\t.put(\"output\", \"extend\")\n@@ -1216,7 +1230,7 @@ public class ZabbixService {\n \t\tif (mustImport) {\n \t\t\t_startTransaction();\n \t\t\tzabbixLocalDB.delete(TriggerData.TABLE_NAME, TriggerData.COLUMN_TRIGGERID+\"=\"+triggerid, null);\n-\t\t\tJsonArrayReader triggers = _queryStream(\n+\t\t\tJsonArrayOrObjectReader triggers = _queryStream(\n \t\t\t\t\t\"trigger.get\"\n \t\t\t\t\t, new JSONObject()\n \t\t\t\t\t\t.put(\"output\", \"extend\")\n@@ -1243,7 +1257,7 @@ public class ZabbixService {\n \t\t\t_startTransaction();\n \n \t\t\tlong min = (new Date().getTime()/1000)-ZabbixConfig.STATUS_SHOW_TRIGGER_TIME;\n-\t\t\tJsonArrayReader triggers = _queryStream(\n+\t\t\tJsonArrayOrObjectReader triggers = _queryStream(\n \t\t\t\t\t\"trigger.get\"\n \t\t\t\t\t, new JSONObject()\n \t\t\t\t\t\t.put(\"output\", \"extend\")\n@@ -1265,7 +1279,7 @@ public class ZabbixService {\n \t\t}\n \t}\n \n-\tprivate void importTriggers(JsonArrayReader jsonArray) throws JsonParseException, IOException {\n+\tprivate void importTriggers(JsonArrayOrObjectReader jsonArray) throws JsonParseException, IOException {\n \t\tJsonObjectReader triggerReader;\n \t\twhile ((triggerReader = jsonArray.next()) != null) {\n \t\t\tTriggerData t = new TriggerData();\n@@ -1311,7 +1325,7 @@ public class ZabbixService {\n \t\tif (!isCached(TriggerData.TABLE_NAME, \"itemid=\"+itemid)) {\n \t\t\t_startTransaction();\n \t\t\tzabbixLocalDB.delete(TriggerData.TABLE_NAME, TriggerData.COLUMN_ITEMID+\"=\"+itemid, null);\n-\t\t\tJsonArrayReader triggers = _queryStream(\n+\t\t\tJsonArrayOrObjectReader triggers = _queryStream(\n \t\t\t\t\t\"trigger.get\"\n \t\t\t\t\t, new JSONObject()\n \t\t\t\t\t\t.put(\"output\", \"extend\")"],
    "c_body_t": ["<empty>"],
    "c_email_sni": "jonas.gehring@inovex.de",
    "p_patch_t": ["+package com.inovex.zabbixmobile.api;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.net.Socket;\n+import java.net.UnknownHostException;\n+import java.security.KeyManagementException;\n+import java.security.KeyStore;\n+import java.security.KeyStoreException;\n+import java.security.NoSuchAlgorithmException;\n+import java.security.UnrecoverableKeyException;\n+import java.security.cert.CertificateException;\n+import java.security.cert.X509Certificate;\n+import java.util.ArrayList;\n+import java.util.Date;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+\n+import javax.net.ssl.SSLContext;\n+import javax.net.ssl.SSLPeerUnverifiedException;\n+import javax.net.ssl.TrustManager;\n+import javax.net.ssl.X509TrustManager;\n+\n+import org.apache.http.HttpResponse;\n+import org.apache.http.HttpVersion;\n+import org.apache.http.auth.AuthScope;\n+import org.apache.http.auth.UsernamePasswordCredentials;\n+import org.apache.http.client.ClientProtocolException;\n+import org.apache.http.client.methods.HttpPost;\n+import org.apache.http.client.params.HttpClientParams;\n+import org.apache.http.conn.ClientConnectionManager;\n+import org.apache.http.conn.scheme.PlainSocketFactory;\n+import org.apache.http.conn.scheme.Scheme;\n+import org.apache.http.conn.scheme.SchemeRegistry;\n+import org.apache.http.conn.ssl.SSLSocketFactory;\n+import org.apache.http.entity.StringEntity;\n+import org.apache.http.impl.client.DefaultHttpClient;\n+import org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager;\n+import org.apache.http.params.BasicHttpParams;\n+import org.apache.http.params.HttpConnectionParams;\n+import org.apache.http.params.HttpParams;\n+import org.apache.http.params.HttpProtocolParams;\n+import org.apache.http.protocol.HTTP;\n+import org.codehaus.jackson.JsonFactory;\n+import org.codehaus.jackson.JsonParseException;\n+import org.codehaus.jackson.JsonParser;\n+import org.codehaus.jackson.JsonToken;\n+import org.json.JSONArray;\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+\n+import android.content.ContentValues;\n+import android.content.Context;\n+import android.content.Intent;\n+import android.content.SharedPreferences;\n+import android.database.Cursor;\n+import android.database.sqlite.SQLiteDatabase;\n+import android.database.sqlite.SQLiteQueryBuilder;\n+import android.graphics.Color;\n+import android.preference.PreferenceManager;\n+import android.util.Log;\n+\n+import com.inovex.zabbixmobile.R;\n+import com.inovex.zabbixmobile.ZabbixContentProvider;\n+import com.inovex.zabbixmobile.model.ApplicationData;\n+import com.inovex.zabbixmobile.model.ApplicationItemRelationData;\n+import com.inovex.zabbixmobile.model.CacheData;\n+import com.inovex.zabbixmobile.model.EventData;\n+import com.inovex.zabbixmobile.model.GraphData;\n+import com.inovex.zabbixmobile.model.GraphItemData;\n+import com.inovex.zabbixmobile.model.HistoryDetailData;\n+import com.inovex.zabbixmobile.model.HostData;\n+import com.inovex.zabbixmobile.model.HostGroupData;\n+import com.inovex.zabbixmobile.model.ItemData;\n+import com.inovex.zabbixmobile.model.ScreenData;\n+import com.inovex.zabbixmobile.model.ScreenItemData;\n+import com.inovex.zabbixmobile.model.TriggerData;\n+\n+/**\n+ * interface to connect to the zabbix server\n+ */\n+public class ZabbixService {\n+\tclass CustomSSLSocketFactory extends SSLSocketFactory {\n+\t\tSSLContext sslContext = SSLContext.getInstance(\"TLS\");\n+\n+\t\tpublic CustomSSLSocketFactory(KeyStore truststore) throws NoSuchAlgorithmException, KeyManagementException, KeyStoreException, UnrecoverableKeyException {\n+\t\t\tsuper(truststore);\n+\t\t\tTrustManager tm = new X509TrustManager() {\n+\t\t\t\t@Override\n+\t\t\t\tpublic void checkClientTrusted(X509Certificate[] chain,\n+\t\t\t\t\t\tString authType) throws CertificateException {\n+\t\t\t\t}\n+\t\t\t\t@Override\n+\t\t\t\tpublic void checkServerTrusted(X509Certificate[] chain,\n+\t\t\t\t\t\tString authType) throws CertificateException {\n+\t\t\t\t}\n+\t\t\t\t@Override\n+\t\t\t\tpublic X509Certificate[] getAcceptedIssuers() {\n+\t\t\t\t\treturn null;\n+\t\t\t\t}\n+\t\t\t};\n+\t\t\tsslContext.init(null, new TrustManager[] { tm }, null);\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic Socket createSocket() throws IOException {\n+\t\t\treturn sslContext.getSocketFactory().createSocket();\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic Socket createSocket(Socket socket, String host, int port, boolean autoClose) throws IOException, UnknownHostException {\n+\t\t\treturn sslContext.getSocketFactory().createSocket(socket, host, port, autoClose);\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * http auth is needed\n+\t */\n+\tpublic class HttpAuthorizationRequiredException extends Exception {\n+\t\tprivate static final long serialVersionUID = 6632422081858878147L;\n+\t}\n+\n+\t/**\n+\t * zabbix error: no api access\n+\t */\n+\tpublic class NoAPIAccessException extends Exception {\n+\t\tprivate static final long serialVersionUID = 6381395987443456382L;\n+\t}\n+\n+\t/**\n+\t * probably too old zabbix <= 1.8.2\n+\t */\n+\tpublic class PreconditionFailedException extends Exception {\n+\t\tprivate static final long serialVersionUID = -2529885710860745023L;\n+\t}\n+\n+\t/**\n+\t * global constants\n+\t */\n+\tpublic class ZabbixConfig {\n+\t\tpublic static final int APPLICATION_GET_LIMIT = 1000;\n+\t\tpublic static final int EVENTS_GET_LIMIT = 60;\n+\t\tpublic static final int HISTORY_GET_TIME_FROM_SHIFT = 8*60*60; // -8h\n+\t\tpublic static final int HISTORY_GET_LIMIT = 8000;\n+\t\tpublic static final int HOSTGROUP_GET_LIMIT = 200;\n+\t\tpublic static final int HOST_GET_LIMIT = 300;\n+\t\tpublic static final int ITEM_GET_LIMIT = 200;\n+\t\tpublic static final int TRIGGER_GET_LIMIT = 100;\n+\t\tpublic static final int EVENT_GET_TIME_FROM_SHIFT = 7*24*60*60; // -7 days\n+\t\tpublic static final int CACHE_LIFETIME_APPLICATIONS = 2*24*60*60; // 2 days\n+\t\tpublic static final int CACHE_LIFETIME_EVENTS = 120;\n+\t\tpublic static final int CACHE_LIFETIME_HISTORY_DETAILS = 4*60;\n+\t\tpublic static final int CACHE_LIFETIME_HOST_GROUPS = 7*24*60*60;\n+\t\tpublic static final int CACHE_LIFETIME_HOSTS = 2*24*60*60;\n+\t\tpublic static final int CACHE_LIFETIME_SCREENS = 2*24*60*60;\n+\t\tpublic static final int CACHE_LIFETIME_ITEMS = 4*60;\n+\t\tpublic static final int CACHE_LIFETIME_TRIGGERS = 2*60;\n+\t\tpublic static final long STATUS_SHOW_TRIGGER_TIME = 14*24*60*60;\n+\t\tpublic static final int HTTP_CONNECTION_TIMEOUT = 30000;\n+\t}\n+\n+\tprivate final DefaultHttpClient httpClient;\n+\tprivate final SQLiteDatabase zabbixLocalDB;\n+\tprivate String url;\n+\tprivate String token;\n+\tprivate final Context context;\n+\tprivate int _transactionStack;\n+\tprivate JsonParser lastStream;\n+\tprivate int transformProgressStart;\n+\tprivate int transformProgressEnd;\n+\tprivate boolean _notAuthorizedRetry;\n+\tprivate boolean isVersion2 = true;\n+\n+\t/**\n+\t * init\n+\t * @param context android context\n+\t * @param zabbixLocalDB sqlite\n+\t */\n+\tpublic ZabbixService(Context context, SQLiteDatabase zabbixLocalDB) {\n+\t\tClientConnectionManager ccm = null;\n+\t\tHttpParams params = null;\n+\n+\t\ttry {\n+\t\t\tSharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(context);\n+\t\t\tif (prefs.getBoolean(\"zabbix_trust_all_ssl_ca\", false)) {\n+\t\t\t\tKeyStore trustStore = KeyStore.getInstance(KeyStore.getDefaultType());\n+\t\t\t\ttrustStore.load(null, null);\n+\n+\t\t\t\tSSLSocketFactory sf = new CustomSSLSocketFactory(trustStore);\n+\t\t\t\tsf.setHostnameVerifier(SSLSocketFactory.ALLOW_ALL_HOSTNAME_VERIFIER);\n+\n+\t\t\t\tparams = new BasicHttpParams();\n+\t\t\t\tHttpProtocolParams.setVersion(params, HttpVersion.HTTP_1_1);\n+\t\t\t\tHttpProtocolParams.setContentCharset(params, HTTP.UTF_8);\n+\n+\t\t\t\tSchemeRegistry registry = new SchemeRegistry();\n+\t\t\t\tregistry.register(new Scheme(\"http\", PlainSocketFactory.getSocketFactory(), 80));\n+\t\t\t\tregistry.register(new Scheme(\"https\", sf, 443));\n+\n+\t\t\t\tccm = new ThreadSafeClientConnManager(params, registry);\n+\t\t\t}\n+\t\t} catch (Exception e) {\n+\t\t\t// ignore for unit test\n+\t\t}\n+\n+\t\tif (ccm == null || params == null) {\n+\t\t\thttpClient = new DefaultHttpClient();\n+\t\t} else {\n+\t\t\thttpClient = new DefaultHttpClient(ccm, params);\n+\t\t}\n+\n+\t\t// if applicable http auth\n+\t\ttry {\n+\t\t\tSharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(context);\n+\t\t\tif (prefs.getBoolean(\"http_auth_enabled\", false)) {\n+\t\t\t\tString user = prefs.getString(\"http_auth_username\", \"\");\n+\t\t\t\tString pwd = prefs.getString(\"http_auth_password\", \"\");\n+\t\t\t\thttpClient.getCredentialsProvider().setCredentials(AuthScope.ANY, new UsernamePasswordCredentials(user, pwd));\n+\t\t\t}\n+\t\t} catch (java.lang.UnsupportedOperationException e1) {\n+\t\t\t// for unit test\n+\t\t}\n+\n+\t\tparams = httpClient.getParams();\n+\t\tHttpClientParams.setRedirecting(params, true); // redirecting\n+\t\tHttpConnectionParams.setConnectionTimeout(params, ZabbixConfig.HTTP_CONNECTION_TIMEOUT);\n+\t\tthis.context = context;\n+\t\tthis.zabbixLocalDB = zabbixLocalDB;\n+\t}\n+\n+\t/**\n+\t * counts the sql inserts/updates and do a transaction commit to save the memory\n+\t */\n+\tprivate void _commitTransactionIfRecommended() {\n+\t\tif (_transactionStack++ > 50) {\n+\t\t\t_endTransaction();\n+\t\t\t_startTransaction();\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * commit sql transaction\n+\t */\n+\tpublic void _endTransaction() {\n+\t\tif (zabbixLocalDB.inTransaction()) {\n+\t\t\tzabbixLocalDB.setTransactionSuccessful();\n+\t\t\tzabbixLocalDB.endTransaction();\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * zabbix api call. data will be parsed as json object on-the-fly.\n+\t * Caution: use this only for api calls with a small return data.\n+\t * @param method\n+\t * @param params\n+\t * @return\n+\t * @throws ClientProtocolException\n+\t * @throws IOException\n+\t * @throws JSONException\n+\t * @throws HttpAuthorizationRequiredException\n+\t * @throws NoAPIAccessException\n+\t */\n+\tprivate JSONObject _queryBuffer(String method, JSONObject params) throws ClientProtocolException, IOException, JSONException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n+\t\tHttpPost post = new HttpPost(url);\n+\t\tpost.addHeader(\"Content-Type\", \"application/json; charset=utf-8\");\n+\n+\t\tString json =\n+\t\t\t\"{\" +\n+\t\t\t\"\t\\\"jsonrpc\\\" : \\\"2.0\\\",\" +\n+\t\t\t\"\t\\\"method\\\" : \\\"\"+method+\"\\\",\" +\n+\t\t\t\"\t\\\"params\\\" : \"+params.toString()+\",\" +\n+\t\t\t\"\t\\\"auth\\\" : \"+(token==null?\"null\":'\"'+token+'\"')+\",\" +\n+\t\t\t\"\t\\\"id\\\" : 0\" +\n+\t\t\t\"}\";\n+\n+\t\tpost.setEntity(new StringEntity(json, \"UTF-8\"));\n+\t\ttry {\n+\t\t\tHttpResponse resp = httpClient.execute(post);\n+\t\t\tif (resp.getStatusLine().getStatusCode() == 401) {\n+\t\t\t\t// http auth failed\n+\t\t\t\tthrow new HttpAuthorizationRequiredException();\n+\t\t\t} else if (resp.getStatusLine().getStatusCode() == 412) {\n+\t\t\t\t\t// Precondition failed / Looks like Zabbix 1.8.2\n+\t\t\t\tthrow new PreconditionFailedException();\n+\t\t\t} else if (resp.getStatusLine().getStatusCode() == 404) {\n+\t\t\t\t// file not found\n+\t\t\t\tthrow new IOException(resp.getStatusLine().getStatusCode()+\" \"+resp.getStatusLine().getReasonPhrase());\n+\t\t\t} else {\n+\t\t\t\tLog.d(\"ZabbixService\", resp.getStatusLine().getStatusCode()+\" \"+resp.getStatusLine().getReasonPhrase());\n+\t\t\t}\n+\t\t\tStringBuilder total = new StringBuilder();\n+\t\t\tBufferedReader rd = new BufferedReader(new InputStreamReader(resp.getEntity().getContent()));\n+\t\t\tint chr;\n+\t\t\twhile ((chr = rd.read()) != -1) {\n+\t\t\t\ttotal.append((char) chr);\n+\t\t\t}\n+\t\t\tJSONObject result = new JSONObject(total.toString());\n+\t\t\ttry {\n+\t\t\t\tif (result.getJSONObject(\"error\") != null) {\n+\t\t\t\t\tif (result.getJSONObject(\"error\").getString(\"data\").equals(\"No API access\")) {\n+\t\t\t\t\t\tthrow new NoAPIAccessException();\n+\t\t\t\t\t} else throw new RuntimeException(result.getJSONObject(\"error\").toString());\n+\t\t\t\t}\n+\t\t\t\tif (result.getString(\"data\").equals(\"Not authorized\")) {\n+\t\t\t\t\t// first do a new auth and then try the same api call again\n+\t\t\t\t\tif (authenticate() && !_notAuthorizedRetry) {\n+\t\t\t\t\t\t_notAuthorizedRetry = true;\n+\t\t\t\t\t\tJSONObject r = _queryBuffer(method, params);\n+\t\t\t\t\t\t_notAuthorizedRetry = false;\n+\t\t\t\t\t\treturn r;\n+\t\t\t\t\t} throw new IllegalStateException(result.toString());\n+\t\t\t\t}\n+\t\t\t} catch (JSONException e) {\n+\t\t\t\t// ignore\n+\t\t\t}\n+\t\t\treturn result;\n+\t\t} catch (SSLPeerUnverifiedException e) {\n+\t\t\t// SSL not trusted\n+\t\t\tIntent intent = new Intent(ZabbixContentProvider.CONTENT_PROVIDER_INTENT_ACTION);\n+\t\t\tintent.putExtra(\"flag\", ZabbixContentProvider.INTENT_FLAG_SSL_NOT_TRUSTED);\n+\t\t\tcontext.sendBroadcast(intent);\n+\t\t\tthrow e;\n+\t\t} catch (IOException e) {\n+\t\t\t// internet problem\n+\t\t\t// send intent to GUI\n+\t\t\tIntent intent = new Intent(ZabbixContentProvider.CONTENT_PROVIDER_INTENT_ACTION);\n+\t\t\tintent.putExtra(\"flag\", ZabbixContentProvider.INTENT_FLAG_CONNECTION_FAILED);\n+\t\t\tintent.putExtra(\"value\", e.getMessage());\n+\t\t\tcontext.sendBroadcast(intent);\n+\t\t\tthrow e;\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * zabbix api call as stream.\n+\t * @param method\n+\t * @param params\n+\t * @return stream im json array wrapper\n+\t * @throws JSONException\n+\t * @throws IOException\n+\t * @throws HttpAuthorizationRequiredException\n+\t * @throws NoAPIAccessException\n+\t */\n+\tprivate JsonArrayReader _queryStream(String method, JSONObject params) throws JSONException, IOException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n+\t\t// http request\n+\t\tHttpPost post = new HttpPost(url);\n+\t\tpost.addHeader(\"Content-Type\", \"application/json; charset=utf-8\");\n+\n+\t\tJSONObject json = new JSONObject()\n+\t\t\t.put(\"jsonrpc\", \"2.0\")\n+\t\t\t.put(\"method\", method)\n+\t\t\t.put(\"params\", params)\n+\t\t\t.put(\"auth\", token)\n+\t\t\t.put(\"id\", 0);\n+\n+\t\tpost.setEntity(new StringEntity(json.toString(), \"UTF-8\"));\n+\t\ttry {\n+\t\t\tHttpResponse resp = httpClient.execute(post);\n+\t\t\tif (resp.getStatusLine().getStatusCode() == 401) {\n+\t\t\t\t// http auth failed\n+\t\t\t\tthrow new HttpAuthorizationRequiredException();\n+\t\t\t}\n+\n+\t\t\tJsonFactory jsonFac = new JsonFactory();\n+\t\t\tJsonParser jp = jsonFac.createJsonParser(resp.getEntity().getContent());\n+\t\t\t// store the last stream to close it if an exception will be thrown\n+\t\t\tlastStream = jp;\n+\t\t\tif (jp.nextToken() != JsonToken.START_OBJECT) {\n+\t\t\t\tthrow new IOException(\"Expected data to start with an Object\");\n+\t\t\t}\n+\t\t\tdo {\n+\t\t\t\tjp.nextToken();\n+\t\t\t\tif (jp.getCurrentName().equals(\"error\")) {\n+\t\t\t\t\tjp.nextToken();\n+\t\t\t\t\tString errortxt = \"\";\n+\t\t\t\t\twhile (jp.nextToken() != JsonToken.END_OBJECT) {\n+\t\t\t\t\t\terrortxt += jp.getText();\n+\t\t\t\t\t}\n+\t\t\t\t\tif (errortxt.contains(\"No API access\")) {\n+\t\t\t\t\t\tthrow new NoAPIAccessException();\n+\t\t\t\t\t} else if (errortxt.contains(\"Not authorized\")) {\n+\t\t\t\t\t\t// first do a new auth and then try the same api call again\n+\t\t\t\t\t\tif (authenticate() && !_notAuthorizedRetry) {\n+\t\t\t\t\t\t\t_notAuthorizedRetry = true;\n+\t\t\t\t\t\t\tJsonArrayReader r = _queryStream(method, params);\n+\t\t\t\t\t\t\t_notAuthorizedRetry = false;\n+\t\t\t\t\t\t\treturn r;\n+\t\t\t\t\t\t} else throw new IllegalStateException(errortxt);\n+\t\t\t\t\t} else throw new IllegalStateException(\"JSON API Error: \"+errortxt);\n+\t\t\t\t}\n+\t\t\t} while (!jp.getCurrentName().equals(\"result\"));\n+\n+\t\t\t// result array found\n+\t\t\tif (jp.nextToken() != JsonToken.START_ARRAY) { // go inside the array\n+\t\t\t\tthrow new IOException(\"Expected data to start with an Array\");\n+\t\t\t}\n+\t\t\treturn new JsonArrayReader(jp);\n+\t\t} catch (SSLPeerUnverifiedException e) {\n+\t\t\tthrow e;\n+\t\t} catch (IOException e) {\n+\t\t\t// internet problem\n+\t\t\t// send intent to GUI\n+\t\t\tIntent intent = new Intent(ZabbixContentProvider.CONTENT_PROVIDER_INTENT_ACTION);\n+\t\t\tintent.putExtra(\"flag\", ZabbixContentProvider.INTENT_FLAG_CONNECTION_FAILED);\n+\t\t\tcontext.sendBroadcast(intent);\n+\t\t\tthrow e;\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * begin sql transaction\n+\t */\n+\tprivate void _startTransaction() {\n+\t\tzabbixLocalDB.beginTransaction();\n+\t\t_transactionStack = 0;\n+\t}\n+\n+\t/**\n+\t * acknowledge zabbix event. Sets ack-flag with comment.\n+\t * Caution: This is supported only for Zabbix version >= 1.8.4\n+\t * @param eventid\n+\t * @param comment\n+\t * @return true, success.\n+\t * @throws ClientProtocolException\n+\t * @throws IOException\n+\t * @throws JSONException\n+\t * @throws HttpAuthorizationRequiredException\n+\t * @throws NoAPIAccessException\n+\t */\n+\tpublic boolean acknowledgeEvent(String eventid, String comment) throws ClientProtocolException, IOException, JSONException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n+\t\t// for GUI unit test, just return true\n+\t\tif (comment != null && comment.equals(\"__UNIT_TEST__RETURN_TRUE__\")) return true;\n+\n+\t\tJSONObject result = _queryBuffer(\n+\t\t\t\t\"event.acknowledge\"\n+\t\t\t\t, new JSONObject()\n+\t\t\t\t\t.put(\"eventids\", new JSONArray().put(eventid))\n+\t\t);\n+\t\t// it can be an (empty) array\n+\t\ttry {\n+\t\t\treturn result.getJSONObject(\"result\").getJSONArray(\"eventids\").length() == 1;\n+\t\t} catch (JSONException e) {\n+\t\t\t// or a json object\n+\t\t\treturn result.getJSONObject(\"result\").getJSONObject(\"eventids\").length() == 1;\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * zabbix auth. user and pwd from app preferences\n+\t * @return true success\n+\t * @throws ClientProtocolException\n+\t * @throws IOException\n+\t * @throws JSONException\n+\t * @throws HttpAuthorizationRequiredException\n+\t * @throws NoAPIAccessException\n+\t */\n+\tpublic boolean authenticate() throws ClientProtocolException, IOException, JSONException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n+\t\tSharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(context);\n+\t\tString url = prefs.getString(\"zabbix_url\", \"\").trim();\n+\t\tString user = prefs.getString(\"zabbix_username\", \"\").trim();\n+\t\tString password = prefs.getString(\"zabbix_password\", \"\");\n+\n+\t\tthis.url = url+(url.endsWith(\"/\")?\"\":'/')+\"api_jsonrpc.php\";\n+\t\tLog.d(\"ZabbixContentProvider\", url+\"//\"+user);\n+\n+\t\ttry {\n+\t\t\tJSONObject result = _queryBuffer(\n+\t\t\t\t\t\"user.authenticate\"\n+\t\t\t\t\t, new JSONObject()\n+\t\t\t\t\t\t.put(\"user\", user)\n+\t\t\t\t\t\t.put(\"password\", password)\n+\t\t\t);\n+\t\t\ttoken = result.getString(\"result\");\n+\t\t} catch (JSONException e) {\n+\t\t\t// there's no result\n+\t\t\te.printStackTrace();\n+\t\t} catch (RuntimeException e) {\n+\t\t\t// wrong password. token remains null\n+\t\t\te.printStackTrace();\n+\t\t}\n+\t\tif (token != null) {\n+\t\t\t// get API version\n+\t\t\tJSONObject result = _queryBuffer(\n+\t\t\t\t\t\"apiinfo.version\"\n+\t\t\t\t\t, new JSONObject()\n+\t\t\t);\n+\t\t\tisVersion2 = result.getString(\"result\").equals(\"1.4\");\n+\t\t}\n+\t\treturn token != null;\n+\t}\n+\n+\t/**\n+\t * close the last http stream\n+\t */\n+\tpublic void closeLastStream() {\n+\t\tif (lastStream != null && !lastStream.isClosed()) {\n+\t\t\ttry {\n+\t\t\t\tlastStream.close();\n+\t\t\t} catch (IOException e) {\n+\t\t\t\te.printStackTrace();\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\tprivate void importApplications(long hostid, long itemid, JsonArrayReader jsonArray) throws JsonParseException, NumberFormatException, IOException {\n+\t\tint num = 0;\n+\t\tJsonObjectReader application;\n+\t\twhile ((application = jsonArray.next()) != null) {\n+\t\t\tApplicationData app = new ApplicationData();\n+\t\t\twhile (application.nextValueToken()) {\n+\t\t\t\tString propName = application.getCurrentName();\n+\t\t\t\tif (propName.equals(ApplicationData.COLUMN_APPLICATIONID)) {\n+\t\t\t\t\tapp.set(ApplicationData.COLUMN_APPLICATIONID, Long.parseLong(application.getText()));\n+\t\t\t\t} else if (propName.equals(ApplicationData.COLUMN_NAME)) {\n+\t\t\t\t\tapp.set(ApplicationData.COLUMN_NAME, application.getText());\n+\t\t\t\t} else if (propName.equals(ApplicationData.COLUMN_HOSTID)) {\n+\t\t\t\t\tapp.set(ApplicationData.COLUMN_HOSTID, Long.parseLong(application.getText()));\n+\t\t\t\t} else {\n+\t\t\t\t\tapplication.nextProperty();\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\t// create applications that does not exist\n+\t\t\tapp.insert(zabbixLocalDB, ApplicationData.COLUMN_APPLICATIONID);\n+\t\t\t_commitTransactionIfRecommended();\n+\n+\t\t\t// create ApplicationItemRelation\n+\t\t\tlong appid = (Long) app.get(ApplicationData.COLUMN_APPLICATIONID);\n+\t\t\tApplicationItemRelationData rel = new ApplicationItemRelationData();\n+\t\t\trel.set(ApplicationItemRelationData.COLUMN_APPLICATIONID, appid);\n+\t\t\trel.set(ApplicationItemRelationData.COLUMN_ITEMID, itemid);\n+\t\t\trel.set(ApplicationItemRelationData.COLUMN_HOSTID, hostid);\n+\t\t\trel.insert(zabbixLocalDB);\n+\t\t\t_commitTransactionIfRecommended();\n+\n+\t\t\tnum++;\n+\t\t}\n+\t\tif (num == 0) {\n+\t\t\t// if there's no application, the ID #0 must be added (for other)\n+\t\t\tApplicationItemRelationData rel = new ApplicationItemRelationData();\n+\t\t\trel.set(ApplicationItemRelationData.COLUMN_APPLICATIONID, 0);\n+\t\t\trel.set(ApplicationItemRelationData.COLUMN_ITEMID, itemid);\n+\t\t\trel.set(ApplicationItemRelationData.COLUMN_HOSTID, hostid);\n+\t\t\trel.insert(zabbixLocalDB);\n+\n+\t\t\t// if #0 \"other\" does not exist yet, it has to be created\n+\t\t\tApplicationData app = new ApplicationData();\n+\t\t\tapp.set(ApplicationData.COLUMN_APPLICATIONID, 0);\n+\t\t\tapp.set(ApplicationData.COLUMN_NAME, \"- \"+context.getResources().getString(R.string.other)+\" -\");\n+\t\t\tapp.insert(zabbixLocalDB, ApplicationData.COLUMN_APPLICATIONID);\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * import the newest event of a trigger\n+\t * @param triggerid\n+\t * @throws JSONException\n+\t * @throws IOException\n+\t * @throws HttpAuthorizationRequiredException\n+\t * @throws NoAPIAccessException\n+\t */\n+\tpublic void importEventByTriggerId(String triggerid) throws JSONException, IOException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n+\t\tif (!isCached(EventData.TABLE_NAME, \"triggerid=\"+triggerid)) {\n+\t\t\t_startTransaction();\n+\t\t\tzabbixLocalDB.delete(EventData.TABLE_NAME, EventData.COLUMN_OBJECTID+\"=\"+triggerid, null);\n+\n+\t\t\tJSONObject params = new JSONObject()\n+\t\t\t\t.put(\"output\", \"extend\")\n+\t\t\t\t.put(isVersion2?\"selectHosts\":\"select_hosts\", \"extend\")\n+\t\t\t\t.put(\"triggerids\", new JSONArray().put(triggerid))\n+\t\t\t\t.put(\"limit\", 1)\n+\t\t\t\t.put(\"source\", 0);\n+\t\t\tif (!isVersion2) {\n+\t\t\t\tparams.put(\"sortfield\", \"clock\")\n+\t\t\t\t\t.put(\"sortorder\", \"DESC\");\n+\t\t\t}\n+\n+\t\t\tJsonArrayReader events = _queryStream(\n+\t\t\t\t\t\"event.get\"\n+\t\t\t\t\t, params\n+\t\t\t);\n+\t\t\timportEvents(events, null);\n+\t\t\tevents.close();\n+\n+\t\t\tsetCached(EventData.TABLE_NAME, \"triggerid=\"+triggerid, ZabbixConfig.CACHE_LIFETIME_EVENTS);\n+\t\t\t_endTransaction();\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * import the newest events\n+\t * @throws ClientProtocolException\n+\t * @throws IOException\n+\t * @throws JSONException\n+\t * @throws HttpAuthorizationRequiredException\n+\t * @throws NoAPIAccessException\n+\t */\n+\tpublic void importEvents() throws ClientProtocolException, IOException, JSONException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n+\t\tif (!isCached(EventData.TABLE_NAME, null)) {\n+\t\t\t_startTransaction();\n+\t\t\tzabbixLocalDB.delete(EventData.TABLE_NAME, null, null);\n+\t\t\tzabbixLocalDB.delete(TriggerData.TABLE_NAME, null, null);\n+\t\t\tzabbixLocalDB.delete(CacheData.TABLE_NAME, CacheData.COLUMN_KIND+\"='\"+EventData.TABLE_NAME+\"'\", null);\n+\t\t\tzabbixLocalDB.delete(CacheData.TABLE_NAME, CacheData.COLUMN_KIND+\"='\"+TriggerData.TABLE_NAME+\"'\", null);\n+\n+\t\t\tint numEvents = ZabbixConfig.EVENTS_GET_LIMIT;\n+\n+\t\t\tJSONObject params = new JSONObject()\n+\t\t\t\t.put(\"output\", \"extend\")\n+\t\t\t\t.put(\"limit\", ZabbixConfig.EVENTS_GET_LIMIT)\n+\t\t\t\t.put(isVersion2?\"selectHosts\":\"select_hosts\", \"extend\")\n+\t\t\t\t.put(isVersion2?\"selectTriggers\":\"select_triggers\", \"extend\")\n+\t\t\t\t.put(\"source\", 0)\n+\t\t\t\t.put(\"time_from\", (new Date().getTime()/1000) - ZabbixConfig.EVENT_GET_TIME_FROM_SHIFT);\n+\t\t\tif (!isVersion2) {\n+\t\t\t\t// in Zabbix version <2.0, this is not default\n+\t\t\t\tparams.put(\"sortfield\", \"clock\")\n+\t\t\t\t\t.put(\"sortorder\", \"DESC\");\n+\t\t\t}\n+\t\t\tJsonArrayReader events = _queryStream(\n+\t\t\t\t\t\"event.get\"\n+\t\t\t\t\t, params\n+\t\t\t);\n+\t\t\timportEvents(events, numEvents);\n+\t\t\tevents.close();\n+\n+\t\t\tsetCached(EventData.TABLE_NAME, null, ZabbixConfig.CACHE_LIFETIME_EVENTS);\n+\t\t\t_endTransaction();\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * @param events stream\n+\t * @param numEvents if null, no progressbar-update AND only isert, if it does not exist. If !null, progressbar-update AND always insert without checking\n+\t * @throws JsonParseException\n+\t * @throws IOException\n+\t */\n+\tprivate void importEvents(JsonArrayReader events, Integer numEvents) throws JsonParseException, IOException {\n+\t\tint i=0;\n+\t\tJsonObjectReader eventReader;\n+\t\twhile ((eventReader = events.next()) != null) {\n+\t\t\tEventData e = new EventData();\n+\t\t\twhile (eventReader.nextValueToken()) {\n+\t\t\t\tString propName = eventReader.getCurrentName();\n+\t\t\t\tif (propName.equals(\"hosts\")) {\n+\t\t\t\t\t// import hosts\n+\t\t\t\t\tString hostnames = (String) importHosts(eventReader.getJsonArray(), null)[0];\n+\t\t\t\t\t// store hosts namen\n+\t\t\t\t\te.set(EventData.COLUMN_HOSTS, hostnames);\n+\t\t\t\t} else if (propName.equals(\"triggers\")) {\n+\t\t\t\t\t// import triggers\n+\t\t\t\t\timportTriggers(eventReader.getJsonArray());\n+\t\t\t\t} else if (propName.equals(EventData.COLUMN_EVENTID)) {\n+\t\t\t\t\te.set(EventData.COLUMN_EVENTID, Long.parseLong(eventReader.getText()));\n+\t\t\t\t} else if (propName.equals(EventData.COLUMN_CLOCK)) {\n+\t\t\t\t\te.set(EventData.COLUMN_CLOCK, Integer.parseInt(eventReader.getText()));\n+\t\t\t\t} else if (propName.equals(EventData.COLUMN_OBJECTID)) {\n+\t\t\t\t\te.set(EventData.COLUMN_OBJECTID, Long.parseLong(eventReader.getText()));\n+\t\t\t\t} else if (propName.equals(EventData.COLUMN_ACK)) {\n+\t\t\t\t\te.set(EventData.COLUMN_ACK, Integer.parseInt(eventReader.getText()) == 1);\n+\t\t\t\t} else if (propName.equals(EventData.COLUMN_VALUE)) {\n+\t\t\t\t\te.set(EventData.COLUMN_VALUE, Integer.parseInt(eventReader.getText()));\n+\t\t\t\t} else {\n+\t\t\t\t\teventReader.nextProperty();\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\t// event is parsed and can be inserted into the db\n+\t\t\tif (numEvents == null) {\n+\t\t\t\te.insert(zabbixLocalDB, EventData.COLUMN_EVENTID);\n+\t\t\t} else {\n+\t\t\t\te.insert(zabbixLocalDB);\n+\t\t\t\tif (++i % 10 == 0) {\n+\t\t\t\t\tshowProgress(i*100/numEvents);\n+\t\t\t\t}\n+\t\t\t}\n+\n+\t\t\t_commitTransactionIfRecommended();\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * import graph items\n+\t *\n+\t * @param graphItems\n+\t * @return true, if graphid column has to be updated from -1 to the correct graphid later.\n+\t * @throws JsonParseException\n+\t * @throws NumberFormatException\n+\t * @throws IOException\n+\t */\n+\tprivate boolean importGraphItems(JsonArrayReader graphItems) throws JsonParseException, NumberFormatException, IOException {\n+\t\tboolean mustSetGraphid = false;\n+\t\tJsonObjectReader graphItemReader;\n+\t\twhile ((graphItemReader = graphItems.next()) != null) {\n+\t\t\tGraphItemData gi = new GraphItemData();\n+\t\t\twhile (graphItemReader.nextValueToken()) {\n+\t\t\t\tString propName = graphItemReader.getCurrentName();\n+\t\t\t\tif (propName.equals(\"gitemid\")) {\n+\t\t\t\t\tgi.set(GraphItemData.COLUMN_GRAPHITEMID, Long.parseLong(graphItemReader.getText()));\n+\t\t\t\t} else if (propName.equals(GraphItemData.COLUMN_GRAPHID)) {\n+\t\t\t\t\tgi.set(GraphItemData.COLUMN_GRAPHID, Long.parseLong(graphItemReader.getText()));\n+\t\t\t\t} else if (propName.equals(GraphItemData.COLUMN_ITEMID)) {\n+\t\t\t\t\tgi.set(GraphItemData.COLUMN_ITEMID, Long.parseLong(graphItemReader.getText()));\n+\t\t\t\t} else if (propName.equals(GraphItemData.COLUMN_COLOR)) {\n+\t\t\t\t\t// hex string => color int\n+\t\t\t\t\tgi.set(GraphItemData.COLUMN_COLOR, Color.parseColor(\"#\"+graphItemReader.getText()));\n+\t\t\t\t} else {\n+\t\t\t\t\tgraphItemReader.nextProperty();\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\t// if graphid-column was not set, this must be done later. temporary graphid=-1\n+\t\t\tif (gi.get(GraphItemData.COLUMN_GRAPHID) == null) {\n+\t\t\t\tgi.set(GraphItemData.COLUMN_GRAPHID, -1);\n+\t\t\t\tmustSetGraphid = true;\n+\t\t\t}\n+\t\t\tgi.insert(zabbixLocalDB);\n+\t\t}\n+\t\treturn mustSetGraphid;\n+\t}\n+\n+\tpublic void importGraphsForScreen(long screenid) throws ClientProtocolException, IOException, JSONException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n+\t\tif (!isCached(GraphData.TABLE_NAME, \"screenid=\"+screenid)) {\n+\t\t\t_startTransaction();\n+\n+\t\t\t// collect all graphids\n+\t\t\tSet<Long> graphids = new HashSet<Long>();\n+\t\t\tCursor cur = zabbixLocalDB.query(ScreenItemData.TABLE_NAME, null, ScreenItemData.COLUMN_SCREENID+\"=\"+screenid, null, null, null, null);\n+\t\t\twhile (cur.moveToNext()) {\n+\t\t\t\tgraphids.add(cur.getLong(cur.getColumnIndex(ScreenItemData.COLUMN_RESOURCEID)));\n+\t\t\t}\n+\n+\t\t\t// delete old graphs\n+\t\t\tString str_graphids = graphids.toString().replace(\"[\", \"\").replace(\"]\", \"\");\n+\t\t\tif (str_graphids.length()>0) {\n+\t\t\t\tzabbixLocalDB.delete(GraphData.TABLE_NAME, GraphData.COLUMN_GRAPHID+\" IN (\"+str_graphids+\")\", null);\n+\t\t\t\tzabbixLocalDB.delete(GraphItemData.TABLE_NAME, GraphItemData.COLUMN_GRAPHID+\" IN (\"+str_graphids+\")\", null);\n+\t\t\t}\n+\t\t\tzabbixLocalDB.delete(CacheData.TABLE_NAME, CacheData.COLUMN_KIND+\"='\"+GraphData.TABLE_NAME+\"' AND \"+CacheData.COLUMN_FILTER+\"='screenid=\"+screenid+'\\'', null);\n+\n+\t\t\tJsonArrayReader graphs = _queryStream(\n+\t\t\t\t\t\"graph.get\"\n+\t\t\t\t\t, new JSONObject()\n+\t\t\t\t\t\t.put(isVersion2?\"selectGraphItems\":\"select_graph_items\", \"extend\")\n+\t\t\t\t\t\t.put(isVersion2?\"selectItems\":\"select_items\", \"extend\")\n+\t\t\t\t\t\t.put(\"output\", \"extend\")\n+\t\t\t\t\t\t.put(\"graphids\", new JSONArray(graphids))\n+\t\t\t);\n+\t\t\tJsonObjectReader graphReader;\n+\t\t\twhile ((graphReader = graphs.next()) != null) {\n+\t\t\t\tboolean mustSetGraphid = false;\n+\t\t\t\tGraphData scr = new GraphData();\n+\t\t\t\twhile (graphReader.nextValueToken()) {\n+\t\t\t\t\tString propName = graphReader.getCurrentName();\n+\t\t\t\t\tif (propName.equals(GraphData.COLUMN_GRAPHID)) {\n+\t\t\t\t\t\tscr.set(GraphData.COLUMN_GRAPHID, Long.parseLong(graphReader.getText()));\n+\t\t\t\t\t} else if (propName.equals(GraphData.COLUMN_NAME)) {\n+\t\t\t\t\t\tscr.set(GraphData.COLUMN_NAME, graphReader.getText());\n+\t\t\t\t\t} else if (propName.equals(\"gitems\")) {\n+\t\t\t\t\t\tmustSetGraphid = importGraphItems(graphReader.getJsonArray());\n+\t\t\t\t\t} else if (propName.equals(\"items\")) {\n+\t\t\t\t\t\timportItems(graphReader.getJsonArray(), 0, true);\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tgraphReader.nextProperty();\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\tscr.insert(zabbixLocalDB);\n+\t\t\t\tif (mustSetGraphid) {\n+\t\t\t\t\tContentValues values = new ContentValues(1);\n+\t\t\t\t\tvalues.put(GraphItemData.COLUMN_GRAPHID, (Long) scr.get(GraphData.COLUMN_GRAPHID));\n+\t\t\t\t\tzabbixLocalDB.update(\n+\t\t\t\t\t\t\tGraphItemData.TABLE_NAME\n+\t\t\t\t\t\t\t, values\n+\t\t\t\t\t\t\t, GraphItemData.COLUMN_GRAPHID+\"=-1\"\n+\t\t\t\t\t\t\t, null);\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\tgraphs.close();\n+\n+\t\t\tsetCached(GraphData.TABLE_NAME, \"screenid=\"+screenid, ZabbixConfig.CACHE_LIFETIME_SCREENS);\n+\t\t\t_endTransaction();\n+\t\t}\n+\t}\n+\n+\tpublic void importHistoryDetails(String itemid) throws ClientProtocolException, IOException, JSONException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n+\t\tif (!isCached(HistoryDetailData.TABLE_NAME, itemid)) {\n+\t\t\t_startTransaction();\n+\t\t\tzabbixLocalDB.delete(HistoryDetailData.TABLE_NAME, HistoryDetailData.COLUMN_ITEMID+\"=\"+itemid, null);\n+\n+\t\t\t// the past 2 hours\n+\t\t\tlong time_till = new Date().getTime() / 1000;\n+\t\t\tlong time_from = time_till - ZabbixConfig.HISTORY_GET_TIME_FROM_SHIFT; // jetzt-2h\n+\n+\t\t\t// Workaround: historydetails only comes if you use the correct \"history\"-parameter.\n+\t\t\t// this parameter can be \"null\" or a number 0-4. Because we don't know when to use which,\n+\t\t\t// we try them all, until we get results.\n+\t\t\tInteger historytype = null;\n+\t\t\tJSONObject result = _queryBuffer(\n+\t\t\t\t\t\"history.get\"\n+\t\t\t\t\t, new JSONObject()\n+\t\t\t\t\t\t.put(\"limit\", 1)\n+\t\t\t\t\t\t.put(\"history\", historytype) // for integer ?\n+\t\t\t\t\t\t.put(\"itemids\", new JSONArray().put(itemid))\n+\t\t\t\t\t\t.put(\"time_from\", time_from)\n+\t\t\t);\n+\n+\t\t\tJSONArray testHistorydetails = result.getJSONArray(\"result\");\n+\t\t\tif (testHistorydetails.length() == 0) {\n+\t\t\t\thistorytype = -1;\n+\t\t\t\twhile (testHistorydetails.length() == 0 && ++historytype <= 4) {\n+\t\t\t\t\t// if we get an empty array, we try another history parameter\n+\t\t\t\t\tresult = _queryBuffer(\n+\t\t\t\t\t\t\t\"history.get\"\n+\t\t\t\t\t\t\t, new JSONObject()\n+\t\t\t\t\t\t\t\t.put(\"output\", \"extend\")\n+\t\t\t\t\t\t\t\t.put(\"limit\", 1)\n+\t\t\t\t\t\t\t\t.put(\"history\", historytype)\n+\t\t\t\t\t\t\t\t.put(\"itemids\", new JSONArray().put(itemid))\n+\t\t\t\t\t\t\t\t.put(\"time_from\", time_from)\n+\t\t\t\t\t);\n+\t\t\t\t\ttestHistorydetails = result.getJSONArray(\"result\");\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\t// correct historytype found and there are data\n+\t\t\tif (testHistorydetails.length() > 0) {\n+\t\t\t\t// count of the entries cannot be detected (zabbix bug),\n+\t\t\t\t// so we use a fiction\n+\t\t\t\tint numDetails = 400;\n+\t\t\t\tint curI=0;\n+\t\t\t\tJsonArrayReader historydetails = _queryStream(\n+\t\t\t\t\t\t\"history.get\"\n+\t\t\t\t\t\t, new JSONObject()\n+\t\t\t\t\t\t\t.put(\"output\", \"extend\")\n+\t\t\t\t\t\t\t.put(\"limit\", ZabbixConfig.HISTORY_GET_LIMIT)\n+\t\t\t\t\t\t\t.put(\"history\", historytype)\n+\t\t\t\t\t\t\t.put(\"itemids\", new JSONArray().put(itemid))\n+\t\t\t\t\t\t\t.put(\"time_from\", time_from)\n+\t\t\t\t\t\t\t.put(\"sortfield\", \"clock\")\n+\t\t\t\t\t\t\t.put(\"sortorder\", \"DESC\")\n+\t\t\t\t);\n+\t\t\t\tJsonObjectReader historydetail;\n+\t\t\t\ttry {\n+\t\t\t\t\tint selI = 0;\n+\t\t\t\t\twhile ((historydetail = historydetails.next()) != null) {\n+\t\t\t\t\t\t// save only every 20th\n+\t\t\t\t\t\tif (selI++ % 20 != 0) {\n+\t\t\t\t\t\t\twhile (historydetail.nextValueToken()) {\n+\t\t\t\t\t\t\t\thistorydetail.nextProperty();\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\tcontinue;\n+\t\t\t\t\t\t}\n+\n+\t\t\t\t\t\tHistoryDetailData h = new HistoryDetailData();\n+\t\t\t\t\t\twhile (historydetail.nextValueToken()) {\n+\t\t\t\t\t\t\tString propName = historydetail.getCurrentName();\n+\t\t\t\t\t\t\tif (propName.equals(HistoryDetailData.COLUMN_CLOCK)) {\n+\t\t\t\t\t\t\t\th.set(HistoryDetailData.COLUMN_CLOCK, Integer.parseInt(historydetail.getText()));\n+\t\t\t\t\t\t\t} else if (propName.equals(HistoryDetailData.COLUMN_ITEMID)) {\n+\t\t\t\t\t\t\t\th.set(HistoryDetailData.COLUMN_ITEMID, Long.parseLong(historydetail.getText()));\n+\t\t\t\t\t\t\t} else if (propName.equals(HistoryDetailData.COLUMN_VALUE)) {\n+\t\t\t\t\t\t\t\th.set(HistoryDetailData.COLUMN_VALUE, Double.parseDouble(historydetail.getText()));\n+\t\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\t\thistorydetail.nextProperty();\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\th.insert(zabbixLocalDB);\n+\t\t\t\t\t\tif (++curI % 10 == 0) {\n+\t\t\t\t\t\t\tshowProgress(Math.min(curI*100/numDetails, 84));\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\t_commitTransactionIfRecommended();\n+\t\t\t\t\t}\n+\t\t\t\t} catch (NumberFormatException e) {\n+\t\t\t\t\t// data are unuseable, e.g. because it's a string\n+\t\t\t\t}\n+\t\t\t\thistorydetails.close();\n+\t\t\t}\n+\t\t\tsetCached(HistoryDetailData.TABLE_NAME, itemid, ZabbixConfig.CACHE_LIFETIME_HISTORY_DETAILS);\n+\t\t\t_endTransaction();\n+\t\t}\n+\t}\n+\n+\tprivate long importHostGroups(JsonArrayReader jsonArray) throws JsonParseException, IOException {\n+\t\tlong firstHostGroupId = -1;\n+\t\tJsonObjectReader hostReader;\n+\t\twhile ((hostReader = jsonArray.next()) != null) {\n+\t\t\tHostGroupData h = new HostGroupData();\n+\t\t\twhile (hostReader.nextValueToken()) {\n+\t\t\t\tString propName = hostReader.getCurrentName();\n+\t\t\t\tif (propName.equals(HostGroupData.COLUMN_GROUPID)) {\n+\t\t\t\t\tlong id = Long.parseLong(hostReader.getText());\n+\t\t\t\t\tif (firstHostGroupId == -1) firstHostGroupId = id;\n+\t\t\t\t\th.set(HostGroupData.COLUMN_GROUPID, id);\n+\t\t\t\t} else if (propName.equals(HostGroupData.COLUMN_NAME)) {\n+\t\t\t\t\th.set(HostGroupData.COLUMN_NAME, hostReader.getText());\n+\t\t\t\t} else {\n+\t\t\t\t\thostReader.nextProperty();\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\th.insert(zabbixLocalDB, HostGroupData.COLUMN_GROUPID);\n+\t\t\t_commitTransactionIfRecommended();\n+\t\t}\n+\n+\t\treturn firstHostGroupId;\n+\t}\n+\n+\t/**\n+\t * import the hosts from stream\n+\t * @param jsonArray stream\n+\t * @param numHosts count of hosts for progressbar. null if unknown.\n+\t * @return Object[] {(String) comma-separated all Hostnames, (Long) 1. host id}\n+\t * @throws JsonParseException\n+\t * @throws IOException\n+\t */\n+\tprivate Object[] importHosts(JsonArrayReader jsonArray, Integer numHosts) throws JsonParseException, IOException {\n+\t\tList<String> hostnames = new ArrayList<String>();\n+\t\tlong firstHostId = -1;\n+\t\tJsonObjectReader hostReader;\n+\t\tint i=0;\n+\t\twhile ((hostReader = jsonArray.next()) != null) {\n+\t\t\tHostData h = new HostData();\n+\t\t\twhile (hostReader.nextValueToken()) {\n+\t\t\t\tString propName = hostReader.getCurrentName();\n+\t\t\t\tif (propName.equals(HostData.COLUMN_HOSTID)) {\n+\t\t\t\t\th.set(HostData.COLUMN_HOSTID, Long.parseLong(hostReader.getText()));\n+\t\t\t\t\tif (firstHostId == -1) {\n+\t\t\t\t\t\tfirstHostId = (Long) h.get(HostData.COLUMN_HOSTID);\n+\t\t\t\t\t}\n+\t\t\t\t} else if (propName.equals(HostData.COLUMN_HOST)) {\n+\t\t\t\t\tString host = hostReader.getText();\n+\t\t\t\t\thostnames.add(host);\n+\t\t\t\t\th.set(HostData.COLUMN_HOST, host);\n+\t\t\t\t} else if (propName.equals(\"groups\")) {\n+\t\t\t\t\tlong groupid = importHostGroups(hostReader.getJsonArray());\n+\t\t\t\t\tif (groupid != -1) {\n+\t\t\t\t\t\th.set(HostData.COLUMN_GROUPID, groupid);\n+\t\t\t\t\t}\n+\t\t\t\t} else {\n+\t\t\t\t\thostReader.nextProperty();\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\t// host without group will get group #0 (other)\n+\t\t\tif (h.get(HostData.COLUMN_GROUPID) == null) {\n+\t\t\t\th.set(HostData.COLUMN_GROUPID, 0);\n+\t\t\t\t// create \"other\" hostgroup #1\n+\t\t\t\tHostGroupData hg = new HostGroupData();\n+\t\t\t\thg.set(HostGroupData.COLUMN_GROUPID, 0);\n+\t\t\t\thg.set(HostGroupData.COLUMN_NAME, \"- \"+context.getResources().getString(R.string.other)+\" -\");\n+\t\t\t\thg.insert(zabbixLocalDB, HostGroupData.COLUMN_GROUPID);\n+\t\t\t}\n+\t\t\th.insert(zabbixLocalDB, HostData.COLUMN_HOSTID);\n+\t\t\tif (numHosts != null && ++i % 10 == 0) {\n+\t\t\t\tshowProgress(i*100/numHosts);\n+\t\t\t}\n+\t\t\t_commitTransactionIfRecommended();\n+\t\t}\n+\n+\t\treturn new Object[] {hostnames.toString().replaceAll(\"[\\\\[\\\\]]\", \"\"), firstHostId};\n+\t}\n+\n+\tpublic void importHostsAndGroups() throws JSONException, IOException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n+\t\tif (!isCached(HostData.TABLE_NAME, null)) {\n+\t\t\t_startTransaction();\n+\t\t\tzabbixLocalDB.delete(HostData.TABLE_NAME, null, null);\n+\t\t\tzabbixLocalDB.delete(HostGroupData.TABLE_NAME, null, null);\n+\n+\t\t\t// get count of hosts\n+\t\t\tJSONObject result = _queryBuffer(\n+\t\t\t\t\t\"host.get\"\n+\t\t\t\t\t, new JSONObject()\n+\t\t\t\t\t\t.put(\"countOutput\", 1)\n+\t\t\t\t\t\t.put(\"limit\", ZabbixConfig.HOST_GET_LIMIT)\n+\t\t\t\t\t\t.put(isVersion2?\"selectGroups\":\"select_groups\", \"extend\")\n+\t\t\t);\n+\t\t\tint numHosts = result.getInt(\"result\");\n+\t\t\tJsonArrayReader hosts = _queryStream(\n+\t\t\t\t\t\"host.get\"\n+\t\t\t\t\t, new JSONObject()\n+\t\t\t\t\t\t.put(\"output\", \"extend\")\n+\t\t\t\t\t\t.put(\"limit\", ZabbixConfig.HOST_GET_LIMIT)\n+\t\t\t\t\t\t.put(isVersion2?\"selectGroups\":\"select_groups\", \"extend\")\n+\t\t\t);\n+\t\t\timportHosts(hosts, numHosts);\n+\t\t\thosts.close();\n+\n+\t\t\tsetCached(HostData.TABLE_NAME, null, ZabbixConfig.CACHE_LIFETIME_HOSTS);\n+\t\t\t_endTransaction();\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * import items from stream.\n+\t * @param items stream\n+\t * @param numItems count for progressbar, if 0 no progressbarupdate\n+\t * @param checkBeforeInsert if true, only make an insert if item does not exist\n+\t * @return the first item id\n+\t * @throws JsonParseException\n+\t * @throws IOException\n+\t */\n+\tprivate long importItems(JsonArrayReader items, int numItems, boolean checkBeforeInsert) throws JsonParseException, IOException {\n+\t\tlong firstItemId = -1;\n+\t\tint curI=0;\n+\t\tJsonObjectReader itemReader;\n+\t\twhile ((itemReader = items.next()) != null) {\n+\t\t\tItemData i = new ItemData();\n+\t\t\tString key_ = null;\n+\t\t\twhile (itemReader.nextValueToken()) {\n+\t\t\t\tString propName = itemReader.getCurrentName();\n+\t\t\t\tif (propName.equals(ItemData.COLUMN_ITEMID)) {\n+\t\t\t\t\ti.set(ItemData.COLUMN_ITEMID, Long.parseLong(itemReader.getText()));\n+\t\t\t\t\tif (firstItemId == -1) {\n+\t\t\t\t\t\tfirstItemId = (Long) i.get(ItemData.COLUMN_ITEMID);\n+\t\t\t\t\t}\n+\t\t\t\t} else if (propName.equals(ItemData.COLUMN_HOSTID)) {\n+\t\t\t\t\ti.set(ItemData.COLUMN_HOSTID, Long.parseLong(itemReader.getText()));\n+\t\t\t\t} else if (propName.equals(ItemData.COLUMN_DESCRIPTION) || propName.equals(\"name\")) {\n+\t\t\t\t\t// since zabbix 2.x is the name of the item \"name\"\n+\t\t\t\t\t// before zabbix 2.x the name field was \"description\"\n+\t\t\t\t\tif (isVersion2 && propName.equals(\"name\")) {\n+\t\t\t\t\t\ti.set(ItemData.COLUMN_DESCRIPTION, itemReader.getText());\n+\t\t\t\t\t} else if (!isVersion2) {\n+\t\t\t\t\t\ti.set(ItemData.COLUMN_DESCRIPTION, itemReader.getText());\n+\t\t\t\t\t}\n+\t\t\t\t} else if (propName.equals(ItemData.COLUMN_LASTCLOCK)) {\n+\t\t\t\t\ttry {\n+\t\t\t\t\t\ti.set(ItemData.COLUMN_LASTCLOCK, Integer.parseInt(itemReader.getText()));\n+\t\t\t\t\t} catch (NumberFormatException e) {\n+\t\t\t\t\t\t// ignore\n+\t\t\t\t\t}\n+\t\t\t\t} else if (propName.equals(ItemData.COLUMN_LASTVALUE)) {\n+\t\t\t\t\ti.set(ItemData.COLUMN_LASTVALUE, itemReader.getText());\n+\t\t\t\t} else if (propName.equals(ItemData.COLUMN_UNITS)) {\n+\t\t\t\t\ti.set(ItemData.COLUMN_UNITS, itemReader.getText());\n+\t\t\t\t} else if (propName.equals(\"key_\")) {\n+\t\t\t\t\tkey_ = itemReader.getText();\n+\t\t\t\t} else if (propName.equals(\"applications\")) {\n+\t\t\t\t\t// at this point itemid and hostid is unknown\n+\t\t\t\t\t// because of this, all applicationrelations will be saved with itemid and hostid \"-1\".\n+\t\t\t\t\t// later the IDs will be replaced with the correct\n+\t\t\t\t\timportApplications(-1, -1, itemReader.getJsonArray());\n+\t\t\t\t} else {\n+\t\t\t\t\titemReader.nextProperty();\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\t// if applicable replace placeholder\n+\t\t\tString description = (String) i.get(ItemData.COLUMN_DESCRIPTION);\n+\t\t\tif (description.matches(\".*\\\\$[0-9].*\")) {\n+\t\t\t\tif (key_ != null && key_.indexOf('[') != -1) {\n+\t\t\t\t\tString[] keys = key_.substring(key_.indexOf('[')+1, key_.indexOf(']')).split(\",\");\n+\t\t\t\t\tfor (int ix=0; ix<keys.length; ix++) {\n+\t\t\t\t\t\tdescription = description.replace(\"$\"+(ix+1), keys[ix]);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\ti.set(ItemData.COLUMN_DESCRIPTION, description);\n+\t\t\tif (checkBeforeInsert) {\n+\t\t\t\ti.insert(zabbixLocalDB, ItemData.COLUMN_ITEMID);\n+\t\t\t} else {\n+\t\t\t\ti.insert(zabbixLocalDB);\n+\t\t\t}\n+\t\t\tif (numItems > 0 && ++curI % 10 == 0) {\n+\t\t\t\tshowProgress(curI*100/numItems);\n+\t\t\t}\n+\n+\t\t\t// now the \"-1\" IDs of applicationsrelation will be replaced with the correct itemID\n+\t\t\tContentValues values = new ContentValues(2);\n+\t\t\tvalues.put(ApplicationItemRelationData.COLUMN_ITEMID, (Long) i.get(ItemData.COLUMN_ITEMID));\n+\t\t\tvalues.put(ApplicationItemRelationData.COLUMN_HOSTID, (Long) i.get(ItemData.COLUMN_HOSTID));\n+\t\t\tzabbixLocalDB.update(\n+\t\t\t\t\tApplicationItemRelationData.TABLE_NAME\n+\t\t\t\t\t, values\n+\t\t\t\t\t, ApplicationItemRelationData.COLUMN_ITEMID+\"=-1\"\n+\t\t\t\t\t, null\n+\t\t\t);\n+\t\t}\n+\t\treturn firstItemId;\n+\t}\n+\n+\tpublic void importItems(long hostid) throws JSONException, IOException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n+\t\tif (!isCached(ItemData.TABLE_NAME, \"hostid=\"+hostid)) {\n+\t\t\t_startTransaction();\n+\t\t\tzabbixLocalDB.delete(ItemData.TABLE_NAME, ItemData.COLUMN_HOSTID+\"=\"+hostid, null);\n+\t\t\tzabbixLocalDB.delete(ApplicationItemRelationData.TABLE_NAME, ApplicationItemRelationData.COLUMN_HOSTID+\"=\"+hostid, null);\n+\n+\t\t\t// count of items\n+\t\t\tJSONObject result = _queryBuffer(\n+\t\t\t\t\t\"item.get\"\n+\t\t\t\t\t, new JSONObject()\n+\t\t\t\t\t.put(\"output\", \"extend\")\n+\t\t\t\t\t.put(\"countOutput\", 1)\n+\t\t\t\t\t.put(\"limit\", ZabbixConfig.ITEM_GET_LIMIT)\n+\t\t\t\t\t.put(\"hostids\", new JSONArray().put(hostid))\n+\t\t\t);\n+\t\t\tint numItems = result.getInt(\"result\");\n+\t\t\tJsonArrayReader items = _queryStream(\n+\t\t\t\t\t\"item.get\"\n+\t\t\t\t\t, new JSONObject()\n+\t\t\t\t\t\t.put(\"output\", \"extend\")\n+\t\t\t\t\t\t.put(\"limit\", ZabbixConfig.ITEM_GET_LIMIT)\n+\t\t\t\t\t\t.put(isVersion2?\"selectApplications\":\"select_applications\", \"extend\")\n+\t\t\t\t\t\t.put(\"hostids\", new JSONArray().put(hostid))\n+\t\t\t);\n+\t\t\timportItems(items, numItems, false);\n+\t\t\titems.close();\n+\n+\t\t\tsetCached(ItemData.TABLE_NAME, \"hostid=\"+hostid, ZabbixConfig.CACHE_LIFETIME_ITEMS);\n+\t\t\t_endTransaction();\n+\t\t}\n+\t}\n+\n+\tprivate void importScreenItems(JsonArrayReader screenItems) throws JsonParseException, NumberFormatException, IOException {\n+\t\tJsonObjectReader screenItemReader;\n+\t\twhile ((screenItemReader = screenItems.next()) != null) {\n+\t\t\tScreenItemData si = new ScreenItemData();\n+\t\t\tint resourcetype = -1;\n+\t\t\twhile (screenItemReader.nextValueToken()) {\n+\t\t\t\tString propName = screenItemReader.getCurrentName();\n+\t\t\t\tif (propName.equals(ScreenItemData.COLUMN_SCREENITEMID)) {\n+\t\t\t\t\tsi.set(ScreenItemData.COLUMN_SCREENITEMID, Long.parseLong(screenItemReader.getText()));\n+\t\t\t\t} else if (propName.equals(ScreenItemData.COLUMN_SCREENID)) {\n+\t\t\t\t\tsi.set(ScreenItemData.COLUMN_SCREENID, Long.parseLong(screenItemReader.getText()));\n+\t\t\t\t} else if (propName.equals(ScreenItemData.COLUMN_RESOURCEID)) {\n+\t\t\t\t\tsi.set(ScreenItemData.COLUMN_RESOURCEID, Long.parseLong(screenItemReader.getText()));\n+\t\t\t\t} else if (propName.equals(\"resourcetype\")) {\n+\t\t\t\t\tresourcetype = Integer.parseInt(screenItemReader.getText());\n+\t\t\t\t} else {\n+\t\t\t\t\tscreenItemReader.nextProperty();\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\t// only resouretype == 0\n+\t\t\tif (resourcetype == 0) {\n+\t\t\t\tsi.insert(zabbixLocalDB);\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\tpublic void importScreens() throws ClientProtocolException, IOException, JSONException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n+\t\tif (!isCached(ScreenData.TABLE_NAME, null)) {\n+\t\t\t_startTransaction();\n+\n+\t\t\tzabbixLocalDB.delete(ScreenData.TABLE_NAME, null, null);\n+\t\t\tzabbixLocalDB.delete(ScreenItemData.TABLE_NAME, null, null);\n+\t\t\tzabbixLocalDB.delete(CacheData.TABLE_NAME, CacheData.COLUMN_KIND+\"='\"+ScreenData.TABLE_NAME+\"'\", null);\n+\n+\t\t\tJsonArrayReader screens = _queryStream(\n+\t\t\t\t\t(isVersion2?\"s\":\"S\")+\"creen.get\"\n+\t\t\t\t\t, new JSONObject()\n+\t\t\t\t\t\t.put(\"output\", \"extend\")\n+\t\t\t\t\t\t.put(isVersion2?\"selectScreenItems\":\"select_screenitems\", \"extend\")\n+\t\t\t);\n+\t\t\tJsonObjectReader screenReader;\n+\t\t\twhile ((screenReader = screens.next()) != null) {\n+\t\t\t\tScreenData scr = new ScreenData();\n+\t\t\t\twhile (screenReader.nextValueToken()) {\n+\t\t\t\t\tString propName = screenReader.getCurrentName();\n+\t\t\t\t\tif (propName.equals(ScreenData.COLUMN_SCREENID)) {\n+\t\t\t\t\t\tscr.set(ScreenData.COLUMN_SCREENID, Long.parseLong(screenReader.getText()));\n+\t\t\t\t\t} else if (propName.equals(ScreenData.COLUMN_NAME)) {\n+\t\t\t\t\t\tscr.set(ScreenData.COLUMN_NAME, screenReader.getText());\n+\t\t\t\t\t} else if (propName.equals(\"screenitems\")) {\n+\t\t\t\t\t\timportScreenItems(screenReader.getJsonArray());\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tscreenReader.nextProperty();\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\tscr.insert(zabbixLocalDB);\n+\t\t\t}\n+\t\t\tscreens.close();\n+\n+\t\t\tsetCached(ScreenData.TABLE_NAME, null, ZabbixConfig.CACHE_LIFETIME_SCREENS);\n+\t\t\t_endTransaction();\n+\t\t}\n+\t}\n+\n+\tpublic void importTrigger(String triggerid) throws JSONException, IOException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n+\t\tif (!isCached(TriggerData.TABLE_NAME, \"triggerid=\"+triggerid)) {\n+\t\t\t_startTransaction();\n+\n+\t\t\tJsonArrayReader trigger = _queryStream(\n+\t\t\t\t\t\"trigger.get\"\n+\t\t\t\t\t, new JSONObject()\n+\t\t\t\t\t\t.put(\"output\", \"extend\")\n+\t\t\t\t\t\t.put(isVersion2?\"selectHosts\":\"select_hosts\", \"extend\")\n+\t\t\t\t\t\t.put(\"triggerids\", new JSONArray().put(triggerid))\n+\t\t\t);\n+\t\t\timportTriggers(trigger);\n+\t\t\ttrigger.close();\n+\n+\t\t\tsetCached(TriggerData.TABLE_NAME, \"triggerid=\"+triggerid, ZabbixConfig.CACHE_LIFETIME_TRIGGERS);\n+\t\t\t_endTransaction();\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * importiert ein trigger mit dem attribute itemid. ggf. wird der trigger zuerst gelöscht und neu angelegt.\n+\t * imports a trigger with the attribute itemid. if trigger already exists, it will be removed first.\n+\t * @param triggerid\n+\t * @throws JSONException\n+\t * @throws IOException\n+\t * @throws HttpAuthorizationRequiredException\n+\t * @throws NoAPIAccessException\n+\t */\n+\tpublic void importTriggerColumnItemId(String triggerid) throws JSONException, IOException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n+\t\t// check if the trigger exists and if the itemid was set\n+\t\tboolean mustImport = true;\n+\t\tCursor cur = zabbixLocalDB.query(TriggerData.TABLE_NAME, null, TriggerData.COLUMN_TRIGGERID+\"=\"+triggerid, null, null, null, null);\n+\t\tif (cur.moveToFirst()) {\n+\t\t\tlong itemid = 0;\n+\t\t\ttry {\n+\t\t\t\titemid = cur.getLong(cur.getColumnIndex(TriggerData.COLUMN_ITEMID));\n+\t\t\t} catch (Exception e) {\n+\t\t\t\t// no itemid\n+\t\t\t}\n+\t\t\tif (itemid > 0) {\n+\t\t\t\tmustImport = false;\n+\t\t\t}\n+\t\t}\n+\t\tif (mustImport) {\n+\t\t\t_startTransaction();\n+\t\t\tzabbixLocalDB.delete(TriggerData.TABLE_NAME, TriggerData.COLUMN_TRIGGERID+\"=\"+triggerid, null);\n+\t\t\tJsonArrayReader triggers = _queryStream(\n+\t\t\t\t\t\"trigger.get\"\n+\t\t\t\t\t, new JSONObject()\n+\t\t\t\t\t\t.put(\"output\", \"extend\")\n+\t\t\t\t\t\t.put(isVersion2?\"selectHosts\":\"select_hosts\", \"extend\")\n+\t\t\t\t\t\t.put(isVersion2?\"selectGroups\":\"select_groups\", \"extend\")\n+\t\t\t\t\t\t.put(isVersion2?\"selectItems\":\"select_items\", \"extend\")\n+\t\t\t\t\t\t.put(\"triggerids\", new JSONArray().put(triggerid))\n+\t\t\t\t\t\t.put(\"limit\", 1)\n+\t\t\t);\n+\t\t\timportTriggers(triggers);\n+\t\t\t_endTransaction();\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * imports the \"warning\"-triggers\n+\t * @throws JSONException\n+\t * @throws IOException\n+\t * @throws HttpAuthorizationRequiredException\n+\t * @throws NoAPIAccessException\n+\t */\n+\tpublic void importTriggers() throws JSONException, IOException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n+\t\tif (!isCached(TriggerData.TABLE_NAME, null)) {\n+\t\t\t_startTransaction();\n+\n+\t\t\tlong min = (new Date().getTime()/1000)-ZabbixConfig.STATUS_SHOW_TRIGGER_TIME;\n+\t\t\tJsonArrayReader triggers = _queryStream(\n+\t\t\t\t\t\"trigger.get\"\n+\t\t\t\t\t, new JSONObject()\n+\t\t\t\t\t\t.put(\"output\", \"extend\")\n+\t\t\t\t\t\t.put(\"sortfield\", \"lastchange\")\n+\t\t\t\t\t\t.put(\"sortorder\", \"desc\")\n+\t\t\t\t\t\t.put(isVersion2?\"selectHosts\":\"select_hosts\", \"extend\")\n+\t\t\t\t\t\t.put(isVersion2?\"selectGroups\":\"select_groups\", \"extend\")\n+\t\t\t\t\t\t.put(isVersion2?\"selectItems\":\"select_items\", \"extend\")\n+\t\t\t\t\t\t.put(\"lastChangeSince\", min)\n+\t\t\t\t\t\t.put(\"only_true\", \"1\")\n+\t\t\t\t\t\t.put(\"limit\", ZabbixConfig.TRIGGER_GET_LIMIT)\n+\t\t\t\t\t\t.put(\"expandDescription\", true)\n+\t\t\t);\n+\t\t\timportTriggers(triggers);\n+\t\t\ttriggers.close();\n+\n+\t\t\tsetCached(TriggerData.TABLE_NAME, null, ZabbixConfig.CACHE_LIFETIME_TRIGGERS);\n+\t\t\t_endTransaction();\n+\t\t}\n+\t}\n+\n+\tprivate void importTriggers(JsonArrayReader jsonArray) throws JsonParseException, IOException {\n+\t\tJsonObjectReader triggerReader;\n+\t\twhile ((triggerReader = jsonArray.next()) != null) {\n+\t\t\tTriggerData t = new TriggerData();\n+\t\t\twhile (triggerReader.nextValueToken()) {\n+\t\t\t\tString propName = triggerReader.getCurrentName();\n+\t\t\t\tif (propName.equals(TriggerData.COLUMN_TRIGGERID)) {\n+\t\t\t\t\tt.set(TriggerData.COLUMN_TRIGGERID, Long.parseLong(triggerReader.getText()));\n+\t\t\t\t} else if (propName.equals(TriggerData.COLUMN_COMMENTS)) {\n+\t\t\t\t\tt.set(TriggerData.COLUMN_COMMENTS, triggerReader.getText());\n+\t\t\t\t} else if (propName.equals(TriggerData.COLUMN_DESCRIPTION)) {\n+\t\t\t\t\tt.set(TriggerData.COLUMN_DESCRIPTION, triggerReader.getText());\n+\t\t\t\t} else if (propName.equals(TriggerData.COLUMN_EXPRESSION)) {\n+\t\t\t\t\tt.set(TriggerData.COLUMN_EXPRESSION, triggerReader.getText());\n+\t\t\t\t} else if (propName.equals(TriggerData.COLUMN_LASTCHANGE)) {\n+\t\t\t\t\tt.set(TriggerData.COLUMN_LASTCHANGE, Integer.parseInt(triggerReader.getText()));\n+\t\t\t\t} else if (propName.equals(TriggerData.COLUMN_PRIORITY)) {\n+\t\t\t\t\tt.set(TriggerData.COLUMN_PRIORITY, Integer.parseInt(triggerReader.getText()));\n+\t\t\t\t} else if (propName.equals(TriggerData.COLUMN_STATUS)) {\n+\t\t\t\t\tt.set(TriggerData.COLUMN_STATUS, Integer.parseInt(triggerReader.getText()));\n+\t\t\t\t} else if (propName.equals(TriggerData.COLUMN_VALUE)) {\n+\t\t\t\t\tt.set(TriggerData.COLUMN_VALUE, Integer.parseInt(triggerReader.getText()));\n+\t\t\t\t} else if (propName.equals(TriggerData.COLUMN_URL)) {\n+\t\t\t\t\tt.set(TriggerData.COLUMN_URL, triggerReader.getText());\n+\t\t\t\t} else if (propName.equals(\"hosts\")) {\n+\t\t\t\t\tObject[] hostsCache = importHosts(triggerReader.getJsonArray(), null);\n+\t\t\t\t\tt.set(TriggerData.COLUMN_HOSTS, hostsCache[0]);\n+\t\t\t\t\tt.set(TriggerData.COLUMN_HOSTID, hostsCache[1]);\n+\t\t\t\t} else if (propName.equals(\"groups\")) {\n+\t\t\t\t\timportHostGroups(triggerReader.getJsonArray());\n+\t\t\t\t} else if (propName.equals(\"items\")) {\n+\t\t\t\t\t// store the first item id\n+\t\t\t\t\tt.set(TriggerData.COLUMN_ITEMID, importItems(triggerReader.getJsonArray(), 1, true));\n+\t\t\t\t} else {\n+\t\t\t\t\ttriggerReader.nextProperty();\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\tt.insert(zabbixLocalDB, TriggerData.COLUMN_TRIGGERID);\n+\t\t\t_commitTransactionIfRecommended();\n+\t\t}\n+\t}\n+\n+\tpublic void importTriggersByItemId(String itemid) throws JSONException, IOException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n+\t\tif (!isCached(TriggerData.TABLE_NAME, \"itemid=\"+itemid)) {\n+\t\t\t_startTransaction();\n+\t\t\tzabbixLocalDB.delete(TriggerData.TABLE_NAME, TriggerData.COLUMN_ITEMID+\"=\"+itemid, null);\n+\t\t\tJsonArrayReader triggers = _queryStream(\n+\t\t\t\t\t\"trigger.get\"\n+\t\t\t\t\t, new JSONObject()\n+\t\t\t\t\t\t.put(\"output\", \"extend\")\n+\t\t\t\t\t\t.put(isVersion2?\"selectHosts\":\"select_hosts\", \"extend\")\n+\t\t\t\t\t\t.put(isVersion2?\"selectGroups\":\"select_groups\", \"extend\")\n+\t\t\t\t\t\t.put(isVersion2?\"selectItems\":\"select_items\", \"extend\")\n+\t\t\t\t\t\t.put(\"itemids\", new JSONArray().put(itemid))\n+\t\t\t\t\t\t.put(\"limit\", 1)\n+\t\t\t\t\t\t.put(\"sortfield\", \"lastchange\")\n+\t\t\t\t\t\t.put(\"sortorder\", \"DESC\")\n+\t\t\t);\n+\t\t\timportTriggers(triggers);\n+\t\t\tsetCached(TriggerData.TABLE_NAME, \"itemid=\"+itemid, ZabbixConfig.CACHE_LIFETIME_TRIGGERS);\n+\t\t\t_endTransaction();\n+\t\t}\n+\t}\n+\n+\tpublic boolean isCached(String kind, String filter) {\n+\t\tSQLiteQueryBuilder sqlBuilder = new SQLiteQueryBuilder();\n+\t\tsqlBuilder.setTables(CacheData.TABLE_NAME);\n+\t\tsqlBuilder.appendWhere(CacheData.COLUMN_KIND+\"='\"+kind+\"' AND \");\n+\t\tsqlBuilder.appendWhere(CacheData.COLUMN_FILTER+\n+\t\t\t\t(filter==null?\" IS NULL\":\"='\"+filter+\"'\")\n+\t\t);\n+\t\tsqlBuilder.appendWhere(\" AND \"+CacheData.COLUMN_EXPIRE_DATE+\">\"+new Date().getTime()/1000);\n+\t\tCursor cur = sqlBuilder.query(\n+\t\t\tzabbixLocalDB,\n+\t\t\tnull,\n+\t\t\tnull,\n+\t\t\tnull,\n+\t\t\tnull,\n+\t\t\tnull,\n+\t\t\tnull\n+\t\t);\n+\t\tLog.i(\"ZabbixContentProvider\", \"isCached \"+kind+\"//\"+filter+\"//\"+cur.moveToFirst());\n+\t\treturn cur.moveToFirst();\n+\t}\n+\n+\t/**\n+\t * public, for the unit test\n+\t */\n+\tpublic void setCached(String kind, String filter, int lifetime) {\n+\t\tCacheData cache = new CacheData();\n+\t\tcache.set(CacheData.COLUMN_EXPIRE_DATE, new Date().getTime()/1000 + lifetime);\n+\t\tcache.set(CacheData.COLUMN_KIND, kind);\n+\t\tif (filter != null) {\n+\t\t\tcache.set(CacheData.COLUMN_FILTER, filter);\n+\t\t}\n+\t\tcache.insert(zabbixLocalDB);\n+\t}\n+\n+\t/**\n+\t * updates the progressbar in the gui\n+\t * @param i 0..100\n+\t */\n+\tpublic void showProgress(int i) {\n+\t\t// if applicable, transform the progress\n+\t\tif (transformProgressStart != 0 && transformProgressEnd != 0) {\n+\t\t\ti = (int) (transformProgressStart + (transformProgressEnd-transformProgressStart)*(double)i/100);\n+\t\t}\n+\n+\t\tIntent intent = new Intent(ZabbixContentProvider.CONTENT_PROVIDER_INTENT_ACTION);\n+\t\tintent.putExtra(\"flag\", ZabbixContentProvider.INTENT_FLAG_SHOW_PROGRESS);\n+\t\tintent.putExtra(\"value\", i);\n+\t\tcontext.sendBroadcast(intent);\n+\t}\n+\n+\t/**\n+\t * transforms the progress\n+\t * @param start 0% => start%\n+\t * @param end 100% => end%\n+\t */\n+\tpublic void transformProgress(int start, int end) {\n+\t\ttransformProgressStart = start;\n+\t\ttransformProgressEnd = end;\n+\t}\n+}"],
    "repo_sni": "inovex/zax",
    "_version_": 1526823823532359680,
    "c_user_sni": "Jonas Gehring",
    "c_callsites_added_cs": "android.util.Log.d(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService.importItems(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader, int, boolean)#android.util.Log.d(java.lang.String, java.lang.String)#android.util.Log.d(java.lang.String, java.lang.String)#android.util.Log.i(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService.importTriggers(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader)#<unknown>.JsonArrayOrObjectReader(org.codehaus.jackson.JsonParser)#android.util.Log.d(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService.importTriggers(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader)#com.inovex.zabbixmobile.api.ZabbixService.importHosts(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader, int)#com.inovex.zabbixmobile.api.ZabbixService.importTriggers(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader)#android.util.Log.d(java.lang.String, java.lang.String)#android.util.Log.d(java.lang.String, java.lang.String)#org.codehaus.jackson.JsonParser.getCurrentToken()#org.codehaus.jackson.JsonParser.nextValue()#com.inovex.zabbixmobile.api.ZabbixService.importEvents(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader, null)#com.inovex.zabbixmobile.api.ZabbixService.importTriggers(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader)#android.util.Log.d(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService.importEvents(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader, int)",
    "p_user_sni": "Jonas Gehring",
    "c_subject_t": ["filter by severity, API can parse Object AND Array results"],
    "c_imports_added_cs": "<empty>",
    "c_callsites_removed_cs": "com.inovex.zabbixmobile.api.ZabbixService.importTriggers(com.inovex.zabbixmobile.api.JsonArrayReader)#<unknown>.JsonArrayReader(org.codehaus.jackson.JsonParser)#com.inovex.zabbixmobile.api.ZabbixService.importTriggers(com.inovex.zabbixmobile.api.JsonArrayReader)#com.inovex.zabbixmobile.api.ZabbixService.importEvents(com.inovex.zabbixmobile.api.JsonArrayReader, int)#com.inovex.zabbixmobile.api.ZabbixService.importTriggers(com.inovex.zabbixmobile.api.JsonArrayReader)#com.inovex.zabbixmobile.api.ZabbixService.importItems(com.inovex.zabbixmobile.api.JsonArrayReader, int, boolean)#com.inovex.zabbixmobile.api.ZabbixService.importHosts(com.inovex.zabbixmobile.api.JsonArrayReader, int)#com.inovex.zabbixmobile.api.ZabbixService.importTriggers(com.inovex.zabbixmobile.api.JsonArrayReader)#com.inovex.zabbixmobile.api.ZabbixService.importEvents(com.inovex.zabbixmobile.api.JsonArrayReader, null)"
  }, {
    "c_patch_no_context_t": ["-\t\t\t\t\tString hostnames = (String) importHosts(eventReader.getJsonArray(), null)[0];\n+\t\t\t\t\tString hostnames = (String) importHosts(eventReader.getJsonArrayOrObjectReader(), null)[0];\n-\t\t\t\t\timportTriggers(eventReader.getJsonArray());\n+\t\t\t\t\timportTriggers(eventReader.getJsonArrayOrObjectReader());\n-\t\t\t\t\t\tmustSetGraphid = importGraphItems(graphReader.getJsonArray());\n+\t\t\t\t\t\tmustSetGraphid = importGraphItems(graphReader.getJsonArrayOrObjectReader());\n-\t\t\t\t\t\timportItems(graphReader.getJsonArray(), 0, true);\n+\t\t\t\t\t\timportItems(graphReader.getJsonArrayOrObjectReader(), 0, true);\n-\t\t\t\t\tlong groupid = importHostGroups(hostReader.getJsonArray());\n+\t\t\t\t\tlong groupid = importHostGroups(hostReader.getJsonArrayOrObjectReader());\n-\t\t\t\t\timportApplications(-1, -1, itemReader.getJsonArray());\n+\t\t\t\t\timportApplications(-1, -1, itemReader.getJsonArrayOrObjectReader());\n-\t\t\t\t\t\timportScreenItems(screenReader.getJsonArray());\n+\t\t\t\t\t\timportScreenItems(screenReader.getJsonArrayOrObjectReader());\n-\t\t\t\t\tObject[] hostsCache = importHosts(triggerReader.getJsonArray(), null);\n+\t\t\t\t\tObject[] hostsCache = importHosts(triggerReader.getJsonArrayOrObjectReader(), null);\n-\t\t\t\t\timportHostGroups(triggerReader.getJsonArray());\n+\t\t\t\t\timportHostGroups(triggerReader.getJsonArrayOrObjectReader());\n-\t\t\t\t\tt.set(TriggerData.COLUMN_ITEMID, importItems(triggerReader.getJsonArray(), 1, true));\n+\t\t\t\t\tt.set(TriggerData.COLUMN_ITEMID, importItems(triggerReader.getJsonArrayOrObjectReader(), 1, true));"],
    "p_patch_no_context_t": ["-\t\tpublic static final int HISTORY_GET_TIME_FROM_SHIFT = 8*60*60; // -8h\n+\t\tpublic static final int HISTORY_GET_TIME_FROM_SHIFT = 24*60*60; // -24h\n+\t/**\n+\t * The API version. From 1.8.3 (maybe earlier) to 2.0 (excluded), this was 1.3. With 2.0, it changed to 1.4. \n+\t * Finally, since 2.0.4, the API version matches the program version.\n+\t */\n+\tprivate String apiVersion = \"\";\n-\t\t\tisVersion2 = result.getString(\"result\").equals(\"1.4\");\n-\t\t\tLog.i(\"ZabbixService\", \"Zabbix Server Version: isVersion2=\"+isVersion2);\n+\t\t\tapiVersion = result.getString(\"result\");\n+\t\t\tisVersion2 = (apiVersion.equals(\"1.4\") || apiVersion.startsWith(\"2\"));\n+\t\t\tLog.i(\"ZabbixService\", \"Zabbix API Version: \" + apiVersion);\n-\t\t\tlong time_from = time_till - ZabbixConfig.HISTORY_GET_TIME_FROM_SHIFT; // jetzt-2h\n+\t\t\tlong time_from = time_till - ZabbixConfig.HISTORY_GET_TIME_FROM_SHIFT;"],
    "c_date_tdt": "May 10, 2013 7:38:47 AM",
    "c_imports_t": ["android.database.sqlite.SQLiteQueryBuilder org.apache.http.conn.scheme.SchemeRegistry java.util.HashSet org.apache.http.params.BasicHttpParams android.content.Context org.apache.http.params.HttpParams org.apache.http.conn.scheme.PlainSocketFactory java.util.ArrayList com.inovex.zabbixmobile.model.ItemData com.inovex.zabbixmobile.model.HostData com.inovex.zabbixmobile.model.GraphData com.inovex.zabbixmobile.model.EventData org.apache.http.auth.UsernamePasswordCredentials org.apache.http.params.HttpConnectionParams android.content.SharedPreferences java.security.KeyManagementException org.apache.http.conn.ClientConnectionManager org.codehaus.jackson.JsonFactory org.apache.http.entity.StringEntity java.util.Set org.apache.http.params.HttpProtocolParams com.inovex.zabbixmobile.model.ApplicationItemRelationData com.inovex.zabbixmobile.model.TriggerData org.codehaus.jackson.JsonToken android.database.Cursor java.net.Socket android.content.Intent org.apache.http.protocol.HTTP org.json.JSONException java.net.UnknownHostException com.inovex.zabbixmobile.model.HistoryDetailData org.apache.http.HttpResponse java.security.KeyStore com.inovex.zabbixmobile.ZabbixContentProvider android.preference.PreferenceManager android.util.Log org.json.JSONObject java.security.NoSuchAlgorithmException org.apache.http.client.params.HttpClientParams java.io.IOException org.apache.http.conn.scheme.Scheme org.apache.http.client.methods.HttpPost javax.net.ssl.SSLContext org.apache.http.auth.AuthScope org.apache.http.conn.ssl.SSLSocketFactory java.security.KeyStoreException android.content.ContentValues java.io.InputStreamReader java.util.Date java.security.UnrecoverableKeyException android.graphics.Color org.apache.http.client.ClientProtocolException com.inovex.zabbixmobile.model.GraphItemData org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager org.json.JSONArray com.inovex.zabbixmobile.model.CacheData javax.net.ssl.SSLPeerUnverifiedException com.inovex.zabbixmobile.model.HostGroupData org.codehaus.jackson.JsonParseException java.security.cert.X509Certificate org.apache.http.HttpVersion android.database.sqlite.SQLiteDatabase java.util.List java.security.cert.CertificateException java.io.BufferedReader com.inovex.zabbixmobile.model.ApplicationData com.inovex.zabbixmobile.model.ScreenItemData javax.net.ssl.TrustManager com.inovex.zabbixmobile.model.ScreenData com.inovex.zabbixmobile.R org.codehaus.jackson.JsonParser org.apache.http.impl.client.DefaultHttpClient javax.net.ssl.X509TrustManager"],
    "c_contents_t": ["package com.inovex.zabbixmobile.api;\n\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.net.Socket;\nimport java.net.UnknownHostException;\nimport java.security.KeyManagementException;\nimport java.security.KeyStore;\nimport java.security.KeyStoreException;\nimport java.security.NoSuchAlgorithmException;\nimport java.security.UnrecoverableKeyException;\nimport java.security.cert.CertificateException;\nimport java.security.cert.X509Certificate;\nimport java.util.ArrayList;\nimport java.util.Date;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Set;\n\nimport javax.net.ssl.SSLContext;\nimport javax.net.ssl.SSLPeerUnverifiedException;\nimport javax.net.ssl.TrustManager;\nimport javax.net.ssl.X509TrustManager;\n\nimport org.apache.http.HttpResponse;\nimport org.apache.http.HttpVersion;\nimport org.apache.http.auth.AuthScope;\nimport org.apache.http.auth.UsernamePasswordCredentials;\nimport org.apache.http.client.ClientProtocolException;\nimport org.apache.http.client.methods.HttpPost;\nimport org.apache.http.client.params.HttpClientParams;\nimport org.apache.http.conn.ClientConnectionManager;\nimport org.apache.http.conn.scheme.PlainSocketFactory;\nimport org.apache.http.conn.scheme.Scheme;\nimport org.apache.http.conn.scheme.SchemeRegistry;\nimport org.apache.http.conn.ssl.SSLSocketFactory;\nimport org.apache.http.entity.StringEntity;\nimport org.apache.http.impl.client.DefaultHttpClient;\nimport org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager;\nimport org.apache.http.params.BasicHttpParams;\nimport org.apache.http.params.HttpConnectionParams;\nimport org.apache.http.params.HttpParams;\nimport org.apache.http.params.HttpProtocolParams;\nimport org.apache.http.protocol.HTTP;\nimport org.codehaus.jackson.JsonFactory;\nimport org.codehaus.jackson.JsonParseException;\nimport org.codehaus.jackson.JsonParser;\nimport org.codehaus.jackson.JsonToken;\nimport org.json.JSONArray;\nimport org.json.JSONException;\nimport org.json.JSONObject;\n\nimport android.content.ContentValues;\nimport android.content.Context;\nimport android.content.Intent;\nimport android.content.SharedPreferences;\nimport android.database.Cursor;\nimport android.database.sqlite.SQLiteDatabase;\nimport android.database.sqlite.SQLiteQueryBuilder;\nimport android.graphics.Color;\nimport android.preference.PreferenceManager;\nimport android.util.Log;\n\nimport com.inovex.zabbixmobile.R;\nimport com.inovex.zabbixmobile.ZabbixContentProvider;\nimport com.inovex.zabbixmobile.model.ApplicationData;\nimport com.inovex.zabbixmobile.model.ApplicationItemRelationData;\nimport com.inovex.zabbixmobile.model.CacheData;\nimport com.inovex.zabbixmobile.model.EventData;\nimport com.inovex.zabbixmobile.model.GraphData;\nimport com.inovex.zabbixmobile.model.GraphItemData;\nimport com.inovex.zabbixmobile.model.HistoryDetailData;\nimport com.inovex.zabbixmobile.model.HostData;\nimport com.inovex.zabbixmobile.model.HostGroupData;\nimport com.inovex.zabbixmobile.model.ItemData;\nimport com.inovex.zabbixmobile.model.ScreenData;\nimport com.inovex.zabbixmobile.model.ScreenItemData;\nimport com.inovex.zabbixmobile.model.TriggerData;\n\n/**\n * interface to connect to the zabbix server\n */\npublic class ZabbixService {\n\tclass CustomSSLSocketFactory extends SSLSocketFactory {\n\t\tSSLContext sslContext = SSLContext.getInstance(\"TLS\");\n\n\t\tpublic CustomSSLSocketFactory(KeyStore truststore) throws NoSuchAlgorithmException, KeyManagementException, KeyStoreException, UnrecoverableKeyException {\n\t\t\tsuper(truststore);\n\t\t\tTrustManager tm = new X509TrustManager() {\n\t\t\t\t@Override\n\t\t\t\tpublic void checkClientTrusted(X509Certificate[] chain,\n\t\t\t\t\t\tString authType) throws CertificateException {\n\t\t\t\t}\n\t\t\t\t@Override\n\t\t\t\tpublic void checkServerTrusted(X509Certificate[] chain,\n\t\t\t\t\t\tString authType) throws CertificateException {\n\t\t\t\t}\n\t\t\t\t@Override\n\t\t\t\tpublic X509Certificate[] getAcceptedIssuers() {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t};\n\t\t\tsslContext.init(null, new TrustManager[] { tm }, null);\n\t\t}\n\n\t\t@Override\n\t\tpublic Socket createSocket() throws IOException {\n\t\t\treturn sslContext.getSocketFactory().createSocket();\n\t\t}\n\n\t\t@Override\n\t\tpublic Socket createSocket(Socket socket, String host, int port, boolean autoClose) throws IOException, UnknownHostException {\n\t\t\treturn sslContext.getSocketFactory().createSocket(socket, host, port, autoClose);\n\t\t}\n\t}\n\n\t/**\n\t * http auth is needed\n\t */\n\tpublic class HttpAuthorizationRequiredException extends Exception {\n\t\tprivate static final long serialVersionUID = 6632422081858878147L;\n\t}\n\n\t/**\n\t * zabbix error: no api access\n\t */\n\tpublic class NoAPIAccessException extends Exception {\n\t\tprivate static final long serialVersionUID = 6381395987443456382L;\n\t}\n\n\t/**\n\t * probably too old zabbix <= 1.8.2\n\t */\n\tpublic class PreconditionFailedException extends Exception {\n\t\tprivate static final long serialVersionUID = -2529885710860745023L;\n\t}\n\n\t/**\n\t * global constants\n\t */\n\tpublic class ZabbixConfig {\n\t\tpublic static final int APPLICATION_GET_LIMIT = 1000;\n\t\tpublic static final int EVENTS_GET_LIMIT = 60;\n\t\tpublic static final int HISTORY_GET_TIME_FROM_SHIFT = 24*60*60; // -24h\n\t\tpublic static final int HISTORY_GET_LIMIT = 8000;\n\t\tpublic static final int HOSTGROUP_GET_LIMIT = 200;\n\t\tpublic static final int HOST_GET_LIMIT = 300;\n\t\tpublic static final int ITEM_GET_LIMIT = 200;\n\t\tpublic static final int TRIGGER_GET_LIMIT = 100;\n\t\tpublic static final int EVENT_GET_TIME_FROM_SHIFT = 7*24*60*60; // -7 days\n\t\tpublic static final int CACHE_LIFETIME_APPLICATIONS = 2*24*60*60; // 2 days\n\t\tpublic static final int CACHE_LIFETIME_EVENTS = 120;\n\t\tpublic static final int CACHE_LIFETIME_HISTORY_DETAILS = 4*60;\n\t\tpublic static final int CACHE_LIFETIME_HOST_GROUPS = 7*24*60*60;\n\t\tpublic static final int CACHE_LIFETIME_HOSTS = 2*24*60*60;\n\t\tpublic static final int CACHE_LIFETIME_SCREENS = 2*24*60*60;\n\t\tpublic static final int CACHE_LIFETIME_ITEMS = 4*60;\n\t\tpublic static final int CACHE_LIFETIME_TRIGGERS = 2*60;\n\t\tpublic static final long STATUS_SHOW_TRIGGER_TIME = 14*24*60*60;\n\t\tpublic static final int HTTP_CONNECTION_TIMEOUT = 30000;\n\t}\n\n\tprivate final DefaultHttpClient httpClient;\n\tprivate final SQLiteDatabase zabbixLocalDB;\n\tprivate String url;\n\tprivate String token;\n\tprivate final Context context;\n\tprivate int _transactionStack;\n\tprivate JsonParser lastStream;\n\tprivate int transformProgressStart;\n\tprivate int transformProgressEnd;\n\tprivate boolean _notAuthorizedRetry;\n\tprivate boolean isVersion2 = true;\n\t/**\n\t * The API version. From 1.8.3 (maybe earlier) to 2.0 (excluded), this was 1.3. With 2.0, it changed to 1.4. \n\t * Finally, since 2.0.4, the API version matches the program version.\n\t */\n\tprivate String apiVersion = \"\";\n\n\t/**\n\t * init\n\t * @param context android context\n\t * @param zabbixLocalDB sqlite\n\t */\n\tpublic ZabbixService(Context context, SQLiteDatabase zabbixLocalDB) {\n\t\tClientConnectionManager ccm = null;\n\t\tHttpParams params = null;\n\n\t\ttry {\n\t\t\tSharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(context);\n\t\t\tif (prefs.getBoolean(\"zabbix_trust_all_ssl_ca\", false)) {\n\t\t\t\tKeyStore trustStore = KeyStore.getInstance(KeyStore.getDefaultType());\n\t\t\t\ttrustStore.load(null, null);\n\n\t\t\t\tSSLSocketFactory sf = new CustomSSLSocketFactory(trustStore);\n\t\t\t\tsf.setHostnameVerifier(SSLSocketFactory.ALLOW_ALL_HOSTNAME_VERIFIER);\n\n\t\t\t\tparams = new BasicHttpParams();\n\t\t\t\tHttpProtocolParams.setVersion(params, HttpVersion.HTTP_1_1);\n\t\t\t\tHttpProtocolParams.setContentCharset(params, HTTP.UTF_8);\n\n\t\t\t\tSchemeRegistry registry = new SchemeRegistry();\n\t\t\t\tregistry.register(new Scheme(\"http\", PlainSocketFactory.getSocketFactory(), 80));\n\t\t\t\tregistry.register(new Scheme(\"https\", sf, 443));\n\n\t\t\t\tccm = new ThreadSafeClientConnManager(params, registry);\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\t// ignore for unit test\n\t\t}\n\n\t\tif (ccm == null || params == null) {\n\t\t\thttpClient = new DefaultHttpClient();\n\t\t} else {\n\t\t\thttpClient = new DefaultHttpClient(ccm, params);\n\t\t}\n\n\t\t// if applicable http auth\n\t\ttry {\n\t\t\tSharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(context);\n\t\t\tif (prefs.getBoolean(\"http_auth_enabled\", false)) {\n\t\t\t\tString user = prefs.getString(\"http_auth_username\", \"\");\n\t\t\t\tString pwd = prefs.getString(\"http_auth_password\", \"\");\n\t\t\t\thttpClient.getCredentialsProvider().setCredentials(AuthScope.ANY, new UsernamePasswordCredentials(user, pwd));\n\t\t\t}\n\t\t} catch (java.lang.UnsupportedOperationException e1) {\n\t\t\t// for unit test\n\t\t}\n\n\t\tparams = httpClient.getParams();\n\t\tHttpClientParams.setRedirecting(params, true); // redirecting\n\t\tHttpConnectionParams.setConnectionTimeout(params, ZabbixConfig.HTTP_CONNECTION_TIMEOUT);\n\t\tthis.context = context;\n\t\tthis.zabbixLocalDB = zabbixLocalDB;\n\t}\n\n\t/**\n\t * counts the sql inserts/updates and do a transaction commit to save the memory\n\t */\n\tprivate void _commitTransactionIfRecommended() {\n\t\tif (_transactionStack++ > 50) {\n\t\t\t_endTransaction();\n\t\t\t_startTransaction();\n\t\t}\n\t}\n\n\t/**\n\t * commit sql transaction\n\t */\n\tpublic void _endTransaction() {\n\t\tif (zabbixLocalDB.inTransaction()) {\n\t\t\tzabbixLocalDB.setTransactionSuccessful();\n\t\t\tzabbixLocalDB.endTransaction();\n\t\t}\n\t}\n\n\t/**\n\t * zabbix api call. data will be parsed as json object on-the-fly.\n\t * Caution: use this only for api calls with a small return data.\n\t * @param method\n\t * @param params\n\t * @return\n\t * @throws ClientProtocolException\n\t * @throws IOException\n\t * @throws JSONException\n\t * @throws HttpAuthorizationRequiredException\n\t * @throws NoAPIAccessException\n\t */\n\tprivate JSONObject _queryBuffer(String method, JSONObject params) throws ClientProtocolException, IOException, JSONException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\tHttpPost post = new HttpPost(url);\n\t\tpost.addHeader(\"Content-Type\", \"application/json; charset=utf-8\");\n\n\t\tString json =\n\t\t\t\"{\" +\n\t\t\t\"\t\\\"jsonrpc\\\" : \\\"2.0\\\",\" +\n\t\t\t\"\t\\\"method\\\" : \\\"\"+method+\"\\\",\" +\n\t\t\t\"\t\\\"params\\\" : \"+params.toString()+\",\" +\n\t\t\t\"\t\\\"auth\\\" : \"+(token==null?\"null\":'\"'+token+'\"')+\",\" +\n\t\t\t\"\t\\\"id\\\" : 0\" +\n\t\t\t\"}\";\n\n\t\tpost.setEntity(new StringEntity(json, \"UTF-8\"));\n\t\ttry {\n\t\t\tHttpResponse resp = httpClient.execute(post);\n\t\t\tif (resp.getStatusLine().getStatusCode() == 401) {\n\t\t\t\t// http auth failed\n\t\t\t\tthrow new HttpAuthorizationRequiredException();\n\t\t\t} else if (resp.getStatusLine().getStatusCode() == 412) {\n\t\t\t\t\t// Precondition failed / Looks like Zabbix 1.8.2\n\t\t\t\tthrow new PreconditionFailedException();\n\t\t\t} else if (resp.getStatusLine().getStatusCode() == 404) {\n\t\t\t\t// file not found\n\t\t\t\tthrow new IOException(resp.getStatusLine().getStatusCode()+\" \"+resp.getStatusLine().getReasonPhrase());\n\t\t\t} else {\n\t\t\t\tLog.d(\"ZabbixService\", resp.getStatusLine().getStatusCode()+\" \"+resp.getStatusLine().getReasonPhrase());\n\t\t\t}\n\t\t\tStringBuilder total = new StringBuilder();\n\t\t\tBufferedReader rd = new BufferedReader(new InputStreamReader(resp.getEntity().getContent()));\n\t\t\tint chr;\n\t\t\twhile ((chr = rd.read()) != -1) {\n\t\t\t\ttotal.append((char) chr);\n\t\t\t}\n\t\t\tJSONObject result = new JSONObject(total.toString());\n\t\t\ttry {\n\t\t\t\tif (result.getJSONObject(\"error\") != null) {\n\t\t\t\t\tif (result.getJSONObject(\"error\").getString(\"data\").equals(\"No API access\")) {\n\t\t\t\t\t\tthrow new NoAPIAccessException();\n\t\t\t\t\t} else throw new RuntimeException(result.getJSONObject(\"error\").toString());\n\t\t\t\t}\n\t\t\t\tif (result.getString(\"data\").equals(\"Not authorized\")) {\n\t\t\t\t\t// first do a new auth and then try the same api call again\n\t\t\t\t\tif (authenticate() && !_notAuthorizedRetry) {\n\t\t\t\t\t\t_notAuthorizedRetry = true;\n\t\t\t\t\t\tJSONObject r = _queryBuffer(method, params);\n\t\t\t\t\t\t_notAuthorizedRetry = false;\n\t\t\t\t\t\treturn r;\n\t\t\t\t\t} throw new IllegalStateException(result.toString());\n\t\t\t\t}\n\t\t\t} catch (JSONException e) {\n\t\t\t\t// ignore\n\t\t\t}\n\t\t\treturn result;\n\t\t} catch (SSLPeerUnverifiedException e) {\n\t\t\t// SSL not trusted\n\t\t\tIntent intent = new Intent(ZabbixContentProvider.CONTENT_PROVIDER_INTENT_ACTION);\n\t\t\tintent.putExtra(\"flag\", ZabbixContentProvider.INTENT_FLAG_SSL_NOT_TRUSTED);\n\t\t\tcontext.sendBroadcast(intent);\n\t\t\tthrow e;\n\t\t} catch (IOException e) {\n\t\t\t// internet problem\n\t\t\t// send intent to GUI\n\t\t\tIntent intent = new Intent(ZabbixContentProvider.CONTENT_PROVIDER_INTENT_ACTION);\n\t\t\tintent.putExtra(\"flag\", ZabbixContentProvider.INTENT_FLAG_CONNECTION_FAILED);\n\t\t\tintent.putExtra(\"value\", e.getMessage());\n\t\t\tcontext.sendBroadcast(intent);\n\t\t\tthrow e;\n\t\t}\n\t}\n\n\t/**\n\t * zabbix api call as stream.\n\t * @param method\n\t * @param params\n\t * @return stream im json array wrapper\n\t * @throws JSONException\n\t * @throws IOException\n\t * @throws HttpAuthorizationRequiredException\n\t * @throws NoAPIAccessException\n\t */\n\tprivate JsonArrayOrObjectReader _queryStream(String method, JSONObject params) throws JSONException, IOException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\t// http request\n\t\tHttpPost post = new HttpPost(url);\n\t\tpost.addHeader(\"Content-Type\", \"application/json; charset=utf-8\");\n\n\t\tJSONObject json = new JSONObject()\n\t\t\t.put(\"jsonrpc\", \"2.0\")\n\t\t\t.put(\"method\", method)\n\t\t\t.put(\"params\", params)\n\t\t\t.put(\"auth\", token)\n\t\t\t.put(\"id\", 0);\n\n\t\tLog.d(\"ZabbixService\", \"_queryStream: \"+url);\n\t\tLog.d(\"ZabbixService\", \"_queryStream: \"+json.toString());\n\n\t\tpost.setEntity(new StringEntity(json.toString(), \"UTF-8\"));\n\t\ttry {\n\t\t\tHttpResponse resp = httpClient.execute(post);\n\t\t\tif (resp.getStatusLine().getStatusCode() == 401) {\n\t\t\t\t// http auth failed\n\t\t\t\tthrow new HttpAuthorizationRequiredException();\n\t\t\t}\n\n\t\t\tJsonFactory jsonFac = new JsonFactory();\n\t\t\tJsonParser jp = jsonFac.createJsonParser(resp.getEntity().getContent());\n\t\t\t// store the last stream to close it if an exception will be thrown\n\t\t\tlastStream = jp;\n\t\t\tif (jp.nextToken() != JsonToken.START_OBJECT) {\n\t\t\t\tthrow new IOException(\"Expected data to start with an Object\");\n\t\t\t}\n\t\t\tdo {\n\t\t\t\tjp.nextToken();\n\t\t\t\tif (jp.getCurrentName().equals(\"error\")) {\n\t\t\t\t\tjp.nextToken();\n\t\t\t\t\tString errortxt = \"\";\n\t\t\t\t\twhile (jp.nextToken() != JsonToken.END_OBJECT) {\n\t\t\t\t\t\terrortxt += jp.getText();\n\t\t\t\t\t}\n\t\t\t\t\tif (errortxt.contains(\"No API access\")) {\n\t\t\t\t\t\tthrow new NoAPIAccessException();\n\t\t\t\t\t} else if (errortxt.contains(\"Not authorized\")) {\n\t\t\t\t\t\t// first do a new auth and then try the same api call again\n\t\t\t\t\t\tif (authenticate() && !_notAuthorizedRetry) {\n\t\t\t\t\t\t\t_notAuthorizedRetry = true;\n\t\t\t\t\t\t\tJsonArrayOrObjectReader r = _queryStream(method, params);\n\t\t\t\t\t\t\t_notAuthorizedRetry = false;\n\t\t\t\t\t\t\treturn r;\n\t\t\t\t\t\t} else throw new IllegalStateException(errortxt);\n\t\t\t\t\t} else throw new IllegalStateException(\"JSON API Error: \"+errortxt);\n\t\t\t\t}\n\t\t\t} while (!jp.getCurrentName().equals(\"result\"));\n\n\t\t\t// result array found\n\t\t\tif (jp.nextToken() != JsonToken.START_ARRAY && jp.getCurrentToken() != JsonToken.START_OBJECT) { // go inside the array\n\t\t\t\ttry {\n\t\t\t\t\tLog.d(\"ZabbixService\", \"current token: \"+jp.getCurrentToken());\n\t\t\t\t\tLog.d(\"ZabbixService\", \"current name: \"+jp.getCurrentName());\n\t\t\t\t\tLog.d(\"ZabbixService\", \"get text: \"+jp.getText());\n\t\t\t\t\tLog.d(\"ZabbixService\", \"next value: \"+jp.nextValue());\n\t\t\t\t\tLog.d(\"ZabbixService\", \"next token: \"+jp.nextToken());\n\t\t\t\t\tLog.d(\"ZabbixService\", \"current token: \"+jp.getCurrentToken());\n\t\t\t\t\tLog.d(\"ZabbixService\", \"current name: \"+jp.getCurrentName());\n\t\t\t\t\tLog.d(\"ZabbixService\", \"get text: \"+jp.getText());\n\t\t\t\t} catch (Exception e) {}\n\t\t\t\tthrow new IOException(\"Expected data to start with an Array\");\n\t\t\t}\n\t\t\treturn new JsonArrayOrObjectReader(jp);\n\t\t} catch (SSLPeerUnverifiedException e) {\n\t\t\tthrow e;\n\t\t} catch (IOException e) {\n\t\t\t// internet problem\n\t\t\t// send intent to GUI\n\t\t\tIntent intent = new Intent(ZabbixContentProvider.CONTENT_PROVIDER_INTENT_ACTION);\n\t\t\tintent.putExtra(\"flag\", ZabbixContentProvider.INTENT_FLAG_CONNECTION_FAILED);\n\t\t\tcontext.sendBroadcast(intent);\n\t\t\tthrow e;\n\t\t}\n\t}\n\n\t/**\n\t * begin sql transaction\n\t */\n\tprivate void _startTransaction() {\n\t\tzabbixLocalDB.beginTransaction();\n\t\t_transactionStack = 0;\n\t}\n\n\t/**\n\t * acknowledge zabbix event. Sets ack-flag with comment.\n\t * Caution: This is supported only for Zabbix version >= 1.8.4\n\t * @param eventid\n\t * @param comment\n\t * @return true, success.\n\t * @throws ClientProtocolException\n\t * @throws IOException\n\t * @throws JSONException\n\t * @throws HttpAuthorizationRequiredException\n\t * @throws NoAPIAccessException\n\t */\n\tpublic boolean acknowledgeEvent(String eventid, String comment) throws ClientProtocolException, IOException, JSONException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\t// for GUI unit test, just return true\n\t\tif (comment != null && comment.equals(\"__UNIT_TEST__RETURN_TRUE__\")) return true;\n\n\t\tJSONObject result = _queryBuffer(\n\t\t\t\t\"event.acknowledge\"\n\t\t\t\t, new JSONObject()\n\t\t\t\t\t.put(\"eventids\", new JSONArray().put(eventid))\n\t\t);\n\t\t// it can be an (empty) array\n\t\ttry {\n\t\t\treturn result.getJSONObject(\"result\").getJSONArray(\"eventids\").length() == 1;\n\t\t} catch (JSONException e) {\n\t\t\t// or a json object\n\t\t\treturn result.getJSONObject(\"result\").getJSONObject(\"eventids\").length() == 1;\n\t\t}\n\t}\n\n\t/**\n\t * zabbix auth. user and pwd from app preferences\n\t * @return true success\n\t * @throws ClientProtocolException\n\t * @throws IOException\n\t * @throws JSONException\n\t * @throws HttpAuthorizationRequiredException\n\t * @throws NoAPIAccessException\n\t */\n\tpublic boolean authenticate() throws ClientProtocolException, IOException, JSONException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\tSharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(context);\n\t\tString url = prefs.getString(\"zabbix_url\", \"\").trim();\n\t\tString user = prefs.getString(\"zabbix_username\", \"\").trim();\n\t\tString password = prefs.getString(\"zabbix_password\", \"\");\n\n\t\tthis.url = url+(url.endsWith(\"/\")?\"\":'/')+\"api_jsonrpc.php\";\n\t\tLog.d(\"ZabbixContentProvider\", url+\"//\"+user);\n\n\t\ttry {\n\t\t\tJSONObject result = _queryBuffer(\n\t\t\t\t\t\"user.authenticate\"\n\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t\t.put(\"user\", user)\n\t\t\t\t\t\t.put(\"password\", password)\n\t\t\t);\n\t\t\ttoken = result.getString(\"result\");\n\t\t} catch (JSONException e) {\n\t\t\t// there's no result\n\t\t\te.printStackTrace();\n\t\t} catch (RuntimeException e) {\n\t\t\t// wrong password. token remains null\n\t\t\te.printStackTrace();\n\t\t}\n\t\tif (token != null) {\n\t\t\t// get API version\n\t\t\tJSONObject result = _queryBuffer(\n\t\t\t\t\t\"apiinfo.version\"\n\t\t\t\t\t, new JSONObject()\n\t\t\t);\n\t\t\tapiVersion = result.getString(\"result\");\n\t\t\tisVersion2 = (apiVersion.equals(\"1.4\") || apiVersion.startsWith(\"2\"));\n\t\t\tLog.i(\"ZabbixService\", \"Zabbix API Version: \" + apiVersion);\n\t\t}\n\t\treturn token != null;\n\t}\n\n\t/**\n\t * close the last http stream\n\t */\n\tpublic void closeLastStream() {\n\t\tif (lastStream != null && !lastStream.isClosed()) {\n\t\t\ttry {\n\t\t\t\tlastStream.close();\n\t\t\t} catch (IOException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate void importApplications(long hostid, long itemid, JsonArrayOrObjectReader jsonArray) throws JsonParseException, NumberFormatException, IOException {\n\t\tint num = 0;\n\t\tJsonObjectReader application;\n\t\twhile ((application = jsonArray.next()) != null) {\n\t\t\tApplicationData app = new ApplicationData();\n\t\t\twhile (application.nextValueToken()) {\n\t\t\t\tString propName = application.getCurrentName();\n\t\t\t\tif (propName.equals(ApplicationData.COLUMN_APPLICATIONID)) {\n\t\t\t\t\tapp.set(ApplicationData.COLUMN_APPLICATIONID, Long.parseLong(application.getText()));\n\t\t\t\t} else if (propName.equals(ApplicationData.COLUMN_NAME)) {\n\t\t\t\t\tapp.set(ApplicationData.COLUMN_NAME, application.getText());\n\t\t\t\t} else if (propName.equals(ApplicationData.COLUMN_HOSTID)) {\n\t\t\t\t\tapp.set(ApplicationData.COLUMN_HOSTID, Long.parseLong(application.getText()));\n\t\t\t\t} else {\n\t\t\t\t\tapplication.nextProperty();\n\t\t\t\t}\n\t\t\t}\n\t\t\t// create applications that does not exist\n\t\t\tapp.insert(zabbixLocalDB, ApplicationData.COLUMN_APPLICATIONID);\n\t\t\t_commitTransactionIfRecommended();\n\n\t\t\t// create ApplicationItemRelation\n\t\t\tlong appid = (Long) app.get(ApplicationData.COLUMN_APPLICATIONID);\n\t\t\tApplicationItemRelationData rel = new ApplicationItemRelationData();\n\t\t\trel.set(ApplicationItemRelationData.COLUMN_APPLICATIONID, appid);\n\t\t\trel.set(ApplicationItemRelationData.COLUMN_ITEMID, itemid);\n\t\t\trel.set(ApplicationItemRelationData.COLUMN_HOSTID, hostid);\n\t\t\trel.insert(zabbixLocalDB);\n\t\t\t_commitTransactionIfRecommended();\n\n\t\t\tnum++;\n\t\t}\n\t\tif (num == 0) {\n\t\t\t// if there's no application, the ID #0 must be added (for other)\n\t\t\tApplicationItemRelationData rel = new ApplicationItemRelationData();\n\t\t\trel.set(ApplicationItemRelationData.COLUMN_APPLICATIONID, 0);\n\t\t\trel.set(ApplicationItemRelationData.COLUMN_ITEMID, itemid);\n\t\t\trel.set(ApplicationItemRelationData.COLUMN_HOSTID, hostid);\n\t\t\trel.insert(zabbixLocalDB);\n\n\t\t\t// if #0 \"other\" does not exist yet, it has to be created\n\t\t\tApplicationData app = new ApplicationData();\n\t\t\tapp.set(ApplicationData.COLUMN_APPLICATIONID, 0);\n\t\t\tapp.set(ApplicationData.COLUMN_NAME, \"- \"+context.getResources().getString(R.string.other)+\" -\");\n\t\t\tapp.insert(zabbixLocalDB, ApplicationData.COLUMN_APPLICATIONID);\n\t\t}\n\t}\n\n\t/**\n\t * import the newest event of a trigger\n\t * @param triggerid\n\t * @throws JSONException\n\t * @throws IOException\n\t * @throws HttpAuthorizationRequiredException\n\t * @throws NoAPIAccessException\n\t */\n\tpublic void importEventByTriggerId(String triggerid) throws JSONException, IOException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\tif (!isCached(EventData.TABLE_NAME, \"triggerid=\"+triggerid)) {\n\t\t\t_startTransaction();\n\t\t\tzabbixLocalDB.delete(EventData.TABLE_NAME, EventData.COLUMN_OBJECTID+\"=\"+triggerid, null);\n\n\t\t\tJSONObject params = new JSONObject()\n\t\t\t\t.put(\"output\", \"extend\")\n\t\t\t\t.put(isVersion2?\"selectHosts\":\"select_hosts\", \"extend\")\n\t\t\t\t.put(\"triggerids\", new JSONArray().put(triggerid))\n\t\t\t\t.put(\"limit\", 1)\n\t\t\t\t.put(\"source\", 0);\n\t\t\tif (!isVersion2) {\n\t\t\t\tparams.put(\"sortfield\", \"clock\")\n\t\t\t\t\t.put(\"sortorder\", \"DESC\");\n\t\t\t}\n\n\t\t\tJsonArrayOrObjectReader events = _queryStream(\n\t\t\t\t\t\"event.get\"\n\t\t\t\t\t, params\n\t\t\t);\n\t\t\timportEvents(events, null);\n\t\t\tevents.close();\n\n\t\t\tsetCached(EventData.TABLE_NAME, \"triggerid=\"+triggerid, ZabbixConfig.CACHE_LIFETIME_EVENTS);\n\t\t\t_endTransaction();\n\t\t}\n\t}\n\n\t/**\n\t * import the newest events\n\t * @throws ClientProtocolException\n\t * @throws IOException\n\t * @throws JSONException\n\t * @throws HttpAuthorizationRequiredException\n\t * @throws NoAPIAccessException\n\t */\n\tpublic void importEvents() throws ClientProtocolException, IOException, JSONException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\tif (!isCached(EventData.TABLE_NAME, null)) {\n\t\t\t_startTransaction();\n\t\t\tzabbixLocalDB.delete(EventData.TABLE_NAME, null, null);\n\t\t\tzabbixLocalDB.delete(TriggerData.TABLE_NAME, null, null);\n\t\t\tzabbixLocalDB.delete(CacheData.TABLE_NAME, CacheData.COLUMN_KIND+\"='\"+EventData.TABLE_NAME+\"'\", null);\n\t\t\tzabbixLocalDB.delete(CacheData.TABLE_NAME, CacheData.COLUMN_KIND+\"='\"+TriggerData.TABLE_NAME+\"'\", null);\n\n\t\t\tint numEvents = ZabbixConfig.EVENTS_GET_LIMIT;\n\n\t\t\tJSONObject params = new JSONObject()\n\t\t\t\t.put(\"output\", \"extend\")\n\t\t\t\t.put(\"limit\", ZabbixConfig.EVENTS_GET_LIMIT)\n\t\t\t\t.put(isVersion2?\"selectHosts\":\"select_hosts\", \"extend\")\n\t\t\t\t.put(isVersion2?\"selectTriggers\":\"select_triggers\", \"extend\")\n\t\t\t\t.put(\"source\", 0)\n\t\t\t\t.put(\"time_from\", (new Date().getTime()/1000) - ZabbixConfig.EVENT_GET_TIME_FROM_SHIFT);\n\t\t\tif (!isVersion2) {\n\t\t\t\t// in Zabbix version <2.0, this is not default\n\t\t\t\tparams.put(\"sortfield\", \"clock\")\n\t\t\t\t\t.put(\"sortorder\", \"DESC\");\n\t\t\t}\n\t\t\tJsonArrayOrObjectReader events = _queryStream(\n\t\t\t\t\t\"event.get\"\n\t\t\t\t\t, params\n\t\t\t);\n\t\t\timportEvents(events, numEvents);\n\t\t\tevents.close();\n\n\t\t\tsetCached(EventData.TABLE_NAME, null, ZabbixConfig.CACHE_LIFETIME_EVENTS);\n\t\t\t_endTransaction();\n\t\t}\n\t}\n\n\t/**\n\t * @param events stream\n\t * @param numEvents if null, no progressbar-update AND only isert, if it does not exist. If !null, progressbar-update AND always insert without checking\n\t * @throws JsonParseException\n\t * @throws IOException\n\t */\n\tprivate void importEvents(JsonArrayOrObjectReader events, Integer numEvents) throws JsonParseException, IOException {\n\t\tint i=0;\n\t\tJsonObjectReader eventReader;\n\t\twhile ((eventReader = events.next()) != null) {\n\t\t\tEventData e = new EventData();\n\t\t\twhile (eventReader.nextValueToken()) {\n\t\t\t\tString propName = eventReader.getCurrentName();\n\t\t\t\tif (propName.equals(\"hosts\")) {\n\t\t\t\t\t// import hosts\n\t\t\t\t\tString hostnames = (String) importHosts(eventReader.getJsonArrayOrObjectReader(), null)[0];\n\t\t\t\t\t// store hosts namen\n\t\t\t\t\te.set(EventData.COLUMN_HOSTS, hostnames);\n\t\t\t\t} else if (propName.equals(\"triggers\")) {\n\t\t\t\t\t// import triggers\n\t\t\t\t\timportTriggers(eventReader.getJsonArrayOrObjectReader());\n\t\t\t\t} else if (propName.equals(EventData.COLUMN_EVENTID)) {\n\t\t\t\t\te.set(EventData.COLUMN_EVENTID, Long.parseLong(eventReader.getText()));\n\t\t\t\t} else if (propName.equals(EventData.COLUMN_CLOCK)) {\n\t\t\t\t\te.set(EventData.COLUMN_CLOCK, Integer.parseInt(eventReader.getText()));\n\t\t\t\t} else if (propName.equals(EventData.COLUMN_OBJECTID)) {\n\t\t\t\t\te.set(EventData.COLUMN_OBJECTID, Long.parseLong(eventReader.getText()));\n\t\t\t\t} else if (propName.equals(EventData.COLUMN_ACK)) {\n\t\t\t\t\te.set(EventData.COLUMN_ACK, Integer.parseInt(eventReader.getText()) == 1);\n\t\t\t\t} else if (propName.equals(EventData.COLUMN_VALUE)) {\n\t\t\t\t\te.set(EventData.COLUMN_VALUE, Integer.parseInt(eventReader.getText()));\n\t\t\t\t} else {\n\t\t\t\t\teventReader.nextProperty();\n\t\t\t\t}\n\t\t\t}\n\t\t\t// event is parsed and can be inserted into the db\n\t\t\tif (numEvents == null) {\n\t\t\t\te.insert(zabbixLocalDB, EventData.COLUMN_EVENTID);\n\t\t\t} else {\n\t\t\t\te.insert(zabbixLocalDB);\n\t\t\t\tif (++i % 10 == 0) {\n\t\t\t\t\tshowProgress(i*100/numEvents);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t_commitTransactionIfRecommended();\n\t\t}\n\t}\n\n\t/**\n\t * import graph items\n\t *\n\t * @param graphItems\n\t * @return true, if graphid column has to be updated from -1 to the correct graphid later.\n\t * @throws JsonParseException\n\t * @throws NumberFormatException\n\t * @throws IOException\n\t */\n\tprivate boolean importGraphItems(JsonArrayOrObjectReader graphItems) throws JsonParseException, NumberFormatException, IOException {\n\t\tboolean mustSetGraphid = false;\n\t\tJsonObjectReader graphItemReader;\n\t\twhile ((graphItemReader = graphItems.next()) != null) {\n\t\t\tGraphItemData gi = new GraphItemData();\n\t\t\twhile (graphItemReader.nextValueToken()) {\n\t\t\t\tString propName = graphItemReader.getCurrentName();\n\t\t\t\tif (propName.equals(\"gitemid\")) {\n\t\t\t\t\tgi.set(GraphItemData.COLUMN_GRAPHITEMID, Long.parseLong(graphItemReader.getText()));\n\t\t\t\t} else if (propName.equals(GraphItemData.COLUMN_GRAPHID)) {\n\t\t\t\t\tgi.set(GraphItemData.COLUMN_GRAPHID, Long.parseLong(graphItemReader.getText()));\n\t\t\t\t} else if (propName.equals(GraphItemData.COLUMN_ITEMID)) {\n\t\t\t\t\tgi.set(GraphItemData.COLUMN_ITEMID, Long.parseLong(graphItemReader.getText()));\n\t\t\t\t} else if (propName.equals(GraphItemData.COLUMN_COLOR)) {\n\t\t\t\t\t// hex string => color int\n\t\t\t\t\tgi.set(GraphItemData.COLUMN_COLOR, Color.parseColor(\"#\"+graphItemReader.getText()));\n\t\t\t\t} else {\n\t\t\t\t\tgraphItemReader.nextProperty();\n\t\t\t\t}\n\t\t\t}\n\t\t\t// if graphid-column was not set, this must be done later. temporary graphid=-1\n\t\t\tif (gi.get(GraphItemData.COLUMN_GRAPHID) == null) {\n\t\t\t\tgi.set(GraphItemData.COLUMN_GRAPHID, -1);\n\t\t\t\tmustSetGraphid = true;\n\t\t\t}\n\t\t\tgi.insert(zabbixLocalDB);\n\t\t}\n\t\treturn mustSetGraphid;\n\t}\n\n\tpublic void importGraphsForScreen(long screenid) throws ClientProtocolException, IOException, JSONException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\tif (!isCached(GraphData.TABLE_NAME, \"screenid=\"+screenid)) {\n\t\t\t_startTransaction();\n\n\t\t\t// collect all graphids\n\t\t\tSet<Long> graphids = new HashSet<Long>();\n\t\t\tCursor cur = zabbixLocalDB.query(ScreenItemData.TABLE_NAME, null, ScreenItemData.COLUMN_SCREENID+\"=\"+screenid, null, null, null, null);\n\t\t\twhile (cur.moveToNext()) {\n\t\t\t\tgraphids.add(cur.getLong(cur.getColumnIndex(ScreenItemData.COLUMN_RESOURCEID)));\n\t\t\t}\n\n\t\t\t// delete old graphs\n\t\t\tString str_graphids = graphids.toString().replace(\"[\", \"\").replace(\"]\", \"\");\n\t\t\tif (str_graphids.length()>0) {\n\t\t\t\tzabbixLocalDB.delete(GraphData.TABLE_NAME, GraphData.COLUMN_GRAPHID+\" IN (\"+str_graphids+\")\", null);\n\t\t\t\tzabbixLocalDB.delete(GraphItemData.TABLE_NAME, GraphItemData.COLUMN_GRAPHID+\" IN (\"+str_graphids+\")\", null);\n\t\t\t}\n\t\t\tzabbixLocalDB.delete(CacheData.TABLE_NAME, CacheData.COLUMN_KIND+\"='\"+GraphData.TABLE_NAME+\"' AND \"+CacheData.COLUMN_FILTER+\"='screenid=\"+screenid+'\\'', null);\n\n\t\t\tJsonArrayOrObjectReader graphs = _queryStream(\n\t\t\t\t\t\"graph.get\"\n\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t\t.put(isVersion2?\"selectGraphItems\":\"select_graph_items\", \"extend\")\n\t\t\t\t\t\t.put(isVersion2?\"selectItems\":\"select_items\", \"extend\")\n\t\t\t\t\t\t.put(\"output\", \"extend\")\n\t\t\t\t\t\t.put(\"graphids\", new JSONArray(graphids))\n\t\t\t);\n\t\t\tJsonObjectReader graphReader;\n\t\t\twhile ((graphReader = graphs.next()) != null) {\n\t\t\t\tboolean mustSetGraphid = false;\n\t\t\t\tGraphData scr = new GraphData();\n\t\t\t\twhile (graphReader.nextValueToken()) {\n\t\t\t\t\tString propName = graphReader.getCurrentName();\n\t\t\t\t\tif (propName.equals(GraphData.COLUMN_GRAPHID)) {\n\t\t\t\t\t\tscr.set(GraphData.COLUMN_GRAPHID, Long.parseLong(graphReader.getText()));\n\t\t\t\t\t} else if (propName.equals(GraphData.COLUMN_NAME)) {\n\t\t\t\t\t\tscr.set(GraphData.COLUMN_NAME, graphReader.getText());\n\t\t\t\t\t} else if (propName.equals(\"gitems\")) {\n\t\t\t\t\t\tmustSetGraphid = importGraphItems(graphReader.getJsonArrayOrObjectReader());\n\t\t\t\t\t} else if (propName.equals(\"items\")) {\n\t\t\t\t\t\timportItems(graphReader.getJsonArrayOrObjectReader(), 0, true);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tgraphReader.nextProperty();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tscr.insert(zabbixLocalDB);\n\t\t\t\tif (mustSetGraphid) {\n\t\t\t\t\tContentValues values = new ContentValues(1);\n\t\t\t\t\tvalues.put(GraphItemData.COLUMN_GRAPHID, (Long) scr.get(GraphData.COLUMN_GRAPHID));\n\t\t\t\t\tzabbixLocalDB.update(\n\t\t\t\t\t\t\tGraphItemData.TABLE_NAME\n\t\t\t\t\t\t\t, values\n\t\t\t\t\t\t\t, GraphItemData.COLUMN_GRAPHID+\"=-1\"\n\t\t\t\t\t\t\t, null);\n\t\t\t\t}\n\t\t\t}\n\t\t\tgraphs.close();\n\n\t\t\tsetCached(GraphData.TABLE_NAME, \"screenid=\"+screenid, ZabbixConfig.CACHE_LIFETIME_SCREENS);\n\t\t\t_endTransaction();\n\t\t}\n\t}\n\n\tpublic void importHistoryDetails(String itemid) throws ClientProtocolException, IOException, JSONException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\tif (!isCached(HistoryDetailData.TABLE_NAME, itemid)) {\n\t\t\t_startTransaction();\n\t\t\tzabbixLocalDB.delete(HistoryDetailData.TABLE_NAME, HistoryDetailData.COLUMN_ITEMID+\"=\"+itemid, null);\n\n\t\t\t// the past 2 hours\n\t\t\tlong time_till = new Date().getTime() / 1000;\n\t\t\tlong time_from = time_till - ZabbixConfig.HISTORY_GET_TIME_FROM_SHIFT;\n\n\t\t\t// Workaround: historydetails only comes if you use the correct \"history\"-parameter.\n\t\t\t// this parameter can be \"null\" or a number 0-4. Because we don't know when to use which,\n\t\t\t// we try them all, until we get results.\n\t\t\tInteger historytype = null;\n\t\t\tJSONObject result = _queryBuffer(\n\t\t\t\t\t\"history.get\"\n\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t\t.put(\"limit\", 1)\n\t\t\t\t\t\t.put(\"history\", historytype) // for integer ?\n\t\t\t\t\t\t.put(\"itemids\", new JSONArray().put(itemid))\n\t\t\t\t\t\t.put(\"time_from\", time_from)\n\t\t\t);\n\n\t\t\tJSONArray testHistorydetails = result.getJSONArray(\"result\");\n\t\t\tif (testHistorydetails.length() == 0) {\n\t\t\t\thistorytype = -1;\n\t\t\t\twhile (testHistorydetails.length() == 0 && ++historytype <= 4) {\n\t\t\t\t\t// if we get an empty array, we try another history parameter\n\t\t\t\t\tresult = _queryBuffer(\n\t\t\t\t\t\t\t\"history.get\"\n\t\t\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t\t\t\t.put(\"output\", \"extend\")\n\t\t\t\t\t\t\t\t.put(\"limit\", 1)\n\t\t\t\t\t\t\t\t.put(\"history\", historytype)\n\t\t\t\t\t\t\t\t.put(\"itemids\", new JSONArray().put(itemid))\n\t\t\t\t\t\t\t\t.put(\"time_from\", time_from)\n\t\t\t\t\t);\n\t\t\t\t\ttestHistorydetails = result.getJSONArray(\"result\");\n\t\t\t\t}\n\t\t\t}\n\t\t\t// correct historytype found and there are data\n\t\t\tif (testHistorydetails.length() > 0) {\n\t\t\t\t// count of the entries cannot be detected (zabbix bug),\n\t\t\t\t// so we use a fiction\n\t\t\t\tint numDetails = 400;\n\t\t\t\tint curI=0;\n\t\t\t\tJsonArrayOrObjectReader historydetails = _queryStream(\n\t\t\t\t\t\t\"history.get\"\n\t\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t\t\t.put(\"output\", \"extend\")\n\t\t\t\t\t\t\t.put(\"limit\", ZabbixConfig.HISTORY_GET_LIMIT)\n\t\t\t\t\t\t\t.put(\"history\", historytype)\n\t\t\t\t\t\t\t.put(\"itemids\", new JSONArray().put(itemid))\n\t\t\t\t\t\t\t.put(\"time_from\", time_from)\n\t\t\t\t\t\t\t.put(\"sortfield\", \"clock\")\n\t\t\t\t\t\t\t.put(\"sortorder\", \"DESC\")\n\t\t\t\t);\n\t\t\t\tJsonObjectReader historydetail;\n\t\t\t\ttry {\n\t\t\t\t\tint selI = 0;\n\t\t\t\t\twhile ((historydetail = historydetails.next()) != null) {\n\t\t\t\t\t\t// save only every 20th\n\t\t\t\t\t\tif (selI++ % 20 != 0) {\n\t\t\t\t\t\t\twhile (historydetail.nextValueToken()) {\n\t\t\t\t\t\t\t\thistorydetail.nextProperty();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tHistoryDetailData h = new HistoryDetailData();\n\t\t\t\t\t\twhile (historydetail.nextValueToken()) {\n\t\t\t\t\t\t\tString propName = historydetail.getCurrentName();\n\t\t\t\t\t\t\tif (propName.equals(HistoryDetailData.COLUMN_CLOCK)) {\n\t\t\t\t\t\t\t\th.set(HistoryDetailData.COLUMN_CLOCK, Integer.parseInt(historydetail.getText()));\n\t\t\t\t\t\t\t} else if (propName.equals(HistoryDetailData.COLUMN_ITEMID)) {\n\t\t\t\t\t\t\t\th.set(HistoryDetailData.COLUMN_ITEMID, Long.parseLong(historydetail.getText()));\n\t\t\t\t\t\t\t} else if (propName.equals(HistoryDetailData.COLUMN_VALUE)) {\n\t\t\t\t\t\t\t\th.set(HistoryDetailData.COLUMN_VALUE, Double.parseDouble(historydetail.getText()));\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\thistorydetail.nextProperty();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\th.insert(zabbixLocalDB);\n\t\t\t\t\t\tif (++curI % 10 == 0) {\n\t\t\t\t\t\t\tshowProgress(Math.min(curI*100/numDetails, 84));\n\t\t\t\t\t\t}\n\t\t\t\t\t\t_commitTransactionIfRecommended();\n\t\t\t\t\t}\n\t\t\t\t} catch (NumberFormatException e) {\n\t\t\t\t\t// data are unuseable, e.g. because it's a string\n\t\t\t\t}\n\t\t\t\thistorydetails.close();\n\t\t\t}\n\t\t\tsetCached(HistoryDetailData.TABLE_NAME, itemid, ZabbixConfig.CACHE_LIFETIME_HISTORY_DETAILS);\n\t\t\t_endTransaction();\n\t\t}\n\t}\n\n\tprivate long importHostGroups(JsonArrayOrObjectReader jsonArray) throws JsonParseException, IOException {\n\t\tlong firstHostGroupId = -1;\n\t\tJsonObjectReader hostReader;\n\t\twhile ((hostReader = jsonArray.next()) != null) {\n\t\t\tHostGroupData h = new HostGroupData();\n\t\t\twhile (hostReader.nextValueToken()) {\n\t\t\t\tString propName = hostReader.getCurrentName();\n\t\t\t\tif (propName.equals(HostGroupData.COLUMN_GROUPID)) {\n\t\t\t\t\tlong id = Long.parseLong(hostReader.getText());\n\t\t\t\t\tif (firstHostGroupId == -1) firstHostGroupId = id;\n\t\t\t\t\th.set(HostGroupData.COLUMN_GROUPID, id);\n\t\t\t\t} else if (propName.equals(HostGroupData.COLUMN_NAME)) {\n\t\t\t\t\th.set(HostGroupData.COLUMN_NAME, hostReader.getText());\n\t\t\t\t} else {\n\t\t\t\t\thostReader.nextProperty();\n\t\t\t\t}\n\t\t\t}\n\t\t\th.insert(zabbixLocalDB, HostGroupData.COLUMN_GROUPID);\n\t\t\t_commitTransactionIfRecommended();\n\t\t}\n\n\t\treturn firstHostGroupId;\n\t}\n\n\t/**\n\t * import the hosts from stream\n\t * @param jsonArray stream\n\t * @param numHosts count of hosts for progressbar. null if unknown.\n\t * @return Object[] {(String) comma-separated all Hostnames, (Long) 1. host id}\n\t * @throws JsonParseException\n\t * @throws IOException\n\t */\n\tprivate Object[] importHosts(JsonArrayOrObjectReader jsonArray, Integer numHosts) throws JsonParseException, IOException {\n\t\tList<String> hostnames = new ArrayList<String>();\n\t\tlong firstHostId = -1;\n\t\tJsonObjectReader hostReader;\n\t\tint i=0;\n\t\twhile ((hostReader = jsonArray.next()) != null) {\n\t\t\tHostData h = new HostData();\n\t\t\twhile (hostReader.nextValueToken()) {\n\t\t\t\tString propName = hostReader.getCurrentName();\n\t\t\t\tif (propName.equals(HostData.COLUMN_HOSTID)) {\n\t\t\t\t\th.set(HostData.COLUMN_HOSTID, Long.parseLong(hostReader.getText()));\n\t\t\t\t\tif (firstHostId == -1) {\n\t\t\t\t\t\tfirstHostId = (Long) h.get(HostData.COLUMN_HOSTID);\n\t\t\t\t\t}\n\t\t\t\t} else if (propName.equals(HostData.COLUMN_HOST)) {\n\t\t\t\t\tString host = hostReader.getText();\n\t\t\t\t\thostnames.add(host);\n\t\t\t\t\th.set(HostData.COLUMN_HOST, host);\n\t\t\t\t} else if (propName.equals(\"groups\")) {\n\t\t\t\t\tlong groupid = importHostGroups(hostReader.getJsonArrayOrObjectReader());\n\t\t\t\t\tif (groupid != -1) {\n\t\t\t\t\t\th.set(HostData.COLUMN_GROUPID, groupid);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\thostReader.nextProperty();\n\t\t\t\t}\n\t\t\t}\n\t\t\t// host without group will get group #0 (other)\n\t\t\tif (h.get(HostData.COLUMN_GROUPID) == null) {\n\t\t\t\th.set(HostData.COLUMN_GROUPID, 0);\n\t\t\t\t// create \"other\" hostgroup #1\n\t\t\t\tHostGroupData hg = new HostGroupData();\n\t\t\t\thg.set(HostGroupData.COLUMN_GROUPID, 0);\n\t\t\t\thg.set(HostGroupData.COLUMN_NAME, \"- \"+context.getResources().getString(R.string.other)+\" -\");\n\t\t\t\thg.insert(zabbixLocalDB, HostGroupData.COLUMN_GROUPID);\n\t\t\t}\n\t\t\th.insert(zabbixLocalDB, HostData.COLUMN_HOSTID);\n\t\t\tif (numHosts != null && ++i % 10 == 0) {\n\t\t\t\tshowProgress(i*100/numHosts);\n\t\t\t}\n\t\t\t_commitTransactionIfRecommended();\n\t\t}\n\n\t\treturn new Object[] {hostnames.toString().replaceAll(\"[\\\\[\\\\]]\", \"\"), firstHostId};\n\t}\n\n\tpublic void importHostsAndGroups() throws JSONException, IOException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\tif (!isCached(HostData.TABLE_NAME, null)) {\n\t\t\t_startTransaction();\n\t\t\tzabbixLocalDB.delete(HostData.TABLE_NAME, null, null);\n\t\t\tzabbixLocalDB.delete(HostGroupData.TABLE_NAME, null, null);\n\n\t\t\t// get count of hosts\n\t\t\tJSONObject result = _queryBuffer(\n\t\t\t\t\t\"host.get\"\n\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t\t.put(\"countOutput\", 1)\n\t\t\t\t\t\t.put(\"limit\", ZabbixConfig.HOST_GET_LIMIT)\n\t\t\t\t\t\t.put(isVersion2?\"selectGroups\":\"select_groups\", \"extend\")\n\t\t\t);\n\t\t\tint numHosts = result.getInt(\"result\");\n\t\t\tJsonArrayOrObjectReader hosts = _queryStream(\n\t\t\t\t\t\"host.get\"\n\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t\t.put(\"output\", \"extend\")\n\t\t\t\t\t\t.put(\"limit\", ZabbixConfig.HOST_GET_LIMIT)\n\t\t\t\t\t\t.put(isVersion2?\"selectGroups\":\"select_groups\", \"extend\")\n\t\t\t);\n\t\t\timportHosts(hosts, numHosts);\n\t\t\thosts.close();\n\n\t\t\tsetCached(HostData.TABLE_NAME, null, ZabbixConfig.CACHE_LIFETIME_HOSTS);\n\t\t\t_endTransaction();\n\t\t}\n\t}\n\n\t/**\n\t * import items from stream.\n\t * @param items stream\n\t * @param numItems count for progressbar, if 0 no progressbarupdate\n\t * @param checkBeforeInsert if true, only make an insert if item does not exist\n\t * @return the first item id\n\t * @throws JsonParseException\n\t * @throws IOException\n\t */\n\tprivate long importItems(JsonArrayOrObjectReader items, int numItems, boolean checkBeforeInsert) throws JsonParseException, IOException {\n\t\tlong firstItemId = -1;\n\t\tint curI=0;\n\t\tJsonObjectReader itemReader;\n\t\twhile ((itemReader = items.next()) != null) {\n\t\t\tItemData i = new ItemData();\n\t\t\tString key_ = null;\n\t\t\twhile (itemReader.nextValueToken()) {\n\t\t\t\tString propName = itemReader.getCurrentName();\n\t\t\t\tif (propName.equals(ItemData.COLUMN_ITEMID)) {\n\t\t\t\t\ti.set(ItemData.COLUMN_ITEMID, Long.parseLong(itemReader.getText()));\n\t\t\t\t\tif (firstItemId == -1) {\n\t\t\t\t\t\tfirstItemId = (Long) i.get(ItemData.COLUMN_ITEMID);\n\t\t\t\t\t}\n\t\t\t\t} else if (propName.equals(ItemData.COLUMN_HOSTID)) {\n\t\t\t\t\ti.set(ItemData.COLUMN_HOSTID, Long.parseLong(itemReader.getText()));\n\t\t\t\t} else if (propName.equals(ItemData.COLUMN_DESCRIPTION) || propName.equals(\"name\")) {\n\t\t\t\t\t// since zabbix 2.x is the name of the item \"name\"\n\t\t\t\t\t// before zabbix 2.x the name field was \"description\"\n\t\t\t\t\tif (isVersion2 && propName.equals(\"name\")) {\n\t\t\t\t\t\ti.set(ItemData.COLUMN_DESCRIPTION, itemReader.getText());\n\t\t\t\t\t} else if (!isVersion2) {\n\t\t\t\t\t\ti.set(ItemData.COLUMN_DESCRIPTION, itemReader.getText());\n\t\t\t\t\t}\n\t\t\t\t} else if (propName.equals(ItemData.COLUMN_LASTCLOCK)) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\ti.set(ItemData.COLUMN_LASTCLOCK, Integer.parseInt(itemReader.getText()));\n\t\t\t\t\t} catch (NumberFormatException e) {\n\t\t\t\t\t\t// ignore\n\t\t\t\t\t}\n\t\t\t\t} else if (propName.equals(ItemData.COLUMN_LASTVALUE)) {\n\t\t\t\t\ti.set(ItemData.COLUMN_LASTVALUE, itemReader.getText());\n\t\t\t\t} else if (propName.equals(ItemData.COLUMN_UNITS)) {\n\t\t\t\t\ti.set(ItemData.COLUMN_UNITS, itemReader.getText());\n\t\t\t\t} else if (propName.equals(\"key_\")) {\n\t\t\t\t\tkey_ = itemReader.getText();\n\t\t\t\t} else if (propName.equals(\"applications\")) {\n\t\t\t\t\t// at this point itemid and hostid is unknown\n\t\t\t\t\t// because of this, all applicationrelations will be saved with itemid and hostid \"-1\".\n\t\t\t\t\t// later the IDs will be replaced with the correct\n\t\t\t\t\timportApplications(-1, -1, itemReader.getJsonArrayOrObjectReader());\n\t\t\t\t} else {\n\t\t\t\t\titemReader.nextProperty();\n\t\t\t\t}\n\t\t\t}\n\t\t\t// if applicable replace placeholder\n\t\t\tString description = (String) i.get(ItemData.COLUMN_DESCRIPTION);\n\t\t\tif (description.matches(\".*\\\\$[0-9].*\")) {\n\t\t\t\tif (key_ != null && key_.indexOf('[') != -1) {\n\t\t\t\t\tString[] keys = key_.substring(key_.indexOf('[')+1, key_.indexOf(']')).split(\",\");\n\t\t\t\t\tfor (int ix=0; ix<keys.length; ix++) {\n\t\t\t\t\t\tdescription = description.replace(\"$\"+(ix+1), keys[ix]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\ti.set(ItemData.COLUMN_DESCRIPTION, description);\n\t\t\tif (checkBeforeInsert) {\n\t\t\t\ti.insert(zabbixLocalDB, ItemData.COLUMN_ITEMID);\n\t\t\t} else {\n\t\t\t\ti.insert(zabbixLocalDB);\n\t\t\t}\n\t\t\tif (numItems > 0 && ++curI % 10 == 0) {\n\t\t\t\tshowProgress(curI*100/numItems);\n\t\t\t}\n\n\t\t\t// now the \"-1\" IDs of applicationsrelation will be replaced with the correct itemID\n\t\t\tContentValues values = new ContentValues(2);\n\t\t\tvalues.put(ApplicationItemRelationData.COLUMN_ITEMID, (Long) i.get(ItemData.COLUMN_ITEMID));\n\t\t\tvalues.put(ApplicationItemRelationData.COLUMN_HOSTID, (Long) i.get(ItemData.COLUMN_HOSTID));\n\t\t\tzabbixLocalDB.update(\n\t\t\t\t\tApplicationItemRelationData.TABLE_NAME\n\t\t\t\t\t, values\n\t\t\t\t\t, ApplicationItemRelationData.COLUMN_ITEMID+\"=-1\"\n\t\t\t\t\t, null\n\t\t\t);\n\t\t}\n\t\treturn firstItemId;\n\t}\n\n\tpublic void importItems(long hostid) throws JSONException, IOException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\tif (!isCached(ItemData.TABLE_NAME, \"hostid=\"+hostid)) {\n\t\t\t_startTransaction();\n\t\t\tzabbixLocalDB.delete(ItemData.TABLE_NAME, ItemData.COLUMN_HOSTID+\"=\"+hostid, null);\n\t\t\tzabbixLocalDB.delete(ApplicationItemRelationData.TABLE_NAME, ApplicationItemRelationData.COLUMN_HOSTID+\"=\"+hostid, null);\n\n\t\t\t// count of items\n\t\t\tJSONObject result = _queryBuffer(\n\t\t\t\t\t\"item.get\"\n\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t.put(\"output\", \"extend\")\n\t\t\t\t\t.put(\"countOutput\", 1)\n\t\t\t\t\t.put(\"limit\", ZabbixConfig.ITEM_GET_LIMIT)\n\t\t\t\t\t.put(\"hostids\", new JSONArray().put(hostid))\n\t\t\t);\n\t\t\tint numItems = result.getInt(\"result\");\n\t\t\tJsonArrayOrObjectReader items = _queryStream(\n\t\t\t\t\t\"item.get\"\n\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t\t.put(\"output\", \"extend\")\n\t\t\t\t\t\t.put(\"limit\", ZabbixConfig.ITEM_GET_LIMIT)\n\t\t\t\t\t\t.put(isVersion2?\"selectApplications\":\"select_applications\", \"extend\")\n\t\t\t\t\t\t.put(\"hostids\", new JSONArray().put(hostid))\n\t\t\t);\n\t\t\timportItems(items, numItems, false);\n\t\t\titems.close();\n\n\t\t\tsetCached(ItemData.TABLE_NAME, \"hostid=\"+hostid, ZabbixConfig.CACHE_LIFETIME_ITEMS);\n\t\t\t_endTransaction();\n\t\t}\n\t}\n\n\tprivate void importScreenItems(JsonArrayOrObjectReader screenItems) throws JsonParseException, NumberFormatException, IOException {\n\t\tJsonObjectReader screenItemReader;\n\t\twhile ((screenItemReader = screenItems.next()) != null) {\n\t\t\tScreenItemData si = new ScreenItemData();\n\t\t\tint resourcetype = -1;\n\t\t\twhile (screenItemReader.nextValueToken()) {\n\t\t\t\tString propName = screenItemReader.getCurrentName();\n\t\t\t\tif (propName.equals(ScreenItemData.COLUMN_SCREENITEMID)) {\n\t\t\t\t\tsi.set(ScreenItemData.COLUMN_SCREENITEMID, Long.parseLong(screenItemReader.getText()));\n\t\t\t\t} else if (propName.equals(ScreenItemData.COLUMN_SCREENID)) {\n\t\t\t\t\tsi.set(ScreenItemData.COLUMN_SCREENID, Long.parseLong(screenItemReader.getText()));\n\t\t\t\t} else if (propName.equals(ScreenItemData.COLUMN_RESOURCEID)) {\n\t\t\t\t\tsi.set(ScreenItemData.COLUMN_RESOURCEID, Long.parseLong(screenItemReader.getText()));\n\t\t\t\t} else if (propName.equals(\"resourcetype\")) {\n\t\t\t\t\tresourcetype = Integer.parseInt(screenItemReader.getText());\n\t\t\t\t} else {\n\t\t\t\t\tscreenItemReader.nextProperty();\n\t\t\t\t}\n\t\t\t}\n\t\t\t// only resouretype == 0\n\t\t\tif (resourcetype == 0) {\n\t\t\t\tsi.insert(zabbixLocalDB);\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic void importScreens() throws ClientProtocolException, IOException, JSONException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\tif (!isCached(ScreenData.TABLE_NAME, null)) {\n\t\t\t_startTransaction();\n\n\t\t\tzabbixLocalDB.delete(ScreenData.TABLE_NAME, null, null);\n\t\t\tzabbixLocalDB.delete(ScreenItemData.TABLE_NAME, null, null);\n\t\t\tzabbixLocalDB.delete(CacheData.TABLE_NAME, CacheData.COLUMN_KIND+\"='\"+ScreenData.TABLE_NAME+\"'\", null);\n\n\t\t\tJsonArrayOrObjectReader screens = _queryStream(\n\t\t\t\t\t(isVersion2?\"s\":\"S\")+\"creen.get\"\n\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t\t.put(\"output\", \"extend\")\n\t\t\t\t\t\t.put(isVersion2?\"selectScreenItems\":\"select_screenitems\", \"extend\")\n\t\t\t);\n\t\t\tJsonObjectReader screenReader;\n\t\t\twhile ((screenReader = screens.next()) != null) {\n\t\t\t\tScreenData scr = new ScreenData();\n\t\t\t\twhile (screenReader.nextValueToken()) {\n\t\t\t\t\tString propName = screenReader.getCurrentName();\n\t\t\t\t\tif (propName.equals(ScreenData.COLUMN_SCREENID)) {\n\t\t\t\t\t\tscr.set(ScreenData.COLUMN_SCREENID, Long.parseLong(screenReader.getText()));\n\t\t\t\t\t} else if (propName.equals(ScreenData.COLUMN_NAME)) {\n\t\t\t\t\t\tscr.set(ScreenData.COLUMN_NAME, screenReader.getText());\n\t\t\t\t\t} else if (propName.equals(\"screenitems\")) {\n\t\t\t\t\t\timportScreenItems(screenReader.getJsonArrayOrObjectReader());\n\t\t\t\t\t} else {\n\t\t\t\t\t\tscreenReader.nextProperty();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tscr.insert(zabbixLocalDB);\n\t\t\t}\n\t\t\tscreens.close();\n\n\t\t\tsetCached(ScreenData.TABLE_NAME, null, ZabbixConfig.CACHE_LIFETIME_SCREENS);\n\t\t\t_endTransaction();\n\t\t}\n\t}\n\n\tpublic void importTrigger(String triggerid) throws JSONException, IOException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\tif (!isCached(TriggerData.TABLE_NAME, \"triggerid=\"+triggerid)) {\n\t\t\t_startTransaction();\n\n\t\t\tJsonArrayOrObjectReader trigger = _queryStream(\n\t\t\t\t\t\"trigger.get\"\n\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t\t.put(\"output\", \"extend\")\n\t\t\t\t\t\t.put(isVersion2?\"selectHosts\":\"select_hosts\", \"extend\")\n\t\t\t\t\t\t.put(\"triggerids\", new JSONArray().put(triggerid))\n\t\t\t);\n\t\t\timportTriggers(trigger);\n\t\t\ttrigger.close();\n\n\t\t\tsetCached(TriggerData.TABLE_NAME, \"triggerid=\"+triggerid, ZabbixConfig.CACHE_LIFETIME_TRIGGERS);\n\t\t\t_endTransaction();\n\t\t}\n\t}\n\n\t/**\n\t * importiert ein trigger mit dem attribute itemid. ggf. wird der trigger zuerst gelöscht und neu angelegt.\n\t * imports a trigger with the attribute itemid. if trigger already exists, it will be removed first.\n\t * @param triggerid\n\t * @throws JSONException\n\t * @throws IOException\n\t * @throws HttpAuthorizationRequiredException\n\t * @throws NoAPIAccessException\n\t */\n\tpublic void importTriggerColumnItemId(String triggerid) throws JSONException, IOException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\t// check if the trigger exists and if the itemid was set\n\t\tboolean mustImport = true;\n\t\tCursor cur = zabbixLocalDB.query(TriggerData.TABLE_NAME, null, TriggerData.COLUMN_TRIGGERID+\"=\"+triggerid, null, null, null, null);\n\t\tif (cur.moveToFirst()) {\n\t\t\tlong itemid = 0;\n\t\t\ttry {\n\t\t\t\titemid = cur.getLong(cur.getColumnIndex(TriggerData.COLUMN_ITEMID));\n\t\t\t} catch (Exception e) {\n\t\t\t\t// no itemid\n\t\t\t}\n\t\t\tif (itemid > 0) {\n\t\t\t\tmustImport = false;\n\t\t\t}\n\t\t}\n\t\tif (mustImport) {\n\t\t\t_startTransaction();\n\t\t\tzabbixLocalDB.delete(TriggerData.TABLE_NAME, TriggerData.COLUMN_TRIGGERID+\"=\"+triggerid, null);\n\t\t\tJsonArrayOrObjectReader triggers = _queryStream(\n\t\t\t\t\t\"trigger.get\"\n\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t\t.put(\"output\", \"extend\")\n\t\t\t\t\t\t.put(isVersion2?\"selectHosts\":\"select_hosts\", \"extend\")\n\t\t\t\t\t\t.put(isVersion2?\"selectGroups\":\"select_groups\", \"extend\")\n\t\t\t\t\t\t.put(isVersion2?\"selectItems\":\"select_items\", \"extend\")\n\t\t\t\t\t\t.put(\"triggerids\", new JSONArray().put(triggerid))\n\t\t\t\t\t\t.put(\"limit\", 1)\n\t\t\t);\n\t\t\timportTriggers(triggers);\n\t\t\t_endTransaction();\n\t\t}\n\t}\n\n\t/**\n\t * imports the \"warning\"-triggers\n\t * @throws JSONException\n\t * @throws IOException\n\t * @throws HttpAuthorizationRequiredException\n\t * @throws NoAPIAccessException\n\t */\n\tpublic void importTriggers() throws JSONException, IOException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\tif (!isCached(TriggerData.TABLE_NAME, null)) {\n\t\t\t// clear triggers\n\t\t\tzabbixLocalDB.delete(TriggerData.TABLE_NAME, null, null);\n\n\t\t\t_startTransaction();\n\n\t\t\tlong min = (new Date().getTime()/1000)-ZabbixConfig.STATUS_SHOW_TRIGGER_TIME;\n\t\t\tJsonArrayOrObjectReader triggers = _queryStream(\n\t\t\t\t\t\"trigger.get\"\n\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t\t.put(\"output\", \"extend\")\n\t\t\t\t\t\t.put(\"sortfield\", \"lastchange\")\n\t\t\t\t\t\t.put(\"sortorder\", \"desc\")\n\t\t\t\t\t\t.put(isVersion2?\"selectHosts\":\"select_hosts\", \"extend\")\n\t\t\t\t\t\t.put(isVersion2?\"selectGroups\":\"select_groups\", \"extend\")\n\t\t\t\t\t\t.put(isVersion2?\"selectItems\":\"select_items\", \"extend\")\n\t\t\t\t\t\t.put(\"lastChangeSince\", min)\n\t\t\t\t\t\t.put(\"only_true\", \"1\")\n\t\t\t\t\t\t.put(\"limit\", ZabbixConfig.TRIGGER_GET_LIMIT)\n\t\t\t\t\t\t.put(\"expandDescription\", true)\n\t\t\t);\n\t\t\timportTriggers(triggers);\n\t\t\ttriggers.close();\n\n\t\t\tsetCached(TriggerData.TABLE_NAME, null, ZabbixConfig.CACHE_LIFETIME_TRIGGERS);\n\t\t\t_endTransaction();\n\t\t}\n\t}\n\n\tprivate void importTriggers(JsonArrayOrObjectReader jsonArray) throws JsonParseException, IOException {\n\t\tJsonObjectReader triggerReader;\n\t\twhile ((triggerReader = jsonArray.next()) != null) {\n\t\t\tTriggerData t = new TriggerData();\n\t\t\twhile (triggerReader.nextValueToken()) {\n\t\t\t\tString propName = triggerReader.getCurrentName();\n\t\t\t\tif (propName.equals(TriggerData.COLUMN_TRIGGERID)) {\n\t\t\t\t\tt.set(TriggerData.COLUMN_TRIGGERID, Long.parseLong(triggerReader.getText()));\n\t\t\t\t} else if (propName.equals(TriggerData.COLUMN_COMMENTS)) {\n\t\t\t\t\tt.set(TriggerData.COLUMN_COMMENTS, triggerReader.getText());\n\t\t\t\t} else if (propName.equals(TriggerData.COLUMN_DESCRIPTION)) {\n\t\t\t\t\tt.set(TriggerData.COLUMN_DESCRIPTION, triggerReader.getText());\n\t\t\t\t} else if (propName.equals(TriggerData.COLUMN_EXPRESSION)) {\n\t\t\t\t\tt.set(TriggerData.COLUMN_EXPRESSION, triggerReader.getText());\n\t\t\t\t} else if (propName.equals(TriggerData.COLUMN_LASTCHANGE)) {\n\t\t\t\t\tt.set(TriggerData.COLUMN_LASTCHANGE, Integer.parseInt(triggerReader.getText()));\n\t\t\t\t} else if (propName.equals(TriggerData.COLUMN_PRIORITY)) {\n\t\t\t\t\tt.set(TriggerData.COLUMN_PRIORITY, Integer.parseInt(triggerReader.getText()));\n\t\t\t\t} else if (propName.equals(TriggerData.COLUMN_STATUS)) {\n\t\t\t\t\tt.set(TriggerData.COLUMN_STATUS, Integer.parseInt(triggerReader.getText()));\n\t\t\t\t} else if (propName.equals(TriggerData.COLUMN_VALUE)) {\n\t\t\t\t\tt.set(TriggerData.COLUMN_VALUE, Integer.parseInt(triggerReader.getText()));\n\t\t\t\t} else if (propName.equals(TriggerData.COLUMN_URL)) {\n\t\t\t\t\tt.set(TriggerData.COLUMN_URL, triggerReader.getText());\n\t\t\t\t} else if (propName.equals(\"hosts\")) {\n\t\t\t\t\tObject[] hostsCache = importHosts(triggerReader.getJsonArrayOrObjectReader(), null);\n\t\t\t\t\tt.set(TriggerData.COLUMN_HOSTS, hostsCache[0]);\n\t\t\t\t\tt.set(TriggerData.COLUMN_HOSTID, hostsCache[1]);\n\t\t\t\t} else if (propName.equals(\"groups\")) {\n\t\t\t\t\timportHostGroups(triggerReader.getJsonArrayOrObjectReader());\n\t\t\t\t} else if (propName.equals(\"items\")) {\n\t\t\t\t\t// store the first item id\n\t\t\t\t\tt.set(TriggerData.COLUMN_ITEMID, importItems(triggerReader.getJsonArrayOrObjectReader(), 1, true));\n\t\t\t\t} else {\n\t\t\t\t\ttriggerReader.nextProperty();\n\t\t\t\t}\n\t\t\t}\n\t\t\tt.insert(zabbixLocalDB, TriggerData.COLUMN_TRIGGERID);\n\t\t\t_commitTransactionIfRecommended();\n\t\t}\n\t}\n\n\tpublic void importTriggersByItemId(String itemid) throws JSONException, IOException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\tif (!isCached(TriggerData.TABLE_NAME, \"itemid=\"+itemid)) {\n\t\t\t_startTransaction();\n\t\t\tzabbixLocalDB.delete(TriggerData.TABLE_NAME, TriggerData.COLUMN_ITEMID+\"=\"+itemid, null);\n\t\t\tJsonArrayOrObjectReader triggers = _queryStream(\n\t\t\t\t\t\"trigger.get\"\n\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t\t.put(\"output\", \"extend\")\n\t\t\t\t\t\t.put(isVersion2?\"selectHosts\":\"select_hosts\", \"extend\")\n\t\t\t\t\t\t.put(isVersion2?\"selectGroups\":\"select_groups\", \"extend\")\n\t\t\t\t\t\t.put(isVersion2?\"selectItems\":\"select_items\", \"extend\")\n\t\t\t\t\t\t.put(\"itemids\", new JSONArray().put(itemid))\n\t\t\t\t\t\t.put(\"limit\", 1)\n\t\t\t\t\t\t.put(\"sortfield\", \"lastchange\")\n\t\t\t\t\t\t.put(\"sortorder\", \"DESC\")\n\t\t\t);\n\t\t\timportTriggers(triggers);\n\t\t\tsetCached(TriggerData.TABLE_NAME, \"itemid=\"+itemid, ZabbixConfig.CACHE_LIFETIME_TRIGGERS);\n\t\t\t_endTransaction();\n\t\t}\n\t}\n\n\tpublic boolean isCached(String kind, String filter) {\n\t\tSQLiteQueryBuilder sqlBuilder = new SQLiteQueryBuilder();\n\t\tsqlBuilder.setTables(CacheData.TABLE_NAME);\n\t\tsqlBuilder.appendWhere(CacheData.COLUMN_KIND+\"='\"+kind+\"' AND \");\n\t\tsqlBuilder.appendWhere(CacheData.COLUMN_FILTER+\n\t\t\t\t(filter==null?\" IS NULL\":\"='\"+filter+\"'\")\n\t\t);\n\t\tsqlBuilder.appendWhere(\" AND \"+CacheData.COLUMN_EXPIRE_DATE+\">\"+new Date().getTime()/1000);\n\t\tCursor cur = sqlBuilder.query(\n\t\t\tzabbixLocalDB,\n\t\t\tnull,\n\t\t\tnull,\n\t\t\tnull,\n\t\t\tnull,\n\t\t\tnull,\n\t\t\tnull\n\t\t);\n\t\tLog.i(\"ZabbixContentProvider\", \"isCached \"+kind+\"//\"+filter+\"//\"+cur.moveToFirst());\n\t\treturn cur.moveToFirst();\n\t}\n\n\t/**\n\t * public, for the unit test\n\t */\n\tpublic void setCached(String kind, String filter, int lifetime) {\n\t\tCacheData cache = new CacheData();\n\t\tcache.set(CacheData.COLUMN_EXPIRE_DATE, new Date().getTime()/1000 + lifetime);\n\t\tcache.set(CacheData.COLUMN_KIND, kind);\n\t\tif (filter != null) {\n\t\t\tcache.set(CacheData.COLUMN_FILTER, filter);\n\t\t}\n\t\tcache.insert(zabbixLocalDB);\n\t}\n\n\t/**\n\t * updates the progressbar in the gui\n\t * @param i 0..100\n\t */\n\tpublic void showProgress(int i) {\n\t\t// if applicable, transform the progress\n\t\tif (transformProgressStart != 0 && transformProgressEnd != 0) {\n\t\t\ti = (int) (transformProgressStart + (transformProgressEnd-transformProgressStart)*(double)i/100);\n\t\t}\n\n\t\tIntent intent = new Intent(ZabbixContentProvider.CONTENT_PROVIDER_INTENT_ACTION);\n\t\tintent.putExtra(\"flag\", ZabbixContentProvider.INTENT_FLAG_SHOW_PROGRESS);\n\t\tintent.putExtra(\"value\", i);\n\t\tcontext.sendBroadcast(intent);\n\t}\n\n\t/**\n\t * transforms the progress\n\t * @param start 0% => start%\n\t * @param end 100% => end%\n\t */\n\tpublic void transformProgress(int start, int end) {\n\t\ttransformProgressStart = start;\n\t\ttransformProgressEnd = end;\n\t}\n}\n"],
    "p_date_tdt": "May 10, 2013 7:32:46 AM",
    "c_comments_t": ["\t\t\t// create ApplicationItemRelation /** \n * public, for the unit test\n */\n /** \n * import the hosts from stream\n * @param jsonArray stream\n * @param numHosts count of hosts for progressbar. null if unknown.\n * @return Object[] {(String) comma-separated all Hostnames, (Long) 1. host id}\n * @throws JsonParseException\n * @throws IOException\n */\n \t\t\t// result array found /** \n * import graph items\n * @param graphItems\n * @return true, if graphid column has to be updated from -1 to the correct graphid later.\n * @throws JsonParseException\n * @throws NumberFormatException\n * @throws IOException\n */\n \t\t\t\t\t\t// save only every 20th \t\t\t// wrong password. token remains null \t\t\t// the past 2 hours \t\t\t\t\t// data are unuseable, e.g. because it's a string /** \n * @param events stream\n * @param numEvents if null, no progressbar-update AND only isert, if it does not exist. If !null, progressbar-update AND always insert without checking\n * @throws JsonParseException\n * @throws IOException\n */\n \t\t\t\t\t// Precondition failed / Looks like Zabbix 1.8.2 \t\t\t// get API version \t\t\t// if #0 \"other\" does not exist yet, it has to be created \t\t\t\t\t// later the IDs will be replaced with the correct /** \n * zabbix api call. data will be parsed as json object on-the-fly. Caution: use this only for api calls with a small return data.\n * @param method\n * @param params\n * @return\n * @throws ClientProtocolException\n * @throws IOException\n * @throws JSONException\n * @throws HttpAuthorizationRequiredException\n * @throws NoAPIAccessException\n */\n /** \n * begin sql transaction\n */\n \t\t\t\t\t\t// first do a new auth and then try the same api call again \t\t\t\t// no itemid \t\t\t// count of items /** \n * init\n * @param context android context\n * @param zabbixLocalDB sqlite\n */\n \t\t\t// create applications that does not exist \t\t\t\t// so we use a fiction \t\t\t// only resouretype == 0 /** \n * probably too old zabbix <= 1.8.2\n */\n /** \n * zabbix auth. user and pwd from app preferences\n * @return true success\n * @throws ClientProtocolException\n * @throws IOException\n * @throws JSONException\n * @throws HttpAuthorizationRequiredException\n * @throws NoAPIAccessException\n */\n /** \n * close the last http stream\n */\n \t\t\t// Workaround: historydetails only comes if you use the correct \"history\"-parameter. /** \n * transforms the progress\n * @param start 0% => start%\n * @param end 100% => end%\n */\n \t\t\t\t// in Zabbix version <2.0, this is not default \t\t\t\t// file not found \t\t\t\t\t// hex string => color int \t\tHttpClientParams.setRedirecting(params, true); // redirecting /** \n * The API version. From 1.8.3 (maybe earlier) to 2.0 (excluded), this was 1.3. With 2.0, it changed to 1.4.  Finally, since 2.0.4, the API version matches the program version.\n */\n \t\t\t// if applicable replace placeholder \t\t\t// if graphid-column was not set, this must be done later. temporary graphid=-1 \t\t// for GUI unit test, just return true /** \n * imports the \"warning\"-triggers\n * @throws JSONException\n * @throws IOException\n * @throws HttpAuthorizationRequiredException\n * @throws NoAPIAccessException\n */\n \t\t\t// event is parsed and can be inserted into the db \t\tpublic static final int EVENT_GET_TIME_FROM_SHIFT = 7*24*60*60; // -7 days \t\t// http request \t\t\t\t\t// store hosts namen \t\t\t\t// http auth failed \t\t\t\t\t// at this point itemid and hostid is unknown \t\t\t\t\t// import triggers \t\t\t// we try them all, until we get results. /** \n * importiert ein trigger mit dem attribute itemid. ggf. wird der trigger zuerst gelöscht und neu angelegt. imports a trigger with the attribute itemid. if trigger already exists, it will be removed first.\n * @param triggerid\n * @throws JSONException\n * @throws IOException\n * @throws HttpAuthorizationRequiredException\n * @throws NoAPIAccessException\n */\n \t\t\t\t\t// import hosts \t\t\t// for unit test \t\t\t\t// ignore \t\t\t// or a json object /** \n * zabbix error: no api access\n */\n /** \n * counts the sql inserts/updates and do a transaction commit to save the memory\n */\n \t\t\t// send intent to GUI \t\t\t\t\t// before zabbix 2.x the name field was \"description\" \t\t\t\t\t// if we get an empty array, we try another history parameter \t\t\t\t\t// store the first item id \t\t// check if the trigger exists and if the itemid was set /** \n * global constants\n */\n \t\t\t\t// create \"other\" hostgroup #1 \t\t\t// if there's no application, the ID #0 must be added (for other) \t\t\t\t\t// because of this, all applicationrelations will be saved with itemid and hostid \"-1\". \t\t\t\t\t\t.put(\"history\", historytype) // for integer ? /** \n * interface to connect to the zabbix server\n */\n /** \n * acknowledge zabbix event. Sets ack-flag with comment. Caution: This is supported only for Zabbix version >= 1.8.4\n * @param eventid\n * @param comment\n * @return true, success.\n * @throws ClientProtocolException\n * @throws IOException\n * @throws JSONException\n * @throws HttpAuthorizationRequiredException\n * @throws NoAPIAccessException\n */\n \t\t\t// store the last stream to close it if an exception will be thrown /** \n * zabbix api call as stream.\n * @param method\n * @param params\n * @return stream im json array wrapper\n * @throws JSONException\n * @throws IOException\n * @throws HttpAuthorizationRequiredException\n * @throws NoAPIAccessException\n */\n \t\t// if applicable http auth \t\t\t// correct historytype found and there are data \t\t\t\t// count of the entries cannot be detected (zabbix bug), /** \n * import items from stream.\n * @param items stream\n * @param numItems count for progressbar, if 0 no progressbarupdate\n * @param checkBeforeInsert if true, only make an insert if item does not exist\n * @return the first item id\n * @throws JsonParseException\n * @throws IOException\n */\n \t\t\t// collect all graphids /** \n * http auth is needed\n */\n \t\t\t// ignore for unit test /** \n * commit sql transaction\n */\n \t\t\t// delete old graphs \t\t\t// host without group will get group #0 (other) \t\t\t// there's no result \t\tpublic static final int HISTORY_GET_TIME_FROM_SHIFT = 24*60*60; // -24h \t\t// if applicable, transform the progress \t\t\t// SSL not trusted \t\t\t// internet problem \t\t\tif (jp.nextToken() != JsonToken.START_ARRAY && jp.getCurrentToken() != JsonToken.START_OBJECT) { // go inside the array \t\tpublic static final int CACHE_LIFETIME_APPLICATIONS = 2*24*60*60; // 2 days \t\t\t\t\t// since zabbix 2.x is the name of the item \"name\" \t\t\t// now the \"-1\" IDs of applicationsrelation will be replaced with the correct itemID \t\t\t// get count of hosts /** \n * import the newest events\n * @throws ClientProtocolException\n * @throws IOException\n * @throws JSONException\n * @throws HttpAuthorizationRequiredException\n * @throws NoAPIAccessException\n */\n /** \n * updates the progressbar in the gui\n * @param i 0..100\n */\n \t\t\t\t\t\t// ignore \t\t\t\t\t// first do a new auth and then try the same api call again /** \n * import the newest event of a trigger\n * @param triggerid\n * @throws JSONException\n * @throws IOException\n * @throws HttpAuthorizationRequiredException\n * @throws NoAPIAccessException\n */\n \t\t// it can be an (empty) array \t\t\t// this parameter can be \"null\" or a number 0-4. Because we don't know when to use which, \t\t\t// clear triggers"],
    "p_contents_t": ["package com.inovex.zabbixmobile.api;\n\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.net.Socket;\nimport java.net.UnknownHostException;\nimport java.security.KeyManagementException;\nimport java.security.KeyStore;\nimport java.security.KeyStoreException;\nimport java.security.NoSuchAlgorithmException;\nimport java.security.UnrecoverableKeyException;\nimport java.security.cert.CertificateException;\nimport java.security.cert.X509Certificate;\nimport java.util.ArrayList;\nimport java.util.Date;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Set;\n\nimport javax.net.ssl.SSLContext;\nimport javax.net.ssl.SSLPeerUnverifiedException;\nimport javax.net.ssl.TrustManager;\nimport javax.net.ssl.X509TrustManager;\n\nimport org.apache.http.HttpResponse;\nimport org.apache.http.HttpVersion;\nimport org.apache.http.auth.AuthScope;\nimport org.apache.http.auth.UsernamePasswordCredentials;\nimport org.apache.http.client.ClientProtocolException;\nimport org.apache.http.client.methods.HttpPost;\nimport org.apache.http.client.params.HttpClientParams;\nimport org.apache.http.conn.ClientConnectionManager;\nimport org.apache.http.conn.scheme.PlainSocketFactory;\nimport org.apache.http.conn.scheme.Scheme;\nimport org.apache.http.conn.scheme.SchemeRegistry;\nimport org.apache.http.conn.ssl.SSLSocketFactory;\nimport org.apache.http.entity.StringEntity;\nimport org.apache.http.impl.client.DefaultHttpClient;\nimport org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager;\nimport org.apache.http.params.BasicHttpParams;\nimport org.apache.http.params.HttpConnectionParams;\nimport org.apache.http.params.HttpParams;\nimport org.apache.http.params.HttpProtocolParams;\nimport org.apache.http.protocol.HTTP;\nimport org.codehaus.jackson.JsonFactory;\nimport org.codehaus.jackson.JsonParseException;\nimport org.codehaus.jackson.JsonParser;\nimport org.codehaus.jackson.JsonToken;\nimport org.json.JSONArray;\nimport org.json.JSONException;\nimport org.json.JSONObject;\n\nimport android.content.ContentValues;\nimport android.content.Context;\nimport android.content.Intent;\nimport android.content.SharedPreferences;\nimport android.database.Cursor;\nimport android.database.sqlite.SQLiteDatabase;\nimport android.database.sqlite.SQLiteQueryBuilder;\nimport android.graphics.Color;\nimport android.preference.PreferenceManager;\nimport android.util.Log;\n\nimport com.inovex.zabbixmobile.R;\nimport com.inovex.zabbixmobile.ZabbixContentProvider;\nimport com.inovex.zabbixmobile.model.ApplicationData;\nimport com.inovex.zabbixmobile.model.ApplicationItemRelationData;\nimport com.inovex.zabbixmobile.model.CacheData;\nimport com.inovex.zabbixmobile.model.EventData;\nimport com.inovex.zabbixmobile.model.GraphData;\nimport com.inovex.zabbixmobile.model.GraphItemData;\nimport com.inovex.zabbixmobile.model.HistoryDetailData;\nimport com.inovex.zabbixmobile.model.HostData;\nimport com.inovex.zabbixmobile.model.HostGroupData;\nimport com.inovex.zabbixmobile.model.ItemData;\nimport com.inovex.zabbixmobile.model.ScreenData;\nimport com.inovex.zabbixmobile.model.ScreenItemData;\nimport com.inovex.zabbixmobile.model.TriggerData;\n\n/**\n * interface to connect to the zabbix server\n */\npublic class ZabbixService {\n\tclass CustomSSLSocketFactory extends SSLSocketFactory {\n\t\tSSLContext sslContext = SSLContext.getInstance(\"TLS\");\n\n\t\tpublic CustomSSLSocketFactory(KeyStore truststore) throws NoSuchAlgorithmException, KeyManagementException, KeyStoreException, UnrecoverableKeyException {\n\t\t\tsuper(truststore);\n\t\t\tTrustManager tm = new X509TrustManager() {\n\t\t\t\t@Override\n\t\t\t\tpublic void checkClientTrusted(X509Certificate[] chain,\n\t\t\t\t\t\tString authType) throws CertificateException {\n\t\t\t\t}\n\t\t\t\t@Override\n\t\t\t\tpublic void checkServerTrusted(X509Certificate[] chain,\n\t\t\t\t\t\tString authType) throws CertificateException {\n\t\t\t\t}\n\t\t\t\t@Override\n\t\t\t\tpublic X509Certificate[] getAcceptedIssuers() {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t};\n\t\t\tsslContext.init(null, new TrustManager[] { tm }, null);\n\t\t}\n\n\t\t@Override\n\t\tpublic Socket createSocket() throws IOException {\n\t\t\treturn sslContext.getSocketFactory().createSocket();\n\t\t}\n\n\t\t@Override\n\t\tpublic Socket createSocket(Socket socket, String host, int port, boolean autoClose) throws IOException, UnknownHostException {\n\t\t\treturn sslContext.getSocketFactory().createSocket(socket, host, port, autoClose);\n\t\t}\n\t}\n\n\t/**\n\t * http auth is needed\n\t */\n\tpublic class HttpAuthorizationRequiredException extends Exception {\n\t\tprivate static final long serialVersionUID = 6632422081858878147L;\n\t}\n\n\t/**\n\t * zabbix error: no api access\n\t */\n\tpublic class NoAPIAccessException extends Exception {\n\t\tprivate static final long serialVersionUID = 6381395987443456382L;\n\t}\n\n\t/**\n\t * probably too old zabbix <= 1.8.2\n\t */\n\tpublic class PreconditionFailedException extends Exception {\n\t\tprivate static final long serialVersionUID = -2529885710860745023L;\n\t}\n\n\t/**\n\t * global constants\n\t */\n\tpublic class ZabbixConfig {\n\t\tpublic static final int APPLICATION_GET_LIMIT = 1000;\n\t\tpublic static final int EVENTS_GET_LIMIT = 60;\n\t\tpublic static final int HISTORY_GET_TIME_FROM_SHIFT = 24*60*60; // -24h\n\t\tpublic static final int HISTORY_GET_LIMIT = 8000;\n\t\tpublic static final int HOSTGROUP_GET_LIMIT = 200;\n\t\tpublic static final int HOST_GET_LIMIT = 300;\n\t\tpublic static final int ITEM_GET_LIMIT = 200;\n\t\tpublic static final int TRIGGER_GET_LIMIT = 100;\n\t\tpublic static final int EVENT_GET_TIME_FROM_SHIFT = 7*24*60*60; // -7 days\n\t\tpublic static final int CACHE_LIFETIME_APPLICATIONS = 2*24*60*60; // 2 days\n\t\tpublic static final int CACHE_LIFETIME_EVENTS = 120;\n\t\tpublic static final int CACHE_LIFETIME_HISTORY_DETAILS = 4*60;\n\t\tpublic static final int CACHE_LIFETIME_HOST_GROUPS = 7*24*60*60;\n\t\tpublic static final int CACHE_LIFETIME_HOSTS = 2*24*60*60;\n\t\tpublic static final int CACHE_LIFETIME_SCREENS = 2*24*60*60;\n\t\tpublic static final int CACHE_LIFETIME_ITEMS = 4*60;\n\t\tpublic static final int CACHE_LIFETIME_TRIGGERS = 2*60;\n\t\tpublic static final long STATUS_SHOW_TRIGGER_TIME = 14*24*60*60;\n\t\tpublic static final int HTTP_CONNECTION_TIMEOUT = 30000;\n\t}\n\n\tprivate final DefaultHttpClient httpClient;\n\tprivate final SQLiteDatabase zabbixLocalDB;\n\tprivate String url;\n\tprivate String token;\n\tprivate final Context context;\n\tprivate int _transactionStack;\n\tprivate JsonParser lastStream;\n\tprivate int transformProgressStart;\n\tprivate int transformProgressEnd;\n\tprivate boolean _notAuthorizedRetry;\n\tprivate boolean isVersion2 = true;\n\t/**\n\t * The API version. From 1.8.3 (maybe earlier) to 2.0 (excluded), this was 1.3. With 2.0, it changed to 1.4. \n\t * Finally, since 2.0.4, the API version matches the program version.\n\t */\n\tprivate String apiVersion = \"\";\n\n\t/**\n\t * init\n\t * @param context android context\n\t * @param zabbixLocalDB sqlite\n\t */\n\tpublic ZabbixService(Context context, SQLiteDatabase zabbixLocalDB) {\n\t\tClientConnectionManager ccm = null;\n\t\tHttpParams params = null;\n\n\t\ttry {\n\t\t\tSharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(context);\n\t\t\tif (prefs.getBoolean(\"zabbix_trust_all_ssl_ca\", false)) {\n\t\t\t\tKeyStore trustStore = KeyStore.getInstance(KeyStore.getDefaultType());\n\t\t\t\ttrustStore.load(null, null);\n\n\t\t\t\tSSLSocketFactory sf = new CustomSSLSocketFactory(trustStore);\n\t\t\t\tsf.setHostnameVerifier(SSLSocketFactory.ALLOW_ALL_HOSTNAME_VERIFIER);\n\n\t\t\t\tparams = new BasicHttpParams();\n\t\t\t\tHttpProtocolParams.setVersion(params, HttpVersion.HTTP_1_1);\n\t\t\t\tHttpProtocolParams.setContentCharset(params, HTTP.UTF_8);\n\n\t\t\t\tSchemeRegistry registry = new SchemeRegistry();\n\t\t\t\tregistry.register(new Scheme(\"http\", PlainSocketFactory.getSocketFactory(), 80));\n\t\t\t\tregistry.register(new Scheme(\"https\", sf, 443));\n\n\t\t\t\tccm = new ThreadSafeClientConnManager(params, registry);\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\t// ignore for unit test\n\t\t}\n\n\t\tif (ccm == null || params == null) {\n\t\t\thttpClient = new DefaultHttpClient();\n\t\t} else {\n\t\t\thttpClient = new DefaultHttpClient(ccm, params);\n\t\t}\n\n\t\t// if applicable http auth\n\t\ttry {\n\t\t\tSharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(context);\n\t\t\tif (prefs.getBoolean(\"http_auth_enabled\", false)) {\n\t\t\t\tString user = prefs.getString(\"http_auth_username\", \"\");\n\t\t\t\tString pwd = prefs.getString(\"http_auth_password\", \"\");\n\t\t\t\thttpClient.getCredentialsProvider().setCredentials(AuthScope.ANY, new UsernamePasswordCredentials(user, pwd));\n\t\t\t}\n\t\t} catch (java.lang.UnsupportedOperationException e1) {\n\t\t\t// for unit test\n\t\t}\n\n\t\tparams = httpClient.getParams();\n\t\tHttpClientParams.setRedirecting(params, true); // redirecting\n\t\tHttpConnectionParams.setConnectionTimeout(params, ZabbixConfig.HTTP_CONNECTION_TIMEOUT);\n\t\tthis.context = context;\n\t\tthis.zabbixLocalDB = zabbixLocalDB;\n\t}\n\n\t/**\n\t * counts the sql inserts/updates and do a transaction commit to save the memory\n\t */\n\tprivate void _commitTransactionIfRecommended() {\n\t\tif (_transactionStack++ > 50) {\n\t\t\t_endTransaction();\n\t\t\t_startTransaction();\n\t\t}\n\t}\n\n\t/**\n\t * commit sql transaction\n\t */\n\tpublic void _endTransaction() {\n\t\tif (zabbixLocalDB.inTransaction()) {\n\t\t\tzabbixLocalDB.setTransactionSuccessful();\n\t\t\tzabbixLocalDB.endTransaction();\n\t\t}\n\t}\n\n\t/**\n\t * zabbix api call. data will be parsed as json object on-the-fly.\n\t * Caution: use this only for api calls with a small return data.\n\t * @param method\n\t * @param params\n\t * @return\n\t * @throws ClientProtocolException\n\t * @throws IOException\n\t * @throws JSONException\n\t * @throws HttpAuthorizationRequiredException\n\t * @throws NoAPIAccessException\n\t */\n\tprivate JSONObject _queryBuffer(String method, JSONObject params) throws ClientProtocolException, IOException, JSONException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\tHttpPost post = new HttpPost(url);\n\t\tpost.addHeader(\"Content-Type\", \"application/json; charset=utf-8\");\n\n\t\tString json =\n\t\t\t\"{\" +\n\t\t\t\"\t\\\"jsonrpc\\\" : \\\"2.0\\\",\" +\n\t\t\t\"\t\\\"method\\\" : \\\"\"+method+\"\\\",\" +\n\t\t\t\"\t\\\"params\\\" : \"+params.toString()+\",\" +\n\t\t\t\"\t\\\"auth\\\" : \"+(token==null?\"null\":'\"'+token+'\"')+\",\" +\n\t\t\t\"\t\\\"id\\\" : 0\" +\n\t\t\t\"}\";\n\n\t\tpost.setEntity(new StringEntity(json, \"UTF-8\"));\n\t\ttry {\n\t\t\tHttpResponse resp = httpClient.execute(post);\n\t\t\tif (resp.getStatusLine().getStatusCode() == 401) {\n\t\t\t\t// http auth failed\n\t\t\t\tthrow new HttpAuthorizationRequiredException();\n\t\t\t} else if (resp.getStatusLine().getStatusCode() == 412) {\n\t\t\t\t\t// Precondition failed / Looks like Zabbix 1.8.2\n\t\t\t\tthrow new PreconditionFailedException();\n\t\t\t} else if (resp.getStatusLine().getStatusCode() == 404) {\n\t\t\t\t// file not found\n\t\t\t\tthrow new IOException(resp.getStatusLine().getStatusCode()+\" \"+resp.getStatusLine().getReasonPhrase());\n\t\t\t} else {\n\t\t\t\tLog.d(\"ZabbixService\", resp.getStatusLine().getStatusCode()+\" \"+resp.getStatusLine().getReasonPhrase());\n\t\t\t}\n\t\t\tStringBuilder total = new StringBuilder();\n\t\t\tBufferedReader rd = new BufferedReader(new InputStreamReader(resp.getEntity().getContent()));\n\t\t\tint chr;\n\t\t\twhile ((chr = rd.read()) != -1) {\n\t\t\t\ttotal.append((char) chr);\n\t\t\t}\n\t\t\tJSONObject result = new JSONObject(total.toString());\n\t\t\ttry {\n\t\t\t\tif (result.getJSONObject(\"error\") != null) {\n\t\t\t\t\tif (result.getJSONObject(\"error\").getString(\"data\").equals(\"No API access\")) {\n\t\t\t\t\t\tthrow new NoAPIAccessException();\n\t\t\t\t\t} else throw new RuntimeException(result.getJSONObject(\"error\").toString());\n\t\t\t\t}\n\t\t\t\tif (result.getString(\"data\").equals(\"Not authorized\")) {\n\t\t\t\t\t// first do a new auth and then try the same api call again\n\t\t\t\t\tif (authenticate() && !_notAuthorizedRetry) {\n\t\t\t\t\t\t_notAuthorizedRetry = true;\n\t\t\t\t\t\tJSONObject r = _queryBuffer(method, params);\n\t\t\t\t\t\t_notAuthorizedRetry = false;\n\t\t\t\t\t\treturn r;\n\t\t\t\t\t} throw new IllegalStateException(result.toString());\n\t\t\t\t}\n\t\t\t} catch (JSONException e) {\n\t\t\t\t// ignore\n\t\t\t}\n\t\t\treturn result;\n\t\t} catch (SSLPeerUnverifiedException e) {\n\t\t\t// SSL not trusted\n\t\t\tIntent intent = new Intent(ZabbixContentProvider.CONTENT_PROVIDER_INTENT_ACTION);\n\t\t\tintent.putExtra(\"flag\", ZabbixContentProvider.INTENT_FLAG_SSL_NOT_TRUSTED);\n\t\t\tcontext.sendBroadcast(intent);\n\t\t\tthrow e;\n\t\t} catch (IOException e) {\n\t\t\t// internet problem\n\t\t\t// send intent to GUI\n\t\t\tIntent intent = new Intent(ZabbixContentProvider.CONTENT_PROVIDER_INTENT_ACTION);\n\t\t\tintent.putExtra(\"flag\", ZabbixContentProvider.INTENT_FLAG_CONNECTION_FAILED);\n\t\t\tintent.putExtra(\"value\", e.getMessage());\n\t\t\tcontext.sendBroadcast(intent);\n\t\t\tthrow e;\n\t\t}\n\t}\n\n\t/**\n\t * zabbix api call as stream.\n\t * @param method\n\t * @param params\n\t * @return stream im json array wrapper\n\t * @throws JSONException\n\t * @throws IOException\n\t * @throws HttpAuthorizationRequiredException\n\t * @throws NoAPIAccessException\n\t */\n\tprivate JsonArrayOrObjectReader _queryStream(String method, JSONObject params) throws JSONException, IOException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\t// http request\n\t\tHttpPost post = new HttpPost(url);\n\t\tpost.addHeader(\"Content-Type\", \"application/json; charset=utf-8\");\n\n\t\tJSONObject json = new JSONObject()\n\t\t\t.put(\"jsonrpc\", \"2.0\")\n\t\t\t.put(\"method\", method)\n\t\t\t.put(\"params\", params)\n\t\t\t.put(\"auth\", token)\n\t\t\t.put(\"id\", 0);\n\n\t\tLog.d(\"ZabbixService\", \"_queryStream: \"+url);\n\t\tLog.d(\"ZabbixService\", \"_queryStream: \"+json.toString());\n\n\t\tpost.setEntity(new StringEntity(json.toString(), \"UTF-8\"));\n\t\ttry {\n\t\t\tHttpResponse resp = httpClient.execute(post);\n\t\t\tif (resp.getStatusLine().getStatusCode() == 401) {\n\t\t\t\t// http auth failed\n\t\t\t\tthrow new HttpAuthorizationRequiredException();\n\t\t\t}\n\n\t\t\tJsonFactory jsonFac = new JsonFactory();\n\t\t\tJsonParser jp = jsonFac.createJsonParser(resp.getEntity().getContent());\n\t\t\t// store the last stream to close it if an exception will be thrown\n\t\t\tlastStream = jp;\n\t\t\tif (jp.nextToken() != JsonToken.START_OBJECT) {\n\t\t\t\tthrow new IOException(\"Expected data to start with an Object\");\n\t\t\t}\n\t\t\tdo {\n\t\t\t\tjp.nextToken();\n\t\t\t\tif (jp.getCurrentName().equals(\"error\")) {\n\t\t\t\t\tjp.nextToken();\n\t\t\t\t\tString errortxt = \"\";\n\t\t\t\t\twhile (jp.nextToken() != JsonToken.END_OBJECT) {\n\t\t\t\t\t\terrortxt += jp.getText();\n\t\t\t\t\t}\n\t\t\t\t\tif (errortxt.contains(\"No API access\")) {\n\t\t\t\t\t\tthrow new NoAPIAccessException();\n\t\t\t\t\t} else if (errortxt.contains(\"Not authorized\")) {\n\t\t\t\t\t\t// first do a new auth and then try the same api call again\n\t\t\t\t\t\tif (authenticate() && !_notAuthorizedRetry) {\n\t\t\t\t\t\t\t_notAuthorizedRetry = true;\n\t\t\t\t\t\t\tJsonArrayOrObjectReader r = _queryStream(method, params);\n\t\t\t\t\t\t\t_notAuthorizedRetry = false;\n\t\t\t\t\t\t\treturn r;\n\t\t\t\t\t\t} else throw new IllegalStateException(errortxt);\n\t\t\t\t\t} else throw new IllegalStateException(\"JSON API Error: \"+errortxt);\n\t\t\t\t}\n\t\t\t} while (!jp.getCurrentName().equals(\"result\"));\n\n\t\t\t// result array found\n\t\t\tif (jp.nextToken() != JsonToken.START_ARRAY && jp.getCurrentToken() != JsonToken.START_OBJECT) { // go inside the array\n\t\t\t\ttry {\n\t\t\t\t\tLog.d(\"ZabbixService\", \"current token: \"+jp.getCurrentToken());\n\t\t\t\t\tLog.d(\"ZabbixService\", \"current name: \"+jp.getCurrentName());\n\t\t\t\t\tLog.d(\"ZabbixService\", \"get text: \"+jp.getText());\n\t\t\t\t\tLog.d(\"ZabbixService\", \"next value: \"+jp.nextValue());\n\t\t\t\t\tLog.d(\"ZabbixService\", \"next token: \"+jp.nextToken());\n\t\t\t\t\tLog.d(\"ZabbixService\", \"current token: \"+jp.getCurrentToken());\n\t\t\t\t\tLog.d(\"ZabbixService\", \"current name: \"+jp.getCurrentName());\n\t\t\t\t\tLog.d(\"ZabbixService\", \"get text: \"+jp.getText());\n\t\t\t\t} catch (Exception e) {}\n\t\t\t\tthrow new IOException(\"Expected data to start with an Array\");\n\t\t\t}\n\t\t\treturn new JsonArrayOrObjectReader(jp);\n\t\t} catch (SSLPeerUnverifiedException e) {\n\t\t\tthrow e;\n\t\t} catch (IOException e) {\n\t\t\t// internet problem\n\t\t\t// send intent to GUI\n\t\t\tIntent intent = new Intent(ZabbixContentProvider.CONTENT_PROVIDER_INTENT_ACTION);\n\t\t\tintent.putExtra(\"flag\", ZabbixContentProvider.INTENT_FLAG_CONNECTION_FAILED);\n\t\t\tcontext.sendBroadcast(intent);\n\t\t\tthrow e;\n\t\t}\n\t}\n\n\t/**\n\t * begin sql transaction\n\t */\n\tprivate void _startTransaction() {\n\t\tzabbixLocalDB.beginTransaction();\n\t\t_transactionStack = 0;\n\t}\n\n\t/**\n\t * acknowledge zabbix event. Sets ack-flag with comment.\n\t * Caution: This is supported only for Zabbix version >= 1.8.4\n\t * @param eventid\n\t * @param comment\n\t * @return true, success.\n\t * @throws ClientProtocolException\n\t * @throws IOException\n\t * @throws JSONException\n\t * @throws HttpAuthorizationRequiredException\n\t * @throws NoAPIAccessException\n\t */\n\tpublic boolean acknowledgeEvent(String eventid, String comment) throws ClientProtocolException, IOException, JSONException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\t// for GUI unit test, just return true\n\t\tif (comment != null && comment.equals(\"__UNIT_TEST__RETURN_TRUE__\")) return true;\n\n\t\tJSONObject result = _queryBuffer(\n\t\t\t\t\"event.acknowledge\"\n\t\t\t\t, new JSONObject()\n\t\t\t\t\t.put(\"eventids\", new JSONArray().put(eventid))\n\t\t);\n\t\t// it can be an (empty) array\n\t\ttry {\n\t\t\treturn result.getJSONObject(\"result\").getJSONArray(\"eventids\").length() == 1;\n\t\t} catch (JSONException e) {\n\t\t\t// or a json object\n\t\t\treturn result.getJSONObject(\"result\").getJSONObject(\"eventids\").length() == 1;\n\t\t}\n\t}\n\n\t/**\n\t * zabbix auth. user and pwd from app preferences\n\t * @return true success\n\t * @throws ClientProtocolException\n\t * @throws IOException\n\t * @throws JSONException\n\t * @throws HttpAuthorizationRequiredException\n\t * @throws NoAPIAccessException\n\t */\n\tpublic boolean authenticate() throws ClientProtocolException, IOException, JSONException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\tSharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(context);\n\t\tString url = prefs.getString(\"zabbix_url\", \"\").trim();\n\t\tString user = prefs.getString(\"zabbix_username\", \"\").trim();\n\t\tString password = prefs.getString(\"zabbix_password\", \"\");\n\n\t\tthis.url = url+(url.endsWith(\"/\")?\"\":'/')+\"api_jsonrpc.php\";\n\t\tLog.d(\"ZabbixContentProvider\", url+\"//\"+user);\n\n\t\ttry {\n\t\t\tJSONObject result = _queryBuffer(\n\t\t\t\t\t\"user.authenticate\"\n\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t\t.put(\"user\", user)\n\t\t\t\t\t\t.put(\"password\", password)\n\t\t\t);\n\t\t\ttoken = result.getString(\"result\");\n\t\t} catch (JSONException e) {\n\t\t\t// there's no result\n\t\t\te.printStackTrace();\n\t\t} catch (RuntimeException e) {\n\t\t\t// wrong password. token remains null\n\t\t\te.printStackTrace();\n\t\t}\n\t\tif (token != null) {\n\t\t\t// get API version\n\t\t\tJSONObject result = _queryBuffer(\n\t\t\t\t\t\"apiinfo.version\"\n\t\t\t\t\t, new JSONObject()\n\t\t\t);\n\t\t\tapiVersion = result.getString(\"result\");\n\t\t\tisVersion2 = (apiVersion.equals(\"1.4\") || apiVersion.startsWith(\"2\"));\n\t\t\tLog.i(\"ZabbixService\", \"Zabbix API Version: \" + apiVersion);\n\t\t}\n\t\treturn token != null;\n\t}\n\n\t/**\n\t * close the last http stream\n\t */\n\tpublic void closeLastStream() {\n\t\tif (lastStream != null && !lastStream.isClosed()) {\n\t\t\ttry {\n\t\t\t\tlastStream.close();\n\t\t\t} catch (IOException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate void importApplications(long hostid, long itemid, JsonArrayOrObjectReader jsonArray) throws JsonParseException, NumberFormatException, IOException {\n\t\tint num = 0;\n\t\tJsonObjectReader application;\n\t\twhile ((application = jsonArray.next()) != null) {\n\t\t\tApplicationData app = new ApplicationData();\n\t\t\twhile (application.nextValueToken()) {\n\t\t\t\tString propName = application.getCurrentName();\n\t\t\t\tif (propName.equals(ApplicationData.COLUMN_APPLICATIONID)) {\n\t\t\t\t\tapp.set(ApplicationData.COLUMN_APPLICATIONID, Long.parseLong(application.getText()));\n\t\t\t\t} else if (propName.equals(ApplicationData.COLUMN_NAME)) {\n\t\t\t\t\tapp.set(ApplicationData.COLUMN_NAME, application.getText());\n\t\t\t\t} else if (propName.equals(ApplicationData.COLUMN_HOSTID)) {\n\t\t\t\t\tapp.set(ApplicationData.COLUMN_HOSTID, Long.parseLong(application.getText()));\n\t\t\t\t} else {\n\t\t\t\t\tapplication.nextProperty();\n\t\t\t\t}\n\t\t\t}\n\t\t\t// create applications that does not exist\n\t\t\tapp.insert(zabbixLocalDB, ApplicationData.COLUMN_APPLICATIONID);\n\t\t\t_commitTransactionIfRecommended();\n\n\t\t\t// create ApplicationItemRelation\n\t\t\tlong appid = (Long) app.get(ApplicationData.COLUMN_APPLICATIONID);\n\t\t\tApplicationItemRelationData rel = new ApplicationItemRelationData();\n\t\t\trel.set(ApplicationItemRelationData.COLUMN_APPLICATIONID, appid);\n\t\t\trel.set(ApplicationItemRelationData.COLUMN_ITEMID, itemid);\n\t\t\trel.set(ApplicationItemRelationData.COLUMN_HOSTID, hostid);\n\t\t\trel.insert(zabbixLocalDB);\n\t\t\t_commitTransactionIfRecommended();\n\n\t\t\tnum++;\n\t\t}\n\t\tif (num == 0) {\n\t\t\t// if there's no application, the ID #0 must be added (for other)\n\t\t\tApplicationItemRelationData rel = new ApplicationItemRelationData();\n\t\t\trel.set(ApplicationItemRelationData.COLUMN_APPLICATIONID, 0);\n\t\t\trel.set(ApplicationItemRelationData.COLUMN_ITEMID, itemid);\n\t\t\trel.set(ApplicationItemRelationData.COLUMN_HOSTID, hostid);\n\t\t\trel.insert(zabbixLocalDB);\n\n\t\t\t// if #0 \"other\" does not exist yet, it has to be created\n\t\t\tApplicationData app = new ApplicationData();\n\t\t\tapp.set(ApplicationData.COLUMN_APPLICATIONID, 0);\n\t\t\tapp.set(ApplicationData.COLUMN_NAME, \"- \"+context.getResources().getString(R.string.other)+\" -\");\n\t\t\tapp.insert(zabbixLocalDB, ApplicationData.COLUMN_APPLICATIONID);\n\t\t}\n\t}\n\n\t/**\n\t * import the newest event of a trigger\n\t * @param triggerid\n\t * @throws JSONException\n\t * @throws IOException\n\t * @throws HttpAuthorizationRequiredException\n\t * @throws NoAPIAccessException\n\t */\n\tpublic void importEventByTriggerId(String triggerid) throws JSONException, IOException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\tif (!isCached(EventData.TABLE_NAME, \"triggerid=\"+triggerid)) {\n\t\t\t_startTransaction();\n\t\t\tzabbixLocalDB.delete(EventData.TABLE_NAME, EventData.COLUMN_OBJECTID+\"=\"+triggerid, null);\n\n\t\t\tJSONObject params = new JSONObject()\n\t\t\t\t.put(\"output\", \"extend\")\n\t\t\t\t.put(isVersion2?\"selectHosts\":\"select_hosts\", \"extend\")\n\t\t\t\t.put(\"triggerids\", new JSONArray().put(triggerid))\n\t\t\t\t.put(\"limit\", 1)\n\t\t\t\t.put(\"source\", 0);\n\t\t\tif (!isVersion2) {\n\t\t\t\tparams.put(\"sortfield\", \"clock\")\n\t\t\t\t\t.put(\"sortorder\", \"DESC\");\n\t\t\t}\n\n\t\t\tJsonArrayOrObjectReader events = _queryStream(\n\t\t\t\t\t\"event.get\"\n\t\t\t\t\t, params\n\t\t\t);\n\t\t\timportEvents(events, null);\n\t\t\tevents.close();\n\n\t\t\tsetCached(EventData.TABLE_NAME, \"triggerid=\"+triggerid, ZabbixConfig.CACHE_LIFETIME_EVENTS);\n\t\t\t_endTransaction();\n\t\t}\n\t}\n\n\t/**\n\t * import the newest events\n\t * @throws ClientProtocolException\n\t * @throws IOException\n\t * @throws JSONException\n\t * @throws HttpAuthorizationRequiredException\n\t * @throws NoAPIAccessException\n\t */\n\tpublic void importEvents() throws ClientProtocolException, IOException, JSONException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\tif (!isCached(EventData.TABLE_NAME, null)) {\n\t\t\t_startTransaction();\n\t\t\tzabbixLocalDB.delete(EventData.TABLE_NAME, null, null);\n\t\t\tzabbixLocalDB.delete(TriggerData.TABLE_NAME, null, null);\n\t\t\tzabbixLocalDB.delete(CacheData.TABLE_NAME, CacheData.COLUMN_KIND+\"='\"+EventData.TABLE_NAME+\"'\", null);\n\t\t\tzabbixLocalDB.delete(CacheData.TABLE_NAME, CacheData.COLUMN_KIND+\"='\"+TriggerData.TABLE_NAME+\"'\", null);\n\n\t\t\tint numEvents = ZabbixConfig.EVENTS_GET_LIMIT;\n\n\t\t\tJSONObject params = new JSONObject()\n\t\t\t\t.put(\"output\", \"extend\")\n\t\t\t\t.put(\"limit\", ZabbixConfig.EVENTS_GET_LIMIT)\n\t\t\t\t.put(isVersion2?\"selectHosts\":\"select_hosts\", \"extend\")\n\t\t\t\t.put(isVersion2?\"selectTriggers\":\"select_triggers\", \"extend\")\n\t\t\t\t.put(\"source\", 0)\n\t\t\t\t.put(\"time_from\", (new Date().getTime()/1000) - ZabbixConfig.EVENT_GET_TIME_FROM_SHIFT);\n\t\t\tif (!isVersion2) {\n\t\t\t\t// in Zabbix version <2.0, this is not default\n\t\t\t\tparams.put(\"sortfield\", \"clock\")\n\t\t\t\t\t.put(\"sortorder\", \"DESC\");\n\t\t\t}\n\t\t\tJsonArrayOrObjectReader events = _queryStream(\n\t\t\t\t\t\"event.get\"\n\t\t\t\t\t, params\n\t\t\t);\n\t\t\timportEvents(events, numEvents);\n\t\t\tevents.close();\n\n\t\t\tsetCached(EventData.TABLE_NAME, null, ZabbixConfig.CACHE_LIFETIME_EVENTS);\n\t\t\t_endTransaction();\n\t\t}\n\t}\n\n\t/**\n\t * @param events stream\n\t * @param numEvents if null, no progressbar-update AND only isert, if it does not exist. If !null, progressbar-update AND always insert without checking\n\t * @throws JsonParseException\n\t * @throws IOException\n\t */\n\tprivate void importEvents(JsonArrayOrObjectReader events, Integer numEvents) throws JsonParseException, IOException {\n\t\tint i=0;\n\t\tJsonObjectReader eventReader;\n\t\twhile ((eventReader = events.next()) != null) {\n\t\t\tEventData e = new EventData();\n\t\t\twhile (eventReader.nextValueToken()) {\n\t\t\t\tString propName = eventReader.getCurrentName();\n\t\t\t\tif (propName.equals(\"hosts\")) {\n\t\t\t\t\t// import hosts\n\t\t\t\t\tString hostnames = (String) importHosts(eventReader.getJsonArray(), null)[0];\n\t\t\t\t\t// store hosts namen\n\t\t\t\t\te.set(EventData.COLUMN_HOSTS, hostnames);\n\t\t\t\t} else if (propName.equals(\"triggers\")) {\n\t\t\t\t\t// import triggers\n\t\t\t\t\timportTriggers(eventReader.getJsonArray());\n\t\t\t\t} else if (propName.equals(EventData.COLUMN_EVENTID)) {\n\t\t\t\t\te.set(EventData.COLUMN_EVENTID, Long.parseLong(eventReader.getText()));\n\t\t\t\t} else if (propName.equals(EventData.COLUMN_CLOCK)) {\n\t\t\t\t\te.set(EventData.COLUMN_CLOCK, Integer.parseInt(eventReader.getText()));\n\t\t\t\t} else if (propName.equals(EventData.COLUMN_OBJECTID)) {\n\t\t\t\t\te.set(EventData.COLUMN_OBJECTID, Long.parseLong(eventReader.getText()));\n\t\t\t\t} else if (propName.equals(EventData.COLUMN_ACK)) {\n\t\t\t\t\te.set(EventData.COLUMN_ACK, Integer.parseInt(eventReader.getText()) == 1);\n\t\t\t\t} else if (propName.equals(EventData.COLUMN_VALUE)) {\n\t\t\t\t\te.set(EventData.COLUMN_VALUE, Integer.parseInt(eventReader.getText()));\n\t\t\t\t} else {\n\t\t\t\t\teventReader.nextProperty();\n\t\t\t\t}\n\t\t\t}\n\t\t\t// event is parsed and can be inserted into the db\n\t\t\tif (numEvents == null) {\n\t\t\t\te.insert(zabbixLocalDB, EventData.COLUMN_EVENTID);\n\t\t\t} else {\n\t\t\t\te.insert(zabbixLocalDB);\n\t\t\t\tif (++i % 10 == 0) {\n\t\t\t\t\tshowProgress(i*100/numEvents);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t_commitTransactionIfRecommended();\n\t\t}\n\t}\n\n\t/**\n\t * import graph items\n\t *\n\t * @param graphItems\n\t * @return true, if graphid column has to be updated from -1 to the correct graphid later.\n\t * @throws JsonParseException\n\t * @throws NumberFormatException\n\t * @throws IOException\n\t */\n\tprivate boolean importGraphItems(JsonArrayOrObjectReader graphItems) throws JsonParseException, NumberFormatException, IOException {\n\t\tboolean mustSetGraphid = false;\n\t\tJsonObjectReader graphItemReader;\n\t\twhile ((graphItemReader = graphItems.next()) != null) {\n\t\t\tGraphItemData gi = new GraphItemData();\n\t\t\twhile (graphItemReader.nextValueToken()) {\n\t\t\t\tString propName = graphItemReader.getCurrentName();\n\t\t\t\tif (propName.equals(\"gitemid\")) {\n\t\t\t\t\tgi.set(GraphItemData.COLUMN_GRAPHITEMID, Long.parseLong(graphItemReader.getText()));\n\t\t\t\t} else if (propName.equals(GraphItemData.COLUMN_GRAPHID)) {\n\t\t\t\t\tgi.set(GraphItemData.COLUMN_GRAPHID, Long.parseLong(graphItemReader.getText()));\n\t\t\t\t} else if (propName.equals(GraphItemData.COLUMN_ITEMID)) {\n\t\t\t\t\tgi.set(GraphItemData.COLUMN_ITEMID, Long.parseLong(graphItemReader.getText()));\n\t\t\t\t} else if (propName.equals(GraphItemData.COLUMN_COLOR)) {\n\t\t\t\t\t// hex string => color int\n\t\t\t\t\tgi.set(GraphItemData.COLUMN_COLOR, Color.parseColor(\"#\"+graphItemReader.getText()));\n\t\t\t\t} else {\n\t\t\t\t\tgraphItemReader.nextProperty();\n\t\t\t\t}\n\t\t\t}\n\t\t\t// if graphid-column was not set, this must be done later. temporary graphid=-1\n\t\t\tif (gi.get(GraphItemData.COLUMN_GRAPHID) == null) {\n\t\t\t\tgi.set(GraphItemData.COLUMN_GRAPHID, -1);\n\t\t\t\tmustSetGraphid = true;\n\t\t\t}\n\t\t\tgi.insert(zabbixLocalDB);\n\t\t}\n\t\treturn mustSetGraphid;\n\t}\n\n\tpublic void importGraphsForScreen(long screenid) throws ClientProtocolException, IOException, JSONException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\tif (!isCached(GraphData.TABLE_NAME, \"screenid=\"+screenid)) {\n\t\t\t_startTransaction();\n\n\t\t\t// collect all graphids\n\t\t\tSet<Long> graphids = new HashSet<Long>();\n\t\t\tCursor cur = zabbixLocalDB.query(ScreenItemData.TABLE_NAME, null, ScreenItemData.COLUMN_SCREENID+\"=\"+screenid, null, null, null, null);\n\t\t\twhile (cur.moveToNext()) {\n\t\t\t\tgraphids.add(cur.getLong(cur.getColumnIndex(ScreenItemData.COLUMN_RESOURCEID)));\n\t\t\t}\n\n\t\t\t// delete old graphs\n\t\t\tString str_graphids = graphids.toString().replace(\"[\", \"\").replace(\"]\", \"\");\n\t\t\tif (str_graphids.length()>0) {\n\t\t\t\tzabbixLocalDB.delete(GraphData.TABLE_NAME, GraphData.COLUMN_GRAPHID+\" IN (\"+str_graphids+\")\", null);\n\t\t\t\tzabbixLocalDB.delete(GraphItemData.TABLE_NAME, GraphItemData.COLUMN_GRAPHID+\" IN (\"+str_graphids+\")\", null);\n\t\t\t}\n\t\t\tzabbixLocalDB.delete(CacheData.TABLE_NAME, CacheData.COLUMN_KIND+\"='\"+GraphData.TABLE_NAME+\"' AND \"+CacheData.COLUMN_FILTER+\"='screenid=\"+screenid+'\\'', null);\n\n\t\t\tJsonArrayOrObjectReader graphs = _queryStream(\n\t\t\t\t\t\"graph.get\"\n\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t\t.put(isVersion2?\"selectGraphItems\":\"select_graph_items\", \"extend\")\n\t\t\t\t\t\t.put(isVersion2?\"selectItems\":\"select_items\", \"extend\")\n\t\t\t\t\t\t.put(\"output\", \"extend\")\n\t\t\t\t\t\t.put(\"graphids\", new JSONArray(graphids))\n\t\t\t);\n\t\t\tJsonObjectReader graphReader;\n\t\t\twhile ((graphReader = graphs.next()) != null) {\n\t\t\t\tboolean mustSetGraphid = false;\n\t\t\t\tGraphData scr = new GraphData();\n\t\t\t\twhile (graphReader.nextValueToken()) {\n\t\t\t\t\tString propName = graphReader.getCurrentName();\n\t\t\t\t\tif (propName.equals(GraphData.COLUMN_GRAPHID)) {\n\t\t\t\t\t\tscr.set(GraphData.COLUMN_GRAPHID, Long.parseLong(graphReader.getText()));\n\t\t\t\t\t} else if (propName.equals(GraphData.COLUMN_NAME)) {\n\t\t\t\t\t\tscr.set(GraphData.COLUMN_NAME, graphReader.getText());\n\t\t\t\t\t} else if (propName.equals(\"gitems\")) {\n\t\t\t\t\t\tmustSetGraphid = importGraphItems(graphReader.getJsonArray());\n\t\t\t\t\t} else if (propName.equals(\"items\")) {\n\t\t\t\t\t\timportItems(graphReader.getJsonArray(), 0, true);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tgraphReader.nextProperty();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tscr.insert(zabbixLocalDB);\n\t\t\t\tif (mustSetGraphid) {\n\t\t\t\t\tContentValues values = new ContentValues(1);\n\t\t\t\t\tvalues.put(GraphItemData.COLUMN_GRAPHID, (Long) scr.get(GraphData.COLUMN_GRAPHID));\n\t\t\t\t\tzabbixLocalDB.update(\n\t\t\t\t\t\t\tGraphItemData.TABLE_NAME\n\t\t\t\t\t\t\t, values\n\t\t\t\t\t\t\t, GraphItemData.COLUMN_GRAPHID+\"=-1\"\n\t\t\t\t\t\t\t, null);\n\t\t\t\t}\n\t\t\t}\n\t\t\tgraphs.close();\n\n\t\t\tsetCached(GraphData.TABLE_NAME, \"screenid=\"+screenid, ZabbixConfig.CACHE_LIFETIME_SCREENS);\n\t\t\t_endTransaction();\n\t\t}\n\t}\n\n\tpublic void importHistoryDetails(String itemid) throws ClientProtocolException, IOException, JSONException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\tif (!isCached(HistoryDetailData.TABLE_NAME, itemid)) {\n\t\t\t_startTransaction();\n\t\t\tzabbixLocalDB.delete(HistoryDetailData.TABLE_NAME, HistoryDetailData.COLUMN_ITEMID+\"=\"+itemid, null);\n\n\t\t\t// the past 2 hours\n\t\t\tlong time_till = new Date().getTime() / 1000;\n\t\t\tlong time_from = time_till - ZabbixConfig.HISTORY_GET_TIME_FROM_SHIFT;\n\n\t\t\t// Workaround: historydetails only comes if you use the correct \"history\"-parameter.\n\t\t\t// this parameter can be \"null\" or a number 0-4. Because we don't know when to use which,\n\t\t\t// we try them all, until we get results.\n\t\t\tInteger historytype = null;\n\t\t\tJSONObject result = _queryBuffer(\n\t\t\t\t\t\"history.get\"\n\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t\t.put(\"limit\", 1)\n\t\t\t\t\t\t.put(\"history\", historytype) // for integer ?\n\t\t\t\t\t\t.put(\"itemids\", new JSONArray().put(itemid))\n\t\t\t\t\t\t.put(\"time_from\", time_from)\n\t\t\t);\n\n\t\t\tJSONArray testHistorydetails = result.getJSONArray(\"result\");\n\t\t\tif (testHistorydetails.length() == 0) {\n\t\t\t\thistorytype = -1;\n\t\t\t\twhile (testHistorydetails.length() == 0 && ++historytype <= 4) {\n\t\t\t\t\t// if we get an empty array, we try another history parameter\n\t\t\t\t\tresult = _queryBuffer(\n\t\t\t\t\t\t\t\"history.get\"\n\t\t\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t\t\t\t.put(\"output\", \"extend\")\n\t\t\t\t\t\t\t\t.put(\"limit\", 1)\n\t\t\t\t\t\t\t\t.put(\"history\", historytype)\n\t\t\t\t\t\t\t\t.put(\"itemids\", new JSONArray().put(itemid))\n\t\t\t\t\t\t\t\t.put(\"time_from\", time_from)\n\t\t\t\t\t);\n\t\t\t\t\ttestHistorydetails = result.getJSONArray(\"result\");\n\t\t\t\t}\n\t\t\t}\n\t\t\t// correct historytype found and there are data\n\t\t\tif (testHistorydetails.length() > 0) {\n\t\t\t\t// count of the entries cannot be detected (zabbix bug),\n\t\t\t\t// so we use a fiction\n\t\t\t\tint numDetails = 400;\n\t\t\t\tint curI=0;\n\t\t\t\tJsonArrayOrObjectReader historydetails = _queryStream(\n\t\t\t\t\t\t\"history.get\"\n\t\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t\t\t.put(\"output\", \"extend\")\n\t\t\t\t\t\t\t.put(\"limit\", ZabbixConfig.HISTORY_GET_LIMIT)\n\t\t\t\t\t\t\t.put(\"history\", historytype)\n\t\t\t\t\t\t\t.put(\"itemids\", new JSONArray().put(itemid))\n\t\t\t\t\t\t\t.put(\"time_from\", time_from)\n\t\t\t\t\t\t\t.put(\"sortfield\", \"clock\")\n\t\t\t\t\t\t\t.put(\"sortorder\", \"DESC\")\n\t\t\t\t);\n\t\t\t\tJsonObjectReader historydetail;\n\t\t\t\ttry {\n\t\t\t\t\tint selI = 0;\n\t\t\t\t\twhile ((historydetail = historydetails.next()) != null) {\n\t\t\t\t\t\t// save only every 20th\n\t\t\t\t\t\tif (selI++ % 20 != 0) {\n\t\t\t\t\t\t\twhile (historydetail.nextValueToken()) {\n\t\t\t\t\t\t\t\thistorydetail.nextProperty();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tHistoryDetailData h = new HistoryDetailData();\n\t\t\t\t\t\twhile (historydetail.nextValueToken()) {\n\t\t\t\t\t\t\tString propName = historydetail.getCurrentName();\n\t\t\t\t\t\t\tif (propName.equals(HistoryDetailData.COLUMN_CLOCK)) {\n\t\t\t\t\t\t\t\th.set(HistoryDetailData.COLUMN_CLOCK, Integer.parseInt(historydetail.getText()));\n\t\t\t\t\t\t\t} else if (propName.equals(HistoryDetailData.COLUMN_ITEMID)) {\n\t\t\t\t\t\t\t\th.set(HistoryDetailData.COLUMN_ITEMID, Long.parseLong(historydetail.getText()));\n\t\t\t\t\t\t\t} else if (propName.equals(HistoryDetailData.COLUMN_VALUE)) {\n\t\t\t\t\t\t\t\th.set(HistoryDetailData.COLUMN_VALUE, Double.parseDouble(historydetail.getText()));\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\thistorydetail.nextProperty();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\th.insert(zabbixLocalDB);\n\t\t\t\t\t\tif (++curI % 10 == 0) {\n\t\t\t\t\t\t\tshowProgress(Math.min(curI*100/numDetails, 84));\n\t\t\t\t\t\t}\n\t\t\t\t\t\t_commitTransactionIfRecommended();\n\t\t\t\t\t}\n\t\t\t\t} catch (NumberFormatException e) {\n\t\t\t\t\t// data are unuseable, e.g. because it's a string\n\t\t\t\t}\n\t\t\t\thistorydetails.close();\n\t\t\t}\n\t\t\tsetCached(HistoryDetailData.TABLE_NAME, itemid, ZabbixConfig.CACHE_LIFETIME_HISTORY_DETAILS);\n\t\t\t_endTransaction();\n\t\t}\n\t}\n\n\tprivate long importHostGroups(JsonArrayOrObjectReader jsonArray) throws JsonParseException, IOException {\n\t\tlong firstHostGroupId = -1;\n\t\tJsonObjectReader hostReader;\n\t\twhile ((hostReader = jsonArray.next()) != null) {\n\t\t\tHostGroupData h = new HostGroupData();\n\t\t\twhile (hostReader.nextValueToken()) {\n\t\t\t\tString propName = hostReader.getCurrentName();\n\t\t\t\tif (propName.equals(HostGroupData.COLUMN_GROUPID)) {\n\t\t\t\t\tlong id = Long.parseLong(hostReader.getText());\n\t\t\t\t\tif (firstHostGroupId == -1) firstHostGroupId = id;\n\t\t\t\t\th.set(HostGroupData.COLUMN_GROUPID, id);\n\t\t\t\t} else if (propName.equals(HostGroupData.COLUMN_NAME)) {\n\t\t\t\t\th.set(HostGroupData.COLUMN_NAME, hostReader.getText());\n\t\t\t\t} else {\n\t\t\t\t\thostReader.nextProperty();\n\t\t\t\t}\n\t\t\t}\n\t\t\th.insert(zabbixLocalDB, HostGroupData.COLUMN_GROUPID);\n\t\t\t_commitTransactionIfRecommended();\n\t\t}\n\n\t\treturn firstHostGroupId;\n\t}\n\n\t/**\n\t * import the hosts from stream\n\t * @param jsonArray stream\n\t * @param numHosts count of hosts for progressbar. null if unknown.\n\t * @return Object[] {(String) comma-separated all Hostnames, (Long) 1. host id}\n\t * @throws JsonParseException\n\t * @throws IOException\n\t */\n\tprivate Object[] importHosts(JsonArrayOrObjectReader jsonArray, Integer numHosts) throws JsonParseException, IOException {\n\t\tList<String> hostnames = new ArrayList<String>();\n\t\tlong firstHostId = -1;\n\t\tJsonObjectReader hostReader;\n\t\tint i=0;\n\t\twhile ((hostReader = jsonArray.next()) != null) {\n\t\t\tHostData h = new HostData();\n\t\t\twhile (hostReader.nextValueToken()) {\n\t\t\t\tString propName = hostReader.getCurrentName();\n\t\t\t\tif (propName.equals(HostData.COLUMN_HOSTID)) {\n\t\t\t\t\th.set(HostData.COLUMN_HOSTID, Long.parseLong(hostReader.getText()));\n\t\t\t\t\tif (firstHostId == -1) {\n\t\t\t\t\t\tfirstHostId = (Long) h.get(HostData.COLUMN_HOSTID);\n\t\t\t\t\t}\n\t\t\t\t} else if (propName.equals(HostData.COLUMN_HOST)) {\n\t\t\t\t\tString host = hostReader.getText();\n\t\t\t\t\thostnames.add(host);\n\t\t\t\t\th.set(HostData.COLUMN_HOST, host);\n\t\t\t\t} else if (propName.equals(\"groups\")) {\n\t\t\t\t\tlong groupid = importHostGroups(hostReader.getJsonArray());\n\t\t\t\t\tif (groupid != -1) {\n\t\t\t\t\t\th.set(HostData.COLUMN_GROUPID, groupid);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\thostReader.nextProperty();\n\t\t\t\t}\n\t\t\t}\n\t\t\t// host without group will get group #0 (other)\n\t\t\tif (h.get(HostData.COLUMN_GROUPID) == null) {\n\t\t\t\th.set(HostData.COLUMN_GROUPID, 0);\n\t\t\t\t// create \"other\" hostgroup #1\n\t\t\t\tHostGroupData hg = new HostGroupData();\n\t\t\t\thg.set(HostGroupData.COLUMN_GROUPID, 0);\n\t\t\t\thg.set(HostGroupData.COLUMN_NAME, \"- \"+context.getResources().getString(R.string.other)+\" -\");\n\t\t\t\thg.insert(zabbixLocalDB, HostGroupData.COLUMN_GROUPID);\n\t\t\t}\n\t\t\th.insert(zabbixLocalDB, HostData.COLUMN_HOSTID);\n\t\t\tif (numHosts != null && ++i % 10 == 0) {\n\t\t\t\tshowProgress(i*100/numHosts);\n\t\t\t}\n\t\t\t_commitTransactionIfRecommended();\n\t\t}\n\n\t\treturn new Object[] {hostnames.toString().replaceAll(\"[\\\\[\\\\]]\", \"\"), firstHostId};\n\t}\n\n\tpublic void importHostsAndGroups() throws JSONException, IOException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\tif (!isCached(HostData.TABLE_NAME, null)) {\n\t\t\t_startTransaction();\n\t\t\tzabbixLocalDB.delete(HostData.TABLE_NAME, null, null);\n\t\t\tzabbixLocalDB.delete(HostGroupData.TABLE_NAME, null, null);\n\n\t\t\t// get count of hosts\n\t\t\tJSONObject result = _queryBuffer(\n\t\t\t\t\t\"host.get\"\n\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t\t.put(\"countOutput\", 1)\n\t\t\t\t\t\t.put(\"limit\", ZabbixConfig.HOST_GET_LIMIT)\n\t\t\t\t\t\t.put(isVersion2?\"selectGroups\":\"select_groups\", \"extend\")\n\t\t\t);\n\t\t\tint numHosts = result.getInt(\"result\");\n\t\t\tJsonArrayOrObjectReader hosts = _queryStream(\n\t\t\t\t\t\"host.get\"\n\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t\t.put(\"output\", \"extend\")\n\t\t\t\t\t\t.put(\"limit\", ZabbixConfig.HOST_GET_LIMIT)\n\t\t\t\t\t\t.put(isVersion2?\"selectGroups\":\"select_groups\", \"extend\")\n\t\t\t);\n\t\t\timportHosts(hosts, numHosts);\n\t\t\thosts.close();\n\n\t\t\tsetCached(HostData.TABLE_NAME, null, ZabbixConfig.CACHE_LIFETIME_HOSTS);\n\t\t\t_endTransaction();\n\t\t}\n\t}\n\n\t/**\n\t * import items from stream.\n\t * @param items stream\n\t * @param numItems count for progressbar, if 0 no progressbarupdate\n\t * @param checkBeforeInsert if true, only make an insert if item does not exist\n\t * @return the first item id\n\t * @throws JsonParseException\n\t * @throws IOException\n\t */\n\tprivate long importItems(JsonArrayOrObjectReader items, int numItems, boolean checkBeforeInsert) throws JsonParseException, IOException {\n\t\tlong firstItemId = -1;\n\t\tint curI=0;\n\t\tJsonObjectReader itemReader;\n\t\twhile ((itemReader = items.next()) != null) {\n\t\t\tItemData i = new ItemData();\n\t\t\tString key_ = null;\n\t\t\twhile (itemReader.nextValueToken()) {\n\t\t\t\tString propName = itemReader.getCurrentName();\n\t\t\t\tif (propName.equals(ItemData.COLUMN_ITEMID)) {\n\t\t\t\t\ti.set(ItemData.COLUMN_ITEMID, Long.parseLong(itemReader.getText()));\n\t\t\t\t\tif (firstItemId == -1) {\n\t\t\t\t\t\tfirstItemId = (Long) i.get(ItemData.COLUMN_ITEMID);\n\t\t\t\t\t}\n\t\t\t\t} else if (propName.equals(ItemData.COLUMN_HOSTID)) {\n\t\t\t\t\ti.set(ItemData.COLUMN_HOSTID, Long.parseLong(itemReader.getText()));\n\t\t\t\t} else if (propName.equals(ItemData.COLUMN_DESCRIPTION) || propName.equals(\"name\")) {\n\t\t\t\t\t// since zabbix 2.x is the name of the item \"name\"\n\t\t\t\t\t// before zabbix 2.x the name field was \"description\"\n\t\t\t\t\tif (isVersion2 && propName.equals(\"name\")) {\n\t\t\t\t\t\ti.set(ItemData.COLUMN_DESCRIPTION, itemReader.getText());\n\t\t\t\t\t} else if (!isVersion2) {\n\t\t\t\t\t\ti.set(ItemData.COLUMN_DESCRIPTION, itemReader.getText());\n\t\t\t\t\t}\n\t\t\t\t} else if (propName.equals(ItemData.COLUMN_LASTCLOCK)) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\ti.set(ItemData.COLUMN_LASTCLOCK, Integer.parseInt(itemReader.getText()));\n\t\t\t\t\t} catch (NumberFormatException e) {\n\t\t\t\t\t\t// ignore\n\t\t\t\t\t}\n\t\t\t\t} else if (propName.equals(ItemData.COLUMN_LASTVALUE)) {\n\t\t\t\t\ti.set(ItemData.COLUMN_LASTVALUE, itemReader.getText());\n\t\t\t\t} else if (propName.equals(ItemData.COLUMN_UNITS)) {\n\t\t\t\t\ti.set(ItemData.COLUMN_UNITS, itemReader.getText());\n\t\t\t\t} else if (propName.equals(\"key_\")) {\n\t\t\t\t\tkey_ = itemReader.getText();\n\t\t\t\t} else if (propName.equals(\"applications\")) {\n\t\t\t\t\t// at this point itemid and hostid is unknown\n\t\t\t\t\t// because of this, all applicationrelations will be saved with itemid and hostid \"-1\".\n\t\t\t\t\t// later the IDs will be replaced with the correct\n\t\t\t\t\timportApplications(-1, -1, itemReader.getJsonArray());\n\t\t\t\t} else {\n\t\t\t\t\titemReader.nextProperty();\n\t\t\t\t}\n\t\t\t}\n\t\t\t// if applicable replace placeholder\n\t\t\tString description = (String) i.get(ItemData.COLUMN_DESCRIPTION);\n\t\t\tif (description.matches(\".*\\\\$[0-9].*\")) {\n\t\t\t\tif (key_ != null && key_.indexOf('[') != -1) {\n\t\t\t\t\tString[] keys = key_.substring(key_.indexOf('[')+1, key_.indexOf(']')).split(\",\");\n\t\t\t\t\tfor (int ix=0; ix<keys.length; ix++) {\n\t\t\t\t\t\tdescription = description.replace(\"$\"+(ix+1), keys[ix]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\ti.set(ItemData.COLUMN_DESCRIPTION, description);\n\t\t\tif (checkBeforeInsert) {\n\t\t\t\ti.insert(zabbixLocalDB, ItemData.COLUMN_ITEMID);\n\t\t\t} else {\n\t\t\t\ti.insert(zabbixLocalDB);\n\t\t\t}\n\t\t\tif (numItems > 0 && ++curI % 10 == 0) {\n\t\t\t\tshowProgress(curI*100/numItems);\n\t\t\t}\n\n\t\t\t// now the \"-1\" IDs of applicationsrelation will be replaced with the correct itemID\n\t\t\tContentValues values = new ContentValues(2);\n\t\t\tvalues.put(ApplicationItemRelationData.COLUMN_ITEMID, (Long) i.get(ItemData.COLUMN_ITEMID));\n\t\t\tvalues.put(ApplicationItemRelationData.COLUMN_HOSTID, (Long) i.get(ItemData.COLUMN_HOSTID));\n\t\t\tzabbixLocalDB.update(\n\t\t\t\t\tApplicationItemRelationData.TABLE_NAME\n\t\t\t\t\t, values\n\t\t\t\t\t, ApplicationItemRelationData.COLUMN_ITEMID+\"=-1\"\n\t\t\t\t\t, null\n\t\t\t);\n\t\t}\n\t\treturn firstItemId;\n\t}\n\n\tpublic void importItems(long hostid) throws JSONException, IOException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\tif (!isCached(ItemData.TABLE_NAME, \"hostid=\"+hostid)) {\n\t\t\t_startTransaction();\n\t\t\tzabbixLocalDB.delete(ItemData.TABLE_NAME, ItemData.COLUMN_HOSTID+\"=\"+hostid, null);\n\t\t\tzabbixLocalDB.delete(ApplicationItemRelationData.TABLE_NAME, ApplicationItemRelationData.COLUMN_HOSTID+\"=\"+hostid, null);\n\n\t\t\t// count of items\n\t\t\tJSONObject result = _queryBuffer(\n\t\t\t\t\t\"item.get\"\n\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t.put(\"output\", \"extend\")\n\t\t\t\t\t.put(\"countOutput\", 1)\n\t\t\t\t\t.put(\"limit\", ZabbixConfig.ITEM_GET_LIMIT)\n\t\t\t\t\t.put(\"hostids\", new JSONArray().put(hostid))\n\t\t\t);\n\t\t\tint numItems = result.getInt(\"result\");\n\t\t\tJsonArrayOrObjectReader items = _queryStream(\n\t\t\t\t\t\"item.get\"\n\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t\t.put(\"output\", \"extend\")\n\t\t\t\t\t\t.put(\"limit\", ZabbixConfig.ITEM_GET_LIMIT)\n\t\t\t\t\t\t.put(isVersion2?\"selectApplications\":\"select_applications\", \"extend\")\n\t\t\t\t\t\t.put(\"hostids\", new JSONArray().put(hostid))\n\t\t\t);\n\t\t\timportItems(items, numItems, false);\n\t\t\titems.close();\n\n\t\t\tsetCached(ItemData.TABLE_NAME, \"hostid=\"+hostid, ZabbixConfig.CACHE_LIFETIME_ITEMS);\n\t\t\t_endTransaction();\n\t\t}\n\t}\n\n\tprivate void importScreenItems(JsonArrayOrObjectReader screenItems) throws JsonParseException, NumberFormatException, IOException {\n\t\tJsonObjectReader screenItemReader;\n\t\twhile ((screenItemReader = screenItems.next()) != null) {\n\t\t\tScreenItemData si = new ScreenItemData();\n\t\t\tint resourcetype = -1;\n\t\t\twhile (screenItemReader.nextValueToken()) {\n\t\t\t\tString propName = screenItemReader.getCurrentName();\n\t\t\t\tif (propName.equals(ScreenItemData.COLUMN_SCREENITEMID)) {\n\t\t\t\t\tsi.set(ScreenItemData.COLUMN_SCREENITEMID, Long.parseLong(screenItemReader.getText()));\n\t\t\t\t} else if (propName.equals(ScreenItemData.COLUMN_SCREENID)) {\n\t\t\t\t\tsi.set(ScreenItemData.COLUMN_SCREENID, Long.parseLong(screenItemReader.getText()));\n\t\t\t\t} else if (propName.equals(ScreenItemData.COLUMN_RESOURCEID)) {\n\t\t\t\t\tsi.set(ScreenItemData.COLUMN_RESOURCEID, Long.parseLong(screenItemReader.getText()));\n\t\t\t\t} else if (propName.equals(\"resourcetype\")) {\n\t\t\t\t\tresourcetype = Integer.parseInt(screenItemReader.getText());\n\t\t\t\t} else {\n\t\t\t\t\tscreenItemReader.nextProperty();\n\t\t\t\t}\n\t\t\t}\n\t\t\t// only resouretype == 0\n\t\t\tif (resourcetype == 0) {\n\t\t\t\tsi.insert(zabbixLocalDB);\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic void importScreens() throws ClientProtocolException, IOException, JSONException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\tif (!isCached(ScreenData.TABLE_NAME, null)) {\n\t\t\t_startTransaction();\n\n\t\t\tzabbixLocalDB.delete(ScreenData.TABLE_NAME, null, null);\n\t\t\tzabbixLocalDB.delete(ScreenItemData.TABLE_NAME, null, null);\n\t\t\tzabbixLocalDB.delete(CacheData.TABLE_NAME, CacheData.COLUMN_KIND+\"='\"+ScreenData.TABLE_NAME+\"'\", null);\n\n\t\t\tJsonArrayOrObjectReader screens = _queryStream(\n\t\t\t\t\t(isVersion2?\"s\":\"S\")+\"creen.get\"\n\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t\t.put(\"output\", \"extend\")\n\t\t\t\t\t\t.put(isVersion2?\"selectScreenItems\":\"select_screenitems\", \"extend\")\n\t\t\t);\n\t\t\tJsonObjectReader screenReader;\n\t\t\twhile ((screenReader = screens.next()) != null) {\n\t\t\t\tScreenData scr = new ScreenData();\n\t\t\t\twhile (screenReader.nextValueToken()) {\n\t\t\t\t\tString propName = screenReader.getCurrentName();\n\t\t\t\t\tif (propName.equals(ScreenData.COLUMN_SCREENID)) {\n\t\t\t\t\t\tscr.set(ScreenData.COLUMN_SCREENID, Long.parseLong(screenReader.getText()));\n\t\t\t\t\t} else if (propName.equals(ScreenData.COLUMN_NAME)) {\n\t\t\t\t\t\tscr.set(ScreenData.COLUMN_NAME, screenReader.getText());\n\t\t\t\t\t} else if (propName.equals(\"screenitems\")) {\n\t\t\t\t\t\timportScreenItems(screenReader.getJsonArray());\n\t\t\t\t\t} else {\n\t\t\t\t\t\tscreenReader.nextProperty();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tscr.insert(zabbixLocalDB);\n\t\t\t}\n\t\t\tscreens.close();\n\n\t\t\tsetCached(ScreenData.TABLE_NAME, null, ZabbixConfig.CACHE_LIFETIME_SCREENS);\n\t\t\t_endTransaction();\n\t\t}\n\t}\n\n\tpublic void importTrigger(String triggerid) throws JSONException, IOException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\tif (!isCached(TriggerData.TABLE_NAME, \"triggerid=\"+triggerid)) {\n\t\t\t_startTransaction();\n\n\t\t\tJsonArrayOrObjectReader trigger = _queryStream(\n\t\t\t\t\t\"trigger.get\"\n\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t\t.put(\"output\", \"extend\")\n\t\t\t\t\t\t.put(isVersion2?\"selectHosts\":\"select_hosts\", \"extend\")\n\t\t\t\t\t\t.put(\"triggerids\", new JSONArray().put(triggerid))\n\t\t\t);\n\t\t\timportTriggers(trigger);\n\t\t\ttrigger.close();\n\n\t\t\tsetCached(TriggerData.TABLE_NAME, \"triggerid=\"+triggerid, ZabbixConfig.CACHE_LIFETIME_TRIGGERS);\n\t\t\t_endTransaction();\n\t\t}\n\t}\n\n\t/**\n\t * importiert ein trigger mit dem attribute itemid. ggf. wird der trigger zuerst gelöscht und neu angelegt.\n\t * imports a trigger with the attribute itemid. if trigger already exists, it will be removed first.\n\t * @param triggerid\n\t * @throws JSONException\n\t * @throws IOException\n\t * @throws HttpAuthorizationRequiredException\n\t * @throws NoAPIAccessException\n\t */\n\tpublic void importTriggerColumnItemId(String triggerid) throws JSONException, IOException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\t// check if the trigger exists and if the itemid was set\n\t\tboolean mustImport = true;\n\t\tCursor cur = zabbixLocalDB.query(TriggerData.TABLE_NAME, null, TriggerData.COLUMN_TRIGGERID+\"=\"+triggerid, null, null, null, null);\n\t\tif (cur.moveToFirst()) {\n\t\t\tlong itemid = 0;\n\t\t\ttry {\n\t\t\t\titemid = cur.getLong(cur.getColumnIndex(TriggerData.COLUMN_ITEMID));\n\t\t\t} catch (Exception e) {\n\t\t\t\t// no itemid\n\t\t\t}\n\t\t\tif (itemid > 0) {\n\t\t\t\tmustImport = false;\n\t\t\t}\n\t\t}\n\t\tif (mustImport) {\n\t\t\t_startTransaction();\n\t\t\tzabbixLocalDB.delete(TriggerData.TABLE_NAME, TriggerData.COLUMN_TRIGGERID+\"=\"+triggerid, null);\n\t\t\tJsonArrayOrObjectReader triggers = _queryStream(\n\t\t\t\t\t\"trigger.get\"\n\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t\t.put(\"output\", \"extend\")\n\t\t\t\t\t\t.put(isVersion2?\"selectHosts\":\"select_hosts\", \"extend\")\n\t\t\t\t\t\t.put(isVersion2?\"selectGroups\":\"select_groups\", \"extend\")\n\t\t\t\t\t\t.put(isVersion2?\"selectItems\":\"select_items\", \"extend\")\n\t\t\t\t\t\t.put(\"triggerids\", new JSONArray().put(triggerid))\n\t\t\t\t\t\t.put(\"limit\", 1)\n\t\t\t);\n\t\t\timportTriggers(triggers);\n\t\t\t_endTransaction();\n\t\t}\n\t}\n\n\t/**\n\t * imports the \"warning\"-triggers\n\t * @throws JSONException\n\t * @throws IOException\n\t * @throws HttpAuthorizationRequiredException\n\t * @throws NoAPIAccessException\n\t */\n\tpublic void importTriggers() throws JSONException, IOException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\tif (!isCached(TriggerData.TABLE_NAME, null)) {\n\t\t\t// clear triggers\n\t\t\tzabbixLocalDB.delete(TriggerData.TABLE_NAME, null, null);\n\n\t\t\t_startTransaction();\n\n\t\t\tlong min = (new Date().getTime()/1000)-ZabbixConfig.STATUS_SHOW_TRIGGER_TIME;\n\t\t\tJsonArrayOrObjectReader triggers = _queryStream(\n\t\t\t\t\t\"trigger.get\"\n\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t\t.put(\"output\", \"extend\")\n\t\t\t\t\t\t.put(\"sortfield\", \"lastchange\")\n\t\t\t\t\t\t.put(\"sortorder\", \"desc\")\n\t\t\t\t\t\t.put(isVersion2?\"selectHosts\":\"select_hosts\", \"extend\")\n\t\t\t\t\t\t.put(isVersion2?\"selectGroups\":\"select_groups\", \"extend\")\n\t\t\t\t\t\t.put(isVersion2?\"selectItems\":\"select_items\", \"extend\")\n\t\t\t\t\t\t.put(\"lastChangeSince\", min)\n\t\t\t\t\t\t.put(\"only_true\", \"1\")\n\t\t\t\t\t\t.put(\"limit\", ZabbixConfig.TRIGGER_GET_LIMIT)\n\t\t\t\t\t\t.put(\"expandDescription\", true)\n\t\t\t);\n\t\t\timportTriggers(triggers);\n\t\t\ttriggers.close();\n\n\t\t\tsetCached(TriggerData.TABLE_NAME, null, ZabbixConfig.CACHE_LIFETIME_TRIGGERS);\n\t\t\t_endTransaction();\n\t\t}\n\t}\n\n\tprivate void importTriggers(JsonArrayOrObjectReader jsonArray) throws JsonParseException, IOException {\n\t\tJsonObjectReader triggerReader;\n\t\twhile ((triggerReader = jsonArray.next()) != null) {\n\t\t\tTriggerData t = new TriggerData();\n\t\t\twhile (triggerReader.nextValueToken()) {\n\t\t\t\tString propName = triggerReader.getCurrentName();\n\t\t\t\tif (propName.equals(TriggerData.COLUMN_TRIGGERID)) {\n\t\t\t\t\tt.set(TriggerData.COLUMN_TRIGGERID, Long.parseLong(triggerReader.getText()));\n\t\t\t\t} else if (propName.equals(TriggerData.COLUMN_COMMENTS)) {\n\t\t\t\t\tt.set(TriggerData.COLUMN_COMMENTS, triggerReader.getText());\n\t\t\t\t} else if (propName.equals(TriggerData.COLUMN_DESCRIPTION)) {\n\t\t\t\t\tt.set(TriggerData.COLUMN_DESCRIPTION, triggerReader.getText());\n\t\t\t\t} else if (propName.equals(TriggerData.COLUMN_EXPRESSION)) {\n\t\t\t\t\tt.set(TriggerData.COLUMN_EXPRESSION, triggerReader.getText());\n\t\t\t\t} else if (propName.equals(TriggerData.COLUMN_LASTCHANGE)) {\n\t\t\t\t\tt.set(TriggerData.COLUMN_LASTCHANGE, Integer.parseInt(triggerReader.getText()));\n\t\t\t\t} else if (propName.equals(TriggerData.COLUMN_PRIORITY)) {\n\t\t\t\t\tt.set(TriggerData.COLUMN_PRIORITY, Integer.parseInt(triggerReader.getText()));\n\t\t\t\t} else if (propName.equals(TriggerData.COLUMN_STATUS)) {\n\t\t\t\t\tt.set(TriggerData.COLUMN_STATUS, Integer.parseInt(triggerReader.getText()));\n\t\t\t\t} else if (propName.equals(TriggerData.COLUMN_VALUE)) {\n\t\t\t\t\tt.set(TriggerData.COLUMN_VALUE, Integer.parseInt(triggerReader.getText()));\n\t\t\t\t} else if (propName.equals(TriggerData.COLUMN_URL)) {\n\t\t\t\t\tt.set(TriggerData.COLUMN_URL, triggerReader.getText());\n\t\t\t\t} else if (propName.equals(\"hosts\")) {\n\t\t\t\t\tObject[] hostsCache = importHosts(triggerReader.getJsonArray(), null);\n\t\t\t\t\tt.set(TriggerData.COLUMN_HOSTS, hostsCache[0]);\n\t\t\t\t\tt.set(TriggerData.COLUMN_HOSTID, hostsCache[1]);\n\t\t\t\t} else if (propName.equals(\"groups\")) {\n\t\t\t\t\timportHostGroups(triggerReader.getJsonArray());\n\t\t\t\t} else if (propName.equals(\"items\")) {\n\t\t\t\t\t// store the first item id\n\t\t\t\t\tt.set(TriggerData.COLUMN_ITEMID, importItems(triggerReader.getJsonArray(), 1, true));\n\t\t\t\t} else {\n\t\t\t\t\ttriggerReader.nextProperty();\n\t\t\t\t}\n\t\t\t}\n\t\t\tt.insert(zabbixLocalDB, TriggerData.COLUMN_TRIGGERID);\n\t\t\t_commitTransactionIfRecommended();\n\t\t}\n\t}\n\n\tpublic void importTriggersByItemId(String itemid) throws JSONException, IOException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\tif (!isCached(TriggerData.TABLE_NAME, \"itemid=\"+itemid)) {\n\t\t\t_startTransaction();\n\t\t\tzabbixLocalDB.delete(TriggerData.TABLE_NAME, TriggerData.COLUMN_ITEMID+\"=\"+itemid, null);\n\t\t\tJsonArrayOrObjectReader triggers = _queryStream(\n\t\t\t\t\t\"trigger.get\"\n\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t\t.put(\"output\", \"extend\")\n\t\t\t\t\t\t.put(isVersion2?\"selectHosts\":\"select_hosts\", \"extend\")\n\t\t\t\t\t\t.put(isVersion2?\"selectGroups\":\"select_groups\", \"extend\")\n\t\t\t\t\t\t.put(isVersion2?\"selectItems\":\"select_items\", \"extend\")\n\t\t\t\t\t\t.put(\"itemids\", new JSONArray().put(itemid))\n\t\t\t\t\t\t.put(\"limit\", 1)\n\t\t\t\t\t\t.put(\"sortfield\", \"lastchange\")\n\t\t\t\t\t\t.put(\"sortorder\", \"DESC\")\n\t\t\t);\n\t\t\timportTriggers(triggers);\n\t\t\tsetCached(TriggerData.TABLE_NAME, \"itemid=\"+itemid, ZabbixConfig.CACHE_LIFETIME_TRIGGERS);\n\t\t\t_endTransaction();\n\t\t}\n\t}\n\n\tpublic boolean isCached(String kind, String filter) {\n\t\tSQLiteQueryBuilder sqlBuilder = new SQLiteQueryBuilder();\n\t\tsqlBuilder.setTables(CacheData.TABLE_NAME);\n\t\tsqlBuilder.appendWhere(CacheData.COLUMN_KIND+\"='\"+kind+\"' AND \");\n\t\tsqlBuilder.appendWhere(CacheData.COLUMN_FILTER+\n\t\t\t\t(filter==null?\" IS NULL\":\"='\"+filter+\"'\")\n\t\t);\n\t\tsqlBuilder.appendWhere(\" AND \"+CacheData.COLUMN_EXPIRE_DATE+\">\"+new Date().getTime()/1000);\n\t\tCursor cur = sqlBuilder.query(\n\t\t\tzabbixLocalDB,\n\t\t\tnull,\n\t\t\tnull,\n\t\t\tnull,\n\t\t\tnull,\n\t\t\tnull,\n\t\t\tnull\n\t\t);\n\t\tLog.i(\"ZabbixContentProvider\", \"isCached \"+kind+\"//\"+filter+\"//\"+cur.moveToFirst());\n\t\treturn cur.moveToFirst();\n\t}\n\n\t/**\n\t * public, for the unit test\n\t */\n\tpublic void setCached(String kind, String filter, int lifetime) {\n\t\tCacheData cache = new CacheData();\n\t\tcache.set(CacheData.COLUMN_EXPIRE_DATE, new Date().getTime()/1000 + lifetime);\n\t\tcache.set(CacheData.COLUMN_KIND, kind);\n\t\tif (filter != null) {\n\t\t\tcache.set(CacheData.COLUMN_FILTER, filter);\n\t\t}\n\t\tcache.insert(zabbixLocalDB);\n\t}\n\n\t/**\n\t * updates the progressbar in the gui\n\t * @param i 0..100\n\t */\n\tpublic void showProgress(int i) {\n\t\t// if applicable, transform the progress\n\t\tif (transformProgressStart != 0 && transformProgressEnd != 0) {\n\t\t\ti = (int) (transformProgressStart + (transformProgressEnd-transformProgressStart)*(double)i/100);\n\t\t}\n\n\t\tIntent intent = new Intent(ZabbixContentProvider.CONTENT_PROVIDER_INTENT_ACTION);\n\t\tintent.putExtra(\"flag\", ZabbixContentProvider.INTENT_FLAG_SHOW_PROGRESS);\n\t\tintent.putExtra(\"value\", i);\n\t\tcontext.sendBroadcast(intent);\n\t}\n\n\t/**\n\t * transforms the progress\n\t * @param start 0% => start%\n\t * @param end 100% => end%\n\t */\n\tpublic void transformProgress(int start, int end) {\n\t\ttransformProgressStart = start;\n\t\ttransformProgressEnd = end;\n\t}\n}\n"],
    "c_hash_sni": "3820d9533b270822d05ab19af8a9c14f585e1749",
    "name_sni": "src/com/inovex/zabbixmobile/api/ZabbixService.java",
    "c_parents_ss": ["976f9d4001cf9c49a39f3b93acb53607ea8c0bfd"],
    "c_imports_removed_t": ["<empty>"],
    "p_hash_sni": "976f9d4001cf9c49a39f3b93acb53607ea8c0bfd",
    "c_imports_added_t": ["<empty>"],
    "p_methods_t": ["ApplicationData ApplicationItemRelationData ArrayList, String BasicHttpParams BufferedReader CacheData ContentValues CustomSSLSocketFactory Date DefaultHttpClient EventData GraphData GraphItemData HashSet, Long HistoryDetailData HostData HostGroupData HttpAuthorizationRequiredException HttpPost IOException IllegalStateException InputStreamReader Intent ItemData JSONArray JSONObject JsonArrayOrObjectReader JsonFactory NoAPIAccessException PreconditionFailedException RuntimeException SQLiteQueryBuilder Scheme SchemeRegistry ScreenData ScreenItemData StringBuilder StringEntity ThreadSafeClientConnManager TriggerData UsernamePasswordCredentials X509TrustManager _commitTransactionIfRecommended _endTransaction _queryBuffer _queryStream _startTransaction add addHeader append appendWhere authenticate beginTransaction close contains createJsonParser createSocket d delete endTransaction endsWith equals execute get getBoolean getColumnIndex getContent getCredentialsProvider getCurrentName getCurrentToken getDefaultSharedPreferences getDefaultType getEntity getInstance getInt getJSONArray getJSONObject getJsonArray getLong getMessage getParams getReasonPhrase getResources getSocketFactory getStatusCode getStatusLine getString getText getTime i importApplications importEvents importGraphItems importHostGroups importHosts importItems importScreenItems importTriggers inTransaction indexOf init insert isCached isClosed length load matches min moveToFirst moveToNext next nextProperty nextToken nextValue nextValueToken parseColor parseDouble parseInt parseLong printStackTrace put putExtra query read register replace replaceAll sendBroadcast set setCached setConnectionTimeout setContentCharset setCredentials setEntity setHostnameVerifier setRedirecting setTables setTransactionSuccessful setVersion showProgress split startsWith substring toString trim update"],
    "c_imports_removed_cs": "<empty>",
    "p_imports_t": ["android.database.sqlite.SQLiteQueryBuilder org.apache.http.conn.scheme.SchemeRegistry java.util.HashSet org.apache.http.params.BasicHttpParams android.content.Context org.apache.http.params.HttpParams org.apache.http.conn.scheme.PlainSocketFactory java.util.ArrayList com.inovex.zabbixmobile.model.ItemData com.inovex.zabbixmobile.model.HostData com.inovex.zabbixmobile.model.GraphData com.inovex.zabbixmobile.model.EventData org.apache.http.auth.UsernamePasswordCredentials org.apache.http.params.HttpConnectionParams android.content.SharedPreferences java.security.KeyManagementException org.apache.http.conn.ClientConnectionManager org.codehaus.jackson.JsonFactory org.apache.http.entity.StringEntity java.util.Set org.apache.http.params.HttpProtocolParams com.inovex.zabbixmobile.model.ApplicationItemRelationData com.inovex.zabbixmobile.model.TriggerData org.codehaus.jackson.JsonToken android.database.Cursor java.net.Socket android.content.Intent org.apache.http.protocol.HTTP org.json.JSONException java.net.UnknownHostException com.inovex.zabbixmobile.model.HistoryDetailData org.apache.http.HttpResponse java.security.KeyStore com.inovex.zabbixmobile.ZabbixContentProvider android.preference.PreferenceManager android.util.Log org.json.JSONObject java.security.NoSuchAlgorithmException org.apache.http.client.params.HttpClientParams java.io.IOException org.apache.http.conn.scheme.Scheme org.apache.http.client.methods.HttpPost javax.net.ssl.SSLContext org.apache.http.auth.AuthScope org.apache.http.conn.ssl.SSLSocketFactory java.security.KeyStoreException android.content.ContentValues java.io.InputStreamReader java.util.Date java.security.UnrecoverableKeyException android.graphics.Color org.apache.http.client.ClientProtocolException com.inovex.zabbixmobile.model.GraphItemData org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager org.json.JSONArray com.inovex.zabbixmobile.model.CacheData javax.net.ssl.SSLPeerUnverifiedException com.inovex.zabbixmobile.model.HostGroupData org.codehaus.jackson.JsonParseException java.security.cert.X509Certificate org.apache.http.HttpVersion android.database.sqlite.SQLiteDatabase java.util.List java.security.cert.CertificateException java.io.BufferedReader com.inovex.zabbixmobile.model.ApplicationData com.inovex.zabbixmobile.model.ScreenItemData javax.net.ssl.TrustManager com.inovex.zabbixmobile.model.ScreenData com.inovex.zabbixmobile.R org.codehaus.jackson.JsonParser org.apache.http.impl.client.DefaultHttpClient javax.net.ssl.X509TrustManager"],
    "p_subject_t": ["- libraries are now in libs folder (as suggested by the Android documentation) - removed references to the source code of other projects - corrected distinction between API version 1.3, 1.4 and 2.x - enlarged time range of item history details - small bugfixes in main.xml and main_tablet.xml - compatibility with latest GraphView library"],
    "p_callsites_cs": "<unknown>.set(<unknown>, <unknown>)#org.apache.http.HttpEntity.getContent()#java.lang.String.equals(java.lang.String)#org.json.JSONArray.JSONArray()#<unknown>.set(<unknown>, java.lang.Object)#org.json.JSONObject.put(java.lang.String, java.lang.Integer)#org.json.JSONArray.put(java.lang.String)#org.json.JSONObject.JSONObject()#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.codehaus.jackson.JsonFactory.createJsonParser(java.io.InputStream)#java.lang.String.equals(<unknown>)#org.apache.http.StatusLine.getStatusCode()#<unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>)#org.json.JSONObject.put(java.lang.String, java.lang.String)#android.database.sqlite.SQLiteDatabase.inTransaction()#android.util.Log.d(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService._startTransaction()#java.lang.String.equals(java.lang.String)#org.codehaus.jackson.JsonFactory.JsonFactory()#com.inovex.zabbixmobile.api.ZabbixService._endTransaction()#org.json.JSONObject.put(java.lang.String, int)#android.content.ContentValues.ContentValues(int)#org.apache.http.conn.scheme.SchemeRegistry.SchemeRegistry()#<unknown>.insert(android.database.sqlite.SQLiteDatabase)#<unknown>.insert(android.database.sqlite.SQLiteDatabase)#com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject)#com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject)#com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject)#org.json.JSONObject.getJSONObject(java.lang.String)#java.io.InputStreamReader.InputStreamReader(java.io.InputStream)#android.content.Intent.putExtra(java.lang.String, <unknown>)#org.json.JSONArray.length()#java.lang.String.equals(java.lang.String)#<unknown>.set(<unknown>, <unknown>)#java.lang.String.equals(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService.PreconditionFailedException.PreconditionFailedException()#java.lang.StringBuilder.StringBuilder()#android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null)#<unknown>.nextValueToken()#org.json.JSONObject.JSONObject()#org.json.JSONObject.put(java.lang.String, int)#org.json.JSONObject.put(java.lang.String, org.json.JSONArray)#java.lang.String.equals(<unknown>)#<unknown>.get(<unknown>)#<unknown>.insert(android.database.sqlite.SQLiteDatabase)#android.content.Intent.putExtra(java.lang.String, <unknown>)#java.lang.String.equals(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService.importItems(<unknown>, int, boolean)#com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, java.lang.String, int)#android.util.Log.d(java.lang.String, java.lang.String)#org.json.JSONObject.put(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject)#org.apache.http.conn.scheme.Scheme.Scheme(java.lang.String, org.apache.http.conn.ssl.SSLSocketFactory, int)#org.apache.http.HttpEntity.getContent()#org.codehaus.jackson.JsonParser.close()#java.lang.String.equals(<unknown>)#<unknown>.nextValueToken()#<unknown>.getCurrentName()#org.json.JSONArray.JSONArray(java.util.Set<java.lang.Long>)#<unknown>.nextValueToken()#android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null)#<unknown>.getJsonArray()#com.inovex.zabbixmobile.api.ZabbixService._startTransaction()#org.json.JSONArray.JSONArray()#<unknown>.nextProperty()#java.lang.String.equals(java.lang.String)#android.database.sqlite.SQLiteDatabase.update(<unknown>, android.content.ContentValues, <unknown>, null)#java.util.Set<java.lang.Long>.add(<unknown>)#<unknown>.get(<unknown>)#<unknown>.get(<unknown>)#android.content.ContentValues.put(<unknown>, java.lang.Long)#java.lang.String.equals(java.lang.String)#org.apache.http.StatusLine.getReasonPhrase()#java.lang.RuntimeException.RuntimeException(java.lang.String)#<unknown>.nextProperty()#java.lang.Throwable.printStackTrace()#java.lang.String.equals(<unknown>)#java.lang.Long.parseLong(<unknown>)#org.json.JSONObject.put(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject)#<unknown>.getCurrentName()#android.content.ContentValues.put(<unknown>, java.lang.Long)#org.apache.http.entity.StringEntity.StringEntity(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject)#java.lang.String.equals(<unknown>)#<unknown>.EventData()#<unknown>.next()#<unknown>.set(<unknown>, <unknown>)#com.inovex.zabbixmobile.api.ZabbixService.CustomSSLSocketFactory.CustomSSLSocketFactory(java.security.KeyStore)#com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject)#<unknown>.getCurrentName()#java.util.List<java.lang.String>.add(java.lang.String)#org.json.JSONObject.put(java.lang.String, int)#<unknown>.getText()#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.apache.http.conn.ssl.SSLSocketFactory.setHostnameVerifier(org.apache.http.conn.ssl.X509HostnameVerifier)#<unknown>.set(<unknown>, <unknown>)#<unknown>.getText()#org.json.JSONObject.put(java.lang.String, long)#java.util.Date.Date()#org.json.JSONObject.put(java.lang.String, int)#org.json.JSONObject.put(java.lang.String, int)#<unknown>.set(<unknown>, <unknown>)#com.inovex.zabbixmobile.api.ZabbixService.authenticate()#android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null)#android.util.Log.d(java.lang.String, java.lang.String)#java.lang.String.equals(java.lang.String)#org.apache.http.HttpResponse.getEntity()#org.json.JSONObject.JSONObject()#com.inovex.zabbixmobile.api.ZabbixService.importItems(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader, int, boolean)#com.inovex.zabbixmobile.api.ZabbixService._startTransaction()#com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, null, int)#java.io.BufferedReader.read()#org.json.JSONObject.put(java.lang.String, long)#<unknown>.set(<unknown>, <unknown>)#android.database.Cursor.getLong(<unknown>)#java.lang.IllegalStateException.IllegalStateException(java.lang.String)#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.getCurrentName()#android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null)#android.util.Log.d(java.lang.String, java.lang.String)#<unknown>.set(<unknown>, <unknown>)#java.lang.String.equals(<unknown>)#org.json.JSONObject.put(java.lang.String, java.lang.String)#android.database.Cursor.moveToFirst()#com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, java.lang.String)#android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null)#java.lang.String.equals(java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, java.lang.String)#<unknown>.getText()#org.json.JSONObject.put(java.lang.String, java.lang.String)#android.content.Intent.putExtra(java.lang.String, <unknown>)#<unknown>.getCurrentName()#android.content.res.Resources.getString(<unknown>)#android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null)#android.database.sqlite.SQLiteDatabase.setTransactionSuccessful()#<unknown>.next()#<unknown>.getText()#<unknown>.nextValueToken()#com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject)#com.inovex.zabbixmobile.api.ZabbixService.showProgress(<unknown>)#java.io.IOException.IOException(java.lang.String)#<unknown>.getCurrentName()#android.util.Log.d(java.lang.String, java.lang.String)#java.lang.Object.toString()#org.json.JSONObject.toString()#<unknown>.set(<unknown>, <unknown>)#org.json.JSONArray.JSONArray()#org.apache.http.HttpResponse.getStatusLine()#org.json.JSONArray.JSONArray()#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.apache.http.impl.client.DefaultHttpClient.DefaultHttpClient()#org.json.JSONObject.put(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject)#org.apache.http.HttpResponse.getStatusLine()#java.lang.String.equals(<unknown>)#java.util.Date.Date()#android.util.Log.i(java.lang.String, java.lang.String)#android.content.Context.getResources()#org.apache.http.impl.client.CloseableHttpClient.execute(org.apache.http.client.methods.HttpPost)#com.inovex.zabbixmobile.api.ZabbixService._commitTransactionIfRecommended()#com.inovex.zabbixmobile.api.ZabbixService.importHostGroups(<unknown>)#android.content.Context.sendBroadcast(android.content.Intent)#android.content.Context.sendBroadcast(android.content.Intent)#com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, null, int)#java.lang.Integer.parseInt(<unknown>)#<unknown>.ApplicationData()#com.inovex.zabbixmobile.api.ZabbixService.NoAPIAccessException.NoAPIAccessException()#com.inovex.zabbixmobile.api.ZabbixService._commitTransactionIfRecommended()#<unknown>.getJsonArray()#org.apache.http.message.AbstractHttpMessage.addHeader(java.lang.String, java.lang.String)#org.json.JSONObject.put(java.lang.String, int)#java.lang.String.replace(java.lang.String, java.lang.String)#org.json.JSONArray.JSONArray()#<unknown>.set(<unknown>, <unknown>)#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.set(<unknown>, <unknown>)#org.json.JSONArray.JSONArray()#java.lang.String.equals(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, java.lang.String, int)#<unknown>.nextProperty()#<unknown>.set(<unknown>, java.lang.String)#org.json.JSONObject.JSONObject()#java.lang.String.contains(java.lang.String)#org.apache.http.client.methods.HttpEntityEnclosingRequestBase.setEntity(org.apache.http.entity.StringEntity)#com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject)#com.inovex.zabbixmobile.api.ZabbixService.importTriggers(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader)#org.json.JSONObject.put(java.lang.String, int)#<unknown>.HostGroupData()#<unknown>.JsonArrayOrObjectReader(org.codehaus.jackson.JsonParser)#<unknown>.HostGroupData()#<unknown>.nextProperty()#java.lang.Long.parseLong(<unknown>)#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.json.JSONObject.put(java.lang.String, org.json.JSONArray)#org.json.JSONObject.put(java.lang.String, java.lang.Integer)#<unknown>.set(<unknown>, <unknown>)#<unknown>.close()#org.json.JSONObject.put(java.lang.String, org.json.JSONArray)#<unknown>.set(<unknown>, <unknown>)#java.lang.String.equals(java.lang.String)#android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null)#<unknown>.next()#org.json.JSONObject.toString()#java.lang.String.equals(<unknown>)#java.lang.String.equals(<unknown>)#android.database.sqlite.SQLiteDatabase.query(<unknown>, null, <unknown>, null, null, null, null)#<unknown>.set(<unknown>, <unknown>)#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.CacheData()#<unknown>.getText()#com.inovex.zabbixmobile.api.ZabbixService._startTransaction()#<unknown>.set(<unknown>, <unknown>)#com.inovex.zabbixmobile.api.ZabbixService._endTransaction()#<unknown>.set(<unknown>, int)#<unknown>.getJsonArray()#java.lang.String.equals(<unknown>)#java.util.Date.getTime()#java.lang.String.equals(java.lang.String)#org.json.JSONObject.put(java.lang.String, int)#<unknown>.set(<unknown>, <unknown>)#java.lang.Integer.parseInt(<unknown>)#org.codehaus.jackson.JsonParser.getCurrentName()#<unknown>.nextProperty()#com.inovex.zabbixmobile.api.ZabbixService._endTransaction()#java.lang.String.equals(<unknown>)#org.json.JSONObject.put(java.lang.String, int)#android.database.sqlite.SQLiteDatabase.update(<unknown>, android.content.ContentValues, <unknown>, null)#com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject)#com.inovex.zabbixmobile.api.ZabbixService._endTransaction()#java.lang.StringBuilder.append(char)#<unknown>.set(<unknown>, <unknown>)#<unknown>.get(<unknown>)#<unknown>.set(<unknown>, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject)#org.json.JSONObject.put(java.lang.String, java.lang.String)#android.database.Cursor.getLong(<unknown>)#java.lang.String.equals(<unknown>)#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.json.JSONObject.JSONObject()#org.apache.http.params.HttpProtocolParams.setVersion(org.apache.http.params.HttpParams, org.apache.http.HttpVersion)#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.HistoryDetailData()#android.util.Log.d(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService._startTransaction()#<unknown>.next()#<unknown>.set(<unknown>, <unknown>)#<unknown>.nextValueToken()#org.json.JSONObject.JSONObject()#java.lang.String.equals(<unknown>)#java.lang.Long.parseLong(<unknown>)#java.lang.Integer.parseInt(<unknown>)#org.apache.http.client.methods.HttpPost.HttpPost(java.lang.String)#org.apache.http.StatusLine.getStatusCode()#<unknown>.set(<unknown>, int)#java.lang.String.equals(java.lang.String)#java.lang.String.equals(<unknown>)#java.lang.String.equals(<unknown>)#<unknown>.getCurrentName()#java.util.ArrayList<java.lang.String>.ArrayList, String()#com.inovex.zabbixmobile.api.ZabbixService._startTransaction()#com.inovex.zabbixmobile.api.ZabbixService.importTriggers(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader)#org.json.JSONArray.put(java.lang.String)#<unknown>.nextValueToken()#org.json.JSONArray.put(java.lang.String)#<unknown>.set(<unknown>, <unknown>)#org.json.JSONObject.put(java.lang.String, int)#com.inovex.zabbixmobile.api.ZabbixService.importItems(<unknown>, int, boolean)#org.json.JSONObject.JSONObject()#com.inovex.zabbixmobile.api.ZabbixService.importTriggers(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService.importGraphItems(<unknown>)#<unknown>.ScreenItemData()#<unknown>.set(<unknown>, <unknown>)#<unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>)#android.preference.PreferenceManager.getDefaultSharedPreferences(android.content.Context)#org.json.JSONObject.length()#<unknown>.nextValueToken()#java.util.HashSet<java.lang.Long>.HashSet, Long()#java.lang.String.equals(java.lang.String)#android.content.SharedPreferences.getBoolean(java.lang.String, boolean)#<unknown>.insert(android.database.sqlite.SQLiteDatabase)#org.json.JSONObject.put(java.lang.String, org.json.JSONArray)#<unknown>.close()#com.inovex.zabbixmobile.api.ZabbixService.importHosts(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader, int)#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.next()#android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null)#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.json.JSONObject.getString(java.lang.String)#<unknown>.set(<unknown>, <unknown>)#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.close()#org.json.JSONObject.getString(java.lang.String)#java.lang.String.equals(java.lang.String)#java.lang.Long.parseLong(<unknown>)#org.codehaus.jackson.JsonParser.isClosed()#org.json.JSONObject.put(java.lang.String, int)#org.json.JSONObject.put(java.lang.String, org.json.JSONArray)#java.lang.String.startsWith(java.lang.String)#org.json.JSONObject.put(java.lang.String, long)#<unknown>.close()#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.set(<unknown>, long)#org.json.JSONObject.put(java.lang.String, org.json.JSONObject)#<unknown>.set(<unknown>, <unknown>)#com.inovex.zabbixmobile.api.ZabbixService._endTransaction()#java.lang.String.replaceAll(java.lang.String, java.lang.String)#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.nextValueToken()#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.apache.http.params.BasicHttpParams.BasicHttpParams()#android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null)#android.database.sqlite.SQLiteDatabase.beginTransaction()#com.inovex.zabbixmobile.api.ZabbixService._commitTransactionIfRecommended()#com.inovex.zabbixmobile.api.ZabbixService._endTransaction()#java.lang.String.equals(<unknown>)#<unknown>.insert(android.database.sqlite.SQLiteDatabase)#<unknown>.insert(android.database.sqlite.SQLiteDatabase)#org.json.JSONObject.put(java.lang.String, int)#<unknown>.next()#com.inovex.zabbixmobile.api.ZabbixService._startTransaction()#<unknown>.getJsonArray()#android.content.SharedPreferences.getString(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, null, int)#javax.net.SocketFactory.createSocket()#java.lang.Long.parseLong(<unknown>)#org.apache.http.client.CredentialsProvider.setCredentials(org.apache.http.auth.AuthScope, org.apache.http.auth.UsernamePasswordCredentials)#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.next()#com.inovex.zabbixmobile.api.ZabbixService.HttpAuthorizationRequiredException.HttpAuthorizationRequiredException()#android.database.sqlite.SQLiteQueryBuilder.query(android.database.sqlite.SQLiteDatabase, null, null, null, null, null, null)#java.util.Date.Date()#com.inovex.zabbixmobile.api.ZabbixService._commitTransactionIfRecommended()#<unknown>.set(<unknown>, java.lang.String)#org.json.JSONObject.JSONObject()#<unknown>.next()#<unknown>.set(<unknown>, <unknown>)#<unknown>.set(<unknown>, <unknown>)#com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject)#java.lang.String.equals(java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, java.lang.String)#java.lang.String.indexOf(char)#android.database.sqlite.SQLiteDatabase.query(<unknown>, null, <unknown>, null, null, null, null)#android.preference.PreferenceManager.getDefaultSharedPreferences(android.content.Context)#<unknown>.nextProperty()#org.apache.http.impl.client.CloseableHttpClient.execute(org.apache.http.client.methods.HttpPost)#<unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>)#com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, java.lang.String)#org.json.JSONObject.JSONObject()#<unknown>.close()#android.database.Cursor.getColumnIndex(<unknown>)#android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null)#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.nextProperty()#org.apache.http.conn.scheme.PlainSocketFactory.getSocketFactory()#com.inovex.zabbixmobile.api.ZabbixService._commitTransactionIfRecommended()#com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject)#java.lang.StringBuilder.toString()#org.json.JSONObject.put(java.lang.String, java.lang.String)#android.database.sqlite.SQLiteQueryBuilder.SQLiteQueryBuilder()#<unknown>.insert(android.database.sqlite.SQLiteDatabase)#org.apache.http.conn.scheme.SchemeRegistry.register(org.apache.http.conn.scheme.Scheme)#<unknown>.set(<unknown>, <unknown>)#org.json.JSONObject.JSONObject(java.lang.String)#java.lang.String.equals(<unknown>)#<unknown>.set(<unknown>, <unknown>)#<unknown>.set(<unknown>, <unknown>)#java.lang.IllegalStateException.IllegalStateException(java.lang.String)#java.lang.Double.parseDouble(<unknown>)#android.content.ContentValues.put(<unknown>, java.lang.Long)#android.util.Log.i(java.lang.String, java.lang.String)#android.database.sqlite.SQLiteQueryBuilder.appendWhere(<unknown>)#org.apache.http.conn.scheme.SchemeRegistry.register(org.apache.http.conn.scheme.Scheme)#org.json.JSONObject.getInt(java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService.importHosts(<unknown>, null)#org.json.JSONObject.put(java.lang.String, boolean)#java.lang.Long.parseLong(<unknown>)#java.lang.String.indexOf(char)#java.lang.String.equals(java.lang.String)#android.database.sqlite.SQLiteQueryBuilder.appendWhere(<unknown>)#java.lang.String.length()#java.lang.String.equals(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject)#<unknown>.nextProperty()#<unknown>.next()#android.content.SharedPreferences.getString(java.lang.String, java.lang.String)#<unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>)#com.inovex.zabbixmobile.api.ZabbixService.importTriggers(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader)#<unknown>.GraphData()#org.json.JSONArray.put(java.lang.String)#org.apache.http.impl.client.AbstractHttpClient.getParams()#<unknown>.set(<unknown>, long)#<unknown>.set(<unknown>, <unknown>)#org.json.JSONObject.getJSONObject(java.lang.String)#org.json.JSONObject.put(java.lang.String, java.lang.String)#java.lang.String.equals(java.lang.String)#org.json.JSONObject.getString(java.lang.String)#java.lang.String.equals(<unknown>)#java.lang.String.equals(<unknown>)#<unknown>.getCurrentName()#java.lang.String.equals(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService.showProgress(int)#<unknown>.getCurrentName()#com.inovex.zabbixmobile.api.ZabbixService.importHosts(<unknown>, null)#com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, java.lang.String, int)#org.json.JSONObject.put(java.lang.String, int)#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.close()#java.lang.String.replace(java.lang.String, java.lang.String)#java.lang.String.equals(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject)#com.inovex.zabbixmobile.api.ZabbixService._endTransaction()#android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null)#android.database.Cursor.moveToNext()#<unknown>.HostData()#<unknown>.set(<unknown>, long)#<unknown>.next()#com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject)#android.database.sqlite.SQLiteQueryBuilder.setTables(<unknown>)#java.util.Date.getTime()#org.json.JSONObject.put(java.lang.String, long)#android.content.ContentValues.ContentValues(int)#java.lang.Long.parseLong(<unknown>)#org.apache.http.HttpResponse.getEntity()#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.getText()#java.lang.String.equals(java.lang.String)#<unknown>.set(<unknown>, <unknown>)#<unknown>.set(<unknown>, <unknown>)#javax.net.ssl.SSLContext.init(null, javax.net.ssl.TrustManager[], null)#android.database.sqlite.SQLiteDatabase.endTransaction()#java.lang.String.equals(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, java.lang.String)#android.util.Log.d(java.lang.String, java.lang.String)#<unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>)#<unknown>.next()#<unknown>.close()#<unknown>.insert(android.database.sqlite.SQLiteDatabase)#org.json.JSONObject.put(java.lang.String, java.lang.String)#java.lang.Throwable.getMessage()#java.lang.String.equals(<unknown>)#java.lang.String.equals(<unknown>)#<unknown>.set(<unknown>, <unknown>)#com.inovex.zabbixmobile.api.ZabbixService._endTransaction()#javax.net.ssl.SSLContext.getSocketFactory()#org.json.JSONObject.JSONObject()#android.content.Context.getResources()#org.json.JSONObject.put(java.lang.String, int)#com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, null)#com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, java.lang.String, int)#java.lang.String.matches(java.lang.String)#<unknown>.set(<unknown>, <unknown>)#org.json.JSONArray.put(java.lang.String)#<unknown>.set(<unknown>, <unknown>)#android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null)#android.content.Context.sendBroadcast(android.content.Intent)#org.json.JSONObject.getJSONObject(java.lang.String)#<unknown>.get(<unknown>)#android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null)#java.lang.String.equals(<unknown>)#android.content.SharedPreferences.getBoolean(java.lang.String, boolean)#java.lang.Throwable.printStackTrace()#android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null)#org.json.JSONObject.put(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService._startTransaction()#android.content.Intent.putExtra(java.lang.String, int)#org.json.JSONObject.JSONObject()#<unknown>.getText()#com.inovex.zabbixmobile.api.ZabbixService._endTransaction()#org.apache.http.client.methods.HttpPost.HttpPost(java.lang.String)#android.content.SharedPreferences.getString(java.lang.String, java.lang.String)#<unknown>.GraphItemData()#com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, java.lang.String, int)#<unknown>.nextValueToken()#org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager.ThreadSafeClientConnManager(org.apache.http.params.HttpParams, org.apache.http.conn.scheme.SchemeRegistry)#<unknown>.ApplicationItemRelationData()#java.lang.Object.toString()#android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null)#org.json.JSONArray.JSONArray()#java.lang.String.equals(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService._startTransaction()#org.json.JSONObject.put(java.lang.String, org.json.JSONArray)#com.inovex.zabbixmobile.api.ZabbixService.importApplications(int, int, <unknown>)#<unknown>.set(<unknown>, int)#org.json.JSONObject.put(java.lang.String, int)#com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, java.lang.String, int)#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.json.JSONObject.JSONObject()#java.lang.Math.min(int, int)#com.inovex.zabbixmobile.api.ZabbixService.showProgress(<unknown>)#java.lang.String.equals(java.lang.String)#android.content.Intent.Intent(<unknown>)#java.lang.String.equals(<unknown>)#org.json.JSONObject.put(java.lang.String, int)#javax.net.ssl.SSLContext.getInstance(java.lang.String)#android.content.res.Resources.getString(<unknown>)#org.json.JSONObject.JSONObject()#android.content.Intent.Intent(<unknown>)#java.lang.String.equals(<unknown>)#<unknown>.nextProperty()#javax.net.ssl.SSLSocketFactory.createSocket(java.net.Socket, java.lang.String, int, boolean)#org.json.JSONObject.put(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject)#<unknown>.get(<unknown>)#java.io.IOException.IOException(java.lang.String)#java.lang.String.trim()#java.lang.String.contains(java.lang.String)#org.apache.http.entity.StringEntity.StringEntity(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService._endTransaction()#.X509TrustManager()#com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject)#android.graphics.Color.parseColor(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, null)#org.json.JSONObject.getJSONArray(java.lang.String)#org.apache.http.client.params.HttpClientParams.setRedirecting(org.apache.http.params.HttpParams, boolean)#com.inovex.zabbixmobile.api.ZabbixService._startTransaction()#<unknown>.getCurrentName()#java.lang.String.equals(<unknown>)#java.lang.Long.parseLong(<unknown>)#android.util.Log.d(java.lang.String, java.lang.String)#org.codehaus.jackson.JsonParser.getCurrentToken()#org.codehaus.jackson.JsonParser.nextValue()#java.lang.Long.parseLong(<unknown>)#<unknown>.getText()#java.util.Date.getTime()#android.content.Intent.putExtra(java.lang.String, <unknown>)#android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null)#<unknown>.get(<unknown>)#android.database.Cursor.moveToFirst()#org.apache.http.client.methods.HttpEntityEnclosingRequestBase.setEntity(org.apache.http.entity.StringEntity)#com.inovex.zabbixmobile.api.ZabbixService._commitTransactionIfRecommended()#com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, null)#android.database.sqlite.SQLiteQueryBuilder.appendWhere(<unknown>)#org.apache.http.auth.UsernamePasswordCredentials.UsernamePasswordCredentials(java.lang.String, java.lang.String)#java.util.Date.getTime()#java.lang.String.equals(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService._endTransaction()#org.json.JSONObject.put(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService.authenticate()#java.lang.String.equals(<unknown>)#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.json.JSONObject.put(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService.NoAPIAccessException.NoAPIAccessException()#org.json.JSONArray.put(long)#com.inovex.zabbixmobile.api.ZabbixService._endTransaction()#android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null)#<unknown>.getJsonArray()#<unknown>.ScreenData()#java.util.Date.Date()#java.util.Date.Date()#<unknown>.set(<unknown>, long)#<unknown>.getCurrentName()#org.json.JSONObject.put(java.lang.String, org.json.JSONArray)#<unknown>.set(<unknown>, long)#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.apache.http.params.HttpConnectionParams.setConnectionTimeout(org.apache.http.params.HttpParams, int)#org.json.JSONArray.length()#<unknown>.set(<unknown>, java.lang.String)#<unknown>.set(<unknown>, long)#java.util.Date.getTime()#<unknown>.set(<unknown>, <unknown>)#<unknown>.set(<unknown>, <unknown>)#org.json.JSONArray.put(java.lang.String)#java.lang.String.equals(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService.importScreenItems(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService.HttpAuthorizationRequiredException.HttpAuthorizationRequiredException()#<unknown>.getText()#org.json.JSONObject.put(java.lang.String, org.json.JSONArray)#com.inovex.zabbixmobile.api.ZabbixService.importEvents(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader, null)#org.json.JSONObject.JSONObject()#<unknown>.set(<unknown>, <unknown>)#com.inovex.zabbixmobile.api.ZabbixService.importHostGroups(<unknown>)#org.json.JSONObject.toString()#java.lang.Integer.parseInt(<unknown>)#android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null)#org.apache.http.params.HttpProtocolParams.setContentCharset(org.apache.http.params.HttpParams, java.lang.String)#<unknown>.get(<unknown>)#java.lang.String.equals(<unknown>)#<unknown>.set(<unknown>, <unknown>)#<unknown>.nextValueToken()#<unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>)#org.json.JSONObject.put(java.lang.String, org.json.JSONArray)#org.json.JSONObject.put(java.lang.String, java.lang.Integer)#<unknown>.getText()#<unknown>.set(<unknown>, <unknown>)#org.apache.http.message.AbstractHttpMessage.addHeader(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject)#org.json.JSONObject.getJSONArray(java.lang.String)#java.security.KeyStore.load(null, null)#java.lang.String.replace(java.lang.String, java.lang.String)#java.lang.Long.parseLong(<unknown>)#org.json.JSONObject.toString()#com.inovex.zabbixmobile.api.ZabbixService.importTriggers(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader)#android.util.Log.d(java.lang.String, java.lang.String)#android.content.SharedPreferences.getString(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, java.lang.String)#<unknown>.TriggerData()#android.content.SharedPreferences.getString(java.lang.String, java.lang.String)#android.content.Intent.Intent(<unknown>)#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.apache.http.impl.client.AbstractHttpClient.getCredentialsProvider()#<unknown>.set(<unknown>, <unknown>)#java.io.IOException.IOException(java.lang.String)#java.lang.String.trim()#org.json.JSONObject.put(java.lang.String, org.json.JSONArray)#java.lang.String.split(java.lang.String)#java.lang.String.equals(java.lang.String)#java.lang.String.endsWith(java.lang.String)#<unknown>.set(<unknown>, int)#com.inovex.zabbixmobile.api.ZabbixService.showProgress(int)#<unknown>.ItemData()#org.json.JSONObject.put(java.lang.String, int)#<unknown>.set(<unknown>, <unknown>)#org.codehaus.jackson.JsonParser.getText()#android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null)#org.apache.http.impl.client.DefaultHttpClient.DefaultHttpClient(org.apache.http.conn.ClientConnectionManager, org.apache.http.params.HttpParams)#<unknown>.close()#java.lang.IllegalStateException.IllegalStateException(java.lang.String)#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.codehaus.jackson.JsonParser.nextToken()#android.database.Cursor.getColumnIndex(<unknown>)#org.json.JSONObject.put(java.lang.String, org.json.JSONArray)#<unknown>.nextValueToken()#com.inovex.zabbixmobile.api.ZabbixService._startTransaction()#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.set(<unknown>, java.lang.String)#java.lang.String.substring(int, int)#java.lang.Long.parseLong(<unknown>)#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.json.JSONObject.getInt(java.lang.String)#java.lang.String.equals(java.lang.String)#<unknown>.set(<unknown>, <unknown>)#<unknown>.set(<unknown>, <unknown>)#java.security.KeyStore.getInstance(java.lang.String)#java.lang.Integer.parseInt(<unknown>)#java.lang.String.equals(java.lang.String)#<unknown>.nextProperty()#android.content.Intent.putExtra(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, null)#<unknown>.set(<unknown>, int)#java.io.BufferedReader.BufferedReader(java.io.InputStreamReader)#com.inovex.zabbixmobile.api.ZabbixService.importEvents(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader, int)#java.security.KeyStore.getDefaultType()#java.lang.String.equals(<unknown>)#<unknown>.getText()#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.set(<unknown>, java.lang.Object)#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.insert(android.database.sqlite.SQLiteDatabase)#<unknown>.nextProperty()#com.inovex.zabbixmobile.api.ZabbixService._startTransaction()#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.close()#<unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>)#org.json.JSONObject.put(java.lang.String, long)#com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, null, int)#<unknown>.getJsonArray()#<unknown>.set(<unknown>, <unknown>)#java.lang.String.equals(<unknown>)#org.apache.http.conn.scheme.Scheme.Scheme(java.lang.String, org.apache.http.conn.scheme.PlainSocketFactory, int)#org.json.JSONObject.put(java.lang.String, java.lang.String)#java.lang.String.equals(<unknown>)",
    "p_callsites_t": ["<unknown>.set(<unknown>, <unknown>) org.apache.http.HttpEntity.getContent() java.lang.String.equals(java.lang.String) org.json.JSONArray.JSONArray() <unknown>.set(<unknown>, java.lang.Object) org.json.JSONObject.put(java.lang.String, java.lang.Integer) org.json.JSONArray.put(java.lang.String) org.json.JSONObject.JSONObject() org.json.JSONObject.put(java.lang.String, java.lang.String) org.codehaus.jackson.JsonFactory.createJsonParser(java.io.InputStream) java.lang.String.equals(<unknown>) org.apache.http.StatusLine.getStatusCode() <unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>) org.json.JSONObject.put(java.lang.String, java.lang.String) android.database.sqlite.SQLiteDatabase.inTransaction() android.util.Log.d(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService._startTransaction() java.lang.String.equals(java.lang.String) org.codehaus.jackson.JsonFactory.JsonFactory() com.inovex.zabbixmobile.api.ZabbixService._endTransaction() org.json.JSONObject.put(java.lang.String, int) android.content.ContentValues.ContentValues(int) org.apache.http.conn.scheme.SchemeRegistry.SchemeRegistry() <unknown>.insert(android.database.sqlite.SQLiteDatabase) <unknown>.insert(android.database.sqlite.SQLiteDatabase) com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject) com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject) com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject) org.json.JSONObject.getJSONObject(java.lang.String) java.io.InputStreamReader.InputStreamReader(java.io.InputStream) android.content.Intent.putExtra(java.lang.String, <unknown>) org.json.JSONArray.length() java.lang.String.equals(java.lang.String) <unknown>.set(<unknown>, <unknown>) java.lang.String.equals(<unknown>) com.inovex.zabbixmobile.api.ZabbixService.PreconditionFailedException.PreconditionFailedException() java.lang.StringBuilder.StringBuilder() android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null) <unknown>.nextValueToken() org.json.JSONObject.JSONObject() org.json.JSONObject.put(java.lang.String, int) org.json.JSONObject.put(java.lang.String, org.json.JSONArray) java.lang.String.equals(<unknown>) <unknown>.get(<unknown>) <unknown>.insert(android.database.sqlite.SQLiteDatabase) android.content.Intent.putExtra(java.lang.String, <unknown>) java.lang.String.equals(<unknown>) com.inovex.zabbixmobile.api.ZabbixService.importItems(<unknown>, int, boolean) com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, java.lang.String, int) android.util.Log.d(java.lang.String, java.lang.String) org.json.JSONObject.put(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject) org.apache.http.conn.scheme.Scheme.Scheme(java.lang.String, org.apache.http.conn.ssl.SSLSocketFactory, int) org.apache.http.HttpEntity.getContent() org.codehaus.jackson.JsonParser.close() java.lang.String.equals(<unknown>) <unknown>.nextValueToken() <unknown>.getCurrentName() org.json.JSONArray.JSONArray(java.util.Set<java.lang.Long>) <unknown>.nextValueToken() android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null) <unknown>.getJsonArray() com.inovex.zabbixmobile.api.ZabbixService._startTransaction() org.json.JSONArray.JSONArray() <unknown>.nextProperty() java.lang.String.equals(java.lang.String) android.database.sqlite.SQLiteDatabase.update(<unknown>, android.content.ContentValues, <unknown>, null) java.util.Set<java.lang.Long>.add(<unknown>) <unknown>.get(<unknown>) <unknown>.get(<unknown>) android.content.ContentValues.put(<unknown>, java.lang.Long) java.lang.String.equals(java.lang.String) org.apache.http.StatusLine.getReasonPhrase() java.lang.RuntimeException.RuntimeException(java.lang.String) <unknown>.nextProperty() java.lang.Throwable.printStackTrace() java.lang.String.equals(<unknown>) java.lang.Long.parseLong(<unknown>) org.json.JSONObject.put(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject) <unknown>.getCurrentName() android.content.ContentValues.put(<unknown>, java.lang.Long) org.apache.http.entity.StringEntity.StringEntity(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject) java.lang.String.equals(<unknown>) <unknown>.EventData() <unknown>.next() <unknown>.set(<unknown>, <unknown>) com.inovex.zabbixmobile.api.ZabbixService.CustomSSLSocketFactory.CustomSSLSocketFactory(java.security.KeyStore) com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject) <unknown>.getCurrentName() java.util.List<java.lang.String>.add(java.lang.String) org.json.JSONObject.put(java.lang.String, int) <unknown>.getText() org.json.JSONObject.put(java.lang.String, java.lang.String) org.apache.http.conn.ssl.SSLSocketFactory.setHostnameVerifier(org.apache.http.conn.ssl.X509HostnameVerifier) <unknown>.set(<unknown>, <unknown>) <unknown>.getText() org.json.JSONObject.put(java.lang.String, long) java.util.Date.Date() org.json.JSONObject.put(java.lang.String, int) org.json.JSONObject.put(java.lang.String, int) <unknown>.set(<unknown>, <unknown>) com.inovex.zabbixmobile.api.ZabbixService.authenticate() android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null) android.util.Log.d(java.lang.String, java.lang.String) java.lang.String.equals(java.lang.String) org.apache.http.HttpResponse.getEntity() org.json.JSONObject.JSONObject() com.inovex.zabbixmobile.api.ZabbixService.importItems(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader, int, boolean) com.inovex.zabbixmobile.api.ZabbixService._startTransaction() com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, null, int) java.io.BufferedReader.read() org.json.JSONObject.put(java.lang.String, long) <unknown>.set(<unknown>, <unknown>) android.database.Cursor.getLong(<unknown>) java.lang.IllegalStateException.IllegalStateException(java.lang.String) org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.getCurrentName() android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null) android.util.Log.d(java.lang.String, java.lang.String) <unknown>.set(<unknown>, <unknown>) java.lang.String.equals(<unknown>) org.json.JSONObject.put(java.lang.String, java.lang.String) android.database.Cursor.moveToFirst() com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, java.lang.String) android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null) java.lang.String.equals(java.lang.String) com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, java.lang.String) <unknown>.getText() org.json.JSONObject.put(java.lang.String, java.lang.String) android.content.Intent.putExtra(java.lang.String, <unknown>) <unknown>.getCurrentName() android.content.res.Resources.getString(<unknown>) android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null) android.database.sqlite.SQLiteDatabase.setTransactionSuccessful() <unknown>.next() <unknown>.getText() <unknown>.nextValueToken() com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject) com.inovex.zabbixmobile.api.ZabbixService.showProgress(<unknown>) java.io.IOException.IOException(java.lang.String) <unknown>.getCurrentName() android.util.Log.d(java.lang.String, java.lang.String) java.lang.Object.toString() org.json.JSONObject.toString() <unknown>.set(<unknown>, <unknown>) org.json.JSONArray.JSONArray() org.apache.http.HttpResponse.getStatusLine() org.json.JSONArray.JSONArray() org.json.JSONObject.put(java.lang.String, java.lang.String) org.apache.http.impl.client.DefaultHttpClient.DefaultHttpClient() org.json.JSONObject.put(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject) org.apache.http.HttpResponse.getStatusLine() java.lang.String.equals(<unknown>) java.util.Date.Date() android.util.Log.i(java.lang.String, java.lang.String) android.content.Context.getResources() org.apache.http.impl.client.CloseableHttpClient.execute(org.apache.http.client.methods.HttpPost) com.inovex.zabbixmobile.api.ZabbixService._commitTransactionIfRecommended() com.inovex.zabbixmobile.api.ZabbixService.importHostGroups(<unknown>) android.content.Context.sendBroadcast(android.content.Intent) android.content.Context.sendBroadcast(android.content.Intent) com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, null, int) java.lang.Integer.parseInt(<unknown>) <unknown>.ApplicationData() com.inovex.zabbixmobile.api.ZabbixService.NoAPIAccessException.NoAPIAccessException() com.inovex.zabbixmobile.api.ZabbixService._commitTransactionIfRecommended() <unknown>.getJsonArray() org.apache.http.message.AbstractHttpMessage.addHeader(java.lang.String, java.lang.String) org.json.JSONObject.put(java.lang.String, int) java.lang.String.replace(java.lang.String, java.lang.String) org.json.JSONArray.JSONArray() <unknown>.set(<unknown>, <unknown>) org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.set(<unknown>, <unknown>) org.json.JSONArray.JSONArray() java.lang.String.equals(<unknown>) com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, java.lang.String, int) <unknown>.nextProperty() <unknown>.set(<unknown>, java.lang.String) org.json.JSONObject.JSONObject() java.lang.String.contains(java.lang.String) org.apache.http.client.methods.HttpEntityEnclosingRequestBase.setEntity(org.apache.http.entity.StringEntity) com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject) com.inovex.zabbixmobile.api.ZabbixService.importTriggers(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader) org.json.JSONObject.put(java.lang.String, int) <unknown>.HostGroupData() <unknown>.JsonArrayOrObjectReader(org.codehaus.jackson.JsonParser) <unknown>.HostGroupData() <unknown>.nextProperty() java.lang.Long.parseLong(<unknown>) org.json.JSONObject.put(java.lang.String, java.lang.String) org.json.JSONObject.put(java.lang.String, org.json.JSONArray) org.json.JSONObject.put(java.lang.String, java.lang.Integer) <unknown>.set(<unknown>, <unknown>) <unknown>.close() org.json.JSONObject.put(java.lang.String, org.json.JSONArray) <unknown>.set(<unknown>, <unknown>) java.lang.String.equals(java.lang.String) android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null) <unknown>.next() org.json.JSONObject.toString() java.lang.String.equals(<unknown>) java.lang.String.equals(<unknown>) android.database.sqlite.SQLiteDatabase.query(<unknown>, null, <unknown>, null, null, null, null) <unknown>.set(<unknown>, <unknown>) org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.CacheData() <unknown>.getText() com.inovex.zabbixmobile.api.ZabbixService._startTransaction() <unknown>.set(<unknown>, <unknown>) com.inovex.zabbixmobile.api.ZabbixService._endTransaction() <unknown>.set(<unknown>, int) <unknown>.getJsonArray() java.lang.String.equals(<unknown>) java.util.Date.getTime() java.lang.String.equals(java.lang.String) org.json.JSONObject.put(java.lang.String, int) <unknown>.set(<unknown>, <unknown>) java.lang.Integer.parseInt(<unknown>) org.codehaus.jackson.JsonParser.getCurrentName() <unknown>.nextProperty() com.inovex.zabbixmobile.api.ZabbixService._endTransaction() java.lang.String.equals(<unknown>) org.json.JSONObject.put(java.lang.String, int) android.database.sqlite.SQLiteDatabase.update(<unknown>, android.content.ContentValues, <unknown>, null) com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject) com.inovex.zabbixmobile.api.ZabbixService._endTransaction() java.lang.StringBuilder.append(char) <unknown>.set(<unknown>, <unknown>) <unknown>.get(<unknown>) <unknown>.set(<unknown>, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject) org.json.JSONObject.put(java.lang.String, java.lang.String) android.database.Cursor.getLong(<unknown>) java.lang.String.equals(<unknown>) org.json.JSONObject.put(java.lang.String, java.lang.String) org.json.JSONObject.JSONObject() org.apache.http.params.HttpProtocolParams.setVersion(org.apache.http.params.HttpParams, org.apache.http.HttpVersion) org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.HistoryDetailData() android.util.Log.d(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService._startTransaction() <unknown>.next() <unknown>.set(<unknown>, <unknown>) <unknown>.nextValueToken() org.json.JSONObject.JSONObject() java.lang.String.equals(<unknown>) java.lang.Long.parseLong(<unknown>) java.lang.Integer.parseInt(<unknown>) org.apache.http.client.methods.HttpPost.HttpPost(java.lang.String) org.apache.http.StatusLine.getStatusCode() <unknown>.set(<unknown>, int) java.lang.String.equals(java.lang.String) java.lang.String.equals(<unknown>) java.lang.String.equals(<unknown>) <unknown>.getCurrentName() java.util.ArrayList<java.lang.String>.ArrayList, String() com.inovex.zabbixmobile.api.ZabbixService._startTransaction() com.inovex.zabbixmobile.api.ZabbixService.importTriggers(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader) org.json.JSONArray.put(java.lang.String) <unknown>.nextValueToken() org.json.JSONArray.put(java.lang.String) <unknown>.set(<unknown>, <unknown>) org.json.JSONObject.put(java.lang.String, int) com.inovex.zabbixmobile.api.ZabbixService.importItems(<unknown>, int, boolean) org.json.JSONObject.JSONObject() com.inovex.zabbixmobile.api.ZabbixService.importTriggers(<unknown>) com.inovex.zabbixmobile.api.ZabbixService.importGraphItems(<unknown>) <unknown>.ScreenItemData() <unknown>.set(<unknown>, <unknown>) <unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>) android.preference.PreferenceManager.getDefaultSharedPreferences(android.content.Context) org.json.JSONObject.length() <unknown>.nextValueToken() java.util.HashSet<java.lang.Long>.HashSet, Long() java.lang.String.equals(java.lang.String) android.content.SharedPreferences.getBoolean(java.lang.String, boolean) <unknown>.insert(android.database.sqlite.SQLiteDatabase) org.json.JSONObject.put(java.lang.String, org.json.JSONArray) <unknown>.close() com.inovex.zabbixmobile.api.ZabbixService.importHosts(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader, int) org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.next() android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null) org.json.JSONObject.put(java.lang.String, java.lang.String) org.json.JSONObject.getString(java.lang.String) <unknown>.set(<unknown>, <unknown>) org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.close() org.json.JSONObject.getString(java.lang.String) java.lang.String.equals(java.lang.String) java.lang.Long.parseLong(<unknown>) org.codehaus.jackson.JsonParser.isClosed() org.json.JSONObject.put(java.lang.String, int) org.json.JSONObject.put(java.lang.String, org.json.JSONArray) java.lang.String.startsWith(java.lang.String) org.json.JSONObject.put(java.lang.String, long) <unknown>.close() org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.set(<unknown>, long) org.json.JSONObject.put(java.lang.String, org.json.JSONObject) <unknown>.set(<unknown>, <unknown>) com.inovex.zabbixmobile.api.ZabbixService._endTransaction() java.lang.String.replaceAll(java.lang.String, java.lang.String) org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.nextValueToken() org.json.JSONObject.put(java.lang.String, java.lang.String) org.json.JSONObject.put(java.lang.String, java.lang.String) org.apache.http.params.BasicHttpParams.BasicHttpParams() android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null) android.database.sqlite.SQLiteDatabase.beginTransaction() com.inovex.zabbixmobile.api.ZabbixService._commitTransactionIfRecommended() com.inovex.zabbixmobile.api.ZabbixService._endTransaction() java.lang.String.equals(<unknown>) <unknown>.insert(android.database.sqlite.SQLiteDatabase) <unknown>.insert(android.database.sqlite.SQLiteDatabase) org.json.JSONObject.put(java.lang.String, int) <unknown>.next() com.inovex.zabbixmobile.api.ZabbixService._startTransaction() <unknown>.getJsonArray() android.content.SharedPreferences.getString(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, null, int) javax.net.SocketFactory.createSocket() java.lang.Long.parseLong(<unknown>) org.apache.http.client.CredentialsProvider.setCredentials(org.apache.http.auth.AuthScope, org.apache.http.auth.UsernamePasswordCredentials) org.json.JSONObject.put(java.lang.String, java.lang.String) org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.next() com.inovex.zabbixmobile.api.ZabbixService.HttpAuthorizationRequiredException.HttpAuthorizationRequiredException() android.database.sqlite.SQLiteQueryBuilder.query(android.database.sqlite.SQLiteDatabase, null, null, null, null, null, null) java.util.Date.Date() com.inovex.zabbixmobile.api.ZabbixService._commitTransactionIfRecommended() <unknown>.set(<unknown>, java.lang.String) org.json.JSONObject.JSONObject() <unknown>.next() <unknown>.set(<unknown>, <unknown>) <unknown>.set(<unknown>, <unknown>) com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject) java.lang.String.equals(java.lang.String) com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, java.lang.String) java.lang.String.indexOf(char) android.database.sqlite.SQLiteDatabase.query(<unknown>, null, <unknown>, null, null, null, null) android.preference.PreferenceManager.getDefaultSharedPreferences(android.content.Context) <unknown>.nextProperty() org.apache.http.impl.client.CloseableHttpClient.execute(org.apache.http.client.methods.HttpPost) <unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>) com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, java.lang.String) org.json.JSONObject.JSONObject() <unknown>.close() android.database.Cursor.getColumnIndex(<unknown>) android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null) org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.nextProperty() org.apache.http.conn.scheme.PlainSocketFactory.getSocketFactory() com.inovex.zabbixmobile.api.ZabbixService._commitTransactionIfRecommended() com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject) java.lang.StringBuilder.toString() org.json.JSONObject.put(java.lang.String, java.lang.String) android.database.sqlite.SQLiteQueryBuilder.SQLiteQueryBuilder() <unknown>.insert(android.database.sqlite.SQLiteDatabase) org.apache.http.conn.scheme.SchemeRegistry.register(org.apache.http.conn.scheme.Scheme) <unknown>.set(<unknown>, <unknown>) org.json.JSONObject.JSONObject(java.lang.String) java.lang.String.equals(<unknown>) <unknown>.set(<unknown>, <unknown>) <unknown>.set(<unknown>, <unknown>) java.lang.IllegalStateException.IllegalStateException(java.lang.String) java.lang.Double.parseDouble(<unknown>) android.content.ContentValues.put(<unknown>, java.lang.Long) android.util.Log.i(java.lang.String, java.lang.String) android.database.sqlite.SQLiteQueryBuilder.appendWhere(<unknown>) org.apache.http.conn.scheme.SchemeRegistry.register(org.apache.http.conn.scheme.Scheme) org.json.JSONObject.getInt(java.lang.String) com.inovex.zabbixmobile.api.ZabbixService.importHosts(<unknown>, null) org.json.JSONObject.put(java.lang.String, boolean) java.lang.Long.parseLong(<unknown>) java.lang.String.indexOf(char) java.lang.String.equals(java.lang.String) android.database.sqlite.SQLiteQueryBuilder.appendWhere(<unknown>) java.lang.String.length() java.lang.String.equals(<unknown>) com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject) <unknown>.nextProperty() <unknown>.next() android.content.SharedPreferences.getString(java.lang.String, java.lang.String) <unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>) com.inovex.zabbixmobile.api.ZabbixService.importTriggers(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader) <unknown>.GraphData() org.json.JSONArray.put(java.lang.String) org.apache.http.impl.client.AbstractHttpClient.getParams() <unknown>.set(<unknown>, long) <unknown>.set(<unknown>, <unknown>) org.json.JSONObject.getJSONObject(java.lang.String) org.json.JSONObject.put(java.lang.String, java.lang.String) java.lang.String.equals(java.lang.String) org.json.JSONObject.getString(java.lang.String) java.lang.String.equals(<unknown>) java.lang.String.equals(<unknown>) <unknown>.getCurrentName() java.lang.String.equals(<unknown>) com.inovex.zabbixmobile.api.ZabbixService.showProgress(int) <unknown>.getCurrentName() com.inovex.zabbixmobile.api.ZabbixService.importHosts(<unknown>, null) com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, java.lang.String, int) org.json.JSONObject.put(java.lang.String, int) org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.close() java.lang.String.replace(java.lang.String, java.lang.String) java.lang.String.equals(<unknown>) com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject) com.inovex.zabbixmobile.api.ZabbixService._endTransaction() android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null) android.database.Cursor.moveToNext() <unknown>.HostData() <unknown>.set(<unknown>, long) <unknown>.next() com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject) android.database.sqlite.SQLiteQueryBuilder.setTables(<unknown>) java.util.Date.getTime() org.json.JSONObject.put(java.lang.String, long) android.content.ContentValues.ContentValues(int) java.lang.Long.parseLong(<unknown>) org.apache.http.HttpResponse.getEntity() org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.getText() java.lang.String.equals(java.lang.String) <unknown>.set(<unknown>, <unknown>) <unknown>.set(<unknown>, <unknown>) javax.net.ssl.SSLContext.init(null, javax.net.ssl.TrustManager[], null) android.database.sqlite.SQLiteDatabase.endTransaction() java.lang.String.equals(<unknown>) com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, java.lang.String) android.util.Log.d(java.lang.String, java.lang.String) <unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>) <unknown>.next() <unknown>.close() <unknown>.insert(android.database.sqlite.SQLiteDatabase) org.json.JSONObject.put(java.lang.String, java.lang.String) java.lang.Throwable.getMessage() java.lang.String.equals(<unknown>) java.lang.String.equals(<unknown>) <unknown>.set(<unknown>, <unknown>) com.inovex.zabbixmobile.api.ZabbixService._endTransaction() javax.net.ssl.SSLContext.getSocketFactory() org.json.JSONObject.JSONObject() android.content.Context.getResources() org.json.JSONObject.put(java.lang.String, int) com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, null) com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, java.lang.String, int) java.lang.String.matches(java.lang.String) <unknown>.set(<unknown>, <unknown>) org.json.JSONArray.put(java.lang.String) <unknown>.set(<unknown>, <unknown>) android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null) android.content.Context.sendBroadcast(android.content.Intent) org.json.JSONObject.getJSONObject(java.lang.String) <unknown>.get(<unknown>) android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null) java.lang.String.equals(<unknown>) android.content.SharedPreferences.getBoolean(java.lang.String, boolean) java.lang.Throwable.printStackTrace() android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null) org.json.JSONObject.put(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService._startTransaction() android.content.Intent.putExtra(java.lang.String, int) org.json.JSONObject.JSONObject() <unknown>.getText() com.inovex.zabbixmobile.api.ZabbixService._endTransaction() org.apache.http.client.methods.HttpPost.HttpPost(java.lang.String) android.content.SharedPreferences.getString(java.lang.String, java.lang.String) <unknown>.GraphItemData() com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, java.lang.String, int) <unknown>.nextValueToken() org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager.ThreadSafeClientConnManager(org.apache.http.params.HttpParams, org.apache.http.conn.scheme.SchemeRegistry) <unknown>.ApplicationItemRelationData() java.lang.Object.toString() android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null) org.json.JSONArray.JSONArray() java.lang.String.equals(<unknown>) com.inovex.zabbixmobile.api.ZabbixService._startTransaction() org.json.JSONObject.put(java.lang.String, org.json.JSONArray) com.inovex.zabbixmobile.api.ZabbixService.importApplications(int, int, <unknown>) <unknown>.set(<unknown>, int) org.json.JSONObject.put(java.lang.String, int) com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, java.lang.String, int) org.json.JSONObject.put(java.lang.String, java.lang.String) org.json.JSONObject.JSONObject() java.lang.Math.min(int, int) com.inovex.zabbixmobile.api.ZabbixService.showProgress(<unknown>) java.lang.String.equals(java.lang.String) android.content.Intent.Intent(<unknown>) java.lang.String.equals(<unknown>) org.json.JSONObject.put(java.lang.String, int) javax.net.ssl.SSLContext.getInstance(java.lang.String) android.content.res.Resources.getString(<unknown>) org.json.JSONObject.JSONObject() android.content.Intent.Intent(<unknown>) java.lang.String.equals(<unknown>) <unknown>.nextProperty() javax.net.ssl.SSLSocketFactory.createSocket(java.net.Socket, java.lang.String, int, boolean) org.json.JSONObject.put(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject) <unknown>.get(<unknown>) java.io.IOException.IOException(java.lang.String) java.lang.String.trim() java.lang.String.contains(java.lang.String) org.apache.http.entity.StringEntity.StringEntity(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService._endTransaction() .X509TrustManager() com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject) android.graphics.Color.parseColor(<unknown>) com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, null) org.json.JSONObject.getJSONArray(java.lang.String) org.apache.http.client.params.HttpClientParams.setRedirecting(org.apache.http.params.HttpParams, boolean) com.inovex.zabbixmobile.api.ZabbixService._startTransaction() <unknown>.getCurrentName() java.lang.String.equals(<unknown>) java.lang.Long.parseLong(<unknown>) android.util.Log.d(java.lang.String, java.lang.String) org.codehaus.jackson.JsonParser.getCurrentToken() org.codehaus.jackson.JsonParser.nextValue() java.lang.Long.parseLong(<unknown>) <unknown>.getText() java.util.Date.getTime() android.content.Intent.putExtra(java.lang.String, <unknown>) android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null) <unknown>.get(<unknown>) android.database.Cursor.moveToFirst() org.apache.http.client.methods.HttpEntityEnclosingRequestBase.setEntity(org.apache.http.entity.StringEntity) com.inovex.zabbixmobile.api.ZabbixService._commitTransactionIfRecommended() com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, null) android.database.sqlite.SQLiteQueryBuilder.appendWhere(<unknown>) org.apache.http.auth.UsernamePasswordCredentials.UsernamePasswordCredentials(java.lang.String, java.lang.String) java.util.Date.getTime() java.lang.String.equals(<unknown>) com.inovex.zabbixmobile.api.ZabbixService._endTransaction() org.json.JSONObject.put(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService.authenticate() java.lang.String.equals(<unknown>) org.json.JSONObject.put(java.lang.String, java.lang.String) org.json.JSONObject.put(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService.NoAPIAccessException.NoAPIAccessException() org.json.JSONArray.put(long) com.inovex.zabbixmobile.api.ZabbixService._endTransaction() android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null) <unknown>.getJsonArray() <unknown>.ScreenData() java.util.Date.Date() java.util.Date.Date() <unknown>.set(<unknown>, long) <unknown>.getCurrentName() org.json.JSONObject.put(java.lang.String, org.json.JSONArray) <unknown>.set(<unknown>, long) org.json.JSONObject.put(java.lang.String, java.lang.String) org.apache.http.params.HttpConnectionParams.setConnectionTimeout(org.apache.http.params.HttpParams, int) org.json.JSONArray.length() <unknown>.set(<unknown>, java.lang.String) <unknown>.set(<unknown>, long) java.util.Date.getTime() <unknown>.set(<unknown>, <unknown>) <unknown>.set(<unknown>, <unknown>) org.json.JSONArray.put(java.lang.String) java.lang.String.equals(<unknown>) com.inovex.zabbixmobile.api.ZabbixService.importScreenItems(<unknown>) com.inovex.zabbixmobile.api.ZabbixService.HttpAuthorizationRequiredException.HttpAuthorizationRequiredException() <unknown>.getText() org.json.JSONObject.put(java.lang.String, org.json.JSONArray) com.inovex.zabbixmobile.api.ZabbixService.importEvents(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader, null) org.json.JSONObject.JSONObject() <unknown>.set(<unknown>, <unknown>) com.inovex.zabbixmobile.api.ZabbixService.importHostGroups(<unknown>) org.json.JSONObject.toString() java.lang.Integer.parseInt(<unknown>) android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null) org.apache.http.params.HttpProtocolParams.setContentCharset(org.apache.http.params.HttpParams, java.lang.String) <unknown>.get(<unknown>) java.lang.String.equals(<unknown>) <unknown>.set(<unknown>, <unknown>) <unknown>.nextValueToken() <unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>) org.json.JSONObject.put(java.lang.String, org.json.JSONArray) org.json.JSONObject.put(java.lang.String, java.lang.Integer) <unknown>.getText() <unknown>.set(<unknown>, <unknown>) org.apache.http.message.AbstractHttpMessage.addHeader(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject) org.json.JSONObject.getJSONArray(java.lang.String) java.security.KeyStore.load(null, null) java.lang.String.replace(java.lang.String, java.lang.String) java.lang.Long.parseLong(<unknown>) org.json.JSONObject.toString() com.inovex.zabbixmobile.api.ZabbixService.importTriggers(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader) android.util.Log.d(java.lang.String, java.lang.String) android.content.SharedPreferences.getString(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, java.lang.String) <unknown>.TriggerData() android.content.SharedPreferences.getString(java.lang.String, java.lang.String) android.content.Intent.Intent(<unknown>) org.json.JSONObject.put(java.lang.String, java.lang.String) org.apache.http.impl.client.AbstractHttpClient.getCredentialsProvider() <unknown>.set(<unknown>, <unknown>) java.io.IOException.IOException(java.lang.String) java.lang.String.trim() org.json.JSONObject.put(java.lang.String, org.json.JSONArray) java.lang.String.split(java.lang.String) java.lang.String.equals(java.lang.String) java.lang.String.endsWith(java.lang.String) <unknown>.set(<unknown>, int) com.inovex.zabbixmobile.api.ZabbixService.showProgress(int) <unknown>.ItemData() org.json.JSONObject.put(java.lang.String, int) <unknown>.set(<unknown>, <unknown>) org.codehaus.jackson.JsonParser.getText() android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null) org.apache.http.impl.client.DefaultHttpClient.DefaultHttpClient(org.apache.http.conn.ClientConnectionManager, org.apache.http.params.HttpParams) <unknown>.close() java.lang.IllegalStateException.IllegalStateException(java.lang.String) org.json.JSONObject.put(java.lang.String, java.lang.String) org.codehaus.jackson.JsonParser.nextToken() android.database.Cursor.getColumnIndex(<unknown>) org.json.JSONObject.put(java.lang.String, org.json.JSONArray) <unknown>.nextValueToken() com.inovex.zabbixmobile.api.ZabbixService._startTransaction() org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.set(<unknown>, java.lang.String) java.lang.String.substring(int, int) java.lang.Long.parseLong(<unknown>) org.json.JSONObject.put(java.lang.String, java.lang.String) org.json.JSONObject.getInt(java.lang.String) java.lang.String.equals(java.lang.String) <unknown>.set(<unknown>, <unknown>) <unknown>.set(<unknown>, <unknown>) java.security.KeyStore.getInstance(java.lang.String) java.lang.Integer.parseInt(<unknown>) java.lang.String.equals(java.lang.String) <unknown>.nextProperty() android.content.Intent.putExtra(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, null) <unknown>.set(<unknown>, int) java.io.BufferedReader.BufferedReader(java.io.InputStreamReader) com.inovex.zabbixmobile.api.ZabbixService.importEvents(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader, int) java.security.KeyStore.getDefaultType() java.lang.String.equals(<unknown>) <unknown>.getText() org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.set(<unknown>, java.lang.Object) org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.insert(android.database.sqlite.SQLiteDatabase) <unknown>.nextProperty() com.inovex.zabbixmobile.api.ZabbixService._startTransaction() org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.close() <unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>) org.json.JSONObject.put(java.lang.String, long) com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, null, int) <unknown>.getJsonArray() <unknown>.set(<unknown>, <unknown>) java.lang.String.equals(<unknown>) org.apache.http.conn.scheme.Scheme.Scheme(java.lang.String, org.apache.http.conn.scheme.PlainSocketFactory, int) org.json.JSONObject.put(java.lang.String, java.lang.String) java.lang.String.equals(<unknown>)"],
    "c_callsites_t": ["<unknown>.set(<unknown>, <unknown>) org.apache.http.HttpEntity.getContent() java.lang.String.equals(java.lang.String) org.json.JSONArray.JSONArray() <unknown>.set(<unknown>, java.lang.Object) org.json.JSONObject.put(java.lang.String, java.lang.Integer) org.json.JSONArray.put(java.lang.String) org.json.JSONObject.JSONObject() org.json.JSONObject.put(java.lang.String, java.lang.String) org.codehaus.jackson.JsonFactory.createJsonParser(java.io.InputStream) java.lang.String.equals(<unknown>) org.apache.http.StatusLine.getStatusCode() <unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>) org.json.JSONObject.put(java.lang.String, java.lang.String) android.database.sqlite.SQLiteDatabase.inTransaction() android.util.Log.d(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService._startTransaction() java.lang.String.equals(java.lang.String) org.codehaus.jackson.JsonFactory.JsonFactory() com.inovex.zabbixmobile.api.ZabbixService._endTransaction() org.json.JSONObject.put(java.lang.String, int) android.content.ContentValues.ContentValues(int) org.apache.http.conn.scheme.SchemeRegistry.SchemeRegistry() <unknown>.insert(android.database.sqlite.SQLiteDatabase) <unknown>.insert(android.database.sqlite.SQLiteDatabase) <unknown>.getJsonArrayOrObjectReader() com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject) com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject) com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject) org.json.JSONObject.getJSONObject(java.lang.String) java.io.InputStreamReader.InputStreamReader(java.io.InputStream) android.content.Intent.putExtra(java.lang.String, <unknown>) org.json.JSONArray.length() java.lang.String.equals(java.lang.String) <unknown>.set(<unknown>, <unknown>) java.lang.String.equals(<unknown>) com.inovex.zabbixmobile.api.ZabbixService.PreconditionFailedException.PreconditionFailedException() java.lang.StringBuilder.StringBuilder() android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null) <unknown>.nextValueToken() org.json.JSONObject.JSONObject() org.json.JSONObject.put(java.lang.String, int) org.json.JSONObject.put(java.lang.String, org.json.JSONArray) java.lang.String.equals(<unknown>) <unknown>.get(<unknown>) <unknown>.insert(android.database.sqlite.SQLiteDatabase) android.content.Intent.putExtra(java.lang.String, <unknown>) java.lang.String.equals(<unknown>) com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, java.lang.String, int) android.util.Log.d(java.lang.String, java.lang.String) org.json.JSONObject.put(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject) org.apache.http.conn.scheme.Scheme.Scheme(java.lang.String, org.apache.http.conn.ssl.SSLSocketFactory, int) org.apache.http.HttpEntity.getContent() org.codehaus.jackson.JsonParser.close() java.lang.String.equals(<unknown>) <unknown>.nextValueToken() <unknown>.getCurrentName() org.json.JSONArray.JSONArray(java.util.Set<java.lang.Long>) <unknown>.nextValueToken() android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null) com.inovex.zabbixmobile.api.ZabbixService._startTransaction() org.json.JSONArray.JSONArray() <unknown>.nextProperty() java.lang.String.equals(java.lang.String) android.database.sqlite.SQLiteDatabase.update(<unknown>, android.content.ContentValues, <unknown>, null) java.util.Set<java.lang.Long>.add(<unknown>) <unknown>.get(<unknown>) <unknown>.get(<unknown>) android.content.ContentValues.put(<unknown>, java.lang.Long) java.lang.String.equals(java.lang.String) org.apache.http.StatusLine.getReasonPhrase() java.lang.RuntimeException.RuntimeException(java.lang.String) <unknown>.nextProperty() java.lang.Throwable.printStackTrace() java.lang.String.equals(<unknown>) java.lang.Long.parseLong(<unknown>) com.inovex.zabbixmobile.api.ZabbixService.importItems(<unknown>, int, boolean) org.json.JSONObject.put(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject) <unknown>.getCurrentName() android.content.ContentValues.put(<unknown>, java.lang.Long) org.apache.http.entity.StringEntity.StringEntity(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject) java.lang.String.equals(<unknown>) <unknown>.EventData() <unknown>.next() <unknown>.set(<unknown>, <unknown>) com.inovex.zabbixmobile.api.ZabbixService.CustomSSLSocketFactory.CustomSSLSocketFactory(java.security.KeyStore) com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject) <unknown>.getCurrentName() java.util.List<java.lang.String>.add(java.lang.String) org.json.JSONObject.put(java.lang.String, int) <unknown>.getText() org.json.JSONObject.put(java.lang.String, java.lang.String) org.apache.http.conn.ssl.SSLSocketFactory.setHostnameVerifier(org.apache.http.conn.ssl.X509HostnameVerifier) <unknown>.set(<unknown>, <unknown>) <unknown>.getText() org.json.JSONObject.put(java.lang.String, long) java.util.Date.Date() org.json.JSONObject.put(java.lang.String, int) org.json.JSONObject.put(java.lang.String, int) <unknown>.set(<unknown>, <unknown>) com.inovex.zabbixmobile.api.ZabbixService.authenticate() android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null) android.util.Log.d(java.lang.String, java.lang.String) java.lang.String.equals(java.lang.String) org.apache.http.HttpResponse.getEntity() org.json.JSONObject.JSONObject() com.inovex.zabbixmobile.api.ZabbixService.importItems(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader, int, boolean) <unknown>.getJsonArrayOrObjectReader() com.inovex.zabbixmobile.api.ZabbixService._startTransaction() com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, null, int) java.io.BufferedReader.read() org.json.JSONObject.put(java.lang.String, long) <unknown>.set(<unknown>, <unknown>) android.database.Cursor.getLong(<unknown>) java.lang.IllegalStateException.IllegalStateException(java.lang.String) org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.getCurrentName() android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null) android.util.Log.d(java.lang.String, java.lang.String) <unknown>.set(<unknown>, <unknown>) java.lang.String.equals(<unknown>) org.json.JSONObject.put(java.lang.String, java.lang.String) android.database.Cursor.moveToFirst() com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, java.lang.String) android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null) java.lang.String.equals(java.lang.String) com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, java.lang.String) <unknown>.getText() org.json.JSONObject.put(java.lang.String, java.lang.String) android.content.Intent.putExtra(java.lang.String, <unknown>) <unknown>.getCurrentName() android.content.res.Resources.getString(<unknown>) android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null) android.database.sqlite.SQLiteDatabase.setTransactionSuccessful() <unknown>.next() <unknown>.getText() <unknown>.nextValueToken() com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject) com.inovex.zabbixmobile.api.ZabbixService.showProgress(<unknown>) java.io.IOException.IOException(java.lang.String) <unknown>.getCurrentName() android.util.Log.d(java.lang.String, java.lang.String) java.lang.Object.toString() org.json.JSONObject.toString() <unknown>.set(<unknown>, <unknown>) org.json.JSONArray.JSONArray() org.apache.http.HttpResponse.getStatusLine() org.json.JSONArray.JSONArray() org.json.JSONObject.put(java.lang.String, java.lang.String) org.apache.http.impl.client.DefaultHttpClient.DefaultHttpClient() org.json.JSONObject.put(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject) org.apache.http.HttpResponse.getStatusLine() java.lang.String.equals(<unknown>) java.util.Date.Date() android.util.Log.i(java.lang.String, java.lang.String) android.content.Context.getResources() org.apache.http.impl.client.CloseableHttpClient.execute(org.apache.http.client.methods.HttpPost) com.inovex.zabbixmobile.api.ZabbixService._commitTransactionIfRecommended() android.content.Context.sendBroadcast(android.content.Intent) android.content.Context.sendBroadcast(android.content.Intent) com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, null, int) java.lang.Integer.parseInt(<unknown>) <unknown>.ApplicationData() com.inovex.zabbixmobile.api.ZabbixService.NoAPIAccessException.NoAPIAccessException() com.inovex.zabbixmobile.api.ZabbixService._commitTransactionIfRecommended() org.apache.http.message.AbstractHttpMessage.addHeader(java.lang.String, java.lang.String) org.json.JSONObject.put(java.lang.String, int) java.lang.String.replace(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService.importHostGroups(<unknown>) org.json.JSONArray.JSONArray() <unknown>.set(<unknown>, <unknown>) org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.set(<unknown>, <unknown>) org.json.JSONArray.JSONArray() java.lang.String.equals(<unknown>) com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, java.lang.String, int) <unknown>.nextProperty() <unknown>.set(<unknown>, java.lang.String) org.json.JSONObject.JSONObject() java.lang.String.contains(java.lang.String) org.apache.http.client.methods.HttpEntityEnclosingRequestBase.setEntity(org.apache.http.entity.StringEntity) com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject) com.inovex.zabbixmobile.api.ZabbixService.importTriggers(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader) org.json.JSONObject.put(java.lang.String, int) <unknown>.HostGroupData() <unknown>.JsonArrayOrObjectReader(org.codehaus.jackson.JsonParser) <unknown>.HostGroupData() <unknown>.nextProperty() java.lang.Long.parseLong(<unknown>) org.json.JSONObject.put(java.lang.String, java.lang.String) org.json.JSONObject.put(java.lang.String, org.json.JSONArray) org.json.JSONObject.put(java.lang.String, java.lang.Integer) <unknown>.set(<unknown>, <unknown>) <unknown>.close() org.json.JSONObject.put(java.lang.String, org.json.JSONArray) <unknown>.set(<unknown>, <unknown>) java.lang.String.equals(java.lang.String) android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null) <unknown>.next() org.json.JSONObject.toString() java.lang.String.equals(<unknown>) java.lang.String.equals(<unknown>) android.database.sqlite.SQLiteDatabase.query(<unknown>, null, <unknown>, null, null, null, null) <unknown>.set(<unknown>, <unknown>) org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.CacheData() <unknown>.getText() com.inovex.zabbixmobile.api.ZabbixService._startTransaction() <unknown>.set(<unknown>, <unknown>) com.inovex.zabbixmobile.api.ZabbixService._endTransaction() <unknown>.set(<unknown>, int) java.lang.String.equals(<unknown>) java.util.Date.getTime() java.lang.String.equals(java.lang.String) org.json.JSONObject.put(java.lang.String, int) <unknown>.set(<unknown>, <unknown>) java.lang.Integer.parseInt(<unknown>) org.codehaus.jackson.JsonParser.getCurrentName() <unknown>.nextProperty() com.inovex.zabbixmobile.api.ZabbixService._endTransaction() java.lang.String.equals(<unknown>) org.json.JSONObject.put(java.lang.String, int) android.database.sqlite.SQLiteDatabase.update(<unknown>, android.content.ContentValues, <unknown>, null) com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject) com.inovex.zabbixmobile.api.ZabbixService._endTransaction() java.lang.StringBuilder.append(char) <unknown>.set(<unknown>, <unknown>) <unknown>.get(<unknown>) <unknown>.set(<unknown>, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject) org.json.JSONObject.put(java.lang.String, java.lang.String) android.database.Cursor.getLong(<unknown>) java.lang.String.equals(<unknown>) org.json.JSONObject.put(java.lang.String, java.lang.String) org.json.JSONObject.JSONObject() org.apache.http.params.HttpProtocolParams.setVersion(org.apache.http.params.HttpParams, org.apache.http.HttpVersion) com.inovex.zabbixmobile.api.ZabbixService.importApplications(int, int, <unknown>) org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.HistoryDetailData() android.util.Log.d(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService._startTransaction() <unknown>.next() <unknown>.set(<unknown>, <unknown>) <unknown>.nextValueToken() org.json.JSONObject.JSONObject() java.lang.String.equals(<unknown>) com.inovex.zabbixmobile.api.ZabbixService.importScreenItems(<unknown>) java.lang.Long.parseLong(<unknown>) java.lang.Integer.parseInt(<unknown>) org.apache.http.client.methods.HttpPost.HttpPost(java.lang.String) org.apache.http.StatusLine.getStatusCode() <unknown>.set(<unknown>, int) java.lang.String.equals(java.lang.String) java.lang.String.equals(<unknown>) java.lang.String.equals(<unknown>) <unknown>.getCurrentName() java.util.ArrayList<java.lang.String>.ArrayList, String() com.inovex.zabbixmobile.api.ZabbixService._startTransaction() com.inovex.zabbixmobile.api.ZabbixService.importTriggers(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader) org.json.JSONArray.put(java.lang.String) <unknown>.nextValueToken() org.json.JSONArray.put(java.lang.String) <unknown>.set(<unknown>, <unknown>) org.json.JSONObject.put(java.lang.String, int) org.json.JSONObject.JSONObject() <unknown>.ScreenItemData() <unknown>.set(<unknown>, <unknown>) <unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>) android.preference.PreferenceManager.getDefaultSharedPreferences(android.content.Context) org.json.JSONObject.length() <unknown>.nextValueToken() java.util.HashSet<java.lang.Long>.HashSet, Long() java.lang.String.equals(java.lang.String) android.content.SharedPreferences.getBoolean(java.lang.String, boolean) <unknown>.insert(android.database.sqlite.SQLiteDatabase) org.json.JSONObject.put(java.lang.String, org.json.JSONArray) <unknown>.close() com.inovex.zabbixmobile.api.ZabbixService.importHosts(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader, int) org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.next() android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null) org.json.JSONObject.put(java.lang.String, java.lang.String) org.json.JSONObject.getString(java.lang.String) <unknown>.set(<unknown>, <unknown>) org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.close() org.json.JSONObject.getString(java.lang.String) java.lang.String.equals(java.lang.String) java.lang.Long.parseLong(<unknown>) org.codehaus.jackson.JsonParser.isClosed() org.json.JSONObject.put(java.lang.String, int) org.json.JSONObject.put(java.lang.String, org.json.JSONArray) java.lang.String.startsWith(java.lang.String) org.json.JSONObject.put(java.lang.String, long) <unknown>.close() org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.set(<unknown>, long) org.json.JSONObject.put(java.lang.String, org.json.JSONObject) <unknown>.set(<unknown>, <unknown>) com.inovex.zabbixmobile.api.ZabbixService._endTransaction() java.lang.String.replaceAll(java.lang.String, java.lang.String) org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.nextValueToken() org.json.JSONObject.put(java.lang.String, java.lang.String) org.json.JSONObject.put(java.lang.String, java.lang.String) org.apache.http.params.BasicHttpParams.BasicHttpParams() com.inovex.zabbixmobile.api.ZabbixService.importGraphItems(<unknown>) android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null) android.database.sqlite.SQLiteDatabase.beginTransaction() com.inovex.zabbixmobile.api.ZabbixService._commitTransactionIfRecommended() com.inovex.zabbixmobile.api.ZabbixService._endTransaction() java.lang.String.equals(<unknown>) <unknown>.insert(android.database.sqlite.SQLiteDatabase) <unknown>.insert(android.database.sqlite.SQLiteDatabase) org.json.JSONObject.put(java.lang.String, int) <unknown>.next() com.inovex.zabbixmobile.api.ZabbixService._startTransaction() android.content.SharedPreferences.getString(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, null, int) javax.net.SocketFactory.createSocket() java.lang.Long.parseLong(<unknown>) org.apache.http.client.CredentialsProvider.setCredentials(org.apache.http.auth.AuthScope, org.apache.http.auth.UsernamePasswordCredentials) org.json.JSONObject.put(java.lang.String, java.lang.String) org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.next() com.inovex.zabbixmobile.api.ZabbixService.HttpAuthorizationRequiredException.HttpAuthorizationRequiredException() android.database.sqlite.SQLiteQueryBuilder.query(android.database.sqlite.SQLiteDatabase, null, null, null, null, null, null) java.util.Date.Date() com.inovex.zabbixmobile.api.ZabbixService._commitTransactionIfRecommended() <unknown>.set(<unknown>, java.lang.String) org.json.JSONObject.JSONObject() <unknown>.next() <unknown>.set(<unknown>, <unknown>) <unknown>.set(<unknown>, <unknown>) com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject) java.lang.String.equals(java.lang.String) com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, java.lang.String) java.lang.String.indexOf(char) android.database.sqlite.SQLiteDatabase.query(<unknown>, null, <unknown>, null, null, null, null) android.preference.PreferenceManager.getDefaultSharedPreferences(android.content.Context) <unknown>.nextProperty() org.apache.http.impl.client.CloseableHttpClient.execute(org.apache.http.client.methods.HttpPost) <unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>) com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, java.lang.String) org.json.JSONObject.JSONObject() <unknown>.close() android.database.Cursor.getColumnIndex(<unknown>) android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null) org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.nextProperty() org.apache.http.conn.scheme.PlainSocketFactory.getSocketFactory() com.inovex.zabbixmobile.api.ZabbixService._commitTransactionIfRecommended() com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject) java.lang.StringBuilder.toString() org.json.JSONObject.put(java.lang.String, java.lang.String) android.database.sqlite.SQLiteQueryBuilder.SQLiteQueryBuilder() <unknown>.insert(android.database.sqlite.SQLiteDatabase) org.apache.http.conn.scheme.SchemeRegistry.register(org.apache.http.conn.scheme.Scheme) <unknown>.set(<unknown>, <unknown>) org.json.JSONObject.JSONObject(java.lang.String) com.inovex.zabbixmobile.api.ZabbixService.importHosts(<unknown>, null) java.lang.String.equals(<unknown>) <unknown>.set(<unknown>, <unknown>) <unknown>.set(<unknown>, <unknown>) java.lang.IllegalStateException.IllegalStateException(java.lang.String) java.lang.Double.parseDouble(<unknown>) android.content.ContentValues.put(<unknown>, java.lang.Long) android.util.Log.i(java.lang.String, java.lang.String) android.database.sqlite.SQLiteQueryBuilder.appendWhere(<unknown>) org.apache.http.conn.scheme.SchemeRegistry.register(org.apache.http.conn.scheme.Scheme) org.json.JSONObject.getInt(java.lang.String) org.json.JSONObject.put(java.lang.String, boolean) java.lang.Long.parseLong(<unknown>) java.lang.String.indexOf(char) java.lang.String.equals(java.lang.String) android.database.sqlite.SQLiteQueryBuilder.appendWhere(<unknown>) java.lang.String.length() java.lang.String.equals(<unknown>) com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject) <unknown>.nextProperty() <unknown>.next() android.content.SharedPreferences.getString(java.lang.String, java.lang.String) <unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>) com.inovex.zabbixmobile.api.ZabbixService.importTriggers(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader) <unknown>.GraphData() org.json.JSONArray.put(java.lang.String) org.apache.http.impl.client.AbstractHttpClient.getParams() <unknown>.set(<unknown>, long) <unknown>.set(<unknown>, <unknown>) org.json.JSONObject.getJSONObject(java.lang.String) org.json.JSONObject.put(java.lang.String, java.lang.String) java.lang.String.equals(java.lang.String) org.json.JSONObject.getString(java.lang.String) java.lang.String.equals(<unknown>) java.lang.String.equals(<unknown>) <unknown>.getCurrentName() java.lang.String.equals(<unknown>) com.inovex.zabbixmobile.api.ZabbixService.showProgress(int) <unknown>.getCurrentName() com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, java.lang.String, int) org.json.JSONObject.put(java.lang.String, int) org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.close() java.lang.String.replace(java.lang.String, java.lang.String) java.lang.String.equals(<unknown>) com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject) com.inovex.zabbixmobile.api.ZabbixService._endTransaction() android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null) android.database.Cursor.moveToNext() <unknown>.HostData() <unknown>.set(<unknown>, long) <unknown>.next() com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject) android.database.sqlite.SQLiteQueryBuilder.setTables(<unknown>) java.util.Date.getTime() org.json.JSONObject.put(java.lang.String, long) android.content.ContentValues.ContentValues(int) java.lang.Long.parseLong(<unknown>) org.apache.http.HttpResponse.getEntity() org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.getText() java.lang.String.equals(java.lang.String) <unknown>.set(<unknown>, <unknown>) <unknown>.set(<unknown>, <unknown>) <unknown>.set(<unknown>, <unknown>) javax.net.ssl.SSLContext.init(null, javax.net.ssl.TrustManager[], null) android.database.sqlite.SQLiteDatabase.endTransaction() java.lang.String.equals(<unknown>) com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, java.lang.String) android.util.Log.d(java.lang.String, java.lang.String) <unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>) <unknown>.next() <unknown>.close() <unknown>.insert(android.database.sqlite.SQLiteDatabase) org.json.JSONObject.put(java.lang.String, java.lang.String) java.lang.Throwable.getMessage() java.lang.String.equals(<unknown>) java.lang.String.equals(<unknown>) <unknown>.set(<unknown>, <unknown>) com.inovex.zabbixmobile.api.ZabbixService._endTransaction() javax.net.ssl.SSLContext.getSocketFactory() org.json.JSONObject.JSONObject() android.content.Context.getResources() org.json.JSONObject.put(java.lang.String, int) com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, null) com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, java.lang.String, int) java.lang.String.matches(java.lang.String) org.json.JSONArray.put(java.lang.String) <unknown>.set(<unknown>, <unknown>) android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null) android.content.Context.sendBroadcast(android.content.Intent) org.json.JSONObject.getJSONObject(java.lang.String) <unknown>.get(<unknown>) android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null) java.lang.String.equals(<unknown>) android.content.SharedPreferences.getBoolean(java.lang.String, boolean) java.lang.Throwable.printStackTrace() android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null) org.json.JSONObject.put(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService._startTransaction() android.content.Intent.putExtra(java.lang.String, int) org.json.JSONObject.JSONObject() <unknown>.getText() com.inovex.zabbixmobile.api.ZabbixService._endTransaction() org.apache.http.client.methods.HttpPost.HttpPost(java.lang.String) android.content.SharedPreferences.getString(java.lang.String, java.lang.String) <unknown>.GraphItemData() com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, java.lang.String, int) <unknown>.nextValueToken() org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager.ThreadSafeClientConnManager(org.apache.http.params.HttpParams, org.apache.http.conn.scheme.SchemeRegistry) <unknown>.ApplicationItemRelationData() java.lang.Object.toString() android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null) org.json.JSONArray.JSONArray() java.lang.String.equals(<unknown>) com.inovex.zabbixmobile.api.ZabbixService._startTransaction() org.json.JSONObject.put(java.lang.String, org.json.JSONArray) <unknown>.set(<unknown>, int) org.json.JSONObject.put(java.lang.String, int) com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, java.lang.String, int) org.json.JSONObject.put(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService.importItems(<unknown>, int, boolean) org.json.JSONObject.JSONObject() java.lang.Math.min(int, int) com.inovex.zabbixmobile.api.ZabbixService.showProgress(<unknown>) java.lang.String.equals(java.lang.String) android.content.Intent.Intent(<unknown>) java.lang.String.equals(<unknown>) org.json.JSONObject.put(java.lang.String, int) javax.net.ssl.SSLContext.getInstance(java.lang.String) android.content.res.Resources.getString(<unknown>) org.json.JSONObject.JSONObject() android.content.Intent.Intent(<unknown>) java.lang.String.equals(<unknown>) <unknown>.nextProperty() javax.net.ssl.SSLSocketFactory.createSocket(java.net.Socket, java.lang.String, int, boolean) org.json.JSONObject.put(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject) <unknown>.get(<unknown>) com.inovex.zabbixmobile.api.ZabbixService.importHosts(<unknown>, null) java.io.IOException.IOException(java.lang.String) java.lang.String.trim() java.lang.String.contains(java.lang.String) org.apache.http.entity.StringEntity.StringEntity(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService._endTransaction() com.inovex.zabbixmobile.api.ZabbixService.importTriggers(<unknown>) .X509TrustManager() com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject) android.graphics.Color.parseColor(<unknown>) com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, null) org.json.JSONObject.getJSONArray(java.lang.String) org.apache.http.client.params.HttpClientParams.setRedirecting(org.apache.http.params.HttpParams, boolean) com.inovex.zabbixmobile.api.ZabbixService._startTransaction() <unknown>.getCurrentName() <unknown>.getJsonArrayOrObjectReader() java.lang.String.equals(<unknown>) java.lang.Long.parseLong(<unknown>) android.util.Log.d(java.lang.String, java.lang.String) org.codehaus.jackson.JsonParser.getCurrentToken() org.codehaus.jackson.JsonParser.nextValue() java.lang.Long.parseLong(<unknown>) <unknown>.getText() java.util.Date.getTime() android.content.Intent.putExtra(java.lang.String, <unknown>) android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null) <unknown>.get(<unknown>) android.database.Cursor.moveToFirst() org.apache.http.client.methods.HttpEntityEnclosingRequestBase.setEntity(org.apache.http.entity.StringEntity) com.inovex.zabbixmobile.api.ZabbixService._commitTransactionIfRecommended() com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, null) android.database.sqlite.SQLiteQueryBuilder.appendWhere(<unknown>) org.apache.http.auth.UsernamePasswordCredentials.UsernamePasswordCredentials(java.lang.String, java.lang.String) java.util.Date.getTime() java.lang.String.equals(<unknown>) com.inovex.zabbixmobile.api.ZabbixService._endTransaction() org.json.JSONObject.put(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService.authenticate() java.lang.String.equals(<unknown>) org.json.JSONObject.put(java.lang.String, java.lang.String) org.json.JSONObject.put(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService.NoAPIAccessException.NoAPIAccessException() org.json.JSONArray.put(long) com.inovex.zabbixmobile.api.ZabbixService._endTransaction() <unknown>.getJsonArrayOrObjectReader() android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null) <unknown>.ScreenData() java.util.Date.Date() java.util.Date.Date() <unknown>.set(<unknown>, long) <unknown>.getCurrentName() org.json.JSONObject.put(java.lang.String, org.json.JSONArray) <unknown>.set(<unknown>, long) org.json.JSONObject.put(java.lang.String, java.lang.String) org.apache.http.params.HttpConnectionParams.setConnectionTimeout(org.apache.http.params.HttpParams, int) org.json.JSONArray.length() <unknown>.set(<unknown>, java.lang.String) <unknown>.set(<unknown>, long) java.util.Date.getTime() <unknown>.set(<unknown>, <unknown>) <unknown>.set(<unknown>, <unknown>) org.json.JSONArray.put(java.lang.String) java.lang.String.equals(<unknown>) com.inovex.zabbixmobile.api.ZabbixService.HttpAuthorizationRequiredException.HttpAuthorizationRequiredException() <unknown>.getText() org.json.JSONObject.put(java.lang.String, org.json.JSONArray) com.inovex.zabbixmobile.api.ZabbixService.importEvents(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader, null) org.json.JSONObject.JSONObject() com.inovex.zabbixmobile.api.ZabbixService.importHostGroups(<unknown>) <unknown>.set(<unknown>, <unknown>) org.json.JSONObject.toString() java.lang.Integer.parseInt(<unknown>) android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null) org.apache.http.params.HttpProtocolParams.setContentCharset(org.apache.http.params.HttpParams, java.lang.String) <unknown>.get(<unknown>) java.lang.String.equals(<unknown>) <unknown>.set(<unknown>, <unknown>) <unknown>.nextValueToken() <unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>) org.json.JSONObject.put(java.lang.String, org.json.JSONArray) org.json.JSONObject.put(java.lang.String, java.lang.Integer) <unknown>.getText() <unknown>.set(<unknown>, <unknown>) org.apache.http.message.AbstractHttpMessage.addHeader(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject) org.json.JSONObject.getJSONArray(java.lang.String) java.security.KeyStore.load(null, null) java.lang.String.replace(java.lang.String, java.lang.String) java.lang.Long.parseLong(<unknown>) org.json.JSONObject.toString() com.inovex.zabbixmobile.api.ZabbixService.importTriggers(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader) android.util.Log.d(java.lang.String, java.lang.String) android.content.SharedPreferences.getString(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, java.lang.String) <unknown>.getJsonArrayOrObjectReader() <unknown>.TriggerData() android.content.SharedPreferences.getString(java.lang.String, java.lang.String) android.content.Intent.Intent(<unknown>) org.json.JSONObject.put(java.lang.String, java.lang.String) org.apache.http.impl.client.AbstractHttpClient.getCredentialsProvider() <unknown>.set(<unknown>, <unknown>) java.io.IOException.IOException(java.lang.String) java.lang.String.trim() org.json.JSONObject.put(java.lang.String, org.json.JSONArray) java.lang.String.split(java.lang.String) java.lang.String.equals(java.lang.String) java.lang.String.endsWith(java.lang.String) <unknown>.set(<unknown>, int) com.inovex.zabbixmobile.api.ZabbixService.showProgress(int) <unknown>.ItemData() org.json.JSONObject.put(java.lang.String, int) <unknown>.set(<unknown>, <unknown>) org.codehaus.jackson.JsonParser.getText() android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null) org.apache.http.impl.client.DefaultHttpClient.DefaultHttpClient(org.apache.http.conn.ClientConnectionManager, org.apache.http.params.HttpParams) <unknown>.close() java.lang.IllegalStateException.IllegalStateException(java.lang.String) org.json.JSONObject.put(java.lang.String, java.lang.String) org.codehaus.jackson.JsonParser.nextToken() android.database.Cursor.getColumnIndex(<unknown>) org.json.JSONObject.put(java.lang.String, org.json.JSONArray) <unknown>.nextValueToken() com.inovex.zabbixmobile.api.ZabbixService._startTransaction() org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.set(<unknown>, java.lang.String) java.lang.String.substring(int, int) java.lang.Long.parseLong(<unknown>) org.json.JSONObject.put(java.lang.String, java.lang.String) org.json.JSONObject.getInt(java.lang.String) <unknown>.getJsonArrayOrObjectReader() java.lang.String.equals(java.lang.String) <unknown>.set(<unknown>, <unknown>) <unknown>.set(<unknown>, <unknown>) java.security.KeyStore.getInstance(java.lang.String) java.lang.Integer.parseInt(<unknown>) java.lang.String.equals(java.lang.String) <unknown>.nextProperty() android.content.Intent.putExtra(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, null) <unknown>.set(<unknown>, int) java.io.BufferedReader.BufferedReader(java.io.InputStreamReader) com.inovex.zabbixmobile.api.ZabbixService.importEvents(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader, int) java.security.KeyStore.getDefaultType() java.lang.String.equals(<unknown>) <unknown>.getText() org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.set(<unknown>, java.lang.Object) org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.insert(android.database.sqlite.SQLiteDatabase) <unknown>.nextProperty() com.inovex.zabbixmobile.api.ZabbixService._startTransaction() org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.close() <unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>) org.json.JSONObject.put(java.lang.String, long) com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, null, int) <unknown>.set(<unknown>, <unknown>) java.lang.String.equals(<unknown>) org.apache.http.conn.scheme.Scheme.Scheme(java.lang.String, org.apache.http.conn.scheme.PlainSocketFactory, int) org.json.JSONObject.put(java.lang.String, java.lang.String) java.lang.String.equals(<unknown>)"],
    "c_callsites_added_t": ["<unknown>.getJsonArrayOrObjectReader() <unknown>.getJsonArrayOrObjectReader() <unknown>.getJsonArrayOrObjectReader() <unknown>.getJsonArrayOrObjectReader() <unknown>.getJsonArrayOrObjectReader() <unknown>.getJsonArrayOrObjectReader()"],
    "c_methods_t": ["ApplicationData ApplicationItemRelationData ArrayList, String BasicHttpParams BufferedReader CacheData ContentValues CustomSSLSocketFactory Date DefaultHttpClient EventData GraphData GraphItemData HashSet, Long HistoryDetailData HostData HostGroupData HttpAuthorizationRequiredException HttpPost IOException IllegalStateException InputStreamReader Intent ItemData JSONArray JSONObject JsonArrayOrObjectReader JsonFactory NoAPIAccessException PreconditionFailedException RuntimeException SQLiteQueryBuilder Scheme SchemeRegistry ScreenData ScreenItemData StringBuilder StringEntity ThreadSafeClientConnManager TriggerData UsernamePasswordCredentials X509TrustManager _commitTransactionIfRecommended _endTransaction _queryBuffer _queryStream _startTransaction add addHeader append appendWhere authenticate beginTransaction close contains createJsonParser createSocket d delete endTransaction endsWith equals execute get getBoolean getColumnIndex getContent getCredentialsProvider getCurrentName getCurrentToken getDefaultSharedPreferences getDefaultType getEntity getInstance getInt getJSONArray getJSONObject getJsonArrayOrObjectReader getLong getMessage getParams getReasonPhrase getResources getSocketFactory getStatusCode getStatusLine getString getText getTime i importApplications importEvents importGraphItems importHostGroups importHosts importItems importScreenItems importTriggers inTransaction indexOf init insert isCached isClosed length load matches min moveToFirst moveToNext next nextProperty nextToken nextValue nextValueToken parseColor parseDouble parseInt parseLong printStackTrace put putExtra query read register replace replaceAll sendBroadcast set setCached setConnectionTimeout setContentCharset setCredentials setEntity setHostnameVerifier setRedirecting setTables setTransactionSuccessful setVersion showProgress split startsWith substring toString trim update"],
    "id": "inovex/zax\u0000src/com/inovex/zabbixmobile/api/ZabbixService.java\u0000976f9d4001cf9c49a39f3b93acb53607ea8c0bfd\u00003820d9533b270822d05ab19af8a9c14f585e1749",
    "p_comments_t": ["\t\t\t// create ApplicationItemRelation /** \n * public, for the unit test\n */\n /** \n * import the hosts from stream\n * @param jsonArray stream\n * @param numHosts count of hosts for progressbar. null if unknown.\n * @return Object[] {(String) comma-separated all Hostnames, (Long) 1. host id}\n * @throws JsonParseException\n * @throws IOException\n */\n \t\t\t// result array found /** \n * import graph items\n * @param graphItems\n * @return true, if graphid column has to be updated from -1 to the correct graphid later.\n * @throws JsonParseException\n * @throws NumberFormatException\n * @throws IOException\n */\n \t\t\t\t\t\t// save only every 20th \t\t\t// wrong password. token remains null \t\t\t// the past 2 hours \t\t\t\t\t// data are unuseable, e.g. because it's a string /** \n * @param events stream\n * @param numEvents if null, no progressbar-update AND only isert, if it does not exist. If !null, progressbar-update AND always insert without checking\n * @throws JsonParseException\n * @throws IOException\n */\n \t\t\t\t\t// Precondition failed / Looks like Zabbix 1.8.2 \t\t\t// get API version \t\t\t// if #0 \"other\" does not exist yet, it has to be created \t\t\t\t\t// later the IDs will be replaced with the correct /** \n * zabbix api call. data will be parsed as json object on-the-fly. Caution: use this only for api calls with a small return data.\n * @param method\n * @param params\n * @return\n * @throws ClientProtocolException\n * @throws IOException\n * @throws JSONException\n * @throws HttpAuthorizationRequiredException\n * @throws NoAPIAccessException\n */\n /** \n * begin sql transaction\n */\n \t\t\t\t\t\t// first do a new auth and then try the same api call again \t\t\t\t// no itemid \t\t\t// count of items /** \n * init\n * @param context android context\n * @param zabbixLocalDB sqlite\n */\n \t\t\t// create applications that does not exist \t\t\t\t// so we use a fiction \t\t\t// only resouretype == 0 /** \n * probably too old zabbix <= 1.8.2\n */\n /** \n * zabbix auth. user and pwd from app preferences\n * @return true success\n * @throws ClientProtocolException\n * @throws IOException\n * @throws JSONException\n * @throws HttpAuthorizationRequiredException\n * @throws NoAPIAccessException\n */\n /** \n * close the last http stream\n */\n \t\t\t// Workaround: historydetails only comes if you use the correct \"history\"-parameter. /** \n * transforms the progress\n * @param start 0% => start%\n * @param end 100% => end%\n */\n \t\t\t\t// in Zabbix version <2.0, this is not default \t\t\t\t// file not found \t\t\t\t\t// hex string => color int \t\tHttpClientParams.setRedirecting(params, true); // redirecting /** \n * The API version. From 1.8.3 (maybe earlier) to 2.0 (excluded), this was 1.3. With 2.0, it changed to 1.4.  Finally, since 2.0.4, the API version matches the program version.\n */\n \t\t\t// if applicable replace placeholder \t\t\t// if graphid-column was not set, this must be done later. temporary graphid=-1 \t\t// for GUI unit test, just return true /** \n * imports the \"warning\"-triggers\n * @throws JSONException\n * @throws IOException\n * @throws HttpAuthorizationRequiredException\n * @throws NoAPIAccessException\n */\n \t\t\t// event is parsed and can be inserted into the db \t\tpublic static final int EVENT_GET_TIME_FROM_SHIFT = 7*24*60*60; // -7 days \t\t// http request \t\t\t\t\t// store hosts namen \t\t\t\t// http auth failed \t\t\t\t\t// at this point itemid and hostid is unknown \t\t\t\t\t// import triggers \t\t\t// we try them all, until we get results. /** \n * importiert ein trigger mit dem attribute itemid. ggf. wird der trigger zuerst gelöscht und neu angelegt. imports a trigger with the attribute itemid. if trigger already exists, it will be removed first.\n * @param triggerid\n * @throws JSONException\n * @throws IOException\n * @throws HttpAuthorizationRequiredException\n * @throws NoAPIAccessException\n */\n \t\t\t\t\t// import hosts \t\t\t// for unit test \t\t\t\t// ignore \t\t\t// or a json object /** \n * zabbix error: no api access\n */\n /** \n * counts the sql inserts/updates and do a transaction commit to save the memory\n */\n \t\t\t// send intent to GUI \t\t\t\t\t// before zabbix 2.x the name field was \"description\" \t\t\t\t\t// if we get an empty array, we try another history parameter \t\t\t\t\t// store the first item id \t\t// check if the trigger exists and if the itemid was set /** \n * global constants\n */\n \t\t\t\t// create \"other\" hostgroup #1 \t\t\t// if there's no application, the ID #0 must be added (for other) \t\t\t\t\t// because of this, all applicationrelations will be saved with itemid and hostid \"-1\". \t\t\t\t\t\t.put(\"history\", historytype) // for integer ? /** \n * interface to connect to the zabbix server\n */\n /** \n * acknowledge zabbix event. Sets ack-flag with comment. Caution: This is supported only for Zabbix version >= 1.8.4\n * @param eventid\n * @param comment\n * @return true, success.\n * @throws ClientProtocolException\n * @throws IOException\n * @throws JSONException\n * @throws HttpAuthorizationRequiredException\n * @throws NoAPIAccessException\n */\n \t\t\t// store the last stream to close it if an exception will be thrown /** \n * zabbix api call as stream.\n * @param method\n * @param params\n * @return stream im json array wrapper\n * @throws JSONException\n * @throws IOException\n * @throws HttpAuthorizationRequiredException\n * @throws NoAPIAccessException\n */\n \t\t// if applicable http auth \t\t\t// correct historytype found and there are data \t\t\t\t// count of the entries cannot be detected (zabbix bug), /** \n * import items from stream.\n * @param items stream\n * @param numItems count for progressbar, if 0 no progressbarupdate\n * @param checkBeforeInsert if true, only make an insert if item does not exist\n * @return the first item id\n * @throws JsonParseException\n * @throws IOException\n */\n \t\t\t// collect all graphids /** \n * http auth is needed\n */\n \t\t\t// ignore for unit test /** \n * commit sql transaction\n */\n \t\t\t// delete old graphs \t\t\t// host without group will get group #0 (other) \t\t\t// there's no result \t\tpublic static final int HISTORY_GET_TIME_FROM_SHIFT = 24*60*60; // -24h \t\t// if applicable, transform the progress \t\t\t// SSL not trusted \t\t\t// internet problem \t\t\tif (jp.nextToken() != JsonToken.START_ARRAY && jp.getCurrentToken() != JsonToken.START_OBJECT) { // go inside the array \t\tpublic static final int CACHE_LIFETIME_APPLICATIONS = 2*24*60*60; // 2 days \t\t\t\t\t// since zabbix 2.x is the name of the item \"name\" \t\t\t// now the \"-1\" IDs of applicationsrelation will be replaced with the correct itemID \t\t\t// get count of hosts /** \n * import the newest events\n * @throws ClientProtocolException\n * @throws IOException\n * @throws JSONException\n * @throws HttpAuthorizationRequiredException\n * @throws NoAPIAccessException\n */\n /** \n * updates the progressbar in the gui\n * @param i 0..100\n */\n \t\t\t\t\t\t// ignore \t\t\t\t\t// first do a new auth and then try the same api call again /** \n * import the newest event of a trigger\n * @param triggerid\n * @throws JSONException\n * @throws IOException\n * @throws HttpAuthorizationRequiredException\n * @throws NoAPIAccessException\n */\n \t\t// it can be an (empty) array \t\t\t// this parameter can be \"null\" or a number 0-4. Because we don't know when to use which, \t\t\t// clear triggers"],
    "p_email_sni": "jschamburger@inovex.de",
    "c_callsites_removed_t": ["<unknown>.getJsonArray() <unknown>.getJsonArray() <unknown>.getJsonArray() <unknown>.getJsonArray() <unknown>.getJsonArray() <unknown>.getJsonArray()"],
    "c_callsites_cs": "<unknown>.set(<unknown>, <unknown>)#org.apache.http.HttpEntity.getContent()#java.lang.String.equals(java.lang.String)#org.json.JSONArray.JSONArray()#<unknown>.set(<unknown>, java.lang.Object)#org.json.JSONObject.put(java.lang.String, java.lang.Integer)#org.json.JSONArray.put(java.lang.String)#org.json.JSONObject.JSONObject()#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.codehaus.jackson.JsonFactory.createJsonParser(java.io.InputStream)#java.lang.String.equals(<unknown>)#org.apache.http.StatusLine.getStatusCode()#<unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>)#org.json.JSONObject.put(java.lang.String, java.lang.String)#android.database.sqlite.SQLiteDatabase.inTransaction()#android.util.Log.d(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService._startTransaction()#java.lang.String.equals(java.lang.String)#org.codehaus.jackson.JsonFactory.JsonFactory()#com.inovex.zabbixmobile.api.ZabbixService._endTransaction()#org.json.JSONObject.put(java.lang.String, int)#android.content.ContentValues.ContentValues(int)#org.apache.http.conn.scheme.SchemeRegistry.SchemeRegistry()#<unknown>.insert(android.database.sqlite.SQLiteDatabase)#<unknown>.insert(android.database.sqlite.SQLiteDatabase)#<unknown>.getJsonArrayOrObjectReader()#com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject)#com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject)#com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject)#org.json.JSONObject.getJSONObject(java.lang.String)#java.io.InputStreamReader.InputStreamReader(java.io.InputStream)#android.content.Intent.putExtra(java.lang.String, <unknown>)#org.json.JSONArray.length()#java.lang.String.equals(java.lang.String)#<unknown>.set(<unknown>, <unknown>)#java.lang.String.equals(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService.PreconditionFailedException.PreconditionFailedException()#java.lang.StringBuilder.StringBuilder()#android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null)#<unknown>.nextValueToken()#org.json.JSONObject.JSONObject()#org.json.JSONObject.put(java.lang.String, int)#org.json.JSONObject.put(java.lang.String, org.json.JSONArray)#java.lang.String.equals(<unknown>)#<unknown>.get(<unknown>)#<unknown>.insert(android.database.sqlite.SQLiteDatabase)#android.content.Intent.putExtra(java.lang.String, <unknown>)#java.lang.String.equals(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, java.lang.String, int)#android.util.Log.d(java.lang.String, java.lang.String)#org.json.JSONObject.put(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject)#org.apache.http.conn.scheme.Scheme.Scheme(java.lang.String, org.apache.http.conn.ssl.SSLSocketFactory, int)#org.apache.http.HttpEntity.getContent()#org.codehaus.jackson.JsonParser.close()#java.lang.String.equals(<unknown>)#<unknown>.nextValueToken()#<unknown>.getCurrentName()#org.json.JSONArray.JSONArray(java.util.Set<java.lang.Long>)#<unknown>.nextValueToken()#android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null)#com.inovex.zabbixmobile.api.ZabbixService._startTransaction()#org.json.JSONArray.JSONArray()#<unknown>.nextProperty()#java.lang.String.equals(java.lang.String)#android.database.sqlite.SQLiteDatabase.update(<unknown>, android.content.ContentValues, <unknown>, null)#java.util.Set<java.lang.Long>.add(<unknown>)#<unknown>.get(<unknown>)#<unknown>.get(<unknown>)#android.content.ContentValues.put(<unknown>, java.lang.Long)#java.lang.String.equals(java.lang.String)#org.apache.http.StatusLine.getReasonPhrase()#java.lang.RuntimeException.RuntimeException(java.lang.String)#<unknown>.nextProperty()#java.lang.Throwable.printStackTrace()#java.lang.String.equals(<unknown>)#java.lang.Long.parseLong(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService.importItems(<unknown>, int, boolean)#org.json.JSONObject.put(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject)#<unknown>.getCurrentName()#android.content.ContentValues.put(<unknown>, java.lang.Long)#org.apache.http.entity.StringEntity.StringEntity(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject)#java.lang.String.equals(<unknown>)#<unknown>.EventData()#<unknown>.next()#<unknown>.set(<unknown>, <unknown>)#com.inovex.zabbixmobile.api.ZabbixService.CustomSSLSocketFactory.CustomSSLSocketFactory(java.security.KeyStore)#com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject)#<unknown>.getCurrentName()#java.util.List<java.lang.String>.add(java.lang.String)#org.json.JSONObject.put(java.lang.String, int)#<unknown>.getText()#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.apache.http.conn.ssl.SSLSocketFactory.setHostnameVerifier(org.apache.http.conn.ssl.X509HostnameVerifier)#<unknown>.set(<unknown>, <unknown>)#<unknown>.getText()#org.json.JSONObject.put(java.lang.String, long)#java.util.Date.Date()#org.json.JSONObject.put(java.lang.String, int)#org.json.JSONObject.put(java.lang.String, int)#<unknown>.set(<unknown>, <unknown>)#com.inovex.zabbixmobile.api.ZabbixService.authenticate()#android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null)#android.util.Log.d(java.lang.String, java.lang.String)#java.lang.String.equals(java.lang.String)#org.apache.http.HttpResponse.getEntity()#org.json.JSONObject.JSONObject()#com.inovex.zabbixmobile.api.ZabbixService.importItems(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader, int, boolean)#<unknown>.getJsonArrayOrObjectReader()#com.inovex.zabbixmobile.api.ZabbixService._startTransaction()#com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, null, int)#java.io.BufferedReader.read()#org.json.JSONObject.put(java.lang.String, long)#<unknown>.set(<unknown>, <unknown>)#android.database.Cursor.getLong(<unknown>)#java.lang.IllegalStateException.IllegalStateException(java.lang.String)#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.getCurrentName()#android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null)#android.util.Log.d(java.lang.String, java.lang.String)#<unknown>.set(<unknown>, <unknown>)#java.lang.String.equals(<unknown>)#org.json.JSONObject.put(java.lang.String, java.lang.String)#android.database.Cursor.moveToFirst()#com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, java.lang.String)#android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null)#java.lang.String.equals(java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, java.lang.String)#<unknown>.getText()#org.json.JSONObject.put(java.lang.String, java.lang.String)#android.content.Intent.putExtra(java.lang.String, <unknown>)#<unknown>.getCurrentName()#android.content.res.Resources.getString(<unknown>)#android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null)#android.database.sqlite.SQLiteDatabase.setTransactionSuccessful()#<unknown>.next()#<unknown>.getText()#<unknown>.nextValueToken()#com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject)#com.inovex.zabbixmobile.api.ZabbixService.showProgress(<unknown>)#java.io.IOException.IOException(java.lang.String)#<unknown>.getCurrentName()#android.util.Log.d(java.lang.String, java.lang.String)#java.lang.Object.toString()#org.json.JSONObject.toString()#<unknown>.set(<unknown>, <unknown>)#org.json.JSONArray.JSONArray()#org.apache.http.HttpResponse.getStatusLine()#org.json.JSONArray.JSONArray()#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.apache.http.impl.client.DefaultHttpClient.DefaultHttpClient()#org.json.JSONObject.put(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject)#org.apache.http.HttpResponse.getStatusLine()#java.lang.String.equals(<unknown>)#java.util.Date.Date()#android.util.Log.i(java.lang.String, java.lang.String)#android.content.Context.getResources()#org.apache.http.impl.client.CloseableHttpClient.execute(org.apache.http.client.methods.HttpPost)#com.inovex.zabbixmobile.api.ZabbixService._commitTransactionIfRecommended()#android.content.Context.sendBroadcast(android.content.Intent)#android.content.Context.sendBroadcast(android.content.Intent)#com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, null, int)#java.lang.Integer.parseInt(<unknown>)#<unknown>.ApplicationData()#com.inovex.zabbixmobile.api.ZabbixService.NoAPIAccessException.NoAPIAccessException()#com.inovex.zabbixmobile.api.ZabbixService._commitTransactionIfRecommended()#org.apache.http.message.AbstractHttpMessage.addHeader(java.lang.String, java.lang.String)#org.json.JSONObject.put(java.lang.String, int)#java.lang.String.replace(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService.importHostGroups(<unknown>)#org.json.JSONArray.JSONArray()#<unknown>.set(<unknown>, <unknown>)#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.set(<unknown>, <unknown>)#org.json.JSONArray.JSONArray()#java.lang.String.equals(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, java.lang.String, int)#<unknown>.nextProperty()#<unknown>.set(<unknown>, java.lang.String)#org.json.JSONObject.JSONObject()#java.lang.String.contains(java.lang.String)#org.apache.http.client.methods.HttpEntityEnclosingRequestBase.setEntity(org.apache.http.entity.StringEntity)#com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject)#com.inovex.zabbixmobile.api.ZabbixService.importTriggers(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader)#org.json.JSONObject.put(java.lang.String, int)#<unknown>.HostGroupData()#<unknown>.JsonArrayOrObjectReader(org.codehaus.jackson.JsonParser)#<unknown>.HostGroupData()#<unknown>.nextProperty()#java.lang.Long.parseLong(<unknown>)#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.json.JSONObject.put(java.lang.String, org.json.JSONArray)#org.json.JSONObject.put(java.lang.String, java.lang.Integer)#<unknown>.set(<unknown>, <unknown>)#<unknown>.close()#org.json.JSONObject.put(java.lang.String, org.json.JSONArray)#<unknown>.set(<unknown>, <unknown>)#java.lang.String.equals(java.lang.String)#android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null)#<unknown>.next()#org.json.JSONObject.toString()#java.lang.String.equals(<unknown>)#java.lang.String.equals(<unknown>)#android.database.sqlite.SQLiteDatabase.query(<unknown>, null, <unknown>, null, null, null, null)#<unknown>.set(<unknown>, <unknown>)#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.CacheData()#<unknown>.getText()#com.inovex.zabbixmobile.api.ZabbixService._startTransaction()#<unknown>.set(<unknown>, <unknown>)#com.inovex.zabbixmobile.api.ZabbixService._endTransaction()#<unknown>.set(<unknown>, int)#java.lang.String.equals(<unknown>)#java.util.Date.getTime()#java.lang.String.equals(java.lang.String)#org.json.JSONObject.put(java.lang.String, int)#<unknown>.set(<unknown>, <unknown>)#java.lang.Integer.parseInt(<unknown>)#org.codehaus.jackson.JsonParser.getCurrentName()#<unknown>.nextProperty()#com.inovex.zabbixmobile.api.ZabbixService._endTransaction()#java.lang.String.equals(<unknown>)#org.json.JSONObject.put(java.lang.String, int)#android.database.sqlite.SQLiteDatabase.update(<unknown>, android.content.ContentValues, <unknown>, null)#com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject)#com.inovex.zabbixmobile.api.ZabbixService._endTransaction()#java.lang.StringBuilder.append(char)#<unknown>.set(<unknown>, <unknown>)#<unknown>.get(<unknown>)#<unknown>.set(<unknown>, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject)#org.json.JSONObject.put(java.lang.String, java.lang.String)#android.database.Cursor.getLong(<unknown>)#java.lang.String.equals(<unknown>)#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.json.JSONObject.JSONObject()#org.apache.http.params.HttpProtocolParams.setVersion(org.apache.http.params.HttpParams, org.apache.http.HttpVersion)#com.inovex.zabbixmobile.api.ZabbixService.importApplications(int, int, <unknown>)#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.HistoryDetailData()#android.util.Log.d(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService._startTransaction()#<unknown>.next()#<unknown>.set(<unknown>, <unknown>)#<unknown>.nextValueToken()#org.json.JSONObject.JSONObject()#java.lang.String.equals(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService.importScreenItems(<unknown>)#java.lang.Long.parseLong(<unknown>)#java.lang.Integer.parseInt(<unknown>)#org.apache.http.client.methods.HttpPost.HttpPost(java.lang.String)#org.apache.http.StatusLine.getStatusCode()#<unknown>.set(<unknown>, int)#java.lang.String.equals(java.lang.String)#java.lang.String.equals(<unknown>)#java.lang.String.equals(<unknown>)#<unknown>.getCurrentName()#java.util.ArrayList<java.lang.String>.ArrayList, String()#com.inovex.zabbixmobile.api.ZabbixService._startTransaction()#com.inovex.zabbixmobile.api.ZabbixService.importTriggers(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader)#org.json.JSONArray.put(java.lang.String)#<unknown>.nextValueToken()#org.json.JSONArray.put(java.lang.String)#<unknown>.set(<unknown>, <unknown>)#org.json.JSONObject.put(java.lang.String, int)#org.json.JSONObject.JSONObject()#<unknown>.ScreenItemData()#<unknown>.set(<unknown>, <unknown>)#<unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>)#android.preference.PreferenceManager.getDefaultSharedPreferences(android.content.Context)#org.json.JSONObject.length()#<unknown>.nextValueToken()#java.util.HashSet<java.lang.Long>.HashSet, Long()#java.lang.String.equals(java.lang.String)#android.content.SharedPreferences.getBoolean(java.lang.String, boolean)#<unknown>.insert(android.database.sqlite.SQLiteDatabase)#org.json.JSONObject.put(java.lang.String, org.json.JSONArray)#<unknown>.close()#com.inovex.zabbixmobile.api.ZabbixService.importHosts(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader, int)#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.next()#android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null)#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.json.JSONObject.getString(java.lang.String)#<unknown>.set(<unknown>, <unknown>)#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.close()#org.json.JSONObject.getString(java.lang.String)#java.lang.String.equals(java.lang.String)#java.lang.Long.parseLong(<unknown>)#org.codehaus.jackson.JsonParser.isClosed()#org.json.JSONObject.put(java.lang.String, int)#org.json.JSONObject.put(java.lang.String, org.json.JSONArray)#java.lang.String.startsWith(java.lang.String)#org.json.JSONObject.put(java.lang.String, long)#<unknown>.close()#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.set(<unknown>, long)#org.json.JSONObject.put(java.lang.String, org.json.JSONObject)#<unknown>.set(<unknown>, <unknown>)#com.inovex.zabbixmobile.api.ZabbixService._endTransaction()#java.lang.String.replaceAll(java.lang.String, java.lang.String)#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.nextValueToken()#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.apache.http.params.BasicHttpParams.BasicHttpParams()#com.inovex.zabbixmobile.api.ZabbixService.importGraphItems(<unknown>)#android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null)#android.database.sqlite.SQLiteDatabase.beginTransaction()#com.inovex.zabbixmobile.api.ZabbixService._commitTransactionIfRecommended()#com.inovex.zabbixmobile.api.ZabbixService._endTransaction()#java.lang.String.equals(<unknown>)#<unknown>.insert(android.database.sqlite.SQLiteDatabase)#<unknown>.insert(android.database.sqlite.SQLiteDatabase)#org.json.JSONObject.put(java.lang.String, int)#<unknown>.next()#com.inovex.zabbixmobile.api.ZabbixService._startTransaction()#android.content.SharedPreferences.getString(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, null, int)#javax.net.SocketFactory.createSocket()#java.lang.Long.parseLong(<unknown>)#org.apache.http.client.CredentialsProvider.setCredentials(org.apache.http.auth.AuthScope, org.apache.http.auth.UsernamePasswordCredentials)#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.next()#com.inovex.zabbixmobile.api.ZabbixService.HttpAuthorizationRequiredException.HttpAuthorizationRequiredException()#android.database.sqlite.SQLiteQueryBuilder.query(android.database.sqlite.SQLiteDatabase, null, null, null, null, null, null)#java.util.Date.Date()#com.inovex.zabbixmobile.api.ZabbixService._commitTransactionIfRecommended()#<unknown>.set(<unknown>, java.lang.String)#org.json.JSONObject.JSONObject()#<unknown>.next()#<unknown>.set(<unknown>, <unknown>)#<unknown>.set(<unknown>, <unknown>)#com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject)#java.lang.String.equals(java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, java.lang.String)#java.lang.String.indexOf(char)#android.database.sqlite.SQLiteDatabase.query(<unknown>, null, <unknown>, null, null, null, null)#android.preference.PreferenceManager.getDefaultSharedPreferences(android.content.Context)#<unknown>.nextProperty()#org.apache.http.impl.client.CloseableHttpClient.execute(org.apache.http.client.methods.HttpPost)#<unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>)#com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, java.lang.String)#org.json.JSONObject.JSONObject()#<unknown>.close()#android.database.Cursor.getColumnIndex(<unknown>)#android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null)#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.nextProperty()#org.apache.http.conn.scheme.PlainSocketFactory.getSocketFactory()#com.inovex.zabbixmobile.api.ZabbixService._commitTransactionIfRecommended()#com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject)#java.lang.StringBuilder.toString()#org.json.JSONObject.put(java.lang.String, java.lang.String)#android.database.sqlite.SQLiteQueryBuilder.SQLiteQueryBuilder()#<unknown>.insert(android.database.sqlite.SQLiteDatabase)#org.apache.http.conn.scheme.SchemeRegistry.register(org.apache.http.conn.scheme.Scheme)#<unknown>.set(<unknown>, <unknown>)#org.json.JSONObject.JSONObject(java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService.importHosts(<unknown>, null)#java.lang.String.equals(<unknown>)#<unknown>.set(<unknown>, <unknown>)#<unknown>.set(<unknown>, <unknown>)#java.lang.IllegalStateException.IllegalStateException(java.lang.String)#java.lang.Double.parseDouble(<unknown>)#android.content.ContentValues.put(<unknown>, java.lang.Long)#android.util.Log.i(java.lang.String, java.lang.String)#android.database.sqlite.SQLiteQueryBuilder.appendWhere(<unknown>)#org.apache.http.conn.scheme.SchemeRegistry.register(org.apache.http.conn.scheme.Scheme)#org.json.JSONObject.getInt(java.lang.String)#org.json.JSONObject.put(java.lang.String, boolean)#java.lang.Long.parseLong(<unknown>)#java.lang.String.indexOf(char)#java.lang.String.equals(java.lang.String)#android.database.sqlite.SQLiteQueryBuilder.appendWhere(<unknown>)#java.lang.String.length()#java.lang.String.equals(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject)#<unknown>.nextProperty()#<unknown>.next()#android.content.SharedPreferences.getString(java.lang.String, java.lang.String)#<unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>)#com.inovex.zabbixmobile.api.ZabbixService.importTriggers(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader)#<unknown>.GraphData()#org.json.JSONArray.put(java.lang.String)#org.apache.http.impl.client.AbstractHttpClient.getParams()#<unknown>.set(<unknown>, long)#<unknown>.set(<unknown>, <unknown>)#org.json.JSONObject.getJSONObject(java.lang.String)#org.json.JSONObject.put(java.lang.String, java.lang.String)#java.lang.String.equals(java.lang.String)#org.json.JSONObject.getString(java.lang.String)#java.lang.String.equals(<unknown>)#java.lang.String.equals(<unknown>)#<unknown>.getCurrentName()#java.lang.String.equals(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService.showProgress(int)#<unknown>.getCurrentName()#com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, java.lang.String, int)#org.json.JSONObject.put(java.lang.String, int)#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.close()#java.lang.String.replace(java.lang.String, java.lang.String)#java.lang.String.equals(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject)#com.inovex.zabbixmobile.api.ZabbixService._endTransaction()#android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null)#android.database.Cursor.moveToNext()#<unknown>.HostData()#<unknown>.set(<unknown>, long)#<unknown>.next()#com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject)#android.database.sqlite.SQLiteQueryBuilder.setTables(<unknown>)#java.util.Date.getTime()#org.json.JSONObject.put(java.lang.String, long)#android.content.ContentValues.ContentValues(int)#java.lang.Long.parseLong(<unknown>)#org.apache.http.HttpResponse.getEntity()#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.getText()#java.lang.String.equals(java.lang.String)#<unknown>.set(<unknown>, <unknown>)#<unknown>.set(<unknown>, <unknown>)#<unknown>.set(<unknown>, <unknown>)#javax.net.ssl.SSLContext.init(null, javax.net.ssl.TrustManager[], null)#android.database.sqlite.SQLiteDatabase.endTransaction()#java.lang.String.equals(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, java.lang.String)#android.util.Log.d(java.lang.String, java.lang.String)#<unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>)#<unknown>.next()#<unknown>.close()#<unknown>.insert(android.database.sqlite.SQLiteDatabase)#org.json.JSONObject.put(java.lang.String, java.lang.String)#java.lang.Throwable.getMessage()#java.lang.String.equals(<unknown>)#java.lang.String.equals(<unknown>)#<unknown>.set(<unknown>, <unknown>)#com.inovex.zabbixmobile.api.ZabbixService._endTransaction()#javax.net.ssl.SSLContext.getSocketFactory()#org.json.JSONObject.JSONObject()#android.content.Context.getResources()#org.json.JSONObject.put(java.lang.String, int)#com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, null)#com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, java.lang.String, int)#java.lang.String.matches(java.lang.String)#org.json.JSONArray.put(java.lang.String)#<unknown>.set(<unknown>, <unknown>)#android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null)#android.content.Context.sendBroadcast(android.content.Intent)#org.json.JSONObject.getJSONObject(java.lang.String)#<unknown>.get(<unknown>)#android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null)#java.lang.String.equals(<unknown>)#android.content.SharedPreferences.getBoolean(java.lang.String, boolean)#java.lang.Throwable.printStackTrace()#android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null)#org.json.JSONObject.put(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService._startTransaction()#android.content.Intent.putExtra(java.lang.String, int)#org.json.JSONObject.JSONObject()#<unknown>.getText()#com.inovex.zabbixmobile.api.ZabbixService._endTransaction()#org.apache.http.client.methods.HttpPost.HttpPost(java.lang.String)#android.content.SharedPreferences.getString(java.lang.String, java.lang.String)#<unknown>.GraphItemData()#com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, java.lang.String, int)#<unknown>.nextValueToken()#org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager.ThreadSafeClientConnManager(org.apache.http.params.HttpParams, org.apache.http.conn.scheme.SchemeRegistry)#<unknown>.ApplicationItemRelationData()#java.lang.Object.toString()#android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null)#org.json.JSONArray.JSONArray()#java.lang.String.equals(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService._startTransaction()#org.json.JSONObject.put(java.lang.String, org.json.JSONArray)#<unknown>.set(<unknown>, int)#org.json.JSONObject.put(java.lang.String, int)#com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, java.lang.String, int)#org.json.JSONObject.put(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService.importItems(<unknown>, int, boolean)#org.json.JSONObject.JSONObject()#java.lang.Math.min(int, int)#com.inovex.zabbixmobile.api.ZabbixService.showProgress(<unknown>)#java.lang.String.equals(java.lang.String)#android.content.Intent.Intent(<unknown>)#java.lang.String.equals(<unknown>)#org.json.JSONObject.put(java.lang.String, int)#javax.net.ssl.SSLContext.getInstance(java.lang.String)#android.content.res.Resources.getString(<unknown>)#org.json.JSONObject.JSONObject()#android.content.Intent.Intent(<unknown>)#java.lang.String.equals(<unknown>)#<unknown>.nextProperty()#javax.net.ssl.SSLSocketFactory.createSocket(java.net.Socket, java.lang.String, int, boolean)#org.json.JSONObject.put(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject)#<unknown>.get(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService.importHosts(<unknown>, null)#java.io.IOException.IOException(java.lang.String)#java.lang.String.trim()#java.lang.String.contains(java.lang.String)#org.apache.http.entity.StringEntity.StringEntity(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService._endTransaction()#com.inovex.zabbixmobile.api.ZabbixService.importTriggers(<unknown>)#.X509TrustManager()#com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject)#android.graphics.Color.parseColor(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, null)#org.json.JSONObject.getJSONArray(java.lang.String)#org.apache.http.client.params.HttpClientParams.setRedirecting(org.apache.http.params.HttpParams, boolean)#com.inovex.zabbixmobile.api.ZabbixService._startTransaction()#<unknown>.getCurrentName()#<unknown>.getJsonArrayOrObjectReader()#java.lang.String.equals(<unknown>)#java.lang.Long.parseLong(<unknown>)#android.util.Log.d(java.lang.String, java.lang.String)#org.codehaus.jackson.JsonParser.getCurrentToken()#org.codehaus.jackson.JsonParser.nextValue()#java.lang.Long.parseLong(<unknown>)#<unknown>.getText()#java.util.Date.getTime()#android.content.Intent.putExtra(java.lang.String, <unknown>)#android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null)#<unknown>.get(<unknown>)#android.database.Cursor.moveToFirst()#org.apache.http.client.methods.HttpEntityEnclosingRequestBase.setEntity(org.apache.http.entity.StringEntity)#com.inovex.zabbixmobile.api.ZabbixService._commitTransactionIfRecommended()#com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, null)#android.database.sqlite.SQLiteQueryBuilder.appendWhere(<unknown>)#org.apache.http.auth.UsernamePasswordCredentials.UsernamePasswordCredentials(java.lang.String, java.lang.String)#java.util.Date.getTime()#java.lang.String.equals(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService._endTransaction()#org.json.JSONObject.put(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService.authenticate()#java.lang.String.equals(<unknown>)#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.json.JSONObject.put(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService.NoAPIAccessException.NoAPIAccessException()#org.json.JSONArray.put(long)#com.inovex.zabbixmobile.api.ZabbixService._endTransaction()#<unknown>.getJsonArrayOrObjectReader()#android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null)#<unknown>.ScreenData()#java.util.Date.Date()#java.util.Date.Date()#<unknown>.set(<unknown>, long)#<unknown>.getCurrentName()#org.json.JSONObject.put(java.lang.String, org.json.JSONArray)#<unknown>.set(<unknown>, long)#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.apache.http.params.HttpConnectionParams.setConnectionTimeout(org.apache.http.params.HttpParams, int)#org.json.JSONArray.length()#<unknown>.set(<unknown>, java.lang.String)#<unknown>.set(<unknown>, long)#java.util.Date.getTime()#<unknown>.set(<unknown>, <unknown>)#<unknown>.set(<unknown>, <unknown>)#org.json.JSONArray.put(java.lang.String)#java.lang.String.equals(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService.HttpAuthorizationRequiredException.HttpAuthorizationRequiredException()#<unknown>.getText()#org.json.JSONObject.put(java.lang.String, org.json.JSONArray)#com.inovex.zabbixmobile.api.ZabbixService.importEvents(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader, null)#org.json.JSONObject.JSONObject()#com.inovex.zabbixmobile.api.ZabbixService.importHostGroups(<unknown>)#<unknown>.set(<unknown>, <unknown>)#org.json.JSONObject.toString()#java.lang.Integer.parseInt(<unknown>)#android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null)#org.apache.http.params.HttpProtocolParams.setContentCharset(org.apache.http.params.HttpParams, java.lang.String)#<unknown>.get(<unknown>)#java.lang.String.equals(<unknown>)#<unknown>.set(<unknown>, <unknown>)#<unknown>.nextValueToken()#<unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>)#org.json.JSONObject.put(java.lang.String, org.json.JSONArray)#org.json.JSONObject.put(java.lang.String, java.lang.Integer)#<unknown>.getText()#<unknown>.set(<unknown>, <unknown>)#org.apache.http.message.AbstractHttpMessage.addHeader(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject)#org.json.JSONObject.getJSONArray(java.lang.String)#java.security.KeyStore.load(null, null)#java.lang.String.replace(java.lang.String, java.lang.String)#java.lang.Long.parseLong(<unknown>)#org.json.JSONObject.toString()#com.inovex.zabbixmobile.api.ZabbixService.importTriggers(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader)#android.util.Log.d(java.lang.String, java.lang.String)#android.content.SharedPreferences.getString(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, java.lang.String)#<unknown>.getJsonArrayOrObjectReader()#<unknown>.TriggerData()#android.content.SharedPreferences.getString(java.lang.String, java.lang.String)#android.content.Intent.Intent(<unknown>)#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.apache.http.impl.client.AbstractHttpClient.getCredentialsProvider()#<unknown>.set(<unknown>, <unknown>)#java.io.IOException.IOException(java.lang.String)#java.lang.String.trim()#org.json.JSONObject.put(java.lang.String, org.json.JSONArray)#java.lang.String.split(java.lang.String)#java.lang.String.equals(java.lang.String)#java.lang.String.endsWith(java.lang.String)#<unknown>.set(<unknown>, int)#com.inovex.zabbixmobile.api.ZabbixService.showProgress(int)#<unknown>.ItemData()#org.json.JSONObject.put(java.lang.String, int)#<unknown>.set(<unknown>, <unknown>)#org.codehaus.jackson.JsonParser.getText()#android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null)#org.apache.http.impl.client.DefaultHttpClient.DefaultHttpClient(org.apache.http.conn.ClientConnectionManager, org.apache.http.params.HttpParams)#<unknown>.close()#java.lang.IllegalStateException.IllegalStateException(java.lang.String)#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.codehaus.jackson.JsonParser.nextToken()#android.database.Cursor.getColumnIndex(<unknown>)#org.json.JSONObject.put(java.lang.String, org.json.JSONArray)#<unknown>.nextValueToken()#com.inovex.zabbixmobile.api.ZabbixService._startTransaction()#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.set(<unknown>, java.lang.String)#java.lang.String.substring(int, int)#java.lang.Long.parseLong(<unknown>)#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.json.JSONObject.getInt(java.lang.String)#<unknown>.getJsonArrayOrObjectReader()#java.lang.String.equals(java.lang.String)#<unknown>.set(<unknown>, <unknown>)#<unknown>.set(<unknown>, <unknown>)#java.security.KeyStore.getInstance(java.lang.String)#java.lang.Integer.parseInt(<unknown>)#java.lang.String.equals(java.lang.String)#<unknown>.nextProperty()#android.content.Intent.putExtra(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, null)#<unknown>.set(<unknown>, int)#java.io.BufferedReader.BufferedReader(java.io.InputStreamReader)#com.inovex.zabbixmobile.api.ZabbixService.importEvents(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader, int)#java.security.KeyStore.getDefaultType()#java.lang.String.equals(<unknown>)#<unknown>.getText()#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.set(<unknown>, java.lang.Object)#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.insert(android.database.sqlite.SQLiteDatabase)#<unknown>.nextProperty()#com.inovex.zabbixmobile.api.ZabbixService._startTransaction()#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.close()#<unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>)#org.json.JSONObject.put(java.lang.String, long)#com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, null, int)#<unknown>.set(<unknown>, <unknown>)#java.lang.String.equals(<unknown>)#org.apache.http.conn.scheme.Scheme.Scheme(java.lang.String, org.apache.http.conn.scheme.PlainSocketFactory, int)#org.json.JSONObject.put(java.lang.String, java.lang.String)#java.lang.String.equals(<unknown>)",
    "p_body_t": ["<empty>"],
    "c_patch_t": [" \t\t\t\tString propName = eventReader.getCurrentName();\n \t\t\t\tif (propName.equals(\"hosts\")) {\n \t\t\t\t\t// import hosts\n-\t\t\t\t\tString hostnames = (String) importHosts(eventReader.getJsonArray(), null)[0];\n+\t\t\t\t\tString hostnames = (String) importHosts(eventReader.getJsonArrayOrObjectReader(), null)[0];\n \t\t\t\t\t// store hosts namen\n \t\t\t\t\te.set(EventData.COLUMN_HOSTS, hostnames);\n \t\t\t\t} else if (propName.equals(\"triggers\")) {\n \t\t\t\t\t// import triggers\n-\t\t\t\t\timportTriggers(eventReader.getJsonArray());\n+\t\t\t\t\timportTriggers(eventReader.getJsonArrayOrObjectReader());\n \t\t\t\t} else if (propName.equals(EventData.COLUMN_EVENTID)) {\n \t\t\t\t\te.set(EventData.COLUMN_EVENTID, Long.parseLong(eventReader.getText()));\n \t\t\t\t} else if (propName.equals(EventData.COLUMN_CLOCK)) {\n@@ -776,9 +776,9 @@ public class ZabbixService {\n \t\t\t\t\t} else if (propName.equals(GraphData.COLUMN_NAME)) {\n \t\t\t\t\t\tscr.set(GraphData.COLUMN_NAME, graphReader.getText());\n \t\t\t\t\t} else if (propName.equals(\"gitems\")) {\n-\t\t\t\t\t\tmustSetGraphid = importGraphItems(graphReader.getJsonArray());\n+\t\t\t\t\t\tmustSetGraphid = importGraphItems(graphReader.getJsonArrayOrObjectReader());\n \t\t\t\t\t} else if (propName.equals(\"items\")) {\n-\t\t\t\t\t\timportItems(graphReader.getJsonArray(), 0, true);\n+\t\t\t\t\t\timportItems(graphReader.getJsonArrayOrObjectReader(), 0, true);\n \t\t\t\t\t} else {\n \t\t\t\t\t\tgraphReader.nextProperty();\n \t\t\t\t\t}\n@@ -949,7 +949,7 @@ public class ZabbixService {\n \t\t\t\t\thostnames.add(host);\n \t\t\t\t\th.set(HostData.COLUMN_HOST, host);\n \t\t\t\t} else if (propName.equals(\"groups\")) {\n-\t\t\t\t\tlong groupid = importHostGroups(hostReader.getJsonArray());\n+\t\t\t\t\tlong groupid = importHostGroups(hostReader.getJsonArrayOrObjectReader());\n \t\t\t\t\tif (groupid != -1) {\n \t\t\t\t\t\th.set(HostData.COLUMN_GROUPID, groupid);\n \t\t\t\t\t}\n@@ -1055,7 +1055,7 @@ public class ZabbixService {\n \t\t\t\t\t// at this point itemid and hostid is unknown\n \t\t\t\t\t// because of this, all applicationrelations will be saved with itemid and hostid \"-1\".\n \t\t\t\t\t// later the IDs will be replaced with the correct\n-\t\t\t\t\timportApplications(-1, -1, itemReader.getJsonArray());\n+\t\t\t\t\timportApplications(-1, -1, itemReader.getJsonArrayOrObjectReader());\n \t\t\t\t} else {\n \t\t\t\t\titemReader.nextProperty();\n \t\t\t\t}\n@@ -1176,7 +1176,7 @@ public class ZabbixService {\n \t\t\t\t\t} else if (propName.equals(ScreenData.COLUMN_NAME)) {\n \t\t\t\t\t\tscr.set(ScreenData.COLUMN_NAME, screenReader.getText());\n \t\t\t\t\t} else if (propName.equals(\"screenitems\")) {\n-\t\t\t\t\t\timportScreenItems(screenReader.getJsonArray());\n+\t\t\t\t\t\timportScreenItems(screenReader.getJsonArrayOrObjectReader());\n \t\t\t\t\t} else {\n \t\t\t\t\t\tscreenReader.nextProperty();\n \t\t\t\t\t}\n@@ -1313,14 +1313,14 @@ public class ZabbixService {\n \t\t\t\t} else if (propName.equals(TriggerData.COLUMN_URL)) {\n \t\t\t\t\tt.set(TriggerData.COLUMN_URL, triggerReader.getText());\n \t\t\t\t} else if (propName.equals(\"hosts\")) {\n-\t\t\t\t\tObject[] hostsCache = importHosts(triggerReader.getJsonArray(), null);\n+\t\t\t\t\tObject[] hostsCache = importHosts(triggerReader.getJsonArrayOrObjectReader(), null);\n \t\t\t\t\tt.set(TriggerData.COLUMN_HOSTS, hostsCache[0]);\n \t\t\t\t\tt.set(TriggerData.COLUMN_HOSTID, hostsCache[1]);\n \t\t\t\t} else if (propName.equals(\"groups\")) {\n-\t\t\t\t\timportHostGroups(triggerReader.getJsonArray());\n+\t\t\t\t\timportHostGroups(triggerReader.getJsonArrayOrObjectReader());\n \t\t\t\t} else if (propName.equals(\"items\")) {\n \t\t\t\t\t// store the first item id\n-\t\t\t\t\tt.set(TriggerData.COLUMN_ITEMID, importItems(triggerReader.getJsonArray(), 1, true));\n+\t\t\t\t\tt.set(TriggerData.COLUMN_ITEMID, importItems(triggerReader.getJsonArrayOrObjectReader(), 1, true));\n \t\t\t\t} else {\n \t\t\t\t\ttriggerReader.nextProperty();\n \t\t\t\t}"],
    "c_body_t": ["<empty>"],
    "c_email_sni": "jschamburger@inovex.de",
    "p_patch_t": [" \tpublic class ZabbixConfig {\n \t\tpublic static final int APPLICATION_GET_LIMIT = 1000;\n \t\tpublic static final int EVENTS_GET_LIMIT = 60;\n-\t\tpublic static final int HISTORY_GET_TIME_FROM_SHIFT = 8*60*60; // -8h\n+\t\tpublic static final int HISTORY_GET_TIME_FROM_SHIFT = 24*60*60; // -24h\n \t\tpublic static final int HISTORY_GET_LIMIT = 8000;\n \t\tpublic static final int HOSTGROUP_GET_LIMIT = 200;\n \t\tpublic static final int HOST_GET_LIMIT = 300;\n@@ -172,6 +172,11 @@ public class ZabbixService {\n \tprivate int transformProgressEnd;\n \tprivate boolean _notAuthorizedRetry;\n \tprivate boolean isVersion2 = true;\n+\t/**\n+\t * The API version. From 1.8.3 (maybe earlier) to 2.0 (excluded), this was 1.3. With 2.0, it changed to 1.4. \n+\t * Finally, since 2.0.4, the API version matches the program version.\n+\t */\n+\tprivate String apiVersion = \"\";\n \n \t/**\n \t * init\n@@ -499,8 +504,9 @@ public class ZabbixService {\n \t\t\t\t\t\"apiinfo.version\"\n \t\t\t\t\t, new JSONObject()\n \t\t\t);\n-\t\t\tisVersion2 = result.getString(\"result\").equals(\"1.4\");\n-\t\t\tLog.i(\"ZabbixService\", \"Zabbix Server Version: isVersion2=\"+isVersion2);\n+\t\t\tapiVersion = result.getString(\"result\");\n+\t\t\tisVersion2 = (apiVersion.equals(\"1.4\") || apiVersion.startsWith(\"2\"));\n+\t\t\tLog.i(\"ZabbixService\", \"Zabbix API Version: \" + apiVersion);\n \t\t}\n \t\treturn token != null;\n \t}\n@@ -802,7 +808,7 @@ public class ZabbixService {\n \n \t\t\t// the past 2 hours\n \t\t\tlong time_till = new Date().getTime() / 1000;\n-\t\t\tlong time_from = time_till - ZabbixConfig.HISTORY_GET_TIME_FROM_SHIFT; // jetzt-2h\n+\t\t\tlong time_from = time_till - ZabbixConfig.HISTORY_GET_TIME_FROM_SHIFT;\n \n \t\t\t// Workaround: historydetails only comes if you use the correct \"history\"-parameter.\n \t\t\t// this parameter can be \"null\" or a number 0-4. Because we don't know when to use which,"],
    "repo_sni": "inovex/zax",
    "_version_": 1526823823588982784,
    "c_user_sni": "Johannes Schamburger",
    "c_callsites_added_cs": "<unknown>.getJsonArrayOrObjectReader()#<unknown>.getJsonArrayOrObjectReader()#<unknown>.getJsonArrayOrObjectReader()#<unknown>.getJsonArrayOrObjectReader()#<unknown>.getJsonArrayOrObjectReader()#<unknown>.getJsonArrayOrObjectReader()",
    "p_parents_ss": ["bae0223e3d008ee05a94f9b7db30eec6844110b6"],
    "p_user_sni": "Johannes Schamburger",
    "c_subject_t": ["- DetailsItemFragmentSupport: removed debug output - JsonObjectReader: changed method getJsonArrayOrObjectReader() to handle objects or arrays (necessary because graph items are encapsulated in objects in API version 1.4+) - added eclipse preferences for building with Java 1.6"],
    "c_imports_added_cs": "<empty>",
    "c_callsites_removed_cs": "<unknown>.getJsonArray()#<unknown>.getJsonArray()#<unknown>.getJsonArray()#<unknown>.getJsonArray()#<unknown>.getJsonArray()#<unknown>.getJsonArray()"
  }, {
    "c_patch_no_context_t": ["+\t\t\t\t\t.put(\"message\", comment)"],
    "p_patch_no_context_t": ["-\t\t\t\t\tString hostnames = (String) importHosts(eventReader.getJsonArray(), null)[0];\n+\t\t\t\t\tString hostnames = (String) importHosts(eventReader.getJsonArrayOrObjectReader(), null)[0];\n-\t\t\t\t\timportTriggers(eventReader.getJsonArray());\n+\t\t\t\t\timportTriggers(eventReader.getJsonArrayOrObjectReader());\n-\t\t\t\t\t\tmustSetGraphid = importGraphItems(graphReader.getJsonArray());\n+\t\t\t\t\t\tmustSetGraphid = importGraphItems(graphReader.getJsonArrayOrObjectReader());\n-\t\t\t\t\t\timportItems(graphReader.getJsonArray(), 0, true);\n+\t\t\t\t\t\timportItems(graphReader.getJsonArrayOrObjectReader(), 0, true);\n-\t\t\t\t\tlong groupid = importHostGroups(hostReader.getJsonArray());\n+\t\t\t\t\tlong groupid = importHostGroups(hostReader.getJsonArrayOrObjectReader());\n-\t\t\t\t\timportApplications(-1, -1, itemReader.getJsonArray());\n+\t\t\t\t\timportApplications(-1, -1, itemReader.getJsonArrayOrObjectReader());\n-\t\t\t\t\t\timportScreenItems(screenReader.getJsonArray());\n+\t\t\t\t\t\timportScreenItems(screenReader.getJsonArrayOrObjectReader());\n-\t\t\t\t\tObject[] hostsCache = importHosts(triggerReader.getJsonArray(), null);\n+\t\t\t\t\tObject[] hostsCache = importHosts(triggerReader.getJsonArrayOrObjectReader(), null);\n-\t\t\t\t\timportHostGroups(triggerReader.getJsonArray());\n+\t\t\t\t\timportHostGroups(triggerReader.getJsonArrayOrObjectReader());\n-\t\t\t\t\tt.set(TriggerData.COLUMN_ITEMID, importItems(triggerReader.getJsonArray(), 1, true));\n+\t\t\t\t\tt.set(TriggerData.COLUMN_ITEMID, importItems(triggerReader.getJsonArrayOrObjectReader(), 1, true));"],
    "c_date_tdt": "May 13, 2013 6:36:17 AM",
    "c_imports_t": ["android.database.sqlite.SQLiteQueryBuilder org.apache.http.conn.scheme.SchemeRegistry java.util.HashSet org.apache.http.params.BasicHttpParams android.content.Context org.apache.http.params.HttpParams org.apache.http.conn.scheme.PlainSocketFactory java.util.ArrayList com.inovex.zabbixmobile.model.ItemData com.inovex.zabbixmobile.model.HostData com.inovex.zabbixmobile.model.GraphData com.inovex.zabbixmobile.model.EventData org.apache.http.auth.UsernamePasswordCredentials org.apache.http.params.HttpConnectionParams android.content.SharedPreferences java.security.KeyManagementException org.apache.http.conn.ClientConnectionManager org.codehaus.jackson.JsonFactory org.apache.http.entity.StringEntity java.util.Set org.apache.http.params.HttpProtocolParams com.inovex.zabbixmobile.model.ApplicationItemRelationData com.inovex.zabbixmobile.model.TriggerData org.codehaus.jackson.JsonToken android.database.Cursor java.net.Socket android.content.Intent org.apache.http.protocol.HTTP org.json.JSONException java.net.UnknownHostException com.inovex.zabbixmobile.model.HistoryDetailData org.apache.http.HttpResponse java.security.KeyStore com.inovex.zabbixmobile.ZabbixContentProvider android.preference.PreferenceManager android.util.Log org.json.JSONObject java.security.NoSuchAlgorithmException org.apache.http.client.params.HttpClientParams java.io.IOException org.apache.http.conn.scheme.Scheme org.apache.http.client.methods.HttpPost javax.net.ssl.SSLContext org.apache.http.auth.AuthScope org.apache.http.conn.ssl.SSLSocketFactory java.security.KeyStoreException android.content.ContentValues java.io.InputStreamReader java.util.Date java.security.UnrecoverableKeyException android.graphics.Color org.apache.http.client.ClientProtocolException com.inovex.zabbixmobile.model.GraphItemData org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager org.json.JSONArray com.inovex.zabbixmobile.model.CacheData javax.net.ssl.SSLPeerUnverifiedException com.inovex.zabbixmobile.model.HostGroupData org.codehaus.jackson.JsonParseException java.security.cert.X509Certificate org.apache.http.HttpVersion android.database.sqlite.SQLiteDatabase java.util.List java.security.cert.CertificateException java.io.BufferedReader com.inovex.zabbixmobile.model.ApplicationData com.inovex.zabbixmobile.model.ScreenItemData javax.net.ssl.TrustManager com.inovex.zabbixmobile.model.ScreenData com.inovex.zabbixmobile.R org.codehaus.jackson.JsonParser org.apache.http.impl.client.DefaultHttpClient javax.net.ssl.X509TrustManager"],
    "c_contents_t": ["package com.inovex.zabbixmobile.api;\n\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.net.Socket;\nimport java.net.UnknownHostException;\nimport java.security.KeyManagementException;\nimport java.security.KeyStore;\nimport java.security.KeyStoreException;\nimport java.security.NoSuchAlgorithmException;\nimport java.security.UnrecoverableKeyException;\nimport java.security.cert.CertificateException;\nimport java.security.cert.X509Certificate;\nimport java.util.ArrayList;\nimport java.util.Date;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Set;\n\nimport javax.net.ssl.SSLContext;\nimport javax.net.ssl.SSLPeerUnverifiedException;\nimport javax.net.ssl.TrustManager;\nimport javax.net.ssl.X509TrustManager;\n\nimport org.apache.http.HttpResponse;\nimport org.apache.http.HttpVersion;\nimport org.apache.http.auth.AuthScope;\nimport org.apache.http.auth.UsernamePasswordCredentials;\nimport org.apache.http.client.ClientProtocolException;\nimport org.apache.http.client.methods.HttpPost;\nimport org.apache.http.client.params.HttpClientParams;\nimport org.apache.http.conn.ClientConnectionManager;\nimport org.apache.http.conn.scheme.PlainSocketFactory;\nimport org.apache.http.conn.scheme.Scheme;\nimport org.apache.http.conn.scheme.SchemeRegistry;\nimport org.apache.http.conn.ssl.SSLSocketFactory;\nimport org.apache.http.entity.StringEntity;\nimport org.apache.http.impl.client.DefaultHttpClient;\nimport org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager;\nimport org.apache.http.params.BasicHttpParams;\nimport org.apache.http.params.HttpConnectionParams;\nimport org.apache.http.params.HttpParams;\nimport org.apache.http.params.HttpProtocolParams;\nimport org.apache.http.protocol.HTTP;\nimport org.codehaus.jackson.JsonFactory;\nimport org.codehaus.jackson.JsonParseException;\nimport org.codehaus.jackson.JsonParser;\nimport org.codehaus.jackson.JsonToken;\nimport org.json.JSONArray;\nimport org.json.JSONException;\nimport org.json.JSONObject;\n\nimport android.content.ContentValues;\nimport android.content.Context;\nimport android.content.Intent;\nimport android.content.SharedPreferences;\nimport android.database.Cursor;\nimport android.database.sqlite.SQLiteDatabase;\nimport android.database.sqlite.SQLiteQueryBuilder;\nimport android.graphics.Color;\nimport android.preference.PreferenceManager;\nimport android.util.Log;\n\nimport com.inovex.zabbixmobile.R;\nimport com.inovex.zabbixmobile.ZabbixContentProvider;\nimport com.inovex.zabbixmobile.model.ApplicationData;\nimport com.inovex.zabbixmobile.model.ApplicationItemRelationData;\nimport com.inovex.zabbixmobile.model.CacheData;\nimport com.inovex.zabbixmobile.model.EventData;\nimport com.inovex.zabbixmobile.model.GraphData;\nimport com.inovex.zabbixmobile.model.GraphItemData;\nimport com.inovex.zabbixmobile.model.HistoryDetailData;\nimport com.inovex.zabbixmobile.model.HostData;\nimport com.inovex.zabbixmobile.model.HostGroupData;\nimport com.inovex.zabbixmobile.model.ItemData;\nimport com.inovex.zabbixmobile.model.ScreenData;\nimport com.inovex.zabbixmobile.model.ScreenItemData;\nimport com.inovex.zabbixmobile.model.TriggerData;\n\n/**\n * interface to connect to the zabbix server\n */\npublic class ZabbixService {\n\tclass CustomSSLSocketFactory extends SSLSocketFactory {\n\t\tSSLContext sslContext = SSLContext.getInstance(\"TLS\");\n\n\t\tpublic CustomSSLSocketFactory(KeyStore truststore) throws NoSuchAlgorithmException, KeyManagementException, KeyStoreException, UnrecoverableKeyException {\n\t\t\tsuper(truststore);\n\t\t\tTrustManager tm = new X509TrustManager() {\n\t\t\t\t@Override\n\t\t\t\tpublic void checkClientTrusted(X509Certificate[] chain,\n\t\t\t\t\t\tString authType) throws CertificateException {\n\t\t\t\t}\n\t\t\t\t@Override\n\t\t\t\tpublic void checkServerTrusted(X509Certificate[] chain,\n\t\t\t\t\t\tString authType) throws CertificateException {\n\t\t\t\t}\n\t\t\t\t@Override\n\t\t\t\tpublic X509Certificate[] getAcceptedIssuers() {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t};\n\t\t\tsslContext.init(null, new TrustManager[] { tm }, null);\n\t\t}\n\n\t\t@Override\n\t\tpublic Socket createSocket() throws IOException {\n\t\t\treturn sslContext.getSocketFactory().createSocket();\n\t\t}\n\n\t\t@Override\n\t\tpublic Socket createSocket(Socket socket, String host, int port, boolean autoClose) throws IOException, UnknownHostException {\n\t\t\treturn sslContext.getSocketFactory().createSocket(socket, host, port, autoClose);\n\t\t}\n\t}\n\n\t/**\n\t * http auth is needed\n\t */\n\tpublic class HttpAuthorizationRequiredException extends Exception {\n\t\tprivate static final long serialVersionUID = 6632422081858878147L;\n\t}\n\n\t/**\n\t * zabbix error: no api access\n\t */\n\tpublic class NoAPIAccessException extends Exception {\n\t\tprivate static final long serialVersionUID = 6381395987443456382L;\n\t}\n\n\t/**\n\t * probably too old zabbix <= 1.8.2\n\t */\n\tpublic class PreconditionFailedException extends Exception {\n\t\tprivate static final long serialVersionUID = -2529885710860745023L;\n\t}\n\n\t/**\n\t * global constants\n\t */\n\tpublic class ZabbixConfig {\n\t\tpublic static final int APPLICATION_GET_LIMIT = 1000;\n\t\tpublic static final int EVENTS_GET_LIMIT = 60;\n\t\tpublic static final int HISTORY_GET_TIME_FROM_SHIFT = 24*60*60; // -24h\n\t\tpublic static final int HISTORY_GET_LIMIT = 8000;\n\t\tpublic static final int HOSTGROUP_GET_LIMIT = 200;\n\t\tpublic static final int HOST_GET_LIMIT = 300;\n\t\tpublic static final int ITEM_GET_LIMIT = 200;\n\t\tpublic static final int TRIGGER_GET_LIMIT = 100;\n\t\tpublic static final int EVENT_GET_TIME_FROM_SHIFT = 7*24*60*60; // -7 days\n\t\tpublic static final int CACHE_LIFETIME_APPLICATIONS = 2*24*60*60; // 2 days\n\t\tpublic static final int CACHE_LIFETIME_EVENTS = 120;\n\t\tpublic static final int CACHE_LIFETIME_HISTORY_DETAILS = 4*60;\n\t\tpublic static final int CACHE_LIFETIME_HOST_GROUPS = 7*24*60*60;\n\t\tpublic static final int CACHE_LIFETIME_HOSTS = 2*24*60*60;\n\t\tpublic static final int CACHE_LIFETIME_SCREENS = 2*24*60*60;\n\t\tpublic static final int CACHE_LIFETIME_ITEMS = 4*60;\n\t\tpublic static final int CACHE_LIFETIME_TRIGGERS = 2*60;\n\t\tpublic static final long STATUS_SHOW_TRIGGER_TIME = 14*24*60*60;\n\t\tpublic static final int HTTP_CONNECTION_TIMEOUT = 30000;\n\t}\n\n\tprivate final DefaultHttpClient httpClient;\n\tprivate final SQLiteDatabase zabbixLocalDB;\n\tprivate String url;\n\tprivate String token;\n\tprivate final Context context;\n\tprivate int _transactionStack;\n\tprivate JsonParser lastStream;\n\tprivate int transformProgressStart;\n\tprivate int transformProgressEnd;\n\tprivate boolean _notAuthorizedRetry;\n\tprivate boolean isVersion2 = true;\n\t/**\n\t * The API version. From 1.8.3 (maybe earlier) to 2.0 (excluded), this was 1.3. With 2.0, it changed to 1.4. \n\t * Finally, since 2.0.4, the API version matches the program version.\n\t */\n\tprivate String apiVersion = \"\";\n\n\t/**\n\t * init\n\t * @param context android context\n\t * @param zabbixLocalDB sqlite\n\t */\n\tpublic ZabbixService(Context context, SQLiteDatabase zabbixLocalDB) {\n\t\tClientConnectionManager ccm = null;\n\t\tHttpParams params = null;\n\n\t\ttry {\n\t\t\tSharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(context);\n\t\t\tif (prefs.getBoolean(\"zabbix_trust_all_ssl_ca\", false)) {\n\t\t\t\tKeyStore trustStore = KeyStore.getInstance(KeyStore.getDefaultType());\n\t\t\t\ttrustStore.load(null, null);\n\n\t\t\t\tSSLSocketFactory sf = new CustomSSLSocketFactory(trustStore);\n\t\t\t\tsf.setHostnameVerifier(SSLSocketFactory.ALLOW_ALL_HOSTNAME_VERIFIER);\n\n\t\t\t\tparams = new BasicHttpParams();\n\t\t\t\tHttpProtocolParams.setVersion(params, HttpVersion.HTTP_1_1);\n\t\t\t\tHttpProtocolParams.setContentCharset(params, HTTP.UTF_8);\n\n\t\t\t\tSchemeRegistry registry = new SchemeRegistry();\n\t\t\t\tregistry.register(new Scheme(\"http\", PlainSocketFactory.getSocketFactory(), 80));\n\t\t\t\tregistry.register(new Scheme(\"https\", sf, 443));\n\n\t\t\t\tccm = new ThreadSafeClientConnManager(params, registry);\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\t// ignore for unit test\n\t\t}\n\n\t\tif (ccm == null || params == null) {\n\t\t\thttpClient = new DefaultHttpClient();\n\t\t} else {\n\t\t\thttpClient = new DefaultHttpClient(ccm, params);\n\t\t}\n\n\t\t// if applicable http auth\n\t\ttry {\n\t\t\tSharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(context);\n\t\t\tif (prefs.getBoolean(\"http_auth_enabled\", false)) {\n\t\t\t\tString user = prefs.getString(\"http_auth_username\", \"\");\n\t\t\t\tString pwd = prefs.getString(\"http_auth_password\", \"\");\n\t\t\t\thttpClient.getCredentialsProvider().setCredentials(AuthScope.ANY, new UsernamePasswordCredentials(user, pwd));\n\t\t\t}\n\t\t} catch (java.lang.UnsupportedOperationException e1) {\n\t\t\t// for unit test\n\t\t}\n\n\t\tparams = httpClient.getParams();\n\t\tHttpClientParams.setRedirecting(params, true); // redirecting\n\t\tHttpConnectionParams.setConnectionTimeout(params, ZabbixConfig.HTTP_CONNECTION_TIMEOUT);\n\t\tthis.context = context;\n\t\tthis.zabbixLocalDB = zabbixLocalDB;\n\t}\n\n\t/**\n\t * counts the sql inserts/updates and do a transaction commit to save the memory\n\t */\n\tprivate void _commitTransactionIfRecommended() {\n\t\tif (_transactionStack++ > 50) {\n\t\t\t_endTransaction();\n\t\t\t_startTransaction();\n\t\t}\n\t}\n\n\t/**\n\t * commit sql transaction\n\t */\n\tpublic void _endTransaction() {\n\t\tif (zabbixLocalDB.inTransaction()) {\n\t\t\tzabbixLocalDB.setTransactionSuccessful();\n\t\t\tzabbixLocalDB.endTransaction();\n\t\t}\n\t}\n\n\t/**\n\t * zabbix api call. data will be parsed as json object on-the-fly.\n\t * Caution: use this only for api calls with a small return data.\n\t * @param method\n\t * @param params\n\t * @return\n\t * @throws ClientProtocolException\n\t * @throws IOException\n\t * @throws JSONException\n\t * @throws HttpAuthorizationRequiredException\n\t * @throws NoAPIAccessException\n\t */\n\tprivate JSONObject _queryBuffer(String method, JSONObject params) throws ClientProtocolException, IOException, JSONException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\tHttpPost post = new HttpPost(url);\n\t\tpost.addHeader(\"Content-Type\", \"application/json; charset=utf-8\");\n\n\t\tString json =\n\t\t\t\"{\" +\n\t\t\t\"\t\\\"jsonrpc\\\" : \\\"2.0\\\",\" +\n\t\t\t\"\t\\\"method\\\" : \\\"\"+method+\"\\\",\" +\n\t\t\t\"\t\\\"params\\\" : \"+params.toString()+\",\" +\n\t\t\t\"\t\\\"auth\\\" : \"+(token==null?\"null\":'\"'+token+'\"')+\",\" +\n\t\t\t\"\t\\\"id\\\" : 0\" +\n\t\t\t\"}\";\n\n\t\tpost.setEntity(new StringEntity(json, \"UTF-8\"));\n\t\ttry {\n\t\t\tHttpResponse resp = httpClient.execute(post);\n\t\t\tif (resp.getStatusLine().getStatusCode() == 401) {\n\t\t\t\t// http auth failed\n\t\t\t\tthrow new HttpAuthorizationRequiredException();\n\t\t\t} else if (resp.getStatusLine().getStatusCode() == 412) {\n\t\t\t\t\t// Precondition failed / Looks like Zabbix 1.8.2\n\t\t\t\tthrow new PreconditionFailedException();\n\t\t\t} else if (resp.getStatusLine().getStatusCode() == 404) {\n\t\t\t\t// file not found\n\t\t\t\tthrow new IOException(resp.getStatusLine().getStatusCode()+\" \"+resp.getStatusLine().getReasonPhrase());\n\t\t\t} else {\n\t\t\t\tLog.d(\"ZabbixService\", resp.getStatusLine().getStatusCode()+\" \"+resp.getStatusLine().getReasonPhrase());\n\t\t\t}\n\t\t\tStringBuilder total = new StringBuilder();\n\t\t\tBufferedReader rd = new BufferedReader(new InputStreamReader(resp.getEntity().getContent()));\n\t\t\tint chr;\n\t\t\twhile ((chr = rd.read()) != -1) {\n\t\t\t\ttotal.append((char) chr);\n\t\t\t}\n\t\t\tJSONObject result = new JSONObject(total.toString());\n\t\t\ttry {\n\t\t\t\tif (result.getJSONObject(\"error\") != null) {\n\t\t\t\t\tif (result.getJSONObject(\"error\").getString(\"data\").equals(\"No API access\")) {\n\t\t\t\t\t\tthrow new NoAPIAccessException();\n\t\t\t\t\t} else throw new RuntimeException(result.getJSONObject(\"error\").toString());\n\t\t\t\t}\n\t\t\t\tif (result.getString(\"data\").equals(\"Not authorized\")) {\n\t\t\t\t\t// first do a new auth and then try the same api call again\n\t\t\t\t\tif (authenticate() && !_notAuthorizedRetry) {\n\t\t\t\t\t\t_notAuthorizedRetry = true;\n\t\t\t\t\t\tJSONObject r = _queryBuffer(method, params);\n\t\t\t\t\t\t_notAuthorizedRetry = false;\n\t\t\t\t\t\treturn r;\n\t\t\t\t\t} throw new IllegalStateException(result.toString());\n\t\t\t\t}\n\t\t\t} catch (JSONException e) {\n\t\t\t\t// ignore\n\t\t\t}\n\t\t\treturn result;\n\t\t} catch (SSLPeerUnverifiedException e) {\n\t\t\t// SSL not trusted\n\t\t\tIntent intent = new Intent(ZabbixContentProvider.CONTENT_PROVIDER_INTENT_ACTION);\n\t\t\tintent.putExtra(\"flag\", ZabbixContentProvider.INTENT_FLAG_SSL_NOT_TRUSTED);\n\t\t\tcontext.sendBroadcast(intent);\n\t\t\tthrow e;\n\t\t} catch (IOException e) {\n\t\t\t// internet problem\n\t\t\t// send intent to GUI\n\t\t\tIntent intent = new Intent(ZabbixContentProvider.CONTENT_PROVIDER_INTENT_ACTION);\n\t\t\tintent.putExtra(\"flag\", ZabbixContentProvider.INTENT_FLAG_CONNECTION_FAILED);\n\t\t\tintent.putExtra(\"value\", e.getMessage());\n\t\t\tcontext.sendBroadcast(intent);\n\t\t\tthrow e;\n\t\t}\n\t}\n\n\t/**\n\t * zabbix api call as stream.\n\t * @param method\n\t * @param params\n\t * @return stream im json array wrapper\n\t * @throws JSONException\n\t * @throws IOException\n\t * @throws HttpAuthorizationRequiredException\n\t * @throws NoAPIAccessException\n\t */\n\tprivate JsonArrayOrObjectReader _queryStream(String method, JSONObject params) throws JSONException, IOException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\t// http request\n\t\tHttpPost post = new HttpPost(url);\n\t\tpost.addHeader(\"Content-Type\", \"application/json; charset=utf-8\");\n\n\t\tJSONObject json = new JSONObject()\n\t\t\t.put(\"jsonrpc\", \"2.0\")\n\t\t\t.put(\"method\", method)\n\t\t\t.put(\"params\", params)\n\t\t\t.put(\"auth\", token)\n\t\t\t.put(\"id\", 0);\n\n\t\tLog.d(\"ZabbixService\", \"_queryStream: \"+url);\n\t\tLog.d(\"ZabbixService\", \"_queryStream: \"+json.toString());\n\n\t\tpost.setEntity(new StringEntity(json.toString(), \"UTF-8\"));\n\t\ttry {\n\t\t\tHttpResponse resp = httpClient.execute(post);\n\t\t\tif (resp.getStatusLine().getStatusCode() == 401) {\n\t\t\t\t// http auth failed\n\t\t\t\tthrow new HttpAuthorizationRequiredException();\n\t\t\t}\n\n\t\t\tJsonFactory jsonFac = new JsonFactory();\n\t\t\tJsonParser jp = jsonFac.createJsonParser(resp.getEntity().getContent());\n\t\t\t// store the last stream to close it if an exception will be thrown\n\t\t\tlastStream = jp;\n\t\t\tif (jp.nextToken() != JsonToken.START_OBJECT) {\n\t\t\t\tthrow new IOException(\"Expected data to start with an Object\");\n\t\t\t}\n\t\t\tdo {\n\t\t\t\tjp.nextToken();\n\t\t\t\tif (jp.getCurrentName().equals(\"error\")) {\n\t\t\t\t\tjp.nextToken();\n\t\t\t\t\tString errortxt = \"\";\n\t\t\t\t\twhile (jp.nextToken() != JsonToken.END_OBJECT) {\n\t\t\t\t\t\terrortxt += jp.getText();\n\t\t\t\t\t}\n\t\t\t\t\tif (errortxt.contains(\"No API access\")) {\n\t\t\t\t\t\tthrow new NoAPIAccessException();\n\t\t\t\t\t} else if (errortxt.contains(\"Not authorized\")) {\n\t\t\t\t\t\t// first do a new auth and then try the same api call again\n\t\t\t\t\t\tif (authenticate() && !_notAuthorizedRetry) {\n\t\t\t\t\t\t\t_notAuthorizedRetry = true;\n\t\t\t\t\t\t\tJsonArrayOrObjectReader r = _queryStream(method, params);\n\t\t\t\t\t\t\t_notAuthorizedRetry = false;\n\t\t\t\t\t\t\treturn r;\n\t\t\t\t\t\t} else throw new IllegalStateException(errortxt);\n\t\t\t\t\t} else throw new IllegalStateException(\"JSON API Error: \"+errortxt);\n\t\t\t\t}\n\t\t\t} while (!jp.getCurrentName().equals(\"result\"));\n\n\t\t\t// result array found\n\t\t\tif (jp.nextToken() != JsonToken.START_ARRAY && jp.getCurrentToken() != JsonToken.START_OBJECT) { // go inside the array\n\t\t\t\ttry {\n\t\t\t\t\tLog.d(\"ZabbixService\", \"current token: \"+jp.getCurrentToken());\n\t\t\t\t\tLog.d(\"ZabbixService\", \"current name: \"+jp.getCurrentName());\n\t\t\t\t\tLog.d(\"ZabbixService\", \"get text: \"+jp.getText());\n\t\t\t\t\tLog.d(\"ZabbixService\", \"next value: \"+jp.nextValue());\n\t\t\t\t\tLog.d(\"ZabbixService\", \"next token: \"+jp.nextToken());\n\t\t\t\t\tLog.d(\"ZabbixService\", \"current token: \"+jp.getCurrentToken());\n\t\t\t\t\tLog.d(\"ZabbixService\", \"current name: \"+jp.getCurrentName());\n\t\t\t\t\tLog.d(\"ZabbixService\", \"get text: \"+jp.getText());\n\t\t\t\t} catch (Exception e) {}\n\t\t\t\tthrow new IOException(\"Expected data to start with an Array\");\n\t\t\t}\n\t\t\treturn new JsonArrayOrObjectReader(jp);\n\t\t} catch (SSLPeerUnverifiedException e) {\n\t\t\tthrow e;\n\t\t} catch (IOException e) {\n\t\t\t// internet problem\n\t\t\t// send intent to GUI\n\t\t\tIntent intent = new Intent(ZabbixContentProvider.CONTENT_PROVIDER_INTENT_ACTION);\n\t\t\tintent.putExtra(\"flag\", ZabbixContentProvider.INTENT_FLAG_CONNECTION_FAILED);\n\t\t\tcontext.sendBroadcast(intent);\n\t\t\tthrow e;\n\t\t}\n\t}\n\n\t/**\n\t * begin sql transaction\n\t */\n\tprivate void _startTransaction() {\n\t\tzabbixLocalDB.beginTransaction();\n\t\t_transactionStack = 0;\n\t}\n\n\t/**\n\t * acknowledge zabbix event. Sets ack-flag with comment.\n\t * Caution: This is supported only for Zabbix version >= 1.8.4\n\t * @param eventid\n\t * @param comment\n\t * @return true, success.\n\t * @throws ClientProtocolException\n\t * @throws IOException\n\t * @throws JSONException\n\t * @throws HttpAuthorizationRequiredException\n\t * @throws NoAPIAccessException\n\t */\n\tpublic boolean acknowledgeEvent(String eventid, String comment) throws ClientProtocolException, IOException, JSONException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\t// for GUI unit test, just return true\n\t\tif (comment != null && comment.equals(\"__UNIT_TEST__RETURN_TRUE__\")) return true;\n\n\t\tJSONObject result = _queryBuffer(\n\t\t\t\t\"event.acknowledge\"\n\t\t\t\t, new JSONObject()\n\t\t\t\t\t.put(\"eventids\", new JSONArray().put(eventid))\n\t\t\t\t\t.put(\"message\", comment)\n\t\t);\n\t\t// it can be an (empty) array\n\t\ttry {\n\t\t\treturn result.getJSONObject(\"result\").getJSONArray(\"eventids\").length() == 1;\n\t\t} catch (JSONException e) {\n\t\t\t// or a json object\n\t\t\treturn result.getJSONObject(\"result\").getJSONObject(\"eventids\").length() == 1;\n\t\t}\n\t}\n\n\t/**\n\t * zabbix auth. user and pwd from app preferences\n\t * @return true success\n\t * @throws ClientProtocolException\n\t * @throws IOException\n\t * @throws JSONException\n\t * @throws HttpAuthorizationRequiredException\n\t * @throws NoAPIAccessException\n\t */\n\tpublic boolean authenticate() throws ClientProtocolException, IOException, JSONException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\tSharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(context);\n\t\tString url = prefs.getString(\"zabbix_url\", \"\").trim();\n\t\tString user = prefs.getString(\"zabbix_username\", \"\").trim();\n\t\tString password = prefs.getString(\"zabbix_password\", \"\");\n\n\t\tthis.url = url+(url.endsWith(\"/\")?\"\":'/')+\"api_jsonrpc.php\";\n\t\tLog.d(\"ZabbixContentProvider\", url+\"//\"+user);\n\n\t\ttry {\n\t\t\tJSONObject result = _queryBuffer(\n\t\t\t\t\t\"user.authenticate\"\n\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t\t.put(\"user\", user)\n\t\t\t\t\t\t.put(\"password\", password)\n\t\t\t);\n\t\t\ttoken = result.getString(\"result\");\n\t\t} catch (JSONException e) {\n\t\t\t// there's no result\n\t\t\te.printStackTrace();\n\t\t} catch (RuntimeException e) {\n\t\t\t// wrong password. token remains null\n\t\t\te.printStackTrace();\n\t\t}\n\t\tif (token != null) {\n\t\t\t// get API version\n\t\t\tJSONObject result = _queryBuffer(\n\t\t\t\t\t\"apiinfo.version\"\n\t\t\t\t\t, new JSONObject()\n\t\t\t);\n\t\t\tapiVersion = result.getString(\"result\");\n\t\t\tisVersion2 = (apiVersion.equals(\"1.4\") || apiVersion.startsWith(\"2\"));\n\t\t\tLog.i(\"ZabbixService\", \"Zabbix API Version: \" + apiVersion);\n\t\t}\n\t\treturn token != null;\n\t}\n\n\t/**\n\t * close the last http stream\n\t */\n\tpublic void closeLastStream() {\n\t\tif (lastStream != null && !lastStream.isClosed()) {\n\t\t\ttry {\n\t\t\t\tlastStream.close();\n\t\t\t} catch (IOException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate void importApplications(long hostid, long itemid, JsonArrayOrObjectReader jsonArray) throws JsonParseException, NumberFormatException, IOException {\n\t\tint num = 0;\n\t\tJsonObjectReader application;\n\t\twhile ((application = jsonArray.next()) != null) {\n\t\t\tApplicationData app = new ApplicationData();\n\t\t\twhile (application.nextValueToken()) {\n\t\t\t\tString propName = application.getCurrentName();\n\t\t\t\tif (propName.equals(ApplicationData.COLUMN_APPLICATIONID)) {\n\t\t\t\t\tapp.set(ApplicationData.COLUMN_APPLICATIONID, Long.parseLong(application.getText()));\n\t\t\t\t} else if (propName.equals(ApplicationData.COLUMN_NAME)) {\n\t\t\t\t\tapp.set(ApplicationData.COLUMN_NAME, application.getText());\n\t\t\t\t} else if (propName.equals(ApplicationData.COLUMN_HOSTID)) {\n\t\t\t\t\tapp.set(ApplicationData.COLUMN_HOSTID, Long.parseLong(application.getText()));\n\t\t\t\t} else {\n\t\t\t\t\tapplication.nextProperty();\n\t\t\t\t}\n\t\t\t}\n\t\t\t// create applications that does not exist\n\t\t\tapp.insert(zabbixLocalDB, ApplicationData.COLUMN_APPLICATIONID);\n\t\t\t_commitTransactionIfRecommended();\n\n\t\t\t// create ApplicationItemRelation\n\t\t\tlong appid = (Long) app.get(ApplicationData.COLUMN_APPLICATIONID);\n\t\t\tApplicationItemRelationData rel = new ApplicationItemRelationData();\n\t\t\trel.set(ApplicationItemRelationData.COLUMN_APPLICATIONID, appid);\n\t\t\trel.set(ApplicationItemRelationData.COLUMN_ITEMID, itemid);\n\t\t\trel.set(ApplicationItemRelationData.COLUMN_HOSTID, hostid);\n\t\t\trel.insert(zabbixLocalDB);\n\t\t\t_commitTransactionIfRecommended();\n\n\t\t\tnum++;\n\t\t}\n\t\tif (num == 0) {\n\t\t\t// if there's no application, the ID #0 must be added (for other)\n\t\t\tApplicationItemRelationData rel = new ApplicationItemRelationData();\n\t\t\trel.set(ApplicationItemRelationData.COLUMN_APPLICATIONID, 0);\n\t\t\trel.set(ApplicationItemRelationData.COLUMN_ITEMID, itemid);\n\t\t\trel.set(ApplicationItemRelationData.COLUMN_HOSTID, hostid);\n\t\t\trel.insert(zabbixLocalDB);\n\n\t\t\t// if #0 \"other\" does not exist yet, it has to be created\n\t\t\tApplicationData app = new ApplicationData();\n\t\t\tapp.set(ApplicationData.COLUMN_APPLICATIONID, 0);\n\t\t\tapp.set(ApplicationData.COLUMN_NAME, \"- \"+context.getResources().getString(R.string.other)+\" -\");\n\t\t\tapp.insert(zabbixLocalDB, ApplicationData.COLUMN_APPLICATIONID);\n\t\t}\n\t}\n\n\t/**\n\t * import the newest event of a trigger\n\t * @param triggerid\n\t * @throws JSONException\n\t * @throws IOException\n\t * @throws HttpAuthorizationRequiredException\n\t * @throws NoAPIAccessException\n\t */\n\tpublic void importEventByTriggerId(String triggerid) throws JSONException, IOException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\tif (!isCached(EventData.TABLE_NAME, \"triggerid=\"+triggerid)) {\n\t\t\t_startTransaction();\n\t\t\tzabbixLocalDB.delete(EventData.TABLE_NAME, EventData.COLUMN_OBJECTID+\"=\"+triggerid, null);\n\n\t\t\tJSONObject params = new JSONObject()\n\t\t\t\t.put(\"output\", \"extend\")\n\t\t\t\t.put(isVersion2?\"selectHosts\":\"select_hosts\", \"extend\")\n\t\t\t\t.put(\"triggerids\", new JSONArray().put(triggerid))\n\t\t\t\t.put(\"limit\", 1)\n\t\t\t\t.put(\"source\", 0);\n\t\t\tif (!isVersion2) {\n\t\t\t\tparams.put(\"sortfield\", \"clock\")\n\t\t\t\t\t.put(\"sortorder\", \"DESC\");\n\t\t\t}\n\n\t\t\tJsonArrayOrObjectReader events = _queryStream(\n\t\t\t\t\t\"event.get\"\n\t\t\t\t\t, params\n\t\t\t);\n\t\t\timportEvents(events, null);\n\t\t\tevents.close();\n\n\t\t\tsetCached(EventData.TABLE_NAME, \"triggerid=\"+triggerid, ZabbixConfig.CACHE_LIFETIME_EVENTS);\n\t\t\t_endTransaction();\n\t\t}\n\t}\n\n\t/**\n\t * import the newest events\n\t * @throws ClientProtocolException\n\t * @throws IOException\n\t * @throws JSONException\n\t * @throws HttpAuthorizationRequiredException\n\t * @throws NoAPIAccessException\n\t */\n\tpublic void importEvents() throws ClientProtocolException, IOException, JSONException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\tif (!isCached(EventData.TABLE_NAME, null)) {\n\t\t\t_startTransaction();\n\t\t\tzabbixLocalDB.delete(EventData.TABLE_NAME, null, null);\n\t\t\tzabbixLocalDB.delete(TriggerData.TABLE_NAME, null, null);\n\t\t\tzabbixLocalDB.delete(CacheData.TABLE_NAME, CacheData.COLUMN_KIND+\"='\"+EventData.TABLE_NAME+\"'\", null);\n\t\t\tzabbixLocalDB.delete(CacheData.TABLE_NAME, CacheData.COLUMN_KIND+\"='\"+TriggerData.TABLE_NAME+\"'\", null);\n\n\t\t\tint numEvents = ZabbixConfig.EVENTS_GET_LIMIT;\n\n\t\t\tJSONObject params = new JSONObject()\n\t\t\t\t.put(\"output\", \"extend\")\n\t\t\t\t.put(\"limit\", ZabbixConfig.EVENTS_GET_LIMIT)\n\t\t\t\t.put(isVersion2?\"selectHosts\":\"select_hosts\", \"extend\")\n\t\t\t\t.put(isVersion2?\"selectTriggers\":\"select_triggers\", \"extend\")\n\t\t\t\t.put(\"source\", 0)\n\t\t\t\t.put(\"time_from\", (new Date().getTime()/1000) - ZabbixConfig.EVENT_GET_TIME_FROM_SHIFT);\n\t\t\tif (!isVersion2) {\n\t\t\t\t// in Zabbix version <2.0, this is not default\n\t\t\t\tparams.put(\"sortfield\", \"clock\")\n\t\t\t\t\t.put(\"sortorder\", \"DESC\");\n\t\t\t}\n\t\t\tJsonArrayOrObjectReader events = _queryStream(\n\t\t\t\t\t\"event.get\"\n\t\t\t\t\t, params\n\t\t\t);\n\t\t\timportEvents(events, numEvents);\n\t\t\tevents.close();\n\n\t\t\tsetCached(EventData.TABLE_NAME, null, ZabbixConfig.CACHE_LIFETIME_EVENTS);\n\t\t\t_endTransaction();\n\t\t}\n\t}\n\n\t/**\n\t * @param events stream\n\t * @param numEvents if null, no progressbar-update AND only isert, if it does not exist. If !null, progressbar-update AND always insert without checking\n\t * @throws JsonParseException\n\t * @throws IOException\n\t */\n\tprivate void importEvents(JsonArrayOrObjectReader events, Integer numEvents) throws JsonParseException, IOException {\n\t\tint i=0;\n\t\tJsonObjectReader eventReader;\n\t\twhile ((eventReader = events.next()) != null) {\n\t\t\tEventData e = new EventData();\n\t\t\twhile (eventReader.nextValueToken()) {\n\t\t\t\tString propName = eventReader.getCurrentName();\n\t\t\t\tif (propName.equals(\"hosts\")) {\n\t\t\t\t\t// import hosts\n\t\t\t\t\tString hostnames = (String) importHosts(eventReader.getJsonArrayOrObjectReader(), null)[0];\n\t\t\t\t\t// store hosts namen\n\t\t\t\t\te.set(EventData.COLUMN_HOSTS, hostnames);\n\t\t\t\t} else if (propName.equals(\"triggers\")) {\n\t\t\t\t\t// import triggers\n\t\t\t\t\timportTriggers(eventReader.getJsonArrayOrObjectReader());\n\t\t\t\t} else if (propName.equals(EventData.COLUMN_EVENTID)) {\n\t\t\t\t\te.set(EventData.COLUMN_EVENTID, Long.parseLong(eventReader.getText()));\n\t\t\t\t} else if (propName.equals(EventData.COLUMN_CLOCK)) {\n\t\t\t\t\te.set(EventData.COLUMN_CLOCK, Integer.parseInt(eventReader.getText()));\n\t\t\t\t} else if (propName.equals(EventData.COLUMN_OBJECTID)) {\n\t\t\t\t\te.set(EventData.COLUMN_OBJECTID, Long.parseLong(eventReader.getText()));\n\t\t\t\t} else if (propName.equals(EventData.COLUMN_ACK)) {\n\t\t\t\t\te.set(EventData.COLUMN_ACK, Integer.parseInt(eventReader.getText()) == 1);\n\t\t\t\t} else if (propName.equals(EventData.COLUMN_VALUE)) {\n\t\t\t\t\te.set(EventData.COLUMN_VALUE, Integer.parseInt(eventReader.getText()));\n\t\t\t\t} else {\n\t\t\t\t\teventReader.nextProperty();\n\t\t\t\t}\n\t\t\t}\n\t\t\t// event is parsed and can be inserted into the db\n\t\t\tif (numEvents == null) {\n\t\t\t\te.insert(zabbixLocalDB, EventData.COLUMN_EVENTID);\n\t\t\t} else {\n\t\t\t\te.insert(zabbixLocalDB);\n\t\t\t\tif (++i % 10 == 0) {\n\t\t\t\t\tshowProgress(i*100/numEvents);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t_commitTransactionIfRecommended();\n\t\t}\n\t}\n\n\t/**\n\t * import graph items\n\t *\n\t * @param graphItems\n\t * @return true, if graphid column has to be updated from -1 to the correct graphid later.\n\t * @throws JsonParseException\n\t * @throws NumberFormatException\n\t * @throws IOException\n\t */\n\tprivate boolean importGraphItems(JsonArrayOrObjectReader graphItems) throws JsonParseException, NumberFormatException, IOException {\n\t\tboolean mustSetGraphid = false;\n\t\tJsonObjectReader graphItemReader;\n\t\twhile ((graphItemReader = graphItems.next()) != null) {\n\t\t\tGraphItemData gi = new GraphItemData();\n\t\t\twhile (graphItemReader.nextValueToken()) {\n\t\t\t\tString propName = graphItemReader.getCurrentName();\n\t\t\t\tif (propName.equals(\"gitemid\")) {\n\t\t\t\t\tgi.set(GraphItemData.COLUMN_GRAPHITEMID, Long.parseLong(graphItemReader.getText()));\n\t\t\t\t} else if (propName.equals(GraphItemData.COLUMN_GRAPHID)) {\n\t\t\t\t\tgi.set(GraphItemData.COLUMN_GRAPHID, Long.parseLong(graphItemReader.getText()));\n\t\t\t\t} else if (propName.equals(GraphItemData.COLUMN_ITEMID)) {\n\t\t\t\t\tgi.set(GraphItemData.COLUMN_ITEMID, Long.parseLong(graphItemReader.getText()));\n\t\t\t\t} else if (propName.equals(GraphItemData.COLUMN_COLOR)) {\n\t\t\t\t\t// hex string => color int\n\t\t\t\t\tgi.set(GraphItemData.COLUMN_COLOR, Color.parseColor(\"#\"+graphItemReader.getText()));\n\t\t\t\t} else {\n\t\t\t\t\tgraphItemReader.nextProperty();\n\t\t\t\t}\n\t\t\t}\n\t\t\t// if graphid-column was not set, this must be done later. temporary graphid=-1\n\t\t\tif (gi.get(GraphItemData.COLUMN_GRAPHID) == null) {\n\t\t\t\tgi.set(GraphItemData.COLUMN_GRAPHID, -1);\n\t\t\t\tmustSetGraphid = true;\n\t\t\t}\n\t\t\tgi.insert(zabbixLocalDB);\n\t\t}\n\t\treturn mustSetGraphid;\n\t}\n\n\tpublic void importGraphsForScreen(long screenid) throws ClientProtocolException, IOException, JSONException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\tif (!isCached(GraphData.TABLE_NAME, \"screenid=\"+screenid)) {\n\t\t\t_startTransaction();\n\n\t\t\t// collect all graphids\n\t\t\tSet<Long> graphids = new HashSet<Long>();\n\t\t\tCursor cur = zabbixLocalDB.query(ScreenItemData.TABLE_NAME, null, ScreenItemData.COLUMN_SCREENID+\"=\"+screenid, null, null, null, null);\n\t\t\twhile (cur.moveToNext()) {\n\t\t\t\tgraphids.add(cur.getLong(cur.getColumnIndex(ScreenItemData.COLUMN_RESOURCEID)));\n\t\t\t}\n\n\t\t\t// delete old graphs\n\t\t\tString str_graphids = graphids.toString().replace(\"[\", \"\").replace(\"]\", \"\");\n\t\t\tif (str_graphids.length()>0) {\n\t\t\t\tzabbixLocalDB.delete(GraphData.TABLE_NAME, GraphData.COLUMN_GRAPHID+\" IN (\"+str_graphids+\")\", null);\n\t\t\t\tzabbixLocalDB.delete(GraphItemData.TABLE_NAME, GraphItemData.COLUMN_GRAPHID+\" IN (\"+str_graphids+\")\", null);\n\t\t\t}\n\t\t\tzabbixLocalDB.delete(CacheData.TABLE_NAME, CacheData.COLUMN_KIND+\"='\"+GraphData.TABLE_NAME+\"' AND \"+CacheData.COLUMN_FILTER+\"='screenid=\"+screenid+'\\'', null);\n\n\t\t\tJsonArrayOrObjectReader graphs = _queryStream(\n\t\t\t\t\t\"graph.get\"\n\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t\t.put(isVersion2?\"selectGraphItems\":\"select_graph_items\", \"extend\")\n\t\t\t\t\t\t.put(isVersion2?\"selectItems\":\"select_items\", \"extend\")\n\t\t\t\t\t\t.put(\"output\", \"extend\")\n\t\t\t\t\t\t.put(\"graphids\", new JSONArray(graphids))\n\t\t\t);\n\t\t\tJsonObjectReader graphReader;\n\t\t\twhile ((graphReader = graphs.next()) != null) {\n\t\t\t\tboolean mustSetGraphid = false;\n\t\t\t\tGraphData scr = new GraphData();\n\t\t\t\twhile (graphReader.nextValueToken()) {\n\t\t\t\t\tString propName = graphReader.getCurrentName();\n\t\t\t\t\tif (propName.equals(GraphData.COLUMN_GRAPHID)) {\n\t\t\t\t\t\tscr.set(GraphData.COLUMN_GRAPHID, Long.parseLong(graphReader.getText()));\n\t\t\t\t\t} else if (propName.equals(GraphData.COLUMN_NAME)) {\n\t\t\t\t\t\tscr.set(GraphData.COLUMN_NAME, graphReader.getText());\n\t\t\t\t\t} else if (propName.equals(\"gitems\")) {\n\t\t\t\t\t\tmustSetGraphid = importGraphItems(graphReader.getJsonArrayOrObjectReader());\n\t\t\t\t\t} else if (propName.equals(\"items\")) {\n\t\t\t\t\t\timportItems(graphReader.getJsonArrayOrObjectReader(), 0, true);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tgraphReader.nextProperty();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tscr.insert(zabbixLocalDB);\n\t\t\t\tif (mustSetGraphid) {\n\t\t\t\t\tContentValues values = new ContentValues(1);\n\t\t\t\t\tvalues.put(GraphItemData.COLUMN_GRAPHID, (Long) scr.get(GraphData.COLUMN_GRAPHID));\n\t\t\t\t\tzabbixLocalDB.update(\n\t\t\t\t\t\t\tGraphItemData.TABLE_NAME\n\t\t\t\t\t\t\t, values\n\t\t\t\t\t\t\t, GraphItemData.COLUMN_GRAPHID+\"=-1\"\n\t\t\t\t\t\t\t, null);\n\t\t\t\t}\n\t\t\t}\n\t\t\tgraphs.close();\n\n\t\t\tsetCached(GraphData.TABLE_NAME, \"screenid=\"+screenid, ZabbixConfig.CACHE_LIFETIME_SCREENS);\n\t\t\t_endTransaction();\n\t\t}\n\t}\n\n\tpublic void importHistoryDetails(String itemid) throws ClientProtocolException, IOException, JSONException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\tif (!isCached(HistoryDetailData.TABLE_NAME, itemid)) {\n\t\t\t_startTransaction();\n\t\t\tzabbixLocalDB.delete(HistoryDetailData.TABLE_NAME, HistoryDetailData.COLUMN_ITEMID+\"=\"+itemid, null);\n\n\t\t\t// the past 2 hours\n\t\t\tlong time_till = new Date().getTime() / 1000;\n\t\t\tlong time_from = time_till - ZabbixConfig.HISTORY_GET_TIME_FROM_SHIFT;\n\n\t\t\t// Workaround: historydetails only comes if you use the correct \"history\"-parameter.\n\t\t\t// this parameter can be \"null\" or a number 0-4. Because we don't know when to use which,\n\t\t\t// we try them all, until we get results.\n\t\t\tInteger historytype = null;\n\t\t\tJSONObject result = _queryBuffer(\n\t\t\t\t\t\"history.get\"\n\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t\t.put(\"limit\", 1)\n\t\t\t\t\t\t.put(\"history\", historytype) // for integer ?\n\t\t\t\t\t\t.put(\"itemids\", new JSONArray().put(itemid))\n\t\t\t\t\t\t.put(\"time_from\", time_from)\n\t\t\t);\n\n\t\t\tJSONArray testHistorydetails = result.getJSONArray(\"result\");\n\t\t\tif (testHistorydetails.length() == 0) {\n\t\t\t\thistorytype = -1;\n\t\t\t\twhile (testHistorydetails.length() == 0 && ++historytype <= 4) {\n\t\t\t\t\t// if we get an empty array, we try another history parameter\n\t\t\t\t\tresult = _queryBuffer(\n\t\t\t\t\t\t\t\"history.get\"\n\t\t\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t\t\t\t.put(\"output\", \"extend\")\n\t\t\t\t\t\t\t\t.put(\"limit\", 1)\n\t\t\t\t\t\t\t\t.put(\"history\", historytype)\n\t\t\t\t\t\t\t\t.put(\"itemids\", new JSONArray().put(itemid))\n\t\t\t\t\t\t\t\t.put(\"time_from\", time_from)\n\t\t\t\t\t);\n\t\t\t\t\ttestHistorydetails = result.getJSONArray(\"result\");\n\t\t\t\t}\n\t\t\t}\n\t\t\t// correct historytype found and there are data\n\t\t\tif (testHistorydetails.length() > 0) {\n\t\t\t\t// count of the entries cannot be detected (zabbix bug),\n\t\t\t\t// so we use a fiction\n\t\t\t\tint numDetails = 400;\n\t\t\t\tint curI=0;\n\t\t\t\tJsonArrayOrObjectReader historydetails = _queryStream(\n\t\t\t\t\t\t\"history.get\"\n\t\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t\t\t.put(\"output\", \"extend\")\n\t\t\t\t\t\t\t.put(\"limit\", ZabbixConfig.HISTORY_GET_LIMIT)\n\t\t\t\t\t\t\t.put(\"history\", historytype)\n\t\t\t\t\t\t\t.put(\"itemids\", new JSONArray().put(itemid))\n\t\t\t\t\t\t\t.put(\"time_from\", time_from)\n\t\t\t\t\t\t\t.put(\"sortfield\", \"clock\")\n\t\t\t\t\t\t\t.put(\"sortorder\", \"DESC\")\n\t\t\t\t);\n\t\t\t\tJsonObjectReader historydetail;\n\t\t\t\ttry {\n\t\t\t\t\tint selI = 0;\n\t\t\t\t\twhile ((historydetail = historydetails.next()) != null) {\n\t\t\t\t\t\t// save only every 20th\n\t\t\t\t\t\tif (selI++ % 20 != 0) {\n\t\t\t\t\t\t\twhile (historydetail.nextValueToken()) {\n\t\t\t\t\t\t\t\thistorydetail.nextProperty();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tHistoryDetailData h = new HistoryDetailData();\n\t\t\t\t\t\twhile (historydetail.nextValueToken()) {\n\t\t\t\t\t\t\tString propName = historydetail.getCurrentName();\n\t\t\t\t\t\t\tif (propName.equals(HistoryDetailData.COLUMN_CLOCK)) {\n\t\t\t\t\t\t\t\th.set(HistoryDetailData.COLUMN_CLOCK, Integer.parseInt(historydetail.getText()));\n\t\t\t\t\t\t\t} else if (propName.equals(HistoryDetailData.COLUMN_ITEMID)) {\n\t\t\t\t\t\t\t\th.set(HistoryDetailData.COLUMN_ITEMID, Long.parseLong(historydetail.getText()));\n\t\t\t\t\t\t\t} else if (propName.equals(HistoryDetailData.COLUMN_VALUE)) {\n\t\t\t\t\t\t\t\th.set(HistoryDetailData.COLUMN_VALUE, Double.parseDouble(historydetail.getText()));\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\thistorydetail.nextProperty();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\th.insert(zabbixLocalDB);\n\t\t\t\t\t\tif (++curI % 10 == 0) {\n\t\t\t\t\t\t\tshowProgress(Math.min(curI*100/numDetails, 84));\n\t\t\t\t\t\t}\n\t\t\t\t\t\t_commitTransactionIfRecommended();\n\t\t\t\t\t}\n\t\t\t\t} catch (NumberFormatException e) {\n\t\t\t\t\t// data are unuseable, e.g. because it's a string\n\t\t\t\t}\n\t\t\t\thistorydetails.close();\n\t\t\t}\n\t\t\tsetCached(HistoryDetailData.TABLE_NAME, itemid, ZabbixConfig.CACHE_LIFETIME_HISTORY_DETAILS);\n\t\t\t_endTransaction();\n\t\t}\n\t}\n\n\tprivate long importHostGroups(JsonArrayOrObjectReader jsonArray) throws JsonParseException, IOException {\n\t\tlong firstHostGroupId = -1;\n\t\tJsonObjectReader hostReader;\n\t\twhile ((hostReader = jsonArray.next()) != null) {\n\t\t\tHostGroupData h = new HostGroupData();\n\t\t\twhile (hostReader.nextValueToken()) {\n\t\t\t\tString propName = hostReader.getCurrentName();\n\t\t\t\tif (propName.equals(HostGroupData.COLUMN_GROUPID)) {\n\t\t\t\t\tlong id = Long.parseLong(hostReader.getText());\n\t\t\t\t\tif (firstHostGroupId == -1) firstHostGroupId = id;\n\t\t\t\t\th.set(HostGroupData.COLUMN_GROUPID, id);\n\t\t\t\t} else if (propName.equals(HostGroupData.COLUMN_NAME)) {\n\t\t\t\t\th.set(HostGroupData.COLUMN_NAME, hostReader.getText());\n\t\t\t\t} else {\n\t\t\t\t\thostReader.nextProperty();\n\t\t\t\t}\n\t\t\t}\n\t\t\th.insert(zabbixLocalDB, HostGroupData.COLUMN_GROUPID);\n\t\t\t_commitTransactionIfRecommended();\n\t\t}\n\n\t\treturn firstHostGroupId;\n\t}\n\n\t/**\n\t * import the hosts from stream\n\t * @param jsonArray stream\n\t * @param numHosts count of hosts for progressbar. null if unknown.\n\t * @return Object[] {(String) comma-separated all Hostnames, (Long) 1. host id}\n\t * @throws JsonParseException\n\t * @throws IOException\n\t */\n\tprivate Object[] importHosts(JsonArrayOrObjectReader jsonArray, Integer numHosts) throws JsonParseException, IOException {\n\t\tList<String> hostnames = new ArrayList<String>();\n\t\tlong firstHostId = -1;\n\t\tJsonObjectReader hostReader;\n\t\tint i=0;\n\t\twhile ((hostReader = jsonArray.next()) != null) {\n\t\t\tHostData h = new HostData();\n\t\t\twhile (hostReader.nextValueToken()) {\n\t\t\t\tString propName = hostReader.getCurrentName();\n\t\t\t\tif (propName.equals(HostData.COLUMN_HOSTID)) {\n\t\t\t\t\th.set(HostData.COLUMN_HOSTID, Long.parseLong(hostReader.getText()));\n\t\t\t\t\tif (firstHostId == -1) {\n\t\t\t\t\t\tfirstHostId = (Long) h.get(HostData.COLUMN_HOSTID);\n\t\t\t\t\t}\n\t\t\t\t} else if (propName.equals(HostData.COLUMN_HOST)) {\n\t\t\t\t\tString host = hostReader.getText();\n\t\t\t\t\thostnames.add(host);\n\t\t\t\t\th.set(HostData.COLUMN_HOST, host);\n\t\t\t\t} else if (propName.equals(\"groups\")) {\n\t\t\t\t\tlong groupid = importHostGroups(hostReader.getJsonArrayOrObjectReader());\n\t\t\t\t\tif (groupid != -1) {\n\t\t\t\t\t\th.set(HostData.COLUMN_GROUPID, groupid);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\thostReader.nextProperty();\n\t\t\t\t}\n\t\t\t}\n\t\t\t// host without group will get group #0 (other)\n\t\t\tif (h.get(HostData.COLUMN_GROUPID) == null) {\n\t\t\t\th.set(HostData.COLUMN_GROUPID, 0);\n\t\t\t\t// create \"other\" hostgroup #1\n\t\t\t\tHostGroupData hg = new HostGroupData();\n\t\t\t\thg.set(HostGroupData.COLUMN_GROUPID, 0);\n\t\t\t\thg.set(HostGroupData.COLUMN_NAME, \"- \"+context.getResources().getString(R.string.other)+\" -\");\n\t\t\t\thg.insert(zabbixLocalDB, HostGroupData.COLUMN_GROUPID);\n\t\t\t}\n\t\t\th.insert(zabbixLocalDB, HostData.COLUMN_HOSTID);\n\t\t\tif (numHosts != null && ++i % 10 == 0) {\n\t\t\t\tshowProgress(i*100/numHosts);\n\t\t\t}\n\t\t\t_commitTransactionIfRecommended();\n\t\t}\n\n\t\treturn new Object[] {hostnames.toString().replaceAll(\"[\\\\[\\\\]]\", \"\"), firstHostId};\n\t}\n\n\tpublic void importHostsAndGroups() throws JSONException, IOException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\tif (!isCached(HostData.TABLE_NAME, null)) {\n\t\t\t_startTransaction();\n\t\t\tzabbixLocalDB.delete(HostData.TABLE_NAME, null, null);\n\t\t\tzabbixLocalDB.delete(HostGroupData.TABLE_NAME, null, null);\n\n\t\t\t// get count of hosts\n\t\t\tJSONObject result = _queryBuffer(\n\t\t\t\t\t\"host.get\"\n\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t\t.put(\"countOutput\", 1)\n\t\t\t\t\t\t.put(\"limit\", ZabbixConfig.HOST_GET_LIMIT)\n\t\t\t\t\t\t.put(isVersion2?\"selectGroups\":\"select_groups\", \"extend\")\n\t\t\t);\n\t\t\tint numHosts = result.getInt(\"result\");\n\t\t\tJsonArrayOrObjectReader hosts = _queryStream(\n\t\t\t\t\t\"host.get\"\n\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t\t.put(\"output\", \"extend\")\n\t\t\t\t\t\t.put(\"limit\", ZabbixConfig.HOST_GET_LIMIT)\n\t\t\t\t\t\t.put(isVersion2?\"selectGroups\":\"select_groups\", \"extend\")\n\t\t\t);\n\t\t\timportHosts(hosts, numHosts);\n\t\t\thosts.close();\n\n\t\t\tsetCached(HostData.TABLE_NAME, null, ZabbixConfig.CACHE_LIFETIME_HOSTS);\n\t\t\t_endTransaction();\n\t\t}\n\t}\n\n\t/**\n\t * import items from stream.\n\t * @param items stream\n\t * @param numItems count for progressbar, if 0 no progressbarupdate\n\t * @param checkBeforeInsert if true, only make an insert if item does not exist\n\t * @return the first item id\n\t * @throws JsonParseException\n\t * @throws IOException\n\t */\n\tprivate long importItems(JsonArrayOrObjectReader items, int numItems, boolean checkBeforeInsert) throws JsonParseException, IOException {\n\t\tlong firstItemId = -1;\n\t\tint curI=0;\n\t\tJsonObjectReader itemReader;\n\t\twhile ((itemReader = items.next()) != null) {\n\t\t\tItemData i = new ItemData();\n\t\t\tString key_ = null;\n\t\t\twhile (itemReader.nextValueToken()) {\n\t\t\t\tString propName = itemReader.getCurrentName();\n\t\t\t\tif (propName.equals(ItemData.COLUMN_ITEMID)) {\n\t\t\t\t\ti.set(ItemData.COLUMN_ITEMID, Long.parseLong(itemReader.getText()));\n\t\t\t\t\tif (firstItemId == -1) {\n\t\t\t\t\t\tfirstItemId = (Long) i.get(ItemData.COLUMN_ITEMID);\n\t\t\t\t\t}\n\t\t\t\t} else if (propName.equals(ItemData.COLUMN_HOSTID)) {\n\t\t\t\t\ti.set(ItemData.COLUMN_HOSTID, Long.parseLong(itemReader.getText()));\n\t\t\t\t} else if (propName.equals(ItemData.COLUMN_DESCRIPTION) || propName.equals(\"name\")) {\n\t\t\t\t\t// since zabbix 2.x is the name of the item \"name\"\n\t\t\t\t\t// before zabbix 2.x the name field was \"description\"\n\t\t\t\t\tif (isVersion2 && propName.equals(\"name\")) {\n\t\t\t\t\t\ti.set(ItemData.COLUMN_DESCRIPTION, itemReader.getText());\n\t\t\t\t\t} else if (!isVersion2) {\n\t\t\t\t\t\ti.set(ItemData.COLUMN_DESCRIPTION, itemReader.getText());\n\t\t\t\t\t}\n\t\t\t\t} else if (propName.equals(ItemData.COLUMN_LASTCLOCK)) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\ti.set(ItemData.COLUMN_LASTCLOCK, Integer.parseInt(itemReader.getText()));\n\t\t\t\t\t} catch (NumberFormatException e) {\n\t\t\t\t\t\t// ignore\n\t\t\t\t\t}\n\t\t\t\t} else if (propName.equals(ItemData.COLUMN_LASTVALUE)) {\n\t\t\t\t\ti.set(ItemData.COLUMN_LASTVALUE, itemReader.getText());\n\t\t\t\t} else if (propName.equals(ItemData.COLUMN_UNITS)) {\n\t\t\t\t\ti.set(ItemData.COLUMN_UNITS, itemReader.getText());\n\t\t\t\t} else if (propName.equals(\"key_\")) {\n\t\t\t\t\tkey_ = itemReader.getText();\n\t\t\t\t} else if (propName.equals(\"applications\")) {\n\t\t\t\t\t// at this point itemid and hostid is unknown\n\t\t\t\t\t// because of this, all applicationrelations will be saved with itemid and hostid \"-1\".\n\t\t\t\t\t// later the IDs will be replaced with the correct\n\t\t\t\t\timportApplications(-1, -1, itemReader.getJsonArrayOrObjectReader());\n\t\t\t\t} else {\n\t\t\t\t\titemReader.nextProperty();\n\t\t\t\t}\n\t\t\t}\n\t\t\t// if applicable replace placeholder\n\t\t\tString description = (String) i.get(ItemData.COLUMN_DESCRIPTION);\n\t\t\tif (description.matches(\".*\\\\$[0-9].*\")) {\n\t\t\t\tif (key_ != null && key_.indexOf('[') != -1) {\n\t\t\t\t\tString[] keys = key_.substring(key_.indexOf('[')+1, key_.indexOf(']')).split(\",\");\n\t\t\t\t\tfor (int ix=0; ix<keys.length; ix++) {\n\t\t\t\t\t\tdescription = description.replace(\"$\"+(ix+1), keys[ix]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\ti.set(ItemData.COLUMN_DESCRIPTION, description);\n\t\t\tif (checkBeforeInsert) {\n\t\t\t\ti.insert(zabbixLocalDB, ItemData.COLUMN_ITEMID);\n\t\t\t} else {\n\t\t\t\ti.insert(zabbixLocalDB);\n\t\t\t}\n\t\t\tif (numItems > 0 && ++curI % 10 == 0) {\n\t\t\t\tshowProgress(curI*100/numItems);\n\t\t\t}\n\n\t\t\t// now the \"-1\" IDs of applicationsrelation will be replaced with the correct itemID\n\t\t\tContentValues values = new ContentValues(2);\n\t\t\tvalues.put(ApplicationItemRelationData.COLUMN_ITEMID, (Long) i.get(ItemData.COLUMN_ITEMID));\n\t\t\tvalues.put(ApplicationItemRelationData.COLUMN_HOSTID, (Long) i.get(ItemData.COLUMN_HOSTID));\n\t\t\tzabbixLocalDB.update(\n\t\t\t\t\tApplicationItemRelationData.TABLE_NAME\n\t\t\t\t\t, values\n\t\t\t\t\t, ApplicationItemRelationData.COLUMN_ITEMID+\"=-1\"\n\t\t\t\t\t, null\n\t\t\t);\n\t\t}\n\t\treturn firstItemId;\n\t}\n\n\tpublic void importItems(long hostid) throws JSONException, IOException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\tif (!isCached(ItemData.TABLE_NAME, \"hostid=\"+hostid)) {\n\t\t\t_startTransaction();\n\t\t\tzabbixLocalDB.delete(ItemData.TABLE_NAME, ItemData.COLUMN_HOSTID+\"=\"+hostid, null);\n\t\t\tzabbixLocalDB.delete(ApplicationItemRelationData.TABLE_NAME, ApplicationItemRelationData.COLUMN_HOSTID+\"=\"+hostid, null);\n\n\t\t\t// count of items\n\t\t\tJSONObject result = _queryBuffer(\n\t\t\t\t\t\"item.get\"\n\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t.put(\"output\", \"extend\")\n\t\t\t\t\t.put(\"countOutput\", 1)\n\t\t\t\t\t.put(\"limit\", ZabbixConfig.ITEM_GET_LIMIT)\n\t\t\t\t\t.put(\"hostids\", new JSONArray().put(hostid))\n\t\t\t);\n\t\t\tint numItems = result.getInt(\"result\");\n\t\t\tJsonArrayOrObjectReader items = _queryStream(\n\t\t\t\t\t\"item.get\"\n\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t\t.put(\"output\", \"extend\")\n\t\t\t\t\t\t.put(\"limit\", ZabbixConfig.ITEM_GET_LIMIT)\n\t\t\t\t\t\t.put(isVersion2?\"selectApplications\":\"select_applications\", \"extend\")\n\t\t\t\t\t\t.put(\"hostids\", new JSONArray().put(hostid))\n\t\t\t);\n\t\t\timportItems(items, numItems, false);\n\t\t\titems.close();\n\n\t\t\tsetCached(ItemData.TABLE_NAME, \"hostid=\"+hostid, ZabbixConfig.CACHE_LIFETIME_ITEMS);\n\t\t\t_endTransaction();\n\t\t}\n\t}\n\n\tprivate void importScreenItems(JsonArrayOrObjectReader screenItems) throws JsonParseException, NumberFormatException, IOException {\n\t\tJsonObjectReader screenItemReader;\n\t\twhile ((screenItemReader = screenItems.next()) != null) {\n\t\t\tScreenItemData si = new ScreenItemData();\n\t\t\tint resourcetype = -1;\n\t\t\twhile (screenItemReader.nextValueToken()) {\n\t\t\t\tString propName = screenItemReader.getCurrentName();\n\t\t\t\tif (propName.equals(ScreenItemData.COLUMN_SCREENITEMID)) {\n\t\t\t\t\tsi.set(ScreenItemData.COLUMN_SCREENITEMID, Long.parseLong(screenItemReader.getText()));\n\t\t\t\t} else if (propName.equals(ScreenItemData.COLUMN_SCREENID)) {\n\t\t\t\t\tsi.set(ScreenItemData.COLUMN_SCREENID, Long.parseLong(screenItemReader.getText()));\n\t\t\t\t} else if (propName.equals(ScreenItemData.COLUMN_RESOURCEID)) {\n\t\t\t\t\tsi.set(ScreenItemData.COLUMN_RESOURCEID, Long.parseLong(screenItemReader.getText()));\n\t\t\t\t} else if (propName.equals(\"resourcetype\")) {\n\t\t\t\t\tresourcetype = Integer.parseInt(screenItemReader.getText());\n\t\t\t\t} else {\n\t\t\t\t\tscreenItemReader.nextProperty();\n\t\t\t\t}\n\t\t\t}\n\t\t\t// only resouretype == 0\n\t\t\tif (resourcetype == 0) {\n\t\t\t\tsi.insert(zabbixLocalDB);\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic void importScreens() throws ClientProtocolException, IOException, JSONException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\tif (!isCached(ScreenData.TABLE_NAME, null)) {\n\t\t\t_startTransaction();\n\n\t\t\tzabbixLocalDB.delete(ScreenData.TABLE_NAME, null, null);\n\t\t\tzabbixLocalDB.delete(ScreenItemData.TABLE_NAME, null, null);\n\t\t\tzabbixLocalDB.delete(CacheData.TABLE_NAME, CacheData.COLUMN_KIND+\"='\"+ScreenData.TABLE_NAME+\"'\", null);\n\n\t\t\tJsonArrayOrObjectReader screens = _queryStream(\n\t\t\t\t\t(isVersion2?\"s\":\"S\")+\"creen.get\"\n\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t\t.put(\"output\", \"extend\")\n\t\t\t\t\t\t.put(isVersion2?\"selectScreenItems\":\"select_screenitems\", \"extend\")\n\t\t\t);\n\t\t\tJsonObjectReader screenReader;\n\t\t\twhile ((screenReader = screens.next()) != null) {\n\t\t\t\tScreenData scr = new ScreenData();\n\t\t\t\twhile (screenReader.nextValueToken()) {\n\t\t\t\t\tString propName = screenReader.getCurrentName();\n\t\t\t\t\tif (propName.equals(ScreenData.COLUMN_SCREENID)) {\n\t\t\t\t\t\tscr.set(ScreenData.COLUMN_SCREENID, Long.parseLong(screenReader.getText()));\n\t\t\t\t\t} else if (propName.equals(ScreenData.COLUMN_NAME)) {\n\t\t\t\t\t\tscr.set(ScreenData.COLUMN_NAME, screenReader.getText());\n\t\t\t\t\t} else if (propName.equals(\"screenitems\")) {\n\t\t\t\t\t\timportScreenItems(screenReader.getJsonArrayOrObjectReader());\n\t\t\t\t\t} else {\n\t\t\t\t\t\tscreenReader.nextProperty();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tscr.insert(zabbixLocalDB);\n\t\t\t}\n\t\t\tscreens.close();\n\n\t\t\tsetCached(ScreenData.TABLE_NAME, null, ZabbixConfig.CACHE_LIFETIME_SCREENS);\n\t\t\t_endTransaction();\n\t\t}\n\t}\n\n\tpublic void importTrigger(String triggerid) throws JSONException, IOException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\tif (!isCached(TriggerData.TABLE_NAME, \"triggerid=\"+triggerid)) {\n\t\t\t_startTransaction();\n\n\t\t\tJsonArrayOrObjectReader trigger = _queryStream(\n\t\t\t\t\t\"trigger.get\"\n\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t\t.put(\"output\", \"extend\")\n\t\t\t\t\t\t.put(isVersion2?\"selectHosts\":\"select_hosts\", \"extend\")\n\t\t\t\t\t\t.put(\"triggerids\", new JSONArray().put(triggerid))\n\t\t\t);\n\t\t\timportTriggers(trigger);\n\t\t\ttrigger.close();\n\n\t\t\tsetCached(TriggerData.TABLE_NAME, \"triggerid=\"+triggerid, ZabbixConfig.CACHE_LIFETIME_TRIGGERS);\n\t\t\t_endTransaction();\n\t\t}\n\t}\n\n\t/**\n\t * importiert ein trigger mit dem attribute itemid. ggf. wird der trigger zuerst gelöscht und neu angelegt.\n\t * imports a trigger with the attribute itemid. if trigger already exists, it will be removed first.\n\t * @param triggerid\n\t * @throws JSONException\n\t * @throws IOException\n\t * @throws HttpAuthorizationRequiredException\n\t * @throws NoAPIAccessException\n\t */\n\tpublic void importTriggerColumnItemId(String triggerid) throws JSONException, IOException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\t// check if the trigger exists and if the itemid was set\n\t\tboolean mustImport = true;\n\t\tCursor cur = zabbixLocalDB.query(TriggerData.TABLE_NAME, null, TriggerData.COLUMN_TRIGGERID+\"=\"+triggerid, null, null, null, null);\n\t\tif (cur.moveToFirst()) {\n\t\t\tlong itemid = 0;\n\t\t\ttry {\n\t\t\t\titemid = cur.getLong(cur.getColumnIndex(TriggerData.COLUMN_ITEMID));\n\t\t\t} catch (Exception e) {\n\t\t\t\t// no itemid\n\t\t\t}\n\t\t\tif (itemid > 0) {\n\t\t\t\tmustImport = false;\n\t\t\t}\n\t\t}\n\t\tif (mustImport) {\n\t\t\t_startTransaction();\n\t\t\tzabbixLocalDB.delete(TriggerData.TABLE_NAME, TriggerData.COLUMN_TRIGGERID+\"=\"+triggerid, null);\n\t\t\tJsonArrayOrObjectReader triggers = _queryStream(\n\t\t\t\t\t\"trigger.get\"\n\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t\t.put(\"output\", \"extend\")\n\t\t\t\t\t\t.put(isVersion2?\"selectHosts\":\"select_hosts\", \"extend\")\n\t\t\t\t\t\t.put(isVersion2?\"selectGroups\":\"select_groups\", \"extend\")\n\t\t\t\t\t\t.put(isVersion2?\"selectItems\":\"select_items\", \"extend\")\n\t\t\t\t\t\t.put(\"triggerids\", new JSONArray().put(triggerid))\n\t\t\t\t\t\t.put(\"limit\", 1)\n\t\t\t);\n\t\t\timportTriggers(triggers);\n\t\t\t_endTransaction();\n\t\t}\n\t}\n\n\t/**\n\t * imports the \"warning\"-triggers\n\t * @throws JSONException\n\t * @throws IOException\n\t * @throws HttpAuthorizationRequiredException\n\t * @throws NoAPIAccessException\n\t */\n\tpublic void importTriggers() throws JSONException, IOException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\tif (!isCached(TriggerData.TABLE_NAME, null)) {\n\t\t\t// clear triggers\n\t\t\tzabbixLocalDB.delete(TriggerData.TABLE_NAME, null, null);\n\n\t\t\t_startTransaction();\n\n\t\t\tlong min = (new Date().getTime()/1000)-ZabbixConfig.STATUS_SHOW_TRIGGER_TIME;\n\t\t\tJsonArrayOrObjectReader triggers = _queryStream(\n\t\t\t\t\t\"trigger.get\"\n\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t\t.put(\"output\", \"extend\")\n\t\t\t\t\t\t.put(\"sortfield\", \"lastchange\")\n\t\t\t\t\t\t.put(\"sortorder\", \"desc\")\n\t\t\t\t\t\t.put(isVersion2?\"selectHosts\":\"select_hosts\", \"extend\")\n\t\t\t\t\t\t.put(isVersion2?\"selectGroups\":\"select_groups\", \"extend\")\n\t\t\t\t\t\t.put(isVersion2?\"selectItems\":\"select_items\", \"extend\")\n\t\t\t\t\t\t.put(\"lastChangeSince\", min)\n\t\t\t\t\t\t.put(\"only_true\", \"1\")\n\t\t\t\t\t\t.put(\"limit\", ZabbixConfig.TRIGGER_GET_LIMIT)\n\t\t\t\t\t\t.put(\"expandDescription\", true)\n\t\t\t);\n\t\t\timportTriggers(triggers);\n\t\t\ttriggers.close();\n\n\t\t\tsetCached(TriggerData.TABLE_NAME, null, ZabbixConfig.CACHE_LIFETIME_TRIGGERS);\n\t\t\t_endTransaction();\n\t\t}\n\t}\n\n\tprivate void importTriggers(JsonArrayOrObjectReader jsonArray) throws JsonParseException, IOException {\n\t\tJsonObjectReader triggerReader;\n\t\twhile ((triggerReader = jsonArray.next()) != null) {\n\t\t\tTriggerData t = new TriggerData();\n\t\t\twhile (triggerReader.nextValueToken()) {\n\t\t\t\tString propName = triggerReader.getCurrentName();\n\t\t\t\tif (propName.equals(TriggerData.COLUMN_TRIGGERID)) {\n\t\t\t\t\tt.set(TriggerData.COLUMN_TRIGGERID, Long.parseLong(triggerReader.getText()));\n\t\t\t\t} else if (propName.equals(TriggerData.COLUMN_COMMENTS)) {\n\t\t\t\t\tt.set(TriggerData.COLUMN_COMMENTS, triggerReader.getText());\n\t\t\t\t} else if (propName.equals(TriggerData.COLUMN_DESCRIPTION)) {\n\t\t\t\t\tt.set(TriggerData.COLUMN_DESCRIPTION, triggerReader.getText());\n\t\t\t\t} else if (propName.equals(TriggerData.COLUMN_EXPRESSION)) {\n\t\t\t\t\tt.set(TriggerData.COLUMN_EXPRESSION, triggerReader.getText());\n\t\t\t\t} else if (propName.equals(TriggerData.COLUMN_LASTCHANGE)) {\n\t\t\t\t\tt.set(TriggerData.COLUMN_LASTCHANGE, Integer.parseInt(triggerReader.getText()));\n\t\t\t\t} else if (propName.equals(TriggerData.COLUMN_PRIORITY)) {\n\t\t\t\t\tt.set(TriggerData.COLUMN_PRIORITY, Integer.parseInt(triggerReader.getText()));\n\t\t\t\t} else if (propName.equals(TriggerData.COLUMN_STATUS)) {\n\t\t\t\t\tt.set(TriggerData.COLUMN_STATUS, Integer.parseInt(triggerReader.getText()));\n\t\t\t\t} else if (propName.equals(TriggerData.COLUMN_VALUE)) {\n\t\t\t\t\tt.set(TriggerData.COLUMN_VALUE, Integer.parseInt(triggerReader.getText()));\n\t\t\t\t} else if (propName.equals(TriggerData.COLUMN_URL)) {\n\t\t\t\t\tt.set(TriggerData.COLUMN_URL, triggerReader.getText());\n\t\t\t\t} else if (propName.equals(\"hosts\")) {\n\t\t\t\t\tObject[] hostsCache = importHosts(triggerReader.getJsonArrayOrObjectReader(), null);\n\t\t\t\t\tt.set(TriggerData.COLUMN_HOSTS, hostsCache[0]);\n\t\t\t\t\tt.set(TriggerData.COLUMN_HOSTID, hostsCache[1]);\n\t\t\t\t} else if (propName.equals(\"groups\")) {\n\t\t\t\t\timportHostGroups(triggerReader.getJsonArrayOrObjectReader());\n\t\t\t\t} else if (propName.equals(\"items\")) {\n\t\t\t\t\t// store the first item id\n\t\t\t\t\tt.set(TriggerData.COLUMN_ITEMID, importItems(triggerReader.getJsonArrayOrObjectReader(), 1, true));\n\t\t\t\t} else {\n\t\t\t\t\ttriggerReader.nextProperty();\n\t\t\t\t}\n\t\t\t}\n\t\t\tt.insert(zabbixLocalDB, TriggerData.COLUMN_TRIGGERID);\n\t\t\t_commitTransactionIfRecommended();\n\t\t}\n\t}\n\n\tpublic void importTriggersByItemId(String itemid) throws JSONException, IOException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\tif (!isCached(TriggerData.TABLE_NAME, \"itemid=\"+itemid)) {\n\t\t\t_startTransaction();\n\t\t\tzabbixLocalDB.delete(TriggerData.TABLE_NAME, TriggerData.COLUMN_ITEMID+\"=\"+itemid, null);\n\t\t\tJsonArrayOrObjectReader triggers = _queryStream(\n\t\t\t\t\t\"trigger.get\"\n\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t\t.put(\"output\", \"extend\")\n\t\t\t\t\t\t.put(isVersion2?\"selectHosts\":\"select_hosts\", \"extend\")\n\t\t\t\t\t\t.put(isVersion2?\"selectGroups\":\"select_groups\", \"extend\")\n\t\t\t\t\t\t.put(isVersion2?\"selectItems\":\"select_items\", \"extend\")\n\t\t\t\t\t\t.put(\"itemids\", new JSONArray().put(itemid))\n\t\t\t\t\t\t.put(\"limit\", 1)\n\t\t\t\t\t\t.put(\"sortfield\", \"lastchange\")\n\t\t\t\t\t\t.put(\"sortorder\", \"DESC\")\n\t\t\t);\n\t\t\timportTriggers(triggers);\n\t\t\tsetCached(TriggerData.TABLE_NAME, \"itemid=\"+itemid, ZabbixConfig.CACHE_LIFETIME_TRIGGERS);\n\t\t\t_endTransaction();\n\t\t}\n\t}\n\n\tpublic boolean isCached(String kind, String filter) {\n\t\tSQLiteQueryBuilder sqlBuilder = new SQLiteQueryBuilder();\n\t\tsqlBuilder.setTables(CacheData.TABLE_NAME);\n\t\tsqlBuilder.appendWhere(CacheData.COLUMN_KIND+\"='\"+kind+\"' AND \");\n\t\tsqlBuilder.appendWhere(CacheData.COLUMN_FILTER+\n\t\t\t\t(filter==null?\" IS NULL\":\"='\"+filter+\"'\")\n\t\t);\n\t\tsqlBuilder.appendWhere(\" AND \"+CacheData.COLUMN_EXPIRE_DATE+\">\"+new Date().getTime()/1000);\n\t\tCursor cur = sqlBuilder.query(\n\t\t\tzabbixLocalDB,\n\t\t\tnull,\n\t\t\tnull,\n\t\t\tnull,\n\t\t\tnull,\n\t\t\tnull,\n\t\t\tnull\n\t\t);\n\t\tLog.i(\"ZabbixContentProvider\", \"isCached \"+kind+\"//\"+filter+\"//\"+cur.moveToFirst());\n\t\treturn cur.moveToFirst();\n\t}\n\n\t/**\n\t * public, for the unit test\n\t */\n\tpublic void setCached(String kind, String filter, int lifetime) {\n\t\tCacheData cache = new CacheData();\n\t\tcache.set(CacheData.COLUMN_EXPIRE_DATE, new Date().getTime()/1000 + lifetime);\n\t\tcache.set(CacheData.COLUMN_KIND, kind);\n\t\tif (filter != null) {\n\t\t\tcache.set(CacheData.COLUMN_FILTER, filter);\n\t\t}\n\t\tcache.insert(zabbixLocalDB);\n\t}\n\n\t/**\n\t * updates the progressbar in the gui\n\t * @param i 0..100\n\t */\n\tpublic void showProgress(int i) {\n\t\t// if applicable, transform the progress\n\t\tif (transformProgressStart != 0 && transformProgressEnd != 0) {\n\t\t\ti = (int) (transformProgressStart + (transformProgressEnd-transformProgressStart)*(double)i/100);\n\t\t}\n\n\t\tIntent intent = new Intent(ZabbixContentProvider.CONTENT_PROVIDER_INTENT_ACTION);\n\t\tintent.putExtra(\"flag\", ZabbixContentProvider.INTENT_FLAG_SHOW_PROGRESS);\n\t\tintent.putExtra(\"value\", i);\n\t\tcontext.sendBroadcast(intent);\n\t}\n\n\t/**\n\t * transforms the progress\n\t * @param start 0% => start%\n\t * @param end 100% => end%\n\t */\n\tpublic void transformProgress(int start, int end) {\n\t\ttransformProgressStart = start;\n\t\ttransformProgressEnd = end;\n\t}\n}\n"],
    "p_date_tdt": "May 10, 2013 7:38:47 AM",
    "c_comments_t": ["\t\t\t// create ApplicationItemRelation /** \n * public, for the unit test\n */\n /** \n * import the hosts from stream\n * @param jsonArray stream\n * @param numHosts count of hosts for progressbar. null if unknown.\n * @return Object[] {(String) comma-separated all Hostnames, (Long) 1. host id}\n * @throws JsonParseException\n * @throws IOException\n */\n \t\t\t// result array found /** \n * import graph items\n * @param graphItems\n * @return true, if graphid column has to be updated from -1 to the correct graphid later.\n * @throws JsonParseException\n * @throws NumberFormatException\n * @throws IOException\n */\n \t\t\t\t\t\t// save only every 20th \t\t\t// wrong password. token remains null \t\t\t// the past 2 hours \t\t\t\t\t// data are unuseable, e.g. because it's a string /** \n * @param events stream\n * @param numEvents if null, no progressbar-update AND only isert, if it does not exist. If !null, progressbar-update AND always insert without checking\n * @throws JsonParseException\n * @throws IOException\n */\n \t\t\t\t\t// Precondition failed / Looks like Zabbix 1.8.2 \t\t\t// get API version \t\t\t// if #0 \"other\" does not exist yet, it has to be created \t\t\t\t\t// later the IDs will be replaced with the correct /** \n * zabbix api call. data will be parsed as json object on-the-fly. Caution: use this only for api calls with a small return data.\n * @param method\n * @param params\n * @return\n * @throws ClientProtocolException\n * @throws IOException\n * @throws JSONException\n * @throws HttpAuthorizationRequiredException\n * @throws NoAPIAccessException\n */\n /** \n * begin sql transaction\n */\n \t\t\t\t\t\t// first do a new auth and then try the same api call again \t\t\t\t// no itemid \t\t\t// count of items /** \n * init\n * @param context android context\n * @param zabbixLocalDB sqlite\n */\n \t\t\t// create applications that does not exist \t\t\t\t// so we use a fiction \t\t\t// only resouretype == 0 /** \n * probably too old zabbix <= 1.8.2\n */\n /** \n * zabbix auth. user and pwd from app preferences\n * @return true success\n * @throws ClientProtocolException\n * @throws IOException\n * @throws JSONException\n * @throws HttpAuthorizationRequiredException\n * @throws NoAPIAccessException\n */\n /** \n * close the last http stream\n */\n \t\t\t// Workaround: historydetails only comes if you use the correct \"history\"-parameter. /** \n * transforms the progress\n * @param start 0% => start%\n * @param end 100% => end%\n */\n \t\t\t\t// in Zabbix version <2.0, this is not default \t\t\t\t// file not found \t\t\t\t\t// hex string => color int \t\tHttpClientParams.setRedirecting(params, true); // redirecting /** \n * The API version. From 1.8.3 (maybe earlier) to 2.0 (excluded), this was 1.3. With 2.0, it changed to 1.4.  Finally, since 2.0.4, the API version matches the program version.\n */\n \t\t\t// if applicable replace placeholder \t\t\t// if graphid-column was not set, this must be done later. temporary graphid=-1 \t\t// for GUI unit test, just return true /** \n * imports the \"warning\"-triggers\n * @throws JSONException\n * @throws IOException\n * @throws HttpAuthorizationRequiredException\n * @throws NoAPIAccessException\n */\n \t\t\t// event is parsed and can be inserted into the db \t\tpublic static final int EVENT_GET_TIME_FROM_SHIFT = 7*24*60*60; // -7 days \t\t// http request \t\t\t\t\t// store hosts namen \t\t\t\t// http auth failed \t\t\t\t\t// at this point itemid and hostid is unknown \t\t\t\t\t// import triggers \t\t\t// we try them all, until we get results. /** \n * importiert ein trigger mit dem attribute itemid. ggf. wird der trigger zuerst gelöscht und neu angelegt. imports a trigger with the attribute itemid. if trigger already exists, it will be removed first.\n * @param triggerid\n * @throws JSONException\n * @throws IOException\n * @throws HttpAuthorizationRequiredException\n * @throws NoAPIAccessException\n */\n \t\t\t\t\t// import hosts \t\t\t// for unit test \t\t\t\t// ignore \t\t\t// or a json object /** \n * zabbix error: no api access\n */\n /** \n * counts the sql inserts/updates and do a transaction commit to save the memory\n */\n \t\t\t// send intent to GUI \t\t\t\t\t// before zabbix 2.x the name field was \"description\" \t\t\t\t\t// if we get an empty array, we try another history parameter \t\t\t\t\t// store the first item id \t\t// check if the trigger exists and if the itemid was set /** \n * global constants\n */\n \t\t\t\t// create \"other\" hostgroup #1 \t\t\t// if there's no application, the ID #0 must be added (for other) \t\t\t\t\t// because of this, all applicationrelations will be saved with itemid and hostid \"-1\". \t\t\t\t\t\t.put(\"history\", historytype) // for integer ? /** \n * interface to connect to the zabbix server\n */\n /** \n * acknowledge zabbix event. Sets ack-flag with comment. Caution: This is supported only for Zabbix version >= 1.8.4\n * @param eventid\n * @param comment\n * @return true, success.\n * @throws ClientProtocolException\n * @throws IOException\n * @throws JSONException\n * @throws HttpAuthorizationRequiredException\n * @throws NoAPIAccessException\n */\n \t\t\t// store the last stream to close it if an exception will be thrown /** \n * zabbix api call as stream.\n * @param method\n * @param params\n * @return stream im json array wrapper\n * @throws JSONException\n * @throws IOException\n * @throws HttpAuthorizationRequiredException\n * @throws NoAPIAccessException\n */\n \t\t// if applicable http auth \t\t\t// correct historytype found and there are data \t\t\t\t// count of the entries cannot be detected (zabbix bug), /** \n * import items from stream.\n * @param items stream\n * @param numItems count for progressbar, if 0 no progressbarupdate\n * @param checkBeforeInsert if true, only make an insert if item does not exist\n * @return the first item id\n * @throws JsonParseException\n * @throws IOException\n */\n \t\t\t// collect all graphids /** \n * http auth is needed\n */\n \t\t\t// ignore for unit test /** \n * commit sql transaction\n */\n \t\t\t// delete old graphs \t\t\t// host without group will get group #0 (other) \t\t\t// there's no result \t\tpublic static final int HISTORY_GET_TIME_FROM_SHIFT = 24*60*60; // -24h \t\t// if applicable, transform the progress \t\t\t// SSL not trusted \t\t\t// internet problem \t\t\tif (jp.nextToken() != JsonToken.START_ARRAY && jp.getCurrentToken() != JsonToken.START_OBJECT) { // go inside the array \t\tpublic static final int CACHE_LIFETIME_APPLICATIONS = 2*24*60*60; // 2 days \t\t\t\t\t// since zabbix 2.x is the name of the item \"name\" \t\t\t// now the \"-1\" IDs of applicationsrelation will be replaced with the correct itemID \t\t\t// get count of hosts /** \n * import the newest events\n * @throws ClientProtocolException\n * @throws IOException\n * @throws JSONException\n * @throws HttpAuthorizationRequiredException\n * @throws NoAPIAccessException\n */\n /** \n * updates the progressbar in the gui\n * @param i 0..100\n */\n \t\t\t\t\t\t// ignore \t\t\t\t\t// first do a new auth and then try the same api call again /** \n * import the newest event of a trigger\n * @param triggerid\n * @throws JSONException\n * @throws IOException\n * @throws HttpAuthorizationRequiredException\n * @throws NoAPIAccessException\n */\n \t\t// it can be an (empty) array \t\t\t// this parameter can be \"null\" or a number 0-4. Because we don't know when to use which, \t\t\t// clear triggers"],
    "p_contents_t": ["package com.inovex.zabbixmobile.api;\n\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.net.Socket;\nimport java.net.UnknownHostException;\nimport java.security.KeyManagementException;\nimport java.security.KeyStore;\nimport java.security.KeyStoreException;\nimport java.security.NoSuchAlgorithmException;\nimport java.security.UnrecoverableKeyException;\nimport java.security.cert.CertificateException;\nimport java.security.cert.X509Certificate;\nimport java.util.ArrayList;\nimport java.util.Date;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Set;\n\nimport javax.net.ssl.SSLContext;\nimport javax.net.ssl.SSLPeerUnverifiedException;\nimport javax.net.ssl.TrustManager;\nimport javax.net.ssl.X509TrustManager;\n\nimport org.apache.http.HttpResponse;\nimport org.apache.http.HttpVersion;\nimport org.apache.http.auth.AuthScope;\nimport org.apache.http.auth.UsernamePasswordCredentials;\nimport org.apache.http.client.ClientProtocolException;\nimport org.apache.http.client.methods.HttpPost;\nimport org.apache.http.client.params.HttpClientParams;\nimport org.apache.http.conn.ClientConnectionManager;\nimport org.apache.http.conn.scheme.PlainSocketFactory;\nimport org.apache.http.conn.scheme.Scheme;\nimport org.apache.http.conn.scheme.SchemeRegistry;\nimport org.apache.http.conn.ssl.SSLSocketFactory;\nimport org.apache.http.entity.StringEntity;\nimport org.apache.http.impl.client.DefaultHttpClient;\nimport org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager;\nimport org.apache.http.params.BasicHttpParams;\nimport org.apache.http.params.HttpConnectionParams;\nimport org.apache.http.params.HttpParams;\nimport org.apache.http.params.HttpProtocolParams;\nimport org.apache.http.protocol.HTTP;\nimport org.codehaus.jackson.JsonFactory;\nimport org.codehaus.jackson.JsonParseException;\nimport org.codehaus.jackson.JsonParser;\nimport org.codehaus.jackson.JsonToken;\nimport org.json.JSONArray;\nimport org.json.JSONException;\nimport org.json.JSONObject;\n\nimport android.content.ContentValues;\nimport android.content.Context;\nimport android.content.Intent;\nimport android.content.SharedPreferences;\nimport android.database.Cursor;\nimport android.database.sqlite.SQLiteDatabase;\nimport android.database.sqlite.SQLiteQueryBuilder;\nimport android.graphics.Color;\nimport android.preference.PreferenceManager;\nimport android.util.Log;\n\nimport com.inovex.zabbixmobile.R;\nimport com.inovex.zabbixmobile.ZabbixContentProvider;\nimport com.inovex.zabbixmobile.model.ApplicationData;\nimport com.inovex.zabbixmobile.model.ApplicationItemRelationData;\nimport com.inovex.zabbixmobile.model.CacheData;\nimport com.inovex.zabbixmobile.model.EventData;\nimport com.inovex.zabbixmobile.model.GraphData;\nimport com.inovex.zabbixmobile.model.GraphItemData;\nimport com.inovex.zabbixmobile.model.HistoryDetailData;\nimport com.inovex.zabbixmobile.model.HostData;\nimport com.inovex.zabbixmobile.model.HostGroupData;\nimport com.inovex.zabbixmobile.model.ItemData;\nimport com.inovex.zabbixmobile.model.ScreenData;\nimport com.inovex.zabbixmobile.model.ScreenItemData;\nimport com.inovex.zabbixmobile.model.TriggerData;\n\n/**\n * interface to connect to the zabbix server\n */\npublic class ZabbixService {\n\tclass CustomSSLSocketFactory extends SSLSocketFactory {\n\t\tSSLContext sslContext = SSLContext.getInstance(\"TLS\");\n\n\t\tpublic CustomSSLSocketFactory(KeyStore truststore) throws NoSuchAlgorithmException, KeyManagementException, KeyStoreException, UnrecoverableKeyException {\n\t\t\tsuper(truststore);\n\t\t\tTrustManager tm = new X509TrustManager() {\n\t\t\t\t@Override\n\t\t\t\tpublic void checkClientTrusted(X509Certificate[] chain,\n\t\t\t\t\t\tString authType) throws CertificateException {\n\t\t\t\t}\n\t\t\t\t@Override\n\t\t\t\tpublic void checkServerTrusted(X509Certificate[] chain,\n\t\t\t\t\t\tString authType) throws CertificateException {\n\t\t\t\t}\n\t\t\t\t@Override\n\t\t\t\tpublic X509Certificate[] getAcceptedIssuers() {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t};\n\t\t\tsslContext.init(null, new TrustManager[] { tm }, null);\n\t\t}\n\n\t\t@Override\n\t\tpublic Socket createSocket() throws IOException {\n\t\t\treturn sslContext.getSocketFactory().createSocket();\n\t\t}\n\n\t\t@Override\n\t\tpublic Socket createSocket(Socket socket, String host, int port, boolean autoClose) throws IOException, UnknownHostException {\n\t\t\treturn sslContext.getSocketFactory().createSocket(socket, host, port, autoClose);\n\t\t}\n\t}\n\n\t/**\n\t * http auth is needed\n\t */\n\tpublic class HttpAuthorizationRequiredException extends Exception {\n\t\tprivate static final long serialVersionUID = 6632422081858878147L;\n\t}\n\n\t/**\n\t * zabbix error: no api access\n\t */\n\tpublic class NoAPIAccessException extends Exception {\n\t\tprivate static final long serialVersionUID = 6381395987443456382L;\n\t}\n\n\t/**\n\t * probably too old zabbix <= 1.8.2\n\t */\n\tpublic class PreconditionFailedException extends Exception {\n\t\tprivate static final long serialVersionUID = -2529885710860745023L;\n\t}\n\n\t/**\n\t * global constants\n\t */\n\tpublic class ZabbixConfig {\n\t\tpublic static final int APPLICATION_GET_LIMIT = 1000;\n\t\tpublic static final int EVENTS_GET_LIMIT = 60;\n\t\tpublic static final int HISTORY_GET_TIME_FROM_SHIFT = 24*60*60; // -24h\n\t\tpublic static final int HISTORY_GET_LIMIT = 8000;\n\t\tpublic static final int HOSTGROUP_GET_LIMIT = 200;\n\t\tpublic static final int HOST_GET_LIMIT = 300;\n\t\tpublic static final int ITEM_GET_LIMIT = 200;\n\t\tpublic static final int TRIGGER_GET_LIMIT = 100;\n\t\tpublic static final int EVENT_GET_TIME_FROM_SHIFT = 7*24*60*60; // -7 days\n\t\tpublic static final int CACHE_LIFETIME_APPLICATIONS = 2*24*60*60; // 2 days\n\t\tpublic static final int CACHE_LIFETIME_EVENTS = 120;\n\t\tpublic static final int CACHE_LIFETIME_HISTORY_DETAILS = 4*60;\n\t\tpublic static final int CACHE_LIFETIME_HOST_GROUPS = 7*24*60*60;\n\t\tpublic static final int CACHE_LIFETIME_HOSTS = 2*24*60*60;\n\t\tpublic static final int CACHE_LIFETIME_SCREENS = 2*24*60*60;\n\t\tpublic static final int CACHE_LIFETIME_ITEMS = 4*60;\n\t\tpublic static final int CACHE_LIFETIME_TRIGGERS = 2*60;\n\t\tpublic static final long STATUS_SHOW_TRIGGER_TIME = 14*24*60*60;\n\t\tpublic static final int HTTP_CONNECTION_TIMEOUT = 30000;\n\t}\n\n\tprivate final DefaultHttpClient httpClient;\n\tprivate final SQLiteDatabase zabbixLocalDB;\n\tprivate String url;\n\tprivate String token;\n\tprivate final Context context;\n\tprivate int _transactionStack;\n\tprivate JsonParser lastStream;\n\tprivate int transformProgressStart;\n\tprivate int transformProgressEnd;\n\tprivate boolean _notAuthorizedRetry;\n\tprivate boolean isVersion2 = true;\n\t/**\n\t * The API version. From 1.8.3 (maybe earlier) to 2.0 (excluded), this was 1.3. With 2.0, it changed to 1.4. \n\t * Finally, since 2.0.4, the API version matches the program version.\n\t */\n\tprivate String apiVersion = \"\";\n\n\t/**\n\t * init\n\t * @param context android context\n\t * @param zabbixLocalDB sqlite\n\t */\n\tpublic ZabbixService(Context context, SQLiteDatabase zabbixLocalDB) {\n\t\tClientConnectionManager ccm = null;\n\t\tHttpParams params = null;\n\n\t\ttry {\n\t\t\tSharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(context);\n\t\t\tif (prefs.getBoolean(\"zabbix_trust_all_ssl_ca\", false)) {\n\t\t\t\tKeyStore trustStore = KeyStore.getInstance(KeyStore.getDefaultType());\n\t\t\t\ttrustStore.load(null, null);\n\n\t\t\t\tSSLSocketFactory sf = new CustomSSLSocketFactory(trustStore);\n\t\t\t\tsf.setHostnameVerifier(SSLSocketFactory.ALLOW_ALL_HOSTNAME_VERIFIER);\n\n\t\t\t\tparams = new BasicHttpParams();\n\t\t\t\tHttpProtocolParams.setVersion(params, HttpVersion.HTTP_1_1);\n\t\t\t\tHttpProtocolParams.setContentCharset(params, HTTP.UTF_8);\n\n\t\t\t\tSchemeRegistry registry = new SchemeRegistry();\n\t\t\t\tregistry.register(new Scheme(\"http\", PlainSocketFactory.getSocketFactory(), 80));\n\t\t\t\tregistry.register(new Scheme(\"https\", sf, 443));\n\n\t\t\t\tccm = new ThreadSafeClientConnManager(params, registry);\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\t// ignore for unit test\n\t\t}\n\n\t\tif (ccm == null || params == null) {\n\t\t\thttpClient = new DefaultHttpClient();\n\t\t} else {\n\t\t\thttpClient = new DefaultHttpClient(ccm, params);\n\t\t}\n\n\t\t// if applicable http auth\n\t\ttry {\n\t\t\tSharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(context);\n\t\t\tif (prefs.getBoolean(\"http_auth_enabled\", false)) {\n\t\t\t\tString user = prefs.getString(\"http_auth_username\", \"\");\n\t\t\t\tString pwd = prefs.getString(\"http_auth_password\", \"\");\n\t\t\t\thttpClient.getCredentialsProvider().setCredentials(AuthScope.ANY, new UsernamePasswordCredentials(user, pwd));\n\t\t\t}\n\t\t} catch (java.lang.UnsupportedOperationException e1) {\n\t\t\t// for unit test\n\t\t}\n\n\t\tparams = httpClient.getParams();\n\t\tHttpClientParams.setRedirecting(params, true); // redirecting\n\t\tHttpConnectionParams.setConnectionTimeout(params, ZabbixConfig.HTTP_CONNECTION_TIMEOUT);\n\t\tthis.context = context;\n\t\tthis.zabbixLocalDB = zabbixLocalDB;\n\t}\n\n\t/**\n\t * counts the sql inserts/updates and do a transaction commit to save the memory\n\t */\n\tprivate void _commitTransactionIfRecommended() {\n\t\tif (_transactionStack++ > 50) {\n\t\t\t_endTransaction();\n\t\t\t_startTransaction();\n\t\t}\n\t}\n\n\t/**\n\t * commit sql transaction\n\t */\n\tpublic void _endTransaction() {\n\t\tif (zabbixLocalDB.inTransaction()) {\n\t\t\tzabbixLocalDB.setTransactionSuccessful();\n\t\t\tzabbixLocalDB.endTransaction();\n\t\t}\n\t}\n\n\t/**\n\t * zabbix api call. data will be parsed as json object on-the-fly.\n\t * Caution: use this only for api calls with a small return data.\n\t * @param method\n\t * @param params\n\t * @return\n\t * @throws ClientProtocolException\n\t * @throws IOException\n\t * @throws JSONException\n\t * @throws HttpAuthorizationRequiredException\n\t * @throws NoAPIAccessException\n\t */\n\tprivate JSONObject _queryBuffer(String method, JSONObject params) throws ClientProtocolException, IOException, JSONException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\tHttpPost post = new HttpPost(url);\n\t\tpost.addHeader(\"Content-Type\", \"application/json; charset=utf-8\");\n\n\t\tString json =\n\t\t\t\"{\" +\n\t\t\t\"\t\\\"jsonrpc\\\" : \\\"2.0\\\",\" +\n\t\t\t\"\t\\\"method\\\" : \\\"\"+method+\"\\\",\" +\n\t\t\t\"\t\\\"params\\\" : \"+params.toString()+\",\" +\n\t\t\t\"\t\\\"auth\\\" : \"+(token==null?\"null\":'\"'+token+'\"')+\",\" +\n\t\t\t\"\t\\\"id\\\" : 0\" +\n\t\t\t\"}\";\n\n\t\tpost.setEntity(new StringEntity(json, \"UTF-8\"));\n\t\ttry {\n\t\t\tHttpResponse resp = httpClient.execute(post);\n\t\t\tif (resp.getStatusLine().getStatusCode() == 401) {\n\t\t\t\t// http auth failed\n\t\t\t\tthrow new HttpAuthorizationRequiredException();\n\t\t\t} else if (resp.getStatusLine().getStatusCode() == 412) {\n\t\t\t\t\t// Precondition failed / Looks like Zabbix 1.8.2\n\t\t\t\tthrow new PreconditionFailedException();\n\t\t\t} else if (resp.getStatusLine().getStatusCode() == 404) {\n\t\t\t\t// file not found\n\t\t\t\tthrow new IOException(resp.getStatusLine().getStatusCode()+\" \"+resp.getStatusLine().getReasonPhrase());\n\t\t\t} else {\n\t\t\t\tLog.d(\"ZabbixService\", resp.getStatusLine().getStatusCode()+\" \"+resp.getStatusLine().getReasonPhrase());\n\t\t\t}\n\t\t\tStringBuilder total = new StringBuilder();\n\t\t\tBufferedReader rd = new BufferedReader(new InputStreamReader(resp.getEntity().getContent()));\n\t\t\tint chr;\n\t\t\twhile ((chr = rd.read()) != -1) {\n\t\t\t\ttotal.append((char) chr);\n\t\t\t}\n\t\t\tJSONObject result = new JSONObject(total.toString());\n\t\t\ttry {\n\t\t\t\tif (result.getJSONObject(\"error\") != null) {\n\t\t\t\t\tif (result.getJSONObject(\"error\").getString(\"data\").equals(\"No API access\")) {\n\t\t\t\t\t\tthrow new NoAPIAccessException();\n\t\t\t\t\t} else throw new RuntimeException(result.getJSONObject(\"error\").toString());\n\t\t\t\t}\n\t\t\t\tif (result.getString(\"data\").equals(\"Not authorized\")) {\n\t\t\t\t\t// first do a new auth and then try the same api call again\n\t\t\t\t\tif (authenticate() && !_notAuthorizedRetry) {\n\t\t\t\t\t\t_notAuthorizedRetry = true;\n\t\t\t\t\t\tJSONObject r = _queryBuffer(method, params);\n\t\t\t\t\t\t_notAuthorizedRetry = false;\n\t\t\t\t\t\treturn r;\n\t\t\t\t\t} throw new IllegalStateException(result.toString());\n\t\t\t\t}\n\t\t\t} catch (JSONException e) {\n\t\t\t\t// ignore\n\t\t\t}\n\t\t\treturn result;\n\t\t} catch (SSLPeerUnverifiedException e) {\n\t\t\t// SSL not trusted\n\t\t\tIntent intent = new Intent(ZabbixContentProvider.CONTENT_PROVIDER_INTENT_ACTION);\n\t\t\tintent.putExtra(\"flag\", ZabbixContentProvider.INTENT_FLAG_SSL_NOT_TRUSTED);\n\t\t\tcontext.sendBroadcast(intent);\n\t\t\tthrow e;\n\t\t} catch (IOException e) {\n\t\t\t// internet problem\n\t\t\t// send intent to GUI\n\t\t\tIntent intent = new Intent(ZabbixContentProvider.CONTENT_PROVIDER_INTENT_ACTION);\n\t\t\tintent.putExtra(\"flag\", ZabbixContentProvider.INTENT_FLAG_CONNECTION_FAILED);\n\t\t\tintent.putExtra(\"value\", e.getMessage());\n\t\t\tcontext.sendBroadcast(intent);\n\t\t\tthrow e;\n\t\t}\n\t}\n\n\t/**\n\t * zabbix api call as stream.\n\t * @param method\n\t * @param params\n\t * @return stream im json array wrapper\n\t * @throws JSONException\n\t * @throws IOException\n\t * @throws HttpAuthorizationRequiredException\n\t * @throws NoAPIAccessException\n\t */\n\tprivate JsonArrayOrObjectReader _queryStream(String method, JSONObject params) throws JSONException, IOException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\t// http request\n\t\tHttpPost post = new HttpPost(url);\n\t\tpost.addHeader(\"Content-Type\", \"application/json; charset=utf-8\");\n\n\t\tJSONObject json = new JSONObject()\n\t\t\t.put(\"jsonrpc\", \"2.0\")\n\t\t\t.put(\"method\", method)\n\t\t\t.put(\"params\", params)\n\t\t\t.put(\"auth\", token)\n\t\t\t.put(\"id\", 0);\n\n\t\tLog.d(\"ZabbixService\", \"_queryStream: \"+url);\n\t\tLog.d(\"ZabbixService\", \"_queryStream: \"+json.toString());\n\n\t\tpost.setEntity(new StringEntity(json.toString(), \"UTF-8\"));\n\t\ttry {\n\t\t\tHttpResponse resp = httpClient.execute(post);\n\t\t\tif (resp.getStatusLine().getStatusCode() == 401) {\n\t\t\t\t// http auth failed\n\t\t\t\tthrow new HttpAuthorizationRequiredException();\n\t\t\t}\n\n\t\t\tJsonFactory jsonFac = new JsonFactory();\n\t\t\tJsonParser jp = jsonFac.createJsonParser(resp.getEntity().getContent());\n\t\t\t// store the last stream to close it if an exception will be thrown\n\t\t\tlastStream = jp;\n\t\t\tif (jp.nextToken() != JsonToken.START_OBJECT) {\n\t\t\t\tthrow new IOException(\"Expected data to start with an Object\");\n\t\t\t}\n\t\t\tdo {\n\t\t\t\tjp.nextToken();\n\t\t\t\tif (jp.getCurrentName().equals(\"error\")) {\n\t\t\t\t\tjp.nextToken();\n\t\t\t\t\tString errortxt = \"\";\n\t\t\t\t\twhile (jp.nextToken() != JsonToken.END_OBJECT) {\n\t\t\t\t\t\terrortxt += jp.getText();\n\t\t\t\t\t}\n\t\t\t\t\tif (errortxt.contains(\"No API access\")) {\n\t\t\t\t\t\tthrow new NoAPIAccessException();\n\t\t\t\t\t} else if (errortxt.contains(\"Not authorized\")) {\n\t\t\t\t\t\t// first do a new auth and then try the same api call again\n\t\t\t\t\t\tif (authenticate() && !_notAuthorizedRetry) {\n\t\t\t\t\t\t\t_notAuthorizedRetry = true;\n\t\t\t\t\t\t\tJsonArrayOrObjectReader r = _queryStream(method, params);\n\t\t\t\t\t\t\t_notAuthorizedRetry = false;\n\t\t\t\t\t\t\treturn r;\n\t\t\t\t\t\t} else throw new IllegalStateException(errortxt);\n\t\t\t\t\t} else throw new IllegalStateException(\"JSON API Error: \"+errortxt);\n\t\t\t\t}\n\t\t\t} while (!jp.getCurrentName().equals(\"result\"));\n\n\t\t\t// result array found\n\t\t\tif (jp.nextToken() != JsonToken.START_ARRAY && jp.getCurrentToken() != JsonToken.START_OBJECT) { // go inside the array\n\t\t\t\ttry {\n\t\t\t\t\tLog.d(\"ZabbixService\", \"current token: \"+jp.getCurrentToken());\n\t\t\t\t\tLog.d(\"ZabbixService\", \"current name: \"+jp.getCurrentName());\n\t\t\t\t\tLog.d(\"ZabbixService\", \"get text: \"+jp.getText());\n\t\t\t\t\tLog.d(\"ZabbixService\", \"next value: \"+jp.nextValue());\n\t\t\t\t\tLog.d(\"ZabbixService\", \"next token: \"+jp.nextToken());\n\t\t\t\t\tLog.d(\"ZabbixService\", \"current token: \"+jp.getCurrentToken());\n\t\t\t\t\tLog.d(\"ZabbixService\", \"current name: \"+jp.getCurrentName());\n\t\t\t\t\tLog.d(\"ZabbixService\", \"get text: \"+jp.getText());\n\t\t\t\t} catch (Exception e) {}\n\t\t\t\tthrow new IOException(\"Expected data to start with an Array\");\n\t\t\t}\n\t\t\treturn new JsonArrayOrObjectReader(jp);\n\t\t} catch (SSLPeerUnverifiedException e) {\n\t\t\tthrow e;\n\t\t} catch (IOException e) {\n\t\t\t// internet problem\n\t\t\t// send intent to GUI\n\t\t\tIntent intent = new Intent(ZabbixContentProvider.CONTENT_PROVIDER_INTENT_ACTION);\n\t\t\tintent.putExtra(\"flag\", ZabbixContentProvider.INTENT_FLAG_CONNECTION_FAILED);\n\t\t\tcontext.sendBroadcast(intent);\n\t\t\tthrow e;\n\t\t}\n\t}\n\n\t/**\n\t * begin sql transaction\n\t */\n\tprivate void _startTransaction() {\n\t\tzabbixLocalDB.beginTransaction();\n\t\t_transactionStack = 0;\n\t}\n\n\t/**\n\t * acknowledge zabbix event. Sets ack-flag with comment.\n\t * Caution: This is supported only for Zabbix version >= 1.8.4\n\t * @param eventid\n\t * @param comment\n\t * @return true, success.\n\t * @throws ClientProtocolException\n\t * @throws IOException\n\t * @throws JSONException\n\t * @throws HttpAuthorizationRequiredException\n\t * @throws NoAPIAccessException\n\t */\n\tpublic boolean acknowledgeEvent(String eventid, String comment) throws ClientProtocolException, IOException, JSONException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\t// for GUI unit test, just return true\n\t\tif (comment != null && comment.equals(\"__UNIT_TEST__RETURN_TRUE__\")) return true;\n\n\t\tJSONObject result = _queryBuffer(\n\t\t\t\t\"event.acknowledge\"\n\t\t\t\t, new JSONObject()\n\t\t\t\t\t.put(\"eventids\", new JSONArray().put(eventid))\n\t\t);\n\t\t// it can be an (empty) array\n\t\ttry {\n\t\t\treturn result.getJSONObject(\"result\").getJSONArray(\"eventids\").length() == 1;\n\t\t} catch (JSONException e) {\n\t\t\t// or a json object\n\t\t\treturn result.getJSONObject(\"result\").getJSONObject(\"eventids\").length() == 1;\n\t\t}\n\t}\n\n\t/**\n\t * zabbix auth. user and pwd from app preferences\n\t * @return true success\n\t * @throws ClientProtocolException\n\t * @throws IOException\n\t * @throws JSONException\n\t * @throws HttpAuthorizationRequiredException\n\t * @throws NoAPIAccessException\n\t */\n\tpublic boolean authenticate() throws ClientProtocolException, IOException, JSONException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\tSharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(context);\n\t\tString url = prefs.getString(\"zabbix_url\", \"\").trim();\n\t\tString user = prefs.getString(\"zabbix_username\", \"\").trim();\n\t\tString password = prefs.getString(\"zabbix_password\", \"\");\n\n\t\tthis.url = url+(url.endsWith(\"/\")?\"\":'/')+\"api_jsonrpc.php\";\n\t\tLog.d(\"ZabbixContentProvider\", url+\"//\"+user);\n\n\t\ttry {\n\t\t\tJSONObject result = _queryBuffer(\n\t\t\t\t\t\"user.authenticate\"\n\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t\t.put(\"user\", user)\n\t\t\t\t\t\t.put(\"password\", password)\n\t\t\t);\n\t\t\ttoken = result.getString(\"result\");\n\t\t} catch (JSONException e) {\n\t\t\t// there's no result\n\t\t\te.printStackTrace();\n\t\t} catch (RuntimeException e) {\n\t\t\t// wrong password. token remains null\n\t\t\te.printStackTrace();\n\t\t}\n\t\tif (token != null) {\n\t\t\t// get API version\n\t\t\tJSONObject result = _queryBuffer(\n\t\t\t\t\t\"apiinfo.version\"\n\t\t\t\t\t, new JSONObject()\n\t\t\t);\n\t\t\tapiVersion = result.getString(\"result\");\n\t\t\tisVersion2 = (apiVersion.equals(\"1.4\") || apiVersion.startsWith(\"2\"));\n\t\t\tLog.i(\"ZabbixService\", \"Zabbix API Version: \" + apiVersion);\n\t\t}\n\t\treturn token != null;\n\t}\n\n\t/**\n\t * close the last http stream\n\t */\n\tpublic void closeLastStream() {\n\t\tif (lastStream != null && !lastStream.isClosed()) {\n\t\t\ttry {\n\t\t\t\tlastStream.close();\n\t\t\t} catch (IOException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate void importApplications(long hostid, long itemid, JsonArrayOrObjectReader jsonArray) throws JsonParseException, NumberFormatException, IOException {\n\t\tint num = 0;\n\t\tJsonObjectReader application;\n\t\twhile ((application = jsonArray.next()) != null) {\n\t\t\tApplicationData app = new ApplicationData();\n\t\t\twhile (application.nextValueToken()) {\n\t\t\t\tString propName = application.getCurrentName();\n\t\t\t\tif (propName.equals(ApplicationData.COLUMN_APPLICATIONID)) {\n\t\t\t\t\tapp.set(ApplicationData.COLUMN_APPLICATIONID, Long.parseLong(application.getText()));\n\t\t\t\t} else if (propName.equals(ApplicationData.COLUMN_NAME)) {\n\t\t\t\t\tapp.set(ApplicationData.COLUMN_NAME, application.getText());\n\t\t\t\t} else if (propName.equals(ApplicationData.COLUMN_HOSTID)) {\n\t\t\t\t\tapp.set(ApplicationData.COLUMN_HOSTID, Long.parseLong(application.getText()));\n\t\t\t\t} else {\n\t\t\t\t\tapplication.nextProperty();\n\t\t\t\t}\n\t\t\t}\n\t\t\t// create applications that does not exist\n\t\t\tapp.insert(zabbixLocalDB, ApplicationData.COLUMN_APPLICATIONID);\n\t\t\t_commitTransactionIfRecommended();\n\n\t\t\t// create ApplicationItemRelation\n\t\t\tlong appid = (Long) app.get(ApplicationData.COLUMN_APPLICATIONID);\n\t\t\tApplicationItemRelationData rel = new ApplicationItemRelationData();\n\t\t\trel.set(ApplicationItemRelationData.COLUMN_APPLICATIONID, appid);\n\t\t\trel.set(ApplicationItemRelationData.COLUMN_ITEMID, itemid);\n\t\t\trel.set(ApplicationItemRelationData.COLUMN_HOSTID, hostid);\n\t\t\trel.insert(zabbixLocalDB);\n\t\t\t_commitTransactionIfRecommended();\n\n\t\t\tnum++;\n\t\t}\n\t\tif (num == 0) {\n\t\t\t// if there's no application, the ID #0 must be added (for other)\n\t\t\tApplicationItemRelationData rel = new ApplicationItemRelationData();\n\t\t\trel.set(ApplicationItemRelationData.COLUMN_APPLICATIONID, 0);\n\t\t\trel.set(ApplicationItemRelationData.COLUMN_ITEMID, itemid);\n\t\t\trel.set(ApplicationItemRelationData.COLUMN_HOSTID, hostid);\n\t\t\trel.insert(zabbixLocalDB);\n\n\t\t\t// if #0 \"other\" does not exist yet, it has to be created\n\t\t\tApplicationData app = new ApplicationData();\n\t\t\tapp.set(ApplicationData.COLUMN_APPLICATIONID, 0);\n\t\t\tapp.set(ApplicationData.COLUMN_NAME, \"- \"+context.getResources().getString(R.string.other)+\" -\");\n\t\t\tapp.insert(zabbixLocalDB, ApplicationData.COLUMN_APPLICATIONID);\n\t\t}\n\t}\n\n\t/**\n\t * import the newest event of a trigger\n\t * @param triggerid\n\t * @throws JSONException\n\t * @throws IOException\n\t * @throws HttpAuthorizationRequiredException\n\t * @throws NoAPIAccessException\n\t */\n\tpublic void importEventByTriggerId(String triggerid) throws JSONException, IOException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\tif (!isCached(EventData.TABLE_NAME, \"triggerid=\"+triggerid)) {\n\t\t\t_startTransaction();\n\t\t\tzabbixLocalDB.delete(EventData.TABLE_NAME, EventData.COLUMN_OBJECTID+\"=\"+triggerid, null);\n\n\t\t\tJSONObject params = new JSONObject()\n\t\t\t\t.put(\"output\", \"extend\")\n\t\t\t\t.put(isVersion2?\"selectHosts\":\"select_hosts\", \"extend\")\n\t\t\t\t.put(\"triggerids\", new JSONArray().put(triggerid))\n\t\t\t\t.put(\"limit\", 1)\n\t\t\t\t.put(\"source\", 0);\n\t\t\tif (!isVersion2) {\n\t\t\t\tparams.put(\"sortfield\", \"clock\")\n\t\t\t\t\t.put(\"sortorder\", \"DESC\");\n\t\t\t}\n\n\t\t\tJsonArrayOrObjectReader events = _queryStream(\n\t\t\t\t\t\"event.get\"\n\t\t\t\t\t, params\n\t\t\t);\n\t\t\timportEvents(events, null);\n\t\t\tevents.close();\n\n\t\t\tsetCached(EventData.TABLE_NAME, \"triggerid=\"+triggerid, ZabbixConfig.CACHE_LIFETIME_EVENTS);\n\t\t\t_endTransaction();\n\t\t}\n\t}\n\n\t/**\n\t * import the newest events\n\t * @throws ClientProtocolException\n\t * @throws IOException\n\t * @throws JSONException\n\t * @throws HttpAuthorizationRequiredException\n\t * @throws NoAPIAccessException\n\t */\n\tpublic void importEvents() throws ClientProtocolException, IOException, JSONException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\tif (!isCached(EventData.TABLE_NAME, null)) {\n\t\t\t_startTransaction();\n\t\t\tzabbixLocalDB.delete(EventData.TABLE_NAME, null, null);\n\t\t\tzabbixLocalDB.delete(TriggerData.TABLE_NAME, null, null);\n\t\t\tzabbixLocalDB.delete(CacheData.TABLE_NAME, CacheData.COLUMN_KIND+\"='\"+EventData.TABLE_NAME+\"'\", null);\n\t\t\tzabbixLocalDB.delete(CacheData.TABLE_NAME, CacheData.COLUMN_KIND+\"='\"+TriggerData.TABLE_NAME+\"'\", null);\n\n\t\t\tint numEvents = ZabbixConfig.EVENTS_GET_LIMIT;\n\n\t\t\tJSONObject params = new JSONObject()\n\t\t\t\t.put(\"output\", \"extend\")\n\t\t\t\t.put(\"limit\", ZabbixConfig.EVENTS_GET_LIMIT)\n\t\t\t\t.put(isVersion2?\"selectHosts\":\"select_hosts\", \"extend\")\n\t\t\t\t.put(isVersion2?\"selectTriggers\":\"select_triggers\", \"extend\")\n\t\t\t\t.put(\"source\", 0)\n\t\t\t\t.put(\"time_from\", (new Date().getTime()/1000) - ZabbixConfig.EVENT_GET_TIME_FROM_SHIFT);\n\t\t\tif (!isVersion2) {\n\t\t\t\t// in Zabbix version <2.0, this is not default\n\t\t\t\tparams.put(\"sortfield\", \"clock\")\n\t\t\t\t\t.put(\"sortorder\", \"DESC\");\n\t\t\t}\n\t\t\tJsonArrayOrObjectReader events = _queryStream(\n\t\t\t\t\t\"event.get\"\n\t\t\t\t\t, params\n\t\t\t);\n\t\t\timportEvents(events, numEvents);\n\t\t\tevents.close();\n\n\t\t\tsetCached(EventData.TABLE_NAME, null, ZabbixConfig.CACHE_LIFETIME_EVENTS);\n\t\t\t_endTransaction();\n\t\t}\n\t}\n\n\t/**\n\t * @param events stream\n\t * @param numEvents if null, no progressbar-update AND only isert, if it does not exist. If !null, progressbar-update AND always insert without checking\n\t * @throws JsonParseException\n\t * @throws IOException\n\t */\n\tprivate void importEvents(JsonArrayOrObjectReader events, Integer numEvents) throws JsonParseException, IOException {\n\t\tint i=0;\n\t\tJsonObjectReader eventReader;\n\t\twhile ((eventReader = events.next()) != null) {\n\t\t\tEventData e = new EventData();\n\t\t\twhile (eventReader.nextValueToken()) {\n\t\t\t\tString propName = eventReader.getCurrentName();\n\t\t\t\tif (propName.equals(\"hosts\")) {\n\t\t\t\t\t// import hosts\n\t\t\t\t\tString hostnames = (String) importHosts(eventReader.getJsonArrayOrObjectReader(), null)[0];\n\t\t\t\t\t// store hosts namen\n\t\t\t\t\te.set(EventData.COLUMN_HOSTS, hostnames);\n\t\t\t\t} else if (propName.equals(\"triggers\")) {\n\t\t\t\t\t// import triggers\n\t\t\t\t\timportTriggers(eventReader.getJsonArrayOrObjectReader());\n\t\t\t\t} else if (propName.equals(EventData.COLUMN_EVENTID)) {\n\t\t\t\t\te.set(EventData.COLUMN_EVENTID, Long.parseLong(eventReader.getText()));\n\t\t\t\t} else if (propName.equals(EventData.COLUMN_CLOCK)) {\n\t\t\t\t\te.set(EventData.COLUMN_CLOCK, Integer.parseInt(eventReader.getText()));\n\t\t\t\t} else if (propName.equals(EventData.COLUMN_OBJECTID)) {\n\t\t\t\t\te.set(EventData.COLUMN_OBJECTID, Long.parseLong(eventReader.getText()));\n\t\t\t\t} else if (propName.equals(EventData.COLUMN_ACK)) {\n\t\t\t\t\te.set(EventData.COLUMN_ACK, Integer.parseInt(eventReader.getText()) == 1);\n\t\t\t\t} else if (propName.equals(EventData.COLUMN_VALUE)) {\n\t\t\t\t\te.set(EventData.COLUMN_VALUE, Integer.parseInt(eventReader.getText()));\n\t\t\t\t} else {\n\t\t\t\t\teventReader.nextProperty();\n\t\t\t\t}\n\t\t\t}\n\t\t\t// event is parsed and can be inserted into the db\n\t\t\tif (numEvents == null) {\n\t\t\t\te.insert(zabbixLocalDB, EventData.COLUMN_EVENTID);\n\t\t\t} else {\n\t\t\t\te.insert(zabbixLocalDB);\n\t\t\t\tif (++i % 10 == 0) {\n\t\t\t\t\tshowProgress(i*100/numEvents);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t_commitTransactionIfRecommended();\n\t\t}\n\t}\n\n\t/**\n\t * import graph items\n\t *\n\t * @param graphItems\n\t * @return true, if graphid column has to be updated from -1 to the correct graphid later.\n\t * @throws JsonParseException\n\t * @throws NumberFormatException\n\t * @throws IOException\n\t */\n\tprivate boolean importGraphItems(JsonArrayOrObjectReader graphItems) throws JsonParseException, NumberFormatException, IOException {\n\t\tboolean mustSetGraphid = false;\n\t\tJsonObjectReader graphItemReader;\n\t\twhile ((graphItemReader = graphItems.next()) != null) {\n\t\t\tGraphItemData gi = new GraphItemData();\n\t\t\twhile (graphItemReader.nextValueToken()) {\n\t\t\t\tString propName = graphItemReader.getCurrentName();\n\t\t\t\tif (propName.equals(\"gitemid\")) {\n\t\t\t\t\tgi.set(GraphItemData.COLUMN_GRAPHITEMID, Long.parseLong(graphItemReader.getText()));\n\t\t\t\t} else if (propName.equals(GraphItemData.COLUMN_GRAPHID)) {\n\t\t\t\t\tgi.set(GraphItemData.COLUMN_GRAPHID, Long.parseLong(graphItemReader.getText()));\n\t\t\t\t} else if (propName.equals(GraphItemData.COLUMN_ITEMID)) {\n\t\t\t\t\tgi.set(GraphItemData.COLUMN_ITEMID, Long.parseLong(graphItemReader.getText()));\n\t\t\t\t} else if (propName.equals(GraphItemData.COLUMN_COLOR)) {\n\t\t\t\t\t// hex string => color int\n\t\t\t\t\tgi.set(GraphItemData.COLUMN_COLOR, Color.parseColor(\"#\"+graphItemReader.getText()));\n\t\t\t\t} else {\n\t\t\t\t\tgraphItemReader.nextProperty();\n\t\t\t\t}\n\t\t\t}\n\t\t\t// if graphid-column was not set, this must be done later. temporary graphid=-1\n\t\t\tif (gi.get(GraphItemData.COLUMN_GRAPHID) == null) {\n\t\t\t\tgi.set(GraphItemData.COLUMN_GRAPHID, -1);\n\t\t\t\tmustSetGraphid = true;\n\t\t\t}\n\t\t\tgi.insert(zabbixLocalDB);\n\t\t}\n\t\treturn mustSetGraphid;\n\t}\n\n\tpublic void importGraphsForScreen(long screenid) throws ClientProtocolException, IOException, JSONException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\tif (!isCached(GraphData.TABLE_NAME, \"screenid=\"+screenid)) {\n\t\t\t_startTransaction();\n\n\t\t\t// collect all graphids\n\t\t\tSet<Long> graphids = new HashSet<Long>();\n\t\t\tCursor cur = zabbixLocalDB.query(ScreenItemData.TABLE_NAME, null, ScreenItemData.COLUMN_SCREENID+\"=\"+screenid, null, null, null, null);\n\t\t\twhile (cur.moveToNext()) {\n\t\t\t\tgraphids.add(cur.getLong(cur.getColumnIndex(ScreenItemData.COLUMN_RESOURCEID)));\n\t\t\t}\n\n\t\t\t// delete old graphs\n\t\t\tString str_graphids = graphids.toString().replace(\"[\", \"\").replace(\"]\", \"\");\n\t\t\tif (str_graphids.length()>0) {\n\t\t\t\tzabbixLocalDB.delete(GraphData.TABLE_NAME, GraphData.COLUMN_GRAPHID+\" IN (\"+str_graphids+\")\", null);\n\t\t\t\tzabbixLocalDB.delete(GraphItemData.TABLE_NAME, GraphItemData.COLUMN_GRAPHID+\" IN (\"+str_graphids+\")\", null);\n\t\t\t}\n\t\t\tzabbixLocalDB.delete(CacheData.TABLE_NAME, CacheData.COLUMN_KIND+\"='\"+GraphData.TABLE_NAME+\"' AND \"+CacheData.COLUMN_FILTER+\"='screenid=\"+screenid+'\\'', null);\n\n\t\t\tJsonArrayOrObjectReader graphs = _queryStream(\n\t\t\t\t\t\"graph.get\"\n\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t\t.put(isVersion2?\"selectGraphItems\":\"select_graph_items\", \"extend\")\n\t\t\t\t\t\t.put(isVersion2?\"selectItems\":\"select_items\", \"extend\")\n\t\t\t\t\t\t.put(\"output\", \"extend\")\n\t\t\t\t\t\t.put(\"graphids\", new JSONArray(graphids))\n\t\t\t);\n\t\t\tJsonObjectReader graphReader;\n\t\t\twhile ((graphReader = graphs.next()) != null) {\n\t\t\t\tboolean mustSetGraphid = false;\n\t\t\t\tGraphData scr = new GraphData();\n\t\t\t\twhile (graphReader.nextValueToken()) {\n\t\t\t\t\tString propName = graphReader.getCurrentName();\n\t\t\t\t\tif (propName.equals(GraphData.COLUMN_GRAPHID)) {\n\t\t\t\t\t\tscr.set(GraphData.COLUMN_GRAPHID, Long.parseLong(graphReader.getText()));\n\t\t\t\t\t} else if (propName.equals(GraphData.COLUMN_NAME)) {\n\t\t\t\t\t\tscr.set(GraphData.COLUMN_NAME, graphReader.getText());\n\t\t\t\t\t} else if (propName.equals(\"gitems\")) {\n\t\t\t\t\t\tmustSetGraphid = importGraphItems(graphReader.getJsonArrayOrObjectReader());\n\t\t\t\t\t} else if (propName.equals(\"items\")) {\n\t\t\t\t\t\timportItems(graphReader.getJsonArrayOrObjectReader(), 0, true);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tgraphReader.nextProperty();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tscr.insert(zabbixLocalDB);\n\t\t\t\tif (mustSetGraphid) {\n\t\t\t\t\tContentValues values = new ContentValues(1);\n\t\t\t\t\tvalues.put(GraphItemData.COLUMN_GRAPHID, (Long) scr.get(GraphData.COLUMN_GRAPHID));\n\t\t\t\t\tzabbixLocalDB.update(\n\t\t\t\t\t\t\tGraphItemData.TABLE_NAME\n\t\t\t\t\t\t\t, values\n\t\t\t\t\t\t\t, GraphItemData.COLUMN_GRAPHID+\"=-1\"\n\t\t\t\t\t\t\t, null);\n\t\t\t\t}\n\t\t\t}\n\t\t\tgraphs.close();\n\n\t\t\tsetCached(GraphData.TABLE_NAME, \"screenid=\"+screenid, ZabbixConfig.CACHE_LIFETIME_SCREENS);\n\t\t\t_endTransaction();\n\t\t}\n\t}\n\n\tpublic void importHistoryDetails(String itemid) throws ClientProtocolException, IOException, JSONException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\tif (!isCached(HistoryDetailData.TABLE_NAME, itemid)) {\n\t\t\t_startTransaction();\n\t\t\tzabbixLocalDB.delete(HistoryDetailData.TABLE_NAME, HistoryDetailData.COLUMN_ITEMID+\"=\"+itemid, null);\n\n\t\t\t// the past 2 hours\n\t\t\tlong time_till = new Date().getTime() / 1000;\n\t\t\tlong time_from = time_till - ZabbixConfig.HISTORY_GET_TIME_FROM_SHIFT;\n\n\t\t\t// Workaround: historydetails only comes if you use the correct \"history\"-parameter.\n\t\t\t// this parameter can be \"null\" or a number 0-4. Because we don't know when to use which,\n\t\t\t// we try them all, until we get results.\n\t\t\tInteger historytype = null;\n\t\t\tJSONObject result = _queryBuffer(\n\t\t\t\t\t\"history.get\"\n\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t\t.put(\"limit\", 1)\n\t\t\t\t\t\t.put(\"history\", historytype) // for integer ?\n\t\t\t\t\t\t.put(\"itemids\", new JSONArray().put(itemid))\n\t\t\t\t\t\t.put(\"time_from\", time_from)\n\t\t\t);\n\n\t\t\tJSONArray testHistorydetails = result.getJSONArray(\"result\");\n\t\t\tif (testHistorydetails.length() == 0) {\n\t\t\t\thistorytype = -1;\n\t\t\t\twhile (testHistorydetails.length() == 0 && ++historytype <= 4) {\n\t\t\t\t\t// if we get an empty array, we try another history parameter\n\t\t\t\t\tresult = _queryBuffer(\n\t\t\t\t\t\t\t\"history.get\"\n\t\t\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t\t\t\t.put(\"output\", \"extend\")\n\t\t\t\t\t\t\t\t.put(\"limit\", 1)\n\t\t\t\t\t\t\t\t.put(\"history\", historytype)\n\t\t\t\t\t\t\t\t.put(\"itemids\", new JSONArray().put(itemid))\n\t\t\t\t\t\t\t\t.put(\"time_from\", time_from)\n\t\t\t\t\t);\n\t\t\t\t\ttestHistorydetails = result.getJSONArray(\"result\");\n\t\t\t\t}\n\t\t\t}\n\t\t\t// correct historytype found and there are data\n\t\t\tif (testHistorydetails.length() > 0) {\n\t\t\t\t// count of the entries cannot be detected (zabbix bug),\n\t\t\t\t// so we use a fiction\n\t\t\t\tint numDetails = 400;\n\t\t\t\tint curI=0;\n\t\t\t\tJsonArrayOrObjectReader historydetails = _queryStream(\n\t\t\t\t\t\t\"history.get\"\n\t\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t\t\t.put(\"output\", \"extend\")\n\t\t\t\t\t\t\t.put(\"limit\", ZabbixConfig.HISTORY_GET_LIMIT)\n\t\t\t\t\t\t\t.put(\"history\", historytype)\n\t\t\t\t\t\t\t.put(\"itemids\", new JSONArray().put(itemid))\n\t\t\t\t\t\t\t.put(\"time_from\", time_from)\n\t\t\t\t\t\t\t.put(\"sortfield\", \"clock\")\n\t\t\t\t\t\t\t.put(\"sortorder\", \"DESC\")\n\t\t\t\t);\n\t\t\t\tJsonObjectReader historydetail;\n\t\t\t\ttry {\n\t\t\t\t\tint selI = 0;\n\t\t\t\t\twhile ((historydetail = historydetails.next()) != null) {\n\t\t\t\t\t\t// save only every 20th\n\t\t\t\t\t\tif (selI++ % 20 != 0) {\n\t\t\t\t\t\t\twhile (historydetail.nextValueToken()) {\n\t\t\t\t\t\t\t\thistorydetail.nextProperty();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tHistoryDetailData h = new HistoryDetailData();\n\t\t\t\t\t\twhile (historydetail.nextValueToken()) {\n\t\t\t\t\t\t\tString propName = historydetail.getCurrentName();\n\t\t\t\t\t\t\tif (propName.equals(HistoryDetailData.COLUMN_CLOCK)) {\n\t\t\t\t\t\t\t\th.set(HistoryDetailData.COLUMN_CLOCK, Integer.parseInt(historydetail.getText()));\n\t\t\t\t\t\t\t} else if (propName.equals(HistoryDetailData.COLUMN_ITEMID)) {\n\t\t\t\t\t\t\t\th.set(HistoryDetailData.COLUMN_ITEMID, Long.parseLong(historydetail.getText()));\n\t\t\t\t\t\t\t} else if (propName.equals(HistoryDetailData.COLUMN_VALUE)) {\n\t\t\t\t\t\t\t\th.set(HistoryDetailData.COLUMN_VALUE, Double.parseDouble(historydetail.getText()));\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\thistorydetail.nextProperty();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\th.insert(zabbixLocalDB);\n\t\t\t\t\t\tif (++curI % 10 == 0) {\n\t\t\t\t\t\t\tshowProgress(Math.min(curI*100/numDetails, 84));\n\t\t\t\t\t\t}\n\t\t\t\t\t\t_commitTransactionIfRecommended();\n\t\t\t\t\t}\n\t\t\t\t} catch (NumberFormatException e) {\n\t\t\t\t\t// data are unuseable, e.g. because it's a string\n\t\t\t\t}\n\t\t\t\thistorydetails.close();\n\t\t\t}\n\t\t\tsetCached(HistoryDetailData.TABLE_NAME, itemid, ZabbixConfig.CACHE_LIFETIME_HISTORY_DETAILS);\n\t\t\t_endTransaction();\n\t\t}\n\t}\n\n\tprivate long importHostGroups(JsonArrayOrObjectReader jsonArray) throws JsonParseException, IOException {\n\t\tlong firstHostGroupId = -1;\n\t\tJsonObjectReader hostReader;\n\t\twhile ((hostReader = jsonArray.next()) != null) {\n\t\t\tHostGroupData h = new HostGroupData();\n\t\t\twhile (hostReader.nextValueToken()) {\n\t\t\t\tString propName = hostReader.getCurrentName();\n\t\t\t\tif (propName.equals(HostGroupData.COLUMN_GROUPID)) {\n\t\t\t\t\tlong id = Long.parseLong(hostReader.getText());\n\t\t\t\t\tif (firstHostGroupId == -1) firstHostGroupId = id;\n\t\t\t\t\th.set(HostGroupData.COLUMN_GROUPID, id);\n\t\t\t\t} else if (propName.equals(HostGroupData.COLUMN_NAME)) {\n\t\t\t\t\th.set(HostGroupData.COLUMN_NAME, hostReader.getText());\n\t\t\t\t} else {\n\t\t\t\t\thostReader.nextProperty();\n\t\t\t\t}\n\t\t\t}\n\t\t\th.insert(zabbixLocalDB, HostGroupData.COLUMN_GROUPID);\n\t\t\t_commitTransactionIfRecommended();\n\t\t}\n\n\t\treturn firstHostGroupId;\n\t}\n\n\t/**\n\t * import the hosts from stream\n\t * @param jsonArray stream\n\t * @param numHosts count of hosts for progressbar. null if unknown.\n\t * @return Object[] {(String) comma-separated all Hostnames, (Long) 1. host id}\n\t * @throws JsonParseException\n\t * @throws IOException\n\t */\n\tprivate Object[] importHosts(JsonArrayOrObjectReader jsonArray, Integer numHosts) throws JsonParseException, IOException {\n\t\tList<String> hostnames = new ArrayList<String>();\n\t\tlong firstHostId = -1;\n\t\tJsonObjectReader hostReader;\n\t\tint i=0;\n\t\twhile ((hostReader = jsonArray.next()) != null) {\n\t\t\tHostData h = new HostData();\n\t\t\twhile (hostReader.nextValueToken()) {\n\t\t\t\tString propName = hostReader.getCurrentName();\n\t\t\t\tif (propName.equals(HostData.COLUMN_HOSTID)) {\n\t\t\t\t\th.set(HostData.COLUMN_HOSTID, Long.parseLong(hostReader.getText()));\n\t\t\t\t\tif (firstHostId == -1) {\n\t\t\t\t\t\tfirstHostId = (Long) h.get(HostData.COLUMN_HOSTID);\n\t\t\t\t\t}\n\t\t\t\t} else if (propName.equals(HostData.COLUMN_HOST)) {\n\t\t\t\t\tString host = hostReader.getText();\n\t\t\t\t\thostnames.add(host);\n\t\t\t\t\th.set(HostData.COLUMN_HOST, host);\n\t\t\t\t} else if (propName.equals(\"groups\")) {\n\t\t\t\t\tlong groupid = importHostGroups(hostReader.getJsonArrayOrObjectReader());\n\t\t\t\t\tif (groupid != -1) {\n\t\t\t\t\t\th.set(HostData.COLUMN_GROUPID, groupid);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\thostReader.nextProperty();\n\t\t\t\t}\n\t\t\t}\n\t\t\t// host without group will get group #0 (other)\n\t\t\tif (h.get(HostData.COLUMN_GROUPID) == null) {\n\t\t\t\th.set(HostData.COLUMN_GROUPID, 0);\n\t\t\t\t// create \"other\" hostgroup #1\n\t\t\t\tHostGroupData hg = new HostGroupData();\n\t\t\t\thg.set(HostGroupData.COLUMN_GROUPID, 0);\n\t\t\t\thg.set(HostGroupData.COLUMN_NAME, \"- \"+context.getResources().getString(R.string.other)+\" -\");\n\t\t\t\thg.insert(zabbixLocalDB, HostGroupData.COLUMN_GROUPID);\n\t\t\t}\n\t\t\th.insert(zabbixLocalDB, HostData.COLUMN_HOSTID);\n\t\t\tif (numHosts != null && ++i % 10 == 0) {\n\t\t\t\tshowProgress(i*100/numHosts);\n\t\t\t}\n\t\t\t_commitTransactionIfRecommended();\n\t\t}\n\n\t\treturn new Object[] {hostnames.toString().replaceAll(\"[\\\\[\\\\]]\", \"\"), firstHostId};\n\t}\n\n\tpublic void importHostsAndGroups() throws JSONException, IOException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\tif (!isCached(HostData.TABLE_NAME, null)) {\n\t\t\t_startTransaction();\n\t\t\tzabbixLocalDB.delete(HostData.TABLE_NAME, null, null);\n\t\t\tzabbixLocalDB.delete(HostGroupData.TABLE_NAME, null, null);\n\n\t\t\t// get count of hosts\n\t\t\tJSONObject result = _queryBuffer(\n\t\t\t\t\t\"host.get\"\n\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t\t.put(\"countOutput\", 1)\n\t\t\t\t\t\t.put(\"limit\", ZabbixConfig.HOST_GET_LIMIT)\n\t\t\t\t\t\t.put(isVersion2?\"selectGroups\":\"select_groups\", \"extend\")\n\t\t\t);\n\t\t\tint numHosts = result.getInt(\"result\");\n\t\t\tJsonArrayOrObjectReader hosts = _queryStream(\n\t\t\t\t\t\"host.get\"\n\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t\t.put(\"output\", \"extend\")\n\t\t\t\t\t\t.put(\"limit\", ZabbixConfig.HOST_GET_LIMIT)\n\t\t\t\t\t\t.put(isVersion2?\"selectGroups\":\"select_groups\", \"extend\")\n\t\t\t);\n\t\t\timportHosts(hosts, numHosts);\n\t\t\thosts.close();\n\n\t\t\tsetCached(HostData.TABLE_NAME, null, ZabbixConfig.CACHE_LIFETIME_HOSTS);\n\t\t\t_endTransaction();\n\t\t}\n\t}\n\n\t/**\n\t * import items from stream.\n\t * @param items stream\n\t * @param numItems count for progressbar, if 0 no progressbarupdate\n\t * @param checkBeforeInsert if true, only make an insert if item does not exist\n\t * @return the first item id\n\t * @throws JsonParseException\n\t * @throws IOException\n\t */\n\tprivate long importItems(JsonArrayOrObjectReader items, int numItems, boolean checkBeforeInsert) throws JsonParseException, IOException {\n\t\tlong firstItemId = -1;\n\t\tint curI=0;\n\t\tJsonObjectReader itemReader;\n\t\twhile ((itemReader = items.next()) != null) {\n\t\t\tItemData i = new ItemData();\n\t\t\tString key_ = null;\n\t\t\twhile (itemReader.nextValueToken()) {\n\t\t\t\tString propName = itemReader.getCurrentName();\n\t\t\t\tif (propName.equals(ItemData.COLUMN_ITEMID)) {\n\t\t\t\t\ti.set(ItemData.COLUMN_ITEMID, Long.parseLong(itemReader.getText()));\n\t\t\t\t\tif (firstItemId == -1) {\n\t\t\t\t\t\tfirstItemId = (Long) i.get(ItemData.COLUMN_ITEMID);\n\t\t\t\t\t}\n\t\t\t\t} else if (propName.equals(ItemData.COLUMN_HOSTID)) {\n\t\t\t\t\ti.set(ItemData.COLUMN_HOSTID, Long.parseLong(itemReader.getText()));\n\t\t\t\t} else if (propName.equals(ItemData.COLUMN_DESCRIPTION) || propName.equals(\"name\")) {\n\t\t\t\t\t// since zabbix 2.x is the name of the item \"name\"\n\t\t\t\t\t// before zabbix 2.x the name field was \"description\"\n\t\t\t\t\tif (isVersion2 && propName.equals(\"name\")) {\n\t\t\t\t\t\ti.set(ItemData.COLUMN_DESCRIPTION, itemReader.getText());\n\t\t\t\t\t} else if (!isVersion2) {\n\t\t\t\t\t\ti.set(ItemData.COLUMN_DESCRIPTION, itemReader.getText());\n\t\t\t\t\t}\n\t\t\t\t} else if (propName.equals(ItemData.COLUMN_LASTCLOCK)) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\ti.set(ItemData.COLUMN_LASTCLOCK, Integer.parseInt(itemReader.getText()));\n\t\t\t\t\t} catch (NumberFormatException e) {\n\t\t\t\t\t\t// ignore\n\t\t\t\t\t}\n\t\t\t\t} else if (propName.equals(ItemData.COLUMN_LASTVALUE)) {\n\t\t\t\t\ti.set(ItemData.COLUMN_LASTVALUE, itemReader.getText());\n\t\t\t\t} else if (propName.equals(ItemData.COLUMN_UNITS)) {\n\t\t\t\t\ti.set(ItemData.COLUMN_UNITS, itemReader.getText());\n\t\t\t\t} else if (propName.equals(\"key_\")) {\n\t\t\t\t\tkey_ = itemReader.getText();\n\t\t\t\t} else if (propName.equals(\"applications\")) {\n\t\t\t\t\t// at this point itemid and hostid is unknown\n\t\t\t\t\t// because of this, all applicationrelations will be saved with itemid and hostid \"-1\".\n\t\t\t\t\t// later the IDs will be replaced with the correct\n\t\t\t\t\timportApplications(-1, -1, itemReader.getJsonArrayOrObjectReader());\n\t\t\t\t} else {\n\t\t\t\t\titemReader.nextProperty();\n\t\t\t\t}\n\t\t\t}\n\t\t\t// if applicable replace placeholder\n\t\t\tString description = (String) i.get(ItemData.COLUMN_DESCRIPTION);\n\t\t\tif (description.matches(\".*\\\\$[0-9].*\")) {\n\t\t\t\tif (key_ != null && key_.indexOf('[') != -1) {\n\t\t\t\t\tString[] keys = key_.substring(key_.indexOf('[')+1, key_.indexOf(']')).split(\",\");\n\t\t\t\t\tfor (int ix=0; ix<keys.length; ix++) {\n\t\t\t\t\t\tdescription = description.replace(\"$\"+(ix+1), keys[ix]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\ti.set(ItemData.COLUMN_DESCRIPTION, description);\n\t\t\tif (checkBeforeInsert) {\n\t\t\t\ti.insert(zabbixLocalDB, ItemData.COLUMN_ITEMID);\n\t\t\t} else {\n\t\t\t\ti.insert(zabbixLocalDB);\n\t\t\t}\n\t\t\tif (numItems > 0 && ++curI % 10 == 0) {\n\t\t\t\tshowProgress(curI*100/numItems);\n\t\t\t}\n\n\t\t\t// now the \"-1\" IDs of applicationsrelation will be replaced with the correct itemID\n\t\t\tContentValues values = new ContentValues(2);\n\t\t\tvalues.put(ApplicationItemRelationData.COLUMN_ITEMID, (Long) i.get(ItemData.COLUMN_ITEMID));\n\t\t\tvalues.put(ApplicationItemRelationData.COLUMN_HOSTID, (Long) i.get(ItemData.COLUMN_HOSTID));\n\t\t\tzabbixLocalDB.update(\n\t\t\t\t\tApplicationItemRelationData.TABLE_NAME\n\t\t\t\t\t, values\n\t\t\t\t\t, ApplicationItemRelationData.COLUMN_ITEMID+\"=-1\"\n\t\t\t\t\t, null\n\t\t\t);\n\t\t}\n\t\treturn firstItemId;\n\t}\n\n\tpublic void importItems(long hostid) throws JSONException, IOException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\tif (!isCached(ItemData.TABLE_NAME, \"hostid=\"+hostid)) {\n\t\t\t_startTransaction();\n\t\t\tzabbixLocalDB.delete(ItemData.TABLE_NAME, ItemData.COLUMN_HOSTID+\"=\"+hostid, null);\n\t\t\tzabbixLocalDB.delete(ApplicationItemRelationData.TABLE_NAME, ApplicationItemRelationData.COLUMN_HOSTID+\"=\"+hostid, null);\n\n\t\t\t// count of items\n\t\t\tJSONObject result = _queryBuffer(\n\t\t\t\t\t\"item.get\"\n\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t.put(\"output\", \"extend\")\n\t\t\t\t\t.put(\"countOutput\", 1)\n\t\t\t\t\t.put(\"limit\", ZabbixConfig.ITEM_GET_LIMIT)\n\t\t\t\t\t.put(\"hostids\", new JSONArray().put(hostid))\n\t\t\t);\n\t\t\tint numItems = result.getInt(\"result\");\n\t\t\tJsonArrayOrObjectReader items = _queryStream(\n\t\t\t\t\t\"item.get\"\n\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t\t.put(\"output\", \"extend\")\n\t\t\t\t\t\t.put(\"limit\", ZabbixConfig.ITEM_GET_LIMIT)\n\t\t\t\t\t\t.put(isVersion2?\"selectApplications\":\"select_applications\", \"extend\")\n\t\t\t\t\t\t.put(\"hostids\", new JSONArray().put(hostid))\n\t\t\t);\n\t\t\timportItems(items, numItems, false);\n\t\t\titems.close();\n\n\t\t\tsetCached(ItemData.TABLE_NAME, \"hostid=\"+hostid, ZabbixConfig.CACHE_LIFETIME_ITEMS);\n\t\t\t_endTransaction();\n\t\t}\n\t}\n\n\tprivate void importScreenItems(JsonArrayOrObjectReader screenItems) throws JsonParseException, NumberFormatException, IOException {\n\t\tJsonObjectReader screenItemReader;\n\t\twhile ((screenItemReader = screenItems.next()) != null) {\n\t\t\tScreenItemData si = new ScreenItemData();\n\t\t\tint resourcetype = -1;\n\t\t\twhile (screenItemReader.nextValueToken()) {\n\t\t\t\tString propName = screenItemReader.getCurrentName();\n\t\t\t\tif (propName.equals(ScreenItemData.COLUMN_SCREENITEMID)) {\n\t\t\t\t\tsi.set(ScreenItemData.COLUMN_SCREENITEMID, Long.parseLong(screenItemReader.getText()));\n\t\t\t\t} else if (propName.equals(ScreenItemData.COLUMN_SCREENID)) {\n\t\t\t\t\tsi.set(ScreenItemData.COLUMN_SCREENID, Long.parseLong(screenItemReader.getText()));\n\t\t\t\t} else if (propName.equals(ScreenItemData.COLUMN_RESOURCEID)) {\n\t\t\t\t\tsi.set(ScreenItemData.COLUMN_RESOURCEID, Long.parseLong(screenItemReader.getText()));\n\t\t\t\t} else if (propName.equals(\"resourcetype\")) {\n\t\t\t\t\tresourcetype = Integer.parseInt(screenItemReader.getText());\n\t\t\t\t} else {\n\t\t\t\t\tscreenItemReader.nextProperty();\n\t\t\t\t}\n\t\t\t}\n\t\t\t// only resouretype == 0\n\t\t\tif (resourcetype == 0) {\n\t\t\t\tsi.insert(zabbixLocalDB);\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic void importScreens() throws ClientProtocolException, IOException, JSONException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\tif (!isCached(ScreenData.TABLE_NAME, null)) {\n\t\t\t_startTransaction();\n\n\t\t\tzabbixLocalDB.delete(ScreenData.TABLE_NAME, null, null);\n\t\t\tzabbixLocalDB.delete(ScreenItemData.TABLE_NAME, null, null);\n\t\t\tzabbixLocalDB.delete(CacheData.TABLE_NAME, CacheData.COLUMN_KIND+\"='\"+ScreenData.TABLE_NAME+\"'\", null);\n\n\t\t\tJsonArrayOrObjectReader screens = _queryStream(\n\t\t\t\t\t(isVersion2?\"s\":\"S\")+\"creen.get\"\n\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t\t.put(\"output\", \"extend\")\n\t\t\t\t\t\t.put(isVersion2?\"selectScreenItems\":\"select_screenitems\", \"extend\")\n\t\t\t);\n\t\t\tJsonObjectReader screenReader;\n\t\t\twhile ((screenReader = screens.next()) != null) {\n\t\t\t\tScreenData scr = new ScreenData();\n\t\t\t\twhile (screenReader.nextValueToken()) {\n\t\t\t\t\tString propName = screenReader.getCurrentName();\n\t\t\t\t\tif (propName.equals(ScreenData.COLUMN_SCREENID)) {\n\t\t\t\t\t\tscr.set(ScreenData.COLUMN_SCREENID, Long.parseLong(screenReader.getText()));\n\t\t\t\t\t} else if (propName.equals(ScreenData.COLUMN_NAME)) {\n\t\t\t\t\t\tscr.set(ScreenData.COLUMN_NAME, screenReader.getText());\n\t\t\t\t\t} else if (propName.equals(\"screenitems\")) {\n\t\t\t\t\t\timportScreenItems(screenReader.getJsonArrayOrObjectReader());\n\t\t\t\t\t} else {\n\t\t\t\t\t\tscreenReader.nextProperty();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tscr.insert(zabbixLocalDB);\n\t\t\t}\n\t\t\tscreens.close();\n\n\t\t\tsetCached(ScreenData.TABLE_NAME, null, ZabbixConfig.CACHE_LIFETIME_SCREENS);\n\t\t\t_endTransaction();\n\t\t}\n\t}\n\n\tpublic void importTrigger(String triggerid) throws JSONException, IOException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\tif (!isCached(TriggerData.TABLE_NAME, \"triggerid=\"+triggerid)) {\n\t\t\t_startTransaction();\n\n\t\t\tJsonArrayOrObjectReader trigger = _queryStream(\n\t\t\t\t\t\"trigger.get\"\n\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t\t.put(\"output\", \"extend\")\n\t\t\t\t\t\t.put(isVersion2?\"selectHosts\":\"select_hosts\", \"extend\")\n\t\t\t\t\t\t.put(\"triggerids\", new JSONArray().put(triggerid))\n\t\t\t);\n\t\t\timportTriggers(trigger);\n\t\t\ttrigger.close();\n\n\t\t\tsetCached(TriggerData.TABLE_NAME, \"triggerid=\"+triggerid, ZabbixConfig.CACHE_LIFETIME_TRIGGERS);\n\t\t\t_endTransaction();\n\t\t}\n\t}\n\n\t/**\n\t * importiert ein trigger mit dem attribute itemid. ggf. wird der trigger zuerst gelöscht und neu angelegt.\n\t * imports a trigger with the attribute itemid. if trigger already exists, it will be removed first.\n\t * @param triggerid\n\t * @throws JSONException\n\t * @throws IOException\n\t * @throws HttpAuthorizationRequiredException\n\t * @throws NoAPIAccessException\n\t */\n\tpublic void importTriggerColumnItemId(String triggerid) throws JSONException, IOException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\t// check if the trigger exists and if the itemid was set\n\t\tboolean mustImport = true;\n\t\tCursor cur = zabbixLocalDB.query(TriggerData.TABLE_NAME, null, TriggerData.COLUMN_TRIGGERID+\"=\"+triggerid, null, null, null, null);\n\t\tif (cur.moveToFirst()) {\n\t\t\tlong itemid = 0;\n\t\t\ttry {\n\t\t\t\titemid = cur.getLong(cur.getColumnIndex(TriggerData.COLUMN_ITEMID));\n\t\t\t} catch (Exception e) {\n\t\t\t\t// no itemid\n\t\t\t}\n\t\t\tif (itemid > 0) {\n\t\t\t\tmustImport = false;\n\t\t\t}\n\t\t}\n\t\tif (mustImport) {\n\t\t\t_startTransaction();\n\t\t\tzabbixLocalDB.delete(TriggerData.TABLE_NAME, TriggerData.COLUMN_TRIGGERID+\"=\"+triggerid, null);\n\t\t\tJsonArrayOrObjectReader triggers = _queryStream(\n\t\t\t\t\t\"trigger.get\"\n\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t\t.put(\"output\", \"extend\")\n\t\t\t\t\t\t.put(isVersion2?\"selectHosts\":\"select_hosts\", \"extend\")\n\t\t\t\t\t\t.put(isVersion2?\"selectGroups\":\"select_groups\", \"extend\")\n\t\t\t\t\t\t.put(isVersion2?\"selectItems\":\"select_items\", \"extend\")\n\t\t\t\t\t\t.put(\"triggerids\", new JSONArray().put(triggerid))\n\t\t\t\t\t\t.put(\"limit\", 1)\n\t\t\t);\n\t\t\timportTriggers(triggers);\n\t\t\t_endTransaction();\n\t\t}\n\t}\n\n\t/**\n\t * imports the \"warning\"-triggers\n\t * @throws JSONException\n\t * @throws IOException\n\t * @throws HttpAuthorizationRequiredException\n\t * @throws NoAPIAccessException\n\t */\n\tpublic void importTriggers() throws JSONException, IOException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\tif (!isCached(TriggerData.TABLE_NAME, null)) {\n\t\t\t// clear triggers\n\t\t\tzabbixLocalDB.delete(TriggerData.TABLE_NAME, null, null);\n\n\t\t\t_startTransaction();\n\n\t\t\tlong min = (new Date().getTime()/1000)-ZabbixConfig.STATUS_SHOW_TRIGGER_TIME;\n\t\t\tJsonArrayOrObjectReader triggers = _queryStream(\n\t\t\t\t\t\"trigger.get\"\n\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t\t.put(\"output\", \"extend\")\n\t\t\t\t\t\t.put(\"sortfield\", \"lastchange\")\n\t\t\t\t\t\t.put(\"sortorder\", \"desc\")\n\t\t\t\t\t\t.put(isVersion2?\"selectHosts\":\"select_hosts\", \"extend\")\n\t\t\t\t\t\t.put(isVersion2?\"selectGroups\":\"select_groups\", \"extend\")\n\t\t\t\t\t\t.put(isVersion2?\"selectItems\":\"select_items\", \"extend\")\n\t\t\t\t\t\t.put(\"lastChangeSince\", min)\n\t\t\t\t\t\t.put(\"only_true\", \"1\")\n\t\t\t\t\t\t.put(\"limit\", ZabbixConfig.TRIGGER_GET_LIMIT)\n\t\t\t\t\t\t.put(\"expandDescription\", true)\n\t\t\t);\n\t\t\timportTriggers(triggers);\n\t\t\ttriggers.close();\n\n\t\t\tsetCached(TriggerData.TABLE_NAME, null, ZabbixConfig.CACHE_LIFETIME_TRIGGERS);\n\t\t\t_endTransaction();\n\t\t}\n\t}\n\n\tprivate void importTriggers(JsonArrayOrObjectReader jsonArray) throws JsonParseException, IOException {\n\t\tJsonObjectReader triggerReader;\n\t\twhile ((triggerReader = jsonArray.next()) != null) {\n\t\t\tTriggerData t = new TriggerData();\n\t\t\twhile (triggerReader.nextValueToken()) {\n\t\t\t\tString propName = triggerReader.getCurrentName();\n\t\t\t\tif (propName.equals(TriggerData.COLUMN_TRIGGERID)) {\n\t\t\t\t\tt.set(TriggerData.COLUMN_TRIGGERID, Long.parseLong(triggerReader.getText()));\n\t\t\t\t} else if (propName.equals(TriggerData.COLUMN_COMMENTS)) {\n\t\t\t\t\tt.set(TriggerData.COLUMN_COMMENTS, triggerReader.getText());\n\t\t\t\t} else if (propName.equals(TriggerData.COLUMN_DESCRIPTION)) {\n\t\t\t\t\tt.set(TriggerData.COLUMN_DESCRIPTION, triggerReader.getText());\n\t\t\t\t} else if (propName.equals(TriggerData.COLUMN_EXPRESSION)) {\n\t\t\t\t\tt.set(TriggerData.COLUMN_EXPRESSION, triggerReader.getText());\n\t\t\t\t} else if (propName.equals(TriggerData.COLUMN_LASTCHANGE)) {\n\t\t\t\t\tt.set(TriggerData.COLUMN_LASTCHANGE, Integer.parseInt(triggerReader.getText()));\n\t\t\t\t} else if (propName.equals(TriggerData.COLUMN_PRIORITY)) {\n\t\t\t\t\tt.set(TriggerData.COLUMN_PRIORITY, Integer.parseInt(triggerReader.getText()));\n\t\t\t\t} else if (propName.equals(TriggerData.COLUMN_STATUS)) {\n\t\t\t\t\tt.set(TriggerData.COLUMN_STATUS, Integer.parseInt(triggerReader.getText()));\n\t\t\t\t} else if (propName.equals(TriggerData.COLUMN_VALUE)) {\n\t\t\t\t\tt.set(TriggerData.COLUMN_VALUE, Integer.parseInt(triggerReader.getText()));\n\t\t\t\t} else if (propName.equals(TriggerData.COLUMN_URL)) {\n\t\t\t\t\tt.set(TriggerData.COLUMN_URL, triggerReader.getText());\n\t\t\t\t} else if (propName.equals(\"hosts\")) {\n\t\t\t\t\tObject[] hostsCache = importHosts(triggerReader.getJsonArrayOrObjectReader(), null);\n\t\t\t\t\tt.set(TriggerData.COLUMN_HOSTS, hostsCache[0]);\n\t\t\t\t\tt.set(TriggerData.COLUMN_HOSTID, hostsCache[1]);\n\t\t\t\t} else if (propName.equals(\"groups\")) {\n\t\t\t\t\timportHostGroups(triggerReader.getJsonArrayOrObjectReader());\n\t\t\t\t} else if (propName.equals(\"items\")) {\n\t\t\t\t\t// store the first item id\n\t\t\t\t\tt.set(TriggerData.COLUMN_ITEMID, importItems(triggerReader.getJsonArrayOrObjectReader(), 1, true));\n\t\t\t\t} else {\n\t\t\t\t\ttriggerReader.nextProperty();\n\t\t\t\t}\n\t\t\t}\n\t\t\tt.insert(zabbixLocalDB, TriggerData.COLUMN_TRIGGERID);\n\t\t\t_commitTransactionIfRecommended();\n\t\t}\n\t}\n\n\tpublic void importTriggersByItemId(String itemid) throws JSONException, IOException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\tif (!isCached(TriggerData.TABLE_NAME, \"itemid=\"+itemid)) {\n\t\t\t_startTransaction();\n\t\t\tzabbixLocalDB.delete(TriggerData.TABLE_NAME, TriggerData.COLUMN_ITEMID+\"=\"+itemid, null);\n\t\t\tJsonArrayOrObjectReader triggers = _queryStream(\n\t\t\t\t\t\"trigger.get\"\n\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t\t.put(\"output\", \"extend\")\n\t\t\t\t\t\t.put(isVersion2?\"selectHosts\":\"select_hosts\", \"extend\")\n\t\t\t\t\t\t.put(isVersion2?\"selectGroups\":\"select_groups\", \"extend\")\n\t\t\t\t\t\t.put(isVersion2?\"selectItems\":\"select_items\", \"extend\")\n\t\t\t\t\t\t.put(\"itemids\", new JSONArray().put(itemid))\n\t\t\t\t\t\t.put(\"limit\", 1)\n\t\t\t\t\t\t.put(\"sortfield\", \"lastchange\")\n\t\t\t\t\t\t.put(\"sortorder\", \"DESC\")\n\t\t\t);\n\t\t\timportTriggers(triggers);\n\t\t\tsetCached(TriggerData.TABLE_NAME, \"itemid=\"+itemid, ZabbixConfig.CACHE_LIFETIME_TRIGGERS);\n\t\t\t_endTransaction();\n\t\t}\n\t}\n\n\tpublic boolean isCached(String kind, String filter) {\n\t\tSQLiteQueryBuilder sqlBuilder = new SQLiteQueryBuilder();\n\t\tsqlBuilder.setTables(CacheData.TABLE_NAME);\n\t\tsqlBuilder.appendWhere(CacheData.COLUMN_KIND+\"='\"+kind+\"' AND \");\n\t\tsqlBuilder.appendWhere(CacheData.COLUMN_FILTER+\n\t\t\t\t(filter==null?\" IS NULL\":\"='\"+filter+\"'\")\n\t\t);\n\t\tsqlBuilder.appendWhere(\" AND \"+CacheData.COLUMN_EXPIRE_DATE+\">\"+new Date().getTime()/1000);\n\t\tCursor cur = sqlBuilder.query(\n\t\t\tzabbixLocalDB,\n\t\t\tnull,\n\t\t\tnull,\n\t\t\tnull,\n\t\t\tnull,\n\t\t\tnull,\n\t\t\tnull\n\t\t);\n\t\tLog.i(\"ZabbixContentProvider\", \"isCached \"+kind+\"//\"+filter+\"//\"+cur.moveToFirst());\n\t\treturn cur.moveToFirst();\n\t}\n\n\t/**\n\t * public, for the unit test\n\t */\n\tpublic void setCached(String kind, String filter, int lifetime) {\n\t\tCacheData cache = new CacheData();\n\t\tcache.set(CacheData.COLUMN_EXPIRE_DATE, new Date().getTime()/1000 + lifetime);\n\t\tcache.set(CacheData.COLUMN_KIND, kind);\n\t\tif (filter != null) {\n\t\t\tcache.set(CacheData.COLUMN_FILTER, filter);\n\t\t}\n\t\tcache.insert(zabbixLocalDB);\n\t}\n\n\t/**\n\t * updates the progressbar in the gui\n\t * @param i 0..100\n\t */\n\tpublic void showProgress(int i) {\n\t\t// if applicable, transform the progress\n\t\tif (transformProgressStart != 0 && transformProgressEnd != 0) {\n\t\t\ti = (int) (transformProgressStart + (transformProgressEnd-transformProgressStart)*(double)i/100);\n\t\t}\n\n\t\tIntent intent = new Intent(ZabbixContentProvider.CONTENT_PROVIDER_INTENT_ACTION);\n\t\tintent.putExtra(\"flag\", ZabbixContentProvider.INTENT_FLAG_SHOW_PROGRESS);\n\t\tintent.putExtra(\"value\", i);\n\t\tcontext.sendBroadcast(intent);\n\t}\n\n\t/**\n\t * transforms the progress\n\t * @param start 0% => start%\n\t * @param end 100% => end%\n\t */\n\tpublic void transformProgress(int start, int end) {\n\t\ttransformProgressStart = start;\n\t\ttransformProgressEnd = end;\n\t}\n}\n"],
    "c_hash_sni": "5d91d0066c3f1f3f2fe253a9c316513d370faa5f",
    "name_sni": "src/com/inovex/zabbixmobile/api/ZabbixService.java",
    "c_parents_ss": ["3820d9533b270822d05ab19af8a9c14f585e1749"],
    "c_imports_removed_t": ["<empty>"],
    "p_hash_sni": "3820d9533b270822d05ab19af8a9c14f585e1749",
    "c_imports_added_t": ["<empty>"],
    "p_methods_t": ["ApplicationData ApplicationItemRelationData ArrayList, String BasicHttpParams BufferedReader CacheData ContentValues CustomSSLSocketFactory Date DefaultHttpClient EventData GraphData GraphItemData HashSet, Long HistoryDetailData HostData HostGroupData HttpAuthorizationRequiredException HttpPost IOException IllegalStateException InputStreamReader Intent ItemData JSONArray JSONObject JsonArrayOrObjectReader JsonFactory NoAPIAccessException PreconditionFailedException RuntimeException SQLiteQueryBuilder Scheme SchemeRegistry ScreenData ScreenItemData StringBuilder StringEntity ThreadSafeClientConnManager TriggerData UsernamePasswordCredentials X509TrustManager _commitTransactionIfRecommended _endTransaction _queryBuffer _queryStream _startTransaction add addHeader append appendWhere authenticate beginTransaction close contains createJsonParser createSocket d delete endTransaction endsWith equals execute get getBoolean getColumnIndex getContent getCredentialsProvider getCurrentName getCurrentToken getDefaultSharedPreferences getDefaultType getEntity getInstance getInt getJSONArray getJSONObject getJsonArrayOrObjectReader getLong getMessage getParams getReasonPhrase getResources getSocketFactory getStatusCode getStatusLine getString getText getTime i importApplications importEvents importGraphItems importHostGroups importHosts importItems importScreenItems importTriggers inTransaction indexOf init insert isCached isClosed length load matches min moveToFirst moveToNext next nextProperty nextToken nextValue nextValueToken parseColor parseDouble parseInt parseLong printStackTrace put putExtra query read register replace replaceAll sendBroadcast set setCached setConnectionTimeout setContentCharset setCredentials setEntity setHostnameVerifier setRedirecting setTables setTransactionSuccessful setVersion showProgress split startsWith substring toString trim update"],
    "c_imports_removed_cs": "<empty>",
    "p_imports_t": ["android.database.sqlite.SQLiteQueryBuilder org.apache.http.conn.scheme.SchemeRegistry java.util.HashSet org.apache.http.params.BasicHttpParams android.content.Context org.apache.http.params.HttpParams org.apache.http.conn.scheme.PlainSocketFactory java.util.ArrayList com.inovex.zabbixmobile.model.ItemData com.inovex.zabbixmobile.model.HostData com.inovex.zabbixmobile.model.GraphData com.inovex.zabbixmobile.model.EventData org.apache.http.auth.UsernamePasswordCredentials org.apache.http.params.HttpConnectionParams android.content.SharedPreferences java.security.KeyManagementException org.apache.http.conn.ClientConnectionManager org.codehaus.jackson.JsonFactory org.apache.http.entity.StringEntity java.util.Set org.apache.http.params.HttpProtocolParams com.inovex.zabbixmobile.model.ApplicationItemRelationData com.inovex.zabbixmobile.model.TriggerData org.codehaus.jackson.JsonToken android.database.Cursor java.net.Socket android.content.Intent org.apache.http.protocol.HTTP org.json.JSONException java.net.UnknownHostException com.inovex.zabbixmobile.model.HistoryDetailData org.apache.http.HttpResponse java.security.KeyStore com.inovex.zabbixmobile.ZabbixContentProvider android.preference.PreferenceManager android.util.Log org.json.JSONObject java.security.NoSuchAlgorithmException org.apache.http.client.params.HttpClientParams java.io.IOException org.apache.http.conn.scheme.Scheme org.apache.http.client.methods.HttpPost javax.net.ssl.SSLContext org.apache.http.auth.AuthScope org.apache.http.conn.ssl.SSLSocketFactory java.security.KeyStoreException android.content.ContentValues java.io.InputStreamReader java.util.Date java.security.UnrecoverableKeyException android.graphics.Color org.apache.http.client.ClientProtocolException com.inovex.zabbixmobile.model.GraphItemData org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager org.json.JSONArray com.inovex.zabbixmobile.model.CacheData javax.net.ssl.SSLPeerUnverifiedException com.inovex.zabbixmobile.model.HostGroupData org.codehaus.jackson.JsonParseException java.security.cert.X509Certificate org.apache.http.HttpVersion android.database.sqlite.SQLiteDatabase java.util.List java.security.cert.CertificateException java.io.BufferedReader com.inovex.zabbixmobile.model.ApplicationData com.inovex.zabbixmobile.model.ScreenItemData javax.net.ssl.TrustManager com.inovex.zabbixmobile.model.ScreenData com.inovex.zabbixmobile.R org.codehaus.jackson.JsonParser org.apache.http.impl.client.DefaultHttpClient javax.net.ssl.X509TrustManager"],
    "p_subject_t": ["- DetailsItemFragmentSupport: removed debug output - JsonObjectReader: changed method getJsonArrayOrObjectReader() to handle objects or arrays (necessary because graph items are encapsulated in objects in API version 1.4+) - added eclipse preferences for building with Java 1.6"],
    "p_callsites_cs": "<unknown>.set(<unknown>, <unknown>)#org.apache.http.HttpEntity.getContent()#java.lang.String.equals(java.lang.String)#org.json.JSONArray.JSONArray()#<unknown>.set(<unknown>, java.lang.Object)#org.json.JSONObject.put(java.lang.String, java.lang.Integer)#org.json.JSONArray.put(java.lang.String)#org.json.JSONObject.JSONObject()#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.codehaus.jackson.JsonFactory.createJsonParser(java.io.InputStream)#java.lang.String.equals(<unknown>)#org.apache.http.StatusLine.getStatusCode()#<unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>)#org.json.JSONObject.put(java.lang.String, java.lang.String)#android.database.sqlite.SQLiteDatabase.inTransaction()#android.util.Log.d(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService._startTransaction()#java.lang.String.equals(java.lang.String)#org.codehaus.jackson.JsonFactory.JsonFactory()#com.inovex.zabbixmobile.api.ZabbixService._endTransaction()#org.json.JSONObject.put(java.lang.String, int)#android.content.ContentValues.ContentValues(int)#org.apache.http.conn.scheme.SchemeRegistry.SchemeRegistry()#<unknown>.insert(android.database.sqlite.SQLiteDatabase)#<unknown>.insert(android.database.sqlite.SQLiteDatabase)#<unknown>.getJsonArrayOrObjectReader()#com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject)#com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject)#com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject)#org.json.JSONObject.getJSONObject(java.lang.String)#java.io.InputStreamReader.InputStreamReader(java.io.InputStream)#android.content.Intent.putExtra(java.lang.String, <unknown>)#org.json.JSONArray.length()#java.lang.String.equals(java.lang.String)#<unknown>.set(<unknown>, <unknown>)#java.lang.String.equals(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService.PreconditionFailedException.PreconditionFailedException()#java.lang.StringBuilder.StringBuilder()#android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null)#<unknown>.nextValueToken()#org.json.JSONObject.JSONObject()#org.json.JSONObject.put(java.lang.String, int)#org.json.JSONObject.put(java.lang.String, org.json.JSONArray)#java.lang.String.equals(<unknown>)#<unknown>.get(<unknown>)#<unknown>.insert(android.database.sqlite.SQLiteDatabase)#android.content.Intent.putExtra(java.lang.String, <unknown>)#java.lang.String.equals(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, java.lang.String, int)#android.util.Log.d(java.lang.String, java.lang.String)#org.json.JSONObject.put(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject)#org.apache.http.conn.scheme.Scheme.Scheme(java.lang.String, org.apache.http.conn.ssl.SSLSocketFactory, int)#org.apache.http.HttpEntity.getContent()#org.codehaus.jackson.JsonParser.close()#java.lang.String.equals(<unknown>)#<unknown>.nextValueToken()#<unknown>.getCurrentName()#org.json.JSONArray.JSONArray(java.util.Set<java.lang.Long>)#<unknown>.nextValueToken()#android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null)#com.inovex.zabbixmobile.api.ZabbixService._startTransaction()#org.json.JSONArray.JSONArray()#<unknown>.nextProperty()#java.lang.String.equals(java.lang.String)#android.database.sqlite.SQLiteDatabase.update(<unknown>, android.content.ContentValues, <unknown>, null)#java.util.Set<java.lang.Long>.add(<unknown>)#<unknown>.get(<unknown>)#<unknown>.get(<unknown>)#android.content.ContentValues.put(<unknown>, java.lang.Long)#java.lang.String.equals(java.lang.String)#org.apache.http.StatusLine.getReasonPhrase()#java.lang.RuntimeException.RuntimeException(java.lang.String)#<unknown>.nextProperty()#java.lang.Throwable.printStackTrace()#java.lang.String.equals(<unknown>)#java.lang.Long.parseLong(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService.importItems(<unknown>, int, boolean)#org.json.JSONObject.put(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject)#<unknown>.getCurrentName()#android.content.ContentValues.put(<unknown>, java.lang.Long)#org.apache.http.entity.StringEntity.StringEntity(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject)#java.lang.String.equals(<unknown>)#<unknown>.EventData()#<unknown>.next()#<unknown>.set(<unknown>, <unknown>)#com.inovex.zabbixmobile.api.ZabbixService.CustomSSLSocketFactory.CustomSSLSocketFactory(java.security.KeyStore)#com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject)#<unknown>.getCurrentName()#java.util.List<java.lang.String>.add(java.lang.String)#org.json.JSONObject.put(java.lang.String, int)#<unknown>.getText()#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.apache.http.conn.ssl.SSLSocketFactory.setHostnameVerifier(org.apache.http.conn.ssl.X509HostnameVerifier)#<unknown>.set(<unknown>, <unknown>)#<unknown>.getText()#org.json.JSONObject.put(java.lang.String, long)#java.util.Date.Date()#org.json.JSONObject.put(java.lang.String, int)#org.json.JSONObject.put(java.lang.String, int)#<unknown>.set(<unknown>, <unknown>)#com.inovex.zabbixmobile.api.ZabbixService.authenticate()#android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null)#android.util.Log.d(java.lang.String, java.lang.String)#java.lang.String.equals(java.lang.String)#org.apache.http.HttpResponse.getEntity()#org.json.JSONObject.JSONObject()#com.inovex.zabbixmobile.api.ZabbixService.importItems(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader, int, boolean)#<unknown>.getJsonArrayOrObjectReader()#com.inovex.zabbixmobile.api.ZabbixService._startTransaction()#com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, null, int)#java.io.BufferedReader.read()#org.json.JSONObject.put(java.lang.String, long)#<unknown>.set(<unknown>, <unknown>)#android.database.Cursor.getLong(<unknown>)#java.lang.IllegalStateException.IllegalStateException(java.lang.String)#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.getCurrentName()#android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null)#android.util.Log.d(java.lang.String, java.lang.String)#<unknown>.set(<unknown>, <unknown>)#java.lang.String.equals(<unknown>)#org.json.JSONObject.put(java.lang.String, java.lang.String)#android.database.Cursor.moveToFirst()#com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, java.lang.String)#android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null)#java.lang.String.equals(java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, java.lang.String)#<unknown>.getText()#org.json.JSONObject.put(java.lang.String, java.lang.String)#android.content.Intent.putExtra(java.lang.String, <unknown>)#<unknown>.getCurrentName()#android.content.res.Resources.getString(<unknown>)#android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null)#android.database.sqlite.SQLiteDatabase.setTransactionSuccessful()#<unknown>.next()#<unknown>.getText()#<unknown>.nextValueToken()#com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject)#com.inovex.zabbixmobile.api.ZabbixService.showProgress(<unknown>)#java.io.IOException.IOException(java.lang.String)#<unknown>.getCurrentName()#android.util.Log.d(java.lang.String, java.lang.String)#java.lang.Object.toString()#org.json.JSONObject.toString()#<unknown>.set(<unknown>, <unknown>)#org.json.JSONArray.JSONArray()#org.apache.http.HttpResponse.getStatusLine()#org.json.JSONArray.JSONArray()#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.apache.http.impl.client.DefaultHttpClient.DefaultHttpClient()#org.json.JSONObject.put(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject)#org.apache.http.HttpResponse.getStatusLine()#java.lang.String.equals(<unknown>)#java.util.Date.Date()#android.util.Log.i(java.lang.String, java.lang.String)#android.content.Context.getResources()#org.apache.http.impl.client.CloseableHttpClient.execute(org.apache.http.client.methods.HttpPost)#com.inovex.zabbixmobile.api.ZabbixService._commitTransactionIfRecommended()#android.content.Context.sendBroadcast(android.content.Intent)#android.content.Context.sendBroadcast(android.content.Intent)#com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, null, int)#java.lang.Integer.parseInt(<unknown>)#<unknown>.ApplicationData()#com.inovex.zabbixmobile.api.ZabbixService.NoAPIAccessException.NoAPIAccessException()#com.inovex.zabbixmobile.api.ZabbixService._commitTransactionIfRecommended()#org.apache.http.message.AbstractHttpMessage.addHeader(java.lang.String, java.lang.String)#org.json.JSONObject.put(java.lang.String, int)#java.lang.String.replace(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService.importHostGroups(<unknown>)#org.json.JSONArray.JSONArray()#<unknown>.set(<unknown>, <unknown>)#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.set(<unknown>, <unknown>)#org.json.JSONArray.JSONArray()#java.lang.String.equals(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, java.lang.String, int)#<unknown>.nextProperty()#<unknown>.set(<unknown>, java.lang.String)#org.json.JSONObject.JSONObject()#java.lang.String.contains(java.lang.String)#org.apache.http.client.methods.HttpEntityEnclosingRequestBase.setEntity(org.apache.http.entity.StringEntity)#com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject)#com.inovex.zabbixmobile.api.ZabbixService.importTriggers(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader)#org.json.JSONObject.put(java.lang.String, int)#<unknown>.HostGroupData()#<unknown>.JsonArrayOrObjectReader(org.codehaus.jackson.JsonParser)#<unknown>.HostGroupData()#<unknown>.nextProperty()#java.lang.Long.parseLong(<unknown>)#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.json.JSONObject.put(java.lang.String, org.json.JSONArray)#org.json.JSONObject.put(java.lang.String, java.lang.Integer)#<unknown>.set(<unknown>, <unknown>)#<unknown>.close()#org.json.JSONObject.put(java.lang.String, org.json.JSONArray)#<unknown>.set(<unknown>, <unknown>)#java.lang.String.equals(java.lang.String)#android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null)#<unknown>.next()#org.json.JSONObject.toString()#java.lang.String.equals(<unknown>)#java.lang.String.equals(<unknown>)#android.database.sqlite.SQLiteDatabase.query(<unknown>, null, <unknown>, null, null, null, null)#<unknown>.set(<unknown>, <unknown>)#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.CacheData()#<unknown>.getText()#com.inovex.zabbixmobile.api.ZabbixService._startTransaction()#<unknown>.set(<unknown>, <unknown>)#com.inovex.zabbixmobile.api.ZabbixService._endTransaction()#<unknown>.set(<unknown>, int)#java.lang.String.equals(<unknown>)#java.util.Date.getTime()#java.lang.String.equals(java.lang.String)#org.json.JSONObject.put(java.lang.String, int)#<unknown>.set(<unknown>, <unknown>)#java.lang.Integer.parseInt(<unknown>)#org.codehaus.jackson.JsonParser.getCurrentName()#<unknown>.nextProperty()#com.inovex.zabbixmobile.api.ZabbixService._endTransaction()#java.lang.String.equals(<unknown>)#org.json.JSONObject.put(java.lang.String, int)#android.database.sqlite.SQLiteDatabase.update(<unknown>, android.content.ContentValues, <unknown>, null)#com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject)#com.inovex.zabbixmobile.api.ZabbixService._endTransaction()#java.lang.StringBuilder.append(char)#<unknown>.set(<unknown>, <unknown>)#<unknown>.get(<unknown>)#<unknown>.set(<unknown>, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject)#org.json.JSONObject.put(java.lang.String, java.lang.String)#android.database.Cursor.getLong(<unknown>)#java.lang.String.equals(<unknown>)#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.json.JSONObject.JSONObject()#org.apache.http.params.HttpProtocolParams.setVersion(org.apache.http.params.HttpParams, org.apache.http.HttpVersion)#com.inovex.zabbixmobile.api.ZabbixService.importApplications(int, int, <unknown>)#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.HistoryDetailData()#android.util.Log.d(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService._startTransaction()#<unknown>.next()#<unknown>.set(<unknown>, <unknown>)#<unknown>.nextValueToken()#org.json.JSONObject.JSONObject()#java.lang.String.equals(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService.importScreenItems(<unknown>)#java.lang.Long.parseLong(<unknown>)#java.lang.Integer.parseInt(<unknown>)#org.apache.http.client.methods.HttpPost.HttpPost(java.lang.String)#org.apache.http.StatusLine.getStatusCode()#<unknown>.set(<unknown>, int)#java.lang.String.equals(java.lang.String)#java.lang.String.equals(<unknown>)#java.lang.String.equals(<unknown>)#<unknown>.getCurrentName()#java.util.ArrayList<java.lang.String>.ArrayList, String()#com.inovex.zabbixmobile.api.ZabbixService._startTransaction()#com.inovex.zabbixmobile.api.ZabbixService.importTriggers(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader)#org.json.JSONArray.put(java.lang.String)#<unknown>.nextValueToken()#org.json.JSONArray.put(java.lang.String)#<unknown>.set(<unknown>, <unknown>)#org.json.JSONObject.put(java.lang.String, int)#org.json.JSONObject.JSONObject()#<unknown>.ScreenItemData()#<unknown>.set(<unknown>, <unknown>)#<unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>)#android.preference.PreferenceManager.getDefaultSharedPreferences(android.content.Context)#org.json.JSONObject.length()#<unknown>.nextValueToken()#java.util.HashSet<java.lang.Long>.HashSet, Long()#java.lang.String.equals(java.lang.String)#android.content.SharedPreferences.getBoolean(java.lang.String, boolean)#<unknown>.insert(android.database.sqlite.SQLiteDatabase)#org.json.JSONObject.put(java.lang.String, org.json.JSONArray)#<unknown>.close()#com.inovex.zabbixmobile.api.ZabbixService.importHosts(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader, int)#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.next()#android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null)#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.json.JSONObject.getString(java.lang.String)#<unknown>.set(<unknown>, <unknown>)#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.close()#org.json.JSONObject.getString(java.lang.String)#java.lang.String.equals(java.lang.String)#java.lang.Long.parseLong(<unknown>)#org.codehaus.jackson.JsonParser.isClosed()#org.json.JSONObject.put(java.lang.String, int)#org.json.JSONObject.put(java.lang.String, org.json.JSONArray)#java.lang.String.startsWith(java.lang.String)#org.json.JSONObject.put(java.lang.String, long)#<unknown>.close()#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.set(<unknown>, long)#org.json.JSONObject.put(java.lang.String, org.json.JSONObject)#<unknown>.set(<unknown>, <unknown>)#com.inovex.zabbixmobile.api.ZabbixService._endTransaction()#java.lang.String.replaceAll(java.lang.String, java.lang.String)#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.nextValueToken()#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.apache.http.params.BasicHttpParams.BasicHttpParams()#com.inovex.zabbixmobile.api.ZabbixService.importGraphItems(<unknown>)#android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null)#android.database.sqlite.SQLiteDatabase.beginTransaction()#com.inovex.zabbixmobile.api.ZabbixService._commitTransactionIfRecommended()#com.inovex.zabbixmobile.api.ZabbixService._endTransaction()#java.lang.String.equals(<unknown>)#<unknown>.insert(android.database.sqlite.SQLiteDatabase)#<unknown>.insert(android.database.sqlite.SQLiteDatabase)#org.json.JSONObject.put(java.lang.String, int)#<unknown>.next()#com.inovex.zabbixmobile.api.ZabbixService._startTransaction()#android.content.SharedPreferences.getString(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, null, int)#javax.net.SocketFactory.createSocket()#java.lang.Long.parseLong(<unknown>)#org.apache.http.client.CredentialsProvider.setCredentials(org.apache.http.auth.AuthScope, org.apache.http.auth.UsernamePasswordCredentials)#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.next()#com.inovex.zabbixmobile.api.ZabbixService.HttpAuthorizationRequiredException.HttpAuthorizationRequiredException()#android.database.sqlite.SQLiteQueryBuilder.query(android.database.sqlite.SQLiteDatabase, null, null, null, null, null, null)#java.util.Date.Date()#com.inovex.zabbixmobile.api.ZabbixService._commitTransactionIfRecommended()#<unknown>.set(<unknown>, java.lang.String)#org.json.JSONObject.JSONObject()#<unknown>.next()#<unknown>.set(<unknown>, <unknown>)#<unknown>.set(<unknown>, <unknown>)#com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject)#java.lang.String.equals(java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, java.lang.String)#java.lang.String.indexOf(char)#android.database.sqlite.SQLiteDatabase.query(<unknown>, null, <unknown>, null, null, null, null)#android.preference.PreferenceManager.getDefaultSharedPreferences(android.content.Context)#<unknown>.nextProperty()#org.apache.http.impl.client.CloseableHttpClient.execute(org.apache.http.client.methods.HttpPost)#<unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>)#com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, java.lang.String)#org.json.JSONObject.JSONObject()#<unknown>.close()#android.database.Cursor.getColumnIndex(<unknown>)#android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null)#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.nextProperty()#org.apache.http.conn.scheme.PlainSocketFactory.getSocketFactory()#com.inovex.zabbixmobile.api.ZabbixService._commitTransactionIfRecommended()#com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject)#java.lang.StringBuilder.toString()#org.json.JSONObject.put(java.lang.String, java.lang.String)#android.database.sqlite.SQLiteQueryBuilder.SQLiteQueryBuilder()#<unknown>.insert(android.database.sqlite.SQLiteDatabase)#org.apache.http.conn.scheme.SchemeRegistry.register(org.apache.http.conn.scheme.Scheme)#<unknown>.set(<unknown>, <unknown>)#org.json.JSONObject.JSONObject(java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService.importHosts(<unknown>, null)#java.lang.String.equals(<unknown>)#<unknown>.set(<unknown>, <unknown>)#<unknown>.set(<unknown>, <unknown>)#java.lang.IllegalStateException.IllegalStateException(java.lang.String)#java.lang.Double.parseDouble(<unknown>)#android.content.ContentValues.put(<unknown>, java.lang.Long)#android.util.Log.i(java.lang.String, java.lang.String)#android.database.sqlite.SQLiteQueryBuilder.appendWhere(<unknown>)#org.apache.http.conn.scheme.SchemeRegistry.register(org.apache.http.conn.scheme.Scheme)#org.json.JSONObject.getInt(java.lang.String)#org.json.JSONObject.put(java.lang.String, boolean)#java.lang.Long.parseLong(<unknown>)#java.lang.String.indexOf(char)#java.lang.String.equals(java.lang.String)#android.database.sqlite.SQLiteQueryBuilder.appendWhere(<unknown>)#java.lang.String.length()#java.lang.String.equals(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject)#<unknown>.nextProperty()#<unknown>.next()#android.content.SharedPreferences.getString(java.lang.String, java.lang.String)#<unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>)#com.inovex.zabbixmobile.api.ZabbixService.importTriggers(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader)#<unknown>.GraphData()#org.json.JSONArray.put(java.lang.String)#org.apache.http.impl.client.AbstractHttpClient.getParams()#<unknown>.set(<unknown>, long)#<unknown>.set(<unknown>, <unknown>)#org.json.JSONObject.getJSONObject(java.lang.String)#org.json.JSONObject.put(java.lang.String, java.lang.String)#java.lang.String.equals(java.lang.String)#org.json.JSONObject.getString(java.lang.String)#java.lang.String.equals(<unknown>)#java.lang.String.equals(<unknown>)#<unknown>.getCurrentName()#java.lang.String.equals(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService.showProgress(int)#<unknown>.getCurrentName()#com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, java.lang.String, int)#org.json.JSONObject.put(java.lang.String, int)#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.close()#java.lang.String.replace(java.lang.String, java.lang.String)#java.lang.String.equals(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject)#com.inovex.zabbixmobile.api.ZabbixService._endTransaction()#android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null)#android.database.Cursor.moveToNext()#<unknown>.HostData()#<unknown>.set(<unknown>, long)#<unknown>.next()#com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject)#android.database.sqlite.SQLiteQueryBuilder.setTables(<unknown>)#java.util.Date.getTime()#org.json.JSONObject.put(java.lang.String, long)#android.content.ContentValues.ContentValues(int)#java.lang.Long.parseLong(<unknown>)#org.apache.http.HttpResponse.getEntity()#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.getText()#java.lang.String.equals(java.lang.String)#<unknown>.set(<unknown>, <unknown>)#<unknown>.set(<unknown>, <unknown>)#<unknown>.set(<unknown>, <unknown>)#javax.net.ssl.SSLContext.init(null, javax.net.ssl.TrustManager[], null)#android.database.sqlite.SQLiteDatabase.endTransaction()#java.lang.String.equals(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, java.lang.String)#android.util.Log.d(java.lang.String, java.lang.String)#<unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>)#<unknown>.next()#<unknown>.close()#<unknown>.insert(android.database.sqlite.SQLiteDatabase)#org.json.JSONObject.put(java.lang.String, java.lang.String)#java.lang.Throwable.getMessage()#java.lang.String.equals(<unknown>)#java.lang.String.equals(<unknown>)#<unknown>.set(<unknown>, <unknown>)#com.inovex.zabbixmobile.api.ZabbixService._endTransaction()#javax.net.ssl.SSLContext.getSocketFactory()#org.json.JSONObject.JSONObject()#android.content.Context.getResources()#org.json.JSONObject.put(java.lang.String, int)#com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, null)#com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, java.lang.String, int)#java.lang.String.matches(java.lang.String)#org.json.JSONArray.put(java.lang.String)#<unknown>.set(<unknown>, <unknown>)#android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null)#android.content.Context.sendBroadcast(android.content.Intent)#org.json.JSONObject.getJSONObject(java.lang.String)#<unknown>.get(<unknown>)#android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null)#java.lang.String.equals(<unknown>)#android.content.SharedPreferences.getBoolean(java.lang.String, boolean)#java.lang.Throwable.printStackTrace()#android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null)#org.json.JSONObject.put(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService._startTransaction()#android.content.Intent.putExtra(java.lang.String, int)#org.json.JSONObject.JSONObject()#<unknown>.getText()#com.inovex.zabbixmobile.api.ZabbixService._endTransaction()#org.apache.http.client.methods.HttpPost.HttpPost(java.lang.String)#android.content.SharedPreferences.getString(java.lang.String, java.lang.String)#<unknown>.GraphItemData()#com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, java.lang.String, int)#<unknown>.nextValueToken()#org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager.ThreadSafeClientConnManager(org.apache.http.params.HttpParams, org.apache.http.conn.scheme.SchemeRegistry)#<unknown>.ApplicationItemRelationData()#java.lang.Object.toString()#android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null)#org.json.JSONArray.JSONArray()#java.lang.String.equals(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService._startTransaction()#org.json.JSONObject.put(java.lang.String, org.json.JSONArray)#<unknown>.set(<unknown>, int)#org.json.JSONObject.put(java.lang.String, int)#com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, java.lang.String, int)#org.json.JSONObject.put(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService.importItems(<unknown>, int, boolean)#org.json.JSONObject.JSONObject()#java.lang.Math.min(int, int)#com.inovex.zabbixmobile.api.ZabbixService.showProgress(<unknown>)#java.lang.String.equals(java.lang.String)#android.content.Intent.Intent(<unknown>)#java.lang.String.equals(<unknown>)#org.json.JSONObject.put(java.lang.String, int)#javax.net.ssl.SSLContext.getInstance(java.lang.String)#android.content.res.Resources.getString(<unknown>)#org.json.JSONObject.JSONObject()#android.content.Intent.Intent(<unknown>)#java.lang.String.equals(<unknown>)#<unknown>.nextProperty()#javax.net.ssl.SSLSocketFactory.createSocket(java.net.Socket, java.lang.String, int, boolean)#org.json.JSONObject.put(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject)#<unknown>.get(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService.importHosts(<unknown>, null)#java.io.IOException.IOException(java.lang.String)#java.lang.String.trim()#java.lang.String.contains(java.lang.String)#org.apache.http.entity.StringEntity.StringEntity(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService._endTransaction()#com.inovex.zabbixmobile.api.ZabbixService.importTriggers(<unknown>)#.X509TrustManager()#com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject)#android.graphics.Color.parseColor(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, null)#org.json.JSONObject.getJSONArray(java.lang.String)#org.apache.http.client.params.HttpClientParams.setRedirecting(org.apache.http.params.HttpParams, boolean)#com.inovex.zabbixmobile.api.ZabbixService._startTransaction()#<unknown>.getCurrentName()#<unknown>.getJsonArrayOrObjectReader()#java.lang.String.equals(<unknown>)#java.lang.Long.parseLong(<unknown>)#android.util.Log.d(java.lang.String, java.lang.String)#org.codehaus.jackson.JsonParser.getCurrentToken()#org.codehaus.jackson.JsonParser.nextValue()#java.lang.Long.parseLong(<unknown>)#<unknown>.getText()#java.util.Date.getTime()#android.content.Intent.putExtra(java.lang.String, <unknown>)#android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null)#<unknown>.get(<unknown>)#android.database.Cursor.moveToFirst()#org.apache.http.client.methods.HttpEntityEnclosingRequestBase.setEntity(org.apache.http.entity.StringEntity)#com.inovex.zabbixmobile.api.ZabbixService._commitTransactionIfRecommended()#com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, null)#android.database.sqlite.SQLiteQueryBuilder.appendWhere(<unknown>)#org.apache.http.auth.UsernamePasswordCredentials.UsernamePasswordCredentials(java.lang.String, java.lang.String)#java.util.Date.getTime()#java.lang.String.equals(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService._endTransaction()#org.json.JSONObject.put(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService.authenticate()#java.lang.String.equals(<unknown>)#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.json.JSONObject.put(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService.NoAPIAccessException.NoAPIAccessException()#org.json.JSONArray.put(long)#com.inovex.zabbixmobile.api.ZabbixService._endTransaction()#<unknown>.getJsonArrayOrObjectReader()#android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null)#<unknown>.ScreenData()#java.util.Date.Date()#java.util.Date.Date()#<unknown>.set(<unknown>, long)#<unknown>.getCurrentName()#org.json.JSONObject.put(java.lang.String, org.json.JSONArray)#<unknown>.set(<unknown>, long)#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.apache.http.params.HttpConnectionParams.setConnectionTimeout(org.apache.http.params.HttpParams, int)#org.json.JSONArray.length()#<unknown>.set(<unknown>, java.lang.String)#<unknown>.set(<unknown>, long)#java.util.Date.getTime()#<unknown>.set(<unknown>, <unknown>)#<unknown>.set(<unknown>, <unknown>)#org.json.JSONArray.put(java.lang.String)#java.lang.String.equals(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService.HttpAuthorizationRequiredException.HttpAuthorizationRequiredException()#<unknown>.getText()#org.json.JSONObject.put(java.lang.String, org.json.JSONArray)#com.inovex.zabbixmobile.api.ZabbixService.importEvents(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader, null)#org.json.JSONObject.JSONObject()#com.inovex.zabbixmobile.api.ZabbixService.importHostGroups(<unknown>)#<unknown>.set(<unknown>, <unknown>)#org.json.JSONObject.toString()#java.lang.Integer.parseInt(<unknown>)#android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null)#org.apache.http.params.HttpProtocolParams.setContentCharset(org.apache.http.params.HttpParams, java.lang.String)#<unknown>.get(<unknown>)#java.lang.String.equals(<unknown>)#<unknown>.set(<unknown>, <unknown>)#<unknown>.nextValueToken()#<unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>)#org.json.JSONObject.put(java.lang.String, org.json.JSONArray)#org.json.JSONObject.put(java.lang.String, java.lang.Integer)#<unknown>.getText()#<unknown>.set(<unknown>, <unknown>)#org.apache.http.message.AbstractHttpMessage.addHeader(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject)#org.json.JSONObject.getJSONArray(java.lang.String)#java.security.KeyStore.load(null, null)#java.lang.String.replace(java.lang.String, java.lang.String)#java.lang.Long.parseLong(<unknown>)#org.json.JSONObject.toString()#com.inovex.zabbixmobile.api.ZabbixService.importTriggers(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader)#android.util.Log.d(java.lang.String, java.lang.String)#android.content.SharedPreferences.getString(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, java.lang.String)#<unknown>.getJsonArrayOrObjectReader()#<unknown>.TriggerData()#android.content.SharedPreferences.getString(java.lang.String, java.lang.String)#android.content.Intent.Intent(<unknown>)#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.apache.http.impl.client.AbstractHttpClient.getCredentialsProvider()#<unknown>.set(<unknown>, <unknown>)#java.io.IOException.IOException(java.lang.String)#java.lang.String.trim()#org.json.JSONObject.put(java.lang.String, org.json.JSONArray)#java.lang.String.split(java.lang.String)#java.lang.String.equals(java.lang.String)#java.lang.String.endsWith(java.lang.String)#<unknown>.set(<unknown>, int)#com.inovex.zabbixmobile.api.ZabbixService.showProgress(int)#<unknown>.ItemData()#org.json.JSONObject.put(java.lang.String, int)#<unknown>.set(<unknown>, <unknown>)#org.codehaus.jackson.JsonParser.getText()#android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null)#org.apache.http.impl.client.DefaultHttpClient.DefaultHttpClient(org.apache.http.conn.ClientConnectionManager, org.apache.http.params.HttpParams)#<unknown>.close()#java.lang.IllegalStateException.IllegalStateException(java.lang.String)#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.codehaus.jackson.JsonParser.nextToken()#android.database.Cursor.getColumnIndex(<unknown>)#org.json.JSONObject.put(java.lang.String, org.json.JSONArray)#<unknown>.nextValueToken()#com.inovex.zabbixmobile.api.ZabbixService._startTransaction()#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.set(<unknown>, java.lang.String)#java.lang.String.substring(int, int)#java.lang.Long.parseLong(<unknown>)#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.json.JSONObject.getInt(java.lang.String)#<unknown>.getJsonArrayOrObjectReader()#java.lang.String.equals(java.lang.String)#<unknown>.set(<unknown>, <unknown>)#<unknown>.set(<unknown>, <unknown>)#java.security.KeyStore.getInstance(java.lang.String)#java.lang.Integer.parseInt(<unknown>)#java.lang.String.equals(java.lang.String)#<unknown>.nextProperty()#android.content.Intent.putExtra(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, null)#<unknown>.set(<unknown>, int)#java.io.BufferedReader.BufferedReader(java.io.InputStreamReader)#com.inovex.zabbixmobile.api.ZabbixService.importEvents(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader, int)#java.security.KeyStore.getDefaultType()#java.lang.String.equals(<unknown>)#<unknown>.getText()#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.set(<unknown>, java.lang.Object)#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.insert(android.database.sqlite.SQLiteDatabase)#<unknown>.nextProperty()#com.inovex.zabbixmobile.api.ZabbixService._startTransaction()#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.close()#<unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>)#org.json.JSONObject.put(java.lang.String, long)#com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, null, int)#<unknown>.set(<unknown>, <unknown>)#java.lang.String.equals(<unknown>)#org.apache.http.conn.scheme.Scheme.Scheme(java.lang.String, org.apache.http.conn.scheme.PlainSocketFactory, int)#org.json.JSONObject.put(java.lang.String, java.lang.String)#java.lang.String.equals(<unknown>)",
    "p_callsites_t": ["<unknown>.set(<unknown>, <unknown>) org.apache.http.HttpEntity.getContent() java.lang.String.equals(java.lang.String) org.json.JSONArray.JSONArray() <unknown>.set(<unknown>, java.lang.Object) org.json.JSONObject.put(java.lang.String, java.lang.Integer) org.json.JSONArray.put(java.lang.String) org.json.JSONObject.JSONObject() org.json.JSONObject.put(java.lang.String, java.lang.String) org.codehaus.jackson.JsonFactory.createJsonParser(java.io.InputStream) java.lang.String.equals(<unknown>) org.apache.http.StatusLine.getStatusCode() <unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>) org.json.JSONObject.put(java.lang.String, java.lang.String) android.database.sqlite.SQLiteDatabase.inTransaction() android.util.Log.d(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService._startTransaction() java.lang.String.equals(java.lang.String) org.codehaus.jackson.JsonFactory.JsonFactory() com.inovex.zabbixmobile.api.ZabbixService._endTransaction() org.json.JSONObject.put(java.lang.String, int) android.content.ContentValues.ContentValues(int) org.apache.http.conn.scheme.SchemeRegistry.SchemeRegistry() <unknown>.insert(android.database.sqlite.SQLiteDatabase) <unknown>.insert(android.database.sqlite.SQLiteDatabase) <unknown>.getJsonArrayOrObjectReader() com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject) com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject) com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject) org.json.JSONObject.getJSONObject(java.lang.String) java.io.InputStreamReader.InputStreamReader(java.io.InputStream) android.content.Intent.putExtra(java.lang.String, <unknown>) org.json.JSONArray.length() java.lang.String.equals(java.lang.String) <unknown>.set(<unknown>, <unknown>) java.lang.String.equals(<unknown>) com.inovex.zabbixmobile.api.ZabbixService.PreconditionFailedException.PreconditionFailedException() java.lang.StringBuilder.StringBuilder() android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null) <unknown>.nextValueToken() org.json.JSONObject.JSONObject() org.json.JSONObject.put(java.lang.String, int) org.json.JSONObject.put(java.lang.String, org.json.JSONArray) java.lang.String.equals(<unknown>) <unknown>.get(<unknown>) <unknown>.insert(android.database.sqlite.SQLiteDatabase) android.content.Intent.putExtra(java.lang.String, <unknown>) java.lang.String.equals(<unknown>) com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, java.lang.String, int) android.util.Log.d(java.lang.String, java.lang.String) org.json.JSONObject.put(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject) org.apache.http.conn.scheme.Scheme.Scheme(java.lang.String, org.apache.http.conn.ssl.SSLSocketFactory, int) org.apache.http.HttpEntity.getContent() org.codehaus.jackson.JsonParser.close() java.lang.String.equals(<unknown>) <unknown>.nextValueToken() <unknown>.getCurrentName() org.json.JSONArray.JSONArray(java.util.Set<java.lang.Long>) <unknown>.nextValueToken() android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null) com.inovex.zabbixmobile.api.ZabbixService._startTransaction() org.json.JSONArray.JSONArray() <unknown>.nextProperty() java.lang.String.equals(java.lang.String) android.database.sqlite.SQLiteDatabase.update(<unknown>, android.content.ContentValues, <unknown>, null) java.util.Set<java.lang.Long>.add(<unknown>) <unknown>.get(<unknown>) <unknown>.get(<unknown>) android.content.ContentValues.put(<unknown>, java.lang.Long) java.lang.String.equals(java.lang.String) org.apache.http.StatusLine.getReasonPhrase() java.lang.RuntimeException.RuntimeException(java.lang.String) <unknown>.nextProperty() java.lang.Throwable.printStackTrace() java.lang.String.equals(<unknown>) java.lang.Long.parseLong(<unknown>) com.inovex.zabbixmobile.api.ZabbixService.importItems(<unknown>, int, boolean) org.json.JSONObject.put(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject) <unknown>.getCurrentName() android.content.ContentValues.put(<unknown>, java.lang.Long) org.apache.http.entity.StringEntity.StringEntity(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject) java.lang.String.equals(<unknown>) <unknown>.EventData() <unknown>.next() <unknown>.set(<unknown>, <unknown>) com.inovex.zabbixmobile.api.ZabbixService.CustomSSLSocketFactory.CustomSSLSocketFactory(java.security.KeyStore) com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject) <unknown>.getCurrentName() java.util.List<java.lang.String>.add(java.lang.String) org.json.JSONObject.put(java.lang.String, int) <unknown>.getText() org.json.JSONObject.put(java.lang.String, java.lang.String) org.apache.http.conn.ssl.SSLSocketFactory.setHostnameVerifier(org.apache.http.conn.ssl.X509HostnameVerifier) <unknown>.set(<unknown>, <unknown>) <unknown>.getText() org.json.JSONObject.put(java.lang.String, long) java.util.Date.Date() org.json.JSONObject.put(java.lang.String, int) org.json.JSONObject.put(java.lang.String, int) <unknown>.set(<unknown>, <unknown>) com.inovex.zabbixmobile.api.ZabbixService.authenticate() android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null) android.util.Log.d(java.lang.String, java.lang.String) java.lang.String.equals(java.lang.String) org.apache.http.HttpResponse.getEntity() org.json.JSONObject.JSONObject() com.inovex.zabbixmobile.api.ZabbixService.importItems(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader, int, boolean) <unknown>.getJsonArrayOrObjectReader() com.inovex.zabbixmobile.api.ZabbixService._startTransaction() com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, null, int) java.io.BufferedReader.read() org.json.JSONObject.put(java.lang.String, long) <unknown>.set(<unknown>, <unknown>) android.database.Cursor.getLong(<unknown>) java.lang.IllegalStateException.IllegalStateException(java.lang.String) org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.getCurrentName() android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null) android.util.Log.d(java.lang.String, java.lang.String) <unknown>.set(<unknown>, <unknown>) java.lang.String.equals(<unknown>) org.json.JSONObject.put(java.lang.String, java.lang.String) android.database.Cursor.moveToFirst() com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, java.lang.String) android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null) java.lang.String.equals(java.lang.String) com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, java.lang.String) <unknown>.getText() org.json.JSONObject.put(java.lang.String, java.lang.String) android.content.Intent.putExtra(java.lang.String, <unknown>) <unknown>.getCurrentName() android.content.res.Resources.getString(<unknown>) android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null) android.database.sqlite.SQLiteDatabase.setTransactionSuccessful() <unknown>.next() <unknown>.getText() <unknown>.nextValueToken() com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject) com.inovex.zabbixmobile.api.ZabbixService.showProgress(<unknown>) java.io.IOException.IOException(java.lang.String) <unknown>.getCurrentName() android.util.Log.d(java.lang.String, java.lang.String) java.lang.Object.toString() org.json.JSONObject.toString() <unknown>.set(<unknown>, <unknown>) org.json.JSONArray.JSONArray() org.apache.http.HttpResponse.getStatusLine() org.json.JSONArray.JSONArray() org.json.JSONObject.put(java.lang.String, java.lang.String) org.apache.http.impl.client.DefaultHttpClient.DefaultHttpClient() org.json.JSONObject.put(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject) org.apache.http.HttpResponse.getStatusLine() java.lang.String.equals(<unknown>) java.util.Date.Date() android.util.Log.i(java.lang.String, java.lang.String) android.content.Context.getResources() org.apache.http.impl.client.CloseableHttpClient.execute(org.apache.http.client.methods.HttpPost) com.inovex.zabbixmobile.api.ZabbixService._commitTransactionIfRecommended() android.content.Context.sendBroadcast(android.content.Intent) android.content.Context.sendBroadcast(android.content.Intent) com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, null, int) java.lang.Integer.parseInt(<unknown>) <unknown>.ApplicationData() com.inovex.zabbixmobile.api.ZabbixService.NoAPIAccessException.NoAPIAccessException() com.inovex.zabbixmobile.api.ZabbixService._commitTransactionIfRecommended() org.apache.http.message.AbstractHttpMessage.addHeader(java.lang.String, java.lang.String) org.json.JSONObject.put(java.lang.String, int) java.lang.String.replace(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService.importHostGroups(<unknown>) org.json.JSONArray.JSONArray() <unknown>.set(<unknown>, <unknown>) org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.set(<unknown>, <unknown>) org.json.JSONArray.JSONArray() java.lang.String.equals(<unknown>) com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, java.lang.String, int) <unknown>.nextProperty() <unknown>.set(<unknown>, java.lang.String) org.json.JSONObject.JSONObject() java.lang.String.contains(java.lang.String) org.apache.http.client.methods.HttpEntityEnclosingRequestBase.setEntity(org.apache.http.entity.StringEntity) com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject) com.inovex.zabbixmobile.api.ZabbixService.importTriggers(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader) org.json.JSONObject.put(java.lang.String, int) <unknown>.HostGroupData() <unknown>.JsonArrayOrObjectReader(org.codehaus.jackson.JsonParser) <unknown>.HostGroupData() <unknown>.nextProperty() java.lang.Long.parseLong(<unknown>) org.json.JSONObject.put(java.lang.String, java.lang.String) org.json.JSONObject.put(java.lang.String, org.json.JSONArray) org.json.JSONObject.put(java.lang.String, java.lang.Integer) <unknown>.set(<unknown>, <unknown>) <unknown>.close() org.json.JSONObject.put(java.lang.String, org.json.JSONArray) <unknown>.set(<unknown>, <unknown>) java.lang.String.equals(java.lang.String) android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null) <unknown>.next() org.json.JSONObject.toString() java.lang.String.equals(<unknown>) java.lang.String.equals(<unknown>) android.database.sqlite.SQLiteDatabase.query(<unknown>, null, <unknown>, null, null, null, null) <unknown>.set(<unknown>, <unknown>) org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.CacheData() <unknown>.getText() com.inovex.zabbixmobile.api.ZabbixService._startTransaction() <unknown>.set(<unknown>, <unknown>) com.inovex.zabbixmobile.api.ZabbixService._endTransaction() <unknown>.set(<unknown>, int) java.lang.String.equals(<unknown>) java.util.Date.getTime() java.lang.String.equals(java.lang.String) org.json.JSONObject.put(java.lang.String, int) <unknown>.set(<unknown>, <unknown>) java.lang.Integer.parseInt(<unknown>) org.codehaus.jackson.JsonParser.getCurrentName() <unknown>.nextProperty() com.inovex.zabbixmobile.api.ZabbixService._endTransaction() java.lang.String.equals(<unknown>) org.json.JSONObject.put(java.lang.String, int) android.database.sqlite.SQLiteDatabase.update(<unknown>, android.content.ContentValues, <unknown>, null) com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject) com.inovex.zabbixmobile.api.ZabbixService._endTransaction() java.lang.StringBuilder.append(char) <unknown>.set(<unknown>, <unknown>) <unknown>.get(<unknown>) <unknown>.set(<unknown>, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject) org.json.JSONObject.put(java.lang.String, java.lang.String) android.database.Cursor.getLong(<unknown>) java.lang.String.equals(<unknown>) org.json.JSONObject.put(java.lang.String, java.lang.String) org.json.JSONObject.JSONObject() org.apache.http.params.HttpProtocolParams.setVersion(org.apache.http.params.HttpParams, org.apache.http.HttpVersion) com.inovex.zabbixmobile.api.ZabbixService.importApplications(int, int, <unknown>) org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.HistoryDetailData() android.util.Log.d(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService._startTransaction() <unknown>.next() <unknown>.set(<unknown>, <unknown>) <unknown>.nextValueToken() org.json.JSONObject.JSONObject() java.lang.String.equals(<unknown>) com.inovex.zabbixmobile.api.ZabbixService.importScreenItems(<unknown>) java.lang.Long.parseLong(<unknown>) java.lang.Integer.parseInt(<unknown>) org.apache.http.client.methods.HttpPost.HttpPost(java.lang.String) org.apache.http.StatusLine.getStatusCode() <unknown>.set(<unknown>, int) java.lang.String.equals(java.lang.String) java.lang.String.equals(<unknown>) java.lang.String.equals(<unknown>) <unknown>.getCurrentName() java.util.ArrayList<java.lang.String>.ArrayList, String() com.inovex.zabbixmobile.api.ZabbixService._startTransaction() com.inovex.zabbixmobile.api.ZabbixService.importTriggers(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader) org.json.JSONArray.put(java.lang.String) <unknown>.nextValueToken() org.json.JSONArray.put(java.lang.String) <unknown>.set(<unknown>, <unknown>) org.json.JSONObject.put(java.lang.String, int) org.json.JSONObject.JSONObject() <unknown>.ScreenItemData() <unknown>.set(<unknown>, <unknown>) <unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>) android.preference.PreferenceManager.getDefaultSharedPreferences(android.content.Context) org.json.JSONObject.length() <unknown>.nextValueToken() java.util.HashSet<java.lang.Long>.HashSet, Long() java.lang.String.equals(java.lang.String) android.content.SharedPreferences.getBoolean(java.lang.String, boolean) <unknown>.insert(android.database.sqlite.SQLiteDatabase) org.json.JSONObject.put(java.lang.String, org.json.JSONArray) <unknown>.close() com.inovex.zabbixmobile.api.ZabbixService.importHosts(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader, int) org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.next() android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null) org.json.JSONObject.put(java.lang.String, java.lang.String) org.json.JSONObject.getString(java.lang.String) <unknown>.set(<unknown>, <unknown>) org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.close() org.json.JSONObject.getString(java.lang.String) java.lang.String.equals(java.lang.String) java.lang.Long.parseLong(<unknown>) org.codehaus.jackson.JsonParser.isClosed() org.json.JSONObject.put(java.lang.String, int) org.json.JSONObject.put(java.lang.String, org.json.JSONArray) java.lang.String.startsWith(java.lang.String) org.json.JSONObject.put(java.lang.String, long) <unknown>.close() org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.set(<unknown>, long) org.json.JSONObject.put(java.lang.String, org.json.JSONObject) <unknown>.set(<unknown>, <unknown>) com.inovex.zabbixmobile.api.ZabbixService._endTransaction() java.lang.String.replaceAll(java.lang.String, java.lang.String) org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.nextValueToken() org.json.JSONObject.put(java.lang.String, java.lang.String) org.json.JSONObject.put(java.lang.String, java.lang.String) org.apache.http.params.BasicHttpParams.BasicHttpParams() com.inovex.zabbixmobile.api.ZabbixService.importGraphItems(<unknown>) android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null) android.database.sqlite.SQLiteDatabase.beginTransaction() com.inovex.zabbixmobile.api.ZabbixService._commitTransactionIfRecommended() com.inovex.zabbixmobile.api.ZabbixService._endTransaction() java.lang.String.equals(<unknown>) <unknown>.insert(android.database.sqlite.SQLiteDatabase) <unknown>.insert(android.database.sqlite.SQLiteDatabase) org.json.JSONObject.put(java.lang.String, int) <unknown>.next() com.inovex.zabbixmobile.api.ZabbixService._startTransaction() android.content.SharedPreferences.getString(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, null, int) javax.net.SocketFactory.createSocket() java.lang.Long.parseLong(<unknown>) org.apache.http.client.CredentialsProvider.setCredentials(org.apache.http.auth.AuthScope, org.apache.http.auth.UsernamePasswordCredentials) org.json.JSONObject.put(java.lang.String, java.lang.String) org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.next() com.inovex.zabbixmobile.api.ZabbixService.HttpAuthorizationRequiredException.HttpAuthorizationRequiredException() android.database.sqlite.SQLiteQueryBuilder.query(android.database.sqlite.SQLiteDatabase, null, null, null, null, null, null) java.util.Date.Date() com.inovex.zabbixmobile.api.ZabbixService._commitTransactionIfRecommended() <unknown>.set(<unknown>, java.lang.String) org.json.JSONObject.JSONObject() <unknown>.next() <unknown>.set(<unknown>, <unknown>) <unknown>.set(<unknown>, <unknown>) com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject) java.lang.String.equals(java.lang.String) com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, java.lang.String) java.lang.String.indexOf(char) android.database.sqlite.SQLiteDatabase.query(<unknown>, null, <unknown>, null, null, null, null) android.preference.PreferenceManager.getDefaultSharedPreferences(android.content.Context) <unknown>.nextProperty() org.apache.http.impl.client.CloseableHttpClient.execute(org.apache.http.client.methods.HttpPost) <unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>) com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, java.lang.String) org.json.JSONObject.JSONObject() <unknown>.close() android.database.Cursor.getColumnIndex(<unknown>) android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null) org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.nextProperty() org.apache.http.conn.scheme.PlainSocketFactory.getSocketFactory() com.inovex.zabbixmobile.api.ZabbixService._commitTransactionIfRecommended() com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject) java.lang.StringBuilder.toString() org.json.JSONObject.put(java.lang.String, java.lang.String) android.database.sqlite.SQLiteQueryBuilder.SQLiteQueryBuilder() <unknown>.insert(android.database.sqlite.SQLiteDatabase) org.apache.http.conn.scheme.SchemeRegistry.register(org.apache.http.conn.scheme.Scheme) <unknown>.set(<unknown>, <unknown>) org.json.JSONObject.JSONObject(java.lang.String) com.inovex.zabbixmobile.api.ZabbixService.importHosts(<unknown>, null) java.lang.String.equals(<unknown>) <unknown>.set(<unknown>, <unknown>) <unknown>.set(<unknown>, <unknown>) java.lang.IllegalStateException.IllegalStateException(java.lang.String) java.lang.Double.parseDouble(<unknown>) android.content.ContentValues.put(<unknown>, java.lang.Long) android.util.Log.i(java.lang.String, java.lang.String) android.database.sqlite.SQLiteQueryBuilder.appendWhere(<unknown>) org.apache.http.conn.scheme.SchemeRegistry.register(org.apache.http.conn.scheme.Scheme) org.json.JSONObject.getInt(java.lang.String) org.json.JSONObject.put(java.lang.String, boolean) java.lang.Long.parseLong(<unknown>) java.lang.String.indexOf(char) java.lang.String.equals(java.lang.String) android.database.sqlite.SQLiteQueryBuilder.appendWhere(<unknown>) java.lang.String.length() java.lang.String.equals(<unknown>) com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject) <unknown>.nextProperty() <unknown>.next() android.content.SharedPreferences.getString(java.lang.String, java.lang.String) <unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>) com.inovex.zabbixmobile.api.ZabbixService.importTriggers(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader) <unknown>.GraphData() org.json.JSONArray.put(java.lang.String) org.apache.http.impl.client.AbstractHttpClient.getParams() <unknown>.set(<unknown>, long) <unknown>.set(<unknown>, <unknown>) org.json.JSONObject.getJSONObject(java.lang.String) org.json.JSONObject.put(java.lang.String, java.lang.String) java.lang.String.equals(java.lang.String) org.json.JSONObject.getString(java.lang.String) java.lang.String.equals(<unknown>) java.lang.String.equals(<unknown>) <unknown>.getCurrentName() java.lang.String.equals(<unknown>) com.inovex.zabbixmobile.api.ZabbixService.showProgress(int) <unknown>.getCurrentName() com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, java.lang.String, int) org.json.JSONObject.put(java.lang.String, int) org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.close() java.lang.String.replace(java.lang.String, java.lang.String) java.lang.String.equals(<unknown>) com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject) com.inovex.zabbixmobile.api.ZabbixService._endTransaction() android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null) android.database.Cursor.moveToNext() <unknown>.HostData() <unknown>.set(<unknown>, long) <unknown>.next() com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject) android.database.sqlite.SQLiteQueryBuilder.setTables(<unknown>) java.util.Date.getTime() org.json.JSONObject.put(java.lang.String, long) android.content.ContentValues.ContentValues(int) java.lang.Long.parseLong(<unknown>) org.apache.http.HttpResponse.getEntity() org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.getText() java.lang.String.equals(java.lang.String) <unknown>.set(<unknown>, <unknown>) <unknown>.set(<unknown>, <unknown>) <unknown>.set(<unknown>, <unknown>) javax.net.ssl.SSLContext.init(null, javax.net.ssl.TrustManager[], null) android.database.sqlite.SQLiteDatabase.endTransaction() java.lang.String.equals(<unknown>) com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, java.lang.String) android.util.Log.d(java.lang.String, java.lang.String) <unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>) <unknown>.next() <unknown>.close() <unknown>.insert(android.database.sqlite.SQLiteDatabase) org.json.JSONObject.put(java.lang.String, java.lang.String) java.lang.Throwable.getMessage() java.lang.String.equals(<unknown>) java.lang.String.equals(<unknown>) <unknown>.set(<unknown>, <unknown>) com.inovex.zabbixmobile.api.ZabbixService._endTransaction() javax.net.ssl.SSLContext.getSocketFactory() org.json.JSONObject.JSONObject() android.content.Context.getResources() org.json.JSONObject.put(java.lang.String, int) com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, null) com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, java.lang.String, int) java.lang.String.matches(java.lang.String) org.json.JSONArray.put(java.lang.String) <unknown>.set(<unknown>, <unknown>) android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null) android.content.Context.sendBroadcast(android.content.Intent) org.json.JSONObject.getJSONObject(java.lang.String) <unknown>.get(<unknown>) android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null) java.lang.String.equals(<unknown>) android.content.SharedPreferences.getBoolean(java.lang.String, boolean) java.lang.Throwable.printStackTrace() android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null) org.json.JSONObject.put(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService._startTransaction() android.content.Intent.putExtra(java.lang.String, int) org.json.JSONObject.JSONObject() <unknown>.getText() com.inovex.zabbixmobile.api.ZabbixService._endTransaction() org.apache.http.client.methods.HttpPost.HttpPost(java.lang.String) android.content.SharedPreferences.getString(java.lang.String, java.lang.String) <unknown>.GraphItemData() com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, java.lang.String, int) <unknown>.nextValueToken() org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager.ThreadSafeClientConnManager(org.apache.http.params.HttpParams, org.apache.http.conn.scheme.SchemeRegistry) <unknown>.ApplicationItemRelationData() java.lang.Object.toString() android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null) org.json.JSONArray.JSONArray() java.lang.String.equals(<unknown>) com.inovex.zabbixmobile.api.ZabbixService._startTransaction() org.json.JSONObject.put(java.lang.String, org.json.JSONArray) <unknown>.set(<unknown>, int) org.json.JSONObject.put(java.lang.String, int) com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, java.lang.String, int) org.json.JSONObject.put(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService.importItems(<unknown>, int, boolean) org.json.JSONObject.JSONObject() java.lang.Math.min(int, int) com.inovex.zabbixmobile.api.ZabbixService.showProgress(<unknown>) java.lang.String.equals(java.lang.String) android.content.Intent.Intent(<unknown>) java.lang.String.equals(<unknown>) org.json.JSONObject.put(java.lang.String, int) javax.net.ssl.SSLContext.getInstance(java.lang.String) android.content.res.Resources.getString(<unknown>) org.json.JSONObject.JSONObject() android.content.Intent.Intent(<unknown>) java.lang.String.equals(<unknown>) <unknown>.nextProperty() javax.net.ssl.SSLSocketFactory.createSocket(java.net.Socket, java.lang.String, int, boolean) org.json.JSONObject.put(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject) <unknown>.get(<unknown>) com.inovex.zabbixmobile.api.ZabbixService.importHosts(<unknown>, null) java.io.IOException.IOException(java.lang.String) java.lang.String.trim() java.lang.String.contains(java.lang.String) org.apache.http.entity.StringEntity.StringEntity(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService._endTransaction() com.inovex.zabbixmobile.api.ZabbixService.importTriggers(<unknown>) .X509TrustManager() com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject) android.graphics.Color.parseColor(<unknown>) com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, null) org.json.JSONObject.getJSONArray(java.lang.String) org.apache.http.client.params.HttpClientParams.setRedirecting(org.apache.http.params.HttpParams, boolean) com.inovex.zabbixmobile.api.ZabbixService._startTransaction() <unknown>.getCurrentName() <unknown>.getJsonArrayOrObjectReader() java.lang.String.equals(<unknown>) java.lang.Long.parseLong(<unknown>) android.util.Log.d(java.lang.String, java.lang.String) org.codehaus.jackson.JsonParser.getCurrentToken() org.codehaus.jackson.JsonParser.nextValue() java.lang.Long.parseLong(<unknown>) <unknown>.getText() java.util.Date.getTime() android.content.Intent.putExtra(java.lang.String, <unknown>) android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null) <unknown>.get(<unknown>) android.database.Cursor.moveToFirst() org.apache.http.client.methods.HttpEntityEnclosingRequestBase.setEntity(org.apache.http.entity.StringEntity) com.inovex.zabbixmobile.api.ZabbixService._commitTransactionIfRecommended() com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, null) android.database.sqlite.SQLiteQueryBuilder.appendWhere(<unknown>) org.apache.http.auth.UsernamePasswordCredentials.UsernamePasswordCredentials(java.lang.String, java.lang.String) java.util.Date.getTime() java.lang.String.equals(<unknown>) com.inovex.zabbixmobile.api.ZabbixService._endTransaction() org.json.JSONObject.put(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService.authenticate() java.lang.String.equals(<unknown>) org.json.JSONObject.put(java.lang.String, java.lang.String) org.json.JSONObject.put(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService.NoAPIAccessException.NoAPIAccessException() org.json.JSONArray.put(long) com.inovex.zabbixmobile.api.ZabbixService._endTransaction() <unknown>.getJsonArrayOrObjectReader() android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null) <unknown>.ScreenData() java.util.Date.Date() java.util.Date.Date() <unknown>.set(<unknown>, long) <unknown>.getCurrentName() org.json.JSONObject.put(java.lang.String, org.json.JSONArray) <unknown>.set(<unknown>, long) org.json.JSONObject.put(java.lang.String, java.lang.String) org.apache.http.params.HttpConnectionParams.setConnectionTimeout(org.apache.http.params.HttpParams, int) org.json.JSONArray.length() <unknown>.set(<unknown>, java.lang.String) <unknown>.set(<unknown>, long) java.util.Date.getTime() <unknown>.set(<unknown>, <unknown>) <unknown>.set(<unknown>, <unknown>) org.json.JSONArray.put(java.lang.String) java.lang.String.equals(<unknown>) com.inovex.zabbixmobile.api.ZabbixService.HttpAuthorizationRequiredException.HttpAuthorizationRequiredException() <unknown>.getText() org.json.JSONObject.put(java.lang.String, org.json.JSONArray) com.inovex.zabbixmobile.api.ZabbixService.importEvents(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader, null) org.json.JSONObject.JSONObject() com.inovex.zabbixmobile.api.ZabbixService.importHostGroups(<unknown>) <unknown>.set(<unknown>, <unknown>) org.json.JSONObject.toString() java.lang.Integer.parseInt(<unknown>) android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null) org.apache.http.params.HttpProtocolParams.setContentCharset(org.apache.http.params.HttpParams, java.lang.String) <unknown>.get(<unknown>) java.lang.String.equals(<unknown>) <unknown>.set(<unknown>, <unknown>) <unknown>.nextValueToken() <unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>) org.json.JSONObject.put(java.lang.String, org.json.JSONArray) org.json.JSONObject.put(java.lang.String, java.lang.Integer) <unknown>.getText() <unknown>.set(<unknown>, <unknown>) org.apache.http.message.AbstractHttpMessage.addHeader(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject) org.json.JSONObject.getJSONArray(java.lang.String) java.security.KeyStore.load(null, null) java.lang.String.replace(java.lang.String, java.lang.String) java.lang.Long.parseLong(<unknown>) org.json.JSONObject.toString() com.inovex.zabbixmobile.api.ZabbixService.importTriggers(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader) android.util.Log.d(java.lang.String, java.lang.String) android.content.SharedPreferences.getString(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, java.lang.String) <unknown>.getJsonArrayOrObjectReader() <unknown>.TriggerData() android.content.SharedPreferences.getString(java.lang.String, java.lang.String) android.content.Intent.Intent(<unknown>) org.json.JSONObject.put(java.lang.String, java.lang.String) org.apache.http.impl.client.AbstractHttpClient.getCredentialsProvider() <unknown>.set(<unknown>, <unknown>) java.io.IOException.IOException(java.lang.String) java.lang.String.trim() org.json.JSONObject.put(java.lang.String, org.json.JSONArray) java.lang.String.split(java.lang.String) java.lang.String.equals(java.lang.String) java.lang.String.endsWith(java.lang.String) <unknown>.set(<unknown>, int) com.inovex.zabbixmobile.api.ZabbixService.showProgress(int) <unknown>.ItemData() org.json.JSONObject.put(java.lang.String, int) <unknown>.set(<unknown>, <unknown>) org.codehaus.jackson.JsonParser.getText() android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null) org.apache.http.impl.client.DefaultHttpClient.DefaultHttpClient(org.apache.http.conn.ClientConnectionManager, org.apache.http.params.HttpParams) <unknown>.close() java.lang.IllegalStateException.IllegalStateException(java.lang.String) org.json.JSONObject.put(java.lang.String, java.lang.String) org.codehaus.jackson.JsonParser.nextToken() android.database.Cursor.getColumnIndex(<unknown>) org.json.JSONObject.put(java.lang.String, org.json.JSONArray) <unknown>.nextValueToken() com.inovex.zabbixmobile.api.ZabbixService._startTransaction() org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.set(<unknown>, java.lang.String) java.lang.String.substring(int, int) java.lang.Long.parseLong(<unknown>) org.json.JSONObject.put(java.lang.String, java.lang.String) org.json.JSONObject.getInt(java.lang.String) <unknown>.getJsonArrayOrObjectReader() java.lang.String.equals(java.lang.String) <unknown>.set(<unknown>, <unknown>) <unknown>.set(<unknown>, <unknown>) java.security.KeyStore.getInstance(java.lang.String) java.lang.Integer.parseInt(<unknown>) java.lang.String.equals(java.lang.String) <unknown>.nextProperty() android.content.Intent.putExtra(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, null) <unknown>.set(<unknown>, int) java.io.BufferedReader.BufferedReader(java.io.InputStreamReader) com.inovex.zabbixmobile.api.ZabbixService.importEvents(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader, int) java.security.KeyStore.getDefaultType() java.lang.String.equals(<unknown>) <unknown>.getText() org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.set(<unknown>, java.lang.Object) org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.insert(android.database.sqlite.SQLiteDatabase) <unknown>.nextProperty() com.inovex.zabbixmobile.api.ZabbixService._startTransaction() org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.close() <unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>) org.json.JSONObject.put(java.lang.String, long) com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, null, int) <unknown>.set(<unknown>, <unknown>) java.lang.String.equals(<unknown>) org.apache.http.conn.scheme.Scheme.Scheme(java.lang.String, org.apache.http.conn.scheme.PlainSocketFactory, int) org.json.JSONObject.put(java.lang.String, java.lang.String) java.lang.String.equals(<unknown>)"],
    "c_callsites_t": ["<unknown>.set(<unknown>, <unknown>) org.apache.http.HttpEntity.getContent() java.lang.String.equals(java.lang.String) org.json.JSONArray.JSONArray() <unknown>.set(<unknown>, java.lang.Object) org.json.JSONObject.put(java.lang.String, java.lang.Integer) org.json.JSONArray.put(java.lang.String) org.json.JSONObject.JSONObject() org.json.JSONObject.put(java.lang.String, java.lang.String) org.codehaus.jackson.JsonFactory.createJsonParser(java.io.InputStream) java.lang.String.equals(<unknown>) org.apache.http.StatusLine.getStatusCode() <unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>) org.json.JSONObject.put(java.lang.String, java.lang.String) android.database.sqlite.SQLiteDatabase.inTransaction() android.util.Log.d(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService._startTransaction() java.lang.String.equals(java.lang.String) org.codehaus.jackson.JsonFactory.JsonFactory() com.inovex.zabbixmobile.api.ZabbixService._endTransaction() org.json.JSONObject.put(java.lang.String, int) android.content.ContentValues.ContentValues(int) org.apache.http.conn.scheme.SchemeRegistry.SchemeRegistry() <unknown>.insert(android.database.sqlite.SQLiteDatabase) <unknown>.insert(android.database.sqlite.SQLiteDatabase) <unknown>.getJsonArrayOrObjectReader() com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject) com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject) com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject) org.json.JSONObject.getJSONObject(java.lang.String) java.io.InputStreamReader.InputStreamReader(java.io.InputStream) android.content.Intent.putExtra(java.lang.String, <unknown>) org.json.JSONArray.length() java.lang.String.equals(java.lang.String) <unknown>.set(<unknown>, <unknown>) java.lang.String.equals(<unknown>) com.inovex.zabbixmobile.api.ZabbixService.PreconditionFailedException.PreconditionFailedException() java.lang.StringBuilder.StringBuilder() android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null) <unknown>.nextValueToken() org.json.JSONObject.JSONObject() org.json.JSONObject.put(java.lang.String, int) org.json.JSONObject.put(java.lang.String, org.json.JSONArray) java.lang.String.equals(<unknown>) <unknown>.get(<unknown>) <unknown>.insert(android.database.sqlite.SQLiteDatabase) android.content.Intent.putExtra(java.lang.String, <unknown>) java.lang.String.equals(<unknown>) com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, java.lang.String, int) com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject) android.util.Log.d(java.lang.String, java.lang.String) org.json.JSONObject.put(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject) org.apache.http.conn.scheme.Scheme.Scheme(java.lang.String, org.apache.http.conn.ssl.SSLSocketFactory, int) org.apache.http.HttpEntity.getContent() org.codehaus.jackson.JsonParser.close() java.lang.String.equals(<unknown>) <unknown>.nextValueToken() <unknown>.getCurrentName() org.json.JSONArray.JSONArray(java.util.Set<java.lang.Long>) <unknown>.nextValueToken() android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null) com.inovex.zabbixmobile.api.ZabbixService._startTransaction() org.json.JSONArray.JSONArray() <unknown>.nextProperty() java.lang.String.equals(java.lang.String) android.database.sqlite.SQLiteDatabase.update(<unknown>, android.content.ContentValues, <unknown>, null) java.util.Set<java.lang.Long>.add(<unknown>) <unknown>.get(<unknown>) <unknown>.get(<unknown>) android.content.ContentValues.put(<unknown>, java.lang.Long) java.lang.String.equals(java.lang.String) org.apache.http.StatusLine.getReasonPhrase() java.lang.RuntimeException.RuntimeException(java.lang.String) <unknown>.nextProperty() java.lang.Throwable.printStackTrace() java.lang.String.equals(<unknown>) java.lang.Long.parseLong(<unknown>) com.inovex.zabbixmobile.api.ZabbixService.importItems(<unknown>, int, boolean) org.json.JSONObject.put(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject) <unknown>.getCurrentName() android.content.ContentValues.put(<unknown>, java.lang.Long) org.apache.http.entity.StringEntity.StringEntity(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject) java.lang.String.equals(<unknown>) <unknown>.EventData() <unknown>.next() <unknown>.set(<unknown>, <unknown>) com.inovex.zabbixmobile.api.ZabbixService.CustomSSLSocketFactory.CustomSSLSocketFactory(java.security.KeyStore) com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject) <unknown>.getCurrentName() java.util.List<java.lang.String>.add(java.lang.String) org.json.JSONObject.put(java.lang.String, int) <unknown>.getText() org.json.JSONObject.put(java.lang.String, java.lang.String) org.apache.http.conn.ssl.SSLSocketFactory.setHostnameVerifier(org.apache.http.conn.ssl.X509HostnameVerifier) <unknown>.set(<unknown>, <unknown>) <unknown>.getText() org.json.JSONObject.put(java.lang.String, long) java.util.Date.Date() org.json.JSONObject.put(java.lang.String, int) org.json.JSONObject.put(java.lang.String, int) <unknown>.set(<unknown>, <unknown>) com.inovex.zabbixmobile.api.ZabbixService.authenticate() android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null) android.util.Log.d(java.lang.String, java.lang.String) java.lang.String.equals(java.lang.String) org.apache.http.HttpResponse.getEntity() org.json.JSONObject.JSONObject() com.inovex.zabbixmobile.api.ZabbixService.importItems(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader, int, boolean) <unknown>.getJsonArrayOrObjectReader() com.inovex.zabbixmobile.api.ZabbixService._startTransaction() com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, null, int) java.io.BufferedReader.read() org.json.JSONObject.put(java.lang.String, long) <unknown>.set(<unknown>, <unknown>) android.database.Cursor.getLong(<unknown>) java.lang.IllegalStateException.IllegalStateException(java.lang.String) org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.getCurrentName() android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null) android.util.Log.d(java.lang.String, java.lang.String) <unknown>.set(<unknown>, <unknown>) java.lang.String.equals(<unknown>) org.json.JSONObject.put(java.lang.String, java.lang.String) android.database.Cursor.moveToFirst() com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, java.lang.String) android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null) java.lang.String.equals(java.lang.String) com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, java.lang.String) <unknown>.getText() org.json.JSONObject.put(java.lang.String, java.lang.String) android.content.Intent.putExtra(java.lang.String, <unknown>) <unknown>.getCurrentName() android.content.res.Resources.getString(<unknown>) android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null) android.database.sqlite.SQLiteDatabase.setTransactionSuccessful() <unknown>.next() <unknown>.getText() <unknown>.nextValueToken() com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject) com.inovex.zabbixmobile.api.ZabbixService.showProgress(<unknown>) java.io.IOException.IOException(java.lang.String) <unknown>.getCurrentName() android.util.Log.d(java.lang.String, java.lang.String) java.lang.Object.toString() org.json.JSONObject.toString() <unknown>.set(<unknown>, <unknown>) org.json.JSONArray.JSONArray() org.apache.http.HttpResponse.getStatusLine() org.json.JSONArray.JSONArray() org.json.JSONObject.put(java.lang.String, java.lang.String) org.apache.http.impl.client.DefaultHttpClient.DefaultHttpClient() org.json.JSONObject.put(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject) org.apache.http.HttpResponse.getStatusLine() java.lang.String.equals(<unknown>) java.util.Date.Date() android.util.Log.i(java.lang.String, java.lang.String) android.content.Context.getResources() org.apache.http.impl.client.CloseableHttpClient.execute(org.apache.http.client.methods.HttpPost) com.inovex.zabbixmobile.api.ZabbixService._commitTransactionIfRecommended() android.content.Context.sendBroadcast(android.content.Intent) android.content.Context.sendBroadcast(android.content.Intent) com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, null, int) java.lang.Integer.parseInt(<unknown>) <unknown>.ApplicationData() com.inovex.zabbixmobile.api.ZabbixService.NoAPIAccessException.NoAPIAccessException() com.inovex.zabbixmobile.api.ZabbixService._commitTransactionIfRecommended() org.apache.http.message.AbstractHttpMessage.addHeader(java.lang.String, java.lang.String) org.json.JSONObject.put(java.lang.String, int) java.lang.String.replace(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService.importHostGroups(<unknown>) org.json.JSONArray.JSONArray() <unknown>.set(<unknown>, <unknown>) org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.set(<unknown>, <unknown>) org.json.JSONArray.JSONArray() java.lang.String.equals(<unknown>) com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, java.lang.String, int) <unknown>.nextProperty() <unknown>.set(<unknown>, java.lang.String) org.json.JSONObject.JSONObject() java.lang.String.contains(java.lang.String) org.apache.http.client.methods.HttpEntityEnclosingRequestBase.setEntity(org.apache.http.entity.StringEntity) com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject) com.inovex.zabbixmobile.api.ZabbixService.importTriggers(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader) org.json.JSONObject.put(java.lang.String, int) <unknown>.HostGroupData() <unknown>.JsonArrayOrObjectReader(org.codehaus.jackson.JsonParser) <unknown>.HostGroupData() <unknown>.nextProperty() java.lang.Long.parseLong(<unknown>) org.json.JSONObject.put(java.lang.String, java.lang.String) org.json.JSONObject.put(java.lang.String, org.json.JSONArray) org.json.JSONObject.put(java.lang.String, java.lang.Integer) <unknown>.set(<unknown>, <unknown>) <unknown>.close() org.json.JSONObject.put(java.lang.String, org.json.JSONArray) <unknown>.set(<unknown>, <unknown>) java.lang.String.equals(java.lang.String) android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null) <unknown>.next() org.json.JSONObject.toString() java.lang.String.equals(<unknown>) java.lang.String.equals(<unknown>) android.database.sqlite.SQLiteDatabase.query(<unknown>, null, <unknown>, null, null, null, null) <unknown>.set(<unknown>, <unknown>) org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.CacheData() <unknown>.getText() com.inovex.zabbixmobile.api.ZabbixService._startTransaction() <unknown>.set(<unknown>, <unknown>) com.inovex.zabbixmobile.api.ZabbixService._endTransaction() <unknown>.set(<unknown>, int) java.lang.String.equals(<unknown>) java.util.Date.getTime() java.lang.String.equals(java.lang.String) org.json.JSONObject.put(java.lang.String, int) <unknown>.set(<unknown>, <unknown>) java.lang.Integer.parseInt(<unknown>) org.codehaus.jackson.JsonParser.getCurrentName() <unknown>.nextProperty() com.inovex.zabbixmobile.api.ZabbixService._endTransaction() java.lang.String.equals(<unknown>) org.json.JSONObject.put(java.lang.String, int) android.database.sqlite.SQLiteDatabase.update(<unknown>, android.content.ContentValues, <unknown>, null) com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject) com.inovex.zabbixmobile.api.ZabbixService._endTransaction() java.lang.StringBuilder.append(char) <unknown>.set(<unknown>, <unknown>) <unknown>.get(<unknown>) <unknown>.set(<unknown>, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject) org.json.JSONObject.put(java.lang.String, java.lang.String) android.database.Cursor.getLong(<unknown>) java.lang.String.equals(<unknown>) org.json.JSONObject.put(java.lang.String, java.lang.String) org.json.JSONObject.JSONObject() org.apache.http.params.HttpProtocolParams.setVersion(org.apache.http.params.HttpParams, org.apache.http.HttpVersion) com.inovex.zabbixmobile.api.ZabbixService.importApplications(int, int, <unknown>) org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.HistoryDetailData() android.util.Log.d(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService._startTransaction() <unknown>.next() <unknown>.set(<unknown>, <unknown>) <unknown>.nextValueToken() org.json.JSONObject.JSONObject() java.lang.String.equals(<unknown>) com.inovex.zabbixmobile.api.ZabbixService.importScreenItems(<unknown>) java.lang.Long.parseLong(<unknown>) java.lang.Integer.parseInt(<unknown>) org.apache.http.client.methods.HttpPost.HttpPost(java.lang.String) org.apache.http.StatusLine.getStatusCode() <unknown>.set(<unknown>, int) java.lang.String.equals(java.lang.String) java.lang.String.equals(<unknown>) java.lang.String.equals(<unknown>) <unknown>.getCurrentName() java.util.ArrayList<java.lang.String>.ArrayList, String() com.inovex.zabbixmobile.api.ZabbixService._startTransaction() com.inovex.zabbixmobile.api.ZabbixService.importTriggers(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader) org.json.JSONArray.put(java.lang.String) <unknown>.nextValueToken() org.json.JSONArray.put(java.lang.String) <unknown>.set(<unknown>, <unknown>) org.json.JSONObject.put(java.lang.String, int) org.json.JSONObject.JSONObject() <unknown>.ScreenItemData() <unknown>.set(<unknown>, <unknown>) <unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>) android.preference.PreferenceManager.getDefaultSharedPreferences(android.content.Context) org.json.JSONObject.length() <unknown>.nextValueToken() java.util.HashSet<java.lang.Long>.HashSet, Long() java.lang.String.equals(java.lang.String) android.content.SharedPreferences.getBoolean(java.lang.String, boolean) <unknown>.insert(android.database.sqlite.SQLiteDatabase) org.json.JSONObject.put(java.lang.String, org.json.JSONArray) <unknown>.close() com.inovex.zabbixmobile.api.ZabbixService.importHosts(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader, int) org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.next() android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null) org.json.JSONObject.put(java.lang.String, java.lang.String) org.json.JSONObject.getString(java.lang.String) <unknown>.set(<unknown>, <unknown>) org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.close() org.json.JSONObject.getString(java.lang.String) java.lang.String.equals(java.lang.String) java.lang.Long.parseLong(<unknown>) org.codehaus.jackson.JsonParser.isClosed() org.json.JSONObject.put(java.lang.String, int) org.json.JSONObject.put(java.lang.String, org.json.JSONArray) java.lang.String.startsWith(java.lang.String) org.json.JSONObject.put(java.lang.String, long) <unknown>.close() org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.set(<unknown>, long) org.json.JSONObject.put(java.lang.String, org.json.JSONObject) <unknown>.set(<unknown>, <unknown>) com.inovex.zabbixmobile.api.ZabbixService._endTransaction() java.lang.String.replaceAll(java.lang.String, java.lang.String) org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.nextValueToken() org.json.JSONObject.put(java.lang.String, java.lang.String) org.json.JSONObject.put(java.lang.String, java.lang.String) org.apache.http.params.BasicHttpParams.BasicHttpParams() com.inovex.zabbixmobile.api.ZabbixService.importGraphItems(<unknown>) android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null) android.database.sqlite.SQLiteDatabase.beginTransaction() com.inovex.zabbixmobile.api.ZabbixService._commitTransactionIfRecommended() com.inovex.zabbixmobile.api.ZabbixService._endTransaction() java.lang.String.equals(<unknown>) <unknown>.insert(android.database.sqlite.SQLiteDatabase) <unknown>.insert(android.database.sqlite.SQLiteDatabase) org.json.JSONObject.put(java.lang.String, int) <unknown>.next() com.inovex.zabbixmobile.api.ZabbixService._startTransaction() android.content.SharedPreferences.getString(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, null, int) javax.net.SocketFactory.createSocket() java.lang.Long.parseLong(<unknown>) org.apache.http.client.CredentialsProvider.setCredentials(org.apache.http.auth.AuthScope, org.apache.http.auth.UsernamePasswordCredentials) org.json.JSONObject.put(java.lang.String, java.lang.String) org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.next() com.inovex.zabbixmobile.api.ZabbixService.HttpAuthorizationRequiredException.HttpAuthorizationRequiredException() android.database.sqlite.SQLiteQueryBuilder.query(android.database.sqlite.SQLiteDatabase, null, null, null, null, null, null) java.util.Date.Date() com.inovex.zabbixmobile.api.ZabbixService._commitTransactionIfRecommended() <unknown>.set(<unknown>, java.lang.String) org.json.JSONObject.JSONObject() <unknown>.next() <unknown>.set(<unknown>, <unknown>) <unknown>.set(<unknown>, <unknown>) com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject) java.lang.String.equals(java.lang.String) com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, java.lang.String) java.lang.String.indexOf(char) android.database.sqlite.SQLiteDatabase.query(<unknown>, null, <unknown>, null, null, null, null) android.preference.PreferenceManager.getDefaultSharedPreferences(android.content.Context) <unknown>.nextProperty() org.apache.http.impl.client.CloseableHttpClient.execute(org.apache.http.client.methods.HttpPost) <unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>) com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, java.lang.String) org.json.JSONObject.JSONObject() <unknown>.close() android.database.Cursor.getColumnIndex(<unknown>) android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null) org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.nextProperty() org.apache.http.conn.scheme.PlainSocketFactory.getSocketFactory() com.inovex.zabbixmobile.api.ZabbixService._commitTransactionIfRecommended() com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject) java.lang.StringBuilder.toString() org.json.JSONObject.put(java.lang.String, java.lang.String) android.database.sqlite.SQLiteQueryBuilder.SQLiteQueryBuilder() <unknown>.insert(android.database.sqlite.SQLiteDatabase) org.apache.http.conn.scheme.SchemeRegistry.register(org.apache.http.conn.scheme.Scheme) <unknown>.set(<unknown>, <unknown>) org.json.JSONObject.JSONObject(java.lang.String) com.inovex.zabbixmobile.api.ZabbixService.importHosts(<unknown>, null) java.lang.String.equals(<unknown>) <unknown>.set(<unknown>, <unknown>) <unknown>.set(<unknown>, <unknown>) java.lang.IllegalStateException.IllegalStateException(java.lang.String) java.lang.Double.parseDouble(<unknown>) android.content.ContentValues.put(<unknown>, java.lang.Long) android.util.Log.i(java.lang.String, java.lang.String) android.database.sqlite.SQLiteQueryBuilder.appendWhere(<unknown>) org.apache.http.conn.scheme.SchemeRegistry.register(org.apache.http.conn.scheme.Scheme) org.json.JSONObject.getInt(java.lang.String) org.json.JSONObject.put(java.lang.String, boolean) java.lang.Long.parseLong(<unknown>) java.lang.String.indexOf(char) java.lang.String.equals(java.lang.String) android.database.sqlite.SQLiteQueryBuilder.appendWhere(<unknown>) java.lang.String.length() java.lang.String.equals(<unknown>) com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject) <unknown>.nextProperty() <unknown>.next() android.content.SharedPreferences.getString(java.lang.String, java.lang.String) <unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>) com.inovex.zabbixmobile.api.ZabbixService.importTriggers(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader) <unknown>.GraphData() org.json.JSONArray.put(java.lang.String) org.apache.http.impl.client.AbstractHttpClient.getParams() <unknown>.set(<unknown>, long) <unknown>.set(<unknown>, <unknown>) org.json.JSONObject.getJSONObject(java.lang.String) org.json.JSONObject.put(java.lang.String, java.lang.String) java.lang.String.equals(java.lang.String) org.json.JSONObject.getString(java.lang.String) java.lang.String.equals(<unknown>) java.lang.String.equals(<unknown>) <unknown>.getCurrentName() java.lang.String.equals(<unknown>) com.inovex.zabbixmobile.api.ZabbixService.showProgress(int) <unknown>.getCurrentName() com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, java.lang.String, int) org.json.JSONObject.put(java.lang.String, int) org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.close() java.lang.String.replace(java.lang.String, java.lang.String) java.lang.String.equals(<unknown>) com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject) com.inovex.zabbixmobile.api.ZabbixService._endTransaction() android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null) android.database.Cursor.moveToNext() <unknown>.HostData() <unknown>.set(<unknown>, long) <unknown>.next() android.database.sqlite.SQLiteQueryBuilder.setTables(<unknown>) java.util.Date.getTime() org.json.JSONObject.put(java.lang.String, long) android.content.ContentValues.ContentValues(int) java.lang.Long.parseLong(<unknown>) org.apache.http.HttpResponse.getEntity() org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.getText() java.lang.String.equals(java.lang.String) <unknown>.set(<unknown>, <unknown>) <unknown>.set(<unknown>, <unknown>) <unknown>.set(<unknown>, <unknown>) javax.net.ssl.SSLContext.init(null, javax.net.ssl.TrustManager[], null) android.database.sqlite.SQLiteDatabase.endTransaction() java.lang.String.equals(<unknown>) com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, java.lang.String) android.util.Log.d(java.lang.String, java.lang.String) <unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>) <unknown>.next() <unknown>.close() <unknown>.insert(android.database.sqlite.SQLiteDatabase) org.json.JSONObject.put(java.lang.String, java.lang.String) java.lang.Throwable.getMessage() java.lang.String.equals(<unknown>) java.lang.String.equals(<unknown>) <unknown>.set(<unknown>, <unknown>) com.inovex.zabbixmobile.api.ZabbixService._endTransaction() javax.net.ssl.SSLContext.getSocketFactory() org.json.JSONObject.JSONObject() android.content.Context.getResources() org.json.JSONObject.put(java.lang.String, int) com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, null) com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, java.lang.String, int) org.json.JSONObject.put(java.lang.String, java.lang.String) java.lang.String.matches(java.lang.String) org.json.JSONArray.put(java.lang.String) <unknown>.set(<unknown>, <unknown>) android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null) android.content.Context.sendBroadcast(android.content.Intent) org.json.JSONObject.getJSONObject(java.lang.String) <unknown>.get(<unknown>) android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null) java.lang.String.equals(<unknown>) android.content.SharedPreferences.getBoolean(java.lang.String, boolean) java.lang.Throwable.printStackTrace() android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null) org.json.JSONObject.put(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService._startTransaction() android.content.Intent.putExtra(java.lang.String, int) org.json.JSONObject.JSONObject() <unknown>.getText() com.inovex.zabbixmobile.api.ZabbixService._endTransaction() org.apache.http.client.methods.HttpPost.HttpPost(java.lang.String) android.content.SharedPreferences.getString(java.lang.String, java.lang.String) <unknown>.GraphItemData() com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, java.lang.String, int) <unknown>.nextValueToken() org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager.ThreadSafeClientConnManager(org.apache.http.params.HttpParams, org.apache.http.conn.scheme.SchemeRegistry) <unknown>.ApplicationItemRelationData() java.lang.Object.toString() android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null) org.json.JSONArray.JSONArray() java.lang.String.equals(<unknown>) com.inovex.zabbixmobile.api.ZabbixService._startTransaction() org.json.JSONObject.put(java.lang.String, org.json.JSONArray) <unknown>.set(<unknown>, int) org.json.JSONObject.put(java.lang.String, int) com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, java.lang.String, int) org.json.JSONObject.put(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService.importItems(<unknown>, int, boolean) org.json.JSONObject.JSONObject() java.lang.Math.min(int, int) com.inovex.zabbixmobile.api.ZabbixService.showProgress(<unknown>) java.lang.String.equals(java.lang.String) android.content.Intent.Intent(<unknown>) java.lang.String.equals(<unknown>) org.json.JSONObject.put(java.lang.String, int) javax.net.ssl.SSLContext.getInstance(java.lang.String) android.content.res.Resources.getString(<unknown>) org.json.JSONObject.JSONObject() android.content.Intent.Intent(<unknown>) java.lang.String.equals(<unknown>) <unknown>.nextProperty() javax.net.ssl.SSLSocketFactory.createSocket(java.net.Socket, java.lang.String, int, boolean) org.json.JSONObject.put(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject) <unknown>.get(<unknown>) com.inovex.zabbixmobile.api.ZabbixService.importHosts(<unknown>, null) java.io.IOException.IOException(java.lang.String) java.lang.String.trim() java.lang.String.contains(java.lang.String) org.apache.http.entity.StringEntity.StringEntity(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService._endTransaction() com.inovex.zabbixmobile.api.ZabbixService.importTriggers(<unknown>) .X509TrustManager() com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject) android.graphics.Color.parseColor(<unknown>) com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, null) org.json.JSONObject.getJSONArray(java.lang.String) org.apache.http.client.params.HttpClientParams.setRedirecting(org.apache.http.params.HttpParams, boolean) com.inovex.zabbixmobile.api.ZabbixService._startTransaction() <unknown>.getCurrentName() <unknown>.getJsonArrayOrObjectReader() java.lang.String.equals(<unknown>) java.lang.Long.parseLong(<unknown>) android.util.Log.d(java.lang.String, java.lang.String) org.codehaus.jackson.JsonParser.getCurrentToken() org.codehaus.jackson.JsonParser.nextValue() java.lang.Long.parseLong(<unknown>) <unknown>.getText() java.util.Date.getTime() android.content.Intent.putExtra(java.lang.String, <unknown>) android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null) <unknown>.get(<unknown>) android.database.Cursor.moveToFirst() org.apache.http.client.methods.HttpEntityEnclosingRequestBase.setEntity(org.apache.http.entity.StringEntity) com.inovex.zabbixmobile.api.ZabbixService._commitTransactionIfRecommended() com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, null) android.database.sqlite.SQLiteQueryBuilder.appendWhere(<unknown>) org.apache.http.auth.UsernamePasswordCredentials.UsernamePasswordCredentials(java.lang.String, java.lang.String) java.util.Date.getTime() java.lang.String.equals(<unknown>) com.inovex.zabbixmobile.api.ZabbixService._endTransaction() org.json.JSONObject.put(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService.authenticate() java.lang.String.equals(<unknown>) org.json.JSONObject.put(java.lang.String, java.lang.String) org.json.JSONObject.put(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService.NoAPIAccessException.NoAPIAccessException() org.json.JSONArray.put(long) com.inovex.zabbixmobile.api.ZabbixService._endTransaction() <unknown>.getJsonArrayOrObjectReader() android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null) <unknown>.ScreenData() java.util.Date.Date() java.util.Date.Date() <unknown>.set(<unknown>, long) <unknown>.getCurrentName() org.json.JSONObject.put(java.lang.String, org.json.JSONArray) <unknown>.set(<unknown>, long) org.json.JSONObject.put(java.lang.String, java.lang.String) org.apache.http.params.HttpConnectionParams.setConnectionTimeout(org.apache.http.params.HttpParams, int) org.json.JSONArray.length() <unknown>.set(<unknown>, java.lang.String) <unknown>.set(<unknown>, long) java.util.Date.getTime() <unknown>.set(<unknown>, <unknown>) <unknown>.set(<unknown>, <unknown>) org.json.JSONArray.put(java.lang.String) java.lang.String.equals(<unknown>) com.inovex.zabbixmobile.api.ZabbixService.HttpAuthorizationRequiredException.HttpAuthorizationRequiredException() <unknown>.getText() org.json.JSONObject.put(java.lang.String, org.json.JSONArray) com.inovex.zabbixmobile.api.ZabbixService.importEvents(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader, null) org.json.JSONObject.JSONObject() com.inovex.zabbixmobile.api.ZabbixService.importHostGroups(<unknown>) <unknown>.set(<unknown>, <unknown>) org.json.JSONObject.toString() java.lang.Integer.parseInt(<unknown>) android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null) org.apache.http.params.HttpProtocolParams.setContentCharset(org.apache.http.params.HttpParams, java.lang.String) <unknown>.get(<unknown>) java.lang.String.equals(<unknown>) <unknown>.set(<unknown>, <unknown>) <unknown>.nextValueToken() <unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>) org.json.JSONObject.put(java.lang.String, org.json.JSONArray) org.json.JSONObject.put(java.lang.String, java.lang.Integer) <unknown>.getText() <unknown>.set(<unknown>, <unknown>) org.apache.http.message.AbstractHttpMessage.addHeader(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject) org.json.JSONObject.getJSONArray(java.lang.String) java.security.KeyStore.load(null, null) java.lang.String.replace(java.lang.String, java.lang.String) java.lang.Long.parseLong(<unknown>) org.json.JSONObject.toString() com.inovex.zabbixmobile.api.ZabbixService.importTriggers(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader) android.util.Log.d(java.lang.String, java.lang.String) android.content.SharedPreferences.getString(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, java.lang.String) <unknown>.getJsonArrayOrObjectReader() <unknown>.TriggerData() android.content.SharedPreferences.getString(java.lang.String, java.lang.String) android.content.Intent.Intent(<unknown>) org.json.JSONObject.put(java.lang.String, java.lang.String) org.apache.http.impl.client.AbstractHttpClient.getCredentialsProvider() <unknown>.set(<unknown>, <unknown>) java.io.IOException.IOException(java.lang.String) java.lang.String.trim() org.json.JSONObject.put(java.lang.String, org.json.JSONArray) java.lang.String.split(java.lang.String) java.lang.String.equals(java.lang.String) java.lang.String.endsWith(java.lang.String) <unknown>.set(<unknown>, int) com.inovex.zabbixmobile.api.ZabbixService.showProgress(int) <unknown>.ItemData() org.json.JSONObject.put(java.lang.String, int) <unknown>.set(<unknown>, <unknown>) org.codehaus.jackson.JsonParser.getText() android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null) org.apache.http.impl.client.DefaultHttpClient.DefaultHttpClient(org.apache.http.conn.ClientConnectionManager, org.apache.http.params.HttpParams) <unknown>.close() java.lang.IllegalStateException.IllegalStateException(java.lang.String) org.json.JSONObject.put(java.lang.String, java.lang.String) org.codehaus.jackson.JsonParser.nextToken() android.database.Cursor.getColumnIndex(<unknown>) org.json.JSONObject.put(java.lang.String, org.json.JSONArray) <unknown>.nextValueToken() com.inovex.zabbixmobile.api.ZabbixService._startTransaction() org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.set(<unknown>, java.lang.String) java.lang.String.substring(int, int) java.lang.Long.parseLong(<unknown>) org.json.JSONObject.put(java.lang.String, java.lang.String) org.json.JSONObject.getInt(java.lang.String) <unknown>.getJsonArrayOrObjectReader() java.lang.String.equals(java.lang.String) <unknown>.set(<unknown>, <unknown>) <unknown>.set(<unknown>, <unknown>) java.security.KeyStore.getInstance(java.lang.String) java.lang.Integer.parseInt(<unknown>) java.lang.String.equals(java.lang.String) <unknown>.nextProperty() android.content.Intent.putExtra(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, null) <unknown>.set(<unknown>, int) java.io.BufferedReader.BufferedReader(java.io.InputStreamReader) com.inovex.zabbixmobile.api.ZabbixService.importEvents(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader, int) java.security.KeyStore.getDefaultType() java.lang.String.equals(<unknown>) <unknown>.getText() org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.set(<unknown>, java.lang.Object) org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.insert(android.database.sqlite.SQLiteDatabase) <unknown>.nextProperty() com.inovex.zabbixmobile.api.ZabbixService._startTransaction() org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.close() <unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>) org.json.JSONObject.put(java.lang.String, long) com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, null, int) <unknown>.set(<unknown>, <unknown>) java.lang.String.equals(<unknown>) org.apache.http.conn.scheme.Scheme.Scheme(java.lang.String, org.apache.http.conn.scheme.PlainSocketFactory, int) org.json.JSONObject.put(java.lang.String, java.lang.String) java.lang.String.equals(<unknown>)"],
    "c_callsites_added_t": ["org.json.JSONObject.put(java.lang.String, java.lang.String)"],
    "c_methods_t": ["ApplicationData ApplicationItemRelationData ArrayList, String BasicHttpParams BufferedReader CacheData ContentValues CustomSSLSocketFactory Date DefaultHttpClient EventData GraphData GraphItemData HashSet, Long HistoryDetailData HostData HostGroupData HttpAuthorizationRequiredException HttpPost IOException IllegalStateException InputStreamReader Intent ItemData JSONArray JSONObject JsonArrayOrObjectReader JsonFactory NoAPIAccessException PreconditionFailedException RuntimeException SQLiteQueryBuilder Scheme SchemeRegistry ScreenData ScreenItemData StringBuilder StringEntity ThreadSafeClientConnManager TriggerData UsernamePasswordCredentials X509TrustManager _commitTransactionIfRecommended _endTransaction _queryBuffer _queryStream _startTransaction add addHeader append appendWhere authenticate beginTransaction close contains createJsonParser createSocket d delete endTransaction endsWith equals execute get getBoolean getColumnIndex getContent getCredentialsProvider getCurrentName getCurrentToken getDefaultSharedPreferences getDefaultType getEntity getInstance getInt getJSONArray getJSONObject getJsonArrayOrObjectReader getLong getMessage getParams getReasonPhrase getResources getSocketFactory getStatusCode getStatusLine getString getText getTime i importApplications importEvents importGraphItems importHostGroups importHosts importItems importScreenItems importTriggers inTransaction indexOf init insert isCached isClosed length load matches min moveToFirst moveToNext next nextProperty nextToken nextValue nextValueToken parseColor parseDouble parseInt parseLong printStackTrace put putExtra query read register replace replaceAll sendBroadcast set setCached setConnectionTimeout setContentCharset setCredentials setEntity setHostnameVerifier setRedirecting setTables setTransactionSuccessful setVersion showProgress split startsWith substring toString trim update"],
    "id": "inovex/zax\u0000src/com/inovex/zabbixmobile/api/ZabbixService.java\u00003820d9533b270822d05ab19af8a9c14f585e1749\u00005d91d0066c3f1f3f2fe253a9c316513d370faa5f",
    "p_comments_t": ["\t\t\t// create ApplicationItemRelation /** \n * public, for the unit test\n */\n /** \n * import the hosts from stream\n * @param jsonArray stream\n * @param numHosts count of hosts for progressbar. null if unknown.\n * @return Object[] {(String) comma-separated all Hostnames, (Long) 1. host id}\n * @throws JsonParseException\n * @throws IOException\n */\n \t\t\t// result array found /** \n * import graph items\n * @param graphItems\n * @return true, if graphid column has to be updated from -1 to the correct graphid later.\n * @throws JsonParseException\n * @throws NumberFormatException\n * @throws IOException\n */\n \t\t\t\t\t\t// save only every 20th \t\t\t// wrong password. token remains null \t\t\t// the past 2 hours \t\t\t\t\t// data are unuseable, e.g. because it's a string /** \n * @param events stream\n * @param numEvents if null, no progressbar-update AND only isert, if it does not exist. If !null, progressbar-update AND always insert without checking\n * @throws JsonParseException\n * @throws IOException\n */\n \t\t\t\t\t// Precondition failed / Looks like Zabbix 1.8.2 \t\t\t// get API version \t\t\t// if #0 \"other\" does not exist yet, it has to be created \t\t\t\t\t// later the IDs will be replaced with the correct /** \n * zabbix api call. data will be parsed as json object on-the-fly. Caution: use this only for api calls with a small return data.\n * @param method\n * @param params\n * @return\n * @throws ClientProtocolException\n * @throws IOException\n * @throws JSONException\n * @throws HttpAuthorizationRequiredException\n * @throws NoAPIAccessException\n */\n /** \n * begin sql transaction\n */\n \t\t\t\t\t\t// first do a new auth and then try the same api call again \t\t\t\t// no itemid \t\t\t// count of items /** \n * init\n * @param context android context\n * @param zabbixLocalDB sqlite\n */\n \t\t\t// create applications that does not exist \t\t\t\t// so we use a fiction \t\t\t// only resouretype == 0 /** \n * probably too old zabbix <= 1.8.2\n */\n /** \n * zabbix auth. user and pwd from app preferences\n * @return true success\n * @throws ClientProtocolException\n * @throws IOException\n * @throws JSONException\n * @throws HttpAuthorizationRequiredException\n * @throws NoAPIAccessException\n */\n /** \n * close the last http stream\n */\n \t\t\t// Workaround: historydetails only comes if you use the correct \"history\"-parameter. /** \n * transforms the progress\n * @param start 0% => start%\n * @param end 100% => end%\n */\n \t\t\t\t// in Zabbix version <2.0, this is not default \t\t\t\t// file not found \t\t\t\t\t// hex string => color int \t\tHttpClientParams.setRedirecting(params, true); // redirecting /** \n * The API version. From 1.8.3 (maybe earlier) to 2.0 (excluded), this was 1.3. With 2.0, it changed to 1.4.  Finally, since 2.0.4, the API version matches the program version.\n */\n \t\t\t// if applicable replace placeholder \t\t\t// if graphid-column was not set, this must be done later. temporary graphid=-1 \t\t// for GUI unit test, just return true /** \n * imports the \"warning\"-triggers\n * @throws JSONException\n * @throws IOException\n * @throws HttpAuthorizationRequiredException\n * @throws NoAPIAccessException\n */\n \t\t\t// event is parsed and can be inserted into the db \t\tpublic static final int EVENT_GET_TIME_FROM_SHIFT = 7*24*60*60; // -7 days \t\t// http request \t\t\t\t\t// store hosts namen \t\t\t\t// http auth failed \t\t\t\t\t// at this point itemid and hostid is unknown \t\t\t\t\t// import triggers \t\t\t// we try them all, until we get results. /** \n * importiert ein trigger mit dem attribute itemid. ggf. wird der trigger zuerst gelöscht und neu angelegt. imports a trigger with the attribute itemid. if trigger already exists, it will be removed first.\n * @param triggerid\n * @throws JSONException\n * @throws IOException\n * @throws HttpAuthorizationRequiredException\n * @throws NoAPIAccessException\n */\n \t\t\t\t\t// import hosts \t\t\t// for unit test \t\t\t\t// ignore \t\t\t// or a json object /** \n * zabbix error: no api access\n */\n /** \n * counts the sql inserts/updates and do a transaction commit to save the memory\n */\n \t\t\t// send intent to GUI \t\t\t\t\t// before zabbix 2.x the name field was \"description\" \t\t\t\t\t// if we get an empty array, we try another history parameter \t\t\t\t\t// store the first item id \t\t// check if the trigger exists and if the itemid was set /** \n * global constants\n */\n \t\t\t\t// create \"other\" hostgroup #1 \t\t\t// if there's no application, the ID #0 must be added (for other) \t\t\t\t\t// because of this, all applicationrelations will be saved with itemid and hostid \"-1\". \t\t\t\t\t\t.put(\"history\", historytype) // for integer ? /** \n * interface to connect to the zabbix server\n */\n /** \n * acknowledge zabbix event. Sets ack-flag with comment. Caution: This is supported only for Zabbix version >= 1.8.4\n * @param eventid\n * @param comment\n * @return true, success.\n * @throws ClientProtocolException\n * @throws IOException\n * @throws JSONException\n * @throws HttpAuthorizationRequiredException\n * @throws NoAPIAccessException\n */\n \t\t\t// store the last stream to close it if an exception will be thrown /** \n * zabbix api call as stream.\n * @param method\n * @param params\n * @return stream im json array wrapper\n * @throws JSONException\n * @throws IOException\n * @throws HttpAuthorizationRequiredException\n * @throws NoAPIAccessException\n */\n \t\t// if applicable http auth \t\t\t// correct historytype found and there are data \t\t\t\t// count of the entries cannot be detected (zabbix bug), /** \n * import items from stream.\n * @param items stream\n * @param numItems count for progressbar, if 0 no progressbarupdate\n * @param checkBeforeInsert if true, only make an insert if item does not exist\n * @return the first item id\n * @throws JsonParseException\n * @throws IOException\n */\n \t\t\t// collect all graphids /** \n * http auth is needed\n */\n \t\t\t// ignore for unit test /** \n * commit sql transaction\n */\n \t\t\t// delete old graphs \t\t\t// host without group will get group #0 (other) \t\t\t// there's no result \t\tpublic static final int HISTORY_GET_TIME_FROM_SHIFT = 24*60*60; // -24h \t\t// if applicable, transform the progress \t\t\t// SSL not trusted \t\t\t// internet problem \t\t\tif (jp.nextToken() != JsonToken.START_ARRAY && jp.getCurrentToken() != JsonToken.START_OBJECT) { // go inside the array \t\tpublic static final int CACHE_LIFETIME_APPLICATIONS = 2*24*60*60; // 2 days \t\t\t\t\t// since zabbix 2.x is the name of the item \"name\" \t\t\t// now the \"-1\" IDs of applicationsrelation will be replaced with the correct itemID \t\t\t// get count of hosts /** \n * import the newest events\n * @throws ClientProtocolException\n * @throws IOException\n * @throws JSONException\n * @throws HttpAuthorizationRequiredException\n * @throws NoAPIAccessException\n */\n /** \n * updates the progressbar in the gui\n * @param i 0..100\n */\n \t\t\t\t\t\t// ignore \t\t\t\t\t// first do a new auth and then try the same api call again /** \n * import the newest event of a trigger\n * @param triggerid\n * @throws JSONException\n * @throws IOException\n * @throws HttpAuthorizationRequiredException\n * @throws NoAPIAccessException\n */\n \t\t// it can be an (empty) array \t\t\t// this parameter can be \"null\" or a number 0-4. Because we don't know when to use which, \t\t\t// clear triggers"],
    "p_email_sni": "jschamburger@inovex.de",
    "c_callsites_removed_t": ["<empty>"],
    "c_callsites_cs": "<unknown>.set(<unknown>, <unknown>)#org.apache.http.HttpEntity.getContent()#java.lang.String.equals(java.lang.String)#org.json.JSONArray.JSONArray()#<unknown>.set(<unknown>, java.lang.Object)#org.json.JSONObject.put(java.lang.String, java.lang.Integer)#org.json.JSONArray.put(java.lang.String)#org.json.JSONObject.JSONObject()#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.codehaus.jackson.JsonFactory.createJsonParser(java.io.InputStream)#java.lang.String.equals(<unknown>)#org.apache.http.StatusLine.getStatusCode()#<unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>)#org.json.JSONObject.put(java.lang.String, java.lang.String)#android.database.sqlite.SQLiteDatabase.inTransaction()#android.util.Log.d(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService._startTransaction()#java.lang.String.equals(java.lang.String)#org.codehaus.jackson.JsonFactory.JsonFactory()#com.inovex.zabbixmobile.api.ZabbixService._endTransaction()#org.json.JSONObject.put(java.lang.String, int)#android.content.ContentValues.ContentValues(int)#org.apache.http.conn.scheme.SchemeRegistry.SchemeRegistry()#<unknown>.insert(android.database.sqlite.SQLiteDatabase)#<unknown>.insert(android.database.sqlite.SQLiteDatabase)#<unknown>.getJsonArrayOrObjectReader()#com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject)#com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject)#com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject)#org.json.JSONObject.getJSONObject(java.lang.String)#java.io.InputStreamReader.InputStreamReader(java.io.InputStream)#android.content.Intent.putExtra(java.lang.String, <unknown>)#org.json.JSONArray.length()#java.lang.String.equals(java.lang.String)#<unknown>.set(<unknown>, <unknown>)#java.lang.String.equals(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService.PreconditionFailedException.PreconditionFailedException()#java.lang.StringBuilder.StringBuilder()#android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null)#<unknown>.nextValueToken()#org.json.JSONObject.JSONObject()#org.json.JSONObject.put(java.lang.String, int)#org.json.JSONObject.put(java.lang.String, org.json.JSONArray)#java.lang.String.equals(<unknown>)#<unknown>.get(<unknown>)#<unknown>.insert(android.database.sqlite.SQLiteDatabase)#android.content.Intent.putExtra(java.lang.String, <unknown>)#java.lang.String.equals(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, java.lang.String, int)#com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject)#android.util.Log.d(java.lang.String, java.lang.String)#org.json.JSONObject.put(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject)#org.apache.http.conn.scheme.Scheme.Scheme(java.lang.String, org.apache.http.conn.ssl.SSLSocketFactory, int)#org.apache.http.HttpEntity.getContent()#org.codehaus.jackson.JsonParser.close()#java.lang.String.equals(<unknown>)#<unknown>.nextValueToken()#<unknown>.getCurrentName()#org.json.JSONArray.JSONArray(java.util.Set<java.lang.Long>)#<unknown>.nextValueToken()#android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null)#com.inovex.zabbixmobile.api.ZabbixService._startTransaction()#org.json.JSONArray.JSONArray()#<unknown>.nextProperty()#java.lang.String.equals(java.lang.String)#android.database.sqlite.SQLiteDatabase.update(<unknown>, android.content.ContentValues, <unknown>, null)#java.util.Set<java.lang.Long>.add(<unknown>)#<unknown>.get(<unknown>)#<unknown>.get(<unknown>)#android.content.ContentValues.put(<unknown>, java.lang.Long)#java.lang.String.equals(java.lang.String)#org.apache.http.StatusLine.getReasonPhrase()#java.lang.RuntimeException.RuntimeException(java.lang.String)#<unknown>.nextProperty()#java.lang.Throwable.printStackTrace()#java.lang.String.equals(<unknown>)#java.lang.Long.parseLong(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService.importItems(<unknown>, int, boolean)#org.json.JSONObject.put(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject)#<unknown>.getCurrentName()#android.content.ContentValues.put(<unknown>, java.lang.Long)#org.apache.http.entity.StringEntity.StringEntity(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject)#java.lang.String.equals(<unknown>)#<unknown>.EventData()#<unknown>.next()#<unknown>.set(<unknown>, <unknown>)#com.inovex.zabbixmobile.api.ZabbixService.CustomSSLSocketFactory.CustomSSLSocketFactory(java.security.KeyStore)#com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject)#<unknown>.getCurrentName()#java.util.List<java.lang.String>.add(java.lang.String)#org.json.JSONObject.put(java.lang.String, int)#<unknown>.getText()#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.apache.http.conn.ssl.SSLSocketFactory.setHostnameVerifier(org.apache.http.conn.ssl.X509HostnameVerifier)#<unknown>.set(<unknown>, <unknown>)#<unknown>.getText()#org.json.JSONObject.put(java.lang.String, long)#java.util.Date.Date()#org.json.JSONObject.put(java.lang.String, int)#org.json.JSONObject.put(java.lang.String, int)#<unknown>.set(<unknown>, <unknown>)#com.inovex.zabbixmobile.api.ZabbixService.authenticate()#android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null)#android.util.Log.d(java.lang.String, java.lang.String)#java.lang.String.equals(java.lang.String)#org.apache.http.HttpResponse.getEntity()#org.json.JSONObject.JSONObject()#com.inovex.zabbixmobile.api.ZabbixService.importItems(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader, int, boolean)#<unknown>.getJsonArrayOrObjectReader()#com.inovex.zabbixmobile.api.ZabbixService._startTransaction()#com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, null, int)#java.io.BufferedReader.read()#org.json.JSONObject.put(java.lang.String, long)#<unknown>.set(<unknown>, <unknown>)#android.database.Cursor.getLong(<unknown>)#java.lang.IllegalStateException.IllegalStateException(java.lang.String)#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.getCurrentName()#android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null)#android.util.Log.d(java.lang.String, java.lang.String)#<unknown>.set(<unknown>, <unknown>)#java.lang.String.equals(<unknown>)#org.json.JSONObject.put(java.lang.String, java.lang.String)#android.database.Cursor.moveToFirst()#com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, java.lang.String)#android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null)#java.lang.String.equals(java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, java.lang.String)#<unknown>.getText()#org.json.JSONObject.put(java.lang.String, java.lang.String)#android.content.Intent.putExtra(java.lang.String, <unknown>)#<unknown>.getCurrentName()#android.content.res.Resources.getString(<unknown>)#android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null)#android.database.sqlite.SQLiteDatabase.setTransactionSuccessful()#<unknown>.next()#<unknown>.getText()#<unknown>.nextValueToken()#com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject)#com.inovex.zabbixmobile.api.ZabbixService.showProgress(<unknown>)#java.io.IOException.IOException(java.lang.String)#<unknown>.getCurrentName()#android.util.Log.d(java.lang.String, java.lang.String)#java.lang.Object.toString()#org.json.JSONObject.toString()#<unknown>.set(<unknown>, <unknown>)#org.json.JSONArray.JSONArray()#org.apache.http.HttpResponse.getStatusLine()#org.json.JSONArray.JSONArray()#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.apache.http.impl.client.DefaultHttpClient.DefaultHttpClient()#org.json.JSONObject.put(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject)#org.apache.http.HttpResponse.getStatusLine()#java.lang.String.equals(<unknown>)#java.util.Date.Date()#android.util.Log.i(java.lang.String, java.lang.String)#android.content.Context.getResources()#org.apache.http.impl.client.CloseableHttpClient.execute(org.apache.http.client.methods.HttpPost)#com.inovex.zabbixmobile.api.ZabbixService._commitTransactionIfRecommended()#android.content.Context.sendBroadcast(android.content.Intent)#android.content.Context.sendBroadcast(android.content.Intent)#com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, null, int)#java.lang.Integer.parseInt(<unknown>)#<unknown>.ApplicationData()#com.inovex.zabbixmobile.api.ZabbixService.NoAPIAccessException.NoAPIAccessException()#com.inovex.zabbixmobile.api.ZabbixService._commitTransactionIfRecommended()#org.apache.http.message.AbstractHttpMessage.addHeader(java.lang.String, java.lang.String)#org.json.JSONObject.put(java.lang.String, int)#java.lang.String.replace(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService.importHostGroups(<unknown>)#org.json.JSONArray.JSONArray()#<unknown>.set(<unknown>, <unknown>)#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.set(<unknown>, <unknown>)#org.json.JSONArray.JSONArray()#java.lang.String.equals(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, java.lang.String, int)#<unknown>.nextProperty()#<unknown>.set(<unknown>, java.lang.String)#org.json.JSONObject.JSONObject()#java.lang.String.contains(java.lang.String)#org.apache.http.client.methods.HttpEntityEnclosingRequestBase.setEntity(org.apache.http.entity.StringEntity)#com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject)#com.inovex.zabbixmobile.api.ZabbixService.importTriggers(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader)#org.json.JSONObject.put(java.lang.String, int)#<unknown>.HostGroupData()#<unknown>.JsonArrayOrObjectReader(org.codehaus.jackson.JsonParser)#<unknown>.HostGroupData()#<unknown>.nextProperty()#java.lang.Long.parseLong(<unknown>)#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.json.JSONObject.put(java.lang.String, org.json.JSONArray)#org.json.JSONObject.put(java.lang.String, java.lang.Integer)#<unknown>.set(<unknown>, <unknown>)#<unknown>.close()#org.json.JSONObject.put(java.lang.String, org.json.JSONArray)#<unknown>.set(<unknown>, <unknown>)#java.lang.String.equals(java.lang.String)#android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null)#<unknown>.next()#org.json.JSONObject.toString()#java.lang.String.equals(<unknown>)#java.lang.String.equals(<unknown>)#android.database.sqlite.SQLiteDatabase.query(<unknown>, null, <unknown>, null, null, null, null)#<unknown>.set(<unknown>, <unknown>)#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.CacheData()#<unknown>.getText()#com.inovex.zabbixmobile.api.ZabbixService._startTransaction()#<unknown>.set(<unknown>, <unknown>)#com.inovex.zabbixmobile.api.ZabbixService._endTransaction()#<unknown>.set(<unknown>, int)#java.lang.String.equals(<unknown>)#java.util.Date.getTime()#java.lang.String.equals(java.lang.String)#org.json.JSONObject.put(java.lang.String, int)#<unknown>.set(<unknown>, <unknown>)#java.lang.Integer.parseInt(<unknown>)#org.codehaus.jackson.JsonParser.getCurrentName()#<unknown>.nextProperty()#com.inovex.zabbixmobile.api.ZabbixService._endTransaction()#java.lang.String.equals(<unknown>)#org.json.JSONObject.put(java.lang.String, int)#android.database.sqlite.SQLiteDatabase.update(<unknown>, android.content.ContentValues, <unknown>, null)#com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject)#com.inovex.zabbixmobile.api.ZabbixService._endTransaction()#java.lang.StringBuilder.append(char)#<unknown>.set(<unknown>, <unknown>)#<unknown>.get(<unknown>)#<unknown>.set(<unknown>, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject)#org.json.JSONObject.put(java.lang.String, java.lang.String)#android.database.Cursor.getLong(<unknown>)#java.lang.String.equals(<unknown>)#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.json.JSONObject.JSONObject()#org.apache.http.params.HttpProtocolParams.setVersion(org.apache.http.params.HttpParams, org.apache.http.HttpVersion)#com.inovex.zabbixmobile.api.ZabbixService.importApplications(int, int, <unknown>)#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.HistoryDetailData()#android.util.Log.d(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService._startTransaction()#<unknown>.next()#<unknown>.set(<unknown>, <unknown>)#<unknown>.nextValueToken()#org.json.JSONObject.JSONObject()#java.lang.String.equals(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService.importScreenItems(<unknown>)#java.lang.Long.parseLong(<unknown>)#java.lang.Integer.parseInt(<unknown>)#org.apache.http.client.methods.HttpPost.HttpPost(java.lang.String)#org.apache.http.StatusLine.getStatusCode()#<unknown>.set(<unknown>, int)#java.lang.String.equals(java.lang.String)#java.lang.String.equals(<unknown>)#java.lang.String.equals(<unknown>)#<unknown>.getCurrentName()#java.util.ArrayList<java.lang.String>.ArrayList, String()#com.inovex.zabbixmobile.api.ZabbixService._startTransaction()#com.inovex.zabbixmobile.api.ZabbixService.importTriggers(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader)#org.json.JSONArray.put(java.lang.String)#<unknown>.nextValueToken()#org.json.JSONArray.put(java.lang.String)#<unknown>.set(<unknown>, <unknown>)#org.json.JSONObject.put(java.lang.String, int)#org.json.JSONObject.JSONObject()#<unknown>.ScreenItemData()#<unknown>.set(<unknown>, <unknown>)#<unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>)#android.preference.PreferenceManager.getDefaultSharedPreferences(android.content.Context)#org.json.JSONObject.length()#<unknown>.nextValueToken()#java.util.HashSet<java.lang.Long>.HashSet, Long()#java.lang.String.equals(java.lang.String)#android.content.SharedPreferences.getBoolean(java.lang.String, boolean)#<unknown>.insert(android.database.sqlite.SQLiteDatabase)#org.json.JSONObject.put(java.lang.String, org.json.JSONArray)#<unknown>.close()#com.inovex.zabbixmobile.api.ZabbixService.importHosts(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader, int)#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.next()#android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null)#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.json.JSONObject.getString(java.lang.String)#<unknown>.set(<unknown>, <unknown>)#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.close()#org.json.JSONObject.getString(java.lang.String)#java.lang.String.equals(java.lang.String)#java.lang.Long.parseLong(<unknown>)#org.codehaus.jackson.JsonParser.isClosed()#org.json.JSONObject.put(java.lang.String, int)#org.json.JSONObject.put(java.lang.String, org.json.JSONArray)#java.lang.String.startsWith(java.lang.String)#org.json.JSONObject.put(java.lang.String, long)#<unknown>.close()#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.set(<unknown>, long)#org.json.JSONObject.put(java.lang.String, org.json.JSONObject)#<unknown>.set(<unknown>, <unknown>)#com.inovex.zabbixmobile.api.ZabbixService._endTransaction()#java.lang.String.replaceAll(java.lang.String, java.lang.String)#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.nextValueToken()#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.apache.http.params.BasicHttpParams.BasicHttpParams()#com.inovex.zabbixmobile.api.ZabbixService.importGraphItems(<unknown>)#android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null)#android.database.sqlite.SQLiteDatabase.beginTransaction()#com.inovex.zabbixmobile.api.ZabbixService._commitTransactionIfRecommended()#com.inovex.zabbixmobile.api.ZabbixService._endTransaction()#java.lang.String.equals(<unknown>)#<unknown>.insert(android.database.sqlite.SQLiteDatabase)#<unknown>.insert(android.database.sqlite.SQLiteDatabase)#org.json.JSONObject.put(java.lang.String, int)#<unknown>.next()#com.inovex.zabbixmobile.api.ZabbixService._startTransaction()#android.content.SharedPreferences.getString(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, null, int)#javax.net.SocketFactory.createSocket()#java.lang.Long.parseLong(<unknown>)#org.apache.http.client.CredentialsProvider.setCredentials(org.apache.http.auth.AuthScope, org.apache.http.auth.UsernamePasswordCredentials)#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.next()#com.inovex.zabbixmobile.api.ZabbixService.HttpAuthorizationRequiredException.HttpAuthorizationRequiredException()#android.database.sqlite.SQLiteQueryBuilder.query(android.database.sqlite.SQLiteDatabase, null, null, null, null, null, null)#java.util.Date.Date()#com.inovex.zabbixmobile.api.ZabbixService._commitTransactionIfRecommended()#<unknown>.set(<unknown>, java.lang.String)#org.json.JSONObject.JSONObject()#<unknown>.next()#<unknown>.set(<unknown>, <unknown>)#<unknown>.set(<unknown>, <unknown>)#com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject)#java.lang.String.equals(java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, java.lang.String)#java.lang.String.indexOf(char)#android.database.sqlite.SQLiteDatabase.query(<unknown>, null, <unknown>, null, null, null, null)#android.preference.PreferenceManager.getDefaultSharedPreferences(android.content.Context)#<unknown>.nextProperty()#org.apache.http.impl.client.CloseableHttpClient.execute(org.apache.http.client.methods.HttpPost)#<unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>)#com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, java.lang.String)#org.json.JSONObject.JSONObject()#<unknown>.close()#android.database.Cursor.getColumnIndex(<unknown>)#android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null)#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.nextProperty()#org.apache.http.conn.scheme.PlainSocketFactory.getSocketFactory()#com.inovex.zabbixmobile.api.ZabbixService._commitTransactionIfRecommended()#com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject)#java.lang.StringBuilder.toString()#org.json.JSONObject.put(java.lang.String, java.lang.String)#android.database.sqlite.SQLiteQueryBuilder.SQLiteQueryBuilder()#<unknown>.insert(android.database.sqlite.SQLiteDatabase)#org.apache.http.conn.scheme.SchemeRegistry.register(org.apache.http.conn.scheme.Scheme)#<unknown>.set(<unknown>, <unknown>)#org.json.JSONObject.JSONObject(java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService.importHosts(<unknown>, null)#java.lang.String.equals(<unknown>)#<unknown>.set(<unknown>, <unknown>)#<unknown>.set(<unknown>, <unknown>)#java.lang.IllegalStateException.IllegalStateException(java.lang.String)#java.lang.Double.parseDouble(<unknown>)#android.content.ContentValues.put(<unknown>, java.lang.Long)#android.util.Log.i(java.lang.String, java.lang.String)#android.database.sqlite.SQLiteQueryBuilder.appendWhere(<unknown>)#org.apache.http.conn.scheme.SchemeRegistry.register(org.apache.http.conn.scheme.Scheme)#org.json.JSONObject.getInt(java.lang.String)#org.json.JSONObject.put(java.lang.String, boolean)#java.lang.Long.parseLong(<unknown>)#java.lang.String.indexOf(char)#java.lang.String.equals(java.lang.String)#android.database.sqlite.SQLiteQueryBuilder.appendWhere(<unknown>)#java.lang.String.length()#java.lang.String.equals(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject)#<unknown>.nextProperty()#<unknown>.next()#android.content.SharedPreferences.getString(java.lang.String, java.lang.String)#<unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>)#com.inovex.zabbixmobile.api.ZabbixService.importTriggers(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader)#<unknown>.GraphData()#org.json.JSONArray.put(java.lang.String)#org.apache.http.impl.client.AbstractHttpClient.getParams()#<unknown>.set(<unknown>, long)#<unknown>.set(<unknown>, <unknown>)#org.json.JSONObject.getJSONObject(java.lang.String)#org.json.JSONObject.put(java.lang.String, java.lang.String)#java.lang.String.equals(java.lang.String)#org.json.JSONObject.getString(java.lang.String)#java.lang.String.equals(<unknown>)#java.lang.String.equals(<unknown>)#<unknown>.getCurrentName()#java.lang.String.equals(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService.showProgress(int)#<unknown>.getCurrentName()#com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, java.lang.String, int)#org.json.JSONObject.put(java.lang.String, int)#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.close()#java.lang.String.replace(java.lang.String, java.lang.String)#java.lang.String.equals(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject)#com.inovex.zabbixmobile.api.ZabbixService._endTransaction()#android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null)#android.database.Cursor.moveToNext()#<unknown>.HostData()#<unknown>.set(<unknown>, long)#<unknown>.next()#android.database.sqlite.SQLiteQueryBuilder.setTables(<unknown>)#java.util.Date.getTime()#org.json.JSONObject.put(java.lang.String, long)#android.content.ContentValues.ContentValues(int)#java.lang.Long.parseLong(<unknown>)#org.apache.http.HttpResponse.getEntity()#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.getText()#java.lang.String.equals(java.lang.String)#<unknown>.set(<unknown>, <unknown>)#<unknown>.set(<unknown>, <unknown>)#<unknown>.set(<unknown>, <unknown>)#javax.net.ssl.SSLContext.init(null, javax.net.ssl.TrustManager[], null)#android.database.sqlite.SQLiteDatabase.endTransaction()#java.lang.String.equals(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, java.lang.String)#android.util.Log.d(java.lang.String, java.lang.String)#<unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>)#<unknown>.next()#<unknown>.close()#<unknown>.insert(android.database.sqlite.SQLiteDatabase)#org.json.JSONObject.put(java.lang.String, java.lang.String)#java.lang.Throwable.getMessage()#java.lang.String.equals(<unknown>)#java.lang.String.equals(<unknown>)#<unknown>.set(<unknown>, <unknown>)#com.inovex.zabbixmobile.api.ZabbixService._endTransaction()#javax.net.ssl.SSLContext.getSocketFactory()#org.json.JSONObject.JSONObject()#android.content.Context.getResources()#org.json.JSONObject.put(java.lang.String, int)#com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, null)#com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, java.lang.String, int)#org.json.JSONObject.put(java.lang.String, java.lang.String)#java.lang.String.matches(java.lang.String)#org.json.JSONArray.put(java.lang.String)#<unknown>.set(<unknown>, <unknown>)#android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null)#android.content.Context.sendBroadcast(android.content.Intent)#org.json.JSONObject.getJSONObject(java.lang.String)#<unknown>.get(<unknown>)#android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null)#java.lang.String.equals(<unknown>)#android.content.SharedPreferences.getBoolean(java.lang.String, boolean)#java.lang.Throwable.printStackTrace()#android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null)#org.json.JSONObject.put(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService._startTransaction()#android.content.Intent.putExtra(java.lang.String, int)#org.json.JSONObject.JSONObject()#<unknown>.getText()#com.inovex.zabbixmobile.api.ZabbixService._endTransaction()#org.apache.http.client.methods.HttpPost.HttpPost(java.lang.String)#android.content.SharedPreferences.getString(java.lang.String, java.lang.String)#<unknown>.GraphItemData()#com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, java.lang.String, int)#<unknown>.nextValueToken()#org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager.ThreadSafeClientConnManager(org.apache.http.params.HttpParams, org.apache.http.conn.scheme.SchemeRegistry)#<unknown>.ApplicationItemRelationData()#java.lang.Object.toString()#android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null)#org.json.JSONArray.JSONArray()#java.lang.String.equals(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService._startTransaction()#org.json.JSONObject.put(java.lang.String, org.json.JSONArray)#<unknown>.set(<unknown>, int)#org.json.JSONObject.put(java.lang.String, int)#com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, java.lang.String, int)#org.json.JSONObject.put(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService.importItems(<unknown>, int, boolean)#org.json.JSONObject.JSONObject()#java.lang.Math.min(int, int)#com.inovex.zabbixmobile.api.ZabbixService.showProgress(<unknown>)#java.lang.String.equals(java.lang.String)#android.content.Intent.Intent(<unknown>)#java.lang.String.equals(<unknown>)#org.json.JSONObject.put(java.lang.String, int)#javax.net.ssl.SSLContext.getInstance(java.lang.String)#android.content.res.Resources.getString(<unknown>)#org.json.JSONObject.JSONObject()#android.content.Intent.Intent(<unknown>)#java.lang.String.equals(<unknown>)#<unknown>.nextProperty()#javax.net.ssl.SSLSocketFactory.createSocket(java.net.Socket, java.lang.String, int, boolean)#org.json.JSONObject.put(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject)#<unknown>.get(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService.importHosts(<unknown>, null)#java.io.IOException.IOException(java.lang.String)#java.lang.String.trim()#java.lang.String.contains(java.lang.String)#org.apache.http.entity.StringEntity.StringEntity(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService._endTransaction()#com.inovex.zabbixmobile.api.ZabbixService.importTriggers(<unknown>)#.X509TrustManager()#com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject)#android.graphics.Color.parseColor(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, null)#org.json.JSONObject.getJSONArray(java.lang.String)#org.apache.http.client.params.HttpClientParams.setRedirecting(org.apache.http.params.HttpParams, boolean)#com.inovex.zabbixmobile.api.ZabbixService._startTransaction()#<unknown>.getCurrentName()#<unknown>.getJsonArrayOrObjectReader()#java.lang.String.equals(<unknown>)#java.lang.Long.parseLong(<unknown>)#android.util.Log.d(java.lang.String, java.lang.String)#org.codehaus.jackson.JsonParser.getCurrentToken()#org.codehaus.jackson.JsonParser.nextValue()#java.lang.Long.parseLong(<unknown>)#<unknown>.getText()#java.util.Date.getTime()#android.content.Intent.putExtra(java.lang.String, <unknown>)#android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null)#<unknown>.get(<unknown>)#android.database.Cursor.moveToFirst()#org.apache.http.client.methods.HttpEntityEnclosingRequestBase.setEntity(org.apache.http.entity.StringEntity)#com.inovex.zabbixmobile.api.ZabbixService._commitTransactionIfRecommended()#com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, null)#android.database.sqlite.SQLiteQueryBuilder.appendWhere(<unknown>)#org.apache.http.auth.UsernamePasswordCredentials.UsernamePasswordCredentials(java.lang.String, java.lang.String)#java.util.Date.getTime()#java.lang.String.equals(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService._endTransaction()#org.json.JSONObject.put(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService.authenticate()#java.lang.String.equals(<unknown>)#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.json.JSONObject.put(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService.NoAPIAccessException.NoAPIAccessException()#org.json.JSONArray.put(long)#com.inovex.zabbixmobile.api.ZabbixService._endTransaction()#<unknown>.getJsonArrayOrObjectReader()#android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null)#<unknown>.ScreenData()#java.util.Date.Date()#java.util.Date.Date()#<unknown>.set(<unknown>, long)#<unknown>.getCurrentName()#org.json.JSONObject.put(java.lang.String, org.json.JSONArray)#<unknown>.set(<unknown>, long)#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.apache.http.params.HttpConnectionParams.setConnectionTimeout(org.apache.http.params.HttpParams, int)#org.json.JSONArray.length()#<unknown>.set(<unknown>, java.lang.String)#<unknown>.set(<unknown>, long)#java.util.Date.getTime()#<unknown>.set(<unknown>, <unknown>)#<unknown>.set(<unknown>, <unknown>)#org.json.JSONArray.put(java.lang.String)#java.lang.String.equals(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService.HttpAuthorizationRequiredException.HttpAuthorizationRequiredException()#<unknown>.getText()#org.json.JSONObject.put(java.lang.String, org.json.JSONArray)#com.inovex.zabbixmobile.api.ZabbixService.importEvents(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader, null)#org.json.JSONObject.JSONObject()#com.inovex.zabbixmobile.api.ZabbixService.importHostGroups(<unknown>)#<unknown>.set(<unknown>, <unknown>)#org.json.JSONObject.toString()#java.lang.Integer.parseInt(<unknown>)#android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null)#org.apache.http.params.HttpProtocolParams.setContentCharset(org.apache.http.params.HttpParams, java.lang.String)#<unknown>.get(<unknown>)#java.lang.String.equals(<unknown>)#<unknown>.set(<unknown>, <unknown>)#<unknown>.nextValueToken()#<unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>)#org.json.JSONObject.put(java.lang.String, org.json.JSONArray)#org.json.JSONObject.put(java.lang.String, java.lang.Integer)#<unknown>.getText()#<unknown>.set(<unknown>, <unknown>)#org.apache.http.message.AbstractHttpMessage.addHeader(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject)#org.json.JSONObject.getJSONArray(java.lang.String)#java.security.KeyStore.load(null, null)#java.lang.String.replace(java.lang.String, java.lang.String)#java.lang.Long.parseLong(<unknown>)#org.json.JSONObject.toString()#com.inovex.zabbixmobile.api.ZabbixService.importTriggers(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader)#android.util.Log.d(java.lang.String, java.lang.String)#android.content.SharedPreferences.getString(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, java.lang.String)#<unknown>.getJsonArrayOrObjectReader()#<unknown>.TriggerData()#android.content.SharedPreferences.getString(java.lang.String, java.lang.String)#android.content.Intent.Intent(<unknown>)#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.apache.http.impl.client.AbstractHttpClient.getCredentialsProvider()#<unknown>.set(<unknown>, <unknown>)#java.io.IOException.IOException(java.lang.String)#java.lang.String.trim()#org.json.JSONObject.put(java.lang.String, org.json.JSONArray)#java.lang.String.split(java.lang.String)#java.lang.String.equals(java.lang.String)#java.lang.String.endsWith(java.lang.String)#<unknown>.set(<unknown>, int)#com.inovex.zabbixmobile.api.ZabbixService.showProgress(int)#<unknown>.ItemData()#org.json.JSONObject.put(java.lang.String, int)#<unknown>.set(<unknown>, <unknown>)#org.codehaus.jackson.JsonParser.getText()#android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null)#org.apache.http.impl.client.DefaultHttpClient.DefaultHttpClient(org.apache.http.conn.ClientConnectionManager, org.apache.http.params.HttpParams)#<unknown>.close()#java.lang.IllegalStateException.IllegalStateException(java.lang.String)#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.codehaus.jackson.JsonParser.nextToken()#android.database.Cursor.getColumnIndex(<unknown>)#org.json.JSONObject.put(java.lang.String, org.json.JSONArray)#<unknown>.nextValueToken()#com.inovex.zabbixmobile.api.ZabbixService._startTransaction()#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.set(<unknown>, java.lang.String)#java.lang.String.substring(int, int)#java.lang.Long.parseLong(<unknown>)#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.json.JSONObject.getInt(java.lang.String)#<unknown>.getJsonArrayOrObjectReader()#java.lang.String.equals(java.lang.String)#<unknown>.set(<unknown>, <unknown>)#<unknown>.set(<unknown>, <unknown>)#java.security.KeyStore.getInstance(java.lang.String)#java.lang.Integer.parseInt(<unknown>)#java.lang.String.equals(java.lang.String)#<unknown>.nextProperty()#android.content.Intent.putExtra(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, null)#<unknown>.set(<unknown>, int)#java.io.BufferedReader.BufferedReader(java.io.InputStreamReader)#com.inovex.zabbixmobile.api.ZabbixService.importEvents(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader, int)#java.security.KeyStore.getDefaultType()#java.lang.String.equals(<unknown>)#<unknown>.getText()#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.set(<unknown>, java.lang.Object)#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.insert(android.database.sqlite.SQLiteDatabase)#<unknown>.nextProperty()#com.inovex.zabbixmobile.api.ZabbixService._startTransaction()#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.close()#<unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>)#org.json.JSONObject.put(java.lang.String, long)#com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, null, int)#<unknown>.set(<unknown>, <unknown>)#java.lang.String.equals(<unknown>)#org.apache.http.conn.scheme.Scheme.Scheme(java.lang.String, org.apache.http.conn.scheme.PlainSocketFactory, int)#org.json.JSONObject.put(java.lang.String, java.lang.String)#java.lang.String.equals(<unknown>)",
    "p_body_t": ["<empty>"],
    "c_patch_t": [" \t\t\t\t\"event.acknowledge\"\n \t\t\t\t, new JSONObject()\n \t\t\t\t\t.put(\"eventids\", new JSONArray().put(eventid))\n+\t\t\t\t\t.put(\"message\", comment)\n \t\t);\n \t\t// it can be an (empty) array\n \t\ttry {"],
    "c_body_t": ["<empty>"],
    "c_email_sni": "jschamburger@inovex.de",
    "p_patch_t": [" \t\t\t\tString propName = eventReader.getCurrentName();\n \t\t\t\tif (propName.equals(\"hosts\")) {\n \t\t\t\t\t// import hosts\n-\t\t\t\t\tString hostnames = (String) importHosts(eventReader.getJsonArray(), null)[0];\n+\t\t\t\t\tString hostnames = (String) importHosts(eventReader.getJsonArrayOrObjectReader(), null)[0];\n \t\t\t\t\t// store hosts namen\n \t\t\t\t\te.set(EventData.COLUMN_HOSTS, hostnames);\n \t\t\t\t} else if (propName.equals(\"triggers\")) {\n \t\t\t\t\t// import triggers\n-\t\t\t\t\timportTriggers(eventReader.getJsonArray());\n+\t\t\t\t\timportTriggers(eventReader.getJsonArrayOrObjectReader());\n \t\t\t\t} else if (propName.equals(EventData.COLUMN_EVENTID)) {\n \t\t\t\t\te.set(EventData.COLUMN_EVENTID, Long.parseLong(eventReader.getText()));\n \t\t\t\t} else if (propName.equals(EventData.COLUMN_CLOCK)) {\n@@ -776,9 +776,9 @@ public class ZabbixService {\n \t\t\t\t\t} else if (propName.equals(GraphData.COLUMN_NAME)) {\n \t\t\t\t\t\tscr.set(GraphData.COLUMN_NAME, graphReader.getText());\n \t\t\t\t\t} else if (propName.equals(\"gitems\")) {\n-\t\t\t\t\t\tmustSetGraphid = importGraphItems(graphReader.getJsonArray());\n+\t\t\t\t\t\tmustSetGraphid = importGraphItems(graphReader.getJsonArrayOrObjectReader());\n \t\t\t\t\t} else if (propName.equals(\"items\")) {\n-\t\t\t\t\t\timportItems(graphReader.getJsonArray(), 0, true);\n+\t\t\t\t\t\timportItems(graphReader.getJsonArrayOrObjectReader(), 0, true);\n \t\t\t\t\t} else {\n \t\t\t\t\t\tgraphReader.nextProperty();\n \t\t\t\t\t}\n@@ -949,7 +949,7 @@ public class ZabbixService {\n \t\t\t\t\thostnames.add(host);\n \t\t\t\t\th.set(HostData.COLUMN_HOST, host);\n \t\t\t\t} else if (propName.equals(\"groups\")) {\n-\t\t\t\t\tlong groupid = importHostGroups(hostReader.getJsonArray());\n+\t\t\t\t\tlong groupid = importHostGroups(hostReader.getJsonArrayOrObjectReader());\n \t\t\t\t\tif (groupid != -1) {\n \t\t\t\t\t\th.set(HostData.COLUMN_GROUPID, groupid);\n \t\t\t\t\t}\n@@ -1055,7 +1055,7 @@ public class ZabbixService {\n \t\t\t\t\t// at this point itemid and hostid is unknown\n \t\t\t\t\t// because of this, all applicationrelations will be saved with itemid and hostid \"-1\".\n \t\t\t\t\t// later the IDs will be replaced with the correct\n-\t\t\t\t\timportApplications(-1, -1, itemReader.getJsonArray());\n+\t\t\t\t\timportApplications(-1, -1, itemReader.getJsonArrayOrObjectReader());\n \t\t\t\t} else {\n \t\t\t\t\titemReader.nextProperty();\n \t\t\t\t}\n@@ -1176,7 +1176,7 @@ public class ZabbixService {\n \t\t\t\t\t} else if (propName.equals(ScreenData.COLUMN_NAME)) {\n \t\t\t\t\t\tscr.set(ScreenData.COLUMN_NAME, screenReader.getText());\n \t\t\t\t\t} else if (propName.equals(\"screenitems\")) {\n-\t\t\t\t\t\timportScreenItems(screenReader.getJsonArray());\n+\t\t\t\t\t\timportScreenItems(screenReader.getJsonArrayOrObjectReader());\n \t\t\t\t\t} else {\n \t\t\t\t\t\tscreenReader.nextProperty();\n \t\t\t\t\t}\n@@ -1313,14 +1313,14 @@ public class ZabbixService {\n \t\t\t\t} else if (propName.equals(TriggerData.COLUMN_URL)) {\n \t\t\t\t\tt.set(TriggerData.COLUMN_URL, triggerReader.getText());\n \t\t\t\t} else if (propName.equals(\"hosts\")) {\n-\t\t\t\t\tObject[] hostsCache = importHosts(triggerReader.getJsonArray(), null);\n+\t\t\t\t\tObject[] hostsCache = importHosts(triggerReader.getJsonArrayOrObjectReader(), null);\n \t\t\t\t\tt.set(TriggerData.COLUMN_HOSTS, hostsCache[0]);\n \t\t\t\t\tt.set(TriggerData.COLUMN_HOSTID, hostsCache[1]);\n \t\t\t\t} else if (propName.equals(\"groups\")) {\n-\t\t\t\t\timportHostGroups(triggerReader.getJsonArray());\n+\t\t\t\t\timportHostGroups(triggerReader.getJsonArrayOrObjectReader());\n \t\t\t\t} else if (propName.equals(\"items\")) {\n \t\t\t\t\t// store the first item id\n-\t\t\t\t\tt.set(TriggerData.COLUMN_ITEMID, importItems(triggerReader.getJsonArray(), 1, true));\n+\t\t\t\t\tt.set(TriggerData.COLUMN_ITEMID, importItems(triggerReader.getJsonArrayOrObjectReader(), 1, true));\n \t\t\t\t} else {\n \t\t\t\t\ttriggerReader.nextProperty();\n \t\t\t\t}"],
    "repo_sni": "inovex/zax",
    "_version_": 1526823823630925824,
    "c_user_sni": "Johannes Schamburger",
    "c_callsites_added_cs": "org.json.JSONObject.put(java.lang.String, java.lang.String)",
    "p_parents_ss": ["976f9d4001cf9c49a39f3b93acb53607ea8c0bfd"],
    "p_user_sni": "Johannes Schamburger",
    "c_subject_t": ["When acknowledging an event, the message is now sent to the Zabbix server."],
    "c_imports_added_cs": "<empty>",
    "c_callsites_removed_cs": "<empty>"
  }, {
    "c_patch_no_context_t": ["+\t\t\t// clear triggers\n+\t\t\tzabbixLocalDB.delete(TriggerData.TABLE_NAME, null, null);\n+"],
    "p_patch_no_context_t": ["-\tprivate JsonArrayReader _queryStream(String method, JSONObject params) throws JSONException, IOException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n+\tprivate JsonArrayOrObjectReader _queryStream(String method, JSONObject params) throws JSONException, IOException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n+\t\tLog.d(\"ZabbixService\", \"_queryStream: \"+url);\n+\t\tLog.d(\"ZabbixService\", \"_queryStream: \"+json.toString());\n+\n-\t\t\t\t\t\t\tJsonArrayReader r = _queryStream(method, params);\n+\t\t\t\t\t\t\tJsonArrayOrObjectReader r = _queryStream(method, params);\n-\t\t\tif (jp.nextToken() != JsonToken.START_ARRAY) { // go inside the array\n+\t\t\tif (jp.nextToken() != JsonToken.START_ARRAY && jp.getCurrentToken() != JsonToken.START_OBJECT) { // go inside the array\n+\t\t\t\ttry {\n+\t\t\t\t\tLog.d(\"ZabbixService\", \"current token: \"+jp.getCurrentToken());\n+\t\t\t\t\tLog.d(\"ZabbixService\", \"current name: \"+jp.getCurrentName());\n+\t\t\t\t\tLog.d(\"ZabbixService\", \"get text: \"+jp.getText());\n+\t\t\t\t\tLog.d(\"ZabbixService\", \"next value: \"+jp.nextValue());\n+\t\t\t\t\tLog.d(\"ZabbixService\", \"next token: \"+jp.nextToken());\n+\t\t\t\t\tLog.d(\"ZabbixService\", \"current token: \"+jp.getCurrentToken());\n+\t\t\t\t\tLog.d(\"ZabbixService\", \"current name: \"+jp.getCurrentName());\n+\t\t\t\t\tLog.d(\"ZabbixService\", \"get text: \"+jp.getText());\n+\t\t\t\t} catch (Exception e) {}\n-\t\t\treturn new JsonArrayReader(jp);\n+\t\t\treturn new JsonArrayOrObjectReader(jp);\n+\t\t\tLog.i(\"ZabbixService\", \"Zabbix Server Version: isVersion2=\"+isVersion2);\n-\tprivate void importApplications(long hostid, long itemid, JsonArrayReader jsonArray) throws JsonParseException, NumberFormatException, IOException {\n+\tprivate void importApplications(long hostid, long itemid, JsonArrayOrObjectReader jsonArray) throws JsonParseException, NumberFormatException, IOException {\n-\t\t\tJsonArrayReader events = _queryStream(\n+\t\t\tJsonArrayOrObjectReader events = _queryStream(\n-\t\t\tJsonArrayReader events = _queryStream(\n+\t\t\tJsonArrayOrObjectReader events = _queryStream(\n-\tprivate void importEvents(JsonArrayReader events, Integer numEvents) throws JsonParseException, IOException {\n+\tprivate void importEvents(JsonArrayOrObjectReader events, Integer numEvents) throws JsonParseException, IOException {\n-\tprivate boolean importGraphItems(JsonArrayReader graphItems) throws JsonParseException, NumberFormatException, IOException {\n+\tprivate boolean importGraphItems(JsonArrayOrObjectReader graphItems) throws JsonParseException, NumberFormatException, IOException {\n-\t\t\tJsonArrayReader graphs = _queryStream(\n+\t\t\tJsonArrayOrObjectReader graphs = _queryStream(\n-\t\t\t\tJsonArrayReader historydetails = _queryStream(\n+\t\t\t\tJsonArrayOrObjectReader historydetails = _queryStream(\n-\tprivate long importHostGroups(JsonArrayReader jsonArray) throws JsonParseException, IOException {\n+\tprivate long importHostGroups(JsonArrayOrObjectReader jsonArray) throws JsonParseException, IOException {\n-\tprivate Object[] importHosts(JsonArrayReader jsonArray, Integer numHosts) throws JsonParseException, IOException {\n+\tprivate Object[] importHosts(JsonArrayOrObjectReader jsonArray, Integer numHosts) throws JsonParseException, IOException {\n-\t\t\tJsonArrayReader hosts = _queryStream(\n+\t\t\tJsonArrayOrObjectReader hosts = _queryStream(\n-\tprivate long importItems(JsonArrayReader items, int numItems, boolean checkBeforeInsert) throws JsonParseException, IOException {\n+\tprivate long importItems(JsonArrayOrObjectReader items, int numItems, boolean checkBeforeInsert) throws JsonParseException, IOException {\n-\t\t\tJsonArrayReader items = _queryStream(\n+\t\t\tJsonArrayOrObjectReader items = _queryStream(\n-\tprivate void importScreenItems(JsonArrayReader screenItems) throws JsonParseException, NumberFormatException, IOException {\n+\tprivate void importScreenItems(JsonArrayOrObjectReader screenItems) throws JsonParseException, NumberFormatException, IOException {\n-\t\t\tJsonArrayReader screens = _queryStream(\n+\t\t\tJsonArrayOrObjectReader screens = _queryStream(\n-\t\t\tJsonArrayReader trigger = _queryStream(\n+\t\t\tJsonArrayOrObjectReader trigger = _queryStream(\n-\t\t\tJsonArrayReader triggers = _queryStream(\n+\t\t\tJsonArrayOrObjectReader triggers = _queryStream(\n-\t\t\tJsonArrayReader triggers = _queryStream(\n+\t\t\tJsonArrayOrObjectReader triggers = _queryStream(\n-\tprivate void importTriggers(JsonArrayReader jsonArray) throws JsonParseException, IOException {\n+\tprivate void importTriggers(JsonArrayOrObjectReader jsonArray) throws JsonParseException, IOException {\n-\t\t\tJsonArrayReader triggers = _queryStream(\n+\t\t\tJsonArrayOrObjectReader triggers = _queryStream("],
    "c_date_tdt": "Sep 12, 2012 8:22:56 AM",
    "c_imports_t": ["android.database.sqlite.SQLiteQueryBuilder org.apache.http.conn.scheme.SchemeRegistry java.util.HashSet org.apache.http.params.BasicHttpParams android.content.Context org.apache.http.params.HttpParams org.apache.http.conn.scheme.PlainSocketFactory java.util.ArrayList com.inovex.zabbixmobile.model.ItemData com.inovex.zabbixmobile.model.HostData com.inovex.zabbixmobile.model.GraphData com.inovex.zabbixmobile.model.EventData org.apache.http.auth.UsernamePasswordCredentials org.apache.http.params.HttpConnectionParams android.content.SharedPreferences java.security.KeyManagementException org.apache.http.conn.ClientConnectionManager org.codehaus.jackson.JsonFactory org.apache.http.entity.StringEntity java.util.Set org.apache.http.params.HttpProtocolParams com.inovex.zabbixmobile.model.ApplicationItemRelationData com.inovex.zabbixmobile.model.TriggerData org.codehaus.jackson.JsonToken android.database.Cursor java.net.Socket android.content.Intent org.apache.http.protocol.HTTP org.json.JSONException java.net.UnknownHostException com.inovex.zabbixmobile.model.HistoryDetailData org.apache.http.HttpResponse java.security.KeyStore com.inovex.zabbixmobile.ZabbixContentProvider android.preference.PreferenceManager android.util.Log org.json.JSONObject java.security.NoSuchAlgorithmException org.apache.http.client.params.HttpClientParams java.io.IOException org.apache.http.conn.scheme.Scheme org.apache.http.client.methods.HttpPost javax.net.ssl.SSLContext org.apache.http.auth.AuthScope org.apache.http.conn.ssl.SSLSocketFactory java.security.KeyStoreException android.content.ContentValues java.io.InputStreamReader java.util.Date java.security.UnrecoverableKeyException android.graphics.Color org.apache.http.client.ClientProtocolException com.inovex.zabbixmobile.model.GraphItemData org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager org.json.JSONArray com.inovex.zabbixmobile.model.CacheData javax.net.ssl.SSLPeerUnverifiedException com.inovex.zabbixmobile.model.HostGroupData org.codehaus.jackson.JsonParseException java.security.cert.X509Certificate org.apache.http.HttpVersion android.database.sqlite.SQLiteDatabase java.util.List java.security.cert.CertificateException java.io.BufferedReader com.inovex.zabbixmobile.model.ApplicationData com.inovex.zabbixmobile.model.ScreenItemData javax.net.ssl.TrustManager com.inovex.zabbixmobile.model.ScreenData com.inovex.zabbixmobile.R org.codehaus.jackson.JsonParser org.apache.http.impl.client.DefaultHttpClient javax.net.ssl.X509TrustManager"],
    "c_contents_t": ["package com.inovex.zabbixmobile.api;\n\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.net.Socket;\nimport java.net.UnknownHostException;\nimport java.security.KeyManagementException;\nimport java.security.KeyStore;\nimport java.security.KeyStoreException;\nimport java.security.NoSuchAlgorithmException;\nimport java.security.UnrecoverableKeyException;\nimport java.security.cert.CertificateException;\nimport java.security.cert.X509Certificate;\nimport java.util.ArrayList;\nimport java.util.Date;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Set;\n\nimport javax.net.ssl.SSLContext;\nimport javax.net.ssl.SSLPeerUnverifiedException;\nimport javax.net.ssl.TrustManager;\nimport javax.net.ssl.X509TrustManager;\n\nimport org.apache.http.HttpResponse;\nimport org.apache.http.HttpVersion;\nimport org.apache.http.auth.AuthScope;\nimport org.apache.http.auth.UsernamePasswordCredentials;\nimport org.apache.http.client.ClientProtocolException;\nimport org.apache.http.client.methods.HttpPost;\nimport org.apache.http.client.params.HttpClientParams;\nimport org.apache.http.conn.ClientConnectionManager;\nimport org.apache.http.conn.scheme.PlainSocketFactory;\nimport org.apache.http.conn.scheme.Scheme;\nimport org.apache.http.conn.scheme.SchemeRegistry;\nimport org.apache.http.conn.ssl.SSLSocketFactory;\nimport org.apache.http.entity.StringEntity;\nimport org.apache.http.impl.client.DefaultHttpClient;\nimport org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager;\nimport org.apache.http.params.BasicHttpParams;\nimport org.apache.http.params.HttpConnectionParams;\nimport org.apache.http.params.HttpParams;\nimport org.apache.http.params.HttpProtocolParams;\nimport org.apache.http.protocol.HTTP;\nimport org.codehaus.jackson.JsonFactory;\nimport org.codehaus.jackson.JsonParseException;\nimport org.codehaus.jackson.JsonParser;\nimport org.codehaus.jackson.JsonToken;\nimport org.json.JSONArray;\nimport org.json.JSONException;\nimport org.json.JSONObject;\n\nimport android.content.ContentValues;\nimport android.content.Context;\nimport android.content.Intent;\nimport android.content.SharedPreferences;\nimport android.database.Cursor;\nimport android.database.sqlite.SQLiteDatabase;\nimport android.database.sqlite.SQLiteQueryBuilder;\nimport android.graphics.Color;\nimport android.preference.PreferenceManager;\nimport android.util.Log;\n\nimport com.inovex.zabbixmobile.R;\nimport com.inovex.zabbixmobile.ZabbixContentProvider;\nimport com.inovex.zabbixmobile.model.ApplicationData;\nimport com.inovex.zabbixmobile.model.ApplicationItemRelationData;\nimport com.inovex.zabbixmobile.model.CacheData;\nimport com.inovex.zabbixmobile.model.EventData;\nimport com.inovex.zabbixmobile.model.GraphData;\nimport com.inovex.zabbixmobile.model.GraphItemData;\nimport com.inovex.zabbixmobile.model.HistoryDetailData;\nimport com.inovex.zabbixmobile.model.HostData;\nimport com.inovex.zabbixmobile.model.HostGroupData;\nimport com.inovex.zabbixmobile.model.ItemData;\nimport com.inovex.zabbixmobile.model.ScreenData;\nimport com.inovex.zabbixmobile.model.ScreenItemData;\nimport com.inovex.zabbixmobile.model.TriggerData;\n\n/**\n * interface to connect to the zabbix server\n */\npublic class ZabbixService {\n\tclass CustomSSLSocketFactory extends SSLSocketFactory {\n\t\tSSLContext sslContext = SSLContext.getInstance(\"TLS\");\n\n\t\tpublic CustomSSLSocketFactory(KeyStore truststore) throws NoSuchAlgorithmException, KeyManagementException, KeyStoreException, UnrecoverableKeyException {\n\t\t\tsuper(truststore);\n\t\t\tTrustManager tm = new X509TrustManager() {\n\t\t\t\t@Override\n\t\t\t\tpublic void checkClientTrusted(X509Certificate[] chain,\n\t\t\t\t\t\tString authType) throws CertificateException {\n\t\t\t\t}\n\t\t\t\t@Override\n\t\t\t\tpublic void checkServerTrusted(X509Certificate[] chain,\n\t\t\t\t\t\tString authType) throws CertificateException {\n\t\t\t\t}\n\t\t\t\t@Override\n\t\t\t\tpublic X509Certificate[] getAcceptedIssuers() {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t};\n\t\t\tsslContext.init(null, new TrustManager[] { tm }, null);\n\t\t}\n\n\t\t@Override\n\t\tpublic Socket createSocket() throws IOException {\n\t\t\treturn sslContext.getSocketFactory().createSocket();\n\t\t}\n\n\t\t@Override\n\t\tpublic Socket createSocket(Socket socket, String host, int port, boolean autoClose) throws IOException, UnknownHostException {\n\t\t\treturn sslContext.getSocketFactory().createSocket(socket, host, port, autoClose);\n\t\t}\n\t}\n\n\t/**\n\t * http auth is needed\n\t */\n\tpublic class HttpAuthorizationRequiredException extends Exception {\n\t\tprivate static final long serialVersionUID = 6632422081858878147L;\n\t}\n\n\t/**\n\t * zabbix error: no api access\n\t */\n\tpublic class NoAPIAccessException extends Exception {\n\t\tprivate static final long serialVersionUID = 6381395987443456382L;\n\t}\n\n\t/**\n\t * probably too old zabbix <= 1.8.2\n\t */\n\tpublic class PreconditionFailedException extends Exception {\n\t\tprivate static final long serialVersionUID = -2529885710860745023L;\n\t}\n\n\t/**\n\t * global constants\n\t */\n\tpublic class ZabbixConfig {\n\t\tpublic static final int APPLICATION_GET_LIMIT = 1000;\n\t\tpublic static final int EVENTS_GET_LIMIT = 60;\n\t\tpublic static final int HISTORY_GET_TIME_FROM_SHIFT = 8*60*60; // -8h\n\t\tpublic static final int HISTORY_GET_LIMIT = 8000;\n\t\tpublic static final int HOSTGROUP_GET_LIMIT = 200;\n\t\tpublic static final int HOST_GET_LIMIT = 300;\n\t\tpublic static final int ITEM_GET_LIMIT = 200;\n\t\tpublic static final int TRIGGER_GET_LIMIT = 100;\n\t\tpublic static final int EVENT_GET_TIME_FROM_SHIFT = 7*24*60*60; // -7 days\n\t\tpublic static final int CACHE_LIFETIME_APPLICATIONS = 2*24*60*60; // 2 days\n\t\tpublic static final int CACHE_LIFETIME_EVENTS = 120;\n\t\tpublic static final int CACHE_LIFETIME_HISTORY_DETAILS = 4*60;\n\t\tpublic static final int CACHE_LIFETIME_HOST_GROUPS = 7*24*60*60;\n\t\tpublic static final int CACHE_LIFETIME_HOSTS = 2*24*60*60;\n\t\tpublic static final int CACHE_LIFETIME_SCREENS = 2*24*60*60;\n\t\tpublic static final int CACHE_LIFETIME_ITEMS = 4*60;\n\t\tpublic static final int CACHE_LIFETIME_TRIGGERS = 2*60;\n\t\tpublic static final long STATUS_SHOW_TRIGGER_TIME = 14*24*60*60;\n\t\tpublic static final int HTTP_CONNECTION_TIMEOUT = 30000;\n\t}\n\n\tprivate final DefaultHttpClient httpClient;\n\tprivate final SQLiteDatabase zabbixLocalDB;\n\tprivate String url;\n\tprivate String token;\n\tprivate final Context context;\n\tprivate int _transactionStack;\n\tprivate JsonParser lastStream;\n\tprivate int transformProgressStart;\n\tprivate int transformProgressEnd;\n\tprivate boolean _notAuthorizedRetry;\n\tprivate boolean isVersion2 = true;\n\n\t/**\n\t * init\n\t * @param context android context\n\t * @param zabbixLocalDB sqlite\n\t */\n\tpublic ZabbixService(Context context, SQLiteDatabase zabbixLocalDB) {\n\t\tClientConnectionManager ccm = null;\n\t\tHttpParams params = null;\n\n\t\ttry {\n\t\t\tSharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(context);\n\t\t\tif (prefs.getBoolean(\"zabbix_trust_all_ssl_ca\", false)) {\n\t\t\t\tKeyStore trustStore = KeyStore.getInstance(KeyStore.getDefaultType());\n\t\t\t\ttrustStore.load(null, null);\n\n\t\t\t\tSSLSocketFactory sf = new CustomSSLSocketFactory(trustStore);\n\t\t\t\tsf.setHostnameVerifier(SSLSocketFactory.ALLOW_ALL_HOSTNAME_VERIFIER);\n\n\t\t\t\tparams = new BasicHttpParams();\n\t\t\t\tHttpProtocolParams.setVersion(params, HttpVersion.HTTP_1_1);\n\t\t\t\tHttpProtocolParams.setContentCharset(params, HTTP.UTF_8);\n\n\t\t\t\tSchemeRegistry registry = new SchemeRegistry();\n\t\t\t\tregistry.register(new Scheme(\"http\", PlainSocketFactory.getSocketFactory(), 80));\n\t\t\t\tregistry.register(new Scheme(\"https\", sf, 443));\n\n\t\t\t\tccm = new ThreadSafeClientConnManager(params, registry);\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\t// ignore for unit test\n\t\t}\n\n\t\tif (ccm == null || params == null) {\n\t\t\thttpClient = new DefaultHttpClient();\n\t\t} else {\n\t\t\thttpClient = new DefaultHttpClient(ccm, params);\n\t\t}\n\n\t\t// if applicable http auth\n\t\ttry {\n\t\t\tSharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(context);\n\t\t\tif (prefs.getBoolean(\"http_auth_enabled\", false)) {\n\t\t\t\tString user = prefs.getString(\"http_auth_username\", \"\");\n\t\t\t\tString pwd = prefs.getString(\"http_auth_password\", \"\");\n\t\t\t\thttpClient.getCredentialsProvider().setCredentials(AuthScope.ANY, new UsernamePasswordCredentials(user, pwd));\n\t\t\t}\n\t\t} catch (java.lang.UnsupportedOperationException e1) {\n\t\t\t// for unit test\n\t\t}\n\n\t\tparams = httpClient.getParams();\n\t\tHttpClientParams.setRedirecting(params, true); // redirecting\n\t\tHttpConnectionParams.setConnectionTimeout(params, ZabbixConfig.HTTP_CONNECTION_TIMEOUT);\n\t\tthis.context = context;\n\t\tthis.zabbixLocalDB = zabbixLocalDB;\n\t}\n\n\t/**\n\t * counts the sql inserts/updates and do a transaction commit to save the memory\n\t */\n\tprivate void _commitTransactionIfRecommended() {\n\t\tif (_transactionStack++ > 50) {\n\t\t\t_endTransaction();\n\t\t\t_startTransaction();\n\t\t}\n\t}\n\n\t/**\n\t * commit sql transaction\n\t */\n\tpublic void _endTransaction() {\n\t\tif (zabbixLocalDB.inTransaction()) {\n\t\t\tzabbixLocalDB.setTransactionSuccessful();\n\t\t\tzabbixLocalDB.endTransaction();\n\t\t}\n\t}\n\n\t/**\n\t * zabbix api call. data will be parsed as json object on-the-fly.\n\t * Caution: use this only for api calls with a small return data.\n\t * @param method\n\t * @param params\n\t * @return\n\t * @throws ClientProtocolException\n\t * @throws IOException\n\t * @throws JSONException\n\t * @throws HttpAuthorizationRequiredException\n\t * @throws NoAPIAccessException\n\t */\n\tprivate JSONObject _queryBuffer(String method, JSONObject params) throws ClientProtocolException, IOException, JSONException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\tHttpPost post = new HttpPost(url);\n\t\tpost.addHeader(\"Content-Type\", \"application/json; charset=utf-8\");\n\n\t\tString json =\n\t\t\t\"{\" +\n\t\t\t\"\t\\\"jsonrpc\\\" : \\\"2.0\\\",\" +\n\t\t\t\"\t\\\"method\\\" : \\\"\"+method+\"\\\",\" +\n\t\t\t\"\t\\\"params\\\" : \"+params.toString()+\",\" +\n\t\t\t\"\t\\\"auth\\\" : \"+(token==null?\"null\":'\"'+token+'\"')+\",\" +\n\t\t\t\"\t\\\"id\\\" : 0\" +\n\t\t\t\"}\";\n\n\t\tpost.setEntity(new StringEntity(json, \"UTF-8\"));\n\t\ttry {\n\t\t\tHttpResponse resp = httpClient.execute(post);\n\t\t\tif (resp.getStatusLine().getStatusCode() == 401) {\n\t\t\t\t// http auth failed\n\t\t\t\tthrow new HttpAuthorizationRequiredException();\n\t\t\t} else if (resp.getStatusLine().getStatusCode() == 412) {\n\t\t\t\t\t// Precondition failed / Looks like Zabbix 1.8.2\n\t\t\t\tthrow new PreconditionFailedException();\n\t\t\t} else if (resp.getStatusLine().getStatusCode() == 404) {\n\t\t\t\t// file not found\n\t\t\t\tthrow new IOException(resp.getStatusLine().getStatusCode()+\" \"+resp.getStatusLine().getReasonPhrase());\n\t\t\t} else {\n\t\t\t\tLog.d(\"ZabbixService\", resp.getStatusLine().getStatusCode()+\" \"+resp.getStatusLine().getReasonPhrase());\n\t\t\t}\n\t\t\tStringBuilder total = new StringBuilder();\n\t\t\tBufferedReader rd = new BufferedReader(new InputStreamReader(resp.getEntity().getContent()));\n\t\t\tint chr;\n\t\t\twhile ((chr = rd.read()) != -1) {\n\t\t\t\ttotal.append((char) chr);\n\t\t\t}\n\t\t\tJSONObject result = new JSONObject(total.toString());\n\t\t\ttry {\n\t\t\t\tif (result.getJSONObject(\"error\") != null) {\n\t\t\t\t\tif (result.getJSONObject(\"error\").getString(\"data\").equals(\"No API access\")) {\n\t\t\t\t\t\tthrow new NoAPIAccessException();\n\t\t\t\t\t} else throw new RuntimeException(result.getJSONObject(\"error\").toString());\n\t\t\t\t}\n\t\t\t\tif (result.getString(\"data\").equals(\"Not authorized\")) {\n\t\t\t\t\t// first do a new auth and then try the same api call again\n\t\t\t\t\tif (authenticate() && !_notAuthorizedRetry) {\n\t\t\t\t\t\t_notAuthorizedRetry = true;\n\t\t\t\t\t\tJSONObject r = _queryBuffer(method, params);\n\t\t\t\t\t\t_notAuthorizedRetry = false;\n\t\t\t\t\t\treturn r;\n\t\t\t\t\t} throw new IllegalStateException(result.toString());\n\t\t\t\t}\n\t\t\t} catch (JSONException e) {\n\t\t\t\t// ignore\n\t\t\t}\n\t\t\treturn result;\n\t\t} catch (SSLPeerUnverifiedException e) {\n\t\t\t// SSL not trusted\n\t\t\tIntent intent = new Intent(ZabbixContentProvider.CONTENT_PROVIDER_INTENT_ACTION);\n\t\t\tintent.putExtra(\"flag\", ZabbixContentProvider.INTENT_FLAG_SSL_NOT_TRUSTED);\n\t\t\tcontext.sendBroadcast(intent);\n\t\t\tthrow e;\n\t\t} catch (IOException e) {\n\t\t\t// internet problem\n\t\t\t// send intent to GUI\n\t\t\tIntent intent = new Intent(ZabbixContentProvider.CONTENT_PROVIDER_INTENT_ACTION);\n\t\t\tintent.putExtra(\"flag\", ZabbixContentProvider.INTENT_FLAG_CONNECTION_FAILED);\n\t\t\tintent.putExtra(\"value\", e.getMessage());\n\t\t\tcontext.sendBroadcast(intent);\n\t\t\tthrow e;\n\t\t}\n\t}\n\n\t/**\n\t * zabbix api call as stream.\n\t * @param method\n\t * @param params\n\t * @return stream im json array wrapper\n\t * @throws JSONException\n\t * @throws IOException\n\t * @throws HttpAuthorizationRequiredException\n\t * @throws NoAPIAccessException\n\t */\n\tprivate JsonArrayOrObjectReader _queryStream(String method, JSONObject params) throws JSONException, IOException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\t// http request\n\t\tHttpPost post = new HttpPost(url);\n\t\tpost.addHeader(\"Content-Type\", \"application/json; charset=utf-8\");\n\n\t\tJSONObject json = new JSONObject()\n\t\t\t.put(\"jsonrpc\", \"2.0\")\n\t\t\t.put(\"method\", method)\n\t\t\t.put(\"params\", params)\n\t\t\t.put(\"auth\", token)\n\t\t\t.put(\"id\", 0);\n\n\t\tLog.d(\"ZabbixService\", \"_queryStream: \"+url);\n\t\tLog.d(\"ZabbixService\", \"_queryStream: \"+json.toString());\n\n\t\tpost.setEntity(new StringEntity(json.toString(), \"UTF-8\"));\n\t\ttry {\n\t\t\tHttpResponse resp = httpClient.execute(post);\n\t\t\tif (resp.getStatusLine().getStatusCode() == 401) {\n\t\t\t\t// http auth failed\n\t\t\t\tthrow new HttpAuthorizationRequiredException();\n\t\t\t}\n\n\t\t\tJsonFactory jsonFac = new JsonFactory();\n\t\t\tJsonParser jp = jsonFac.createJsonParser(resp.getEntity().getContent());\n\t\t\t// store the last stream to close it if an exception will be thrown\n\t\t\tlastStream = jp;\n\t\t\tif (jp.nextToken() != JsonToken.START_OBJECT) {\n\t\t\t\tthrow new IOException(\"Expected data to start with an Object\");\n\t\t\t}\n\t\t\tdo {\n\t\t\t\tjp.nextToken();\n\t\t\t\tif (jp.getCurrentName().equals(\"error\")) {\n\t\t\t\t\tjp.nextToken();\n\t\t\t\t\tString errortxt = \"\";\n\t\t\t\t\twhile (jp.nextToken() != JsonToken.END_OBJECT) {\n\t\t\t\t\t\terrortxt += jp.getText();\n\t\t\t\t\t}\n\t\t\t\t\tif (errortxt.contains(\"No API access\")) {\n\t\t\t\t\t\tthrow new NoAPIAccessException();\n\t\t\t\t\t} else if (errortxt.contains(\"Not authorized\")) {\n\t\t\t\t\t\t// first do a new auth and then try the same api call again\n\t\t\t\t\t\tif (authenticate() && !_notAuthorizedRetry) {\n\t\t\t\t\t\t\t_notAuthorizedRetry = true;\n\t\t\t\t\t\t\tJsonArrayOrObjectReader r = _queryStream(method, params);\n\t\t\t\t\t\t\t_notAuthorizedRetry = false;\n\t\t\t\t\t\t\treturn r;\n\t\t\t\t\t\t} else throw new IllegalStateException(errortxt);\n\t\t\t\t\t} else throw new IllegalStateException(\"JSON API Error: \"+errortxt);\n\t\t\t\t}\n\t\t\t} while (!jp.getCurrentName().equals(\"result\"));\n\n\t\t\t// result array found\n\t\t\tif (jp.nextToken() != JsonToken.START_ARRAY && jp.getCurrentToken() != JsonToken.START_OBJECT) { // go inside the array\n\t\t\t\ttry {\n\t\t\t\t\tLog.d(\"ZabbixService\", \"current token: \"+jp.getCurrentToken());\n\t\t\t\t\tLog.d(\"ZabbixService\", \"current name: \"+jp.getCurrentName());\n\t\t\t\t\tLog.d(\"ZabbixService\", \"get text: \"+jp.getText());\n\t\t\t\t\tLog.d(\"ZabbixService\", \"next value: \"+jp.nextValue());\n\t\t\t\t\tLog.d(\"ZabbixService\", \"next token: \"+jp.nextToken());\n\t\t\t\t\tLog.d(\"ZabbixService\", \"current token: \"+jp.getCurrentToken());\n\t\t\t\t\tLog.d(\"ZabbixService\", \"current name: \"+jp.getCurrentName());\n\t\t\t\t\tLog.d(\"ZabbixService\", \"get text: \"+jp.getText());\n\t\t\t\t} catch (Exception e) {}\n\t\t\t\tthrow new IOException(\"Expected data to start with an Array\");\n\t\t\t}\n\t\t\treturn new JsonArrayOrObjectReader(jp);\n\t\t} catch (SSLPeerUnverifiedException e) {\n\t\t\tthrow e;\n\t\t} catch (IOException e) {\n\t\t\t// internet problem\n\t\t\t// send intent to GUI\n\t\t\tIntent intent = new Intent(ZabbixContentProvider.CONTENT_PROVIDER_INTENT_ACTION);\n\t\t\tintent.putExtra(\"flag\", ZabbixContentProvider.INTENT_FLAG_CONNECTION_FAILED);\n\t\t\tcontext.sendBroadcast(intent);\n\t\t\tthrow e;\n\t\t}\n\t}\n\n\t/**\n\t * begin sql transaction\n\t */\n\tprivate void _startTransaction() {\n\t\tzabbixLocalDB.beginTransaction();\n\t\t_transactionStack = 0;\n\t}\n\n\t/**\n\t * acknowledge zabbix event. Sets ack-flag with comment.\n\t * Caution: This is supported only for Zabbix version >= 1.8.4\n\t * @param eventid\n\t * @param comment\n\t * @return true, success.\n\t * @throws ClientProtocolException\n\t * @throws IOException\n\t * @throws JSONException\n\t * @throws HttpAuthorizationRequiredException\n\t * @throws NoAPIAccessException\n\t */\n\tpublic boolean acknowledgeEvent(String eventid, String comment) throws ClientProtocolException, IOException, JSONException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\t// for GUI unit test, just return true\n\t\tif (comment != null && comment.equals(\"__UNIT_TEST__RETURN_TRUE__\")) return true;\n\n\t\tJSONObject result = _queryBuffer(\n\t\t\t\t\"event.acknowledge\"\n\t\t\t\t, new JSONObject()\n\t\t\t\t\t.put(\"eventids\", new JSONArray().put(eventid))\n\t\t);\n\t\t// it can be an (empty) array\n\t\ttry {\n\t\t\treturn result.getJSONObject(\"result\").getJSONArray(\"eventids\").length() == 1;\n\t\t} catch (JSONException e) {\n\t\t\t// or a json object\n\t\t\treturn result.getJSONObject(\"result\").getJSONObject(\"eventids\").length() == 1;\n\t\t}\n\t}\n\n\t/**\n\t * zabbix auth. user and pwd from app preferences\n\t * @return true success\n\t * @throws ClientProtocolException\n\t * @throws IOException\n\t * @throws JSONException\n\t * @throws HttpAuthorizationRequiredException\n\t * @throws NoAPIAccessException\n\t */\n\tpublic boolean authenticate() throws ClientProtocolException, IOException, JSONException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\tSharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(context);\n\t\tString url = prefs.getString(\"zabbix_url\", \"\").trim();\n\t\tString user = prefs.getString(\"zabbix_username\", \"\").trim();\n\t\tString password = prefs.getString(\"zabbix_password\", \"\");\n\n\t\tthis.url = url+(url.endsWith(\"/\")?\"\":'/')+\"api_jsonrpc.php\";\n\t\tLog.d(\"ZabbixContentProvider\", url+\"//\"+user);\n\n\t\ttry {\n\t\t\tJSONObject result = _queryBuffer(\n\t\t\t\t\t\"user.authenticate\"\n\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t\t.put(\"user\", user)\n\t\t\t\t\t\t.put(\"password\", password)\n\t\t\t);\n\t\t\ttoken = result.getString(\"result\");\n\t\t} catch (JSONException e) {\n\t\t\t// there's no result\n\t\t\te.printStackTrace();\n\t\t} catch (RuntimeException e) {\n\t\t\t// wrong password. token remains null\n\t\t\te.printStackTrace();\n\t\t}\n\t\tif (token != null) {\n\t\t\t// get API version\n\t\t\tJSONObject result = _queryBuffer(\n\t\t\t\t\t\"apiinfo.version\"\n\t\t\t\t\t, new JSONObject()\n\t\t\t);\n\t\t\tisVersion2 = result.getString(\"result\").equals(\"1.4\");\n\t\t\tLog.i(\"ZabbixService\", \"Zabbix Server Version: isVersion2=\"+isVersion2);\n\t\t}\n\t\treturn token != null;\n\t}\n\n\t/**\n\t * close the last http stream\n\t */\n\tpublic void closeLastStream() {\n\t\tif (lastStream != null && !lastStream.isClosed()) {\n\t\t\ttry {\n\t\t\t\tlastStream.close();\n\t\t\t} catch (IOException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate void importApplications(long hostid, long itemid, JsonArrayOrObjectReader jsonArray) throws JsonParseException, NumberFormatException, IOException {\n\t\tint num = 0;\n\t\tJsonObjectReader application;\n\t\twhile ((application = jsonArray.next()) != null) {\n\t\t\tApplicationData app = new ApplicationData();\n\t\t\twhile (application.nextValueToken()) {\n\t\t\t\tString propName = application.getCurrentName();\n\t\t\t\tif (propName.equals(ApplicationData.COLUMN_APPLICATIONID)) {\n\t\t\t\t\tapp.set(ApplicationData.COLUMN_APPLICATIONID, Long.parseLong(application.getText()));\n\t\t\t\t} else if (propName.equals(ApplicationData.COLUMN_NAME)) {\n\t\t\t\t\tapp.set(ApplicationData.COLUMN_NAME, application.getText());\n\t\t\t\t} else if (propName.equals(ApplicationData.COLUMN_HOSTID)) {\n\t\t\t\t\tapp.set(ApplicationData.COLUMN_HOSTID, Long.parseLong(application.getText()));\n\t\t\t\t} else {\n\t\t\t\t\tapplication.nextProperty();\n\t\t\t\t}\n\t\t\t}\n\t\t\t// create applications that does not exist\n\t\t\tapp.insert(zabbixLocalDB, ApplicationData.COLUMN_APPLICATIONID);\n\t\t\t_commitTransactionIfRecommended();\n\n\t\t\t// create ApplicationItemRelation\n\t\t\tlong appid = (Long) app.get(ApplicationData.COLUMN_APPLICATIONID);\n\t\t\tApplicationItemRelationData rel = new ApplicationItemRelationData();\n\t\t\trel.set(ApplicationItemRelationData.COLUMN_APPLICATIONID, appid);\n\t\t\trel.set(ApplicationItemRelationData.COLUMN_ITEMID, itemid);\n\t\t\trel.set(ApplicationItemRelationData.COLUMN_HOSTID, hostid);\n\t\t\trel.insert(zabbixLocalDB);\n\t\t\t_commitTransactionIfRecommended();\n\n\t\t\tnum++;\n\t\t}\n\t\tif (num == 0) {\n\t\t\t// if there's no application, the ID #0 must be added (for other)\n\t\t\tApplicationItemRelationData rel = new ApplicationItemRelationData();\n\t\t\trel.set(ApplicationItemRelationData.COLUMN_APPLICATIONID, 0);\n\t\t\trel.set(ApplicationItemRelationData.COLUMN_ITEMID, itemid);\n\t\t\trel.set(ApplicationItemRelationData.COLUMN_HOSTID, hostid);\n\t\t\trel.insert(zabbixLocalDB);\n\n\t\t\t// if #0 \"other\" does not exist yet, it has to be created\n\t\t\tApplicationData app = new ApplicationData();\n\t\t\tapp.set(ApplicationData.COLUMN_APPLICATIONID, 0);\n\t\t\tapp.set(ApplicationData.COLUMN_NAME, \"- \"+context.getResources().getString(R.string.other)+\" -\");\n\t\t\tapp.insert(zabbixLocalDB, ApplicationData.COLUMN_APPLICATIONID);\n\t\t}\n\t}\n\n\t/**\n\t * import the newest event of a trigger\n\t * @param triggerid\n\t * @throws JSONException\n\t * @throws IOException\n\t * @throws HttpAuthorizationRequiredException\n\t * @throws NoAPIAccessException\n\t */\n\tpublic void importEventByTriggerId(String triggerid) throws JSONException, IOException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\tif (!isCached(EventData.TABLE_NAME, \"triggerid=\"+triggerid)) {\n\t\t\t_startTransaction();\n\t\t\tzabbixLocalDB.delete(EventData.TABLE_NAME, EventData.COLUMN_OBJECTID+\"=\"+triggerid, null);\n\n\t\t\tJSONObject params = new JSONObject()\n\t\t\t\t.put(\"output\", \"extend\")\n\t\t\t\t.put(isVersion2?\"selectHosts\":\"select_hosts\", \"extend\")\n\t\t\t\t.put(\"triggerids\", new JSONArray().put(triggerid))\n\t\t\t\t.put(\"limit\", 1)\n\t\t\t\t.put(\"source\", 0);\n\t\t\tif (!isVersion2) {\n\t\t\t\tparams.put(\"sortfield\", \"clock\")\n\t\t\t\t\t.put(\"sortorder\", \"DESC\");\n\t\t\t}\n\n\t\t\tJsonArrayOrObjectReader events = _queryStream(\n\t\t\t\t\t\"event.get\"\n\t\t\t\t\t, params\n\t\t\t);\n\t\t\timportEvents(events, null);\n\t\t\tevents.close();\n\n\t\t\tsetCached(EventData.TABLE_NAME, \"triggerid=\"+triggerid, ZabbixConfig.CACHE_LIFETIME_EVENTS);\n\t\t\t_endTransaction();\n\t\t}\n\t}\n\n\t/**\n\t * import the newest events\n\t * @throws ClientProtocolException\n\t * @throws IOException\n\t * @throws JSONException\n\t * @throws HttpAuthorizationRequiredException\n\t * @throws NoAPIAccessException\n\t */\n\tpublic void importEvents() throws ClientProtocolException, IOException, JSONException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\tif (!isCached(EventData.TABLE_NAME, null)) {\n\t\t\t_startTransaction();\n\t\t\tzabbixLocalDB.delete(EventData.TABLE_NAME, null, null);\n\t\t\tzabbixLocalDB.delete(TriggerData.TABLE_NAME, null, null);\n\t\t\tzabbixLocalDB.delete(CacheData.TABLE_NAME, CacheData.COLUMN_KIND+\"='\"+EventData.TABLE_NAME+\"'\", null);\n\t\t\tzabbixLocalDB.delete(CacheData.TABLE_NAME, CacheData.COLUMN_KIND+\"='\"+TriggerData.TABLE_NAME+\"'\", null);\n\n\t\t\tint numEvents = ZabbixConfig.EVENTS_GET_LIMIT;\n\n\t\t\tJSONObject params = new JSONObject()\n\t\t\t\t.put(\"output\", \"extend\")\n\t\t\t\t.put(\"limit\", ZabbixConfig.EVENTS_GET_LIMIT)\n\t\t\t\t.put(isVersion2?\"selectHosts\":\"select_hosts\", \"extend\")\n\t\t\t\t.put(isVersion2?\"selectTriggers\":\"select_triggers\", \"extend\")\n\t\t\t\t.put(\"source\", 0)\n\t\t\t\t.put(\"time_from\", (new Date().getTime()/1000) - ZabbixConfig.EVENT_GET_TIME_FROM_SHIFT);\n\t\t\tif (!isVersion2) {\n\t\t\t\t// in Zabbix version <2.0, this is not default\n\t\t\t\tparams.put(\"sortfield\", \"clock\")\n\t\t\t\t\t.put(\"sortorder\", \"DESC\");\n\t\t\t}\n\t\t\tJsonArrayOrObjectReader events = _queryStream(\n\t\t\t\t\t\"event.get\"\n\t\t\t\t\t, params\n\t\t\t);\n\t\t\timportEvents(events, numEvents);\n\t\t\tevents.close();\n\n\t\t\tsetCached(EventData.TABLE_NAME, null, ZabbixConfig.CACHE_LIFETIME_EVENTS);\n\t\t\t_endTransaction();\n\t\t}\n\t}\n\n\t/**\n\t * @param events stream\n\t * @param numEvents if null, no progressbar-update AND only isert, if it does not exist. If !null, progressbar-update AND always insert without checking\n\t * @throws JsonParseException\n\t * @throws IOException\n\t */\n\tprivate void importEvents(JsonArrayOrObjectReader events, Integer numEvents) throws JsonParseException, IOException {\n\t\tint i=0;\n\t\tJsonObjectReader eventReader;\n\t\twhile ((eventReader = events.next()) != null) {\n\t\t\tEventData e = new EventData();\n\t\t\twhile (eventReader.nextValueToken()) {\n\t\t\t\tString propName = eventReader.getCurrentName();\n\t\t\t\tif (propName.equals(\"hosts\")) {\n\t\t\t\t\t// import hosts\n\t\t\t\t\tString hostnames = (String) importHosts(eventReader.getJsonArray(), null)[0];\n\t\t\t\t\t// store hosts namen\n\t\t\t\t\te.set(EventData.COLUMN_HOSTS, hostnames);\n\t\t\t\t} else if (propName.equals(\"triggers\")) {\n\t\t\t\t\t// import triggers\n\t\t\t\t\timportTriggers(eventReader.getJsonArray());\n\t\t\t\t} else if (propName.equals(EventData.COLUMN_EVENTID)) {\n\t\t\t\t\te.set(EventData.COLUMN_EVENTID, Long.parseLong(eventReader.getText()));\n\t\t\t\t} else if (propName.equals(EventData.COLUMN_CLOCK)) {\n\t\t\t\t\te.set(EventData.COLUMN_CLOCK, Integer.parseInt(eventReader.getText()));\n\t\t\t\t} else if (propName.equals(EventData.COLUMN_OBJECTID)) {\n\t\t\t\t\te.set(EventData.COLUMN_OBJECTID, Long.parseLong(eventReader.getText()));\n\t\t\t\t} else if (propName.equals(EventData.COLUMN_ACK)) {\n\t\t\t\t\te.set(EventData.COLUMN_ACK, Integer.parseInt(eventReader.getText()) == 1);\n\t\t\t\t} else if (propName.equals(EventData.COLUMN_VALUE)) {\n\t\t\t\t\te.set(EventData.COLUMN_VALUE, Integer.parseInt(eventReader.getText()));\n\t\t\t\t} else {\n\t\t\t\t\teventReader.nextProperty();\n\t\t\t\t}\n\t\t\t}\n\t\t\t// event is parsed and can be inserted into the db\n\t\t\tif (numEvents == null) {\n\t\t\t\te.insert(zabbixLocalDB, EventData.COLUMN_EVENTID);\n\t\t\t} else {\n\t\t\t\te.insert(zabbixLocalDB);\n\t\t\t\tif (++i % 10 == 0) {\n\t\t\t\t\tshowProgress(i*100/numEvents);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t_commitTransactionIfRecommended();\n\t\t}\n\t}\n\n\t/**\n\t * import graph items\n\t *\n\t * @param graphItems\n\t * @return true, if graphid column has to be updated from -1 to the correct graphid later.\n\t * @throws JsonParseException\n\t * @throws NumberFormatException\n\t * @throws IOException\n\t */\n\tprivate boolean importGraphItems(JsonArrayOrObjectReader graphItems) throws JsonParseException, NumberFormatException, IOException {\n\t\tboolean mustSetGraphid = false;\n\t\tJsonObjectReader graphItemReader;\n\t\twhile ((graphItemReader = graphItems.next()) != null) {\n\t\t\tGraphItemData gi = new GraphItemData();\n\t\t\twhile (graphItemReader.nextValueToken()) {\n\t\t\t\tString propName = graphItemReader.getCurrentName();\n\t\t\t\tif (propName.equals(\"gitemid\")) {\n\t\t\t\t\tgi.set(GraphItemData.COLUMN_GRAPHITEMID, Long.parseLong(graphItemReader.getText()));\n\t\t\t\t} else if (propName.equals(GraphItemData.COLUMN_GRAPHID)) {\n\t\t\t\t\tgi.set(GraphItemData.COLUMN_GRAPHID, Long.parseLong(graphItemReader.getText()));\n\t\t\t\t} else if (propName.equals(GraphItemData.COLUMN_ITEMID)) {\n\t\t\t\t\tgi.set(GraphItemData.COLUMN_ITEMID, Long.parseLong(graphItemReader.getText()));\n\t\t\t\t} else if (propName.equals(GraphItemData.COLUMN_COLOR)) {\n\t\t\t\t\t// hex string => color int\n\t\t\t\t\tgi.set(GraphItemData.COLUMN_COLOR, Color.parseColor(\"#\"+graphItemReader.getText()));\n\t\t\t\t} else {\n\t\t\t\t\tgraphItemReader.nextProperty();\n\t\t\t\t}\n\t\t\t}\n\t\t\t// if graphid-column was not set, this must be done later. temporary graphid=-1\n\t\t\tif (gi.get(GraphItemData.COLUMN_GRAPHID) == null) {\n\t\t\t\tgi.set(GraphItemData.COLUMN_GRAPHID, -1);\n\t\t\t\tmustSetGraphid = true;\n\t\t\t}\n\t\t\tgi.insert(zabbixLocalDB);\n\t\t}\n\t\treturn mustSetGraphid;\n\t}\n\n\tpublic void importGraphsForScreen(long screenid) throws ClientProtocolException, IOException, JSONException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\tif (!isCached(GraphData.TABLE_NAME, \"screenid=\"+screenid)) {\n\t\t\t_startTransaction();\n\n\t\t\t// collect all graphids\n\t\t\tSet<Long> graphids = new HashSet<Long>();\n\t\t\tCursor cur = zabbixLocalDB.query(ScreenItemData.TABLE_NAME, null, ScreenItemData.COLUMN_SCREENID+\"=\"+screenid, null, null, null, null);\n\t\t\twhile (cur.moveToNext()) {\n\t\t\t\tgraphids.add(cur.getLong(cur.getColumnIndex(ScreenItemData.COLUMN_RESOURCEID)));\n\t\t\t}\n\n\t\t\t// delete old graphs\n\t\t\tString str_graphids = graphids.toString().replace(\"[\", \"\").replace(\"]\", \"\");\n\t\t\tif (str_graphids.length()>0) {\n\t\t\t\tzabbixLocalDB.delete(GraphData.TABLE_NAME, GraphData.COLUMN_GRAPHID+\" IN (\"+str_graphids+\")\", null);\n\t\t\t\tzabbixLocalDB.delete(GraphItemData.TABLE_NAME, GraphItemData.COLUMN_GRAPHID+\" IN (\"+str_graphids+\")\", null);\n\t\t\t}\n\t\t\tzabbixLocalDB.delete(CacheData.TABLE_NAME, CacheData.COLUMN_KIND+\"='\"+GraphData.TABLE_NAME+\"' AND \"+CacheData.COLUMN_FILTER+\"='screenid=\"+screenid+'\\'', null);\n\n\t\t\tJsonArrayOrObjectReader graphs = _queryStream(\n\t\t\t\t\t\"graph.get\"\n\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t\t.put(isVersion2?\"selectGraphItems\":\"select_graph_items\", \"extend\")\n\t\t\t\t\t\t.put(isVersion2?\"selectItems\":\"select_items\", \"extend\")\n\t\t\t\t\t\t.put(\"output\", \"extend\")\n\t\t\t\t\t\t.put(\"graphids\", new JSONArray(graphids))\n\t\t\t);\n\t\t\tJsonObjectReader graphReader;\n\t\t\twhile ((graphReader = graphs.next()) != null) {\n\t\t\t\tboolean mustSetGraphid = false;\n\t\t\t\tGraphData scr = new GraphData();\n\t\t\t\twhile (graphReader.nextValueToken()) {\n\t\t\t\t\tString propName = graphReader.getCurrentName();\n\t\t\t\t\tif (propName.equals(GraphData.COLUMN_GRAPHID)) {\n\t\t\t\t\t\tscr.set(GraphData.COLUMN_GRAPHID, Long.parseLong(graphReader.getText()));\n\t\t\t\t\t} else if (propName.equals(GraphData.COLUMN_NAME)) {\n\t\t\t\t\t\tscr.set(GraphData.COLUMN_NAME, graphReader.getText());\n\t\t\t\t\t} else if (propName.equals(\"gitems\")) {\n\t\t\t\t\t\tmustSetGraphid = importGraphItems(graphReader.getJsonArray());\n\t\t\t\t\t} else if (propName.equals(\"items\")) {\n\t\t\t\t\t\timportItems(graphReader.getJsonArray(), 0, true);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tgraphReader.nextProperty();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tscr.insert(zabbixLocalDB);\n\t\t\t\tif (mustSetGraphid) {\n\t\t\t\t\tContentValues values = new ContentValues(1);\n\t\t\t\t\tvalues.put(GraphItemData.COLUMN_GRAPHID, (Long) scr.get(GraphData.COLUMN_GRAPHID));\n\t\t\t\t\tzabbixLocalDB.update(\n\t\t\t\t\t\t\tGraphItemData.TABLE_NAME\n\t\t\t\t\t\t\t, values\n\t\t\t\t\t\t\t, GraphItemData.COLUMN_GRAPHID+\"=-1\"\n\t\t\t\t\t\t\t, null);\n\t\t\t\t}\n\t\t\t}\n\t\t\tgraphs.close();\n\n\t\t\tsetCached(GraphData.TABLE_NAME, \"screenid=\"+screenid, ZabbixConfig.CACHE_LIFETIME_SCREENS);\n\t\t\t_endTransaction();\n\t\t}\n\t}\n\n\tpublic void importHistoryDetails(String itemid) throws ClientProtocolException, IOException, JSONException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\tif (!isCached(HistoryDetailData.TABLE_NAME, itemid)) {\n\t\t\t_startTransaction();\n\t\t\tzabbixLocalDB.delete(HistoryDetailData.TABLE_NAME, HistoryDetailData.COLUMN_ITEMID+\"=\"+itemid, null);\n\n\t\t\t// the past 2 hours\n\t\t\tlong time_till = new Date().getTime() / 1000;\n\t\t\tlong time_from = time_till - ZabbixConfig.HISTORY_GET_TIME_FROM_SHIFT; // jetzt-2h\n\n\t\t\t// Workaround: historydetails only comes if you use the correct \"history\"-parameter.\n\t\t\t// this parameter can be \"null\" or a number 0-4. Because we don't know when to use which,\n\t\t\t// we try them all, until we get results.\n\t\t\tInteger historytype = null;\n\t\t\tJSONObject result = _queryBuffer(\n\t\t\t\t\t\"history.get\"\n\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t\t.put(\"limit\", 1)\n\t\t\t\t\t\t.put(\"history\", historytype) // for integer ?\n\t\t\t\t\t\t.put(\"itemids\", new JSONArray().put(itemid))\n\t\t\t\t\t\t.put(\"time_from\", time_from)\n\t\t\t);\n\n\t\t\tJSONArray testHistorydetails = result.getJSONArray(\"result\");\n\t\t\tif (testHistorydetails.length() == 0) {\n\t\t\t\thistorytype = -1;\n\t\t\t\twhile (testHistorydetails.length() == 0 && ++historytype <= 4) {\n\t\t\t\t\t// if we get an empty array, we try another history parameter\n\t\t\t\t\tresult = _queryBuffer(\n\t\t\t\t\t\t\t\"history.get\"\n\t\t\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t\t\t\t.put(\"output\", \"extend\")\n\t\t\t\t\t\t\t\t.put(\"limit\", 1)\n\t\t\t\t\t\t\t\t.put(\"history\", historytype)\n\t\t\t\t\t\t\t\t.put(\"itemids\", new JSONArray().put(itemid))\n\t\t\t\t\t\t\t\t.put(\"time_from\", time_from)\n\t\t\t\t\t);\n\t\t\t\t\ttestHistorydetails = result.getJSONArray(\"result\");\n\t\t\t\t}\n\t\t\t}\n\t\t\t// correct historytype found and there are data\n\t\t\tif (testHistorydetails.length() > 0) {\n\t\t\t\t// count of the entries cannot be detected (zabbix bug),\n\t\t\t\t// so we use a fiction\n\t\t\t\tint numDetails = 400;\n\t\t\t\tint curI=0;\n\t\t\t\tJsonArrayOrObjectReader historydetails = _queryStream(\n\t\t\t\t\t\t\"history.get\"\n\t\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t\t\t.put(\"output\", \"extend\")\n\t\t\t\t\t\t\t.put(\"limit\", ZabbixConfig.HISTORY_GET_LIMIT)\n\t\t\t\t\t\t\t.put(\"history\", historytype)\n\t\t\t\t\t\t\t.put(\"itemids\", new JSONArray().put(itemid))\n\t\t\t\t\t\t\t.put(\"time_from\", time_from)\n\t\t\t\t\t\t\t.put(\"sortfield\", \"clock\")\n\t\t\t\t\t\t\t.put(\"sortorder\", \"DESC\")\n\t\t\t\t);\n\t\t\t\tJsonObjectReader historydetail;\n\t\t\t\ttry {\n\t\t\t\t\tint selI = 0;\n\t\t\t\t\twhile ((historydetail = historydetails.next()) != null) {\n\t\t\t\t\t\t// save only every 20th\n\t\t\t\t\t\tif (selI++ % 20 != 0) {\n\t\t\t\t\t\t\twhile (historydetail.nextValueToken()) {\n\t\t\t\t\t\t\t\thistorydetail.nextProperty();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tHistoryDetailData h = new HistoryDetailData();\n\t\t\t\t\t\twhile (historydetail.nextValueToken()) {\n\t\t\t\t\t\t\tString propName = historydetail.getCurrentName();\n\t\t\t\t\t\t\tif (propName.equals(HistoryDetailData.COLUMN_CLOCK)) {\n\t\t\t\t\t\t\t\th.set(HistoryDetailData.COLUMN_CLOCK, Integer.parseInt(historydetail.getText()));\n\t\t\t\t\t\t\t} else if (propName.equals(HistoryDetailData.COLUMN_ITEMID)) {\n\t\t\t\t\t\t\t\th.set(HistoryDetailData.COLUMN_ITEMID, Long.parseLong(historydetail.getText()));\n\t\t\t\t\t\t\t} else if (propName.equals(HistoryDetailData.COLUMN_VALUE)) {\n\t\t\t\t\t\t\t\th.set(HistoryDetailData.COLUMN_VALUE, Double.parseDouble(historydetail.getText()));\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\thistorydetail.nextProperty();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\th.insert(zabbixLocalDB);\n\t\t\t\t\t\tif (++curI % 10 == 0) {\n\t\t\t\t\t\t\tshowProgress(Math.min(curI*100/numDetails, 84));\n\t\t\t\t\t\t}\n\t\t\t\t\t\t_commitTransactionIfRecommended();\n\t\t\t\t\t}\n\t\t\t\t} catch (NumberFormatException e) {\n\t\t\t\t\t// data are unuseable, e.g. because it's a string\n\t\t\t\t}\n\t\t\t\thistorydetails.close();\n\t\t\t}\n\t\t\tsetCached(HistoryDetailData.TABLE_NAME, itemid, ZabbixConfig.CACHE_LIFETIME_HISTORY_DETAILS);\n\t\t\t_endTransaction();\n\t\t}\n\t}\n\n\tprivate long importHostGroups(JsonArrayOrObjectReader jsonArray) throws JsonParseException, IOException {\n\t\tlong firstHostGroupId = -1;\n\t\tJsonObjectReader hostReader;\n\t\twhile ((hostReader = jsonArray.next()) != null) {\n\t\t\tHostGroupData h = new HostGroupData();\n\t\t\twhile (hostReader.nextValueToken()) {\n\t\t\t\tString propName = hostReader.getCurrentName();\n\t\t\t\tif (propName.equals(HostGroupData.COLUMN_GROUPID)) {\n\t\t\t\t\tlong id = Long.parseLong(hostReader.getText());\n\t\t\t\t\tif (firstHostGroupId == -1) firstHostGroupId = id;\n\t\t\t\t\th.set(HostGroupData.COLUMN_GROUPID, id);\n\t\t\t\t} else if (propName.equals(HostGroupData.COLUMN_NAME)) {\n\t\t\t\t\th.set(HostGroupData.COLUMN_NAME, hostReader.getText());\n\t\t\t\t} else {\n\t\t\t\t\thostReader.nextProperty();\n\t\t\t\t}\n\t\t\t}\n\t\t\th.insert(zabbixLocalDB, HostGroupData.COLUMN_GROUPID);\n\t\t\t_commitTransactionIfRecommended();\n\t\t}\n\n\t\treturn firstHostGroupId;\n\t}\n\n\t/**\n\t * import the hosts from stream\n\t * @param jsonArray stream\n\t * @param numHosts count of hosts for progressbar. null if unknown.\n\t * @return Object[] {(String) comma-separated all Hostnames, (Long) 1. host id}\n\t * @throws JsonParseException\n\t * @throws IOException\n\t */\n\tprivate Object[] importHosts(JsonArrayOrObjectReader jsonArray, Integer numHosts) throws JsonParseException, IOException {\n\t\tList<String> hostnames = new ArrayList<String>();\n\t\tlong firstHostId = -1;\n\t\tJsonObjectReader hostReader;\n\t\tint i=0;\n\t\twhile ((hostReader = jsonArray.next()) != null) {\n\t\t\tHostData h = new HostData();\n\t\t\twhile (hostReader.nextValueToken()) {\n\t\t\t\tString propName = hostReader.getCurrentName();\n\t\t\t\tif (propName.equals(HostData.COLUMN_HOSTID)) {\n\t\t\t\t\th.set(HostData.COLUMN_HOSTID, Long.parseLong(hostReader.getText()));\n\t\t\t\t\tif (firstHostId == -1) {\n\t\t\t\t\t\tfirstHostId = (Long) h.get(HostData.COLUMN_HOSTID);\n\t\t\t\t\t}\n\t\t\t\t} else if (propName.equals(HostData.COLUMN_HOST)) {\n\t\t\t\t\tString host = hostReader.getText();\n\t\t\t\t\thostnames.add(host);\n\t\t\t\t\th.set(HostData.COLUMN_HOST, host);\n\t\t\t\t} else if (propName.equals(\"groups\")) {\n\t\t\t\t\tlong groupid = importHostGroups(hostReader.getJsonArray());\n\t\t\t\t\tif (groupid != -1) {\n\t\t\t\t\t\th.set(HostData.COLUMN_GROUPID, groupid);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\thostReader.nextProperty();\n\t\t\t\t}\n\t\t\t}\n\t\t\t// host without group will get group #0 (other)\n\t\t\tif (h.get(HostData.COLUMN_GROUPID) == null) {\n\t\t\t\th.set(HostData.COLUMN_GROUPID, 0);\n\t\t\t\t// create \"other\" hostgroup #1\n\t\t\t\tHostGroupData hg = new HostGroupData();\n\t\t\t\thg.set(HostGroupData.COLUMN_GROUPID, 0);\n\t\t\t\thg.set(HostGroupData.COLUMN_NAME, \"- \"+context.getResources().getString(R.string.other)+\" -\");\n\t\t\t\thg.insert(zabbixLocalDB, HostGroupData.COLUMN_GROUPID);\n\t\t\t}\n\t\t\th.insert(zabbixLocalDB, HostData.COLUMN_HOSTID);\n\t\t\tif (numHosts != null && ++i % 10 == 0) {\n\t\t\t\tshowProgress(i*100/numHosts);\n\t\t\t}\n\t\t\t_commitTransactionIfRecommended();\n\t\t}\n\n\t\treturn new Object[] {hostnames.toString().replaceAll(\"[\\\\[\\\\]]\", \"\"), firstHostId};\n\t}\n\n\tpublic void importHostsAndGroups() throws JSONException, IOException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\tif (!isCached(HostData.TABLE_NAME, null)) {\n\t\t\t_startTransaction();\n\t\t\tzabbixLocalDB.delete(HostData.TABLE_NAME, null, null);\n\t\t\tzabbixLocalDB.delete(HostGroupData.TABLE_NAME, null, null);\n\n\t\t\t// get count of hosts\n\t\t\tJSONObject result = _queryBuffer(\n\t\t\t\t\t\"host.get\"\n\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t\t.put(\"countOutput\", 1)\n\t\t\t\t\t\t.put(\"limit\", ZabbixConfig.HOST_GET_LIMIT)\n\t\t\t\t\t\t.put(isVersion2?\"selectGroups\":\"select_groups\", \"extend\")\n\t\t\t);\n\t\t\tint numHosts = result.getInt(\"result\");\n\t\t\tJsonArrayOrObjectReader hosts = _queryStream(\n\t\t\t\t\t\"host.get\"\n\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t\t.put(\"output\", \"extend\")\n\t\t\t\t\t\t.put(\"limit\", ZabbixConfig.HOST_GET_LIMIT)\n\t\t\t\t\t\t.put(isVersion2?\"selectGroups\":\"select_groups\", \"extend\")\n\t\t\t);\n\t\t\timportHosts(hosts, numHosts);\n\t\t\thosts.close();\n\n\t\t\tsetCached(HostData.TABLE_NAME, null, ZabbixConfig.CACHE_LIFETIME_HOSTS);\n\t\t\t_endTransaction();\n\t\t}\n\t}\n\n\t/**\n\t * import items from stream.\n\t * @param items stream\n\t * @param numItems count for progressbar, if 0 no progressbarupdate\n\t * @param checkBeforeInsert if true, only make an insert if item does not exist\n\t * @return the first item id\n\t * @throws JsonParseException\n\t * @throws IOException\n\t */\n\tprivate long importItems(JsonArrayOrObjectReader items, int numItems, boolean checkBeforeInsert) throws JsonParseException, IOException {\n\t\tlong firstItemId = -1;\n\t\tint curI=0;\n\t\tJsonObjectReader itemReader;\n\t\twhile ((itemReader = items.next()) != null) {\n\t\t\tItemData i = new ItemData();\n\t\t\tString key_ = null;\n\t\t\twhile (itemReader.nextValueToken()) {\n\t\t\t\tString propName = itemReader.getCurrentName();\n\t\t\t\tif (propName.equals(ItemData.COLUMN_ITEMID)) {\n\t\t\t\t\ti.set(ItemData.COLUMN_ITEMID, Long.parseLong(itemReader.getText()));\n\t\t\t\t\tif (firstItemId == -1) {\n\t\t\t\t\t\tfirstItemId = (Long) i.get(ItemData.COLUMN_ITEMID);\n\t\t\t\t\t}\n\t\t\t\t} else if (propName.equals(ItemData.COLUMN_HOSTID)) {\n\t\t\t\t\ti.set(ItemData.COLUMN_HOSTID, Long.parseLong(itemReader.getText()));\n\t\t\t\t} else if (propName.equals(ItemData.COLUMN_DESCRIPTION) || propName.equals(\"name\")) {\n\t\t\t\t\t// since zabbix 2.x is the name of the item \"name\"\n\t\t\t\t\t// before zabbix 2.x the name field was \"description\"\n\t\t\t\t\tif (isVersion2 && propName.equals(\"name\")) {\n\t\t\t\t\t\ti.set(ItemData.COLUMN_DESCRIPTION, itemReader.getText());\n\t\t\t\t\t} else if (!isVersion2) {\n\t\t\t\t\t\ti.set(ItemData.COLUMN_DESCRIPTION, itemReader.getText());\n\t\t\t\t\t}\n\t\t\t\t} else if (propName.equals(ItemData.COLUMN_LASTCLOCK)) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\ti.set(ItemData.COLUMN_LASTCLOCK, Integer.parseInt(itemReader.getText()));\n\t\t\t\t\t} catch (NumberFormatException e) {\n\t\t\t\t\t\t// ignore\n\t\t\t\t\t}\n\t\t\t\t} else if (propName.equals(ItemData.COLUMN_LASTVALUE)) {\n\t\t\t\t\ti.set(ItemData.COLUMN_LASTVALUE, itemReader.getText());\n\t\t\t\t} else if (propName.equals(ItemData.COLUMN_UNITS)) {\n\t\t\t\t\ti.set(ItemData.COLUMN_UNITS, itemReader.getText());\n\t\t\t\t} else if (propName.equals(\"key_\")) {\n\t\t\t\t\tkey_ = itemReader.getText();\n\t\t\t\t} else if (propName.equals(\"applications\")) {\n\t\t\t\t\t// at this point itemid and hostid is unknown\n\t\t\t\t\t// because of this, all applicationrelations will be saved with itemid and hostid \"-1\".\n\t\t\t\t\t// later the IDs will be replaced with the correct\n\t\t\t\t\timportApplications(-1, -1, itemReader.getJsonArray());\n\t\t\t\t} else {\n\t\t\t\t\titemReader.nextProperty();\n\t\t\t\t}\n\t\t\t}\n\t\t\t// if applicable replace placeholder\n\t\t\tString description = (String) i.get(ItemData.COLUMN_DESCRIPTION);\n\t\t\tif (description.matches(\".*\\\\$[0-9].*\")) {\n\t\t\t\tif (key_ != null && key_.indexOf('[') != -1) {\n\t\t\t\t\tString[] keys = key_.substring(key_.indexOf('[')+1, key_.indexOf(']')).split(\",\");\n\t\t\t\t\tfor (int ix=0; ix<keys.length; ix++) {\n\t\t\t\t\t\tdescription = description.replace(\"$\"+(ix+1), keys[ix]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\ti.set(ItemData.COLUMN_DESCRIPTION, description);\n\t\t\tif (checkBeforeInsert) {\n\t\t\t\ti.insert(zabbixLocalDB, ItemData.COLUMN_ITEMID);\n\t\t\t} else {\n\t\t\t\ti.insert(zabbixLocalDB);\n\t\t\t}\n\t\t\tif (numItems > 0 && ++curI % 10 == 0) {\n\t\t\t\tshowProgress(curI*100/numItems);\n\t\t\t}\n\n\t\t\t// now the \"-1\" IDs of applicationsrelation will be replaced with the correct itemID\n\t\t\tContentValues values = new ContentValues(2);\n\t\t\tvalues.put(ApplicationItemRelationData.COLUMN_ITEMID, (Long) i.get(ItemData.COLUMN_ITEMID));\n\t\t\tvalues.put(ApplicationItemRelationData.COLUMN_HOSTID, (Long) i.get(ItemData.COLUMN_HOSTID));\n\t\t\tzabbixLocalDB.update(\n\t\t\t\t\tApplicationItemRelationData.TABLE_NAME\n\t\t\t\t\t, values\n\t\t\t\t\t, ApplicationItemRelationData.COLUMN_ITEMID+\"=-1\"\n\t\t\t\t\t, null\n\t\t\t);\n\t\t}\n\t\treturn firstItemId;\n\t}\n\n\tpublic void importItems(long hostid) throws JSONException, IOException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\tif (!isCached(ItemData.TABLE_NAME, \"hostid=\"+hostid)) {\n\t\t\t_startTransaction();\n\t\t\tzabbixLocalDB.delete(ItemData.TABLE_NAME, ItemData.COLUMN_HOSTID+\"=\"+hostid, null);\n\t\t\tzabbixLocalDB.delete(ApplicationItemRelationData.TABLE_NAME, ApplicationItemRelationData.COLUMN_HOSTID+\"=\"+hostid, null);\n\n\t\t\t// count of items\n\t\t\tJSONObject result = _queryBuffer(\n\t\t\t\t\t\"item.get\"\n\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t.put(\"output\", \"extend\")\n\t\t\t\t\t.put(\"countOutput\", 1)\n\t\t\t\t\t.put(\"limit\", ZabbixConfig.ITEM_GET_LIMIT)\n\t\t\t\t\t.put(\"hostids\", new JSONArray().put(hostid))\n\t\t\t);\n\t\t\tint numItems = result.getInt(\"result\");\n\t\t\tJsonArrayOrObjectReader items = _queryStream(\n\t\t\t\t\t\"item.get\"\n\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t\t.put(\"output\", \"extend\")\n\t\t\t\t\t\t.put(\"limit\", ZabbixConfig.ITEM_GET_LIMIT)\n\t\t\t\t\t\t.put(isVersion2?\"selectApplications\":\"select_applications\", \"extend\")\n\t\t\t\t\t\t.put(\"hostids\", new JSONArray().put(hostid))\n\t\t\t);\n\t\t\timportItems(items, numItems, false);\n\t\t\titems.close();\n\n\t\t\tsetCached(ItemData.TABLE_NAME, \"hostid=\"+hostid, ZabbixConfig.CACHE_LIFETIME_ITEMS);\n\t\t\t_endTransaction();\n\t\t}\n\t}\n\n\tprivate void importScreenItems(JsonArrayOrObjectReader screenItems) throws JsonParseException, NumberFormatException, IOException {\n\t\tJsonObjectReader screenItemReader;\n\t\twhile ((screenItemReader = screenItems.next()) != null) {\n\t\t\tScreenItemData si = new ScreenItemData();\n\t\t\tint resourcetype = -1;\n\t\t\twhile (screenItemReader.nextValueToken()) {\n\t\t\t\tString propName = screenItemReader.getCurrentName();\n\t\t\t\tif (propName.equals(ScreenItemData.COLUMN_SCREENITEMID)) {\n\t\t\t\t\tsi.set(ScreenItemData.COLUMN_SCREENITEMID, Long.parseLong(screenItemReader.getText()));\n\t\t\t\t} else if (propName.equals(ScreenItemData.COLUMN_SCREENID)) {\n\t\t\t\t\tsi.set(ScreenItemData.COLUMN_SCREENID, Long.parseLong(screenItemReader.getText()));\n\t\t\t\t} else if (propName.equals(ScreenItemData.COLUMN_RESOURCEID)) {\n\t\t\t\t\tsi.set(ScreenItemData.COLUMN_RESOURCEID, Long.parseLong(screenItemReader.getText()));\n\t\t\t\t} else if (propName.equals(\"resourcetype\")) {\n\t\t\t\t\tresourcetype = Integer.parseInt(screenItemReader.getText());\n\t\t\t\t} else {\n\t\t\t\t\tscreenItemReader.nextProperty();\n\t\t\t\t}\n\t\t\t}\n\t\t\t// only resouretype == 0\n\t\t\tif (resourcetype == 0) {\n\t\t\t\tsi.insert(zabbixLocalDB);\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic void importScreens() throws ClientProtocolException, IOException, JSONException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\tif (!isCached(ScreenData.TABLE_NAME, null)) {\n\t\t\t_startTransaction();\n\n\t\t\tzabbixLocalDB.delete(ScreenData.TABLE_NAME, null, null);\n\t\t\tzabbixLocalDB.delete(ScreenItemData.TABLE_NAME, null, null);\n\t\t\tzabbixLocalDB.delete(CacheData.TABLE_NAME, CacheData.COLUMN_KIND+\"='\"+ScreenData.TABLE_NAME+\"'\", null);\n\n\t\t\tJsonArrayOrObjectReader screens = _queryStream(\n\t\t\t\t\t(isVersion2?\"s\":\"S\")+\"creen.get\"\n\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t\t.put(\"output\", \"extend\")\n\t\t\t\t\t\t.put(isVersion2?\"selectScreenItems\":\"select_screenitems\", \"extend\")\n\t\t\t);\n\t\t\tJsonObjectReader screenReader;\n\t\t\twhile ((screenReader = screens.next()) != null) {\n\t\t\t\tScreenData scr = new ScreenData();\n\t\t\t\twhile (screenReader.nextValueToken()) {\n\t\t\t\t\tString propName = screenReader.getCurrentName();\n\t\t\t\t\tif (propName.equals(ScreenData.COLUMN_SCREENID)) {\n\t\t\t\t\t\tscr.set(ScreenData.COLUMN_SCREENID, Long.parseLong(screenReader.getText()));\n\t\t\t\t\t} else if (propName.equals(ScreenData.COLUMN_NAME)) {\n\t\t\t\t\t\tscr.set(ScreenData.COLUMN_NAME, screenReader.getText());\n\t\t\t\t\t} else if (propName.equals(\"screenitems\")) {\n\t\t\t\t\t\timportScreenItems(screenReader.getJsonArray());\n\t\t\t\t\t} else {\n\t\t\t\t\t\tscreenReader.nextProperty();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tscr.insert(zabbixLocalDB);\n\t\t\t}\n\t\t\tscreens.close();\n\n\t\t\tsetCached(ScreenData.TABLE_NAME, null, ZabbixConfig.CACHE_LIFETIME_SCREENS);\n\t\t\t_endTransaction();\n\t\t}\n\t}\n\n\tpublic void importTrigger(String triggerid) throws JSONException, IOException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\tif (!isCached(TriggerData.TABLE_NAME, \"triggerid=\"+triggerid)) {\n\t\t\t_startTransaction();\n\n\t\t\tJsonArrayOrObjectReader trigger = _queryStream(\n\t\t\t\t\t\"trigger.get\"\n\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t\t.put(\"output\", \"extend\")\n\t\t\t\t\t\t.put(isVersion2?\"selectHosts\":\"select_hosts\", \"extend\")\n\t\t\t\t\t\t.put(\"triggerids\", new JSONArray().put(triggerid))\n\t\t\t);\n\t\t\timportTriggers(trigger);\n\t\t\ttrigger.close();\n\n\t\t\tsetCached(TriggerData.TABLE_NAME, \"triggerid=\"+triggerid, ZabbixConfig.CACHE_LIFETIME_TRIGGERS);\n\t\t\t_endTransaction();\n\t\t}\n\t}\n\n\t/**\n\t * importiert ein trigger mit dem attribute itemid. ggf. wird der trigger zuerst gelöscht und neu angelegt.\n\t * imports a trigger with the attribute itemid. if trigger already exists, it will be removed first.\n\t * @param triggerid\n\t * @throws JSONException\n\t * @throws IOException\n\t * @throws HttpAuthorizationRequiredException\n\t * @throws NoAPIAccessException\n\t */\n\tpublic void importTriggerColumnItemId(String triggerid) throws JSONException, IOException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\t// check if the trigger exists and if the itemid was set\n\t\tboolean mustImport = true;\n\t\tCursor cur = zabbixLocalDB.query(TriggerData.TABLE_NAME, null, TriggerData.COLUMN_TRIGGERID+\"=\"+triggerid, null, null, null, null);\n\t\tif (cur.moveToFirst()) {\n\t\t\tlong itemid = 0;\n\t\t\ttry {\n\t\t\t\titemid = cur.getLong(cur.getColumnIndex(TriggerData.COLUMN_ITEMID));\n\t\t\t} catch (Exception e) {\n\t\t\t\t// no itemid\n\t\t\t}\n\t\t\tif (itemid > 0) {\n\t\t\t\tmustImport = false;\n\t\t\t}\n\t\t}\n\t\tif (mustImport) {\n\t\t\t_startTransaction();\n\t\t\tzabbixLocalDB.delete(TriggerData.TABLE_NAME, TriggerData.COLUMN_TRIGGERID+\"=\"+triggerid, null);\n\t\t\tJsonArrayOrObjectReader triggers = _queryStream(\n\t\t\t\t\t\"trigger.get\"\n\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t\t.put(\"output\", \"extend\")\n\t\t\t\t\t\t.put(isVersion2?\"selectHosts\":\"select_hosts\", \"extend\")\n\t\t\t\t\t\t.put(isVersion2?\"selectGroups\":\"select_groups\", \"extend\")\n\t\t\t\t\t\t.put(isVersion2?\"selectItems\":\"select_items\", \"extend\")\n\t\t\t\t\t\t.put(\"triggerids\", new JSONArray().put(triggerid))\n\t\t\t\t\t\t.put(\"limit\", 1)\n\t\t\t);\n\t\t\timportTriggers(triggers);\n\t\t\t_endTransaction();\n\t\t}\n\t}\n\n\t/**\n\t * imports the \"warning\"-triggers\n\t * @throws JSONException\n\t * @throws IOException\n\t * @throws HttpAuthorizationRequiredException\n\t * @throws NoAPIAccessException\n\t */\n\tpublic void importTriggers() throws JSONException, IOException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\tif (!isCached(TriggerData.TABLE_NAME, null)) {\n\t\t\t// clear triggers\n\t\t\tzabbixLocalDB.delete(TriggerData.TABLE_NAME, null, null);\n\n\t\t\t_startTransaction();\n\n\t\t\tlong min = (new Date().getTime()/1000)-ZabbixConfig.STATUS_SHOW_TRIGGER_TIME;\n\t\t\tJsonArrayOrObjectReader triggers = _queryStream(\n\t\t\t\t\t\"trigger.get\"\n\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t\t.put(\"output\", \"extend\")\n\t\t\t\t\t\t.put(\"sortfield\", \"lastchange\")\n\t\t\t\t\t\t.put(\"sortorder\", \"desc\")\n\t\t\t\t\t\t.put(isVersion2?\"selectHosts\":\"select_hosts\", \"extend\")\n\t\t\t\t\t\t.put(isVersion2?\"selectGroups\":\"select_groups\", \"extend\")\n\t\t\t\t\t\t.put(isVersion2?\"selectItems\":\"select_items\", \"extend\")\n\t\t\t\t\t\t.put(\"lastChangeSince\", min)\n\t\t\t\t\t\t.put(\"only_true\", \"1\")\n\t\t\t\t\t\t.put(\"limit\", ZabbixConfig.TRIGGER_GET_LIMIT)\n\t\t\t\t\t\t.put(\"expandDescription\", true)\n\t\t\t);\n\t\t\timportTriggers(triggers);\n\t\t\ttriggers.close();\n\n\t\t\tsetCached(TriggerData.TABLE_NAME, null, ZabbixConfig.CACHE_LIFETIME_TRIGGERS);\n\t\t\t_endTransaction();\n\t\t}\n\t}\n\n\tprivate void importTriggers(JsonArrayOrObjectReader jsonArray) throws JsonParseException, IOException {\n\t\tJsonObjectReader triggerReader;\n\t\twhile ((triggerReader = jsonArray.next()) != null) {\n\t\t\tTriggerData t = new TriggerData();\n\t\t\twhile (triggerReader.nextValueToken()) {\n\t\t\t\tString propName = triggerReader.getCurrentName();\n\t\t\t\tif (propName.equals(TriggerData.COLUMN_TRIGGERID)) {\n\t\t\t\t\tt.set(TriggerData.COLUMN_TRIGGERID, Long.parseLong(triggerReader.getText()));\n\t\t\t\t} else if (propName.equals(TriggerData.COLUMN_COMMENTS)) {\n\t\t\t\t\tt.set(TriggerData.COLUMN_COMMENTS, triggerReader.getText());\n\t\t\t\t} else if (propName.equals(TriggerData.COLUMN_DESCRIPTION)) {\n\t\t\t\t\tt.set(TriggerData.COLUMN_DESCRIPTION, triggerReader.getText());\n\t\t\t\t} else if (propName.equals(TriggerData.COLUMN_EXPRESSION)) {\n\t\t\t\t\tt.set(TriggerData.COLUMN_EXPRESSION, triggerReader.getText());\n\t\t\t\t} else if (propName.equals(TriggerData.COLUMN_LASTCHANGE)) {\n\t\t\t\t\tt.set(TriggerData.COLUMN_LASTCHANGE, Integer.parseInt(triggerReader.getText()));\n\t\t\t\t} else if (propName.equals(TriggerData.COLUMN_PRIORITY)) {\n\t\t\t\t\tt.set(TriggerData.COLUMN_PRIORITY, Integer.parseInt(triggerReader.getText()));\n\t\t\t\t} else if (propName.equals(TriggerData.COLUMN_STATUS)) {\n\t\t\t\t\tt.set(TriggerData.COLUMN_STATUS, Integer.parseInt(triggerReader.getText()));\n\t\t\t\t} else if (propName.equals(TriggerData.COLUMN_VALUE)) {\n\t\t\t\t\tt.set(TriggerData.COLUMN_VALUE, Integer.parseInt(triggerReader.getText()));\n\t\t\t\t} else if (propName.equals(TriggerData.COLUMN_URL)) {\n\t\t\t\t\tt.set(TriggerData.COLUMN_URL, triggerReader.getText());\n\t\t\t\t} else if (propName.equals(\"hosts\")) {\n\t\t\t\t\tObject[] hostsCache = importHosts(triggerReader.getJsonArray(), null);\n\t\t\t\t\tt.set(TriggerData.COLUMN_HOSTS, hostsCache[0]);\n\t\t\t\t\tt.set(TriggerData.COLUMN_HOSTID, hostsCache[1]);\n\t\t\t\t} else if (propName.equals(\"groups\")) {\n\t\t\t\t\timportHostGroups(triggerReader.getJsonArray());\n\t\t\t\t} else if (propName.equals(\"items\")) {\n\t\t\t\t\t// store the first item id\n\t\t\t\t\tt.set(TriggerData.COLUMN_ITEMID, importItems(triggerReader.getJsonArray(), 1, true));\n\t\t\t\t} else {\n\t\t\t\t\ttriggerReader.nextProperty();\n\t\t\t\t}\n\t\t\t}\n\t\t\tt.insert(zabbixLocalDB, TriggerData.COLUMN_TRIGGERID);\n\t\t\t_commitTransactionIfRecommended();\n\t\t}\n\t}\n\n\tpublic void importTriggersByItemId(String itemid) throws JSONException, IOException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\tif (!isCached(TriggerData.TABLE_NAME, \"itemid=\"+itemid)) {\n\t\t\t_startTransaction();\n\t\t\tzabbixLocalDB.delete(TriggerData.TABLE_NAME, TriggerData.COLUMN_ITEMID+\"=\"+itemid, null);\n\t\t\tJsonArrayOrObjectReader triggers = _queryStream(\n\t\t\t\t\t\"trigger.get\"\n\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t\t.put(\"output\", \"extend\")\n\t\t\t\t\t\t.put(isVersion2?\"selectHosts\":\"select_hosts\", \"extend\")\n\t\t\t\t\t\t.put(isVersion2?\"selectGroups\":\"select_groups\", \"extend\")\n\t\t\t\t\t\t.put(isVersion2?\"selectItems\":\"select_items\", \"extend\")\n\t\t\t\t\t\t.put(\"itemids\", new JSONArray().put(itemid))\n\t\t\t\t\t\t.put(\"limit\", 1)\n\t\t\t\t\t\t.put(\"sortfield\", \"lastchange\")\n\t\t\t\t\t\t.put(\"sortorder\", \"DESC\")\n\t\t\t);\n\t\t\timportTriggers(triggers);\n\t\t\tsetCached(TriggerData.TABLE_NAME, \"itemid=\"+itemid, ZabbixConfig.CACHE_LIFETIME_TRIGGERS);\n\t\t\t_endTransaction();\n\t\t}\n\t}\n\n\tpublic boolean isCached(String kind, String filter) {\n\t\tSQLiteQueryBuilder sqlBuilder = new SQLiteQueryBuilder();\n\t\tsqlBuilder.setTables(CacheData.TABLE_NAME);\n\t\tsqlBuilder.appendWhere(CacheData.COLUMN_KIND+\"='\"+kind+\"' AND \");\n\t\tsqlBuilder.appendWhere(CacheData.COLUMN_FILTER+\n\t\t\t\t(filter==null?\" IS NULL\":\"='\"+filter+\"'\")\n\t\t);\n\t\tsqlBuilder.appendWhere(\" AND \"+CacheData.COLUMN_EXPIRE_DATE+\">\"+new Date().getTime()/1000);\n\t\tCursor cur = sqlBuilder.query(\n\t\t\tzabbixLocalDB,\n\t\t\tnull,\n\t\t\tnull,\n\t\t\tnull,\n\t\t\tnull,\n\t\t\tnull,\n\t\t\tnull\n\t\t);\n\t\tLog.i(\"ZabbixContentProvider\", \"isCached \"+kind+\"//\"+filter+\"//\"+cur.moveToFirst());\n\t\treturn cur.moveToFirst();\n\t}\n\n\t/**\n\t * public, for the unit test\n\t */\n\tpublic void setCached(String kind, String filter, int lifetime) {\n\t\tCacheData cache = new CacheData();\n\t\tcache.set(CacheData.COLUMN_EXPIRE_DATE, new Date().getTime()/1000 + lifetime);\n\t\tcache.set(CacheData.COLUMN_KIND, kind);\n\t\tif (filter != null) {\n\t\t\tcache.set(CacheData.COLUMN_FILTER, filter);\n\t\t}\n\t\tcache.insert(zabbixLocalDB);\n\t}\n\n\t/**\n\t * updates the progressbar in the gui\n\t * @param i 0..100\n\t */\n\tpublic void showProgress(int i) {\n\t\t// if applicable, transform the progress\n\t\tif (transformProgressStart != 0 && transformProgressEnd != 0) {\n\t\t\ti = (int) (transformProgressStart + (transformProgressEnd-transformProgressStart)*(double)i/100);\n\t\t}\n\n\t\tIntent intent = new Intent(ZabbixContentProvider.CONTENT_PROVIDER_INTENT_ACTION);\n\t\tintent.putExtra(\"flag\", ZabbixContentProvider.INTENT_FLAG_SHOW_PROGRESS);\n\t\tintent.putExtra(\"value\", i);\n\t\tcontext.sendBroadcast(intent);\n\t}\n\n\t/**\n\t * transforms the progress\n\t * @param start 0% => start%\n\t * @param end 100% => end%\n\t */\n\tpublic void transformProgress(int start, int end) {\n\t\ttransformProgressStart = start;\n\t\ttransformProgressEnd = end;\n\t}\n}\n"],
    "p_date_tdt": "Sep 12, 2012 5:48:12 AM",
    "c_comments_t": ["\t\t\t// create ApplicationItemRelation /** \n * public, for the unit test\n */\n /** \n * import the hosts from stream\n * @param jsonArray stream\n * @param numHosts count of hosts for progressbar. null if unknown.\n * @return Object[] {(String) comma-separated all Hostnames, (Long) 1. host id}\n * @throws JsonParseException\n * @throws IOException\n */\n \t\t\t// result array found /** \n * import graph items\n * @param graphItems\n * @return true, if graphid column has to be updated from -1 to the correct graphid later.\n * @throws JsonParseException\n * @throws NumberFormatException\n * @throws IOException\n */\n \t\t\t\t\t\t// save only every 20th \t\t\t// wrong password. token remains null \t\t\t// the past 2 hours \t\t\t\t\t// data are unuseable, e.g. because it's a string /** \n * @param events stream\n * @param numEvents if null, no progressbar-update AND only isert, if it does not exist. If !null, progressbar-update AND always insert without checking\n * @throws JsonParseException\n * @throws IOException\n */\n \t\t\t\t\t// Precondition failed / Looks like Zabbix 1.8.2 \t\t\t// get API version \t\t\t// if #0 \"other\" does not exist yet, it has to be created \t\t\t\t\t// later the IDs will be replaced with the correct /** \n * zabbix api call. data will be parsed as json object on-the-fly. Caution: use this only for api calls with a small return data.\n * @param method\n * @param params\n * @return\n * @throws ClientProtocolException\n * @throws IOException\n * @throws JSONException\n * @throws HttpAuthorizationRequiredException\n * @throws NoAPIAccessException\n */\n /** \n * begin sql transaction\n */\n \t\t\t\t\t\t// first do a new auth and then try the same api call again \t\t\t\t// no itemid \t\t\t// count of items /** \n * init\n * @param context android context\n * @param zabbixLocalDB sqlite\n */\n \t\t\t// create applications that does not exist \t\t\t\t// so we use a fiction \t\t\t// only resouretype == 0 /** \n * probably too old zabbix <= 1.8.2\n */\n /** \n * zabbix auth. user and pwd from app preferences\n * @return true success\n * @throws ClientProtocolException\n * @throws IOException\n * @throws JSONException\n * @throws HttpAuthorizationRequiredException\n * @throws NoAPIAccessException\n */\n /** \n * close the last http stream\n */\n \t\t\t// Workaround: historydetails only comes if you use the correct \"history\"-parameter. /** \n * transforms the progress\n * @param start 0% => start%\n * @param end 100% => end%\n */\n \t\t\t\t// in Zabbix version <2.0, this is not default \t\t\t\t// file not found \t\t\t\t\t// hex string => color int \t\tHttpClientParams.setRedirecting(params, true); // redirecting \t\t\t// if applicable replace placeholder \t\t\t// if graphid-column was not set, this must be done later. temporary graphid=-1 \t\t// for GUI unit test, just return true /** \n * imports the \"warning\"-triggers\n * @throws JSONException\n * @throws IOException\n * @throws HttpAuthorizationRequiredException\n * @throws NoAPIAccessException\n */\n \t\t\t// event is parsed and can be inserted into the db \t\tpublic static final int EVENT_GET_TIME_FROM_SHIFT = 7*24*60*60; // -7 days \t\t// http request \t\t\t\t\t// store hosts namen \t\t\t\t// http auth failed \t\t\t\t\t// at this point itemid and hostid is unknown \t\t\t\t\t// import triggers \t\t\t// we try them all, until we get results. /** \n * importiert ein trigger mit dem attribute itemid. ggf. wird der trigger zuerst gelöscht und neu angelegt. imports a trigger with the attribute itemid. if trigger already exists, it will be removed first.\n * @param triggerid\n * @throws JSONException\n * @throws IOException\n * @throws HttpAuthorizationRequiredException\n * @throws NoAPIAccessException\n */\n \t\t\t\t\t// import hosts \t\t\t// for unit test \t\t\t\t// ignore \t\t\tlong time_from = time_till - ZabbixConfig.HISTORY_GET_TIME_FROM_SHIFT; // jetzt-2h \t\t\t// or a json object /** \n * zabbix error: no api access\n */\n /** \n * counts the sql inserts/updates and do a transaction commit to save the memory\n */\n \t\t\t// send intent to GUI \t\t\t\t\t// before zabbix 2.x the name field was \"description\" \t\t\t\t\t// if we get an empty array, we try another history parameter \t\t\t\t\t// store the first item id \t\t// check if the trigger exists and if the itemid was set /** \n * global constants\n */\n \t\t\t\t// create \"other\" hostgroup #1 \t\t\t// if there's no application, the ID #0 must be added (for other) \t\t\t\t\t// because of this, all applicationrelations will be saved with itemid and hostid \"-1\". \t\tpublic static final int HISTORY_GET_TIME_FROM_SHIFT = 8*60*60; // -8h \t\t\t\t\t\t.put(\"history\", historytype) // for integer ? /** \n * interface to connect to the zabbix server\n */\n /** \n * acknowledge zabbix event. Sets ack-flag with comment. Caution: This is supported only for Zabbix version >= 1.8.4\n * @param eventid\n * @param comment\n * @return true, success.\n * @throws ClientProtocolException\n * @throws IOException\n * @throws JSONException\n * @throws HttpAuthorizationRequiredException\n * @throws NoAPIAccessException\n */\n \t\t\t// store the last stream to close it if an exception will be thrown /** \n * zabbix api call as stream.\n * @param method\n * @param params\n * @return stream im json array wrapper\n * @throws JSONException\n * @throws IOException\n * @throws HttpAuthorizationRequiredException\n * @throws NoAPIAccessException\n */\n \t\t// if applicable http auth \t\t\t// correct historytype found and there are data \t\t\t\t// count of the entries cannot be detected (zabbix bug), /** \n * import items from stream.\n * @param items stream\n * @param numItems count for progressbar, if 0 no progressbarupdate\n * @param checkBeforeInsert if true, only make an insert if item does not exist\n * @return the first item id\n * @throws JsonParseException\n * @throws IOException\n */\n \t\t\t// collect all graphids /** \n * http auth is needed\n */\n \t\t\t// ignore for unit test /** \n * commit sql transaction\n */\n \t\t\t// delete old graphs \t\t\t// host without group will get group #0 (other) \t\t\t// there's no result \t\t// if applicable, transform the progress \t\t\t// SSL not trusted \t\t\t// internet problem \t\t\tif (jp.nextToken() != JsonToken.START_ARRAY && jp.getCurrentToken() != JsonToken.START_OBJECT) { // go inside the array \t\tpublic static final int CACHE_LIFETIME_APPLICATIONS = 2*24*60*60; // 2 days \t\t\t\t\t// since zabbix 2.x is the name of the item \"name\" \t\t\t// now the \"-1\" IDs of applicationsrelation will be replaced with the correct itemID \t\t\t// get count of hosts /** \n * import the newest events\n * @throws ClientProtocolException\n * @throws IOException\n * @throws JSONException\n * @throws HttpAuthorizationRequiredException\n * @throws NoAPIAccessException\n */\n /** \n * updates the progressbar in the gui\n * @param i 0..100\n */\n \t\t\t\t\t\t// ignore \t\t\t\t\t// first do a new auth and then try the same api call again /** \n * import the newest event of a trigger\n * @param triggerid\n * @throws JSONException\n * @throws IOException\n * @throws HttpAuthorizationRequiredException\n * @throws NoAPIAccessException\n */\n \t\t// it can be an (empty) array \t\t\t// this parameter can be \"null\" or a number 0-4. Because we don't know when to use which, \t\t\t// clear triggers"],
    "p_contents_t": ["package com.inovex.zabbixmobile.api;\n\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.net.Socket;\nimport java.net.UnknownHostException;\nimport java.security.KeyManagementException;\nimport java.security.KeyStore;\nimport java.security.KeyStoreException;\nimport java.security.NoSuchAlgorithmException;\nimport java.security.UnrecoverableKeyException;\nimport java.security.cert.CertificateException;\nimport java.security.cert.X509Certificate;\nimport java.util.ArrayList;\nimport java.util.Date;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Set;\n\nimport javax.net.ssl.SSLContext;\nimport javax.net.ssl.SSLPeerUnverifiedException;\nimport javax.net.ssl.TrustManager;\nimport javax.net.ssl.X509TrustManager;\n\nimport org.apache.http.HttpResponse;\nimport org.apache.http.HttpVersion;\nimport org.apache.http.auth.AuthScope;\nimport org.apache.http.auth.UsernamePasswordCredentials;\nimport org.apache.http.client.ClientProtocolException;\nimport org.apache.http.client.methods.HttpPost;\nimport org.apache.http.client.params.HttpClientParams;\nimport org.apache.http.conn.ClientConnectionManager;\nimport org.apache.http.conn.scheme.PlainSocketFactory;\nimport org.apache.http.conn.scheme.Scheme;\nimport org.apache.http.conn.scheme.SchemeRegistry;\nimport org.apache.http.conn.ssl.SSLSocketFactory;\nimport org.apache.http.entity.StringEntity;\nimport org.apache.http.impl.client.DefaultHttpClient;\nimport org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager;\nimport org.apache.http.params.BasicHttpParams;\nimport org.apache.http.params.HttpConnectionParams;\nimport org.apache.http.params.HttpParams;\nimport org.apache.http.params.HttpProtocolParams;\nimport org.apache.http.protocol.HTTP;\nimport org.codehaus.jackson.JsonFactory;\nimport org.codehaus.jackson.JsonParseException;\nimport org.codehaus.jackson.JsonParser;\nimport org.codehaus.jackson.JsonToken;\nimport org.json.JSONArray;\nimport org.json.JSONException;\nimport org.json.JSONObject;\n\nimport android.content.ContentValues;\nimport android.content.Context;\nimport android.content.Intent;\nimport android.content.SharedPreferences;\nimport android.database.Cursor;\nimport android.database.sqlite.SQLiteDatabase;\nimport android.database.sqlite.SQLiteQueryBuilder;\nimport android.graphics.Color;\nimport android.preference.PreferenceManager;\nimport android.util.Log;\n\nimport com.inovex.zabbixmobile.R;\nimport com.inovex.zabbixmobile.ZabbixContentProvider;\nimport com.inovex.zabbixmobile.model.ApplicationData;\nimport com.inovex.zabbixmobile.model.ApplicationItemRelationData;\nimport com.inovex.zabbixmobile.model.CacheData;\nimport com.inovex.zabbixmobile.model.EventData;\nimport com.inovex.zabbixmobile.model.GraphData;\nimport com.inovex.zabbixmobile.model.GraphItemData;\nimport com.inovex.zabbixmobile.model.HistoryDetailData;\nimport com.inovex.zabbixmobile.model.HostData;\nimport com.inovex.zabbixmobile.model.HostGroupData;\nimport com.inovex.zabbixmobile.model.ItemData;\nimport com.inovex.zabbixmobile.model.ScreenData;\nimport com.inovex.zabbixmobile.model.ScreenItemData;\nimport com.inovex.zabbixmobile.model.TriggerData;\n\n/**\n * interface to connect to the zabbix server\n */\npublic class ZabbixService {\n\tclass CustomSSLSocketFactory extends SSLSocketFactory {\n\t\tSSLContext sslContext = SSLContext.getInstance(\"TLS\");\n\n\t\tpublic CustomSSLSocketFactory(KeyStore truststore) throws NoSuchAlgorithmException, KeyManagementException, KeyStoreException, UnrecoverableKeyException {\n\t\t\tsuper(truststore);\n\t\t\tTrustManager tm = new X509TrustManager() {\n\t\t\t\t@Override\n\t\t\t\tpublic void checkClientTrusted(X509Certificate[] chain,\n\t\t\t\t\t\tString authType) throws CertificateException {\n\t\t\t\t}\n\t\t\t\t@Override\n\t\t\t\tpublic void checkServerTrusted(X509Certificate[] chain,\n\t\t\t\t\t\tString authType) throws CertificateException {\n\t\t\t\t}\n\t\t\t\t@Override\n\t\t\t\tpublic X509Certificate[] getAcceptedIssuers() {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t};\n\t\t\tsslContext.init(null, new TrustManager[] { tm }, null);\n\t\t}\n\n\t\t@Override\n\t\tpublic Socket createSocket() throws IOException {\n\t\t\treturn sslContext.getSocketFactory().createSocket();\n\t\t}\n\n\t\t@Override\n\t\tpublic Socket createSocket(Socket socket, String host, int port, boolean autoClose) throws IOException, UnknownHostException {\n\t\t\treturn sslContext.getSocketFactory().createSocket(socket, host, port, autoClose);\n\t\t}\n\t}\n\n\t/**\n\t * http auth is needed\n\t */\n\tpublic class HttpAuthorizationRequiredException extends Exception {\n\t\tprivate static final long serialVersionUID = 6632422081858878147L;\n\t}\n\n\t/**\n\t * zabbix error: no api access\n\t */\n\tpublic class NoAPIAccessException extends Exception {\n\t\tprivate static final long serialVersionUID = 6381395987443456382L;\n\t}\n\n\t/**\n\t * probably too old zabbix <= 1.8.2\n\t */\n\tpublic class PreconditionFailedException extends Exception {\n\t\tprivate static final long serialVersionUID = -2529885710860745023L;\n\t}\n\n\t/**\n\t * global constants\n\t */\n\tpublic class ZabbixConfig {\n\t\tpublic static final int APPLICATION_GET_LIMIT = 1000;\n\t\tpublic static final int EVENTS_GET_LIMIT = 60;\n\t\tpublic static final int HISTORY_GET_TIME_FROM_SHIFT = 8*60*60; // -8h\n\t\tpublic static final int HISTORY_GET_LIMIT = 8000;\n\t\tpublic static final int HOSTGROUP_GET_LIMIT = 200;\n\t\tpublic static final int HOST_GET_LIMIT = 300;\n\t\tpublic static final int ITEM_GET_LIMIT = 200;\n\t\tpublic static final int TRIGGER_GET_LIMIT = 100;\n\t\tpublic static final int EVENT_GET_TIME_FROM_SHIFT = 7*24*60*60; // -7 days\n\t\tpublic static final int CACHE_LIFETIME_APPLICATIONS = 2*24*60*60; // 2 days\n\t\tpublic static final int CACHE_LIFETIME_EVENTS = 120;\n\t\tpublic static final int CACHE_LIFETIME_HISTORY_DETAILS = 4*60;\n\t\tpublic static final int CACHE_LIFETIME_HOST_GROUPS = 7*24*60*60;\n\t\tpublic static final int CACHE_LIFETIME_HOSTS = 2*24*60*60;\n\t\tpublic static final int CACHE_LIFETIME_SCREENS = 2*24*60*60;\n\t\tpublic static final int CACHE_LIFETIME_ITEMS = 4*60;\n\t\tpublic static final int CACHE_LIFETIME_TRIGGERS = 2*60;\n\t\tpublic static final long STATUS_SHOW_TRIGGER_TIME = 14*24*60*60;\n\t\tpublic static final int HTTP_CONNECTION_TIMEOUT = 30000;\n\t}\n\n\tprivate final DefaultHttpClient httpClient;\n\tprivate final SQLiteDatabase zabbixLocalDB;\n\tprivate String url;\n\tprivate String token;\n\tprivate final Context context;\n\tprivate int _transactionStack;\n\tprivate JsonParser lastStream;\n\tprivate int transformProgressStart;\n\tprivate int transformProgressEnd;\n\tprivate boolean _notAuthorizedRetry;\n\tprivate boolean isVersion2 = true;\n\n\t/**\n\t * init\n\t * @param context android context\n\t * @param zabbixLocalDB sqlite\n\t */\n\tpublic ZabbixService(Context context, SQLiteDatabase zabbixLocalDB) {\n\t\tClientConnectionManager ccm = null;\n\t\tHttpParams params = null;\n\n\t\ttry {\n\t\t\tSharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(context);\n\t\t\tif (prefs.getBoolean(\"zabbix_trust_all_ssl_ca\", false)) {\n\t\t\t\tKeyStore trustStore = KeyStore.getInstance(KeyStore.getDefaultType());\n\t\t\t\ttrustStore.load(null, null);\n\n\t\t\t\tSSLSocketFactory sf = new CustomSSLSocketFactory(trustStore);\n\t\t\t\tsf.setHostnameVerifier(SSLSocketFactory.ALLOW_ALL_HOSTNAME_VERIFIER);\n\n\t\t\t\tparams = new BasicHttpParams();\n\t\t\t\tHttpProtocolParams.setVersion(params, HttpVersion.HTTP_1_1);\n\t\t\t\tHttpProtocolParams.setContentCharset(params, HTTP.UTF_8);\n\n\t\t\t\tSchemeRegistry registry = new SchemeRegistry();\n\t\t\t\tregistry.register(new Scheme(\"http\", PlainSocketFactory.getSocketFactory(), 80));\n\t\t\t\tregistry.register(new Scheme(\"https\", sf, 443));\n\n\t\t\t\tccm = new ThreadSafeClientConnManager(params, registry);\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\t// ignore for unit test\n\t\t}\n\n\t\tif (ccm == null || params == null) {\n\t\t\thttpClient = new DefaultHttpClient();\n\t\t} else {\n\t\t\thttpClient = new DefaultHttpClient(ccm, params);\n\t\t}\n\n\t\t// if applicable http auth\n\t\ttry {\n\t\t\tSharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(context);\n\t\t\tif (prefs.getBoolean(\"http_auth_enabled\", false)) {\n\t\t\t\tString user = prefs.getString(\"http_auth_username\", \"\");\n\t\t\t\tString pwd = prefs.getString(\"http_auth_password\", \"\");\n\t\t\t\thttpClient.getCredentialsProvider().setCredentials(AuthScope.ANY, new UsernamePasswordCredentials(user, pwd));\n\t\t\t}\n\t\t} catch (java.lang.UnsupportedOperationException e1) {\n\t\t\t// for unit test\n\t\t}\n\n\t\tparams = httpClient.getParams();\n\t\tHttpClientParams.setRedirecting(params, true); // redirecting\n\t\tHttpConnectionParams.setConnectionTimeout(params, ZabbixConfig.HTTP_CONNECTION_TIMEOUT);\n\t\tthis.context = context;\n\t\tthis.zabbixLocalDB = zabbixLocalDB;\n\t}\n\n\t/**\n\t * counts the sql inserts/updates and do a transaction commit to save the memory\n\t */\n\tprivate void _commitTransactionIfRecommended() {\n\t\tif (_transactionStack++ > 50) {\n\t\t\t_endTransaction();\n\t\t\t_startTransaction();\n\t\t}\n\t}\n\n\t/**\n\t * commit sql transaction\n\t */\n\tpublic void _endTransaction() {\n\t\tif (zabbixLocalDB.inTransaction()) {\n\t\t\tzabbixLocalDB.setTransactionSuccessful();\n\t\t\tzabbixLocalDB.endTransaction();\n\t\t}\n\t}\n\n\t/**\n\t * zabbix api call. data will be parsed as json object on-the-fly.\n\t * Caution: use this only for api calls with a small return data.\n\t * @param method\n\t * @param params\n\t * @return\n\t * @throws ClientProtocolException\n\t * @throws IOException\n\t * @throws JSONException\n\t * @throws HttpAuthorizationRequiredException\n\t * @throws NoAPIAccessException\n\t */\n\tprivate JSONObject _queryBuffer(String method, JSONObject params) throws ClientProtocolException, IOException, JSONException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\tHttpPost post = new HttpPost(url);\n\t\tpost.addHeader(\"Content-Type\", \"application/json; charset=utf-8\");\n\n\t\tString json =\n\t\t\t\"{\" +\n\t\t\t\"\t\\\"jsonrpc\\\" : \\\"2.0\\\",\" +\n\t\t\t\"\t\\\"method\\\" : \\\"\"+method+\"\\\",\" +\n\t\t\t\"\t\\\"params\\\" : \"+params.toString()+\",\" +\n\t\t\t\"\t\\\"auth\\\" : \"+(token==null?\"null\":'\"'+token+'\"')+\",\" +\n\t\t\t\"\t\\\"id\\\" : 0\" +\n\t\t\t\"}\";\n\n\t\tpost.setEntity(new StringEntity(json, \"UTF-8\"));\n\t\ttry {\n\t\t\tHttpResponse resp = httpClient.execute(post);\n\t\t\tif (resp.getStatusLine().getStatusCode() == 401) {\n\t\t\t\t// http auth failed\n\t\t\t\tthrow new HttpAuthorizationRequiredException();\n\t\t\t} else if (resp.getStatusLine().getStatusCode() == 412) {\n\t\t\t\t\t// Precondition failed / Looks like Zabbix 1.8.2\n\t\t\t\tthrow new PreconditionFailedException();\n\t\t\t} else if (resp.getStatusLine().getStatusCode() == 404) {\n\t\t\t\t// file not found\n\t\t\t\tthrow new IOException(resp.getStatusLine().getStatusCode()+\" \"+resp.getStatusLine().getReasonPhrase());\n\t\t\t} else {\n\t\t\t\tLog.d(\"ZabbixService\", resp.getStatusLine().getStatusCode()+\" \"+resp.getStatusLine().getReasonPhrase());\n\t\t\t}\n\t\t\tStringBuilder total = new StringBuilder();\n\t\t\tBufferedReader rd = new BufferedReader(new InputStreamReader(resp.getEntity().getContent()));\n\t\t\tint chr;\n\t\t\twhile ((chr = rd.read()) != -1) {\n\t\t\t\ttotal.append((char) chr);\n\t\t\t}\n\t\t\tJSONObject result = new JSONObject(total.toString());\n\t\t\ttry {\n\t\t\t\tif (result.getJSONObject(\"error\") != null) {\n\t\t\t\t\tif (result.getJSONObject(\"error\").getString(\"data\").equals(\"No API access\")) {\n\t\t\t\t\t\tthrow new NoAPIAccessException();\n\t\t\t\t\t} else throw new RuntimeException(result.getJSONObject(\"error\").toString());\n\t\t\t\t}\n\t\t\t\tif (result.getString(\"data\").equals(\"Not authorized\")) {\n\t\t\t\t\t// first do a new auth and then try the same api call again\n\t\t\t\t\tif (authenticate() && !_notAuthorizedRetry) {\n\t\t\t\t\t\t_notAuthorizedRetry = true;\n\t\t\t\t\t\tJSONObject r = _queryBuffer(method, params);\n\t\t\t\t\t\t_notAuthorizedRetry = false;\n\t\t\t\t\t\treturn r;\n\t\t\t\t\t} throw new IllegalStateException(result.toString());\n\t\t\t\t}\n\t\t\t} catch (JSONException e) {\n\t\t\t\t// ignore\n\t\t\t}\n\t\t\treturn result;\n\t\t} catch (SSLPeerUnverifiedException e) {\n\t\t\t// SSL not trusted\n\t\t\tIntent intent = new Intent(ZabbixContentProvider.CONTENT_PROVIDER_INTENT_ACTION);\n\t\t\tintent.putExtra(\"flag\", ZabbixContentProvider.INTENT_FLAG_SSL_NOT_TRUSTED);\n\t\t\tcontext.sendBroadcast(intent);\n\t\t\tthrow e;\n\t\t} catch (IOException e) {\n\t\t\t// internet problem\n\t\t\t// send intent to GUI\n\t\t\tIntent intent = new Intent(ZabbixContentProvider.CONTENT_PROVIDER_INTENT_ACTION);\n\t\t\tintent.putExtra(\"flag\", ZabbixContentProvider.INTENT_FLAG_CONNECTION_FAILED);\n\t\t\tintent.putExtra(\"value\", e.getMessage());\n\t\t\tcontext.sendBroadcast(intent);\n\t\t\tthrow e;\n\t\t}\n\t}\n\n\t/**\n\t * zabbix api call as stream.\n\t * @param method\n\t * @param params\n\t * @return stream im json array wrapper\n\t * @throws JSONException\n\t * @throws IOException\n\t * @throws HttpAuthorizationRequiredException\n\t * @throws NoAPIAccessException\n\t */\n\tprivate JsonArrayOrObjectReader _queryStream(String method, JSONObject params) throws JSONException, IOException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\t// http request\n\t\tHttpPost post = new HttpPost(url);\n\t\tpost.addHeader(\"Content-Type\", \"application/json; charset=utf-8\");\n\n\t\tJSONObject json = new JSONObject()\n\t\t\t.put(\"jsonrpc\", \"2.0\")\n\t\t\t.put(\"method\", method)\n\t\t\t.put(\"params\", params)\n\t\t\t.put(\"auth\", token)\n\t\t\t.put(\"id\", 0);\n\n\t\tLog.d(\"ZabbixService\", \"_queryStream: \"+url);\n\t\tLog.d(\"ZabbixService\", \"_queryStream: \"+json.toString());\n\n\t\tpost.setEntity(new StringEntity(json.toString(), \"UTF-8\"));\n\t\ttry {\n\t\t\tHttpResponse resp = httpClient.execute(post);\n\t\t\tif (resp.getStatusLine().getStatusCode() == 401) {\n\t\t\t\t// http auth failed\n\t\t\t\tthrow new HttpAuthorizationRequiredException();\n\t\t\t}\n\n\t\t\tJsonFactory jsonFac = new JsonFactory();\n\t\t\tJsonParser jp = jsonFac.createJsonParser(resp.getEntity().getContent());\n\t\t\t// store the last stream to close it if an exception will be thrown\n\t\t\tlastStream = jp;\n\t\t\tif (jp.nextToken() != JsonToken.START_OBJECT) {\n\t\t\t\tthrow new IOException(\"Expected data to start with an Object\");\n\t\t\t}\n\t\t\tdo {\n\t\t\t\tjp.nextToken();\n\t\t\t\tif (jp.getCurrentName().equals(\"error\")) {\n\t\t\t\t\tjp.nextToken();\n\t\t\t\t\tString errortxt = \"\";\n\t\t\t\t\twhile (jp.nextToken() != JsonToken.END_OBJECT) {\n\t\t\t\t\t\terrortxt += jp.getText();\n\t\t\t\t\t}\n\t\t\t\t\tif (errortxt.contains(\"No API access\")) {\n\t\t\t\t\t\tthrow new NoAPIAccessException();\n\t\t\t\t\t} else if (errortxt.contains(\"Not authorized\")) {\n\t\t\t\t\t\t// first do a new auth and then try the same api call again\n\t\t\t\t\t\tif (authenticate() && !_notAuthorizedRetry) {\n\t\t\t\t\t\t\t_notAuthorizedRetry = true;\n\t\t\t\t\t\t\tJsonArrayOrObjectReader r = _queryStream(method, params);\n\t\t\t\t\t\t\t_notAuthorizedRetry = false;\n\t\t\t\t\t\t\treturn r;\n\t\t\t\t\t\t} else throw new IllegalStateException(errortxt);\n\t\t\t\t\t} else throw new IllegalStateException(\"JSON API Error: \"+errortxt);\n\t\t\t\t}\n\t\t\t} while (!jp.getCurrentName().equals(\"result\"));\n\n\t\t\t// result array found\n\t\t\tif (jp.nextToken() != JsonToken.START_ARRAY && jp.getCurrentToken() != JsonToken.START_OBJECT) { // go inside the array\n\t\t\t\ttry {\n\t\t\t\t\tLog.d(\"ZabbixService\", \"current token: \"+jp.getCurrentToken());\n\t\t\t\t\tLog.d(\"ZabbixService\", \"current name: \"+jp.getCurrentName());\n\t\t\t\t\tLog.d(\"ZabbixService\", \"get text: \"+jp.getText());\n\t\t\t\t\tLog.d(\"ZabbixService\", \"next value: \"+jp.nextValue());\n\t\t\t\t\tLog.d(\"ZabbixService\", \"next token: \"+jp.nextToken());\n\t\t\t\t\tLog.d(\"ZabbixService\", \"current token: \"+jp.getCurrentToken());\n\t\t\t\t\tLog.d(\"ZabbixService\", \"current name: \"+jp.getCurrentName());\n\t\t\t\t\tLog.d(\"ZabbixService\", \"get text: \"+jp.getText());\n\t\t\t\t} catch (Exception e) {}\n\t\t\t\tthrow new IOException(\"Expected data to start with an Array\");\n\t\t\t}\n\t\t\treturn new JsonArrayOrObjectReader(jp);\n\t\t} catch (SSLPeerUnverifiedException e) {\n\t\t\tthrow e;\n\t\t} catch (IOException e) {\n\t\t\t// internet problem\n\t\t\t// send intent to GUI\n\t\t\tIntent intent = new Intent(ZabbixContentProvider.CONTENT_PROVIDER_INTENT_ACTION);\n\t\t\tintent.putExtra(\"flag\", ZabbixContentProvider.INTENT_FLAG_CONNECTION_FAILED);\n\t\t\tcontext.sendBroadcast(intent);\n\t\t\tthrow e;\n\t\t}\n\t}\n\n\t/**\n\t * begin sql transaction\n\t */\n\tprivate void _startTransaction() {\n\t\tzabbixLocalDB.beginTransaction();\n\t\t_transactionStack = 0;\n\t}\n\n\t/**\n\t * acknowledge zabbix event. Sets ack-flag with comment.\n\t * Caution: This is supported only for Zabbix version >= 1.8.4\n\t * @param eventid\n\t * @param comment\n\t * @return true, success.\n\t * @throws ClientProtocolException\n\t * @throws IOException\n\t * @throws JSONException\n\t * @throws HttpAuthorizationRequiredException\n\t * @throws NoAPIAccessException\n\t */\n\tpublic boolean acknowledgeEvent(String eventid, String comment) throws ClientProtocolException, IOException, JSONException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\t// for GUI unit test, just return true\n\t\tif (comment != null && comment.equals(\"__UNIT_TEST__RETURN_TRUE__\")) return true;\n\n\t\tJSONObject result = _queryBuffer(\n\t\t\t\t\"event.acknowledge\"\n\t\t\t\t, new JSONObject()\n\t\t\t\t\t.put(\"eventids\", new JSONArray().put(eventid))\n\t\t);\n\t\t// it can be an (empty) array\n\t\ttry {\n\t\t\treturn result.getJSONObject(\"result\").getJSONArray(\"eventids\").length() == 1;\n\t\t} catch (JSONException e) {\n\t\t\t// or a json object\n\t\t\treturn result.getJSONObject(\"result\").getJSONObject(\"eventids\").length() == 1;\n\t\t}\n\t}\n\n\t/**\n\t * zabbix auth. user and pwd from app preferences\n\t * @return true success\n\t * @throws ClientProtocolException\n\t * @throws IOException\n\t * @throws JSONException\n\t * @throws HttpAuthorizationRequiredException\n\t * @throws NoAPIAccessException\n\t */\n\tpublic boolean authenticate() throws ClientProtocolException, IOException, JSONException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\tSharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(context);\n\t\tString url = prefs.getString(\"zabbix_url\", \"\").trim();\n\t\tString user = prefs.getString(\"zabbix_username\", \"\").trim();\n\t\tString password = prefs.getString(\"zabbix_password\", \"\");\n\n\t\tthis.url = url+(url.endsWith(\"/\")?\"\":'/')+\"api_jsonrpc.php\";\n\t\tLog.d(\"ZabbixContentProvider\", url+\"//\"+user);\n\n\t\ttry {\n\t\t\tJSONObject result = _queryBuffer(\n\t\t\t\t\t\"user.authenticate\"\n\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t\t.put(\"user\", user)\n\t\t\t\t\t\t.put(\"password\", password)\n\t\t\t);\n\t\t\ttoken = result.getString(\"result\");\n\t\t} catch (JSONException e) {\n\t\t\t// there's no result\n\t\t\te.printStackTrace();\n\t\t} catch (RuntimeException e) {\n\t\t\t// wrong password. token remains null\n\t\t\te.printStackTrace();\n\t\t}\n\t\tif (token != null) {\n\t\t\t// get API version\n\t\t\tJSONObject result = _queryBuffer(\n\t\t\t\t\t\"apiinfo.version\"\n\t\t\t\t\t, new JSONObject()\n\t\t\t);\n\t\t\tisVersion2 = result.getString(\"result\").equals(\"1.4\");\n\t\t\tLog.i(\"ZabbixService\", \"Zabbix Server Version: isVersion2=\"+isVersion2);\n\t\t}\n\t\treturn token != null;\n\t}\n\n\t/**\n\t * close the last http stream\n\t */\n\tpublic void closeLastStream() {\n\t\tif (lastStream != null && !lastStream.isClosed()) {\n\t\t\ttry {\n\t\t\t\tlastStream.close();\n\t\t\t} catch (IOException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate void importApplications(long hostid, long itemid, JsonArrayOrObjectReader jsonArray) throws JsonParseException, NumberFormatException, IOException {\n\t\tint num = 0;\n\t\tJsonObjectReader application;\n\t\twhile ((application = jsonArray.next()) != null) {\n\t\t\tApplicationData app = new ApplicationData();\n\t\t\twhile (application.nextValueToken()) {\n\t\t\t\tString propName = application.getCurrentName();\n\t\t\t\tif (propName.equals(ApplicationData.COLUMN_APPLICATIONID)) {\n\t\t\t\t\tapp.set(ApplicationData.COLUMN_APPLICATIONID, Long.parseLong(application.getText()));\n\t\t\t\t} else if (propName.equals(ApplicationData.COLUMN_NAME)) {\n\t\t\t\t\tapp.set(ApplicationData.COLUMN_NAME, application.getText());\n\t\t\t\t} else if (propName.equals(ApplicationData.COLUMN_HOSTID)) {\n\t\t\t\t\tapp.set(ApplicationData.COLUMN_HOSTID, Long.parseLong(application.getText()));\n\t\t\t\t} else {\n\t\t\t\t\tapplication.nextProperty();\n\t\t\t\t}\n\t\t\t}\n\t\t\t// create applications that does not exist\n\t\t\tapp.insert(zabbixLocalDB, ApplicationData.COLUMN_APPLICATIONID);\n\t\t\t_commitTransactionIfRecommended();\n\n\t\t\t// create ApplicationItemRelation\n\t\t\tlong appid = (Long) app.get(ApplicationData.COLUMN_APPLICATIONID);\n\t\t\tApplicationItemRelationData rel = new ApplicationItemRelationData();\n\t\t\trel.set(ApplicationItemRelationData.COLUMN_APPLICATIONID, appid);\n\t\t\trel.set(ApplicationItemRelationData.COLUMN_ITEMID, itemid);\n\t\t\trel.set(ApplicationItemRelationData.COLUMN_HOSTID, hostid);\n\t\t\trel.insert(zabbixLocalDB);\n\t\t\t_commitTransactionIfRecommended();\n\n\t\t\tnum++;\n\t\t}\n\t\tif (num == 0) {\n\t\t\t// if there's no application, the ID #0 must be added (for other)\n\t\t\tApplicationItemRelationData rel = new ApplicationItemRelationData();\n\t\t\trel.set(ApplicationItemRelationData.COLUMN_APPLICATIONID, 0);\n\t\t\trel.set(ApplicationItemRelationData.COLUMN_ITEMID, itemid);\n\t\t\trel.set(ApplicationItemRelationData.COLUMN_HOSTID, hostid);\n\t\t\trel.insert(zabbixLocalDB);\n\n\t\t\t// if #0 \"other\" does not exist yet, it has to be created\n\t\t\tApplicationData app = new ApplicationData();\n\t\t\tapp.set(ApplicationData.COLUMN_APPLICATIONID, 0);\n\t\t\tapp.set(ApplicationData.COLUMN_NAME, \"- \"+context.getResources().getString(R.string.other)+\" -\");\n\t\t\tapp.insert(zabbixLocalDB, ApplicationData.COLUMN_APPLICATIONID);\n\t\t}\n\t}\n\n\t/**\n\t * import the newest event of a trigger\n\t * @param triggerid\n\t * @throws JSONException\n\t * @throws IOException\n\t * @throws HttpAuthorizationRequiredException\n\t * @throws NoAPIAccessException\n\t */\n\tpublic void importEventByTriggerId(String triggerid) throws JSONException, IOException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\tif (!isCached(EventData.TABLE_NAME, \"triggerid=\"+triggerid)) {\n\t\t\t_startTransaction();\n\t\t\tzabbixLocalDB.delete(EventData.TABLE_NAME, EventData.COLUMN_OBJECTID+\"=\"+triggerid, null);\n\n\t\t\tJSONObject params = new JSONObject()\n\t\t\t\t.put(\"output\", \"extend\")\n\t\t\t\t.put(isVersion2?\"selectHosts\":\"select_hosts\", \"extend\")\n\t\t\t\t.put(\"triggerids\", new JSONArray().put(triggerid))\n\t\t\t\t.put(\"limit\", 1)\n\t\t\t\t.put(\"source\", 0);\n\t\t\tif (!isVersion2) {\n\t\t\t\tparams.put(\"sortfield\", \"clock\")\n\t\t\t\t\t.put(\"sortorder\", \"DESC\");\n\t\t\t}\n\n\t\t\tJsonArrayOrObjectReader events = _queryStream(\n\t\t\t\t\t\"event.get\"\n\t\t\t\t\t, params\n\t\t\t);\n\t\t\timportEvents(events, null);\n\t\t\tevents.close();\n\n\t\t\tsetCached(EventData.TABLE_NAME, \"triggerid=\"+triggerid, ZabbixConfig.CACHE_LIFETIME_EVENTS);\n\t\t\t_endTransaction();\n\t\t}\n\t}\n\n\t/**\n\t * import the newest events\n\t * @throws ClientProtocolException\n\t * @throws IOException\n\t * @throws JSONException\n\t * @throws HttpAuthorizationRequiredException\n\t * @throws NoAPIAccessException\n\t */\n\tpublic void importEvents() throws ClientProtocolException, IOException, JSONException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\tif (!isCached(EventData.TABLE_NAME, null)) {\n\t\t\t_startTransaction();\n\t\t\tzabbixLocalDB.delete(EventData.TABLE_NAME, null, null);\n\t\t\tzabbixLocalDB.delete(TriggerData.TABLE_NAME, null, null);\n\t\t\tzabbixLocalDB.delete(CacheData.TABLE_NAME, CacheData.COLUMN_KIND+\"='\"+EventData.TABLE_NAME+\"'\", null);\n\t\t\tzabbixLocalDB.delete(CacheData.TABLE_NAME, CacheData.COLUMN_KIND+\"='\"+TriggerData.TABLE_NAME+\"'\", null);\n\n\t\t\tint numEvents = ZabbixConfig.EVENTS_GET_LIMIT;\n\n\t\t\tJSONObject params = new JSONObject()\n\t\t\t\t.put(\"output\", \"extend\")\n\t\t\t\t.put(\"limit\", ZabbixConfig.EVENTS_GET_LIMIT)\n\t\t\t\t.put(isVersion2?\"selectHosts\":\"select_hosts\", \"extend\")\n\t\t\t\t.put(isVersion2?\"selectTriggers\":\"select_triggers\", \"extend\")\n\t\t\t\t.put(\"source\", 0)\n\t\t\t\t.put(\"time_from\", (new Date().getTime()/1000) - ZabbixConfig.EVENT_GET_TIME_FROM_SHIFT);\n\t\t\tif (!isVersion2) {\n\t\t\t\t// in Zabbix version <2.0, this is not default\n\t\t\t\tparams.put(\"sortfield\", \"clock\")\n\t\t\t\t\t.put(\"sortorder\", \"DESC\");\n\t\t\t}\n\t\t\tJsonArrayOrObjectReader events = _queryStream(\n\t\t\t\t\t\"event.get\"\n\t\t\t\t\t, params\n\t\t\t);\n\t\t\timportEvents(events, numEvents);\n\t\t\tevents.close();\n\n\t\t\tsetCached(EventData.TABLE_NAME, null, ZabbixConfig.CACHE_LIFETIME_EVENTS);\n\t\t\t_endTransaction();\n\t\t}\n\t}\n\n\t/**\n\t * @param events stream\n\t * @param numEvents if null, no progressbar-update AND only isert, if it does not exist. If !null, progressbar-update AND always insert without checking\n\t * @throws JsonParseException\n\t * @throws IOException\n\t */\n\tprivate void importEvents(JsonArrayOrObjectReader events, Integer numEvents) throws JsonParseException, IOException {\n\t\tint i=0;\n\t\tJsonObjectReader eventReader;\n\t\twhile ((eventReader = events.next()) != null) {\n\t\t\tEventData e = new EventData();\n\t\t\twhile (eventReader.nextValueToken()) {\n\t\t\t\tString propName = eventReader.getCurrentName();\n\t\t\t\tif (propName.equals(\"hosts\")) {\n\t\t\t\t\t// import hosts\n\t\t\t\t\tString hostnames = (String) importHosts(eventReader.getJsonArray(), null)[0];\n\t\t\t\t\t// store hosts namen\n\t\t\t\t\te.set(EventData.COLUMN_HOSTS, hostnames);\n\t\t\t\t} else if (propName.equals(\"triggers\")) {\n\t\t\t\t\t// import triggers\n\t\t\t\t\timportTriggers(eventReader.getJsonArray());\n\t\t\t\t} else if (propName.equals(EventData.COLUMN_EVENTID)) {\n\t\t\t\t\te.set(EventData.COLUMN_EVENTID, Long.parseLong(eventReader.getText()));\n\t\t\t\t} else if (propName.equals(EventData.COLUMN_CLOCK)) {\n\t\t\t\t\te.set(EventData.COLUMN_CLOCK, Integer.parseInt(eventReader.getText()));\n\t\t\t\t} else if (propName.equals(EventData.COLUMN_OBJECTID)) {\n\t\t\t\t\te.set(EventData.COLUMN_OBJECTID, Long.parseLong(eventReader.getText()));\n\t\t\t\t} else if (propName.equals(EventData.COLUMN_ACK)) {\n\t\t\t\t\te.set(EventData.COLUMN_ACK, Integer.parseInt(eventReader.getText()) == 1);\n\t\t\t\t} else if (propName.equals(EventData.COLUMN_VALUE)) {\n\t\t\t\t\te.set(EventData.COLUMN_VALUE, Integer.parseInt(eventReader.getText()));\n\t\t\t\t} else {\n\t\t\t\t\teventReader.nextProperty();\n\t\t\t\t}\n\t\t\t}\n\t\t\t// event is parsed and can be inserted into the db\n\t\t\tif (numEvents == null) {\n\t\t\t\te.insert(zabbixLocalDB, EventData.COLUMN_EVENTID);\n\t\t\t} else {\n\t\t\t\te.insert(zabbixLocalDB);\n\t\t\t\tif (++i % 10 == 0) {\n\t\t\t\t\tshowProgress(i*100/numEvents);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t_commitTransactionIfRecommended();\n\t\t}\n\t}\n\n\t/**\n\t * import graph items\n\t *\n\t * @param graphItems\n\t * @return true, if graphid column has to be updated from -1 to the correct graphid later.\n\t * @throws JsonParseException\n\t * @throws NumberFormatException\n\t * @throws IOException\n\t */\n\tprivate boolean importGraphItems(JsonArrayOrObjectReader graphItems) throws JsonParseException, NumberFormatException, IOException {\n\t\tboolean mustSetGraphid = false;\n\t\tJsonObjectReader graphItemReader;\n\t\twhile ((graphItemReader = graphItems.next()) != null) {\n\t\t\tGraphItemData gi = new GraphItemData();\n\t\t\twhile (graphItemReader.nextValueToken()) {\n\t\t\t\tString propName = graphItemReader.getCurrentName();\n\t\t\t\tif (propName.equals(\"gitemid\")) {\n\t\t\t\t\tgi.set(GraphItemData.COLUMN_GRAPHITEMID, Long.parseLong(graphItemReader.getText()));\n\t\t\t\t} else if (propName.equals(GraphItemData.COLUMN_GRAPHID)) {\n\t\t\t\t\tgi.set(GraphItemData.COLUMN_GRAPHID, Long.parseLong(graphItemReader.getText()));\n\t\t\t\t} else if (propName.equals(GraphItemData.COLUMN_ITEMID)) {\n\t\t\t\t\tgi.set(GraphItemData.COLUMN_ITEMID, Long.parseLong(graphItemReader.getText()));\n\t\t\t\t} else if (propName.equals(GraphItemData.COLUMN_COLOR)) {\n\t\t\t\t\t// hex string => color int\n\t\t\t\t\tgi.set(GraphItemData.COLUMN_COLOR, Color.parseColor(\"#\"+graphItemReader.getText()));\n\t\t\t\t} else {\n\t\t\t\t\tgraphItemReader.nextProperty();\n\t\t\t\t}\n\t\t\t}\n\t\t\t// if graphid-column was not set, this must be done later. temporary graphid=-1\n\t\t\tif (gi.get(GraphItemData.COLUMN_GRAPHID) == null) {\n\t\t\t\tgi.set(GraphItemData.COLUMN_GRAPHID, -1);\n\t\t\t\tmustSetGraphid = true;\n\t\t\t}\n\t\t\tgi.insert(zabbixLocalDB);\n\t\t}\n\t\treturn mustSetGraphid;\n\t}\n\n\tpublic void importGraphsForScreen(long screenid) throws ClientProtocolException, IOException, JSONException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\tif (!isCached(GraphData.TABLE_NAME, \"screenid=\"+screenid)) {\n\t\t\t_startTransaction();\n\n\t\t\t// collect all graphids\n\t\t\tSet<Long> graphids = new HashSet<Long>();\n\t\t\tCursor cur = zabbixLocalDB.query(ScreenItemData.TABLE_NAME, null, ScreenItemData.COLUMN_SCREENID+\"=\"+screenid, null, null, null, null);\n\t\t\twhile (cur.moveToNext()) {\n\t\t\t\tgraphids.add(cur.getLong(cur.getColumnIndex(ScreenItemData.COLUMN_RESOURCEID)));\n\t\t\t}\n\n\t\t\t// delete old graphs\n\t\t\tString str_graphids = graphids.toString().replace(\"[\", \"\").replace(\"]\", \"\");\n\t\t\tif (str_graphids.length()>0) {\n\t\t\t\tzabbixLocalDB.delete(GraphData.TABLE_NAME, GraphData.COLUMN_GRAPHID+\" IN (\"+str_graphids+\")\", null);\n\t\t\t\tzabbixLocalDB.delete(GraphItemData.TABLE_NAME, GraphItemData.COLUMN_GRAPHID+\" IN (\"+str_graphids+\")\", null);\n\t\t\t}\n\t\t\tzabbixLocalDB.delete(CacheData.TABLE_NAME, CacheData.COLUMN_KIND+\"='\"+GraphData.TABLE_NAME+\"' AND \"+CacheData.COLUMN_FILTER+\"='screenid=\"+screenid+'\\'', null);\n\n\t\t\tJsonArrayOrObjectReader graphs = _queryStream(\n\t\t\t\t\t\"graph.get\"\n\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t\t.put(isVersion2?\"selectGraphItems\":\"select_graph_items\", \"extend\")\n\t\t\t\t\t\t.put(isVersion2?\"selectItems\":\"select_items\", \"extend\")\n\t\t\t\t\t\t.put(\"output\", \"extend\")\n\t\t\t\t\t\t.put(\"graphids\", new JSONArray(graphids))\n\t\t\t);\n\t\t\tJsonObjectReader graphReader;\n\t\t\twhile ((graphReader = graphs.next()) != null) {\n\t\t\t\tboolean mustSetGraphid = false;\n\t\t\t\tGraphData scr = new GraphData();\n\t\t\t\twhile (graphReader.nextValueToken()) {\n\t\t\t\t\tString propName = graphReader.getCurrentName();\n\t\t\t\t\tif (propName.equals(GraphData.COLUMN_GRAPHID)) {\n\t\t\t\t\t\tscr.set(GraphData.COLUMN_GRAPHID, Long.parseLong(graphReader.getText()));\n\t\t\t\t\t} else if (propName.equals(GraphData.COLUMN_NAME)) {\n\t\t\t\t\t\tscr.set(GraphData.COLUMN_NAME, graphReader.getText());\n\t\t\t\t\t} else if (propName.equals(\"gitems\")) {\n\t\t\t\t\t\tmustSetGraphid = importGraphItems(graphReader.getJsonArray());\n\t\t\t\t\t} else if (propName.equals(\"items\")) {\n\t\t\t\t\t\timportItems(graphReader.getJsonArray(), 0, true);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tgraphReader.nextProperty();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tscr.insert(zabbixLocalDB);\n\t\t\t\tif (mustSetGraphid) {\n\t\t\t\t\tContentValues values = new ContentValues(1);\n\t\t\t\t\tvalues.put(GraphItemData.COLUMN_GRAPHID, (Long) scr.get(GraphData.COLUMN_GRAPHID));\n\t\t\t\t\tzabbixLocalDB.update(\n\t\t\t\t\t\t\tGraphItemData.TABLE_NAME\n\t\t\t\t\t\t\t, values\n\t\t\t\t\t\t\t, GraphItemData.COLUMN_GRAPHID+\"=-1\"\n\t\t\t\t\t\t\t, null);\n\t\t\t\t}\n\t\t\t}\n\t\t\tgraphs.close();\n\n\t\t\tsetCached(GraphData.TABLE_NAME, \"screenid=\"+screenid, ZabbixConfig.CACHE_LIFETIME_SCREENS);\n\t\t\t_endTransaction();\n\t\t}\n\t}\n\n\tpublic void importHistoryDetails(String itemid) throws ClientProtocolException, IOException, JSONException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\tif (!isCached(HistoryDetailData.TABLE_NAME, itemid)) {\n\t\t\t_startTransaction();\n\t\t\tzabbixLocalDB.delete(HistoryDetailData.TABLE_NAME, HistoryDetailData.COLUMN_ITEMID+\"=\"+itemid, null);\n\n\t\t\t// the past 2 hours\n\t\t\tlong time_till = new Date().getTime() / 1000;\n\t\t\tlong time_from = time_till - ZabbixConfig.HISTORY_GET_TIME_FROM_SHIFT; // jetzt-2h\n\n\t\t\t// Workaround: historydetails only comes if you use the correct \"history\"-parameter.\n\t\t\t// this parameter can be \"null\" or a number 0-4. Because we don't know when to use which,\n\t\t\t// we try them all, until we get results.\n\t\t\tInteger historytype = null;\n\t\t\tJSONObject result = _queryBuffer(\n\t\t\t\t\t\"history.get\"\n\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t\t.put(\"limit\", 1)\n\t\t\t\t\t\t.put(\"history\", historytype) // for integer ?\n\t\t\t\t\t\t.put(\"itemids\", new JSONArray().put(itemid))\n\t\t\t\t\t\t.put(\"time_from\", time_from)\n\t\t\t);\n\n\t\t\tJSONArray testHistorydetails = result.getJSONArray(\"result\");\n\t\t\tif (testHistorydetails.length() == 0) {\n\t\t\t\thistorytype = -1;\n\t\t\t\twhile (testHistorydetails.length() == 0 && ++historytype <= 4) {\n\t\t\t\t\t// if we get an empty array, we try another history parameter\n\t\t\t\t\tresult = _queryBuffer(\n\t\t\t\t\t\t\t\"history.get\"\n\t\t\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t\t\t\t.put(\"output\", \"extend\")\n\t\t\t\t\t\t\t\t.put(\"limit\", 1)\n\t\t\t\t\t\t\t\t.put(\"history\", historytype)\n\t\t\t\t\t\t\t\t.put(\"itemids\", new JSONArray().put(itemid))\n\t\t\t\t\t\t\t\t.put(\"time_from\", time_from)\n\t\t\t\t\t);\n\t\t\t\t\ttestHistorydetails = result.getJSONArray(\"result\");\n\t\t\t\t}\n\t\t\t}\n\t\t\t// correct historytype found and there are data\n\t\t\tif (testHistorydetails.length() > 0) {\n\t\t\t\t// count of the entries cannot be detected (zabbix bug),\n\t\t\t\t// so we use a fiction\n\t\t\t\tint numDetails = 400;\n\t\t\t\tint curI=0;\n\t\t\t\tJsonArrayOrObjectReader historydetails = _queryStream(\n\t\t\t\t\t\t\"history.get\"\n\t\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t\t\t.put(\"output\", \"extend\")\n\t\t\t\t\t\t\t.put(\"limit\", ZabbixConfig.HISTORY_GET_LIMIT)\n\t\t\t\t\t\t\t.put(\"history\", historytype)\n\t\t\t\t\t\t\t.put(\"itemids\", new JSONArray().put(itemid))\n\t\t\t\t\t\t\t.put(\"time_from\", time_from)\n\t\t\t\t\t\t\t.put(\"sortfield\", \"clock\")\n\t\t\t\t\t\t\t.put(\"sortorder\", \"DESC\")\n\t\t\t\t);\n\t\t\t\tJsonObjectReader historydetail;\n\t\t\t\ttry {\n\t\t\t\t\tint selI = 0;\n\t\t\t\t\twhile ((historydetail = historydetails.next()) != null) {\n\t\t\t\t\t\t// save only every 20th\n\t\t\t\t\t\tif (selI++ % 20 != 0) {\n\t\t\t\t\t\t\twhile (historydetail.nextValueToken()) {\n\t\t\t\t\t\t\t\thistorydetail.nextProperty();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tHistoryDetailData h = new HistoryDetailData();\n\t\t\t\t\t\twhile (historydetail.nextValueToken()) {\n\t\t\t\t\t\t\tString propName = historydetail.getCurrentName();\n\t\t\t\t\t\t\tif (propName.equals(HistoryDetailData.COLUMN_CLOCK)) {\n\t\t\t\t\t\t\t\th.set(HistoryDetailData.COLUMN_CLOCK, Integer.parseInt(historydetail.getText()));\n\t\t\t\t\t\t\t} else if (propName.equals(HistoryDetailData.COLUMN_ITEMID)) {\n\t\t\t\t\t\t\t\th.set(HistoryDetailData.COLUMN_ITEMID, Long.parseLong(historydetail.getText()));\n\t\t\t\t\t\t\t} else if (propName.equals(HistoryDetailData.COLUMN_VALUE)) {\n\t\t\t\t\t\t\t\th.set(HistoryDetailData.COLUMN_VALUE, Double.parseDouble(historydetail.getText()));\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\thistorydetail.nextProperty();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\th.insert(zabbixLocalDB);\n\t\t\t\t\t\tif (++curI % 10 == 0) {\n\t\t\t\t\t\t\tshowProgress(Math.min(curI*100/numDetails, 84));\n\t\t\t\t\t\t}\n\t\t\t\t\t\t_commitTransactionIfRecommended();\n\t\t\t\t\t}\n\t\t\t\t} catch (NumberFormatException e) {\n\t\t\t\t\t// data are unuseable, e.g. because it's a string\n\t\t\t\t}\n\t\t\t\thistorydetails.close();\n\t\t\t}\n\t\t\tsetCached(HistoryDetailData.TABLE_NAME, itemid, ZabbixConfig.CACHE_LIFETIME_HISTORY_DETAILS);\n\t\t\t_endTransaction();\n\t\t}\n\t}\n\n\tprivate long importHostGroups(JsonArrayOrObjectReader jsonArray) throws JsonParseException, IOException {\n\t\tlong firstHostGroupId = -1;\n\t\tJsonObjectReader hostReader;\n\t\twhile ((hostReader = jsonArray.next()) != null) {\n\t\t\tHostGroupData h = new HostGroupData();\n\t\t\twhile (hostReader.nextValueToken()) {\n\t\t\t\tString propName = hostReader.getCurrentName();\n\t\t\t\tif (propName.equals(HostGroupData.COLUMN_GROUPID)) {\n\t\t\t\t\tlong id = Long.parseLong(hostReader.getText());\n\t\t\t\t\tif (firstHostGroupId == -1) firstHostGroupId = id;\n\t\t\t\t\th.set(HostGroupData.COLUMN_GROUPID, id);\n\t\t\t\t} else if (propName.equals(HostGroupData.COLUMN_NAME)) {\n\t\t\t\t\th.set(HostGroupData.COLUMN_NAME, hostReader.getText());\n\t\t\t\t} else {\n\t\t\t\t\thostReader.nextProperty();\n\t\t\t\t}\n\t\t\t}\n\t\t\th.insert(zabbixLocalDB, HostGroupData.COLUMN_GROUPID);\n\t\t\t_commitTransactionIfRecommended();\n\t\t}\n\n\t\treturn firstHostGroupId;\n\t}\n\n\t/**\n\t * import the hosts from stream\n\t * @param jsonArray stream\n\t * @param numHosts count of hosts for progressbar. null if unknown.\n\t * @return Object[] {(String) comma-separated all Hostnames, (Long) 1. host id}\n\t * @throws JsonParseException\n\t * @throws IOException\n\t */\n\tprivate Object[] importHosts(JsonArrayOrObjectReader jsonArray, Integer numHosts) throws JsonParseException, IOException {\n\t\tList<String> hostnames = new ArrayList<String>();\n\t\tlong firstHostId = -1;\n\t\tJsonObjectReader hostReader;\n\t\tint i=0;\n\t\twhile ((hostReader = jsonArray.next()) != null) {\n\t\t\tHostData h = new HostData();\n\t\t\twhile (hostReader.nextValueToken()) {\n\t\t\t\tString propName = hostReader.getCurrentName();\n\t\t\t\tif (propName.equals(HostData.COLUMN_HOSTID)) {\n\t\t\t\t\th.set(HostData.COLUMN_HOSTID, Long.parseLong(hostReader.getText()));\n\t\t\t\t\tif (firstHostId == -1) {\n\t\t\t\t\t\tfirstHostId = (Long) h.get(HostData.COLUMN_HOSTID);\n\t\t\t\t\t}\n\t\t\t\t} else if (propName.equals(HostData.COLUMN_HOST)) {\n\t\t\t\t\tString host = hostReader.getText();\n\t\t\t\t\thostnames.add(host);\n\t\t\t\t\th.set(HostData.COLUMN_HOST, host);\n\t\t\t\t} else if (propName.equals(\"groups\")) {\n\t\t\t\t\tlong groupid = importHostGroups(hostReader.getJsonArray());\n\t\t\t\t\tif (groupid != -1) {\n\t\t\t\t\t\th.set(HostData.COLUMN_GROUPID, groupid);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\thostReader.nextProperty();\n\t\t\t\t}\n\t\t\t}\n\t\t\t// host without group will get group #0 (other)\n\t\t\tif (h.get(HostData.COLUMN_GROUPID) == null) {\n\t\t\t\th.set(HostData.COLUMN_GROUPID, 0);\n\t\t\t\t// create \"other\" hostgroup #1\n\t\t\t\tHostGroupData hg = new HostGroupData();\n\t\t\t\thg.set(HostGroupData.COLUMN_GROUPID, 0);\n\t\t\t\thg.set(HostGroupData.COLUMN_NAME, \"- \"+context.getResources().getString(R.string.other)+\" -\");\n\t\t\t\thg.insert(zabbixLocalDB, HostGroupData.COLUMN_GROUPID);\n\t\t\t}\n\t\t\th.insert(zabbixLocalDB, HostData.COLUMN_HOSTID);\n\t\t\tif (numHosts != null && ++i % 10 == 0) {\n\t\t\t\tshowProgress(i*100/numHosts);\n\t\t\t}\n\t\t\t_commitTransactionIfRecommended();\n\t\t}\n\n\t\treturn new Object[] {hostnames.toString().replaceAll(\"[\\\\[\\\\]]\", \"\"), firstHostId};\n\t}\n\n\tpublic void importHostsAndGroups() throws JSONException, IOException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\tif (!isCached(HostData.TABLE_NAME, null)) {\n\t\t\t_startTransaction();\n\t\t\tzabbixLocalDB.delete(HostData.TABLE_NAME, null, null);\n\t\t\tzabbixLocalDB.delete(HostGroupData.TABLE_NAME, null, null);\n\n\t\t\t// get count of hosts\n\t\t\tJSONObject result = _queryBuffer(\n\t\t\t\t\t\"host.get\"\n\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t\t.put(\"countOutput\", 1)\n\t\t\t\t\t\t.put(\"limit\", ZabbixConfig.HOST_GET_LIMIT)\n\t\t\t\t\t\t.put(isVersion2?\"selectGroups\":\"select_groups\", \"extend\")\n\t\t\t);\n\t\t\tint numHosts = result.getInt(\"result\");\n\t\t\tJsonArrayOrObjectReader hosts = _queryStream(\n\t\t\t\t\t\"host.get\"\n\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t\t.put(\"output\", \"extend\")\n\t\t\t\t\t\t.put(\"limit\", ZabbixConfig.HOST_GET_LIMIT)\n\t\t\t\t\t\t.put(isVersion2?\"selectGroups\":\"select_groups\", \"extend\")\n\t\t\t);\n\t\t\timportHosts(hosts, numHosts);\n\t\t\thosts.close();\n\n\t\t\tsetCached(HostData.TABLE_NAME, null, ZabbixConfig.CACHE_LIFETIME_HOSTS);\n\t\t\t_endTransaction();\n\t\t}\n\t}\n\n\t/**\n\t * import items from stream.\n\t * @param items stream\n\t * @param numItems count for progressbar, if 0 no progressbarupdate\n\t * @param checkBeforeInsert if true, only make an insert if item does not exist\n\t * @return the first item id\n\t * @throws JsonParseException\n\t * @throws IOException\n\t */\n\tprivate long importItems(JsonArrayOrObjectReader items, int numItems, boolean checkBeforeInsert) throws JsonParseException, IOException {\n\t\tlong firstItemId = -1;\n\t\tint curI=0;\n\t\tJsonObjectReader itemReader;\n\t\twhile ((itemReader = items.next()) != null) {\n\t\t\tItemData i = new ItemData();\n\t\t\tString key_ = null;\n\t\t\twhile (itemReader.nextValueToken()) {\n\t\t\t\tString propName = itemReader.getCurrentName();\n\t\t\t\tif (propName.equals(ItemData.COLUMN_ITEMID)) {\n\t\t\t\t\ti.set(ItemData.COLUMN_ITEMID, Long.parseLong(itemReader.getText()));\n\t\t\t\t\tif (firstItemId == -1) {\n\t\t\t\t\t\tfirstItemId = (Long) i.get(ItemData.COLUMN_ITEMID);\n\t\t\t\t\t}\n\t\t\t\t} else if (propName.equals(ItemData.COLUMN_HOSTID)) {\n\t\t\t\t\ti.set(ItemData.COLUMN_HOSTID, Long.parseLong(itemReader.getText()));\n\t\t\t\t} else if (propName.equals(ItemData.COLUMN_DESCRIPTION) || propName.equals(\"name\")) {\n\t\t\t\t\t// since zabbix 2.x is the name of the item \"name\"\n\t\t\t\t\t// before zabbix 2.x the name field was \"description\"\n\t\t\t\t\tif (isVersion2 && propName.equals(\"name\")) {\n\t\t\t\t\t\ti.set(ItemData.COLUMN_DESCRIPTION, itemReader.getText());\n\t\t\t\t\t} else if (!isVersion2) {\n\t\t\t\t\t\ti.set(ItemData.COLUMN_DESCRIPTION, itemReader.getText());\n\t\t\t\t\t}\n\t\t\t\t} else if (propName.equals(ItemData.COLUMN_LASTCLOCK)) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\ti.set(ItemData.COLUMN_LASTCLOCK, Integer.parseInt(itemReader.getText()));\n\t\t\t\t\t} catch (NumberFormatException e) {\n\t\t\t\t\t\t// ignore\n\t\t\t\t\t}\n\t\t\t\t} else if (propName.equals(ItemData.COLUMN_LASTVALUE)) {\n\t\t\t\t\ti.set(ItemData.COLUMN_LASTVALUE, itemReader.getText());\n\t\t\t\t} else if (propName.equals(ItemData.COLUMN_UNITS)) {\n\t\t\t\t\ti.set(ItemData.COLUMN_UNITS, itemReader.getText());\n\t\t\t\t} else if (propName.equals(\"key_\")) {\n\t\t\t\t\tkey_ = itemReader.getText();\n\t\t\t\t} else if (propName.equals(\"applications\")) {\n\t\t\t\t\t// at this point itemid and hostid is unknown\n\t\t\t\t\t// because of this, all applicationrelations will be saved with itemid and hostid \"-1\".\n\t\t\t\t\t// later the IDs will be replaced with the correct\n\t\t\t\t\timportApplications(-1, -1, itemReader.getJsonArray());\n\t\t\t\t} else {\n\t\t\t\t\titemReader.nextProperty();\n\t\t\t\t}\n\t\t\t}\n\t\t\t// if applicable replace placeholder\n\t\t\tString description = (String) i.get(ItemData.COLUMN_DESCRIPTION);\n\t\t\tif (description.matches(\".*\\\\$[0-9].*\")) {\n\t\t\t\tif (key_ != null && key_.indexOf('[') != -1) {\n\t\t\t\t\tString[] keys = key_.substring(key_.indexOf('[')+1, key_.indexOf(']')).split(\",\");\n\t\t\t\t\tfor (int ix=0; ix<keys.length; ix++) {\n\t\t\t\t\t\tdescription = description.replace(\"$\"+(ix+1), keys[ix]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\ti.set(ItemData.COLUMN_DESCRIPTION, description);\n\t\t\tif (checkBeforeInsert) {\n\t\t\t\ti.insert(zabbixLocalDB, ItemData.COLUMN_ITEMID);\n\t\t\t} else {\n\t\t\t\ti.insert(zabbixLocalDB);\n\t\t\t}\n\t\t\tif (numItems > 0 && ++curI % 10 == 0) {\n\t\t\t\tshowProgress(curI*100/numItems);\n\t\t\t}\n\n\t\t\t// now the \"-1\" IDs of applicationsrelation will be replaced with the correct itemID\n\t\t\tContentValues values = new ContentValues(2);\n\t\t\tvalues.put(ApplicationItemRelationData.COLUMN_ITEMID, (Long) i.get(ItemData.COLUMN_ITEMID));\n\t\t\tvalues.put(ApplicationItemRelationData.COLUMN_HOSTID, (Long) i.get(ItemData.COLUMN_HOSTID));\n\t\t\tzabbixLocalDB.update(\n\t\t\t\t\tApplicationItemRelationData.TABLE_NAME\n\t\t\t\t\t, values\n\t\t\t\t\t, ApplicationItemRelationData.COLUMN_ITEMID+\"=-1\"\n\t\t\t\t\t, null\n\t\t\t);\n\t\t}\n\t\treturn firstItemId;\n\t}\n\n\tpublic void importItems(long hostid) throws JSONException, IOException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\tif (!isCached(ItemData.TABLE_NAME, \"hostid=\"+hostid)) {\n\t\t\t_startTransaction();\n\t\t\tzabbixLocalDB.delete(ItemData.TABLE_NAME, ItemData.COLUMN_HOSTID+\"=\"+hostid, null);\n\t\t\tzabbixLocalDB.delete(ApplicationItemRelationData.TABLE_NAME, ApplicationItemRelationData.COLUMN_HOSTID+\"=\"+hostid, null);\n\n\t\t\t// count of items\n\t\t\tJSONObject result = _queryBuffer(\n\t\t\t\t\t\"item.get\"\n\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t.put(\"output\", \"extend\")\n\t\t\t\t\t.put(\"countOutput\", 1)\n\t\t\t\t\t.put(\"limit\", ZabbixConfig.ITEM_GET_LIMIT)\n\t\t\t\t\t.put(\"hostids\", new JSONArray().put(hostid))\n\t\t\t);\n\t\t\tint numItems = result.getInt(\"result\");\n\t\t\tJsonArrayOrObjectReader items = _queryStream(\n\t\t\t\t\t\"item.get\"\n\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t\t.put(\"output\", \"extend\")\n\t\t\t\t\t\t.put(\"limit\", ZabbixConfig.ITEM_GET_LIMIT)\n\t\t\t\t\t\t.put(isVersion2?\"selectApplications\":\"select_applications\", \"extend\")\n\t\t\t\t\t\t.put(\"hostids\", new JSONArray().put(hostid))\n\t\t\t);\n\t\t\timportItems(items, numItems, false);\n\t\t\titems.close();\n\n\t\t\tsetCached(ItemData.TABLE_NAME, \"hostid=\"+hostid, ZabbixConfig.CACHE_LIFETIME_ITEMS);\n\t\t\t_endTransaction();\n\t\t}\n\t}\n\n\tprivate void importScreenItems(JsonArrayOrObjectReader screenItems) throws JsonParseException, NumberFormatException, IOException {\n\t\tJsonObjectReader screenItemReader;\n\t\twhile ((screenItemReader = screenItems.next()) != null) {\n\t\t\tScreenItemData si = new ScreenItemData();\n\t\t\tint resourcetype = -1;\n\t\t\twhile (screenItemReader.nextValueToken()) {\n\t\t\t\tString propName = screenItemReader.getCurrentName();\n\t\t\t\tif (propName.equals(ScreenItemData.COLUMN_SCREENITEMID)) {\n\t\t\t\t\tsi.set(ScreenItemData.COLUMN_SCREENITEMID, Long.parseLong(screenItemReader.getText()));\n\t\t\t\t} else if (propName.equals(ScreenItemData.COLUMN_SCREENID)) {\n\t\t\t\t\tsi.set(ScreenItemData.COLUMN_SCREENID, Long.parseLong(screenItemReader.getText()));\n\t\t\t\t} else if (propName.equals(ScreenItemData.COLUMN_RESOURCEID)) {\n\t\t\t\t\tsi.set(ScreenItemData.COLUMN_RESOURCEID, Long.parseLong(screenItemReader.getText()));\n\t\t\t\t} else if (propName.equals(\"resourcetype\")) {\n\t\t\t\t\tresourcetype = Integer.parseInt(screenItemReader.getText());\n\t\t\t\t} else {\n\t\t\t\t\tscreenItemReader.nextProperty();\n\t\t\t\t}\n\t\t\t}\n\t\t\t// only resouretype == 0\n\t\t\tif (resourcetype == 0) {\n\t\t\t\tsi.insert(zabbixLocalDB);\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic void importScreens() throws ClientProtocolException, IOException, JSONException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\tif (!isCached(ScreenData.TABLE_NAME, null)) {\n\t\t\t_startTransaction();\n\n\t\t\tzabbixLocalDB.delete(ScreenData.TABLE_NAME, null, null);\n\t\t\tzabbixLocalDB.delete(ScreenItemData.TABLE_NAME, null, null);\n\t\t\tzabbixLocalDB.delete(CacheData.TABLE_NAME, CacheData.COLUMN_KIND+\"='\"+ScreenData.TABLE_NAME+\"'\", null);\n\n\t\t\tJsonArrayOrObjectReader screens = _queryStream(\n\t\t\t\t\t(isVersion2?\"s\":\"S\")+\"creen.get\"\n\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t\t.put(\"output\", \"extend\")\n\t\t\t\t\t\t.put(isVersion2?\"selectScreenItems\":\"select_screenitems\", \"extend\")\n\t\t\t);\n\t\t\tJsonObjectReader screenReader;\n\t\t\twhile ((screenReader = screens.next()) != null) {\n\t\t\t\tScreenData scr = new ScreenData();\n\t\t\t\twhile (screenReader.nextValueToken()) {\n\t\t\t\t\tString propName = screenReader.getCurrentName();\n\t\t\t\t\tif (propName.equals(ScreenData.COLUMN_SCREENID)) {\n\t\t\t\t\t\tscr.set(ScreenData.COLUMN_SCREENID, Long.parseLong(screenReader.getText()));\n\t\t\t\t\t} else if (propName.equals(ScreenData.COLUMN_NAME)) {\n\t\t\t\t\t\tscr.set(ScreenData.COLUMN_NAME, screenReader.getText());\n\t\t\t\t\t} else if (propName.equals(\"screenitems\")) {\n\t\t\t\t\t\timportScreenItems(screenReader.getJsonArray());\n\t\t\t\t\t} else {\n\t\t\t\t\t\tscreenReader.nextProperty();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tscr.insert(zabbixLocalDB);\n\t\t\t}\n\t\t\tscreens.close();\n\n\t\t\tsetCached(ScreenData.TABLE_NAME, null, ZabbixConfig.CACHE_LIFETIME_SCREENS);\n\t\t\t_endTransaction();\n\t\t}\n\t}\n\n\tpublic void importTrigger(String triggerid) throws JSONException, IOException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\tif (!isCached(TriggerData.TABLE_NAME, \"triggerid=\"+triggerid)) {\n\t\t\t_startTransaction();\n\n\t\t\tJsonArrayOrObjectReader trigger = _queryStream(\n\t\t\t\t\t\"trigger.get\"\n\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t\t.put(\"output\", \"extend\")\n\t\t\t\t\t\t.put(isVersion2?\"selectHosts\":\"select_hosts\", \"extend\")\n\t\t\t\t\t\t.put(\"triggerids\", new JSONArray().put(triggerid))\n\t\t\t);\n\t\t\timportTriggers(trigger);\n\t\t\ttrigger.close();\n\n\t\t\tsetCached(TriggerData.TABLE_NAME, \"triggerid=\"+triggerid, ZabbixConfig.CACHE_LIFETIME_TRIGGERS);\n\t\t\t_endTransaction();\n\t\t}\n\t}\n\n\t/**\n\t * importiert ein trigger mit dem attribute itemid. ggf. wird der trigger zuerst gelöscht und neu angelegt.\n\t * imports a trigger with the attribute itemid. if trigger already exists, it will be removed first.\n\t * @param triggerid\n\t * @throws JSONException\n\t * @throws IOException\n\t * @throws HttpAuthorizationRequiredException\n\t * @throws NoAPIAccessException\n\t */\n\tpublic void importTriggerColumnItemId(String triggerid) throws JSONException, IOException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\t// check if the trigger exists and if the itemid was set\n\t\tboolean mustImport = true;\n\t\tCursor cur = zabbixLocalDB.query(TriggerData.TABLE_NAME, null, TriggerData.COLUMN_TRIGGERID+\"=\"+triggerid, null, null, null, null);\n\t\tif (cur.moveToFirst()) {\n\t\t\tlong itemid = 0;\n\t\t\ttry {\n\t\t\t\titemid = cur.getLong(cur.getColumnIndex(TriggerData.COLUMN_ITEMID));\n\t\t\t} catch (Exception e) {\n\t\t\t\t// no itemid\n\t\t\t}\n\t\t\tif (itemid > 0) {\n\t\t\t\tmustImport = false;\n\t\t\t}\n\t\t}\n\t\tif (mustImport) {\n\t\t\t_startTransaction();\n\t\t\tzabbixLocalDB.delete(TriggerData.TABLE_NAME, TriggerData.COLUMN_TRIGGERID+\"=\"+triggerid, null);\n\t\t\tJsonArrayOrObjectReader triggers = _queryStream(\n\t\t\t\t\t\"trigger.get\"\n\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t\t.put(\"output\", \"extend\")\n\t\t\t\t\t\t.put(isVersion2?\"selectHosts\":\"select_hosts\", \"extend\")\n\t\t\t\t\t\t.put(isVersion2?\"selectGroups\":\"select_groups\", \"extend\")\n\t\t\t\t\t\t.put(isVersion2?\"selectItems\":\"select_items\", \"extend\")\n\t\t\t\t\t\t.put(\"triggerids\", new JSONArray().put(triggerid))\n\t\t\t\t\t\t.put(\"limit\", 1)\n\t\t\t);\n\t\t\timportTriggers(triggers);\n\t\t\t_endTransaction();\n\t\t}\n\t}\n\n\t/**\n\t * imports the \"warning\"-triggers\n\t * @throws JSONException\n\t * @throws IOException\n\t * @throws HttpAuthorizationRequiredException\n\t * @throws NoAPIAccessException\n\t */\n\tpublic void importTriggers() throws JSONException, IOException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\tif (!isCached(TriggerData.TABLE_NAME, null)) {\n\t\t\t_startTransaction();\n\n\t\t\tlong min = (new Date().getTime()/1000)-ZabbixConfig.STATUS_SHOW_TRIGGER_TIME;\n\t\t\tJsonArrayOrObjectReader triggers = _queryStream(\n\t\t\t\t\t\"trigger.get\"\n\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t\t.put(\"output\", \"extend\")\n\t\t\t\t\t\t.put(\"sortfield\", \"lastchange\")\n\t\t\t\t\t\t.put(\"sortorder\", \"desc\")\n\t\t\t\t\t\t.put(isVersion2?\"selectHosts\":\"select_hosts\", \"extend\")\n\t\t\t\t\t\t.put(isVersion2?\"selectGroups\":\"select_groups\", \"extend\")\n\t\t\t\t\t\t.put(isVersion2?\"selectItems\":\"select_items\", \"extend\")\n\t\t\t\t\t\t.put(\"lastChangeSince\", min)\n\t\t\t\t\t\t.put(\"only_true\", \"1\")\n\t\t\t\t\t\t.put(\"limit\", ZabbixConfig.TRIGGER_GET_LIMIT)\n\t\t\t\t\t\t.put(\"expandDescription\", true)\n\t\t\t);\n\t\t\timportTriggers(triggers);\n\t\t\ttriggers.close();\n\n\t\t\tsetCached(TriggerData.TABLE_NAME, null, ZabbixConfig.CACHE_LIFETIME_TRIGGERS);\n\t\t\t_endTransaction();\n\t\t}\n\t}\n\n\tprivate void importTriggers(JsonArrayOrObjectReader jsonArray) throws JsonParseException, IOException {\n\t\tJsonObjectReader triggerReader;\n\t\twhile ((triggerReader = jsonArray.next()) != null) {\n\t\t\tTriggerData t = new TriggerData();\n\t\t\twhile (triggerReader.nextValueToken()) {\n\t\t\t\tString propName = triggerReader.getCurrentName();\n\t\t\t\tif (propName.equals(TriggerData.COLUMN_TRIGGERID)) {\n\t\t\t\t\tt.set(TriggerData.COLUMN_TRIGGERID, Long.parseLong(triggerReader.getText()));\n\t\t\t\t} else if (propName.equals(TriggerData.COLUMN_COMMENTS)) {\n\t\t\t\t\tt.set(TriggerData.COLUMN_COMMENTS, triggerReader.getText());\n\t\t\t\t} else if (propName.equals(TriggerData.COLUMN_DESCRIPTION)) {\n\t\t\t\t\tt.set(TriggerData.COLUMN_DESCRIPTION, triggerReader.getText());\n\t\t\t\t} else if (propName.equals(TriggerData.COLUMN_EXPRESSION)) {\n\t\t\t\t\tt.set(TriggerData.COLUMN_EXPRESSION, triggerReader.getText());\n\t\t\t\t} else if (propName.equals(TriggerData.COLUMN_LASTCHANGE)) {\n\t\t\t\t\tt.set(TriggerData.COLUMN_LASTCHANGE, Integer.parseInt(triggerReader.getText()));\n\t\t\t\t} else if (propName.equals(TriggerData.COLUMN_PRIORITY)) {\n\t\t\t\t\tt.set(TriggerData.COLUMN_PRIORITY, Integer.parseInt(triggerReader.getText()));\n\t\t\t\t} else if (propName.equals(TriggerData.COLUMN_STATUS)) {\n\t\t\t\t\tt.set(TriggerData.COLUMN_STATUS, Integer.parseInt(triggerReader.getText()));\n\t\t\t\t} else if (propName.equals(TriggerData.COLUMN_VALUE)) {\n\t\t\t\t\tt.set(TriggerData.COLUMN_VALUE, Integer.parseInt(triggerReader.getText()));\n\t\t\t\t} else if (propName.equals(TriggerData.COLUMN_URL)) {\n\t\t\t\t\tt.set(TriggerData.COLUMN_URL, triggerReader.getText());\n\t\t\t\t} else if (propName.equals(\"hosts\")) {\n\t\t\t\t\tObject[] hostsCache = importHosts(triggerReader.getJsonArray(), null);\n\t\t\t\t\tt.set(TriggerData.COLUMN_HOSTS, hostsCache[0]);\n\t\t\t\t\tt.set(TriggerData.COLUMN_HOSTID, hostsCache[1]);\n\t\t\t\t} else if (propName.equals(\"groups\")) {\n\t\t\t\t\timportHostGroups(triggerReader.getJsonArray());\n\t\t\t\t} else if (propName.equals(\"items\")) {\n\t\t\t\t\t// store the first item id\n\t\t\t\t\tt.set(TriggerData.COLUMN_ITEMID, importItems(triggerReader.getJsonArray(), 1, true));\n\t\t\t\t} else {\n\t\t\t\t\ttriggerReader.nextProperty();\n\t\t\t\t}\n\t\t\t}\n\t\t\tt.insert(zabbixLocalDB, TriggerData.COLUMN_TRIGGERID);\n\t\t\t_commitTransactionIfRecommended();\n\t\t}\n\t}\n\n\tpublic void importTriggersByItemId(String itemid) throws JSONException, IOException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\tif (!isCached(TriggerData.TABLE_NAME, \"itemid=\"+itemid)) {\n\t\t\t_startTransaction();\n\t\t\tzabbixLocalDB.delete(TriggerData.TABLE_NAME, TriggerData.COLUMN_ITEMID+\"=\"+itemid, null);\n\t\t\tJsonArrayOrObjectReader triggers = _queryStream(\n\t\t\t\t\t\"trigger.get\"\n\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t\t.put(\"output\", \"extend\")\n\t\t\t\t\t\t.put(isVersion2?\"selectHosts\":\"select_hosts\", \"extend\")\n\t\t\t\t\t\t.put(isVersion2?\"selectGroups\":\"select_groups\", \"extend\")\n\t\t\t\t\t\t.put(isVersion2?\"selectItems\":\"select_items\", \"extend\")\n\t\t\t\t\t\t.put(\"itemids\", new JSONArray().put(itemid))\n\t\t\t\t\t\t.put(\"limit\", 1)\n\t\t\t\t\t\t.put(\"sortfield\", \"lastchange\")\n\t\t\t\t\t\t.put(\"sortorder\", \"DESC\")\n\t\t\t);\n\t\t\timportTriggers(triggers);\n\t\t\tsetCached(TriggerData.TABLE_NAME, \"itemid=\"+itemid, ZabbixConfig.CACHE_LIFETIME_TRIGGERS);\n\t\t\t_endTransaction();\n\t\t}\n\t}\n\n\tpublic boolean isCached(String kind, String filter) {\n\t\tSQLiteQueryBuilder sqlBuilder = new SQLiteQueryBuilder();\n\t\tsqlBuilder.setTables(CacheData.TABLE_NAME);\n\t\tsqlBuilder.appendWhere(CacheData.COLUMN_KIND+\"='\"+kind+\"' AND \");\n\t\tsqlBuilder.appendWhere(CacheData.COLUMN_FILTER+\n\t\t\t\t(filter==null?\" IS NULL\":\"='\"+filter+\"'\")\n\t\t);\n\t\tsqlBuilder.appendWhere(\" AND \"+CacheData.COLUMN_EXPIRE_DATE+\">\"+new Date().getTime()/1000);\n\t\tCursor cur = sqlBuilder.query(\n\t\t\tzabbixLocalDB,\n\t\t\tnull,\n\t\t\tnull,\n\t\t\tnull,\n\t\t\tnull,\n\t\t\tnull,\n\t\t\tnull\n\t\t);\n\t\tLog.i(\"ZabbixContentProvider\", \"isCached \"+kind+\"//\"+filter+\"//\"+cur.moveToFirst());\n\t\treturn cur.moveToFirst();\n\t}\n\n\t/**\n\t * public, for the unit test\n\t */\n\tpublic void setCached(String kind, String filter, int lifetime) {\n\t\tCacheData cache = new CacheData();\n\t\tcache.set(CacheData.COLUMN_EXPIRE_DATE, new Date().getTime()/1000 + lifetime);\n\t\tcache.set(CacheData.COLUMN_KIND, kind);\n\t\tif (filter != null) {\n\t\t\tcache.set(CacheData.COLUMN_FILTER, filter);\n\t\t}\n\t\tcache.insert(zabbixLocalDB);\n\t}\n\n\t/**\n\t * updates the progressbar in the gui\n\t * @param i 0..100\n\t */\n\tpublic void showProgress(int i) {\n\t\t// if applicable, transform the progress\n\t\tif (transformProgressStart != 0 && transformProgressEnd != 0) {\n\t\t\ti = (int) (transformProgressStart + (transformProgressEnd-transformProgressStart)*(double)i/100);\n\t\t}\n\n\t\tIntent intent = new Intent(ZabbixContentProvider.CONTENT_PROVIDER_INTENT_ACTION);\n\t\tintent.putExtra(\"flag\", ZabbixContentProvider.INTENT_FLAG_SHOW_PROGRESS);\n\t\tintent.putExtra(\"value\", i);\n\t\tcontext.sendBroadcast(intent);\n\t}\n\n\t/**\n\t * transforms the progress\n\t * @param start 0% => start%\n\t * @param end 100% => end%\n\t */\n\tpublic void transformProgress(int start, int end) {\n\t\ttransformProgressStart = start;\n\t\ttransformProgressEnd = end;\n\t}\n}\n"],
    "c_hash_sni": "bae0223e3d008ee05a94f9b7db30eec6844110b6",
    "name_sni": "src/com/inovex/zabbixmobile/api/ZabbixService.java",
    "c_parents_ss": ["df53c588a80d246f2f77494f72b9fc4b285728ad"],
    "c_imports_removed_t": ["<empty>"],
    "p_hash_sni": "df53c588a80d246f2f77494f72b9fc4b285728ad",
    "c_imports_added_t": ["<empty>"],
    "p_methods_t": ["ApplicationData ApplicationItemRelationData ArrayList, String BasicHttpParams BufferedReader CacheData ContentValues CustomSSLSocketFactory Date DefaultHttpClient EventData GraphData GraphItemData HashSet, Long HistoryDetailData HostData HostGroupData HttpAuthorizationRequiredException HttpPost IOException IllegalStateException InputStreamReader Intent ItemData JSONArray JSONObject JsonArrayOrObjectReader JsonFactory NoAPIAccessException PreconditionFailedException RuntimeException SQLiteQueryBuilder Scheme SchemeRegistry ScreenData ScreenItemData StringBuilder StringEntity ThreadSafeClientConnManager TriggerData UsernamePasswordCredentials X509TrustManager _commitTransactionIfRecommended _endTransaction _queryBuffer _queryStream _startTransaction add addHeader append appendWhere authenticate beginTransaction close contains createJsonParser createSocket d delete endTransaction endsWith equals execute get getBoolean getColumnIndex getContent getCredentialsProvider getCurrentName getCurrentToken getDefaultSharedPreferences getDefaultType getEntity getInstance getInt getJSONArray getJSONObject getJsonArray getLong getMessage getParams getReasonPhrase getResources getSocketFactory getStatusCode getStatusLine getString getText getTime i importApplications importEvents importGraphItems importHostGroups importHosts importItems importScreenItems importTriggers inTransaction indexOf init insert isCached isClosed length load matches min moveToFirst moveToNext next nextProperty nextToken nextValue nextValueToken parseColor parseDouble parseInt parseLong printStackTrace put putExtra query read register replace replaceAll sendBroadcast set setCached setConnectionTimeout setContentCharset setCredentials setEntity setHostnameVerifier setRedirecting setTables setTransactionSuccessful setVersion showProgress split substring toString trim update"],
    "c_imports_removed_cs": "<empty>",
    "p_imports_t": ["android.database.sqlite.SQLiteQueryBuilder org.apache.http.conn.scheme.SchemeRegistry java.util.HashSet org.apache.http.params.BasicHttpParams android.content.Context org.apache.http.params.HttpParams org.apache.http.conn.scheme.PlainSocketFactory java.util.ArrayList com.inovex.zabbixmobile.model.ItemData com.inovex.zabbixmobile.model.HostData com.inovex.zabbixmobile.model.GraphData com.inovex.zabbixmobile.model.EventData org.apache.http.auth.UsernamePasswordCredentials org.apache.http.params.HttpConnectionParams android.content.SharedPreferences java.security.KeyManagementException org.apache.http.conn.ClientConnectionManager org.codehaus.jackson.JsonFactory org.apache.http.entity.StringEntity java.util.Set org.apache.http.params.HttpProtocolParams com.inovex.zabbixmobile.model.ApplicationItemRelationData com.inovex.zabbixmobile.model.TriggerData org.codehaus.jackson.JsonToken android.database.Cursor java.net.Socket android.content.Intent org.apache.http.protocol.HTTP org.json.JSONException java.net.UnknownHostException com.inovex.zabbixmobile.model.HistoryDetailData org.apache.http.HttpResponse java.security.KeyStore com.inovex.zabbixmobile.ZabbixContentProvider android.preference.PreferenceManager android.util.Log org.json.JSONObject java.security.NoSuchAlgorithmException org.apache.http.client.params.HttpClientParams java.io.IOException org.apache.http.conn.scheme.Scheme org.apache.http.client.methods.HttpPost javax.net.ssl.SSLContext org.apache.http.auth.AuthScope org.apache.http.conn.ssl.SSLSocketFactory java.security.KeyStoreException android.content.ContentValues java.io.InputStreamReader java.util.Date java.security.UnrecoverableKeyException android.graphics.Color org.apache.http.client.ClientProtocolException com.inovex.zabbixmobile.model.GraphItemData org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager org.json.JSONArray com.inovex.zabbixmobile.model.CacheData javax.net.ssl.SSLPeerUnverifiedException com.inovex.zabbixmobile.model.HostGroupData org.codehaus.jackson.JsonParseException java.security.cert.X509Certificate org.apache.http.HttpVersion android.database.sqlite.SQLiteDatabase java.util.List java.security.cert.CertificateException java.io.BufferedReader com.inovex.zabbixmobile.model.ApplicationData com.inovex.zabbixmobile.model.ScreenItemData javax.net.ssl.TrustManager com.inovex.zabbixmobile.model.ScreenData com.inovex.zabbixmobile.R org.codehaus.jackson.JsonParser org.apache.http.impl.client.DefaultHttpClient javax.net.ssl.X509TrustManager"],
    "p_subject_t": ["filter by severity, API can parse Object AND Array results"],
    "p_callsites_cs": "<unknown>.set(<unknown>, <unknown>)#org.apache.http.HttpEntity.getContent()#java.lang.String.equals(java.lang.String)#org.json.JSONArray.JSONArray()#<unknown>.set(<unknown>, java.lang.Object)#org.json.JSONObject.put(java.lang.String, java.lang.Integer)#org.json.JSONArray.put(java.lang.String)#org.json.JSONObject.JSONObject()#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.codehaus.jackson.JsonFactory.createJsonParser(java.io.InputStream)#java.lang.String.equals(<unknown>)#org.apache.http.StatusLine.getStatusCode()#<unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>)#org.json.JSONObject.put(java.lang.String, java.lang.String)#android.database.sqlite.SQLiteDatabase.inTransaction()#android.util.Log.d(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService._startTransaction()#java.lang.String.equals(java.lang.String)#org.codehaus.jackson.JsonFactory.JsonFactory()#com.inovex.zabbixmobile.api.ZabbixService._endTransaction()#org.json.JSONObject.put(java.lang.String, int)#android.content.ContentValues.ContentValues(int)#org.apache.http.conn.scheme.SchemeRegistry.SchemeRegistry()#<unknown>.insert(android.database.sqlite.SQLiteDatabase)#<unknown>.insert(android.database.sqlite.SQLiteDatabase)#com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject)#com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject)#com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject)#org.json.JSONObject.getJSONObject(java.lang.String)#java.io.InputStreamReader.InputStreamReader(java.io.InputStream)#android.content.Intent.putExtra(java.lang.String, <unknown>)#org.json.JSONArray.length()#java.lang.String.equals(java.lang.String)#<unknown>.set(<unknown>, <unknown>)#java.lang.String.equals(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService.PreconditionFailedException.PreconditionFailedException()#java.lang.StringBuilder.StringBuilder()#android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null)#<unknown>.nextValueToken()#org.json.JSONObject.JSONObject()#org.json.JSONObject.put(java.lang.String, int)#org.json.JSONObject.put(java.lang.String, org.json.JSONArray)#java.lang.String.equals(<unknown>)#<unknown>.get(<unknown>)#<unknown>.insert(android.database.sqlite.SQLiteDatabase)#android.content.Intent.putExtra(java.lang.String, <unknown>)#java.lang.String.equals(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService.importItems(<unknown>, int, boolean)#com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, java.lang.String, int)#android.util.Log.d(java.lang.String, java.lang.String)#org.json.JSONObject.put(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject)#org.apache.http.conn.scheme.Scheme.Scheme(java.lang.String, org.apache.http.conn.ssl.SSLSocketFactory, int)#org.apache.http.HttpEntity.getContent()#org.codehaus.jackson.JsonParser.close()#java.lang.String.equals(<unknown>)#<unknown>.nextValueToken()#<unknown>.getCurrentName()#org.json.JSONArray.JSONArray(java.util.Set<java.lang.Long>)#<unknown>.nextValueToken()#android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null)#<unknown>.getJsonArray()#com.inovex.zabbixmobile.api.ZabbixService._startTransaction()#org.json.JSONArray.JSONArray()#<unknown>.nextProperty()#java.lang.String.equals(java.lang.String)#android.database.sqlite.SQLiteDatabase.update(<unknown>, android.content.ContentValues, <unknown>, null)#java.util.Set<java.lang.Long>.add(<unknown>)#<unknown>.get(<unknown>)#<unknown>.get(<unknown>)#android.content.ContentValues.put(<unknown>, java.lang.Long)#java.lang.String.equals(java.lang.String)#org.apache.http.StatusLine.getReasonPhrase()#java.lang.RuntimeException.RuntimeException(java.lang.String)#<unknown>.nextProperty()#java.lang.Throwable.printStackTrace()#java.lang.String.equals(<unknown>)#java.lang.Long.parseLong(<unknown>)#org.json.JSONObject.put(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject)#<unknown>.getCurrentName()#android.content.ContentValues.put(<unknown>, java.lang.Long)#org.apache.http.entity.StringEntity.StringEntity(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject)#java.lang.String.equals(<unknown>)#<unknown>.EventData()#<unknown>.next()#<unknown>.set(<unknown>, <unknown>)#com.inovex.zabbixmobile.api.ZabbixService.CustomSSLSocketFactory.CustomSSLSocketFactory(java.security.KeyStore)#com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject)#<unknown>.getCurrentName()#java.util.List<java.lang.String>.add(java.lang.String)#org.json.JSONObject.put(java.lang.String, int)#<unknown>.getText()#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.apache.http.conn.ssl.SSLSocketFactory.setHostnameVerifier(org.apache.http.conn.ssl.X509HostnameVerifier)#<unknown>.set(<unknown>, <unknown>)#<unknown>.getText()#org.json.JSONObject.put(java.lang.String, long)#java.util.Date.Date()#android.util.Log.i(java.lang.String, java.lang.String)#org.json.JSONObject.put(java.lang.String, int)#org.json.JSONObject.put(java.lang.String, int)#<unknown>.set(<unknown>, <unknown>)#com.inovex.zabbixmobile.api.ZabbixService.authenticate()#android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null)#android.util.Log.d(java.lang.String, java.lang.String)#java.lang.String.equals(java.lang.String)#org.apache.http.HttpResponse.getEntity()#org.json.JSONObject.JSONObject()#com.inovex.zabbixmobile.api.ZabbixService.importItems(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader, int, boolean)#com.inovex.zabbixmobile.api.ZabbixService._startTransaction()#com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, null, int)#java.io.BufferedReader.read()#org.json.JSONObject.put(java.lang.String, long)#<unknown>.set(<unknown>, <unknown>)#android.database.Cursor.getLong(<unknown>)#java.lang.IllegalStateException.IllegalStateException(java.lang.String)#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.getCurrentName()#android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null)#android.util.Log.d(java.lang.String, java.lang.String)#<unknown>.set(<unknown>, <unknown>)#java.lang.String.equals(<unknown>)#org.json.JSONObject.put(java.lang.String, java.lang.String)#android.database.Cursor.moveToFirst()#com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, java.lang.String)#android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null)#java.lang.String.equals(java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, java.lang.String)#<unknown>.getText()#org.json.JSONObject.put(java.lang.String, java.lang.String)#android.content.Intent.putExtra(java.lang.String, <unknown>)#<unknown>.getCurrentName()#android.content.res.Resources.getString(<unknown>)#android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null)#android.database.sqlite.SQLiteDatabase.setTransactionSuccessful()#<unknown>.next()#<unknown>.getText()#<unknown>.nextValueToken()#com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject)#com.inovex.zabbixmobile.api.ZabbixService.showProgress(<unknown>)#java.io.IOException.IOException(java.lang.String)#<unknown>.getCurrentName()#android.util.Log.d(java.lang.String, java.lang.String)#java.lang.Object.toString()#org.json.JSONObject.toString()#<unknown>.set(<unknown>, <unknown>)#org.json.JSONArray.JSONArray()#org.apache.http.HttpResponse.getStatusLine()#org.json.JSONArray.JSONArray()#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.apache.http.impl.client.DefaultHttpClient.DefaultHttpClient()#org.json.JSONObject.put(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject)#org.apache.http.HttpResponse.getStatusLine()#java.lang.String.equals(<unknown>)#java.util.Date.Date()#android.util.Log.i(java.lang.String, java.lang.String)#android.content.Context.getResources()#org.apache.http.impl.client.CloseableHttpClient.execute(org.apache.http.client.methods.HttpPost)#com.inovex.zabbixmobile.api.ZabbixService._commitTransactionIfRecommended()#com.inovex.zabbixmobile.api.ZabbixService.importHostGroups(<unknown>)#android.content.Context.sendBroadcast(android.content.Intent)#android.content.Context.sendBroadcast(android.content.Intent)#com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, null, int)#java.lang.Integer.parseInt(<unknown>)#<unknown>.ApplicationData()#com.inovex.zabbixmobile.api.ZabbixService.NoAPIAccessException.NoAPIAccessException()#com.inovex.zabbixmobile.api.ZabbixService._commitTransactionIfRecommended()#<unknown>.getJsonArray()#org.apache.http.message.AbstractHttpMessage.addHeader(java.lang.String, java.lang.String)#org.json.JSONObject.put(java.lang.String, int)#java.lang.String.replace(java.lang.String, java.lang.String)#org.json.JSONArray.JSONArray()#<unknown>.set(<unknown>, <unknown>)#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.set(<unknown>, <unknown>)#org.json.JSONArray.JSONArray()#java.lang.String.equals(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, java.lang.String, int)#<unknown>.nextProperty()#<unknown>.set(<unknown>, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject)#org.json.JSONObject.JSONObject()#java.lang.String.contains(java.lang.String)#org.apache.http.client.methods.HttpEntityEnclosingRequestBase.setEntity(org.apache.http.entity.StringEntity)#com.inovex.zabbixmobile.api.ZabbixService.importTriggers(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader)#org.json.JSONObject.put(java.lang.String, int)#<unknown>.HostGroupData()#<unknown>.JsonArrayOrObjectReader(org.codehaus.jackson.JsonParser)#<unknown>.HostGroupData()#<unknown>.nextProperty()#java.lang.Long.parseLong(<unknown>)#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.json.JSONObject.put(java.lang.String, org.json.JSONArray)#org.json.JSONObject.put(java.lang.String, java.lang.Integer)#<unknown>.set(<unknown>, <unknown>)#<unknown>.close()#org.json.JSONObject.put(java.lang.String, org.json.JSONArray)#<unknown>.set(<unknown>, <unknown>)#java.lang.String.equals(java.lang.String)#android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null)#<unknown>.next()#org.json.JSONObject.toString()#java.lang.String.equals(<unknown>)#java.lang.String.equals(<unknown>)#android.database.sqlite.SQLiteDatabase.query(<unknown>, null, <unknown>, null, null, null, null)#<unknown>.set(<unknown>, <unknown>)#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.CacheData()#<unknown>.getText()#com.inovex.zabbixmobile.api.ZabbixService._startTransaction()#<unknown>.set(<unknown>, <unknown>)#com.inovex.zabbixmobile.api.ZabbixService._endTransaction()#<unknown>.set(<unknown>, int)#<unknown>.getJsonArray()#java.lang.String.equals(<unknown>)#java.util.Date.getTime()#java.lang.String.equals(java.lang.String)#org.json.JSONObject.put(java.lang.String, int)#<unknown>.set(<unknown>, <unknown>)#java.lang.Integer.parseInt(<unknown>)#org.codehaus.jackson.JsonParser.getCurrentName()#<unknown>.nextProperty()#com.inovex.zabbixmobile.api.ZabbixService._endTransaction()#java.lang.String.equals(<unknown>)#org.json.JSONObject.put(java.lang.String, int)#android.database.sqlite.SQLiteDatabase.update(<unknown>, android.content.ContentValues, <unknown>, null)#com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject)#com.inovex.zabbixmobile.api.ZabbixService._endTransaction()#java.lang.StringBuilder.append(char)#<unknown>.set(<unknown>, <unknown>)#<unknown>.get(<unknown>)#<unknown>.set(<unknown>, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject)#org.json.JSONObject.put(java.lang.String, java.lang.String)#android.database.Cursor.getLong(<unknown>)#java.lang.String.equals(<unknown>)#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.json.JSONObject.JSONObject()#org.apache.http.params.HttpProtocolParams.setVersion(org.apache.http.params.HttpParams, org.apache.http.HttpVersion)#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.HistoryDetailData()#android.util.Log.d(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService._startTransaction()#<unknown>.next()#<unknown>.set(<unknown>, <unknown>)#<unknown>.nextValueToken()#org.json.JSONObject.JSONObject()#java.lang.String.equals(<unknown>)#java.lang.Long.parseLong(<unknown>)#java.lang.Integer.parseInt(<unknown>)#org.apache.http.client.methods.HttpPost.HttpPost(java.lang.String)#org.apache.http.StatusLine.getStatusCode()#<unknown>.set(<unknown>, int)#java.lang.String.equals(java.lang.String)#java.lang.String.equals(<unknown>)#java.lang.String.equals(<unknown>)#<unknown>.getCurrentName()#java.util.ArrayList<java.lang.String>.ArrayList, String()#com.inovex.zabbixmobile.api.ZabbixService._startTransaction()#com.inovex.zabbixmobile.api.ZabbixService.importTriggers(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader)#org.json.JSONArray.put(java.lang.String)#<unknown>.nextValueToken()#org.json.JSONArray.put(java.lang.String)#<unknown>.set(<unknown>, <unknown>)#org.json.JSONObject.put(java.lang.String, int)#com.inovex.zabbixmobile.api.ZabbixService.importItems(<unknown>, int, boolean)#org.json.JSONObject.JSONObject()#com.inovex.zabbixmobile.api.ZabbixService.importTriggers(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService.importGraphItems(<unknown>)#<unknown>.ScreenItemData()#<unknown>.set(<unknown>, <unknown>)#<unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>)#android.preference.PreferenceManager.getDefaultSharedPreferences(android.content.Context)#org.json.JSONObject.length()#<unknown>.nextValueToken()#java.util.HashSet<java.lang.Long>.HashSet, Long()#java.lang.String.equals(java.lang.String)#android.content.SharedPreferences.getBoolean(java.lang.String, boolean)#<unknown>.insert(android.database.sqlite.SQLiteDatabase)#org.json.JSONObject.put(java.lang.String, org.json.JSONArray)#<unknown>.close()#com.inovex.zabbixmobile.api.ZabbixService.importHosts(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader, int)#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.next()#android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null)#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.json.JSONObject.getString(java.lang.String)#<unknown>.set(<unknown>, <unknown>)#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.close()#org.json.JSONObject.getString(java.lang.String)#java.lang.String.equals(java.lang.String)#java.lang.Long.parseLong(<unknown>)#org.codehaus.jackson.JsonParser.isClosed()#org.json.JSONObject.put(java.lang.String, int)#org.json.JSONObject.put(java.lang.String, org.json.JSONArray)#org.json.JSONObject.put(java.lang.String, long)#<unknown>.close()#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.set(<unknown>, long)#org.json.JSONObject.put(java.lang.String, org.json.JSONObject)#<unknown>.set(<unknown>, <unknown>)#com.inovex.zabbixmobile.api.ZabbixService._endTransaction()#java.lang.String.replaceAll(java.lang.String, java.lang.String)#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.nextValueToken()#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.apache.http.params.BasicHttpParams.BasicHttpParams()#android.database.sqlite.SQLiteDatabase.beginTransaction()#com.inovex.zabbixmobile.api.ZabbixService._commitTransactionIfRecommended()#com.inovex.zabbixmobile.api.ZabbixService._endTransaction()#java.lang.String.equals(<unknown>)#<unknown>.insert(android.database.sqlite.SQLiteDatabase)#<unknown>.insert(android.database.sqlite.SQLiteDatabase)#org.json.JSONObject.put(java.lang.String, int)#<unknown>.next()#com.inovex.zabbixmobile.api.ZabbixService._startTransaction()#<unknown>.getJsonArray()#android.content.SharedPreferences.getString(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, null, int)#javax.net.SocketFactory.createSocket()#java.lang.Long.parseLong(<unknown>)#org.apache.http.client.CredentialsProvider.setCredentials(org.apache.http.auth.AuthScope, org.apache.http.auth.UsernamePasswordCredentials)#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.next()#com.inovex.zabbixmobile.api.ZabbixService.HttpAuthorizationRequiredException.HttpAuthorizationRequiredException()#android.database.sqlite.SQLiteQueryBuilder.query(android.database.sqlite.SQLiteDatabase, null, null, null, null, null, null)#java.util.Date.Date()#com.inovex.zabbixmobile.api.ZabbixService._commitTransactionIfRecommended()#<unknown>.set(<unknown>, java.lang.String)#org.json.JSONObject.JSONObject()#<unknown>.next()#<unknown>.set(<unknown>, <unknown>)#<unknown>.set(<unknown>, <unknown>)#com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject)#java.lang.String.equals(java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, java.lang.String)#java.lang.String.indexOf(char)#android.database.sqlite.SQLiteDatabase.query(<unknown>, null, <unknown>, null, null, null, null)#android.preference.PreferenceManager.getDefaultSharedPreferences(android.content.Context)#<unknown>.nextProperty()#org.apache.http.impl.client.CloseableHttpClient.execute(org.apache.http.client.methods.HttpPost)#<unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>)#com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, java.lang.String)#org.json.JSONObject.JSONObject()#<unknown>.close()#android.database.Cursor.getColumnIndex(<unknown>)#android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null)#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.nextProperty()#org.apache.http.conn.scheme.PlainSocketFactory.getSocketFactory()#com.inovex.zabbixmobile.api.ZabbixService._commitTransactionIfRecommended()#com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject)#java.lang.StringBuilder.toString()#org.json.JSONObject.put(java.lang.String, java.lang.String)#android.database.sqlite.SQLiteQueryBuilder.SQLiteQueryBuilder()#<unknown>.insert(android.database.sqlite.SQLiteDatabase)#org.apache.http.conn.scheme.SchemeRegistry.register(org.apache.http.conn.scheme.Scheme)#<unknown>.set(<unknown>, <unknown>)#org.json.JSONObject.JSONObject(java.lang.String)#java.lang.String.equals(<unknown>)#<unknown>.set(<unknown>, <unknown>)#<unknown>.set(<unknown>, <unknown>)#java.lang.IllegalStateException.IllegalStateException(java.lang.String)#java.lang.Double.parseDouble(<unknown>)#android.content.ContentValues.put(<unknown>, java.lang.Long)#android.database.sqlite.SQLiteQueryBuilder.appendWhere(<unknown>)#org.apache.http.conn.scheme.SchemeRegistry.register(org.apache.http.conn.scheme.Scheme)#org.json.JSONObject.getInt(java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService.importHosts(<unknown>, null)#org.json.JSONObject.put(java.lang.String, boolean)#java.lang.Long.parseLong(<unknown>)#java.lang.String.indexOf(char)#android.database.sqlite.SQLiteQueryBuilder.appendWhere(<unknown>)#java.lang.String.length()#java.lang.String.equals(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject)#<unknown>.nextProperty()#<unknown>.next()#android.content.SharedPreferences.getString(java.lang.String, java.lang.String)#<unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>)#com.inovex.zabbixmobile.api.ZabbixService.importTriggers(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader)#<unknown>.GraphData()#org.json.JSONArray.put(java.lang.String)#org.apache.http.impl.client.AbstractHttpClient.getParams()#<unknown>.set(<unknown>, long)#<unknown>.set(<unknown>, <unknown>)#org.json.JSONObject.getJSONObject(java.lang.String)#org.json.JSONObject.put(java.lang.String, java.lang.String)#java.lang.String.equals(java.lang.String)#org.json.JSONObject.getString(java.lang.String)#java.lang.String.equals(<unknown>)#java.lang.String.equals(<unknown>)#<unknown>.getCurrentName()#java.lang.String.equals(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService.showProgress(int)#<unknown>.getCurrentName()#com.inovex.zabbixmobile.api.ZabbixService.importHosts(<unknown>, null)#com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, java.lang.String, int)#org.json.JSONObject.put(java.lang.String, int)#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.close()#java.lang.String.replace(java.lang.String, java.lang.String)#java.lang.String.equals(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject)#com.inovex.zabbixmobile.api.ZabbixService._endTransaction()#android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null)#android.database.Cursor.moveToNext()#<unknown>.HostData()#<unknown>.set(<unknown>, long)#<unknown>.next()#com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject)#android.database.sqlite.SQLiteQueryBuilder.setTables(<unknown>)#java.util.Date.getTime()#org.json.JSONObject.put(java.lang.String, long)#android.content.ContentValues.ContentValues(int)#java.lang.Long.parseLong(<unknown>)#org.apache.http.HttpResponse.getEntity()#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.getText()#java.lang.String.equals(java.lang.String)#<unknown>.set(<unknown>, <unknown>)#<unknown>.set(<unknown>, <unknown>)#javax.net.ssl.SSLContext.init(null, javax.net.ssl.TrustManager[], null)#android.database.sqlite.SQLiteDatabase.endTransaction()#java.lang.String.equals(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, java.lang.String)#android.util.Log.d(java.lang.String, java.lang.String)#<unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>)#<unknown>.next()#<unknown>.close()#<unknown>.insert(android.database.sqlite.SQLiteDatabase)#org.json.JSONObject.put(java.lang.String, java.lang.String)#java.lang.Throwable.getMessage()#java.lang.String.equals(<unknown>)#java.lang.String.equals(<unknown>)#<unknown>.set(<unknown>, <unknown>)#com.inovex.zabbixmobile.api.ZabbixService._endTransaction()#javax.net.ssl.SSLContext.getSocketFactory()#org.json.JSONObject.JSONObject()#android.content.Context.getResources()#org.json.JSONObject.put(java.lang.String, int)#com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, null)#com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, java.lang.String, int)#java.lang.String.matches(java.lang.String)#<unknown>.set(<unknown>, <unknown>)#org.json.JSONArray.put(java.lang.String)#<unknown>.set(<unknown>, <unknown>)#android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null)#android.content.Context.sendBroadcast(android.content.Intent)#org.json.JSONObject.getJSONObject(java.lang.String)#<unknown>.get(<unknown>)#android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null)#java.lang.String.equals(<unknown>)#android.content.SharedPreferences.getBoolean(java.lang.String, boolean)#java.lang.Throwable.printStackTrace()#android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null)#org.json.JSONObject.put(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService._startTransaction()#android.content.Intent.putExtra(java.lang.String, int)#org.json.JSONObject.JSONObject()#<unknown>.getText()#com.inovex.zabbixmobile.api.ZabbixService._endTransaction()#org.apache.http.client.methods.HttpPost.HttpPost(java.lang.String)#android.content.SharedPreferences.getString(java.lang.String, java.lang.String)#<unknown>.GraphItemData()#com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, java.lang.String, int)#<unknown>.nextValueToken()#org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager.ThreadSafeClientConnManager(org.apache.http.params.HttpParams, org.apache.http.conn.scheme.SchemeRegistry)#<unknown>.ApplicationItemRelationData()#java.lang.Object.toString()#android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null)#org.json.JSONArray.JSONArray()#java.lang.String.equals(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService._startTransaction()#org.json.JSONObject.put(java.lang.String, org.json.JSONArray)#com.inovex.zabbixmobile.api.ZabbixService.importApplications(int, int, <unknown>)#<unknown>.set(<unknown>, int)#org.json.JSONObject.put(java.lang.String, int)#com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, java.lang.String, int)#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.json.JSONObject.JSONObject()#java.lang.Math.min(int, int)#com.inovex.zabbixmobile.api.ZabbixService.showProgress(<unknown>)#java.lang.String.equals(java.lang.String)#android.content.Intent.Intent(<unknown>)#java.lang.String.equals(<unknown>)#org.json.JSONObject.put(java.lang.String, int)#javax.net.ssl.SSLContext.getInstance(java.lang.String)#android.content.res.Resources.getString(<unknown>)#org.json.JSONObject.JSONObject()#android.content.Intent.Intent(<unknown>)#java.lang.String.equals(<unknown>)#<unknown>.nextProperty()#javax.net.ssl.SSLSocketFactory.createSocket(java.net.Socket, java.lang.String, int, boolean)#org.json.JSONObject.put(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject)#<unknown>.get(<unknown>)#java.io.IOException.IOException(java.lang.String)#java.lang.String.trim()#java.lang.String.contains(java.lang.String)#org.apache.http.entity.StringEntity.StringEntity(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService._endTransaction()#.X509TrustManager()#com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject)#android.graphics.Color.parseColor(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, null)#org.json.JSONObject.getJSONArray(java.lang.String)#org.apache.http.client.params.HttpClientParams.setRedirecting(org.apache.http.params.HttpParams, boolean)#com.inovex.zabbixmobile.api.ZabbixService._startTransaction()#<unknown>.getCurrentName()#java.lang.String.equals(<unknown>)#java.lang.Long.parseLong(<unknown>)#android.util.Log.d(java.lang.String, java.lang.String)#org.codehaus.jackson.JsonParser.getCurrentToken()#org.codehaus.jackson.JsonParser.nextValue()#java.lang.Long.parseLong(<unknown>)#<unknown>.getText()#java.util.Date.getTime()#android.content.Intent.putExtra(java.lang.String, <unknown>)#android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null)#<unknown>.get(<unknown>)#android.database.Cursor.moveToFirst()#org.apache.http.client.methods.HttpEntityEnclosingRequestBase.setEntity(org.apache.http.entity.StringEntity)#com.inovex.zabbixmobile.api.ZabbixService._commitTransactionIfRecommended()#com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, null)#android.database.sqlite.SQLiteQueryBuilder.appendWhere(<unknown>)#org.apache.http.auth.UsernamePasswordCredentials.UsernamePasswordCredentials(java.lang.String, java.lang.String)#java.util.Date.getTime()#java.lang.String.equals(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService._endTransaction()#org.json.JSONObject.put(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService.authenticate()#java.lang.String.equals(<unknown>)#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.json.JSONObject.put(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService.NoAPIAccessException.NoAPIAccessException()#org.json.JSONArray.put(long)#com.inovex.zabbixmobile.api.ZabbixService._endTransaction()#android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null)#<unknown>.getJsonArray()#<unknown>.ScreenData()#java.util.Date.Date()#java.util.Date.Date()#<unknown>.set(<unknown>, long)#<unknown>.getCurrentName()#org.json.JSONObject.put(java.lang.String, org.json.JSONArray)#<unknown>.set(<unknown>, long)#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.apache.http.params.HttpConnectionParams.setConnectionTimeout(org.apache.http.params.HttpParams, int)#org.json.JSONArray.length()#<unknown>.set(<unknown>, java.lang.String)#<unknown>.set(<unknown>, long)#java.util.Date.getTime()#<unknown>.set(<unknown>, <unknown>)#<unknown>.set(<unknown>, <unknown>)#org.json.JSONArray.put(java.lang.String)#java.lang.String.equals(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService.importScreenItems(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService.HttpAuthorizationRequiredException.HttpAuthorizationRequiredException()#<unknown>.getText()#org.json.JSONObject.put(java.lang.String, org.json.JSONArray)#com.inovex.zabbixmobile.api.ZabbixService.importEvents(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader, null)#org.json.JSONObject.JSONObject()#<unknown>.set(<unknown>, <unknown>)#com.inovex.zabbixmobile.api.ZabbixService.importHostGroups(<unknown>)#org.json.JSONObject.toString()#java.lang.Integer.parseInt(<unknown>)#java.lang.String.equals(java.lang.String)#org.apache.http.params.HttpProtocolParams.setContentCharset(org.apache.http.params.HttpParams, java.lang.String)#<unknown>.get(<unknown>)#android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null)#java.lang.String.equals(<unknown>)#<unknown>.set(<unknown>, <unknown>)#<unknown>.nextValueToken()#<unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>)#org.json.JSONObject.put(java.lang.String, org.json.JSONArray)#org.json.JSONObject.put(java.lang.String, java.lang.Integer)#<unknown>.getText()#<unknown>.set(<unknown>, <unknown>)#org.apache.http.message.AbstractHttpMessage.addHeader(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject)#org.json.JSONObject.getJSONArray(java.lang.String)#java.security.KeyStore.load(null, null)#java.lang.String.replace(java.lang.String, java.lang.String)#java.lang.Long.parseLong(<unknown>)#org.json.JSONObject.toString()#com.inovex.zabbixmobile.api.ZabbixService.importTriggers(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader)#android.util.Log.d(java.lang.String, java.lang.String)#android.content.SharedPreferences.getString(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, java.lang.String)#<unknown>.TriggerData()#android.content.SharedPreferences.getString(java.lang.String, java.lang.String)#android.content.Intent.Intent(<unknown>)#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.apache.http.impl.client.AbstractHttpClient.getCredentialsProvider()#<unknown>.set(<unknown>, <unknown>)#java.io.IOException.IOException(java.lang.String)#java.lang.String.trim()#org.json.JSONObject.put(java.lang.String, org.json.JSONArray)#java.lang.String.split(java.lang.String)#java.lang.String.equals(java.lang.String)#java.lang.String.endsWith(java.lang.String)#<unknown>.set(<unknown>, int)#com.inovex.zabbixmobile.api.ZabbixService.showProgress(int)#<unknown>.ItemData()#org.json.JSONObject.put(java.lang.String, int)#<unknown>.set(<unknown>, <unknown>)#org.codehaus.jackson.JsonParser.getText()#android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null)#org.apache.http.impl.client.DefaultHttpClient.DefaultHttpClient(org.apache.http.conn.ClientConnectionManager, org.apache.http.params.HttpParams)#<unknown>.close()#java.lang.IllegalStateException.IllegalStateException(java.lang.String)#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.codehaus.jackson.JsonParser.nextToken()#android.database.Cursor.getColumnIndex(<unknown>)#org.json.JSONObject.put(java.lang.String, org.json.JSONArray)#<unknown>.nextValueToken()#com.inovex.zabbixmobile.api.ZabbixService._startTransaction()#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.set(<unknown>, java.lang.String)#java.lang.String.substring(int, int)#java.lang.Long.parseLong(<unknown>)#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.json.JSONObject.getInt(java.lang.String)#java.lang.String.equals(java.lang.String)#<unknown>.set(<unknown>, <unknown>)#<unknown>.set(<unknown>, <unknown>)#java.security.KeyStore.getInstance(java.lang.String)#java.lang.Integer.parseInt(<unknown>)#java.lang.String.equals(java.lang.String)#<unknown>.nextProperty()#android.content.Intent.putExtra(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, null)#<unknown>.set(<unknown>, int)#java.io.BufferedReader.BufferedReader(java.io.InputStreamReader)#com.inovex.zabbixmobile.api.ZabbixService.importEvents(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader, int)#java.security.KeyStore.getDefaultType()#java.lang.String.equals(<unknown>)#<unknown>.getText()#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.set(<unknown>, java.lang.Object)#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.insert(android.database.sqlite.SQLiteDatabase)#<unknown>.nextProperty()#com.inovex.zabbixmobile.api.ZabbixService._startTransaction()#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.close()#<unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>)#org.json.JSONObject.put(java.lang.String, long)#com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, null, int)#<unknown>.getJsonArray()#<unknown>.set(<unknown>, <unknown>)#java.lang.String.equals(<unknown>)#org.apache.http.conn.scheme.Scheme.Scheme(java.lang.String, org.apache.http.conn.scheme.PlainSocketFactory, int)#org.json.JSONObject.put(java.lang.String, java.lang.String)#java.lang.String.equals(<unknown>)",
    "p_callsites_t": ["<unknown>.set(<unknown>, <unknown>) org.apache.http.HttpEntity.getContent() java.lang.String.equals(java.lang.String) org.json.JSONArray.JSONArray() <unknown>.set(<unknown>, java.lang.Object) org.json.JSONObject.put(java.lang.String, java.lang.Integer) org.json.JSONArray.put(java.lang.String) org.json.JSONObject.JSONObject() org.json.JSONObject.put(java.lang.String, java.lang.String) org.codehaus.jackson.JsonFactory.createJsonParser(java.io.InputStream) java.lang.String.equals(<unknown>) org.apache.http.StatusLine.getStatusCode() <unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>) org.json.JSONObject.put(java.lang.String, java.lang.String) android.database.sqlite.SQLiteDatabase.inTransaction() android.util.Log.d(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService._startTransaction() java.lang.String.equals(java.lang.String) org.codehaus.jackson.JsonFactory.JsonFactory() com.inovex.zabbixmobile.api.ZabbixService._endTransaction() org.json.JSONObject.put(java.lang.String, int) android.content.ContentValues.ContentValues(int) org.apache.http.conn.scheme.SchemeRegistry.SchemeRegistry() <unknown>.insert(android.database.sqlite.SQLiteDatabase) <unknown>.insert(android.database.sqlite.SQLiteDatabase) com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject) com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject) com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject) org.json.JSONObject.getJSONObject(java.lang.String) java.io.InputStreamReader.InputStreamReader(java.io.InputStream) android.content.Intent.putExtra(java.lang.String, <unknown>) org.json.JSONArray.length() java.lang.String.equals(java.lang.String) <unknown>.set(<unknown>, <unknown>) java.lang.String.equals(<unknown>) com.inovex.zabbixmobile.api.ZabbixService.PreconditionFailedException.PreconditionFailedException() java.lang.StringBuilder.StringBuilder() android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null) <unknown>.nextValueToken() org.json.JSONObject.JSONObject() org.json.JSONObject.put(java.lang.String, int) org.json.JSONObject.put(java.lang.String, org.json.JSONArray) java.lang.String.equals(<unknown>) <unknown>.get(<unknown>) <unknown>.insert(android.database.sqlite.SQLiteDatabase) android.content.Intent.putExtra(java.lang.String, <unknown>) java.lang.String.equals(<unknown>) com.inovex.zabbixmobile.api.ZabbixService.importItems(<unknown>, int, boolean) com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, java.lang.String, int) android.util.Log.d(java.lang.String, java.lang.String) org.json.JSONObject.put(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject) org.apache.http.conn.scheme.Scheme.Scheme(java.lang.String, org.apache.http.conn.ssl.SSLSocketFactory, int) org.apache.http.HttpEntity.getContent() org.codehaus.jackson.JsonParser.close() java.lang.String.equals(<unknown>) <unknown>.nextValueToken() <unknown>.getCurrentName() org.json.JSONArray.JSONArray(java.util.Set<java.lang.Long>) <unknown>.nextValueToken() android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null) <unknown>.getJsonArray() com.inovex.zabbixmobile.api.ZabbixService._startTransaction() org.json.JSONArray.JSONArray() <unknown>.nextProperty() java.lang.String.equals(java.lang.String) android.database.sqlite.SQLiteDatabase.update(<unknown>, android.content.ContentValues, <unknown>, null) java.util.Set<java.lang.Long>.add(<unknown>) <unknown>.get(<unknown>) <unknown>.get(<unknown>) android.content.ContentValues.put(<unknown>, java.lang.Long) java.lang.String.equals(java.lang.String) org.apache.http.StatusLine.getReasonPhrase() java.lang.RuntimeException.RuntimeException(java.lang.String) <unknown>.nextProperty() java.lang.Throwable.printStackTrace() java.lang.String.equals(<unknown>) java.lang.Long.parseLong(<unknown>) org.json.JSONObject.put(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject) <unknown>.getCurrentName() android.content.ContentValues.put(<unknown>, java.lang.Long) org.apache.http.entity.StringEntity.StringEntity(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject) java.lang.String.equals(<unknown>) <unknown>.EventData() <unknown>.next() <unknown>.set(<unknown>, <unknown>) com.inovex.zabbixmobile.api.ZabbixService.CustomSSLSocketFactory.CustomSSLSocketFactory(java.security.KeyStore) com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject) <unknown>.getCurrentName() java.util.List<java.lang.String>.add(java.lang.String) org.json.JSONObject.put(java.lang.String, int) <unknown>.getText() org.json.JSONObject.put(java.lang.String, java.lang.String) org.apache.http.conn.ssl.SSLSocketFactory.setHostnameVerifier(org.apache.http.conn.ssl.X509HostnameVerifier) <unknown>.set(<unknown>, <unknown>) <unknown>.getText() org.json.JSONObject.put(java.lang.String, long) java.util.Date.Date() android.util.Log.i(java.lang.String, java.lang.String) org.json.JSONObject.put(java.lang.String, int) org.json.JSONObject.put(java.lang.String, int) <unknown>.set(<unknown>, <unknown>) com.inovex.zabbixmobile.api.ZabbixService.authenticate() android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null) android.util.Log.d(java.lang.String, java.lang.String) java.lang.String.equals(java.lang.String) org.apache.http.HttpResponse.getEntity() org.json.JSONObject.JSONObject() com.inovex.zabbixmobile.api.ZabbixService.importItems(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader, int, boolean) com.inovex.zabbixmobile.api.ZabbixService._startTransaction() com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, null, int) java.io.BufferedReader.read() org.json.JSONObject.put(java.lang.String, long) <unknown>.set(<unknown>, <unknown>) android.database.Cursor.getLong(<unknown>) java.lang.IllegalStateException.IllegalStateException(java.lang.String) org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.getCurrentName() android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null) android.util.Log.d(java.lang.String, java.lang.String) <unknown>.set(<unknown>, <unknown>) java.lang.String.equals(<unknown>) org.json.JSONObject.put(java.lang.String, java.lang.String) android.database.Cursor.moveToFirst() com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, java.lang.String) android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null) java.lang.String.equals(java.lang.String) com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, java.lang.String) <unknown>.getText() org.json.JSONObject.put(java.lang.String, java.lang.String) android.content.Intent.putExtra(java.lang.String, <unknown>) <unknown>.getCurrentName() android.content.res.Resources.getString(<unknown>) android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null) android.database.sqlite.SQLiteDatabase.setTransactionSuccessful() <unknown>.next() <unknown>.getText() <unknown>.nextValueToken() com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject) com.inovex.zabbixmobile.api.ZabbixService.showProgress(<unknown>) java.io.IOException.IOException(java.lang.String) <unknown>.getCurrentName() android.util.Log.d(java.lang.String, java.lang.String) java.lang.Object.toString() org.json.JSONObject.toString() <unknown>.set(<unknown>, <unknown>) org.json.JSONArray.JSONArray() org.apache.http.HttpResponse.getStatusLine() org.json.JSONArray.JSONArray() org.json.JSONObject.put(java.lang.String, java.lang.String) org.apache.http.impl.client.DefaultHttpClient.DefaultHttpClient() org.json.JSONObject.put(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject) org.apache.http.HttpResponse.getStatusLine() java.lang.String.equals(<unknown>) java.util.Date.Date() android.util.Log.i(java.lang.String, java.lang.String) android.content.Context.getResources() org.apache.http.impl.client.CloseableHttpClient.execute(org.apache.http.client.methods.HttpPost) com.inovex.zabbixmobile.api.ZabbixService._commitTransactionIfRecommended() com.inovex.zabbixmobile.api.ZabbixService.importHostGroups(<unknown>) android.content.Context.sendBroadcast(android.content.Intent) android.content.Context.sendBroadcast(android.content.Intent) com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, null, int) java.lang.Integer.parseInt(<unknown>) <unknown>.ApplicationData() com.inovex.zabbixmobile.api.ZabbixService.NoAPIAccessException.NoAPIAccessException() com.inovex.zabbixmobile.api.ZabbixService._commitTransactionIfRecommended() <unknown>.getJsonArray() org.apache.http.message.AbstractHttpMessage.addHeader(java.lang.String, java.lang.String) org.json.JSONObject.put(java.lang.String, int) java.lang.String.replace(java.lang.String, java.lang.String) org.json.JSONArray.JSONArray() <unknown>.set(<unknown>, <unknown>) org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.set(<unknown>, <unknown>) org.json.JSONArray.JSONArray() java.lang.String.equals(<unknown>) com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, java.lang.String, int) <unknown>.nextProperty() <unknown>.set(<unknown>, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject) org.json.JSONObject.JSONObject() java.lang.String.contains(java.lang.String) org.apache.http.client.methods.HttpEntityEnclosingRequestBase.setEntity(org.apache.http.entity.StringEntity) com.inovex.zabbixmobile.api.ZabbixService.importTriggers(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader) org.json.JSONObject.put(java.lang.String, int) <unknown>.HostGroupData() <unknown>.JsonArrayOrObjectReader(org.codehaus.jackson.JsonParser) <unknown>.HostGroupData() <unknown>.nextProperty() java.lang.Long.parseLong(<unknown>) org.json.JSONObject.put(java.lang.String, java.lang.String) org.json.JSONObject.put(java.lang.String, org.json.JSONArray) org.json.JSONObject.put(java.lang.String, java.lang.Integer) <unknown>.set(<unknown>, <unknown>) <unknown>.close() org.json.JSONObject.put(java.lang.String, org.json.JSONArray) <unknown>.set(<unknown>, <unknown>) java.lang.String.equals(java.lang.String) android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null) <unknown>.next() org.json.JSONObject.toString() java.lang.String.equals(<unknown>) java.lang.String.equals(<unknown>) android.database.sqlite.SQLiteDatabase.query(<unknown>, null, <unknown>, null, null, null, null) <unknown>.set(<unknown>, <unknown>) org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.CacheData() <unknown>.getText() com.inovex.zabbixmobile.api.ZabbixService._startTransaction() <unknown>.set(<unknown>, <unknown>) com.inovex.zabbixmobile.api.ZabbixService._endTransaction() <unknown>.set(<unknown>, int) <unknown>.getJsonArray() java.lang.String.equals(<unknown>) java.util.Date.getTime() java.lang.String.equals(java.lang.String) org.json.JSONObject.put(java.lang.String, int) <unknown>.set(<unknown>, <unknown>) java.lang.Integer.parseInt(<unknown>) org.codehaus.jackson.JsonParser.getCurrentName() <unknown>.nextProperty() com.inovex.zabbixmobile.api.ZabbixService._endTransaction() java.lang.String.equals(<unknown>) org.json.JSONObject.put(java.lang.String, int) android.database.sqlite.SQLiteDatabase.update(<unknown>, android.content.ContentValues, <unknown>, null) com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject) com.inovex.zabbixmobile.api.ZabbixService._endTransaction() java.lang.StringBuilder.append(char) <unknown>.set(<unknown>, <unknown>) <unknown>.get(<unknown>) <unknown>.set(<unknown>, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject) org.json.JSONObject.put(java.lang.String, java.lang.String) android.database.Cursor.getLong(<unknown>) java.lang.String.equals(<unknown>) org.json.JSONObject.put(java.lang.String, java.lang.String) org.json.JSONObject.JSONObject() org.apache.http.params.HttpProtocolParams.setVersion(org.apache.http.params.HttpParams, org.apache.http.HttpVersion) org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.HistoryDetailData() android.util.Log.d(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService._startTransaction() <unknown>.next() <unknown>.set(<unknown>, <unknown>) <unknown>.nextValueToken() org.json.JSONObject.JSONObject() java.lang.String.equals(<unknown>) java.lang.Long.parseLong(<unknown>) java.lang.Integer.parseInt(<unknown>) org.apache.http.client.methods.HttpPost.HttpPost(java.lang.String) org.apache.http.StatusLine.getStatusCode() <unknown>.set(<unknown>, int) java.lang.String.equals(java.lang.String) java.lang.String.equals(<unknown>) java.lang.String.equals(<unknown>) <unknown>.getCurrentName() java.util.ArrayList<java.lang.String>.ArrayList, String() com.inovex.zabbixmobile.api.ZabbixService._startTransaction() com.inovex.zabbixmobile.api.ZabbixService.importTriggers(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader) org.json.JSONArray.put(java.lang.String) <unknown>.nextValueToken() org.json.JSONArray.put(java.lang.String) <unknown>.set(<unknown>, <unknown>) org.json.JSONObject.put(java.lang.String, int) com.inovex.zabbixmobile.api.ZabbixService.importItems(<unknown>, int, boolean) org.json.JSONObject.JSONObject() com.inovex.zabbixmobile.api.ZabbixService.importTriggers(<unknown>) com.inovex.zabbixmobile.api.ZabbixService.importGraphItems(<unknown>) <unknown>.ScreenItemData() <unknown>.set(<unknown>, <unknown>) <unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>) android.preference.PreferenceManager.getDefaultSharedPreferences(android.content.Context) org.json.JSONObject.length() <unknown>.nextValueToken() java.util.HashSet<java.lang.Long>.HashSet, Long() java.lang.String.equals(java.lang.String) android.content.SharedPreferences.getBoolean(java.lang.String, boolean) <unknown>.insert(android.database.sqlite.SQLiteDatabase) org.json.JSONObject.put(java.lang.String, org.json.JSONArray) <unknown>.close() com.inovex.zabbixmobile.api.ZabbixService.importHosts(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader, int) org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.next() android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null) org.json.JSONObject.put(java.lang.String, java.lang.String) org.json.JSONObject.getString(java.lang.String) <unknown>.set(<unknown>, <unknown>) org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.close() org.json.JSONObject.getString(java.lang.String) java.lang.String.equals(java.lang.String) java.lang.Long.parseLong(<unknown>) org.codehaus.jackson.JsonParser.isClosed() org.json.JSONObject.put(java.lang.String, int) org.json.JSONObject.put(java.lang.String, org.json.JSONArray) org.json.JSONObject.put(java.lang.String, long) <unknown>.close() org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.set(<unknown>, long) org.json.JSONObject.put(java.lang.String, org.json.JSONObject) <unknown>.set(<unknown>, <unknown>) com.inovex.zabbixmobile.api.ZabbixService._endTransaction() java.lang.String.replaceAll(java.lang.String, java.lang.String) org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.nextValueToken() org.json.JSONObject.put(java.lang.String, java.lang.String) org.json.JSONObject.put(java.lang.String, java.lang.String) org.apache.http.params.BasicHttpParams.BasicHttpParams() android.database.sqlite.SQLiteDatabase.beginTransaction() com.inovex.zabbixmobile.api.ZabbixService._commitTransactionIfRecommended() com.inovex.zabbixmobile.api.ZabbixService._endTransaction() java.lang.String.equals(<unknown>) <unknown>.insert(android.database.sqlite.SQLiteDatabase) <unknown>.insert(android.database.sqlite.SQLiteDatabase) org.json.JSONObject.put(java.lang.String, int) <unknown>.next() com.inovex.zabbixmobile.api.ZabbixService._startTransaction() <unknown>.getJsonArray() android.content.SharedPreferences.getString(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, null, int) javax.net.SocketFactory.createSocket() java.lang.Long.parseLong(<unknown>) org.apache.http.client.CredentialsProvider.setCredentials(org.apache.http.auth.AuthScope, org.apache.http.auth.UsernamePasswordCredentials) org.json.JSONObject.put(java.lang.String, java.lang.String) org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.next() com.inovex.zabbixmobile.api.ZabbixService.HttpAuthorizationRequiredException.HttpAuthorizationRequiredException() android.database.sqlite.SQLiteQueryBuilder.query(android.database.sqlite.SQLiteDatabase, null, null, null, null, null, null) java.util.Date.Date() com.inovex.zabbixmobile.api.ZabbixService._commitTransactionIfRecommended() <unknown>.set(<unknown>, java.lang.String) org.json.JSONObject.JSONObject() <unknown>.next() <unknown>.set(<unknown>, <unknown>) <unknown>.set(<unknown>, <unknown>) com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject) java.lang.String.equals(java.lang.String) com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, java.lang.String) java.lang.String.indexOf(char) android.database.sqlite.SQLiteDatabase.query(<unknown>, null, <unknown>, null, null, null, null) android.preference.PreferenceManager.getDefaultSharedPreferences(android.content.Context) <unknown>.nextProperty() org.apache.http.impl.client.CloseableHttpClient.execute(org.apache.http.client.methods.HttpPost) <unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>) com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, java.lang.String) org.json.JSONObject.JSONObject() <unknown>.close() android.database.Cursor.getColumnIndex(<unknown>) android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null) org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.nextProperty() org.apache.http.conn.scheme.PlainSocketFactory.getSocketFactory() com.inovex.zabbixmobile.api.ZabbixService._commitTransactionIfRecommended() com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject) java.lang.StringBuilder.toString() org.json.JSONObject.put(java.lang.String, java.lang.String) android.database.sqlite.SQLiteQueryBuilder.SQLiteQueryBuilder() <unknown>.insert(android.database.sqlite.SQLiteDatabase) org.apache.http.conn.scheme.SchemeRegistry.register(org.apache.http.conn.scheme.Scheme) <unknown>.set(<unknown>, <unknown>) org.json.JSONObject.JSONObject(java.lang.String) java.lang.String.equals(<unknown>) <unknown>.set(<unknown>, <unknown>) <unknown>.set(<unknown>, <unknown>) java.lang.IllegalStateException.IllegalStateException(java.lang.String) java.lang.Double.parseDouble(<unknown>) android.content.ContentValues.put(<unknown>, java.lang.Long) android.database.sqlite.SQLiteQueryBuilder.appendWhere(<unknown>) org.apache.http.conn.scheme.SchemeRegistry.register(org.apache.http.conn.scheme.Scheme) org.json.JSONObject.getInt(java.lang.String) com.inovex.zabbixmobile.api.ZabbixService.importHosts(<unknown>, null) org.json.JSONObject.put(java.lang.String, boolean) java.lang.Long.parseLong(<unknown>) java.lang.String.indexOf(char) android.database.sqlite.SQLiteQueryBuilder.appendWhere(<unknown>) java.lang.String.length() java.lang.String.equals(<unknown>) com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject) <unknown>.nextProperty() <unknown>.next() android.content.SharedPreferences.getString(java.lang.String, java.lang.String) <unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>) com.inovex.zabbixmobile.api.ZabbixService.importTriggers(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader) <unknown>.GraphData() org.json.JSONArray.put(java.lang.String) org.apache.http.impl.client.AbstractHttpClient.getParams() <unknown>.set(<unknown>, long) <unknown>.set(<unknown>, <unknown>) org.json.JSONObject.getJSONObject(java.lang.String) org.json.JSONObject.put(java.lang.String, java.lang.String) java.lang.String.equals(java.lang.String) org.json.JSONObject.getString(java.lang.String) java.lang.String.equals(<unknown>) java.lang.String.equals(<unknown>) <unknown>.getCurrentName() java.lang.String.equals(<unknown>) com.inovex.zabbixmobile.api.ZabbixService.showProgress(int) <unknown>.getCurrentName() com.inovex.zabbixmobile.api.ZabbixService.importHosts(<unknown>, null) com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, java.lang.String, int) org.json.JSONObject.put(java.lang.String, int) org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.close() java.lang.String.replace(java.lang.String, java.lang.String) java.lang.String.equals(<unknown>) com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject) com.inovex.zabbixmobile.api.ZabbixService._endTransaction() android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null) android.database.Cursor.moveToNext() <unknown>.HostData() <unknown>.set(<unknown>, long) <unknown>.next() com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject) android.database.sqlite.SQLiteQueryBuilder.setTables(<unknown>) java.util.Date.getTime() org.json.JSONObject.put(java.lang.String, long) android.content.ContentValues.ContentValues(int) java.lang.Long.parseLong(<unknown>) org.apache.http.HttpResponse.getEntity() org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.getText() java.lang.String.equals(java.lang.String) <unknown>.set(<unknown>, <unknown>) <unknown>.set(<unknown>, <unknown>) javax.net.ssl.SSLContext.init(null, javax.net.ssl.TrustManager[], null) android.database.sqlite.SQLiteDatabase.endTransaction() java.lang.String.equals(<unknown>) com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, java.lang.String) android.util.Log.d(java.lang.String, java.lang.String) <unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>) <unknown>.next() <unknown>.close() <unknown>.insert(android.database.sqlite.SQLiteDatabase) org.json.JSONObject.put(java.lang.String, java.lang.String) java.lang.Throwable.getMessage() java.lang.String.equals(<unknown>) java.lang.String.equals(<unknown>) <unknown>.set(<unknown>, <unknown>) com.inovex.zabbixmobile.api.ZabbixService._endTransaction() javax.net.ssl.SSLContext.getSocketFactory() org.json.JSONObject.JSONObject() android.content.Context.getResources() org.json.JSONObject.put(java.lang.String, int) com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, null) com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, java.lang.String, int) java.lang.String.matches(java.lang.String) <unknown>.set(<unknown>, <unknown>) org.json.JSONArray.put(java.lang.String) <unknown>.set(<unknown>, <unknown>) android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null) android.content.Context.sendBroadcast(android.content.Intent) org.json.JSONObject.getJSONObject(java.lang.String) <unknown>.get(<unknown>) android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null) java.lang.String.equals(<unknown>) android.content.SharedPreferences.getBoolean(java.lang.String, boolean) java.lang.Throwable.printStackTrace() android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null) org.json.JSONObject.put(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService._startTransaction() android.content.Intent.putExtra(java.lang.String, int) org.json.JSONObject.JSONObject() <unknown>.getText() com.inovex.zabbixmobile.api.ZabbixService._endTransaction() org.apache.http.client.methods.HttpPost.HttpPost(java.lang.String) android.content.SharedPreferences.getString(java.lang.String, java.lang.String) <unknown>.GraphItemData() com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, java.lang.String, int) <unknown>.nextValueToken() org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager.ThreadSafeClientConnManager(org.apache.http.params.HttpParams, org.apache.http.conn.scheme.SchemeRegistry) <unknown>.ApplicationItemRelationData() java.lang.Object.toString() android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null) org.json.JSONArray.JSONArray() java.lang.String.equals(<unknown>) com.inovex.zabbixmobile.api.ZabbixService._startTransaction() org.json.JSONObject.put(java.lang.String, org.json.JSONArray) com.inovex.zabbixmobile.api.ZabbixService.importApplications(int, int, <unknown>) <unknown>.set(<unknown>, int) org.json.JSONObject.put(java.lang.String, int) com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, java.lang.String, int) org.json.JSONObject.put(java.lang.String, java.lang.String) org.json.JSONObject.JSONObject() java.lang.Math.min(int, int) com.inovex.zabbixmobile.api.ZabbixService.showProgress(<unknown>) java.lang.String.equals(java.lang.String) android.content.Intent.Intent(<unknown>) java.lang.String.equals(<unknown>) org.json.JSONObject.put(java.lang.String, int) javax.net.ssl.SSLContext.getInstance(java.lang.String) android.content.res.Resources.getString(<unknown>) org.json.JSONObject.JSONObject() android.content.Intent.Intent(<unknown>) java.lang.String.equals(<unknown>) <unknown>.nextProperty() javax.net.ssl.SSLSocketFactory.createSocket(java.net.Socket, java.lang.String, int, boolean) org.json.JSONObject.put(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject) <unknown>.get(<unknown>) java.io.IOException.IOException(java.lang.String) java.lang.String.trim() java.lang.String.contains(java.lang.String) org.apache.http.entity.StringEntity.StringEntity(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService._endTransaction() .X509TrustManager() com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject) android.graphics.Color.parseColor(<unknown>) com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, null) org.json.JSONObject.getJSONArray(java.lang.String) org.apache.http.client.params.HttpClientParams.setRedirecting(org.apache.http.params.HttpParams, boolean) com.inovex.zabbixmobile.api.ZabbixService._startTransaction() <unknown>.getCurrentName() java.lang.String.equals(<unknown>) java.lang.Long.parseLong(<unknown>) android.util.Log.d(java.lang.String, java.lang.String) org.codehaus.jackson.JsonParser.getCurrentToken() org.codehaus.jackson.JsonParser.nextValue() java.lang.Long.parseLong(<unknown>) <unknown>.getText() java.util.Date.getTime() android.content.Intent.putExtra(java.lang.String, <unknown>) android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null) <unknown>.get(<unknown>) android.database.Cursor.moveToFirst() org.apache.http.client.methods.HttpEntityEnclosingRequestBase.setEntity(org.apache.http.entity.StringEntity) com.inovex.zabbixmobile.api.ZabbixService._commitTransactionIfRecommended() com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, null) android.database.sqlite.SQLiteQueryBuilder.appendWhere(<unknown>) org.apache.http.auth.UsernamePasswordCredentials.UsernamePasswordCredentials(java.lang.String, java.lang.String) java.util.Date.getTime() java.lang.String.equals(<unknown>) com.inovex.zabbixmobile.api.ZabbixService._endTransaction() org.json.JSONObject.put(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService.authenticate() java.lang.String.equals(<unknown>) org.json.JSONObject.put(java.lang.String, java.lang.String) org.json.JSONObject.put(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService.NoAPIAccessException.NoAPIAccessException() org.json.JSONArray.put(long) com.inovex.zabbixmobile.api.ZabbixService._endTransaction() android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null) <unknown>.getJsonArray() <unknown>.ScreenData() java.util.Date.Date() java.util.Date.Date() <unknown>.set(<unknown>, long) <unknown>.getCurrentName() org.json.JSONObject.put(java.lang.String, org.json.JSONArray) <unknown>.set(<unknown>, long) org.json.JSONObject.put(java.lang.String, java.lang.String) org.apache.http.params.HttpConnectionParams.setConnectionTimeout(org.apache.http.params.HttpParams, int) org.json.JSONArray.length() <unknown>.set(<unknown>, java.lang.String) <unknown>.set(<unknown>, long) java.util.Date.getTime() <unknown>.set(<unknown>, <unknown>) <unknown>.set(<unknown>, <unknown>) org.json.JSONArray.put(java.lang.String) java.lang.String.equals(<unknown>) com.inovex.zabbixmobile.api.ZabbixService.importScreenItems(<unknown>) com.inovex.zabbixmobile.api.ZabbixService.HttpAuthorizationRequiredException.HttpAuthorizationRequiredException() <unknown>.getText() org.json.JSONObject.put(java.lang.String, org.json.JSONArray) com.inovex.zabbixmobile.api.ZabbixService.importEvents(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader, null) org.json.JSONObject.JSONObject() <unknown>.set(<unknown>, <unknown>) com.inovex.zabbixmobile.api.ZabbixService.importHostGroups(<unknown>) org.json.JSONObject.toString() java.lang.Integer.parseInt(<unknown>) java.lang.String.equals(java.lang.String) org.apache.http.params.HttpProtocolParams.setContentCharset(org.apache.http.params.HttpParams, java.lang.String) <unknown>.get(<unknown>) android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null) java.lang.String.equals(<unknown>) <unknown>.set(<unknown>, <unknown>) <unknown>.nextValueToken() <unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>) org.json.JSONObject.put(java.lang.String, org.json.JSONArray) org.json.JSONObject.put(java.lang.String, java.lang.Integer) <unknown>.getText() <unknown>.set(<unknown>, <unknown>) org.apache.http.message.AbstractHttpMessage.addHeader(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject) org.json.JSONObject.getJSONArray(java.lang.String) java.security.KeyStore.load(null, null) java.lang.String.replace(java.lang.String, java.lang.String) java.lang.Long.parseLong(<unknown>) org.json.JSONObject.toString() com.inovex.zabbixmobile.api.ZabbixService.importTriggers(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader) android.util.Log.d(java.lang.String, java.lang.String) android.content.SharedPreferences.getString(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, java.lang.String) <unknown>.TriggerData() android.content.SharedPreferences.getString(java.lang.String, java.lang.String) android.content.Intent.Intent(<unknown>) org.json.JSONObject.put(java.lang.String, java.lang.String) org.apache.http.impl.client.AbstractHttpClient.getCredentialsProvider() <unknown>.set(<unknown>, <unknown>) java.io.IOException.IOException(java.lang.String) java.lang.String.trim() org.json.JSONObject.put(java.lang.String, org.json.JSONArray) java.lang.String.split(java.lang.String) java.lang.String.equals(java.lang.String) java.lang.String.endsWith(java.lang.String) <unknown>.set(<unknown>, int) com.inovex.zabbixmobile.api.ZabbixService.showProgress(int) <unknown>.ItemData() org.json.JSONObject.put(java.lang.String, int) <unknown>.set(<unknown>, <unknown>) org.codehaus.jackson.JsonParser.getText() android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null) org.apache.http.impl.client.DefaultHttpClient.DefaultHttpClient(org.apache.http.conn.ClientConnectionManager, org.apache.http.params.HttpParams) <unknown>.close() java.lang.IllegalStateException.IllegalStateException(java.lang.String) org.json.JSONObject.put(java.lang.String, java.lang.String) org.codehaus.jackson.JsonParser.nextToken() android.database.Cursor.getColumnIndex(<unknown>) org.json.JSONObject.put(java.lang.String, org.json.JSONArray) <unknown>.nextValueToken() com.inovex.zabbixmobile.api.ZabbixService._startTransaction() org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.set(<unknown>, java.lang.String) java.lang.String.substring(int, int) java.lang.Long.parseLong(<unknown>) org.json.JSONObject.put(java.lang.String, java.lang.String) org.json.JSONObject.getInt(java.lang.String) java.lang.String.equals(java.lang.String) <unknown>.set(<unknown>, <unknown>) <unknown>.set(<unknown>, <unknown>) java.security.KeyStore.getInstance(java.lang.String) java.lang.Integer.parseInt(<unknown>) java.lang.String.equals(java.lang.String) <unknown>.nextProperty() android.content.Intent.putExtra(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, null) <unknown>.set(<unknown>, int) java.io.BufferedReader.BufferedReader(java.io.InputStreamReader) com.inovex.zabbixmobile.api.ZabbixService.importEvents(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader, int) java.security.KeyStore.getDefaultType() java.lang.String.equals(<unknown>) <unknown>.getText() org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.set(<unknown>, java.lang.Object) org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.insert(android.database.sqlite.SQLiteDatabase) <unknown>.nextProperty() com.inovex.zabbixmobile.api.ZabbixService._startTransaction() org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.close() <unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>) org.json.JSONObject.put(java.lang.String, long) com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, null, int) <unknown>.getJsonArray() <unknown>.set(<unknown>, <unknown>) java.lang.String.equals(<unknown>) org.apache.http.conn.scheme.Scheme.Scheme(java.lang.String, org.apache.http.conn.scheme.PlainSocketFactory, int) org.json.JSONObject.put(java.lang.String, java.lang.String) java.lang.String.equals(<unknown>)"],
    "c_callsites_t": ["<unknown>.set(<unknown>, <unknown>) org.apache.http.HttpEntity.getContent() java.lang.String.equals(java.lang.String) org.json.JSONArray.JSONArray() <unknown>.set(<unknown>, java.lang.Object) org.json.JSONObject.put(java.lang.String, java.lang.Integer) org.json.JSONArray.put(java.lang.String) org.json.JSONObject.JSONObject() org.json.JSONObject.put(java.lang.String, java.lang.String) org.codehaus.jackson.JsonFactory.createJsonParser(java.io.InputStream) java.lang.String.equals(<unknown>) org.apache.http.StatusLine.getStatusCode() <unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>) org.json.JSONObject.put(java.lang.String, java.lang.String) android.database.sqlite.SQLiteDatabase.inTransaction() android.util.Log.d(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService._startTransaction() java.lang.String.equals(java.lang.String) org.codehaus.jackson.JsonFactory.JsonFactory() com.inovex.zabbixmobile.api.ZabbixService._endTransaction() org.json.JSONObject.put(java.lang.String, int) android.content.ContentValues.ContentValues(int) org.apache.http.conn.scheme.SchemeRegistry.SchemeRegistry() <unknown>.insert(android.database.sqlite.SQLiteDatabase) <unknown>.insert(android.database.sqlite.SQLiteDatabase) com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject) com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject) com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject) org.json.JSONObject.getJSONObject(java.lang.String) java.io.InputStreamReader.InputStreamReader(java.io.InputStream) android.content.Intent.putExtra(java.lang.String, <unknown>) org.json.JSONArray.length() java.lang.String.equals(java.lang.String) <unknown>.set(<unknown>, <unknown>) java.lang.String.equals(<unknown>) com.inovex.zabbixmobile.api.ZabbixService.PreconditionFailedException.PreconditionFailedException() java.lang.StringBuilder.StringBuilder() android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null) <unknown>.nextValueToken() org.json.JSONObject.JSONObject() org.json.JSONObject.put(java.lang.String, int) org.json.JSONObject.put(java.lang.String, org.json.JSONArray) java.lang.String.equals(<unknown>) <unknown>.get(<unknown>) <unknown>.insert(android.database.sqlite.SQLiteDatabase) android.content.Intent.putExtra(java.lang.String, <unknown>) java.lang.String.equals(<unknown>) com.inovex.zabbixmobile.api.ZabbixService.importItems(<unknown>, int, boolean) com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, java.lang.String, int) android.util.Log.d(java.lang.String, java.lang.String) org.json.JSONObject.put(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject) org.apache.http.conn.scheme.Scheme.Scheme(java.lang.String, org.apache.http.conn.ssl.SSLSocketFactory, int) org.apache.http.HttpEntity.getContent() org.codehaus.jackson.JsonParser.close() java.lang.String.equals(<unknown>) <unknown>.nextValueToken() <unknown>.getCurrentName() org.json.JSONArray.JSONArray(java.util.Set<java.lang.Long>) <unknown>.nextValueToken() android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null) <unknown>.getJsonArray() com.inovex.zabbixmobile.api.ZabbixService._startTransaction() org.json.JSONArray.JSONArray() <unknown>.nextProperty() java.lang.String.equals(java.lang.String) android.database.sqlite.SQLiteDatabase.update(<unknown>, android.content.ContentValues, <unknown>, null) java.util.Set<java.lang.Long>.add(<unknown>) <unknown>.get(<unknown>) <unknown>.get(<unknown>) android.content.ContentValues.put(<unknown>, java.lang.Long) java.lang.String.equals(java.lang.String) org.apache.http.StatusLine.getReasonPhrase() java.lang.RuntimeException.RuntimeException(java.lang.String) <unknown>.nextProperty() java.lang.Throwable.printStackTrace() java.lang.String.equals(<unknown>) java.lang.Long.parseLong(<unknown>) org.json.JSONObject.put(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject) <unknown>.getCurrentName() android.content.ContentValues.put(<unknown>, java.lang.Long) org.apache.http.entity.StringEntity.StringEntity(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject) java.lang.String.equals(<unknown>) <unknown>.EventData() <unknown>.next() <unknown>.set(<unknown>, <unknown>) com.inovex.zabbixmobile.api.ZabbixService.CustomSSLSocketFactory.CustomSSLSocketFactory(java.security.KeyStore) com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject) <unknown>.getCurrentName() java.util.List<java.lang.String>.add(java.lang.String) org.json.JSONObject.put(java.lang.String, int) <unknown>.getText() org.json.JSONObject.put(java.lang.String, java.lang.String) org.apache.http.conn.ssl.SSLSocketFactory.setHostnameVerifier(org.apache.http.conn.ssl.X509HostnameVerifier) <unknown>.set(<unknown>, <unknown>) <unknown>.getText() org.json.JSONObject.put(java.lang.String, long) java.util.Date.Date() android.util.Log.i(java.lang.String, java.lang.String) org.json.JSONObject.put(java.lang.String, int) org.json.JSONObject.put(java.lang.String, int) <unknown>.set(<unknown>, <unknown>) com.inovex.zabbixmobile.api.ZabbixService.authenticate() android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null) android.util.Log.d(java.lang.String, java.lang.String) java.lang.String.equals(java.lang.String) org.apache.http.HttpResponse.getEntity() org.json.JSONObject.JSONObject() com.inovex.zabbixmobile.api.ZabbixService.importItems(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader, int, boolean) com.inovex.zabbixmobile.api.ZabbixService._startTransaction() com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, null, int) java.io.BufferedReader.read() org.json.JSONObject.put(java.lang.String, long) <unknown>.set(<unknown>, <unknown>) android.database.Cursor.getLong(<unknown>) java.lang.IllegalStateException.IllegalStateException(java.lang.String) org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.getCurrentName() android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null) android.util.Log.d(java.lang.String, java.lang.String) <unknown>.set(<unknown>, <unknown>) java.lang.String.equals(<unknown>) org.json.JSONObject.put(java.lang.String, java.lang.String) android.database.Cursor.moveToFirst() com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, java.lang.String) android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null) java.lang.String.equals(java.lang.String) com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, java.lang.String) <unknown>.getText() org.json.JSONObject.put(java.lang.String, java.lang.String) android.content.Intent.putExtra(java.lang.String, <unknown>) <unknown>.getCurrentName() android.content.res.Resources.getString(<unknown>) android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null) android.database.sqlite.SQLiteDatabase.setTransactionSuccessful() <unknown>.next() <unknown>.getText() <unknown>.nextValueToken() com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject) com.inovex.zabbixmobile.api.ZabbixService.showProgress(<unknown>) java.io.IOException.IOException(java.lang.String) <unknown>.getCurrentName() android.util.Log.d(java.lang.String, java.lang.String) java.lang.Object.toString() org.json.JSONObject.toString() <unknown>.set(<unknown>, <unknown>) org.json.JSONArray.JSONArray() org.apache.http.HttpResponse.getStatusLine() org.json.JSONArray.JSONArray() org.json.JSONObject.put(java.lang.String, java.lang.String) org.apache.http.impl.client.DefaultHttpClient.DefaultHttpClient() org.json.JSONObject.put(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject) org.apache.http.HttpResponse.getStatusLine() java.lang.String.equals(<unknown>) java.util.Date.Date() android.util.Log.i(java.lang.String, java.lang.String) android.content.Context.getResources() org.apache.http.impl.client.CloseableHttpClient.execute(org.apache.http.client.methods.HttpPost) com.inovex.zabbixmobile.api.ZabbixService._commitTransactionIfRecommended() com.inovex.zabbixmobile.api.ZabbixService.importHostGroups(<unknown>) android.content.Context.sendBroadcast(android.content.Intent) android.content.Context.sendBroadcast(android.content.Intent) com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, null, int) java.lang.Integer.parseInt(<unknown>) <unknown>.ApplicationData() com.inovex.zabbixmobile.api.ZabbixService.NoAPIAccessException.NoAPIAccessException() com.inovex.zabbixmobile.api.ZabbixService._commitTransactionIfRecommended() <unknown>.getJsonArray() org.apache.http.message.AbstractHttpMessage.addHeader(java.lang.String, java.lang.String) org.json.JSONObject.put(java.lang.String, int) java.lang.String.replace(java.lang.String, java.lang.String) org.json.JSONArray.JSONArray() <unknown>.set(<unknown>, <unknown>) org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.set(<unknown>, <unknown>) org.json.JSONArray.JSONArray() java.lang.String.equals(<unknown>) com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, java.lang.String, int) <unknown>.nextProperty() <unknown>.set(<unknown>, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject) org.json.JSONObject.JSONObject() java.lang.String.contains(java.lang.String) org.apache.http.client.methods.HttpEntityEnclosingRequestBase.setEntity(org.apache.http.entity.StringEntity) com.inovex.zabbixmobile.api.ZabbixService.importTriggers(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader) org.json.JSONObject.put(java.lang.String, int) <unknown>.HostGroupData() <unknown>.JsonArrayOrObjectReader(org.codehaus.jackson.JsonParser) <unknown>.HostGroupData() <unknown>.nextProperty() java.lang.Long.parseLong(<unknown>) org.json.JSONObject.put(java.lang.String, java.lang.String) org.json.JSONObject.put(java.lang.String, org.json.JSONArray) org.json.JSONObject.put(java.lang.String, java.lang.Integer) <unknown>.set(<unknown>, <unknown>) <unknown>.close() org.json.JSONObject.put(java.lang.String, org.json.JSONArray) <unknown>.set(<unknown>, <unknown>) java.lang.String.equals(java.lang.String) android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null) <unknown>.next() org.json.JSONObject.toString() java.lang.String.equals(<unknown>) java.lang.String.equals(<unknown>) android.database.sqlite.SQLiteDatabase.query(<unknown>, null, <unknown>, null, null, null, null) <unknown>.set(<unknown>, <unknown>) org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.CacheData() <unknown>.getText() com.inovex.zabbixmobile.api.ZabbixService._startTransaction() <unknown>.set(<unknown>, <unknown>) com.inovex.zabbixmobile.api.ZabbixService._endTransaction() <unknown>.set(<unknown>, int) <unknown>.getJsonArray() java.lang.String.equals(<unknown>) java.util.Date.getTime() java.lang.String.equals(java.lang.String) org.json.JSONObject.put(java.lang.String, int) <unknown>.set(<unknown>, <unknown>) java.lang.Integer.parseInt(<unknown>) org.codehaus.jackson.JsonParser.getCurrentName() <unknown>.nextProperty() com.inovex.zabbixmobile.api.ZabbixService._endTransaction() java.lang.String.equals(<unknown>) org.json.JSONObject.put(java.lang.String, int) android.database.sqlite.SQLiteDatabase.update(<unknown>, android.content.ContentValues, <unknown>, null) com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject) com.inovex.zabbixmobile.api.ZabbixService._endTransaction() java.lang.StringBuilder.append(char) <unknown>.set(<unknown>, <unknown>) <unknown>.get(<unknown>) <unknown>.set(<unknown>, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject) org.json.JSONObject.put(java.lang.String, java.lang.String) android.database.Cursor.getLong(<unknown>) java.lang.String.equals(<unknown>) org.json.JSONObject.put(java.lang.String, java.lang.String) org.json.JSONObject.JSONObject() org.apache.http.params.HttpProtocolParams.setVersion(org.apache.http.params.HttpParams, org.apache.http.HttpVersion) org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.HistoryDetailData() android.util.Log.d(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService._startTransaction() <unknown>.next() <unknown>.set(<unknown>, <unknown>) <unknown>.nextValueToken() org.json.JSONObject.JSONObject() java.lang.String.equals(<unknown>) java.lang.Long.parseLong(<unknown>) java.lang.Integer.parseInt(<unknown>) org.apache.http.client.methods.HttpPost.HttpPost(java.lang.String) org.apache.http.StatusLine.getStatusCode() <unknown>.set(<unknown>, int) java.lang.String.equals(java.lang.String) java.lang.String.equals(<unknown>) java.lang.String.equals(<unknown>) <unknown>.getCurrentName() java.util.ArrayList<java.lang.String>.ArrayList, String() com.inovex.zabbixmobile.api.ZabbixService._startTransaction() com.inovex.zabbixmobile.api.ZabbixService.importTriggers(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader) org.json.JSONArray.put(java.lang.String) <unknown>.nextValueToken() org.json.JSONArray.put(java.lang.String) <unknown>.set(<unknown>, <unknown>) org.json.JSONObject.put(java.lang.String, int) com.inovex.zabbixmobile.api.ZabbixService.importItems(<unknown>, int, boolean) org.json.JSONObject.JSONObject() com.inovex.zabbixmobile.api.ZabbixService.importTriggers(<unknown>) com.inovex.zabbixmobile.api.ZabbixService.importGraphItems(<unknown>) <unknown>.ScreenItemData() <unknown>.set(<unknown>, <unknown>) <unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>) android.preference.PreferenceManager.getDefaultSharedPreferences(android.content.Context) org.json.JSONObject.length() <unknown>.nextValueToken() java.util.HashSet<java.lang.Long>.HashSet, Long() java.lang.String.equals(java.lang.String) android.content.SharedPreferences.getBoolean(java.lang.String, boolean) <unknown>.insert(android.database.sqlite.SQLiteDatabase) org.json.JSONObject.put(java.lang.String, org.json.JSONArray) <unknown>.close() com.inovex.zabbixmobile.api.ZabbixService.importHosts(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader, int) org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.next() android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null) org.json.JSONObject.put(java.lang.String, java.lang.String) org.json.JSONObject.getString(java.lang.String) <unknown>.set(<unknown>, <unknown>) org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.close() org.json.JSONObject.getString(java.lang.String) java.lang.String.equals(java.lang.String) java.lang.Long.parseLong(<unknown>) org.codehaus.jackson.JsonParser.isClosed() org.json.JSONObject.put(java.lang.String, int) org.json.JSONObject.put(java.lang.String, org.json.JSONArray) org.json.JSONObject.put(java.lang.String, long) <unknown>.close() org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.set(<unknown>, long) org.json.JSONObject.put(java.lang.String, org.json.JSONObject) <unknown>.set(<unknown>, <unknown>) com.inovex.zabbixmobile.api.ZabbixService._endTransaction() java.lang.String.replaceAll(java.lang.String, java.lang.String) org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.nextValueToken() org.json.JSONObject.put(java.lang.String, java.lang.String) org.json.JSONObject.put(java.lang.String, java.lang.String) org.apache.http.params.BasicHttpParams.BasicHttpParams() android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null) android.database.sqlite.SQLiteDatabase.beginTransaction() com.inovex.zabbixmobile.api.ZabbixService._commitTransactionIfRecommended() com.inovex.zabbixmobile.api.ZabbixService._endTransaction() java.lang.String.equals(<unknown>) <unknown>.insert(android.database.sqlite.SQLiteDatabase) <unknown>.insert(android.database.sqlite.SQLiteDatabase) org.json.JSONObject.put(java.lang.String, int) <unknown>.next() com.inovex.zabbixmobile.api.ZabbixService._startTransaction() <unknown>.getJsonArray() android.content.SharedPreferences.getString(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, null, int) javax.net.SocketFactory.createSocket() java.lang.Long.parseLong(<unknown>) org.apache.http.client.CredentialsProvider.setCredentials(org.apache.http.auth.AuthScope, org.apache.http.auth.UsernamePasswordCredentials) org.json.JSONObject.put(java.lang.String, java.lang.String) org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.next() com.inovex.zabbixmobile.api.ZabbixService.HttpAuthorizationRequiredException.HttpAuthorizationRequiredException() android.database.sqlite.SQLiteQueryBuilder.query(android.database.sqlite.SQLiteDatabase, null, null, null, null, null, null) java.util.Date.Date() com.inovex.zabbixmobile.api.ZabbixService._commitTransactionIfRecommended() <unknown>.set(<unknown>, java.lang.String) org.json.JSONObject.JSONObject() <unknown>.next() <unknown>.set(<unknown>, <unknown>) <unknown>.set(<unknown>, <unknown>) com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject) java.lang.String.equals(java.lang.String) com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, java.lang.String) java.lang.String.indexOf(char) android.database.sqlite.SQLiteDatabase.query(<unknown>, null, <unknown>, null, null, null, null) android.preference.PreferenceManager.getDefaultSharedPreferences(android.content.Context) <unknown>.nextProperty() org.apache.http.impl.client.CloseableHttpClient.execute(org.apache.http.client.methods.HttpPost) <unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>) com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, java.lang.String) org.json.JSONObject.JSONObject() <unknown>.close() android.database.Cursor.getColumnIndex(<unknown>) android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null) org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.nextProperty() org.apache.http.conn.scheme.PlainSocketFactory.getSocketFactory() com.inovex.zabbixmobile.api.ZabbixService._commitTransactionIfRecommended() com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject) java.lang.StringBuilder.toString() org.json.JSONObject.put(java.lang.String, java.lang.String) android.database.sqlite.SQLiteQueryBuilder.SQLiteQueryBuilder() <unknown>.insert(android.database.sqlite.SQLiteDatabase) org.apache.http.conn.scheme.SchemeRegistry.register(org.apache.http.conn.scheme.Scheme) <unknown>.set(<unknown>, <unknown>) org.json.JSONObject.JSONObject(java.lang.String) java.lang.String.equals(<unknown>) <unknown>.set(<unknown>, <unknown>) <unknown>.set(<unknown>, <unknown>) java.lang.IllegalStateException.IllegalStateException(java.lang.String) java.lang.Double.parseDouble(<unknown>) android.content.ContentValues.put(<unknown>, java.lang.Long) android.database.sqlite.SQLiteQueryBuilder.appendWhere(<unknown>) org.apache.http.conn.scheme.SchemeRegistry.register(org.apache.http.conn.scheme.Scheme) org.json.JSONObject.getInt(java.lang.String) com.inovex.zabbixmobile.api.ZabbixService.importHosts(<unknown>, null) org.json.JSONObject.put(java.lang.String, boolean) java.lang.Long.parseLong(<unknown>) java.lang.String.indexOf(char) android.database.sqlite.SQLiteQueryBuilder.appendWhere(<unknown>) java.lang.String.length() java.lang.String.equals(<unknown>) com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject) <unknown>.nextProperty() <unknown>.next() android.content.SharedPreferences.getString(java.lang.String, java.lang.String) <unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>) com.inovex.zabbixmobile.api.ZabbixService.importTriggers(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader) <unknown>.GraphData() org.json.JSONArray.put(java.lang.String) org.apache.http.impl.client.AbstractHttpClient.getParams() <unknown>.set(<unknown>, long) <unknown>.set(<unknown>, <unknown>) org.json.JSONObject.getJSONObject(java.lang.String) org.json.JSONObject.put(java.lang.String, java.lang.String) java.lang.String.equals(java.lang.String) org.json.JSONObject.getString(java.lang.String) java.lang.String.equals(<unknown>) java.lang.String.equals(<unknown>) <unknown>.getCurrentName() java.lang.String.equals(<unknown>) com.inovex.zabbixmobile.api.ZabbixService.showProgress(int) <unknown>.getCurrentName() com.inovex.zabbixmobile.api.ZabbixService.importHosts(<unknown>, null) com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, java.lang.String, int) org.json.JSONObject.put(java.lang.String, int) org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.close() java.lang.String.replace(java.lang.String, java.lang.String) java.lang.String.equals(<unknown>) com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject) com.inovex.zabbixmobile.api.ZabbixService._endTransaction() android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null) android.database.Cursor.moveToNext() <unknown>.HostData() <unknown>.set(<unknown>, long) <unknown>.next() com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject) android.database.sqlite.SQLiteQueryBuilder.setTables(<unknown>) java.util.Date.getTime() org.json.JSONObject.put(java.lang.String, long) android.content.ContentValues.ContentValues(int) java.lang.Long.parseLong(<unknown>) org.apache.http.HttpResponse.getEntity() org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.getText() java.lang.String.equals(java.lang.String) <unknown>.set(<unknown>, <unknown>) <unknown>.set(<unknown>, <unknown>) javax.net.ssl.SSLContext.init(null, javax.net.ssl.TrustManager[], null) android.database.sqlite.SQLiteDatabase.endTransaction() java.lang.String.equals(<unknown>) com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, java.lang.String) android.util.Log.d(java.lang.String, java.lang.String) <unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>) <unknown>.next() <unknown>.close() <unknown>.insert(android.database.sqlite.SQLiteDatabase) org.json.JSONObject.put(java.lang.String, java.lang.String) java.lang.Throwable.getMessage() java.lang.String.equals(<unknown>) java.lang.String.equals(<unknown>) <unknown>.set(<unknown>, <unknown>) com.inovex.zabbixmobile.api.ZabbixService._endTransaction() javax.net.ssl.SSLContext.getSocketFactory() org.json.JSONObject.JSONObject() android.content.Context.getResources() org.json.JSONObject.put(java.lang.String, int) com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, null) com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, java.lang.String, int) java.lang.String.matches(java.lang.String) <unknown>.set(<unknown>, <unknown>) org.json.JSONArray.put(java.lang.String) <unknown>.set(<unknown>, <unknown>) android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null) android.content.Context.sendBroadcast(android.content.Intent) org.json.JSONObject.getJSONObject(java.lang.String) <unknown>.get(<unknown>) android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null) java.lang.String.equals(<unknown>) android.content.SharedPreferences.getBoolean(java.lang.String, boolean) java.lang.Throwable.printStackTrace() android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null) org.json.JSONObject.put(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService._startTransaction() android.content.Intent.putExtra(java.lang.String, int) org.json.JSONObject.JSONObject() <unknown>.getText() com.inovex.zabbixmobile.api.ZabbixService._endTransaction() org.apache.http.client.methods.HttpPost.HttpPost(java.lang.String) android.content.SharedPreferences.getString(java.lang.String, java.lang.String) <unknown>.GraphItemData() com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, java.lang.String, int) <unknown>.nextValueToken() org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager.ThreadSafeClientConnManager(org.apache.http.params.HttpParams, org.apache.http.conn.scheme.SchemeRegistry) <unknown>.ApplicationItemRelationData() java.lang.Object.toString() android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null) org.json.JSONArray.JSONArray() java.lang.String.equals(<unknown>) com.inovex.zabbixmobile.api.ZabbixService._startTransaction() org.json.JSONObject.put(java.lang.String, org.json.JSONArray) com.inovex.zabbixmobile.api.ZabbixService.importApplications(int, int, <unknown>) <unknown>.set(<unknown>, int) org.json.JSONObject.put(java.lang.String, int) com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, java.lang.String, int) org.json.JSONObject.put(java.lang.String, java.lang.String) org.json.JSONObject.JSONObject() java.lang.Math.min(int, int) com.inovex.zabbixmobile.api.ZabbixService.showProgress(<unknown>) java.lang.String.equals(java.lang.String) android.content.Intent.Intent(<unknown>) java.lang.String.equals(<unknown>) org.json.JSONObject.put(java.lang.String, int) javax.net.ssl.SSLContext.getInstance(java.lang.String) android.content.res.Resources.getString(<unknown>) org.json.JSONObject.JSONObject() android.content.Intent.Intent(<unknown>) java.lang.String.equals(<unknown>) <unknown>.nextProperty() javax.net.ssl.SSLSocketFactory.createSocket(java.net.Socket, java.lang.String, int, boolean) org.json.JSONObject.put(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject) <unknown>.get(<unknown>) java.io.IOException.IOException(java.lang.String) java.lang.String.trim() java.lang.String.contains(java.lang.String) org.apache.http.entity.StringEntity.StringEntity(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService._endTransaction() .X509TrustManager() com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject) android.graphics.Color.parseColor(<unknown>) com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, null) org.json.JSONObject.getJSONArray(java.lang.String) org.apache.http.client.params.HttpClientParams.setRedirecting(org.apache.http.params.HttpParams, boolean) com.inovex.zabbixmobile.api.ZabbixService._startTransaction() <unknown>.getCurrentName() java.lang.String.equals(<unknown>) java.lang.Long.parseLong(<unknown>) android.util.Log.d(java.lang.String, java.lang.String) org.codehaus.jackson.JsonParser.getCurrentToken() org.codehaus.jackson.JsonParser.nextValue() java.lang.Long.parseLong(<unknown>) <unknown>.getText() java.util.Date.getTime() android.content.Intent.putExtra(java.lang.String, <unknown>) android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null) <unknown>.get(<unknown>) android.database.Cursor.moveToFirst() org.apache.http.client.methods.HttpEntityEnclosingRequestBase.setEntity(org.apache.http.entity.StringEntity) com.inovex.zabbixmobile.api.ZabbixService._commitTransactionIfRecommended() com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, null) android.database.sqlite.SQLiteQueryBuilder.appendWhere(<unknown>) org.apache.http.auth.UsernamePasswordCredentials.UsernamePasswordCredentials(java.lang.String, java.lang.String) java.util.Date.getTime() java.lang.String.equals(<unknown>) com.inovex.zabbixmobile.api.ZabbixService._endTransaction() org.json.JSONObject.put(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService.authenticate() java.lang.String.equals(<unknown>) org.json.JSONObject.put(java.lang.String, java.lang.String) org.json.JSONObject.put(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService.NoAPIAccessException.NoAPIAccessException() org.json.JSONArray.put(long) com.inovex.zabbixmobile.api.ZabbixService._endTransaction() android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null) <unknown>.getJsonArray() <unknown>.ScreenData() java.util.Date.Date() java.util.Date.Date() <unknown>.set(<unknown>, long) <unknown>.getCurrentName() org.json.JSONObject.put(java.lang.String, org.json.JSONArray) <unknown>.set(<unknown>, long) org.json.JSONObject.put(java.lang.String, java.lang.String) org.apache.http.params.HttpConnectionParams.setConnectionTimeout(org.apache.http.params.HttpParams, int) org.json.JSONArray.length() <unknown>.set(<unknown>, java.lang.String) <unknown>.set(<unknown>, long) java.util.Date.getTime() <unknown>.set(<unknown>, <unknown>) <unknown>.set(<unknown>, <unknown>) org.json.JSONArray.put(java.lang.String) java.lang.String.equals(<unknown>) com.inovex.zabbixmobile.api.ZabbixService.importScreenItems(<unknown>) com.inovex.zabbixmobile.api.ZabbixService.HttpAuthorizationRequiredException.HttpAuthorizationRequiredException() <unknown>.getText() org.json.JSONObject.put(java.lang.String, org.json.JSONArray) com.inovex.zabbixmobile.api.ZabbixService.importEvents(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader, null) org.json.JSONObject.JSONObject() <unknown>.set(<unknown>, <unknown>) com.inovex.zabbixmobile.api.ZabbixService.importHostGroups(<unknown>) org.json.JSONObject.toString() java.lang.Integer.parseInt(<unknown>) java.lang.String.equals(java.lang.String) org.apache.http.params.HttpProtocolParams.setContentCharset(org.apache.http.params.HttpParams, java.lang.String) <unknown>.get(<unknown>) android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null) java.lang.String.equals(<unknown>) <unknown>.set(<unknown>, <unknown>) <unknown>.nextValueToken() <unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>) org.json.JSONObject.put(java.lang.String, org.json.JSONArray) org.json.JSONObject.put(java.lang.String, java.lang.Integer) <unknown>.getText() <unknown>.set(<unknown>, <unknown>) org.apache.http.message.AbstractHttpMessage.addHeader(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject) org.json.JSONObject.getJSONArray(java.lang.String) java.security.KeyStore.load(null, null) java.lang.String.replace(java.lang.String, java.lang.String) java.lang.Long.parseLong(<unknown>) org.json.JSONObject.toString() com.inovex.zabbixmobile.api.ZabbixService.importTriggers(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader) android.util.Log.d(java.lang.String, java.lang.String) android.content.SharedPreferences.getString(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, java.lang.String) <unknown>.TriggerData() android.content.SharedPreferences.getString(java.lang.String, java.lang.String) android.content.Intent.Intent(<unknown>) org.json.JSONObject.put(java.lang.String, java.lang.String) org.apache.http.impl.client.AbstractHttpClient.getCredentialsProvider() <unknown>.set(<unknown>, <unknown>) java.io.IOException.IOException(java.lang.String) java.lang.String.trim() org.json.JSONObject.put(java.lang.String, org.json.JSONArray) java.lang.String.split(java.lang.String) java.lang.String.equals(java.lang.String) java.lang.String.endsWith(java.lang.String) <unknown>.set(<unknown>, int) com.inovex.zabbixmobile.api.ZabbixService.showProgress(int) <unknown>.ItemData() org.json.JSONObject.put(java.lang.String, int) <unknown>.set(<unknown>, <unknown>) org.codehaus.jackson.JsonParser.getText() android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null) org.apache.http.impl.client.DefaultHttpClient.DefaultHttpClient(org.apache.http.conn.ClientConnectionManager, org.apache.http.params.HttpParams) <unknown>.close() java.lang.IllegalStateException.IllegalStateException(java.lang.String) org.json.JSONObject.put(java.lang.String, java.lang.String) org.codehaus.jackson.JsonParser.nextToken() android.database.Cursor.getColumnIndex(<unknown>) org.json.JSONObject.put(java.lang.String, org.json.JSONArray) <unknown>.nextValueToken() com.inovex.zabbixmobile.api.ZabbixService._startTransaction() org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.set(<unknown>, java.lang.String) java.lang.String.substring(int, int) java.lang.Long.parseLong(<unknown>) org.json.JSONObject.put(java.lang.String, java.lang.String) org.json.JSONObject.getInt(java.lang.String) java.lang.String.equals(java.lang.String) <unknown>.set(<unknown>, <unknown>) <unknown>.set(<unknown>, <unknown>) java.security.KeyStore.getInstance(java.lang.String) java.lang.Integer.parseInt(<unknown>) java.lang.String.equals(java.lang.String) <unknown>.nextProperty() android.content.Intent.putExtra(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, null) <unknown>.set(<unknown>, int) java.io.BufferedReader.BufferedReader(java.io.InputStreamReader) com.inovex.zabbixmobile.api.ZabbixService.importEvents(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader, int) java.security.KeyStore.getDefaultType() java.lang.String.equals(<unknown>) <unknown>.getText() org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.set(<unknown>, java.lang.Object) org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.insert(android.database.sqlite.SQLiteDatabase) <unknown>.nextProperty() com.inovex.zabbixmobile.api.ZabbixService._startTransaction() org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.close() <unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>) org.json.JSONObject.put(java.lang.String, long) com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, null, int) <unknown>.getJsonArray() <unknown>.set(<unknown>, <unknown>) java.lang.String.equals(<unknown>) org.apache.http.conn.scheme.Scheme.Scheme(java.lang.String, org.apache.http.conn.scheme.PlainSocketFactory, int) org.json.JSONObject.put(java.lang.String, java.lang.String) java.lang.String.equals(<unknown>)"],
    "c_callsites_added_t": ["android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null)"],
    "c_methods_t": ["ApplicationData ApplicationItemRelationData ArrayList, String BasicHttpParams BufferedReader CacheData ContentValues CustomSSLSocketFactory Date DefaultHttpClient EventData GraphData GraphItemData HashSet, Long HistoryDetailData HostData HostGroupData HttpAuthorizationRequiredException HttpPost IOException IllegalStateException InputStreamReader Intent ItemData JSONArray JSONObject JsonArrayOrObjectReader JsonFactory NoAPIAccessException PreconditionFailedException RuntimeException SQLiteQueryBuilder Scheme SchemeRegistry ScreenData ScreenItemData StringBuilder StringEntity ThreadSafeClientConnManager TriggerData UsernamePasswordCredentials X509TrustManager _commitTransactionIfRecommended _endTransaction _queryBuffer _queryStream _startTransaction add addHeader append appendWhere authenticate beginTransaction close contains createJsonParser createSocket d delete endTransaction endsWith equals execute get getBoolean getColumnIndex getContent getCredentialsProvider getCurrentName getCurrentToken getDefaultSharedPreferences getDefaultType getEntity getInstance getInt getJSONArray getJSONObject getJsonArray getLong getMessage getParams getReasonPhrase getResources getSocketFactory getStatusCode getStatusLine getString getText getTime i importApplications importEvents importGraphItems importHostGroups importHosts importItems importScreenItems importTriggers inTransaction indexOf init insert isCached isClosed length load matches min moveToFirst moveToNext next nextProperty nextToken nextValue nextValueToken parseColor parseDouble parseInt parseLong printStackTrace put putExtra query read register replace replaceAll sendBroadcast set setCached setConnectionTimeout setContentCharset setCredentials setEntity setHostnameVerifier setRedirecting setTables setTransactionSuccessful setVersion showProgress split substring toString trim update"],
    "id": "inovex/zax\u0000src/com/inovex/zabbixmobile/api/ZabbixService.java\u0000df53c588a80d246f2f77494f72b9fc4b285728ad\u0000bae0223e3d008ee05a94f9b7db30eec6844110b6",
    "p_comments_t": ["\t\t\t// create ApplicationItemRelation /** \n * public, for the unit test\n */\n /** \n * import the hosts from stream\n * @param jsonArray stream\n * @param numHosts count of hosts for progressbar. null if unknown.\n * @return Object[] {(String) comma-separated all Hostnames, (Long) 1. host id}\n * @throws JsonParseException\n * @throws IOException\n */\n \t\t\t// result array found /** \n * import graph items\n * @param graphItems\n * @return true, if graphid column has to be updated from -1 to the correct graphid later.\n * @throws JsonParseException\n * @throws NumberFormatException\n * @throws IOException\n */\n \t\t\t\t\t\t// save only every 20th \t\t\t// wrong password. token remains null \t\t\t// the past 2 hours \t\t\t\t\t// data are unuseable, e.g. because it's a string /** \n * @param events stream\n * @param numEvents if null, no progressbar-update AND only isert, if it does not exist. If !null, progressbar-update AND always insert without checking\n * @throws JsonParseException\n * @throws IOException\n */\n \t\t\t\t\t// Precondition failed / Looks like Zabbix 1.8.2 \t\t\t// get API version \t\t\t// if #0 \"other\" does not exist yet, it has to be created \t\t\t\t\t// later the IDs will be replaced with the correct /** \n * zabbix api call. data will be parsed as json object on-the-fly. Caution: use this only for api calls with a small return data.\n * @param method\n * @param params\n * @return\n * @throws ClientProtocolException\n * @throws IOException\n * @throws JSONException\n * @throws HttpAuthorizationRequiredException\n * @throws NoAPIAccessException\n */\n /** \n * begin sql transaction\n */\n \t\t\t\t\t\t// first do a new auth and then try the same api call again \t\t\t\t// no itemid \t\t\t// count of items /** \n * init\n * @param context android context\n * @param zabbixLocalDB sqlite\n */\n \t\t\t// create applications that does not exist \t\t\t\t// so we use a fiction \t\t\t// only resouretype == 0 /** \n * probably too old zabbix <= 1.8.2\n */\n /** \n * zabbix auth. user and pwd from app preferences\n * @return true success\n * @throws ClientProtocolException\n * @throws IOException\n * @throws JSONException\n * @throws HttpAuthorizationRequiredException\n * @throws NoAPIAccessException\n */\n /** \n * close the last http stream\n */\n \t\t\t// Workaround: historydetails only comes if you use the correct \"history\"-parameter. /** \n * transforms the progress\n * @param start 0% => start%\n * @param end 100% => end%\n */\n \t\t\t\t// in Zabbix version <2.0, this is not default \t\t\t\t// file not found \t\t\t\t\t// hex string => color int \t\tHttpClientParams.setRedirecting(params, true); // redirecting \t\t\t// if applicable replace placeholder \t\t\t// if graphid-column was not set, this must be done later. temporary graphid=-1 \t\t// for GUI unit test, just return true /** \n * imports the \"warning\"-triggers\n * @throws JSONException\n * @throws IOException\n * @throws HttpAuthorizationRequiredException\n * @throws NoAPIAccessException\n */\n \t\t\t// event is parsed and can be inserted into the db \t\tpublic static final int EVENT_GET_TIME_FROM_SHIFT = 7*24*60*60; // -7 days \t\t// http request \t\t\t\t\t// store hosts namen \t\t\t\t// http auth failed \t\t\t\t\t// at this point itemid and hostid is unknown \t\t\t\t\t// import triggers \t\t\t// we try them all, until we get results. /** \n * importiert ein trigger mit dem attribute itemid. ggf. wird der trigger zuerst gelöscht und neu angelegt. imports a trigger with the attribute itemid. if trigger already exists, it will be removed first.\n * @param triggerid\n * @throws JSONException\n * @throws IOException\n * @throws HttpAuthorizationRequiredException\n * @throws NoAPIAccessException\n */\n \t\t\t\t\t// import hosts \t\t\t// for unit test \t\t\t\t// ignore \t\t\tlong time_from = time_till - ZabbixConfig.HISTORY_GET_TIME_FROM_SHIFT; // jetzt-2h \t\t\t// or a json object /** \n * zabbix error: no api access\n */\n /** \n * counts the sql inserts/updates and do a transaction commit to save the memory\n */\n \t\t\t// send intent to GUI \t\t\t\t\t// before zabbix 2.x the name field was \"description\" \t\t\t\t\t// if we get an empty array, we try another history parameter \t\t\t\t\t// store the first item id \t\t// check if the trigger exists and if the itemid was set /** \n * global constants\n */\n \t\t\t\t// create \"other\" hostgroup #1 \t\t\t// if there's no application, the ID #0 must be added (for other) \t\t\t\t\t// because of this, all applicationrelations will be saved with itemid and hostid \"-1\". \t\tpublic static final int HISTORY_GET_TIME_FROM_SHIFT = 8*60*60; // -8h \t\t\t\t\t\t.put(\"history\", historytype) // for integer ? /** \n * interface to connect to the zabbix server\n */\n /** \n * acknowledge zabbix event. Sets ack-flag with comment. Caution: This is supported only for Zabbix version >= 1.8.4\n * @param eventid\n * @param comment\n * @return true, success.\n * @throws ClientProtocolException\n * @throws IOException\n * @throws JSONException\n * @throws HttpAuthorizationRequiredException\n * @throws NoAPIAccessException\n */\n \t\t\t// store the last stream to close it if an exception will be thrown /** \n * zabbix api call as stream.\n * @param method\n * @param params\n * @return stream im json array wrapper\n * @throws JSONException\n * @throws IOException\n * @throws HttpAuthorizationRequiredException\n * @throws NoAPIAccessException\n */\n \t\t// if applicable http auth \t\t\t// correct historytype found and there are data \t\t\t\t// count of the entries cannot be detected (zabbix bug), /** \n * import items from stream.\n * @param items stream\n * @param numItems count for progressbar, if 0 no progressbarupdate\n * @param checkBeforeInsert if true, only make an insert if item does not exist\n * @return the first item id\n * @throws JsonParseException\n * @throws IOException\n */\n \t\t\t// collect all graphids /** \n * http auth is needed\n */\n \t\t\t// ignore for unit test /** \n * commit sql transaction\n */\n \t\t\t// delete old graphs \t\t\t// host without group will get group #0 (other) \t\t\t// there's no result \t\t// if applicable, transform the progress \t\t\t// SSL not trusted \t\t\t// internet problem \t\t\tif (jp.nextToken() != JsonToken.START_ARRAY && jp.getCurrentToken() != JsonToken.START_OBJECT) { // go inside the array \t\tpublic static final int CACHE_LIFETIME_APPLICATIONS = 2*24*60*60; // 2 days \t\t\t\t\t// since zabbix 2.x is the name of the item \"name\" \t\t\t// now the \"-1\" IDs of applicationsrelation will be replaced with the correct itemID \t\t\t// get count of hosts /** \n * import the newest events\n * @throws ClientProtocolException\n * @throws IOException\n * @throws JSONException\n * @throws HttpAuthorizationRequiredException\n * @throws NoAPIAccessException\n */\n /** \n * updates the progressbar in the gui\n * @param i 0..100\n */\n \t\t\t\t\t\t// ignore \t\t\t\t\t// first do a new auth and then try the same api call again /** \n * import the newest event of a trigger\n * @param triggerid\n * @throws JSONException\n * @throws IOException\n * @throws HttpAuthorizationRequiredException\n * @throws NoAPIAccessException\n */\n \t\t// it can be an (empty) array \t\t\t// this parameter can be \"null\" or a number 0-4. Because we don't know when to use which,"],
    "p_email_sni": "jonas.gehring@inovex.de",
    "c_callsites_removed_t": ["<empty>"],
    "c_callsites_cs": "<unknown>.set(<unknown>, <unknown>)#org.apache.http.HttpEntity.getContent()#java.lang.String.equals(java.lang.String)#org.json.JSONArray.JSONArray()#<unknown>.set(<unknown>, java.lang.Object)#org.json.JSONObject.put(java.lang.String, java.lang.Integer)#org.json.JSONArray.put(java.lang.String)#org.json.JSONObject.JSONObject()#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.codehaus.jackson.JsonFactory.createJsonParser(java.io.InputStream)#java.lang.String.equals(<unknown>)#org.apache.http.StatusLine.getStatusCode()#<unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>)#org.json.JSONObject.put(java.lang.String, java.lang.String)#android.database.sqlite.SQLiteDatabase.inTransaction()#android.util.Log.d(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService._startTransaction()#java.lang.String.equals(java.lang.String)#org.codehaus.jackson.JsonFactory.JsonFactory()#com.inovex.zabbixmobile.api.ZabbixService._endTransaction()#org.json.JSONObject.put(java.lang.String, int)#android.content.ContentValues.ContentValues(int)#org.apache.http.conn.scheme.SchemeRegistry.SchemeRegistry()#<unknown>.insert(android.database.sqlite.SQLiteDatabase)#<unknown>.insert(android.database.sqlite.SQLiteDatabase)#com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject)#com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject)#com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject)#org.json.JSONObject.getJSONObject(java.lang.String)#java.io.InputStreamReader.InputStreamReader(java.io.InputStream)#android.content.Intent.putExtra(java.lang.String, <unknown>)#org.json.JSONArray.length()#java.lang.String.equals(java.lang.String)#<unknown>.set(<unknown>, <unknown>)#java.lang.String.equals(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService.PreconditionFailedException.PreconditionFailedException()#java.lang.StringBuilder.StringBuilder()#android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null)#<unknown>.nextValueToken()#org.json.JSONObject.JSONObject()#org.json.JSONObject.put(java.lang.String, int)#org.json.JSONObject.put(java.lang.String, org.json.JSONArray)#java.lang.String.equals(<unknown>)#<unknown>.get(<unknown>)#<unknown>.insert(android.database.sqlite.SQLiteDatabase)#android.content.Intent.putExtra(java.lang.String, <unknown>)#java.lang.String.equals(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService.importItems(<unknown>, int, boolean)#com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, java.lang.String, int)#android.util.Log.d(java.lang.String, java.lang.String)#org.json.JSONObject.put(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject)#org.apache.http.conn.scheme.Scheme.Scheme(java.lang.String, org.apache.http.conn.ssl.SSLSocketFactory, int)#org.apache.http.HttpEntity.getContent()#org.codehaus.jackson.JsonParser.close()#java.lang.String.equals(<unknown>)#<unknown>.nextValueToken()#<unknown>.getCurrentName()#org.json.JSONArray.JSONArray(java.util.Set<java.lang.Long>)#<unknown>.nextValueToken()#android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null)#<unknown>.getJsonArray()#com.inovex.zabbixmobile.api.ZabbixService._startTransaction()#org.json.JSONArray.JSONArray()#<unknown>.nextProperty()#java.lang.String.equals(java.lang.String)#android.database.sqlite.SQLiteDatabase.update(<unknown>, android.content.ContentValues, <unknown>, null)#java.util.Set<java.lang.Long>.add(<unknown>)#<unknown>.get(<unknown>)#<unknown>.get(<unknown>)#android.content.ContentValues.put(<unknown>, java.lang.Long)#java.lang.String.equals(java.lang.String)#org.apache.http.StatusLine.getReasonPhrase()#java.lang.RuntimeException.RuntimeException(java.lang.String)#<unknown>.nextProperty()#java.lang.Throwable.printStackTrace()#java.lang.String.equals(<unknown>)#java.lang.Long.parseLong(<unknown>)#org.json.JSONObject.put(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject)#<unknown>.getCurrentName()#android.content.ContentValues.put(<unknown>, java.lang.Long)#org.apache.http.entity.StringEntity.StringEntity(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject)#java.lang.String.equals(<unknown>)#<unknown>.EventData()#<unknown>.next()#<unknown>.set(<unknown>, <unknown>)#com.inovex.zabbixmobile.api.ZabbixService.CustomSSLSocketFactory.CustomSSLSocketFactory(java.security.KeyStore)#com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject)#<unknown>.getCurrentName()#java.util.List<java.lang.String>.add(java.lang.String)#org.json.JSONObject.put(java.lang.String, int)#<unknown>.getText()#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.apache.http.conn.ssl.SSLSocketFactory.setHostnameVerifier(org.apache.http.conn.ssl.X509HostnameVerifier)#<unknown>.set(<unknown>, <unknown>)#<unknown>.getText()#org.json.JSONObject.put(java.lang.String, long)#java.util.Date.Date()#android.util.Log.i(java.lang.String, java.lang.String)#org.json.JSONObject.put(java.lang.String, int)#org.json.JSONObject.put(java.lang.String, int)#<unknown>.set(<unknown>, <unknown>)#com.inovex.zabbixmobile.api.ZabbixService.authenticate()#android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null)#android.util.Log.d(java.lang.String, java.lang.String)#java.lang.String.equals(java.lang.String)#org.apache.http.HttpResponse.getEntity()#org.json.JSONObject.JSONObject()#com.inovex.zabbixmobile.api.ZabbixService.importItems(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader, int, boolean)#com.inovex.zabbixmobile.api.ZabbixService._startTransaction()#com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, null, int)#java.io.BufferedReader.read()#org.json.JSONObject.put(java.lang.String, long)#<unknown>.set(<unknown>, <unknown>)#android.database.Cursor.getLong(<unknown>)#java.lang.IllegalStateException.IllegalStateException(java.lang.String)#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.getCurrentName()#android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null)#android.util.Log.d(java.lang.String, java.lang.String)#<unknown>.set(<unknown>, <unknown>)#java.lang.String.equals(<unknown>)#org.json.JSONObject.put(java.lang.String, java.lang.String)#android.database.Cursor.moveToFirst()#com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, java.lang.String)#android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null)#java.lang.String.equals(java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, java.lang.String)#<unknown>.getText()#org.json.JSONObject.put(java.lang.String, java.lang.String)#android.content.Intent.putExtra(java.lang.String, <unknown>)#<unknown>.getCurrentName()#android.content.res.Resources.getString(<unknown>)#android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null)#android.database.sqlite.SQLiteDatabase.setTransactionSuccessful()#<unknown>.next()#<unknown>.getText()#<unknown>.nextValueToken()#com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject)#com.inovex.zabbixmobile.api.ZabbixService.showProgress(<unknown>)#java.io.IOException.IOException(java.lang.String)#<unknown>.getCurrentName()#android.util.Log.d(java.lang.String, java.lang.String)#java.lang.Object.toString()#org.json.JSONObject.toString()#<unknown>.set(<unknown>, <unknown>)#org.json.JSONArray.JSONArray()#org.apache.http.HttpResponse.getStatusLine()#org.json.JSONArray.JSONArray()#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.apache.http.impl.client.DefaultHttpClient.DefaultHttpClient()#org.json.JSONObject.put(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject)#org.apache.http.HttpResponse.getStatusLine()#java.lang.String.equals(<unknown>)#java.util.Date.Date()#android.util.Log.i(java.lang.String, java.lang.String)#android.content.Context.getResources()#org.apache.http.impl.client.CloseableHttpClient.execute(org.apache.http.client.methods.HttpPost)#com.inovex.zabbixmobile.api.ZabbixService._commitTransactionIfRecommended()#com.inovex.zabbixmobile.api.ZabbixService.importHostGroups(<unknown>)#android.content.Context.sendBroadcast(android.content.Intent)#android.content.Context.sendBroadcast(android.content.Intent)#com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, null, int)#java.lang.Integer.parseInt(<unknown>)#<unknown>.ApplicationData()#com.inovex.zabbixmobile.api.ZabbixService.NoAPIAccessException.NoAPIAccessException()#com.inovex.zabbixmobile.api.ZabbixService._commitTransactionIfRecommended()#<unknown>.getJsonArray()#org.apache.http.message.AbstractHttpMessage.addHeader(java.lang.String, java.lang.String)#org.json.JSONObject.put(java.lang.String, int)#java.lang.String.replace(java.lang.String, java.lang.String)#org.json.JSONArray.JSONArray()#<unknown>.set(<unknown>, <unknown>)#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.set(<unknown>, <unknown>)#org.json.JSONArray.JSONArray()#java.lang.String.equals(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, java.lang.String, int)#<unknown>.nextProperty()#<unknown>.set(<unknown>, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject)#org.json.JSONObject.JSONObject()#java.lang.String.contains(java.lang.String)#org.apache.http.client.methods.HttpEntityEnclosingRequestBase.setEntity(org.apache.http.entity.StringEntity)#com.inovex.zabbixmobile.api.ZabbixService.importTriggers(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader)#org.json.JSONObject.put(java.lang.String, int)#<unknown>.HostGroupData()#<unknown>.JsonArrayOrObjectReader(org.codehaus.jackson.JsonParser)#<unknown>.HostGroupData()#<unknown>.nextProperty()#java.lang.Long.parseLong(<unknown>)#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.json.JSONObject.put(java.lang.String, org.json.JSONArray)#org.json.JSONObject.put(java.lang.String, java.lang.Integer)#<unknown>.set(<unknown>, <unknown>)#<unknown>.close()#org.json.JSONObject.put(java.lang.String, org.json.JSONArray)#<unknown>.set(<unknown>, <unknown>)#java.lang.String.equals(java.lang.String)#android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null)#<unknown>.next()#org.json.JSONObject.toString()#java.lang.String.equals(<unknown>)#java.lang.String.equals(<unknown>)#android.database.sqlite.SQLiteDatabase.query(<unknown>, null, <unknown>, null, null, null, null)#<unknown>.set(<unknown>, <unknown>)#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.CacheData()#<unknown>.getText()#com.inovex.zabbixmobile.api.ZabbixService._startTransaction()#<unknown>.set(<unknown>, <unknown>)#com.inovex.zabbixmobile.api.ZabbixService._endTransaction()#<unknown>.set(<unknown>, int)#<unknown>.getJsonArray()#java.lang.String.equals(<unknown>)#java.util.Date.getTime()#java.lang.String.equals(java.lang.String)#org.json.JSONObject.put(java.lang.String, int)#<unknown>.set(<unknown>, <unknown>)#java.lang.Integer.parseInt(<unknown>)#org.codehaus.jackson.JsonParser.getCurrentName()#<unknown>.nextProperty()#com.inovex.zabbixmobile.api.ZabbixService._endTransaction()#java.lang.String.equals(<unknown>)#org.json.JSONObject.put(java.lang.String, int)#android.database.sqlite.SQLiteDatabase.update(<unknown>, android.content.ContentValues, <unknown>, null)#com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject)#com.inovex.zabbixmobile.api.ZabbixService._endTransaction()#java.lang.StringBuilder.append(char)#<unknown>.set(<unknown>, <unknown>)#<unknown>.get(<unknown>)#<unknown>.set(<unknown>, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject)#org.json.JSONObject.put(java.lang.String, java.lang.String)#android.database.Cursor.getLong(<unknown>)#java.lang.String.equals(<unknown>)#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.json.JSONObject.JSONObject()#org.apache.http.params.HttpProtocolParams.setVersion(org.apache.http.params.HttpParams, org.apache.http.HttpVersion)#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.HistoryDetailData()#android.util.Log.d(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService._startTransaction()#<unknown>.next()#<unknown>.set(<unknown>, <unknown>)#<unknown>.nextValueToken()#org.json.JSONObject.JSONObject()#java.lang.String.equals(<unknown>)#java.lang.Long.parseLong(<unknown>)#java.lang.Integer.parseInt(<unknown>)#org.apache.http.client.methods.HttpPost.HttpPost(java.lang.String)#org.apache.http.StatusLine.getStatusCode()#<unknown>.set(<unknown>, int)#java.lang.String.equals(java.lang.String)#java.lang.String.equals(<unknown>)#java.lang.String.equals(<unknown>)#<unknown>.getCurrentName()#java.util.ArrayList<java.lang.String>.ArrayList, String()#com.inovex.zabbixmobile.api.ZabbixService._startTransaction()#com.inovex.zabbixmobile.api.ZabbixService.importTriggers(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader)#org.json.JSONArray.put(java.lang.String)#<unknown>.nextValueToken()#org.json.JSONArray.put(java.lang.String)#<unknown>.set(<unknown>, <unknown>)#org.json.JSONObject.put(java.lang.String, int)#com.inovex.zabbixmobile.api.ZabbixService.importItems(<unknown>, int, boolean)#org.json.JSONObject.JSONObject()#com.inovex.zabbixmobile.api.ZabbixService.importTriggers(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService.importGraphItems(<unknown>)#<unknown>.ScreenItemData()#<unknown>.set(<unknown>, <unknown>)#<unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>)#android.preference.PreferenceManager.getDefaultSharedPreferences(android.content.Context)#org.json.JSONObject.length()#<unknown>.nextValueToken()#java.util.HashSet<java.lang.Long>.HashSet, Long()#java.lang.String.equals(java.lang.String)#android.content.SharedPreferences.getBoolean(java.lang.String, boolean)#<unknown>.insert(android.database.sqlite.SQLiteDatabase)#org.json.JSONObject.put(java.lang.String, org.json.JSONArray)#<unknown>.close()#com.inovex.zabbixmobile.api.ZabbixService.importHosts(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader, int)#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.next()#android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null)#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.json.JSONObject.getString(java.lang.String)#<unknown>.set(<unknown>, <unknown>)#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.close()#org.json.JSONObject.getString(java.lang.String)#java.lang.String.equals(java.lang.String)#java.lang.Long.parseLong(<unknown>)#org.codehaus.jackson.JsonParser.isClosed()#org.json.JSONObject.put(java.lang.String, int)#org.json.JSONObject.put(java.lang.String, org.json.JSONArray)#org.json.JSONObject.put(java.lang.String, long)#<unknown>.close()#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.set(<unknown>, long)#org.json.JSONObject.put(java.lang.String, org.json.JSONObject)#<unknown>.set(<unknown>, <unknown>)#com.inovex.zabbixmobile.api.ZabbixService._endTransaction()#java.lang.String.replaceAll(java.lang.String, java.lang.String)#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.nextValueToken()#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.apache.http.params.BasicHttpParams.BasicHttpParams()#android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null)#android.database.sqlite.SQLiteDatabase.beginTransaction()#com.inovex.zabbixmobile.api.ZabbixService._commitTransactionIfRecommended()#com.inovex.zabbixmobile.api.ZabbixService._endTransaction()#java.lang.String.equals(<unknown>)#<unknown>.insert(android.database.sqlite.SQLiteDatabase)#<unknown>.insert(android.database.sqlite.SQLiteDatabase)#org.json.JSONObject.put(java.lang.String, int)#<unknown>.next()#com.inovex.zabbixmobile.api.ZabbixService._startTransaction()#<unknown>.getJsonArray()#android.content.SharedPreferences.getString(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, null, int)#javax.net.SocketFactory.createSocket()#java.lang.Long.parseLong(<unknown>)#org.apache.http.client.CredentialsProvider.setCredentials(org.apache.http.auth.AuthScope, org.apache.http.auth.UsernamePasswordCredentials)#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.next()#com.inovex.zabbixmobile.api.ZabbixService.HttpAuthorizationRequiredException.HttpAuthorizationRequiredException()#android.database.sqlite.SQLiteQueryBuilder.query(android.database.sqlite.SQLiteDatabase, null, null, null, null, null, null)#java.util.Date.Date()#com.inovex.zabbixmobile.api.ZabbixService._commitTransactionIfRecommended()#<unknown>.set(<unknown>, java.lang.String)#org.json.JSONObject.JSONObject()#<unknown>.next()#<unknown>.set(<unknown>, <unknown>)#<unknown>.set(<unknown>, <unknown>)#com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject)#java.lang.String.equals(java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, java.lang.String)#java.lang.String.indexOf(char)#android.database.sqlite.SQLiteDatabase.query(<unknown>, null, <unknown>, null, null, null, null)#android.preference.PreferenceManager.getDefaultSharedPreferences(android.content.Context)#<unknown>.nextProperty()#org.apache.http.impl.client.CloseableHttpClient.execute(org.apache.http.client.methods.HttpPost)#<unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>)#com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, java.lang.String)#org.json.JSONObject.JSONObject()#<unknown>.close()#android.database.Cursor.getColumnIndex(<unknown>)#android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null)#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.nextProperty()#org.apache.http.conn.scheme.PlainSocketFactory.getSocketFactory()#com.inovex.zabbixmobile.api.ZabbixService._commitTransactionIfRecommended()#com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject)#java.lang.StringBuilder.toString()#org.json.JSONObject.put(java.lang.String, java.lang.String)#android.database.sqlite.SQLiteQueryBuilder.SQLiteQueryBuilder()#<unknown>.insert(android.database.sqlite.SQLiteDatabase)#org.apache.http.conn.scheme.SchemeRegistry.register(org.apache.http.conn.scheme.Scheme)#<unknown>.set(<unknown>, <unknown>)#org.json.JSONObject.JSONObject(java.lang.String)#java.lang.String.equals(<unknown>)#<unknown>.set(<unknown>, <unknown>)#<unknown>.set(<unknown>, <unknown>)#java.lang.IllegalStateException.IllegalStateException(java.lang.String)#java.lang.Double.parseDouble(<unknown>)#android.content.ContentValues.put(<unknown>, java.lang.Long)#android.database.sqlite.SQLiteQueryBuilder.appendWhere(<unknown>)#org.apache.http.conn.scheme.SchemeRegistry.register(org.apache.http.conn.scheme.Scheme)#org.json.JSONObject.getInt(java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService.importHosts(<unknown>, null)#org.json.JSONObject.put(java.lang.String, boolean)#java.lang.Long.parseLong(<unknown>)#java.lang.String.indexOf(char)#android.database.sqlite.SQLiteQueryBuilder.appendWhere(<unknown>)#java.lang.String.length()#java.lang.String.equals(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject)#<unknown>.nextProperty()#<unknown>.next()#android.content.SharedPreferences.getString(java.lang.String, java.lang.String)#<unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>)#com.inovex.zabbixmobile.api.ZabbixService.importTriggers(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader)#<unknown>.GraphData()#org.json.JSONArray.put(java.lang.String)#org.apache.http.impl.client.AbstractHttpClient.getParams()#<unknown>.set(<unknown>, long)#<unknown>.set(<unknown>, <unknown>)#org.json.JSONObject.getJSONObject(java.lang.String)#org.json.JSONObject.put(java.lang.String, java.lang.String)#java.lang.String.equals(java.lang.String)#org.json.JSONObject.getString(java.lang.String)#java.lang.String.equals(<unknown>)#java.lang.String.equals(<unknown>)#<unknown>.getCurrentName()#java.lang.String.equals(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService.showProgress(int)#<unknown>.getCurrentName()#com.inovex.zabbixmobile.api.ZabbixService.importHosts(<unknown>, null)#com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, java.lang.String, int)#org.json.JSONObject.put(java.lang.String, int)#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.close()#java.lang.String.replace(java.lang.String, java.lang.String)#java.lang.String.equals(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject)#com.inovex.zabbixmobile.api.ZabbixService._endTransaction()#android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null)#android.database.Cursor.moveToNext()#<unknown>.HostData()#<unknown>.set(<unknown>, long)#<unknown>.next()#com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject)#android.database.sqlite.SQLiteQueryBuilder.setTables(<unknown>)#java.util.Date.getTime()#org.json.JSONObject.put(java.lang.String, long)#android.content.ContentValues.ContentValues(int)#java.lang.Long.parseLong(<unknown>)#org.apache.http.HttpResponse.getEntity()#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.getText()#java.lang.String.equals(java.lang.String)#<unknown>.set(<unknown>, <unknown>)#<unknown>.set(<unknown>, <unknown>)#javax.net.ssl.SSLContext.init(null, javax.net.ssl.TrustManager[], null)#android.database.sqlite.SQLiteDatabase.endTransaction()#java.lang.String.equals(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, java.lang.String)#android.util.Log.d(java.lang.String, java.lang.String)#<unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>)#<unknown>.next()#<unknown>.close()#<unknown>.insert(android.database.sqlite.SQLiteDatabase)#org.json.JSONObject.put(java.lang.String, java.lang.String)#java.lang.Throwable.getMessage()#java.lang.String.equals(<unknown>)#java.lang.String.equals(<unknown>)#<unknown>.set(<unknown>, <unknown>)#com.inovex.zabbixmobile.api.ZabbixService._endTransaction()#javax.net.ssl.SSLContext.getSocketFactory()#org.json.JSONObject.JSONObject()#android.content.Context.getResources()#org.json.JSONObject.put(java.lang.String, int)#com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, null)#com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, java.lang.String, int)#java.lang.String.matches(java.lang.String)#<unknown>.set(<unknown>, <unknown>)#org.json.JSONArray.put(java.lang.String)#<unknown>.set(<unknown>, <unknown>)#android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null)#android.content.Context.sendBroadcast(android.content.Intent)#org.json.JSONObject.getJSONObject(java.lang.String)#<unknown>.get(<unknown>)#android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null)#java.lang.String.equals(<unknown>)#android.content.SharedPreferences.getBoolean(java.lang.String, boolean)#java.lang.Throwable.printStackTrace()#android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null)#org.json.JSONObject.put(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService._startTransaction()#android.content.Intent.putExtra(java.lang.String, int)#org.json.JSONObject.JSONObject()#<unknown>.getText()#com.inovex.zabbixmobile.api.ZabbixService._endTransaction()#org.apache.http.client.methods.HttpPost.HttpPost(java.lang.String)#android.content.SharedPreferences.getString(java.lang.String, java.lang.String)#<unknown>.GraphItemData()#com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, java.lang.String, int)#<unknown>.nextValueToken()#org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager.ThreadSafeClientConnManager(org.apache.http.params.HttpParams, org.apache.http.conn.scheme.SchemeRegistry)#<unknown>.ApplicationItemRelationData()#java.lang.Object.toString()#android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null)#org.json.JSONArray.JSONArray()#java.lang.String.equals(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService._startTransaction()#org.json.JSONObject.put(java.lang.String, org.json.JSONArray)#com.inovex.zabbixmobile.api.ZabbixService.importApplications(int, int, <unknown>)#<unknown>.set(<unknown>, int)#org.json.JSONObject.put(java.lang.String, int)#com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, java.lang.String, int)#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.json.JSONObject.JSONObject()#java.lang.Math.min(int, int)#com.inovex.zabbixmobile.api.ZabbixService.showProgress(<unknown>)#java.lang.String.equals(java.lang.String)#android.content.Intent.Intent(<unknown>)#java.lang.String.equals(<unknown>)#org.json.JSONObject.put(java.lang.String, int)#javax.net.ssl.SSLContext.getInstance(java.lang.String)#android.content.res.Resources.getString(<unknown>)#org.json.JSONObject.JSONObject()#android.content.Intent.Intent(<unknown>)#java.lang.String.equals(<unknown>)#<unknown>.nextProperty()#javax.net.ssl.SSLSocketFactory.createSocket(java.net.Socket, java.lang.String, int, boolean)#org.json.JSONObject.put(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject)#<unknown>.get(<unknown>)#java.io.IOException.IOException(java.lang.String)#java.lang.String.trim()#java.lang.String.contains(java.lang.String)#org.apache.http.entity.StringEntity.StringEntity(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService._endTransaction()#.X509TrustManager()#com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject)#android.graphics.Color.parseColor(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, null)#org.json.JSONObject.getJSONArray(java.lang.String)#org.apache.http.client.params.HttpClientParams.setRedirecting(org.apache.http.params.HttpParams, boolean)#com.inovex.zabbixmobile.api.ZabbixService._startTransaction()#<unknown>.getCurrentName()#java.lang.String.equals(<unknown>)#java.lang.Long.parseLong(<unknown>)#android.util.Log.d(java.lang.String, java.lang.String)#org.codehaus.jackson.JsonParser.getCurrentToken()#org.codehaus.jackson.JsonParser.nextValue()#java.lang.Long.parseLong(<unknown>)#<unknown>.getText()#java.util.Date.getTime()#android.content.Intent.putExtra(java.lang.String, <unknown>)#android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null)#<unknown>.get(<unknown>)#android.database.Cursor.moveToFirst()#org.apache.http.client.methods.HttpEntityEnclosingRequestBase.setEntity(org.apache.http.entity.StringEntity)#com.inovex.zabbixmobile.api.ZabbixService._commitTransactionIfRecommended()#com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, null)#android.database.sqlite.SQLiteQueryBuilder.appendWhere(<unknown>)#org.apache.http.auth.UsernamePasswordCredentials.UsernamePasswordCredentials(java.lang.String, java.lang.String)#java.util.Date.getTime()#java.lang.String.equals(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService._endTransaction()#org.json.JSONObject.put(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService.authenticate()#java.lang.String.equals(<unknown>)#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.json.JSONObject.put(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService.NoAPIAccessException.NoAPIAccessException()#org.json.JSONArray.put(long)#com.inovex.zabbixmobile.api.ZabbixService._endTransaction()#android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null)#<unknown>.getJsonArray()#<unknown>.ScreenData()#java.util.Date.Date()#java.util.Date.Date()#<unknown>.set(<unknown>, long)#<unknown>.getCurrentName()#org.json.JSONObject.put(java.lang.String, org.json.JSONArray)#<unknown>.set(<unknown>, long)#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.apache.http.params.HttpConnectionParams.setConnectionTimeout(org.apache.http.params.HttpParams, int)#org.json.JSONArray.length()#<unknown>.set(<unknown>, java.lang.String)#<unknown>.set(<unknown>, long)#java.util.Date.getTime()#<unknown>.set(<unknown>, <unknown>)#<unknown>.set(<unknown>, <unknown>)#org.json.JSONArray.put(java.lang.String)#java.lang.String.equals(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService.importScreenItems(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService.HttpAuthorizationRequiredException.HttpAuthorizationRequiredException()#<unknown>.getText()#org.json.JSONObject.put(java.lang.String, org.json.JSONArray)#com.inovex.zabbixmobile.api.ZabbixService.importEvents(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader, null)#org.json.JSONObject.JSONObject()#<unknown>.set(<unknown>, <unknown>)#com.inovex.zabbixmobile.api.ZabbixService.importHostGroups(<unknown>)#org.json.JSONObject.toString()#java.lang.Integer.parseInt(<unknown>)#java.lang.String.equals(java.lang.String)#org.apache.http.params.HttpProtocolParams.setContentCharset(org.apache.http.params.HttpParams, java.lang.String)#<unknown>.get(<unknown>)#android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null)#java.lang.String.equals(<unknown>)#<unknown>.set(<unknown>, <unknown>)#<unknown>.nextValueToken()#<unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>)#org.json.JSONObject.put(java.lang.String, org.json.JSONArray)#org.json.JSONObject.put(java.lang.String, java.lang.Integer)#<unknown>.getText()#<unknown>.set(<unknown>, <unknown>)#org.apache.http.message.AbstractHttpMessage.addHeader(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject)#org.json.JSONObject.getJSONArray(java.lang.String)#java.security.KeyStore.load(null, null)#java.lang.String.replace(java.lang.String, java.lang.String)#java.lang.Long.parseLong(<unknown>)#org.json.JSONObject.toString()#com.inovex.zabbixmobile.api.ZabbixService.importTriggers(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader)#android.util.Log.d(java.lang.String, java.lang.String)#android.content.SharedPreferences.getString(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, java.lang.String)#<unknown>.TriggerData()#android.content.SharedPreferences.getString(java.lang.String, java.lang.String)#android.content.Intent.Intent(<unknown>)#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.apache.http.impl.client.AbstractHttpClient.getCredentialsProvider()#<unknown>.set(<unknown>, <unknown>)#java.io.IOException.IOException(java.lang.String)#java.lang.String.trim()#org.json.JSONObject.put(java.lang.String, org.json.JSONArray)#java.lang.String.split(java.lang.String)#java.lang.String.equals(java.lang.String)#java.lang.String.endsWith(java.lang.String)#<unknown>.set(<unknown>, int)#com.inovex.zabbixmobile.api.ZabbixService.showProgress(int)#<unknown>.ItemData()#org.json.JSONObject.put(java.lang.String, int)#<unknown>.set(<unknown>, <unknown>)#org.codehaus.jackson.JsonParser.getText()#android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null)#org.apache.http.impl.client.DefaultHttpClient.DefaultHttpClient(org.apache.http.conn.ClientConnectionManager, org.apache.http.params.HttpParams)#<unknown>.close()#java.lang.IllegalStateException.IllegalStateException(java.lang.String)#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.codehaus.jackson.JsonParser.nextToken()#android.database.Cursor.getColumnIndex(<unknown>)#org.json.JSONObject.put(java.lang.String, org.json.JSONArray)#<unknown>.nextValueToken()#com.inovex.zabbixmobile.api.ZabbixService._startTransaction()#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.set(<unknown>, java.lang.String)#java.lang.String.substring(int, int)#java.lang.Long.parseLong(<unknown>)#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.json.JSONObject.getInt(java.lang.String)#java.lang.String.equals(java.lang.String)#<unknown>.set(<unknown>, <unknown>)#<unknown>.set(<unknown>, <unknown>)#java.security.KeyStore.getInstance(java.lang.String)#java.lang.Integer.parseInt(<unknown>)#java.lang.String.equals(java.lang.String)#<unknown>.nextProperty()#android.content.Intent.putExtra(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, null)#<unknown>.set(<unknown>, int)#java.io.BufferedReader.BufferedReader(java.io.InputStreamReader)#com.inovex.zabbixmobile.api.ZabbixService.importEvents(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader, int)#java.security.KeyStore.getDefaultType()#java.lang.String.equals(<unknown>)#<unknown>.getText()#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.set(<unknown>, java.lang.Object)#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.insert(android.database.sqlite.SQLiteDatabase)#<unknown>.nextProperty()#com.inovex.zabbixmobile.api.ZabbixService._startTransaction()#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.close()#<unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>)#org.json.JSONObject.put(java.lang.String, long)#com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, null, int)#<unknown>.getJsonArray()#<unknown>.set(<unknown>, <unknown>)#java.lang.String.equals(<unknown>)#org.apache.http.conn.scheme.Scheme.Scheme(java.lang.String, org.apache.http.conn.scheme.PlainSocketFactory, int)#org.json.JSONObject.put(java.lang.String, java.lang.String)#java.lang.String.equals(<unknown>)",
    "p_body_t": ["<empty>"],
    "c_patch_t": [" \t */\n \tpublic void importTriggers() throws JSONException, IOException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n \t\tif (!isCached(TriggerData.TABLE_NAME, null)) {\n+\t\t\t// clear triggers\n+\t\t\tzabbixLocalDB.delete(TriggerData.TABLE_NAME, null, null);\n+\n \t\t\t_startTransaction();\n \n \t\t\tlong min = (new Date().getTime()/1000)-ZabbixConfig.STATUS_SHOW_TRIGGER_TIME;"],
    "c_body_t": ["<empty>"],
    "c_email_sni": "jonas.gehring@inovex.de",
    "p_patch_t": [" \t * @throws HttpAuthorizationRequiredException\n \t * @throws NoAPIAccessException\n \t */\n-\tprivate JsonArrayReader _queryStream(String method, JSONObject params) throws JSONException, IOException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n+\tprivate JsonArrayOrObjectReader _queryStream(String method, JSONObject params) throws JSONException, IOException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n \t\t// http request\n \t\tHttpPost post = new HttpPost(url);\n \t\tpost.addHeader(\"Content-Type\", \"application/json; charset=utf-8\");\n@@ -355,6 +355,9 @@ public class ZabbixService {\n \t\t\t.put(\"auth\", token)\n \t\t\t.put(\"id\", 0);\n \n+\t\tLog.d(\"ZabbixService\", \"_queryStream: \"+url);\n+\t\tLog.d(\"ZabbixService\", \"_queryStream: \"+json.toString());\n+\n \t\tpost.setEntity(new StringEntity(json.toString(), \"UTF-8\"));\n \t\ttry {\n \t\t\tHttpResponse resp = httpClient.execute(post);\n@@ -384,7 +387,7 @@ public class ZabbixService {\n \t\t\t\t\t\t// first do a new auth and then try the same api call again\n \t\t\t\t\t\tif (authenticate() && !_notAuthorizedRetry) {\n \t\t\t\t\t\t\t_notAuthorizedRetry = true;\n-\t\t\t\t\t\t\tJsonArrayReader r = _queryStream(method, params);\n+\t\t\t\t\t\t\tJsonArrayOrObjectReader r = _queryStream(method, params);\n \t\t\t\t\t\t\t_notAuthorizedRetry = false;\n \t\t\t\t\t\t\treturn r;\n \t\t\t\t\t\t} else throw new IllegalStateException(errortxt);\n@@ -393,10 +396,20 @@ public class ZabbixService {\n \t\t\t} while (!jp.getCurrentName().equals(\"result\"));\n \n \t\t\t// result array found\n-\t\t\tif (jp.nextToken() != JsonToken.START_ARRAY) { // go inside the array\n+\t\t\tif (jp.nextToken() != JsonToken.START_ARRAY && jp.getCurrentToken() != JsonToken.START_OBJECT) { // go inside the array\n+\t\t\t\ttry {\n+\t\t\t\t\tLog.d(\"ZabbixService\", \"current token: \"+jp.getCurrentToken());\n+\t\t\t\t\tLog.d(\"ZabbixService\", \"current name: \"+jp.getCurrentName());\n+\t\t\t\t\tLog.d(\"ZabbixService\", \"get text: \"+jp.getText());\n+\t\t\t\t\tLog.d(\"ZabbixService\", \"next value: \"+jp.nextValue());\n+\t\t\t\t\tLog.d(\"ZabbixService\", \"next token: \"+jp.nextToken());\n+\t\t\t\t\tLog.d(\"ZabbixService\", \"current token: \"+jp.getCurrentToken());\n+\t\t\t\t\tLog.d(\"ZabbixService\", \"current name: \"+jp.getCurrentName());\n+\t\t\t\t\tLog.d(\"ZabbixService\", \"get text: \"+jp.getText());\n+\t\t\t\t} catch (Exception e) {}\n \t\t\t\tthrow new IOException(\"Expected data to start with an Array\");\n \t\t\t}\n-\t\t\treturn new JsonArrayReader(jp);\n+\t\t\treturn new JsonArrayOrObjectReader(jp);\n \t\t} catch (SSLPeerUnverifiedException e) {\n \t\t\tthrow e;\n \t\t} catch (IOException e) {\n@@ -487,6 +500,7 @@ public class ZabbixService {\n \t\t\t\t\t, new JSONObject()\n \t\t\t);\n \t\t\tisVersion2 = result.getString(\"result\").equals(\"1.4\");\n+\t\t\tLog.i(\"ZabbixService\", \"Zabbix Server Version: isVersion2=\"+isVersion2);\n \t\t}\n \t\treturn token != null;\n \t}\n@@ -504,7 +518,7 @@ public class ZabbixService {\n \t\t}\n \t}\n \n-\tprivate void importApplications(long hostid, long itemid, JsonArrayReader jsonArray) throws JsonParseException, NumberFormatException, IOException {\n+\tprivate void importApplications(long hostid, long itemid, JsonArrayOrObjectReader jsonArray) throws JsonParseException, NumberFormatException, IOException {\n \t\tint num = 0;\n \t\tJsonObjectReader application;\n \t\twhile ((application = jsonArray.next()) != null) {\n@@ -576,7 +590,7 @@ public class ZabbixService {\n \t\t\t\t\t.put(\"sortorder\", \"DESC\");\n \t\t\t}\n \n-\t\t\tJsonArrayReader events = _queryStream(\n+\t\t\tJsonArrayOrObjectReader events = _queryStream(\n \t\t\t\t\t\"event.get\"\n \t\t\t\t\t, params\n \t\t\t);\n@@ -618,7 +632,7 @@ public class ZabbixService {\n \t\t\t\tparams.put(\"sortfield\", \"clock\")\n \t\t\t\t\t.put(\"sortorder\", \"DESC\");\n \t\t\t}\n-\t\t\tJsonArrayReader events = _queryStream(\n+\t\t\tJsonArrayOrObjectReader events = _queryStream(\n \t\t\t\t\t\"event.get\"\n \t\t\t\t\t, params\n \t\t\t);\n@@ -636,7 +650,7 @@ public class ZabbixService {\n \t * @throws JsonParseException\n \t * @throws IOException\n \t */\n-\tprivate void importEvents(JsonArrayReader events, Integer numEvents) throws JsonParseException, IOException {\n+\tprivate void importEvents(JsonArrayOrObjectReader events, Integer numEvents) throws JsonParseException, IOException {\n \t\tint i=0;\n \t\tJsonObjectReader eventReader;\n \t\twhile ((eventReader = events.next()) != null) {\n@@ -688,7 +702,7 @@ public class ZabbixService {\n \t * @throws NumberFormatException\n \t * @throws IOException\n \t */\n-\tprivate boolean importGraphItems(JsonArrayReader graphItems) throws JsonParseException, NumberFormatException, IOException {\n+\tprivate boolean importGraphItems(JsonArrayOrObjectReader graphItems) throws JsonParseException, NumberFormatException, IOException {\n \t\tboolean mustSetGraphid = false;\n \t\tJsonObjectReader graphItemReader;\n \t\twhile ((graphItemReader = graphItems.next()) != null) {\n@@ -737,7 +751,7 @@ public class ZabbixService {\n \t\t\t}\n \t\t\tzabbixLocalDB.delete(CacheData.TABLE_NAME, CacheData.COLUMN_KIND+\"='\"+GraphData.TABLE_NAME+\"' AND \"+CacheData.COLUMN_FILTER+\"='screenid=\"+screenid+'\\'', null);\n \n-\t\t\tJsonArrayReader graphs = _queryStream(\n+\t\t\tJsonArrayOrObjectReader graphs = _queryStream(\n \t\t\t\t\t\"graph.get\"\n \t\t\t\t\t, new JSONObject()\n \t\t\t\t\t\t.put(isVersion2?\"selectGraphItems\":\"select_graph_items\", \"extend\")\n@@ -826,7 +840,7 @@ public class ZabbixService {\n \t\t\t\t// so we use a fiction\n \t\t\t\tint numDetails = 400;\n \t\t\t\tint curI=0;\n-\t\t\t\tJsonArrayReader historydetails = _queryStream(\n+\t\t\t\tJsonArrayOrObjectReader historydetails = _queryStream(\n \t\t\t\t\t\t\"history.get\"\n \t\t\t\t\t\t, new JSONObject()\n \t\t\t\t\t\t\t.put(\"output\", \"extend\")\n@@ -878,7 +892,7 @@ public class ZabbixService {\n \t\t}\n \t}\n \n-\tprivate long importHostGroups(JsonArrayReader jsonArray) throws JsonParseException, IOException {\n+\tprivate long importHostGroups(JsonArrayOrObjectReader jsonArray) throws JsonParseException, IOException {\n \t\tlong firstHostGroupId = -1;\n \t\tJsonObjectReader hostReader;\n \t\twhile ((hostReader = jsonArray.next()) != null) {\n@@ -910,7 +924,7 @@ public class ZabbixService {\n \t * @throws JsonParseException\n \t * @throws IOException\n \t */\n-\tprivate Object[] importHosts(JsonArrayReader jsonArray, Integer numHosts) throws JsonParseException, IOException {\n+\tprivate Object[] importHosts(JsonArrayOrObjectReader jsonArray, Integer numHosts) throws JsonParseException, IOException {\n \t\tList<String> hostnames = new ArrayList<String>();\n \t\tlong firstHostId = -1;\n \t\tJsonObjectReader hostReader;\n@@ -971,7 +985,7 @@ public class ZabbixService {\n \t\t\t\t\t\t.put(isVersion2?\"selectGroups\":\"select_groups\", \"extend\")\n \t\t\t);\n \t\t\tint numHosts = result.getInt(\"result\");\n-\t\t\tJsonArrayReader hosts = _queryStream(\n+\t\t\tJsonArrayOrObjectReader hosts = _queryStream(\n \t\t\t\t\t\"host.get\"\n \t\t\t\t\t, new JSONObject()\n \t\t\t\t\t\t.put(\"output\", \"extend\")\n@@ -995,7 +1009,7 @@ public class ZabbixService {\n \t * @throws JsonParseException\n \t * @throws IOException\n \t */\n-\tprivate long importItems(JsonArrayReader items, int numItems, boolean checkBeforeInsert) throws JsonParseException, IOException {\n+\tprivate long importItems(JsonArrayOrObjectReader items, int numItems, boolean checkBeforeInsert) throws JsonParseException, IOException {\n \t\tlong firstItemId = -1;\n \t\tint curI=0;\n \t\tJsonObjectReader itemReader;\n@@ -1090,7 +1104,7 @@ public class ZabbixService {\n \t\t\t\t\t.put(\"hostids\", new JSONArray().put(hostid))\n \t\t\t);\n \t\t\tint numItems = result.getInt(\"result\");\n-\t\t\tJsonArrayReader items = _queryStream(\n+\t\t\tJsonArrayOrObjectReader items = _queryStream(\n \t\t\t\t\t\"item.get\"\n \t\t\t\t\t, new JSONObject()\n \t\t\t\t\t\t.put(\"output\", \"extend\")\n@@ -1106,7 +1120,7 @@ public class ZabbixService {\n \t\t}\n \t}\n \n-\tprivate void importScreenItems(JsonArrayReader screenItems) throws JsonParseException, NumberFormatException, IOException {\n+\tprivate void importScreenItems(JsonArrayOrObjectReader screenItems) throws JsonParseException, NumberFormatException, IOException {\n \t\tJsonObjectReader screenItemReader;\n \t\twhile ((screenItemReader = screenItems.next()) != null) {\n \t\t\tScreenItemData si = new ScreenItemData();\n@@ -1140,7 +1154,7 @@ public class ZabbixService {\n \t\t\tzabbixLocalDB.delete(ScreenItemData.TABLE_NAME, null, null);\n \t\t\tzabbixLocalDB.delete(CacheData.TABLE_NAME, CacheData.COLUMN_KIND+\"='\"+ScreenData.TABLE_NAME+\"'\", null);\n \n-\t\t\tJsonArrayReader screens = _queryStream(\n+\t\t\tJsonArrayOrObjectReader screens = _queryStream(\n \t\t\t\t\t(isVersion2?\"s\":\"S\")+\"creen.get\"\n \t\t\t\t\t, new JSONObject()\n \t\t\t\t\t\t.put(\"output\", \"extend\")\n@@ -1174,7 +1188,7 @@ public class ZabbixService {\n \t\tif (!isCached(TriggerData.TABLE_NAME, \"triggerid=\"+triggerid)) {\n \t\t\t_startTransaction();\n \n-\t\t\tJsonArrayReader trigger = _queryStream(\n+\t\t\tJsonArrayOrObjectReader trigger = _queryStream(\n \t\t\t\t\t\"trigger.get\"\n \t\t\t\t\t, new JSONObject()\n \t\t\t\t\t\t.put(\"output\", \"extend\")\n@@ -1216,7 +1230,7 @@ public class ZabbixService {\n \t\tif (mustImport) {\n \t\t\t_startTransaction();\n \t\t\tzabbixLocalDB.delete(TriggerData.TABLE_NAME, TriggerData.COLUMN_TRIGGERID+\"=\"+triggerid, null);\n-\t\t\tJsonArrayReader triggers = _queryStream(\n+\t\t\tJsonArrayOrObjectReader triggers = _queryStream(\n \t\t\t\t\t\"trigger.get\"\n \t\t\t\t\t, new JSONObject()\n \t\t\t\t\t\t.put(\"output\", \"extend\")\n@@ -1243,7 +1257,7 @@ public class ZabbixService {\n \t\t\t_startTransaction();\n \n \t\t\tlong min = (new Date().getTime()/1000)-ZabbixConfig.STATUS_SHOW_TRIGGER_TIME;\n-\t\t\tJsonArrayReader triggers = _queryStream(\n+\t\t\tJsonArrayOrObjectReader triggers = _queryStream(\n \t\t\t\t\t\"trigger.get\"\n \t\t\t\t\t, new JSONObject()\n \t\t\t\t\t\t.put(\"output\", \"extend\")\n@@ -1265,7 +1279,7 @@ public class ZabbixService {\n \t\t}\n \t}\n \n-\tprivate void importTriggers(JsonArrayReader jsonArray) throws JsonParseException, IOException {\n+\tprivate void importTriggers(JsonArrayOrObjectReader jsonArray) throws JsonParseException, IOException {\n \t\tJsonObjectReader triggerReader;\n \t\twhile ((triggerReader = jsonArray.next()) != null) {\n \t\t\tTriggerData t = new TriggerData();\n@@ -1311,7 +1325,7 @@ public class ZabbixService {\n \t\tif (!isCached(TriggerData.TABLE_NAME, \"itemid=\"+itemid)) {\n \t\t\t_startTransaction();\n \t\t\tzabbixLocalDB.delete(TriggerData.TABLE_NAME, TriggerData.COLUMN_ITEMID+\"=\"+itemid, null);\n-\t\t\tJsonArrayReader triggers = _queryStream(\n+\t\t\tJsonArrayOrObjectReader triggers = _queryStream(\n \t\t\t\t\t\"trigger.get\"\n \t\t\t\t\t, new JSONObject()\n \t\t\t\t\t\t.put(\"output\", \"extend\")"],
    "repo_sni": "inovex/zax",
    "_version_": 1526823823669723136,
    "c_user_sni": "Jonas Gehring",
    "c_callsites_added_cs": "android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null)",
    "p_parents_ss": ["2bbdeb660e92821bffb04b3315e354e34764dc43"],
    "p_user_sni": "Jonas Gehring",
    "c_subject_t": ["triggers are more stable"],
    "c_imports_added_cs": "<empty>",
    "c_callsites_removed_cs": "<empty>"
  }, {
    "c_patch_no_context_t": ["-\t\tpublic static final int HISTORY_GET_TIME_FROM_SHIFT = 8*60*60; // -8h\n+\t\tpublic static final int HISTORY_GET_TIME_FROM_SHIFT = 24*60*60; // -24h\n+\t/**\n+\t * The API version. From 1.8.3 (maybe earlier) to 2.0 (excluded), this was 1.3. With 2.0, it changed to 1.4. \n+\t * Finally, since 2.0.4, the API version matches the program version.\n+\t */\n+\tprivate String apiVersion = \"\";\n-\t\t\tisVersion2 = result.getString(\"result\").equals(\"1.4\");\n-\t\t\tLog.i(\"ZabbixService\", \"Zabbix Server Version: isVersion2=\"+isVersion2);\n+\t\t\tapiVersion = result.getString(\"result\");\n+\t\t\tisVersion2 = (apiVersion.equals(\"1.4\") || apiVersion.startsWith(\"2\"));\n+\t\t\tLog.i(\"ZabbixService\", \"Zabbix API Version: \" + apiVersion);\n-\t\t\tlong time_from = time_till - ZabbixConfig.HISTORY_GET_TIME_FROM_SHIFT; // jetzt-2h\n+\t\t\tlong time_from = time_till - ZabbixConfig.HISTORY_GET_TIME_FROM_SHIFT;"],
    "p_patch_no_context_t": ["+\t\t\t// clear triggers\n+\t\t\tzabbixLocalDB.delete(TriggerData.TABLE_NAME, null, null);\n+"],
    "c_date_tdt": "May 10, 2013 7:32:46 AM",
    "c_imports_t": ["android.database.sqlite.SQLiteQueryBuilder org.apache.http.conn.scheme.SchemeRegistry java.util.HashSet org.apache.http.params.BasicHttpParams android.content.Context org.apache.http.params.HttpParams org.apache.http.conn.scheme.PlainSocketFactory java.util.ArrayList com.inovex.zabbixmobile.model.ItemData com.inovex.zabbixmobile.model.HostData com.inovex.zabbixmobile.model.GraphData com.inovex.zabbixmobile.model.EventData org.apache.http.auth.UsernamePasswordCredentials org.apache.http.params.HttpConnectionParams android.content.SharedPreferences java.security.KeyManagementException org.apache.http.conn.ClientConnectionManager org.codehaus.jackson.JsonFactory org.apache.http.entity.StringEntity java.util.Set org.apache.http.params.HttpProtocolParams com.inovex.zabbixmobile.model.ApplicationItemRelationData com.inovex.zabbixmobile.model.TriggerData org.codehaus.jackson.JsonToken android.database.Cursor java.net.Socket android.content.Intent org.apache.http.protocol.HTTP org.json.JSONException java.net.UnknownHostException com.inovex.zabbixmobile.model.HistoryDetailData org.apache.http.HttpResponse java.security.KeyStore com.inovex.zabbixmobile.ZabbixContentProvider android.preference.PreferenceManager android.util.Log org.json.JSONObject java.security.NoSuchAlgorithmException org.apache.http.client.params.HttpClientParams java.io.IOException org.apache.http.conn.scheme.Scheme org.apache.http.client.methods.HttpPost javax.net.ssl.SSLContext org.apache.http.auth.AuthScope org.apache.http.conn.ssl.SSLSocketFactory java.security.KeyStoreException android.content.ContentValues java.io.InputStreamReader java.util.Date java.security.UnrecoverableKeyException android.graphics.Color org.apache.http.client.ClientProtocolException com.inovex.zabbixmobile.model.GraphItemData org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager org.json.JSONArray com.inovex.zabbixmobile.model.CacheData javax.net.ssl.SSLPeerUnverifiedException com.inovex.zabbixmobile.model.HostGroupData org.codehaus.jackson.JsonParseException java.security.cert.X509Certificate org.apache.http.HttpVersion android.database.sqlite.SQLiteDatabase java.util.List java.security.cert.CertificateException java.io.BufferedReader com.inovex.zabbixmobile.model.ApplicationData com.inovex.zabbixmobile.model.ScreenItemData javax.net.ssl.TrustManager com.inovex.zabbixmobile.model.ScreenData com.inovex.zabbixmobile.R org.codehaus.jackson.JsonParser org.apache.http.impl.client.DefaultHttpClient javax.net.ssl.X509TrustManager"],
    "c_contents_t": ["package com.inovex.zabbixmobile.api;\n\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.net.Socket;\nimport java.net.UnknownHostException;\nimport java.security.KeyManagementException;\nimport java.security.KeyStore;\nimport java.security.KeyStoreException;\nimport java.security.NoSuchAlgorithmException;\nimport java.security.UnrecoverableKeyException;\nimport java.security.cert.CertificateException;\nimport java.security.cert.X509Certificate;\nimport java.util.ArrayList;\nimport java.util.Date;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Set;\n\nimport javax.net.ssl.SSLContext;\nimport javax.net.ssl.SSLPeerUnverifiedException;\nimport javax.net.ssl.TrustManager;\nimport javax.net.ssl.X509TrustManager;\n\nimport org.apache.http.HttpResponse;\nimport org.apache.http.HttpVersion;\nimport org.apache.http.auth.AuthScope;\nimport org.apache.http.auth.UsernamePasswordCredentials;\nimport org.apache.http.client.ClientProtocolException;\nimport org.apache.http.client.methods.HttpPost;\nimport org.apache.http.client.params.HttpClientParams;\nimport org.apache.http.conn.ClientConnectionManager;\nimport org.apache.http.conn.scheme.PlainSocketFactory;\nimport org.apache.http.conn.scheme.Scheme;\nimport org.apache.http.conn.scheme.SchemeRegistry;\nimport org.apache.http.conn.ssl.SSLSocketFactory;\nimport org.apache.http.entity.StringEntity;\nimport org.apache.http.impl.client.DefaultHttpClient;\nimport org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager;\nimport org.apache.http.params.BasicHttpParams;\nimport org.apache.http.params.HttpConnectionParams;\nimport org.apache.http.params.HttpParams;\nimport org.apache.http.params.HttpProtocolParams;\nimport org.apache.http.protocol.HTTP;\nimport org.codehaus.jackson.JsonFactory;\nimport org.codehaus.jackson.JsonParseException;\nimport org.codehaus.jackson.JsonParser;\nimport org.codehaus.jackson.JsonToken;\nimport org.json.JSONArray;\nimport org.json.JSONException;\nimport org.json.JSONObject;\n\nimport android.content.ContentValues;\nimport android.content.Context;\nimport android.content.Intent;\nimport android.content.SharedPreferences;\nimport android.database.Cursor;\nimport android.database.sqlite.SQLiteDatabase;\nimport android.database.sqlite.SQLiteQueryBuilder;\nimport android.graphics.Color;\nimport android.preference.PreferenceManager;\nimport android.util.Log;\n\nimport com.inovex.zabbixmobile.R;\nimport com.inovex.zabbixmobile.ZabbixContentProvider;\nimport com.inovex.zabbixmobile.model.ApplicationData;\nimport com.inovex.zabbixmobile.model.ApplicationItemRelationData;\nimport com.inovex.zabbixmobile.model.CacheData;\nimport com.inovex.zabbixmobile.model.EventData;\nimport com.inovex.zabbixmobile.model.GraphData;\nimport com.inovex.zabbixmobile.model.GraphItemData;\nimport com.inovex.zabbixmobile.model.HistoryDetailData;\nimport com.inovex.zabbixmobile.model.HostData;\nimport com.inovex.zabbixmobile.model.HostGroupData;\nimport com.inovex.zabbixmobile.model.ItemData;\nimport com.inovex.zabbixmobile.model.ScreenData;\nimport com.inovex.zabbixmobile.model.ScreenItemData;\nimport com.inovex.zabbixmobile.model.TriggerData;\n\n/**\n * interface to connect to the zabbix server\n */\npublic class ZabbixService {\n\tclass CustomSSLSocketFactory extends SSLSocketFactory {\n\t\tSSLContext sslContext = SSLContext.getInstance(\"TLS\");\n\n\t\tpublic CustomSSLSocketFactory(KeyStore truststore) throws NoSuchAlgorithmException, KeyManagementException, KeyStoreException, UnrecoverableKeyException {\n\t\t\tsuper(truststore);\n\t\t\tTrustManager tm = new X509TrustManager() {\n\t\t\t\t@Override\n\t\t\t\tpublic void checkClientTrusted(X509Certificate[] chain,\n\t\t\t\t\t\tString authType) throws CertificateException {\n\t\t\t\t}\n\t\t\t\t@Override\n\t\t\t\tpublic void checkServerTrusted(X509Certificate[] chain,\n\t\t\t\t\t\tString authType) throws CertificateException {\n\t\t\t\t}\n\t\t\t\t@Override\n\t\t\t\tpublic X509Certificate[] getAcceptedIssuers() {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t};\n\t\t\tsslContext.init(null, new TrustManager[] { tm }, null);\n\t\t}\n\n\t\t@Override\n\t\tpublic Socket createSocket() throws IOException {\n\t\t\treturn sslContext.getSocketFactory().createSocket();\n\t\t}\n\n\t\t@Override\n\t\tpublic Socket createSocket(Socket socket, String host, int port, boolean autoClose) throws IOException, UnknownHostException {\n\t\t\treturn sslContext.getSocketFactory().createSocket(socket, host, port, autoClose);\n\t\t}\n\t}\n\n\t/**\n\t * http auth is needed\n\t */\n\tpublic class HttpAuthorizationRequiredException extends Exception {\n\t\tprivate static final long serialVersionUID = 6632422081858878147L;\n\t}\n\n\t/**\n\t * zabbix error: no api access\n\t */\n\tpublic class NoAPIAccessException extends Exception {\n\t\tprivate static final long serialVersionUID = 6381395987443456382L;\n\t}\n\n\t/**\n\t * probably too old zabbix <= 1.8.2\n\t */\n\tpublic class PreconditionFailedException extends Exception {\n\t\tprivate static final long serialVersionUID = -2529885710860745023L;\n\t}\n\n\t/**\n\t * global constants\n\t */\n\tpublic class ZabbixConfig {\n\t\tpublic static final int APPLICATION_GET_LIMIT = 1000;\n\t\tpublic static final int EVENTS_GET_LIMIT = 60;\n\t\tpublic static final int HISTORY_GET_TIME_FROM_SHIFT = 24*60*60; // -24h\n\t\tpublic static final int HISTORY_GET_LIMIT = 8000;\n\t\tpublic static final int HOSTGROUP_GET_LIMIT = 200;\n\t\tpublic static final int HOST_GET_LIMIT = 300;\n\t\tpublic static final int ITEM_GET_LIMIT = 200;\n\t\tpublic static final int TRIGGER_GET_LIMIT = 100;\n\t\tpublic static final int EVENT_GET_TIME_FROM_SHIFT = 7*24*60*60; // -7 days\n\t\tpublic static final int CACHE_LIFETIME_APPLICATIONS = 2*24*60*60; // 2 days\n\t\tpublic static final int CACHE_LIFETIME_EVENTS = 120;\n\t\tpublic static final int CACHE_LIFETIME_HISTORY_DETAILS = 4*60;\n\t\tpublic static final int CACHE_LIFETIME_HOST_GROUPS = 7*24*60*60;\n\t\tpublic static final int CACHE_LIFETIME_HOSTS = 2*24*60*60;\n\t\tpublic static final int CACHE_LIFETIME_SCREENS = 2*24*60*60;\n\t\tpublic static final int CACHE_LIFETIME_ITEMS = 4*60;\n\t\tpublic static final int CACHE_LIFETIME_TRIGGERS = 2*60;\n\t\tpublic static final long STATUS_SHOW_TRIGGER_TIME = 14*24*60*60;\n\t\tpublic static final int HTTP_CONNECTION_TIMEOUT = 30000;\n\t}\n\n\tprivate final DefaultHttpClient httpClient;\n\tprivate final SQLiteDatabase zabbixLocalDB;\n\tprivate String url;\n\tprivate String token;\n\tprivate final Context context;\n\tprivate int _transactionStack;\n\tprivate JsonParser lastStream;\n\tprivate int transformProgressStart;\n\tprivate int transformProgressEnd;\n\tprivate boolean _notAuthorizedRetry;\n\tprivate boolean isVersion2 = true;\n\t/**\n\t * The API version. From 1.8.3 (maybe earlier) to 2.0 (excluded), this was 1.3. With 2.0, it changed to 1.4. \n\t * Finally, since 2.0.4, the API version matches the program version.\n\t */\n\tprivate String apiVersion = \"\";\n\n\t/**\n\t * init\n\t * @param context android context\n\t * @param zabbixLocalDB sqlite\n\t */\n\tpublic ZabbixService(Context context, SQLiteDatabase zabbixLocalDB) {\n\t\tClientConnectionManager ccm = null;\n\t\tHttpParams params = null;\n\n\t\ttry {\n\t\t\tSharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(context);\n\t\t\tif (prefs.getBoolean(\"zabbix_trust_all_ssl_ca\", false)) {\n\t\t\t\tKeyStore trustStore = KeyStore.getInstance(KeyStore.getDefaultType());\n\t\t\t\ttrustStore.load(null, null);\n\n\t\t\t\tSSLSocketFactory sf = new CustomSSLSocketFactory(trustStore);\n\t\t\t\tsf.setHostnameVerifier(SSLSocketFactory.ALLOW_ALL_HOSTNAME_VERIFIER);\n\n\t\t\t\tparams = new BasicHttpParams();\n\t\t\t\tHttpProtocolParams.setVersion(params, HttpVersion.HTTP_1_1);\n\t\t\t\tHttpProtocolParams.setContentCharset(params, HTTP.UTF_8);\n\n\t\t\t\tSchemeRegistry registry = new SchemeRegistry();\n\t\t\t\tregistry.register(new Scheme(\"http\", PlainSocketFactory.getSocketFactory(), 80));\n\t\t\t\tregistry.register(new Scheme(\"https\", sf, 443));\n\n\t\t\t\tccm = new ThreadSafeClientConnManager(params, registry);\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\t// ignore for unit test\n\t\t}\n\n\t\tif (ccm == null || params == null) {\n\t\t\thttpClient = new DefaultHttpClient();\n\t\t} else {\n\t\t\thttpClient = new DefaultHttpClient(ccm, params);\n\t\t}\n\n\t\t// if applicable http auth\n\t\ttry {\n\t\t\tSharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(context);\n\t\t\tif (prefs.getBoolean(\"http_auth_enabled\", false)) {\n\t\t\t\tString user = prefs.getString(\"http_auth_username\", \"\");\n\t\t\t\tString pwd = prefs.getString(\"http_auth_password\", \"\");\n\t\t\t\thttpClient.getCredentialsProvider().setCredentials(AuthScope.ANY, new UsernamePasswordCredentials(user, pwd));\n\t\t\t}\n\t\t} catch (java.lang.UnsupportedOperationException e1) {\n\t\t\t// for unit test\n\t\t}\n\n\t\tparams = httpClient.getParams();\n\t\tHttpClientParams.setRedirecting(params, true); // redirecting\n\t\tHttpConnectionParams.setConnectionTimeout(params, ZabbixConfig.HTTP_CONNECTION_TIMEOUT);\n\t\tthis.context = context;\n\t\tthis.zabbixLocalDB = zabbixLocalDB;\n\t}\n\n\t/**\n\t * counts the sql inserts/updates and do a transaction commit to save the memory\n\t */\n\tprivate void _commitTransactionIfRecommended() {\n\t\tif (_transactionStack++ > 50) {\n\t\t\t_endTransaction();\n\t\t\t_startTransaction();\n\t\t}\n\t}\n\n\t/**\n\t * commit sql transaction\n\t */\n\tpublic void _endTransaction() {\n\t\tif (zabbixLocalDB.inTransaction()) {\n\t\t\tzabbixLocalDB.setTransactionSuccessful();\n\t\t\tzabbixLocalDB.endTransaction();\n\t\t}\n\t}\n\n\t/**\n\t * zabbix api call. data will be parsed as json object on-the-fly.\n\t * Caution: use this only for api calls with a small return data.\n\t * @param method\n\t * @param params\n\t * @return\n\t * @throws ClientProtocolException\n\t * @throws IOException\n\t * @throws JSONException\n\t * @throws HttpAuthorizationRequiredException\n\t * @throws NoAPIAccessException\n\t */\n\tprivate JSONObject _queryBuffer(String method, JSONObject params) throws ClientProtocolException, IOException, JSONException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\tHttpPost post = new HttpPost(url);\n\t\tpost.addHeader(\"Content-Type\", \"application/json; charset=utf-8\");\n\n\t\tString json =\n\t\t\t\"{\" +\n\t\t\t\"\t\\\"jsonrpc\\\" : \\\"2.0\\\",\" +\n\t\t\t\"\t\\\"method\\\" : \\\"\"+method+\"\\\",\" +\n\t\t\t\"\t\\\"params\\\" : \"+params.toString()+\",\" +\n\t\t\t\"\t\\\"auth\\\" : \"+(token==null?\"null\":'\"'+token+'\"')+\",\" +\n\t\t\t\"\t\\\"id\\\" : 0\" +\n\t\t\t\"}\";\n\n\t\tpost.setEntity(new StringEntity(json, \"UTF-8\"));\n\t\ttry {\n\t\t\tHttpResponse resp = httpClient.execute(post);\n\t\t\tif (resp.getStatusLine().getStatusCode() == 401) {\n\t\t\t\t// http auth failed\n\t\t\t\tthrow new HttpAuthorizationRequiredException();\n\t\t\t} else if (resp.getStatusLine().getStatusCode() == 412) {\n\t\t\t\t\t// Precondition failed / Looks like Zabbix 1.8.2\n\t\t\t\tthrow new PreconditionFailedException();\n\t\t\t} else if (resp.getStatusLine().getStatusCode() == 404) {\n\t\t\t\t// file not found\n\t\t\t\tthrow new IOException(resp.getStatusLine().getStatusCode()+\" \"+resp.getStatusLine().getReasonPhrase());\n\t\t\t} else {\n\t\t\t\tLog.d(\"ZabbixService\", resp.getStatusLine().getStatusCode()+\" \"+resp.getStatusLine().getReasonPhrase());\n\t\t\t}\n\t\t\tStringBuilder total = new StringBuilder();\n\t\t\tBufferedReader rd = new BufferedReader(new InputStreamReader(resp.getEntity().getContent()));\n\t\t\tint chr;\n\t\t\twhile ((chr = rd.read()) != -1) {\n\t\t\t\ttotal.append((char) chr);\n\t\t\t}\n\t\t\tJSONObject result = new JSONObject(total.toString());\n\t\t\ttry {\n\t\t\t\tif (result.getJSONObject(\"error\") != null) {\n\t\t\t\t\tif (result.getJSONObject(\"error\").getString(\"data\").equals(\"No API access\")) {\n\t\t\t\t\t\tthrow new NoAPIAccessException();\n\t\t\t\t\t} else throw new RuntimeException(result.getJSONObject(\"error\").toString());\n\t\t\t\t}\n\t\t\t\tif (result.getString(\"data\").equals(\"Not authorized\")) {\n\t\t\t\t\t// first do a new auth and then try the same api call again\n\t\t\t\t\tif (authenticate() && !_notAuthorizedRetry) {\n\t\t\t\t\t\t_notAuthorizedRetry = true;\n\t\t\t\t\t\tJSONObject r = _queryBuffer(method, params);\n\t\t\t\t\t\t_notAuthorizedRetry = false;\n\t\t\t\t\t\treturn r;\n\t\t\t\t\t} throw new IllegalStateException(result.toString());\n\t\t\t\t}\n\t\t\t} catch (JSONException e) {\n\t\t\t\t// ignore\n\t\t\t}\n\t\t\treturn result;\n\t\t} catch (SSLPeerUnverifiedException e) {\n\t\t\t// SSL not trusted\n\t\t\tIntent intent = new Intent(ZabbixContentProvider.CONTENT_PROVIDER_INTENT_ACTION);\n\t\t\tintent.putExtra(\"flag\", ZabbixContentProvider.INTENT_FLAG_SSL_NOT_TRUSTED);\n\t\t\tcontext.sendBroadcast(intent);\n\t\t\tthrow e;\n\t\t} catch (IOException e) {\n\t\t\t// internet problem\n\t\t\t// send intent to GUI\n\t\t\tIntent intent = new Intent(ZabbixContentProvider.CONTENT_PROVIDER_INTENT_ACTION);\n\t\t\tintent.putExtra(\"flag\", ZabbixContentProvider.INTENT_FLAG_CONNECTION_FAILED);\n\t\t\tintent.putExtra(\"value\", e.getMessage());\n\t\t\tcontext.sendBroadcast(intent);\n\t\t\tthrow e;\n\t\t}\n\t}\n\n\t/**\n\t * zabbix api call as stream.\n\t * @param method\n\t * @param params\n\t * @return stream im json array wrapper\n\t * @throws JSONException\n\t * @throws IOException\n\t * @throws HttpAuthorizationRequiredException\n\t * @throws NoAPIAccessException\n\t */\n\tprivate JsonArrayOrObjectReader _queryStream(String method, JSONObject params) throws JSONException, IOException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\t// http request\n\t\tHttpPost post = new HttpPost(url);\n\t\tpost.addHeader(\"Content-Type\", \"application/json; charset=utf-8\");\n\n\t\tJSONObject json = new JSONObject()\n\t\t\t.put(\"jsonrpc\", \"2.0\")\n\t\t\t.put(\"method\", method)\n\t\t\t.put(\"params\", params)\n\t\t\t.put(\"auth\", token)\n\t\t\t.put(\"id\", 0);\n\n\t\tLog.d(\"ZabbixService\", \"_queryStream: \"+url);\n\t\tLog.d(\"ZabbixService\", \"_queryStream: \"+json.toString());\n\n\t\tpost.setEntity(new StringEntity(json.toString(), \"UTF-8\"));\n\t\ttry {\n\t\t\tHttpResponse resp = httpClient.execute(post);\n\t\t\tif (resp.getStatusLine().getStatusCode() == 401) {\n\t\t\t\t// http auth failed\n\t\t\t\tthrow new HttpAuthorizationRequiredException();\n\t\t\t}\n\n\t\t\tJsonFactory jsonFac = new JsonFactory();\n\t\t\tJsonParser jp = jsonFac.createJsonParser(resp.getEntity().getContent());\n\t\t\t// store the last stream to close it if an exception will be thrown\n\t\t\tlastStream = jp;\n\t\t\tif (jp.nextToken() != JsonToken.START_OBJECT) {\n\t\t\t\tthrow new IOException(\"Expected data to start with an Object\");\n\t\t\t}\n\t\t\tdo {\n\t\t\t\tjp.nextToken();\n\t\t\t\tif (jp.getCurrentName().equals(\"error\")) {\n\t\t\t\t\tjp.nextToken();\n\t\t\t\t\tString errortxt = \"\";\n\t\t\t\t\twhile (jp.nextToken() != JsonToken.END_OBJECT) {\n\t\t\t\t\t\terrortxt += jp.getText();\n\t\t\t\t\t}\n\t\t\t\t\tif (errortxt.contains(\"No API access\")) {\n\t\t\t\t\t\tthrow new NoAPIAccessException();\n\t\t\t\t\t} else if (errortxt.contains(\"Not authorized\")) {\n\t\t\t\t\t\t// first do a new auth and then try the same api call again\n\t\t\t\t\t\tif (authenticate() && !_notAuthorizedRetry) {\n\t\t\t\t\t\t\t_notAuthorizedRetry = true;\n\t\t\t\t\t\t\tJsonArrayOrObjectReader r = _queryStream(method, params);\n\t\t\t\t\t\t\t_notAuthorizedRetry = false;\n\t\t\t\t\t\t\treturn r;\n\t\t\t\t\t\t} else throw new IllegalStateException(errortxt);\n\t\t\t\t\t} else throw new IllegalStateException(\"JSON API Error: \"+errortxt);\n\t\t\t\t}\n\t\t\t} while (!jp.getCurrentName().equals(\"result\"));\n\n\t\t\t// result array found\n\t\t\tif (jp.nextToken() != JsonToken.START_ARRAY && jp.getCurrentToken() != JsonToken.START_OBJECT) { // go inside the array\n\t\t\t\ttry {\n\t\t\t\t\tLog.d(\"ZabbixService\", \"current token: \"+jp.getCurrentToken());\n\t\t\t\t\tLog.d(\"ZabbixService\", \"current name: \"+jp.getCurrentName());\n\t\t\t\t\tLog.d(\"ZabbixService\", \"get text: \"+jp.getText());\n\t\t\t\t\tLog.d(\"ZabbixService\", \"next value: \"+jp.nextValue());\n\t\t\t\t\tLog.d(\"ZabbixService\", \"next token: \"+jp.nextToken());\n\t\t\t\t\tLog.d(\"ZabbixService\", \"current token: \"+jp.getCurrentToken());\n\t\t\t\t\tLog.d(\"ZabbixService\", \"current name: \"+jp.getCurrentName());\n\t\t\t\t\tLog.d(\"ZabbixService\", \"get text: \"+jp.getText());\n\t\t\t\t} catch (Exception e) {}\n\t\t\t\tthrow new IOException(\"Expected data to start with an Array\");\n\t\t\t}\n\t\t\treturn new JsonArrayOrObjectReader(jp);\n\t\t} catch (SSLPeerUnverifiedException e) {\n\t\t\tthrow e;\n\t\t} catch (IOException e) {\n\t\t\t// internet problem\n\t\t\t// send intent to GUI\n\t\t\tIntent intent = new Intent(ZabbixContentProvider.CONTENT_PROVIDER_INTENT_ACTION);\n\t\t\tintent.putExtra(\"flag\", ZabbixContentProvider.INTENT_FLAG_CONNECTION_FAILED);\n\t\t\tcontext.sendBroadcast(intent);\n\t\t\tthrow e;\n\t\t}\n\t}\n\n\t/**\n\t * begin sql transaction\n\t */\n\tprivate void _startTransaction() {\n\t\tzabbixLocalDB.beginTransaction();\n\t\t_transactionStack = 0;\n\t}\n\n\t/**\n\t * acknowledge zabbix event. Sets ack-flag with comment.\n\t * Caution: This is supported only for Zabbix version >= 1.8.4\n\t * @param eventid\n\t * @param comment\n\t * @return true, success.\n\t * @throws ClientProtocolException\n\t * @throws IOException\n\t * @throws JSONException\n\t * @throws HttpAuthorizationRequiredException\n\t * @throws NoAPIAccessException\n\t */\n\tpublic boolean acknowledgeEvent(String eventid, String comment) throws ClientProtocolException, IOException, JSONException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\t// for GUI unit test, just return true\n\t\tif (comment != null && comment.equals(\"__UNIT_TEST__RETURN_TRUE__\")) return true;\n\n\t\tJSONObject result = _queryBuffer(\n\t\t\t\t\"event.acknowledge\"\n\t\t\t\t, new JSONObject()\n\t\t\t\t\t.put(\"eventids\", new JSONArray().put(eventid))\n\t\t);\n\t\t// it can be an (empty) array\n\t\ttry {\n\t\t\treturn result.getJSONObject(\"result\").getJSONArray(\"eventids\").length() == 1;\n\t\t} catch (JSONException e) {\n\t\t\t// or a json object\n\t\t\treturn result.getJSONObject(\"result\").getJSONObject(\"eventids\").length() == 1;\n\t\t}\n\t}\n\n\t/**\n\t * zabbix auth. user and pwd from app preferences\n\t * @return true success\n\t * @throws ClientProtocolException\n\t * @throws IOException\n\t * @throws JSONException\n\t * @throws HttpAuthorizationRequiredException\n\t * @throws NoAPIAccessException\n\t */\n\tpublic boolean authenticate() throws ClientProtocolException, IOException, JSONException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\tSharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(context);\n\t\tString url = prefs.getString(\"zabbix_url\", \"\").trim();\n\t\tString user = prefs.getString(\"zabbix_username\", \"\").trim();\n\t\tString password = prefs.getString(\"zabbix_password\", \"\");\n\n\t\tthis.url = url+(url.endsWith(\"/\")?\"\":'/')+\"api_jsonrpc.php\";\n\t\tLog.d(\"ZabbixContentProvider\", url+\"//\"+user);\n\n\t\ttry {\n\t\t\tJSONObject result = _queryBuffer(\n\t\t\t\t\t\"user.authenticate\"\n\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t\t.put(\"user\", user)\n\t\t\t\t\t\t.put(\"password\", password)\n\t\t\t);\n\t\t\ttoken = result.getString(\"result\");\n\t\t} catch (JSONException e) {\n\t\t\t// there's no result\n\t\t\te.printStackTrace();\n\t\t} catch (RuntimeException e) {\n\t\t\t// wrong password. token remains null\n\t\t\te.printStackTrace();\n\t\t}\n\t\tif (token != null) {\n\t\t\t// get API version\n\t\t\tJSONObject result = _queryBuffer(\n\t\t\t\t\t\"apiinfo.version\"\n\t\t\t\t\t, new JSONObject()\n\t\t\t);\n\t\t\tapiVersion = result.getString(\"result\");\n\t\t\tisVersion2 = (apiVersion.equals(\"1.4\") || apiVersion.startsWith(\"2\"));\n\t\t\tLog.i(\"ZabbixService\", \"Zabbix API Version: \" + apiVersion);\n\t\t}\n\t\treturn token != null;\n\t}\n\n\t/**\n\t * close the last http stream\n\t */\n\tpublic void closeLastStream() {\n\t\tif (lastStream != null && !lastStream.isClosed()) {\n\t\t\ttry {\n\t\t\t\tlastStream.close();\n\t\t\t} catch (IOException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate void importApplications(long hostid, long itemid, JsonArrayOrObjectReader jsonArray) throws JsonParseException, NumberFormatException, IOException {\n\t\tint num = 0;\n\t\tJsonObjectReader application;\n\t\twhile ((application = jsonArray.next()) != null) {\n\t\t\tApplicationData app = new ApplicationData();\n\t\t\twhile (application.nextValueToken()) {\n\t\t\t\tString propName = application.getCurrentName();\n\t\t\t\tif (propName.equals(ApplicationData.COLUMN_APPLICATIONID)) {\n\t\t\t\t\tapp.set(ApplicationData.COLUMN_APPLICATIONID, Long.parseLong(application.getText()));\n\t\t\t\t} else if (propName.equals(ApplicationData.COLUMN_NAME)) {\n\t\t\t\t\tapp.set(ApplicationData.COLUMN_NAME, application.getText());\n\t\t\t\t} else if (propName.equals(ApplicationData.COLUMN_HOSTID)) {\n\t\t\t\t\tapp.set(ApplicationData.COLUMN_HOSTID, Long.parseLong(application.getText()));\n\t\t\t\t} else {\n\t\t\t\t\tapplication.nextProperty();\n\t\t\t\t}\n\t\t\t}\n\t\t\t// create applications that does not exist\n\t\t\tapp.insert(zabbixLocalDB, ApplicationData.COLUMN_APPLICATIONID);\n\t\t\t_commitTransactionIfRecommended();\n\n\t\t\t// create ApplicationItemRelation\n\t\t\tlong appid = (Long) app.get(ApplicationData.COLUMN_APPLICATIONID);\n\t\t\tApplicationItemRelationData rel = new ApplicationItemRelationData();\n\t\t\trel.set(ApplicationItemRelationData.COLUMN_APPLICATIONID, appid);\n\t\t\trel.set(ApplicationItemRelationData.COLUMN_ITEMID, itemid);\n\t\t\trel.set(ApplicationItemRelationData.COLUMN_HOSTID, hostid);\n\t\t\trel.insert(zabbixLocalDB);\n\t\t\t_commitTransactionIfRecommended();\n\n\t\t\tnum++;\n\t\t}\n\t\tif (num == 0) {\n\t\t\t// if there's no application, the ID #0 must be added (for other)\n\t\t\tApplicationItemRelationData rel = new ApplicationItemRelationData();\n\t\t\trel.set(ApplicationItemRelationData.COLUMN_APPLICATIONID, 0);\n\t\t\trel.set(ApplicationItemRelationData.COLUMN_ITEMID, itemid);\n\t\t\trel.set(ApplicationItemRelationData.COLUMN_HOSTID, hostid);\n\t\t\trel.insert(zabbixLocalDB);\n\n\t\t\t// if #0 \"other\" does not exist yet, it has to be created\n\t\t\tApplicationData app = new ApplicationData();\n\t\t\tapp.set(ApplicationData.COLUMN_APPLICATIONID, 0);\n\t\t\tapp.set(ApplicationData.COLUMN_NAME, \"- \"+context.getResources().getString(R.string.other)+\" -\");\n\t\t\tapp.insert(zabbixLocalDB, ApplicationData.COLUMN_APPLICATIONID);\n\t\t}\n\t}\n\n\t/**\n\t * import the newest event of a trigger\n\t * @param triggerid\n\t * @throws JSONException\n\t * @throws IOException\n\t * @throws HttpAuthorizationRequiredException\n\t * @throws NoAPIAccessException\n\t */\n\tpublic void importEventByTriggerId(String triggerid) throws JSONException, IOException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\tif (!isCached(EventData.TABLE_NAME, \"triggerid=\"+triggerid)) {\n\t\t\t_startTransaction();\n\t\t\tzabbixLocalDB.delete(EventData.TABLE_NAME, EventData.COLUMN_OBJECTID+\"=\"+triggerid, null);\n\n\t\t\tJSONObject params = new JSONObject()\n\t\t\t\t.put(\"output\", \"extend\")\n\t\t\t\t.put(isVersion2?\"selectHosts\":\"select_hosts\", \"extend\")\n\t\t\t\t.put(\"triggerids\", new JSONArray().put(triggerid))\n\t\t\t\t.put(\"limit\", 1)\n\t\t\t\t.put(\"source\", 0);\n\t\t\tif (!isVersion2) {\n\t\t\t\tparams.put(\"sortfield\", \"clock\")\n\t\t\t\t\t.put(\"sortorder\", \"DESC\");\n\t\t\t}\n\n\t\t\tJsonArrayOrObjectReader events = _queryStream(\n\t\t\t\t\t\"event.get\"\n\t\t\t\t\t, params\n\t\t\t);\n\t\t\timportEvents(events, null);\n\t\t\tevents.close();\n\n\t\t\tsetCached(EventData.TABLE_NAME, \"triggerid=\"+triggerid, ZabbixConfig.CACHE_LIFETIME_EVENTS);\n\t\t\t_endTransaction();\n\t\t}\n\t}\n\n\t/**\n\t * import the newest events\n\t * @throws ClientProtocolException\n\t * @throws IOException\n\t * @throws JSONException\n\t * @throws HttpAuthorizationRequiredException\n\t * @throws NoAPIAccessException\n\t */\n\tpublic void importEvents() throws ClientProtocolException, IOException, JSONException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\tif (!isCached(EventData.TABLE_NAME, null)) {\n\t\t\t_startTransaction();\n\t\t\tzabbixLocalDB.delete(EventData.TABLE_NAME, null, null);\n\t\t\tzabbixLocalDB.delete(TriggerData.TABLE_NAME, null, null);\n\t\t\tzabbixLocalDB.delete(CacheData.TABLE_NAME, CacheData.COLUMN_KIND+\"='\"+EventData.TABLE_NAME+\"'\", null);\n\t\t\tzabbixLocalDB.delete(CacheData.TABLE_NAME, CacheData.COLUMN_KIND+\"='\"+TriggerData.TABLE_NAME+\"'\", null);\n\n\t\t\tint numEvents = ZabbixConfig.EVENTS_GET_LIMIT;\n\n\t\t\tJSONObject params = new JSONObject()\n\t\t\t\t.put(\"output\", \"extend\")\n\t\t\t\t.put(\"limit\", ZabbixConfig.EVENTS_GET_LIMIT)\n\t\t\t\t.put(isVersion2?\"selectHosts\":\"select_hosts\", \"extend\")\n\t\t\t\t.put(isVersion2?\"selectTriggers\":\"select_triggers\", \"extend\")\n\t\t\t\t.put(\"source\", 0)\n\t\t\t\t.put(\"time_from\", (new Date().getTime()/1000) - ZabbixConfig.EVENT_GET_TIME_FROM_SHIFT);\n\t\t\tif (!isVersion2) {\n\t\t\t\t// in Zabbix version <2.0, this is not default\n\t\t\t\tparams.put(\"sortfield\", \"clock\")\n\t\t\t\t\t.put(\"sortorder\", \"DESC\");\n\t\t\t}\n\t\t\tJsonArrayOrObjectReader events = _queryStream(\n\t\t\t\t\t\"event.get\"\n\t\t\t\t\t, params\n\t\t\t);\n\t\t\timportEvents(events, numEvents);\n\t\t\tevents.close();\n\n\t\t\tsetCached(EventData.TABLE_NAME, null, ZabbixConfig.CACHE_LIFETIME_EVENTS);\n\t\t\t_endTransaction();\n\t\t}\n\t}\n\n\t/**\n\t * @param events stream\n\t * @param numEvents if null, no progressbar-update AND only isert, if it does not exist. If !null, progressbar-update AND always insert without checking\n\t * @throws JsonParseException\n\t * @throws IOException\n\t */\n\tprivate void importEvents(JsonArrayOrObjectReader events, Integer numEvents) throws JsonParseException, IOException {\n\t\tint i=0;\n\t\tJsonObjectReader eventReader;\n\t\twhile ((eventReader = events.next()) != null) {\n\t\t\tEventData e = new EventData();\n\t\t\twhile (eventReader.nextValueToken()) {\n\t\t\t\tString propName = eventReader.getCurrentName();\n\t\t\t\tif (propName.equals(\"hosts\")) {\n\t\t\t\t\t// import hosts\n\t\t\t\t\tString hostnames = (String) importHosts(eventReader.getJsonArray(), null)[0];\n\t\t\t\t\t// store hosts namen\n\t\t\t\t\te.set(EventData.COLUMN_HOSTS, hostnames);\n\t\t\t\t} else if (propName.equals(\"triggers\")) {\n\t\t\t\t\t// import triggers\n\t\t\t\t\timportTriggers(eventReader.getJsonArray());\n\t\t\t\t} else if (propName.equals(EventData.COLUMN_EVENTID)) {\n\t\t\t\t\te.set(EventData.COLUMN_EVENTID, Long.parseLong(eventReader.getText()));\n\t\t\t\t} else if (propName.equals(EventData.COLUMN_CLOCK)) {\n\t\t\t\t\te.set(EventData.COLUMN_CLOCK, Integer.parseInt(eventReader.getText()));\n\t\t\t\t} else if (propName.equals(EventData.COLUMN_OBJECTID)) {\n\t\t\t\t\te.set(EventData.COLUMN_OBJECTID, Long.parseLong(eventReader.getText()));\n\t\t\t\t} else if (propName.equals(EventData.COLUMN_ACK)) {\n\t\t\t\t\te.set(EventData.COLUMN_ACK, Integer.parseInt(eventReader.getText()) == 1);\n\t\t\t\t} else if (propName.equals(EventData.COLUMN_VALUE)) {\n\t\t\t\t\te.set(EventData.COLUMN_VALUE, Integer.parseInt(eventReader.getText()));\n\t\t\t\t} else {\n\t\t\t\t\teventReader.nextProperty();\n\t\t\t\t}\n\t\t\t}\n\t\t\t// event is parsed and can be inserted into the db\n\t\t\tif (numEvents == null) {\n\t\t\t\te.insert(zabbixLocalDB, EventData.COLUMN_EVENTID);\n\t\t\t} else {\n\t\t\t\te.insert(zabbixLocalDB);\n\t\t\t\tif (++i % 10 == 0) {\n\t\t\t\t\tshowProgress(i*100/numEvents);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t_commitTransactionIfRecommended();\n\t\t}\n\t}\n\n\t/**\n\t * import graph items\n\t *\n\t * @param graphItems\n\t * @return true, if graphid column has to be updated from -1 to the correct graphid later.\n\t * @throws JsonParseException\n\t * @throws NumberFormatException\n\t * @throws IOException\n\t */\n\tprivate boolean importGraphItems(JsonArrayOrObjectReader graphItems) throws JsonParseException, NumberFormatException, IOException {\n\t\tboolean mustSetGraphid = false;\n\t\tJsonObjectReader graphItemReader;\n\t\twhile ((graphItemReader = graphItems.next()) != null) {\n\t\t\tGraphItemData gi = new GraphItemData();\n\t\t\twhile (graphItemReader.nextValueToken()) {\n\t\t\t\tString propName = graphItemReader.getCurrentName();\n\t\t\t\tif (propName.equals(\"gitemid\")) {\n\t\t\t\t\tgi.set(GraphItemData.COLUMN_GRAPHITEMID, Long.parseLong(graphItemReader.getText()));\n\t\t\t\t} else if (propName.equals(GraphItemData.COLUMN_GRAPHID)) {\n\t\t\t\t\tgi.set(GraphItemData.COLUMN_GRAPHID, Long.parseLong(graphItemReader.getText()));\n\t\t\t\t} else if (propName.equals(GraphItemData.COLUMN_ITEMID)) {\n\t\t\t\t\tgi.set(GraphItemData.COLUMN_ITEMID, Long.parseLong(graphItemReader.getText()));\n\t\t\t\t} else if (propName.equals(GraphItemData.COLUMN_COLOR)) {\n\t\t\t\t\t// hex string => color int\n\t\t\t\t\tgi.set(GraphItemData.COLUMN_COLOR, Color.parseColor(\"#\"+graphItemReader.getText()));\n\t\t\t\t} else {\n\t\t\t\t\tgraphItemReader.nextProperty();\n\t\t\t\t}\n\t\t\t}\n\t\t\t// if graphid-column was not set, this must be done later. temporary graphid=-1\n\t\t\tif (gi.get(GraphItemData.COLUMN_GRAPHID) == null) {\n\t\t\t\tgi.set(GraphItemData.COLUMN_GRAPHID, -1);\n\t\t\t\tmustSetGraphid = true;\n\t\t\t}\n\t\t\tgi.insert(zabbixLocalDB);\n\t\t}\n\t\treturn mustSetGraphid;\n\t}\n\n\tpublic void importGraphsForScreen(long screenid) throws ClientProtocolException, IOException, JSONException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\tif (!isCached(GraphData.TABLE_NAME, \"screenid=\"+screenid)) {\n\t\t\t_startTransaction();\n\n\t\t\t// collect all graphids\n\t\t\tSet<Long> graphids = new HashSet<Long>();\n\t\t\tCursor cur = zabbixLocalDB.query(ScreenItemData.TABLE_NAME, null, ScreenItemData.COLUMN_SCREENID+\"=\"+screenid, null, null, null, null);\n\t\t\twhile (cur.moveToNext()) {\n\t\t\t\tgraphids.add(cur.getLong(cur.getColumnIndex(ScreenItemData.COLUMN_RESOURCEID)));\n\t\t\t}\n\n\t\t\t// delete old graphs\n\t\t\tString str_graphids = graphids.toString().replace(\"[\", \"\").replace(\"]\", \"\");\n\t\t\tif (str_graphids.length()>0) {\n\t\t\t\tzabbixLocalDB.delete(GraphData.TABLE_NAME, GraphData.COLUMN_GRAPHID+\" IN (\"+str_graphids+\")\", null);\n\t\t\t\tzabbixLocalDB.delete(GraphItemData.TABLE_NAME, GraphItemData.COLUMN_GRAPHID+\" IN (\"+str_graphids+\")\", null);\n\t\t\t}\n\t\t\tzabbixLocalDB.delete(CacheData.TABLE_NAME, CacheData.COLUMN_KIND+\"='\"+GraphData.TABLE_NAME+\"' AND \"+CacheData.COLUMN_FILTER+\"='screenid=\"+screenid+'\\'', null);\n\n\t\t\tJsonArrayOrObjectReader graphs = _queryStream(\n\t\t\t\t\t\"graph.get\"\n\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t\t.put(isVersion2?\"selectGraphItems\":\"select_graph_items\", \"extend\")\n\t\t\t\t\t\t.put(isVersion2?\"selectItems\":\"select_items\", \"extend\")\n\t\t\t\t\t\t.put(\"output\", \"extend\")\n\t\t\t\t\t\t.put(\"graphids\", new JSONArray(graphids))\n\t\t\t);\n\t\t\tJsonObjectReader graphReader;\n\t\t\twhile ((graphReader = graphs.next()) != null) {\n\t\t\t\tboolean mustSetGraphid = false;\n\t\t\t\tGraphData scr = new GraphData();\n\t\t\t\twhile (graphReader.nextValueToken()) {\n\t\t\t\t\tString propName = graphReader.getCurrentName();\n\t\t\t\t\tif (propName.equals(GraphData.COLUMN_GRAPHID)) {\n\t\t\t\t\t\tscr.set(GraphData.COLUMN_GRAPHID, Long.parseLong(graphReader.getText()));\n\t\t\t\t\t} else if (propName.equals(GraphData.COLUMN_NAME)) {\n\t\t\t\t\t\tscr.set(GraphData.COLUMN_NAME, graphReader.getText());\n\t\t\t\t\t} else if (propName.equals(\"gitems\")) {\n\t\t\t\t\t\tmustSetGraphid = importGraphItems(graphReader.getJsonArray());\n\t\t\t\t\t} else if (propName.equals(\"items\")) {\n\t\t\t\t\t\timportItems(graphReader.getJsonArray(), 0, true);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tgraphReader.nextProperty();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tscr.insert(zabbixLocalDB);\n\t\t\t\tif (mustSetGraphid) {\n\t\t\t\t\tContentValues values = new ContentValues(1);\n\t\t\t\t\tvalues.put(GraphItemData.COLUMN_GRAPHID, (Long) scr.get(GraphData.COLUMN_GRAPHID));\n\t\t\t\t\tzabbixLocalDB.update(\n\t\t\t\t\t\t\tGraphItemData.TABLE_NAME\n\t\t\t\t\t\t\t, values\n\t\t\t\t\t\t\t, GraphItemData.COLUMN_GRAPHID+\"=-1\"\n\t\t\t\t\t\t\t, null);\n\t\t\t\t}\n\t\t\t}\n\t\t\tgraphs.close();\n\n\t\t\tsetCached(GraphData.TABLE_NAME, \"screenid=\"+screenid, ZabbixConfig.CACHE_LIFETIME_SCREENS);\n\t\t\t_endTransaction();\n\t\t}\n\t}\n\n\tpublic void importHistoryDetails(String itemid) throws ClientProtocolException, IOException, JSONException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\tif (!isCached(HistoryDetailData.TABLE_NAME, itemid)) {\n\t\t\t_startTransaction();\n\t\t\tzabbixLocalDB.delete(HistoryDetailData.TABLE_NAME, HistoryDetailData.COLUMN_ITEMID+\"=\"+itemid, null);\n\n\t\t\t// the past 2 hours\n\t\t\tlong time_till = new Date().getTime() / 1000;\n\t\t\tlong time_from = time_till - ZabbixConfig.HISTORY_GET_TIME_FROM_SHIFT;\n\n\t\t\t// Workaround: historydetails only comes if you use the correct \"history\"-parameter.\n\t\t\t// this parameter can be \"null\" or a number 0-4. Because we don't know when to use which,\n\t\t\t// we try them all, until we get results.\n\t\t\tInteger historytype = null;\n\t\t\tJSONObject result = _queryBuffer(\n\t\t\t\t\t\"history.get\"\n\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t\t.put(\"limit\", 1)\n\t\t\t\t\t\t.put(\"history\", historytype) // for integer ?\n\t\t\t\t\t\t.put(\"itemids\", new JSONArray().put(itemid))\n\t\t\t\t\t\t.put(\"time_from\", time_from)\n\t\t\t);\n\n\t\t\tJSONArray testHistorydetails = result.getJSONArray(\"result\");\n\t\t\tif (testHistorydetails.length() == 0) {\n\t\t\t\thistorytype = -1;\n\t\t\t\twhile (testHistorydetails.length() == 0 && ++historytype <= 4) {\n\t\t\t\t\t// if we get an empty array, we try another history parameter\n\t\t\t\t\tresult = _queryBuffer(\n\t\t\t\t\t\t\t\"history.get\"\n\t\t\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t\t\t\t.put(\"output\", \"extend\")\n\t\t\t\t\t\t\t\t.put(\"limit\", 1)\n\t\t\t\t\t\t\t\t.put(\"history\", historytype)\n\t\t\t\t\t\t\t\t.put(\"itemids\", new JSONArray().put(itemid))\n\t\t\t\t\t\t\t\t.put(\"time_from\", time_from)\n\t\t\t\t\t);\n\t\t\t\t\ttestHistorydetails = result.getJSONArray(\"result\");\n\t\t\t\t}\n\t\t\t}\n\t\t\t// correct historytype found and there are data\n\t\t\tif (testHistorydetails.length() > 0) {\n\t\t\t\t// count of the entries cannot be detected (zabbix bug),\n\t\t\t\t// so we use a fiction\n\t\t\t\tint numDetails = 400;\n\t\t\t\tint curI=0;\n\t\t\t\tJsonArrayOrObjectReader historydetails = _queryStream(\n\t\t\t\t\t\t\"history.get\"\n\t\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t\t\t.put(\"output\", \"extend\")\n\t\t\t\t\t\t\t.put(\"limit\", ZabbixConfig.HISTORY_GET_LIMIT)\n\t\t\t\t\t\t\t.put(\"history\", historytype)\n\t\t\t\t\t\t\t.put(\"itemids\", new JSONArray().put(itemid))\n\t\t\t\t\t\t\t.put(\"time_from\", time_from)\n\t\t\t\t\t\t\t.put(\"sortfield\", \"clock\")\n\t\t\t\t\t\t\t.put(\"sortorder\", \"DESC\")\n\t\t\t\t);\n\t\t\t\tJsonObjectReader historydetail;\n\t\t\t\ttry {\n\t\t\t\t\tint selI = 0;\n\t\t\t\t\twhile ((historydetail = historydetails.next()) != null) {\n\t\t\t\t\t\t// save only every 20th\n\t\t\t\t\t\tif (selI++ % 20 != 0) {\n\t\t\t\t\t\t\twhile (historydetail.nextValueToken()) {\n\t\t\t\t\t\t\t\thistorydetail.nextProperty();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tHistoryDetailData h = new HistoryDetailData();\n\t\t\t\t\t\twhile (historydetail.nextValueToken()) {\n\t\t\t\t\t\t\tString propName = historydetail.getCurrentName();\n\t\t\t\t\t\t\tif (propName.equals(HistoryDetailData.COLUMN_CLOCK)) {\n\t\t\t\t\t\t\t\th.set(HistoryDetailData.COLUMN_CLOCK, Integer.parseInt(historydetail.getText()));\n\t\t\t\t\t\t\t} else if (propName.equals(HistoryDetailData.COLUMN_ITEMID)) {\n\t\t\t\t\t\t\t\th.set(HistoryDetailData.COLUMN_ITEMID, Long.parseLong(historydetail.getText()));\n\t\t\t\t\t\t\t} else if (propName.equals(HistoryDetailData.COLUMN_VALUE)) {\n\t\t\t\t\t\t\t\th.set(HistoryDetailData.COLUMN_VALUE, Double.parseDouble(historydetail.getText()));\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\thistorydetail.nextProperty();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\th.insert(zabbixLocalDB);\n\t\t\t\t\t\tif (++curI % 10 == 0) {\n\t\t\t\t\t\t\tshowProgress(Math.min(curI*100/numDetails, 84));\n\t\t\t\t\t\t}\n\t\t\t\t\t\t_commitTransactionIfRecommended();\n\t\t\t\t\t}\n\t\t\t\t} catch (NumberFormatException e) {\n\t\t\t\t\t// data are unuseable, e.g. because it's a string\n\t\t\t\t}\n\t\t\t\thistorydetails.close();\n\t\t\t}\n\t\t\tsetCached(HistoryDetailData.TABLE_NAME, itemid, ZabbixConfig.CACHE_LIFETIME_HISTORY_DETAILS);\n\t\t\t_endTransaction();\n\t\t}\n\t}\n\n\tprivate long importHostGroups(JsonArrayOrObjectReader jsonArray) throws JsonParseException, IOException {\n\t\tlong firstHostGroupId = -1;\n\t\tJsonObjectReader hostReader;\n\t\twhile ((hostReader = jsonArray.next()) != null) {\n\t\t\tHostGroupData h = new HostGroupData();\n\t\t\twhile (hostReader.nextValueToken()) {\n\t\t\t\tString propName = hostReader.getCurrentName();\n\t\t\t\tif (propName.equals(HostGroupData.COLUMN_GROUPID)) {\n\t\t\t\t\tlong id = Long.parseLong(hostReader.getText());\n\t\t\t\t\tif (firstHostGroupId == -1) firstHostGroupId = id;\n\t\t\t\t\th.set(HostGroupData.COLUMN_GROUPID, id);\n\t\t\t\t} else if (propName.equals(HostGroupData.COLUMN_NAME)) {\n\t\t\t\t\th.set(HostGroupData.COLUMN_NAME, hostReader.getText());\n\t\t\t\t} else {\n\t\t\t\t\thostReader.nextProperty();\n\t\t\t\t}\n\t\t\t}\n\t\t\th.insert(zabbixLocalDB, HostGroupData.COLUMN_GROUPID);\n\t\t\t_commitTransactionIfRecommended();\n\t\t}\n\n\t\treturn firstHostGroupId;\n\t}\n\n\t/**\n\t * import the hosts from stream\n\t * @param jsonArray stream\n\t * @param numHosts count of hosts for progressbar. null if unknown.\n\t * @return Object[] {(String) comma-separated all Hostnames, (Long) 1. host id}\n\t * @throws JsonParseException\n\t * @throws IOException\n\t */\n\tprivate Object[] importHosts(JsonArrayOrObjectReader jsonArray, Integer numHosts) throws JsonParseException, IOException {\n\t\tList<String> hostnames = new ArrayList<String>();\n\t\tlong firstHostId = -1;\n\t\tJsonObjectReader hostReader;\n\t\tint i=0;\n\t\twhile ((hostReader = jsonArray.next()) != null) {\n\t\t\tHostData h = new HostData();\n\t\t\twhile (hostReader.nextValueToken()) {\n\t\t\t\tString propName = hostReader.getCurrentName();\n\t\t\t\tif (propName.equals(HostData.COLUMN_HOSTID)) {\n\t\t\t\t\th.set(HostData.COLUMN_HOSTID, Long.parseLong(hostReader.getText()));\n\t\t\t\t\tif (firstHostId == -1) {\n\t\t\t\t\t\tfirstHostId = (Long) h.get(HostData.COLUMN_HOSTID);\n\t\t\t\t\t}\n\t\t\t\t} else if (propName.equals(HostData.COLUMN_HOST)) {\n\t\t\t\t\tString host = hostReader.getText();\n\t\t\t\t\thostnames.add(host);\n\t\t\t\t\th.set(HostData.COLUMN_HOST, host);\n\t\t\t\t} else if (propName.equals(\"groups\")) {\n\t\t\t\t\tlong groupid = importHostGroups(hostReader.getJsonArray());\n\t\t\t\t\tif (groupid != -1) {\n\t\t\t\t\t\th.set(HostData.COLUMN_GROUPID, groupid);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\thostReader.nextProperty();\n\t\t\t\t}\n\t\t\t}\n\t\t\t// host without group will get group #0 (other)\n\t\t\tif (h.get(HostData.COLUMN_GROUPID) == null) {\n\t\t\t\th.set(HostData.COLUMN_GROUPID, 0);\n\t\t\t\t// create \"other\" hostgroup #1\n\t\t\t\tHostGroupData hg = new HostGroupData();\n\t\t\t\thg.set(HostGroupData.COLUMN_GROUPID, 0);\n\t\t\t\thg.set(HostGroupData.COLUMN_NAME, \"- \"+context.getResources().getString(R.string.other)+\" -\");\n\t\t\t\thg.insert(zabbixLocalDB, HostGroupData.COLUMN_GROUPID);\n\t\t\t}\n\t\t\th.insert(zabbixLocalDB, HostData.COLUMN_HOSTID);\n\t\t\tif (numHosts != null && ++i % 10 == 0) {\n\t\t\t\tshowProgress(i*100/numHosts);\n\t\t\t}\n\t\t\t_commitTransactionIfRecommended();\n\t\t}\n\n\t\treturn new Object[] {hostnames.toString().replaceAll(\"[\\\\[\\\\]]\", \"\"), firstHostId};\n\t}\n\n\tpublic void importHostsAndGroups() throws JSONException, IOException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\tif (!isCached(HostData.TABLE_NAME, null)) {\n\t\t\t_startTransaction();\n\t\t\tzabbixLocalDB.delete(HostData.TABLE_NAME, null, null);\n\t\t\tzabbixLocalDB.delete(HostGroupData.TABLE_NAME, null, null);\n\n\t\t\t// get count of hosts\n\t\t\tJSONObject result = _queryBuffer(\n\t\t\t\t\t\"host.get\"\n\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t\t.put(\"countOutput\", 1)\n\t\t\t\t\t\t.put(\"limit\", ZabbixConfig.HOST_GET_LIMIT)\n\t\t\t\t\t\t.put(isVersion2?\"selectGroups\":\"select_groups\", \"extend\")\n\t\t\t);\n\t\t\tint numHosts = result.getInt(\"result\");\n\t\t\tJsonArrayOrObjectReader hosts = _queryStream(\n\t\t\t\t\t\"host.get\"\n\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t\t.put(\"output\", \"extend\")\n\t\t\t\t\t\t.put(\"limit\", ZabbixConfig.HOST_GET_LIMIT)\n\t\t\t\t\t\t.put(isVersion2?\"selectGroups\":\"select_groups\", \"extend\")\n\t\t\t);\n\t\t\timportHosts(hosts, numHosts);\n\t\t\thosts.close();\n\n\t\t\tsetCached(HostData.TABLE_NAME, null, ZabbixConfig.CACHE_LIFETIME_HOSTS);\n\t\t\t_endTransaction();\n\t\t}\n\t}\n\n\t/**\n\t * import items from stream.\n\t * @param items stream\n\t * @param numItems count for progressbar, if 0 no progressbarupdate\n\t * @param checkBeforeInsert if true, only make an insert if item does not exist\n\t * @return the first item id\n\t * @throws JsonParseException\n\t * @throws IOException\n\t */\n\tprivate long importItems(JsonArrayOrObjectReader items, int numItems, boolean checkBeforeInsert) throws JsonParseException, IOException {\n\t\tlong firstItemId = -1;\n\t\tint curI=0;\n\t\tJsonObjectReader itemReader;\n\t\twhile ((itemReader = items.next()) != null) {\n\t\t\tItemData i = new ItemData();\n\t\t\tString key_ = null;\n\t\t\twhile (itemReader.nextValueToken()) {\n\t\t\t\tString propName = itemReader.getCurrentName();\n\t\t\t\tif (propName.equals(ItemData.COLUMN_ITEMID)) {\n\t\t\t\t\ti.set(ItemData.COLUMN_ITEMID, Long.parseLong(itemReader.getText()));\n\t\t\t\t\tif (firstItemId == -1) {\n\t\t\t\t\t\tfirstItemId = (Long) i.get(ItemData.COLUMN_ITEMID);\n\t\t\t\t\t}\n\t\t\t\t} else if (propName.equals(ItemData.COLUMN_HOSTID)) {\n\t\t\t\t\ti.set(ItemData.COLUMN_HOSTID, Long.parseLong(itemReader.getText()));\n\t\t\t\t} else if (propName.equals(ItemData.COLUMN_DESCRIPTION) || propName.equals(\"name\")) {\n\t\t\t\t\t// since zabbix 2.x is the name of the item \"name\"\n\t\t\t\t\t// before zabbix 2.x the name field was \"description\"\n\t\t\t\t\tif (isVersion2 && propName.equals(\"name\")) {\n\t\t\t\t\t\ti.set(ItemData.COLUMN_DESCRIPTION, itemReader.getText());\n\t\t\t\t\t} else if (!isVersion2) {\n\t\t\t\t\t\ti.set(ItemData.COLUMN_DESCRIPTION, itemReader.getText());\n\t\t\t\t\t}\n\t\t\t\t} else if (propName.equals(ItemData.COLUMN_LASTCLOCK)) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\ti.set(ItemData.COLUMN_LASTCLOCK, Integer.parseInt(itemReader.getText()));\n\t\t\t\t\t} catch (NumberFormatException e) {\n\t\t\t\t\t\t// ignore\n\t\t\t\t\t}\n\t\t\t\t} else if (propName.equals(ItemData.COLUMN_LASTVALUE)) {\n\t\t\t\t\ti.set(ItemData.COLUMN_LASTVALUE, itemReader.getText());\n\t\t\t\t} else if (propName.equals(ItemData.COLUMN_UNITS)) {\n\t\t\t\t\ti.set(ItemData.COLUMN_UNITS, itemReader.getText());\n\t\t\t\t} else if (propName.equals(\"key_\")) {\n\t\t\t\t\tkey_ = itemReader.getText();\n\t\t\t\t} else if (propName.equals(\"applications\")) {\n\t\t\t\t\t// at this point itemid and hostid is unknown\n\t\t\t\t\t// because of this, all applicationrelations will be saved with itemid and hostid \"-1\".\n\t\t\t\t\t// later the IDs will be replaced with the correct\n\t\t\t\t\timportApplications(-1, -1, itemReader.getJsonArray());\n\t\t\t\t} else {\n\t\t\t\t\titemReader.nextProperty();\n\t\t\t\t}\n\t\t\t}\n\t\t\t// if applicable replace placeholder\n\t\t\tString description = (String) i.get(ItemData.COLUMN_DESCRIPTION);\n\t\t\tif (description.matches(\".*\\\\$[0-9].*\")) {\n\t\t\t\tif (key_ != null && key_.indexOf('[') != -1) {\n\t\t\t\t\tString[] keys = key_.substring(key_.indexOf('[')+1, key_.indexOf(']')).split(\",\");\n\t\t\t\t\tfor (int ix=0; ix<keys.length; ix++) {\n\t\t\t\t\t\tdescription = description.replace(\"$\"+(ix+1), keys[ix]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\ti.set(ItemData.COLUMN_DESCRIPTION, description);\n\t\t\tif (checkBeforeInsert) {\n\t\t\t\ti.insert(zabbixLocalDB, ItemData.COLUMN_ITEMID);\n\t\t\t} else {\n\t\t\t\ti.insert(zabbixLocalDB);\n\t\t\t}\n\t\t\tif (numItems > 0 && ++curI % 10 == 0) {\n\t\t\t\tshowProgress(curI*100/numItems);\n\t\t\t}\n\n\t\t\t// now the \"-1\" IDs of applicationsrelation will be replaced with the correct itemID\n\t\t\tContentValues values = new ContentValues(2);\n\t\t\tvalues.put(ApplicationItemRelationData.COLUMN_ITEMID, (Long) i.get(ItemData.COLUMN_ITEMID));\n\t\t\tvalues.put(ApplicationItemRelationData.COLUMN_HOSTID, (Long) i.get(ItemData.COLUMN_HOSTID));\n\t\t\tzabbixLocalDB.update(\n\t\t\t\t\tApplicationItemRelationData.TABLE_NAME\n\t\t\t\t\t, values\n\t\t\t\t\t, ApplicationItemRelationData.COLUMN_ITEMID+\"=-1\"\n\t\t\t\t\t, null\n\t\t\t);\n\t\t}\n\t\treturn firstItemId;\n\t}\n\n\tpublic void importItems(long hostid) throws JSONException, IOException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\tif (!isCached(ItemData.TABLE_NAME, \"hostid=\"+hostid)) {\n\t\t\t_startTransaction();\n\t\t\tzabbixLocalDB.delete(ItemData.TABLE_NAME, ItemData.COLUMN_HOSTID+\"=\"+hostid, null);\n\t\t\tzabbixLocalDB.delete(ApplicationItemRelationData.TABLE_NAME, ApplicationItemRelationData.COLUMN_HOSTID+\"=\"+hostid, null);\n\n\t\t\t// count of items\n\t\t\tJSONObject result = _queryBuffer(\n\t\t\t\t\t\"item.get\"\n\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t.put(\"output\", \"extend\")\n\t\t\t\t\t.put(\"countOutput\", 1)\n\t\t\t\t\t.put(\"limit\", ZabbixConfig.ITEM_GET_LIMIT)\n\t\t\t\t\t.put(\"hostids\", new JSONArray().put(hostid))\n\t\t\t);\n\t\t\tint numItems = result.getInt(\"result\");\n\t\t\tJsonArrayOrObjectReader items = _queryStream(\n\t\t\t\t\t\"item.get\"\n\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t\t.put(\"output\", \"extend\")\n\t\t\t\t\t\t.put(\"limit\", ZabbixConfig.ITEM_GET_LIMIT)\n\t\t\t\t\t\t.put(isVersion2?\"selectApplications\":\"select_applications\", \"extend\")\n\t\t\t\t\t\t.put(\"hostids\", new JSONArray().put(hostid))\n\t\t\t);\n\t\t\timportItems(items, numItems, false);\n\t\t\titems.close();\n\n\t\t\tsetCached(ItemData.TABLE_NAME, \"hostid=\"+hostid, ZabbixConfig.CACHE_LIFETIME_ITEMS);\n\t\t\t_endTransaction();\n\t\t}\n\t}\n\n\tprivate void importScreenItems(JsonArrayOrObjectReader screenItems) throws JsonParseException, NumberFormatException, IOException {\n\t\tJsonObjectReader screenItemReader;\n\t\twhile ((screenItemReader = screenItems.next()) != null) {\n\t\t\tScreenItemData si = new ScreenItemData();\n\t\t\tint resourcetype = -1;\n\t\t\twhile (screenItemReader.nextValueToken()) {\n\t\t\t\tString propName = screenItemReader.getCurrentName();\n\t\t\t\tif (propName.equals(ScreenItemData.COLUMN_SCREENITEMID)) {\n\t\t\t\t\tsi.set(ScreenItemData.COLUMN_SCREENITEMID, Long.parseLong(screenItemReader.getText()));\n\t\t\t\t} else if (propName.equals(ScreenItemData.COLUMN_SCREENID)) {\n\t\t\t\t\tsi.set(ScreenItemData.COLUMN_SCREENID, Long.parseLong(screenItemReader.getText()));\n\t\t\t\t} else if (propName.equals(ScreenItemData.COLUMN_RESOURCEID)) {\n\t\t\t\t\tsi.set(ScreenItemData.COLUMN_RESOURCEID, Long.parseLong(screenItemReader.getText()));\n\t\t\t\t} else if (propName.equals(\"resourcetype\")) {\n\t\t\t\t\tresourcetype = Integer.parseInt(screenItemReader.getText());\n\t\t\t\t} else {\n\t\t\t\t\tscreenItemReader.nextProperty();\n\t\t\t\t}\n\t\t\t}\n\t\t\t// only resouretype == 0\n\t\t\tif (resourcetype == 0) {\n\t\t\t\tsi.insert(zabbixLocalDB);\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic void importScreens() throws ClientProtocolException, IOException, JSONException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\tif (!isCached(ScreenData.TABLE_NAME, null)) {\n\t\t\t_startTransaction();\n\n\t\t\tzabbixLocalDB.delete(ScreenData.TABLE_NAME, null, null);\n\t\t\tzabbixLocalDB.delete(ScreenItemData.TABLE_NAME, null, null);\n\t\t\tzabbixLocalDB.delete(CacheData.TABLE_NAME, CacheData.COLUMN_KIND+\"='\"+ScreenData.TABLE_NAME+\"'\", null);\n\n\t\t\tJsonArrayOrObjectReader screens = _queryStream(\n\t\t\t\t\t(isVersion2?\"s\":\"S\")+\"creen.get\"\n\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t\t.put(\"output\", \"extend\")\n\t\t\t\t\t\t.put(isVersion2?\"selectScreenItems\":\"select_screenitems\", \"extend\")\n\t\t\t);\n\t\t\tJsonObjectReader screenReader;\n\t\t\twhile ((screenReader = screens.next()) != null) {\n\t\t\t\tScreenData scr = new ScreenData();\n\t\t\t\twhile (screenReader.nextValueToken()) {\n\t\t\t\t\tString propName = screenReader.getCurrentName();\n\t\t\t\t\tif (propName.equals(ScreenData.COLUMN_SCREENID)) {\n\t\t\t\t\t\tscr.set(ScreenData.COLUMN_SCREENID, Long.parseLong(screenReader.getText()));\n\t\t\t\t\t} else if (propName.equals(ScreenData.COLUMN_NAME)) {\n\t\t\t\t\t\tscr.set(ScreenData.COLUMN_NAME, screenReader.getText());\n\t\t\t\t\t} else if (propName.equals(\"screenitems\")) {\n\t\t\t\t\t\timportScreenItems(screenReader.getJsonArray());\n\t\t\t\t\t} else {\n\t\t\t\t\t\tscreenReader.nextProperty();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tscr.insert(zabbixLocalDB);\n\t\t\t}\n\t\t\tscreens.close();\n\n\t\t\tsetCached(ScreenData.TABLE_NAME, null, ZabbixConfig.CACHE_LIFETIME_SCREENS);\n\t\t\t_endTransaction();\n\t\t}\n\t}\n\n\tpublic void importTrigger(String triggerid) throws JSONException, IOException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\tif (!isCached(TriggerData.TABLE_NAME, \"triggerid=\"+triggerid)) {\n\t\t\t_startTransaction();\n\n\t\t\tJsonArrayOrObjectReader trigger = _queryStream(\n\t\t\t\t\t\"trigger.get\"\n\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t\t.put(\"output\", \"extend\")\n\t\t\t\t\t\t.put(isVersion2?\"selectHosts\":\"select_hosts\", \"extend\")\n\t\t\t\t\t\t.put(\"triggerids\", new JSONArray().put(triggerid))\n\t\t\t);\n\t\t\timportTriggers(trigger);\n\t\t\ttrigger.close();\n\n\t\t\tsetCached(TriggerData.TABLE_NAME, \"triggerid=\"+triggerid, ZabbixConfig.CACHE_LIFETIME_TRIGGERS);\n\t\t\t_endTransaction();\n\t\t}\n\t}\n\n\t/**\n\t * importiert ein trigger mit dem attribute itemid. ggf. wird der trigger zuerst gelöscht und neu angelegt.\n\t * imports a trigger with the attribute itemid. if trigger already exists, it will be removed first.\n\t * @param triggerid\n\t * @throws JSONException\n\t * @throws IOException\n\t * @throws HttpAuthorizationRequiredException\n\t * @throws NoAPIAccessException\n\t */\n\tpublic void importTriggerColumnItemId(String triggerid) throws JSONException, IOException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\t// check if the trigger exists and if the itemid was set\n\t\tboolean mustImport = true;\n\t\tCursor cur = zabbixLocalDB.query(TriggerData.TABLE_NAME, null, TriggerData.COLUMN_TRIGGERID+\"=\"+triggerid, null, null, null, null);\n\t\tif (cur.moveToFirst()) {\n\t\t\tlong itemid = 0;\n\t\t\ttry {\n\t\t\t\titemid = cur.getLong(cur.getColumnIndex(TriggerData.COLUMN_ITEMID));\n\t\t\t} catch (Exception e) {\n\t\t\t\t// no itemid\n\t\t\t}\n\t\t\tif (itemid > 0) {\n\t\t\t\tmustImport = false;\n\t\t\t}\n\t\t}\n\t\tif (mustImport) {\n\t\t\t_startTransaction();\n\t\t\tzabbixLocalDB.delete(TriggerData.TABLE_NAME, TriggerData.COLUMN_TRIGGERID+\"=\"+triggerid, null);\n\t\t\tJsonArrayOrObjectReader triggers = _queryStream(\n\t\t\t\t\t\"trigger.get\"\n\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t\t.put(\"output\", \"extend\")\n\t\t\t\t\t\t.put(isVersion2?\"selectHosts\":\"select_hosts\", \"extend\")\n\t\t\t\t\t\t.put(isVersion2?\"selectGroups\":\"select_groups\", \"extend\")\n\t\t\t\t\t\t.put(isVersion2?\"selectItems\":\"select_items\", \"extend\")\n\t\t\t\t\t\t.put(\"triggerids\", new JSONArray().put(triggerid))\n\t\t\t\t\t\t.put(\"limit\", 1)\n\t\t\t);\n\t\t\timportTriggers(triggers);\n\t\t\t_endTransaction();\n\t\t}\n\t}\n\n\t/**\n\t * imports the \"warning\"-triggers\n\t * @throws JSONException\n\t * @throws IOException\n\t * @throws HttpAuthorizationRequiredException\n\t * @throws NoAPIAccessException\n\t */\n\tpublic void importTriggers() throws JSONException, IOException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\tif (!isCached(TriggerData.TABLE_NAME, null)) {\n\t\t\t// clear triggers\n\t\t\tzabbixLocalDB.delete(TriggerData.TABLE_NAME, null, null);\n\n\t\t\t_startTransaction();\n\n\t\t\tlong min = (new Date().getTime()/1000)-ZabbixConfig.STATUS_SHOW_TRIGGER_TIME;\n\t\t\tJsonArrayOrObjectReader triggers = _queryStream(\n\t\t\t\t\t\"trigger.get\"\n\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t\t.put(\"output\", \"extend\")\n\t\t\t\t\t\t.put(\"sortfield\", \"lastchange\")\n\t\t\t\t\t\t.put(\"sortorder\", \"desc\")\n\t\t\t\t\t\t.put(isVersion2?\"selectHosts\":\"select_hosts\", \"extend\")\n\t\t\t\t\t\t.put(isVersion2?\"selectGroups\":\"select_groups\", \"extend\")\n\t\t\t\t\t\t.put(isVersion2?\"selectItems\":\"select_items\", \"extend\")\n\t\t\t\t\t\t.put(\"lastChangeSince\", min)\n\t\t\t\t\t\t.put(\"only_true\", \"1\")\n\t\t\t\t\t\t.put(\"limit\", ZabbixConfig.TRIGGER_GET_LIMIT)\n\t\t\t\t\t\t.put(\"expandDescription\", true)\n\t\t\t);\n\t\t\timportTriggers(triggers);\n\t\t\ttriggers.close();\n\n\t\t\tsetCached(TriggerData.TABLE_NAME, null, ZabbixConfig.CACHE_LIFETIME_TRIGGERS);\n\t\t\t_endTransaction();\n\t\t}\n\t}\n\n\tprivate void importTriggers(JsonArrayOrObjectReader jsonArray) throws JsonParseException, IOException {\n\t\tJsonObjectReader triggerReader;\n\t\twhile ((triggerReader = jsonArray.next()) != null) {\n\t\t\tTriggerData t = new TriggerData();\n\t\t\twhile (triggerReader.nextValueToken()) {\n\t\t\t\tString propName = triggerReader.getCurrentName();\n\t\t\t\tif (propName.equals(TriggerData.COLUMN_TRIGGERID)) {\n\t\t\t\t\tt.set(TriggerData.COLUMN_TRIGGERID, Long.parseLong(triggerReader.getText()));\n\t\t\t\t} else if (propName.equals(TriggerData.COLUMN_COMMENTS)) {\n\t\t\t\t\tt.set(TriggerData.COLUMN_COMMENTS, triggerReader.getText());\n\t\t\t\t} else if (propName.equals(TriggerData.COLUMN_DESCRIPTION)) {\n\t\t\t\t\tt.set(TriggerData.COLUMN_DESCRIPTION, triggerReader.getText());\n\t\t\t\t} else if (propName.equals(TriggerData.COLUMN_EXPRESSION)) {\n\t\t\t\t\tt.set(TriggerData.COLUMN_EXPRESSION, triggerReader.getText());\n\t\t\t\t} else if (propName.equals(TriggerData.COLUMN_LASTCHANGE)) {\n\t\t\t\t\tt.set(TriggerData.COLUMN_LASTCHANGE, Integer.parseInt(triggerReader.getText()));\n\t\t\t\t} else if (propName.equals(TriggerData.COLUMN_PRIORITY)) {\n\t\t\t\t\tt.set(TriggerData.COLUMN_PRIORITY, Integer.parseInt(triggerReader.getText()));\n\t\t\t\t} else if (propName.equals(TriggerData.COLUMN_STATUS)) {\n\t\t\t\t\tt.set(TriggerData.COLUMN_STATUS, Integer.parseInt(triggerReader.getText()));\n\t\t\t\t} else if (propName.equals(TriggerData.COLUMN_VALUE)) {\n\t\t\t\t\tt.set(TriggerData.COLUMN_VALUE, Integer.parseInt(triggerReader.getText()));\n\t\t\t\t} else if (propName.equals(TriggerData.COLUMN_URL)) {\n\t\t\t\t\tt.set(TriggerData.COLUMN_URL, triggerReader.getText());\n\t\t\t\t} else if (propName.equals(\"hosts\")) {\n\t\t\t\t\tObject[] hostsCache = importHosts(triggerReader.getJsonArray(), null);\n\t\t\t\t\tt.set(TriggerData.COLUMN_HOSTS, hostsCache[0]);\n\t\t\t\t\tt.set(TriggerData.COLUMN_HOSTID, hostsCache[1]);\n\t\t\t\t} else if (propName.equals(\"groups\")) {\n\t\t\t\t\timportHostGroups(triggerReader.getJsonArray());\n\t\t\t\t} else if (propName.equals(\"items\")) {\n\t\t\t\t\t// store the first item id\n\t\t\t\t\tt.set(TriggerData.COLUMN_ITEMID, importItems(triggerReader.getJsonArray(), 1, true));\n\t\t\t\t} else {\n\t\t\t\t\ttriggerReader.nextProperty();\n\t\t\t\t}\n\t\t\t}\n\t\t\tt.insert(zabbixLocalDB, TriggerData.COLUMN_TRIGGERID);\n\t\t\t_commitTransactionIfRecommended();\n\t\t}\n\t}\n\n\tpublic void importTriggersByItemId(String itemid) throws JSONException, IOException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\tif (!isCached(TriggerData.TABLE_NAME, \"itemid=\"+itemid)) {\n\t\t\t_startTransaction();\n\t\t\tzabbixLocalDB.delete(TriggerData.TABLE_NAME, TriggerData.COLUMN_ITEMID+\"=\"+itemid, null);\n\t\t\tJsonArrayOrObjectReader triggers = _queryStream(\n\t\t\t\t\t\"trigger.get\"\n\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t\t.put(\"output\", \"extend\")\n\t\t\t\t\t\t.put(isVersion2?\"selectHosts\":\"select_hosts\", \"extend\")\n\t\t\t\t\t\t.put(isVersion2?\"selectGroups\":\"select_groups\", \"extend\")\n\t\t\t\t\t\t.put(isVersion2?\"selectItems\":\"select_items\", \"extend\")\n\t\t\t\t\t\t.put(\"itemids\", new JSONArray().put(itemid))\n\t\t\t\t\t\t.put(\"limit\", 1)\n\t\t\t\t\t\t.put(\"sortfield\", \"lastchange\")\n\t\t\t\t\t\t.put(\"sortorder\", \"DESC\")\n\t\t\t);\n\t\t\timportTriggers(triggers);\n\t\t\tsetCached(TriggerData.TABLE_NAME, \"itemid=\"+itemid, ZabbixConfig.CACHE_LIFETIME_TRIGGERS);\n\t\t\t_endTransaction();\n\t\t}\n\t}\n\n\tpublic boolean isCached(String kind, String filter) {\n\t\tSQLiteQueryBuilder sqlBuilder = new SQLiteQueryBuilder();\n\t\tsqlBuilder.setTables(CacheData.TABLE_NAME);\n\t\tsqlBuilder.appendWhere(CacheData.COLUMN_KIND+\"='\"+kind+\"' AND \");\n\t\tsqlBuilder.appendWhere(CacheData.COLUMN_FILTER+\n\t\t\t\t(filter==null?\" IS NULL\":\"='\"+filter+\"'\")\n\t\t);\n\t\tsqlBuilder.appendWhere(\" AND \"+CacheData.COLUMN_EXPIRE_DATE+\">\"+new Date().getTime()/1000);\n\t\tCursor cur = sqlBuilder.query(\n\t\t\tzabbixLocalDB,\n\t\t\tnull,\n\t\t\tnull,\n\t\t\tnull,\n\t\t\tnull,\n\t\t\tnull,\n\t\t\tnull\n\t\t);\n\t\tLog.i(\"ZabbixContentProvider\", \"isCached \"+kind+\"//\"+filter+\"//\"+cur.moveToFirst());\n\t\treturn cur.moveToFirst();\n\t}\n\n\t/**\n\t * public, for the unit test\n\t */\n\tpublic void setCached(String kind, String filter, int lifetime) {\n\t\tCacheData cache = new CacheData();\n\t\tcache.set(CacheData.COLUMN_EXPIRE_DATE, new Date().getTime()/1000 + lifetime);\n\t\tcache.set(CacheData.COLUMN_KIND, kind);\n\t\tif (filter != null) {\n\t\t\tcache.set(CacheData.COLUMN_FILTER, filter);\n\t\t}\n\t\tcache.insert(zabbixLocalDB);\n\t}\n\n\t/**\n\t * updates the progressbar in the gui\n\t * @param i 0..100\n\t */\n\tpublic void showProgress(int i) {\n\t\t// if applicable, transform the progress\n\t\tif (transformProgressStart != 0 && transformProgressEnd != 0) {\n\t\t\ti = (int) (transformProgressStart + (transformProgressEnd-transformProgressStart)*(double)i/100);\n\t\t}\n\n\t\tIntent intent = new Intent(ZabbixContentProvider.CONTENT_PROVIDER_INTENT_ACTION);\n\t\tintent.putExtra(\"flag\", ZabbixContentProvider.INTENT_FLAG_SHOW_PROGRESS);\n\t\tintent.putExtra(\"value\", i);\n\t\tcontext.sendBroadcast(intent);\n\t}\n\n\t/**\n\t * transforms the progress\n\t * @param start 0% => start%\n\t * @param end 100% => end%\n\t */\n\tpublic void transformProgress(int start, int end) {\n\t\ttransformProgressStart = start;\n\t\ttransformProgressEnd = end;\n\t}\n}\n"],
    "p_date_tdt": "Sep 12, 2012 8:22:56 AM",
    "c_comments_t": ["\t\t\t// create ApplicationItemRelation /** \n * public, for the unit test\n */\n /** \n * import the hosts from stream\n * @param jsonArray stream\n * @param numHosts count of hosts for progressbar. null if unknown.\n * @return Object[] {(String) comma-separated all Hostnames, (Long) 1. host id}\n * @throws JsonParseException\n * @throws IOException\n */\n \t\t\t// result array found /** \n * import graph items\n * @param graphItems\n * @return true, if graphid column has to be updated from -1 to the correct graphid later.\n * @throws JsonParseException\n * @throws NumberFormatException\n * @throws IOException\n */\n \t\t\t\t\t\t// save only every 20th \t\t\t// wrong password. token remains null \t\t\t// the past 2 hours \t\t\t\t\t// data are unuseable, e.g. because it's a string /** \n * @param events stream\n * @param numEvents if null, no progressbar-update AND only isert, if it does not exist. If !null, progressbar-update AND always insert without checking\n * @throws JsonParseException\n * @throws IOException\n */\n \t\t\t\t\t// Precondition failed / Looks like Zabbix 1.8.2 \t\t\t// get API version \t\t\t// if #0 \"other\" does not exist yet, it has to be created \t\t\t\t\t// later the IDs will be replaced with the correct /** \n * zabbix api call. data will be parsed as json object on-the-fly. Caution: use this only for api calls with a small return data.\n * @param method\n * @param params\n * @return\n * @throws ClientProtocolException\n * @throws IOException\n * @throws JSONException\n * @throws HttpAuthorizationRequiredException\n * @throws NoAPIAccessException\n */\n /** \n * begin sql transaction\n */\n \t\t\t\t\t\t// first do a new auth and then try the same api call again \t\t\t\t// no itemid \t\t\t// count of items /** \n * init\n * @param context android context\n * @param zabbixLocalDB sqlite\n */\n \t\t\t// create applications that does not exist \t\t\t\t// so we use a fiction \t\t\t// only resouretype == 0 /** \n * probably too old zabbix <= 1.8.2\n */\n /** \n * zabbix auth. user and pwd from app preferences\n * @return true success\n * @throws ClientProtocolException\n * @throws IOException\n * @throws JSONException\n * @throws HttpAuthorizationRequiredException\n * @throws NoAPIAccessException\n */\n /** \n * close the last http stream\n */\n \t\t\t// Workaround: historydetails only comes if you use the correct \"history\"-parameter. /** \n * transforms the progress\n * @param start 0% => start%\n * @param end 100% => end%\n */\n \t\t\t\t// in Zabbix version <2.0, this is not default \t\t\t\t// file not found \t\t\t\t\t// hex string => color int \t\tHttpClientParams.setRedirecting(params, true); // redirecting /** \n * The API version. From 1.8.3 (maybe earlier) to 2.0 (excluded), this was 1.3. With 2.0, it changed to 1.4.  Finally, since 2.0.4, the API version matches the program version.\n */\n \t\t\t// if applicable replace placeholder \t\t\t// if graphid-column was not set, this must be done later. temporary graphid=-1 \t\t// for GUI unit test, just return true /** \n * imports the \"warning\"-triggers\n * @throws JSONException\n * @throws IOException\n * @throws HttpAuthorizationRequiredException\n * @throws NoAPIAccessException\n */\n \t\t\t// event is parsed and can be inserted into the db \t\tpublic static final int EVENT_GET_TIME_FROM_SHIFT = 7*24*60*60; // -7 days \t\t// http request \t\t\t\t\t// store hosts namen \t\t\t\t// http auth failed \t\t\t\t\t// at this point itemid and hostid is unknown \t\t\t\t\t// import triggers \t\t\t// we try them all, until we get results. /** \n * importiert ein trigger mit dem attribute itemid. ggf. wird der trigger zuerst gelöscht und neu angelegt. imports a trigger with the attribute itemid. if trigger already exists, it will be removed first.\n * @param triggerid\n * @throws JSONException\n * @throws IOException\n * @throws HttpAuthorizationRequiredException\n * @throws NoAPIAccessException\n */\n \t\t\t\t\t// import hosts \t\t\t// for unit test \t\t\t\t// ignore \t\t\t// or a json object /** \n * zabbix error: no api access\n */\n /** \n * counts the sql inserts/updates and do a transaction commit to save the memory\n */\n \t\t\t// send intent to GUI \t\t\t\t\t// before zabbix 2.x the name field was \"description\" \t\t\t\t\t// if we get an empty array, we try another history parameter \t\t\t\t\t// store the first item id \t\t// check if the trigger exists and if the itemid was set /** \n * global constants\n */\n \t\t\t\t// create \"other\" hostgroup #1 \t\t\t// if there's no application, the ID #0 must be added (for other) \t\t\t\t\t// because of this, all applicationrelations will be saved with itemid and hostid \"-1\". \t\t\t\t\t\t.put(\"history\", historytype) // for integer ? /** \n * interface to connect to the zabbix server\n */\n /** \n * acknowledge zabbix event. Sets ack-flag with comment. Caution: This is supported only for Zabbix version >= 1.8.4\n * @param eventid\n * @param comment\n * @return true, success.\n * @throws ClientProtocolException\n * @throws IOException\n * @throws JSONException\n * @throws HttpAuthorizationRequiredException\n * @throws NoAPIAccessException\n */\n \t\t\t// store the last stream to close it if an exception will be thrown /** \n * zabbix api call as stream.\n * @param method\n * @param params\n * @return stream im json array wrapper\n * @throws JSONException\n * @throws IOException\n * @throws HttpAuthorizationRequiredException\n * @throws NoAPIAccessException\n */\n \t\t// if applicable http auth \t\t\t// correct historytype found and there are data \t\t\t\t// count of the entries cannot be detected (zabbix bug), /** \n * import items from stream.\n * @param items stream\n * @param numItems count for progressbar, if 0 no progressbarupdate\n * @param checkBeforeInsert if true, only make an insert if item does not exist\n * @return the first item id\n * @throws JsonParseException\n * @throws IOException\n */\n \t\t\t// collect all graphids /** \n * http auth is needed\n */\n \t\t\t// ignore for unit test /** \n * commit sql transaction\n */\n \t\t\t// delete old graphs \t\t\t// host without group will get group #0 (other) \t\t\t// there's no result \t\tpublic static final int HISTORY_GET_TIME_FROM_SHIFT = 24*60*60; // -24h \t\t// if applicable, transform the progress \t\t\t// SSL not trusted \t\t\t// internet problem \t\t\tif (jp.nextToken() != JsonToken.START_ARRAY && jp.getCurrentToken() != JsonToken.START_OBJECT) { // go inside the array \t\tpublic static final int CACHE_LIFETIME_APPLICATIONS = 2*24*60*60; // 2 days \t\t\t\t\t// since zabbix 2.x is the name of the item \"name\" \t\t\t// now the \"-1\" IDs of applicationsrelation will be replaced with the correct itemID \t\t\t// get count of hosts /** \n * import the newest events\n * @throws ClientProtocolException\n * @throws IOException\n * @throws JSONException\n * @throws HttpAuthorizationRequiredException\n * @throws NoAPIAccessException\n */\n /** \n * updates the progressbar in the gui\n * @param i 0..100\n */\n \t\t\t\t\t\t// ignore \t\t\t\t\t// first do a new auth and then try the same api call again /** \n * import the newest event of a trigger\n * @param triggerid\n * @throws JSONException\n * @throws IOException\n * @throws HttpAuthorizationRequiredException\n * @throws NoAPIAccessException\n */\n \t\t// it can be an (empty) array \t\t\t// this parameter can be \"null\" or a number 0-4. Because we don't know when to use which, \t\t\t// clear triggers"],
    "p_contents_t": ["package com.inovex.zabbixmobile.api;\n\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.net.Socket;\nimport java.net.UnknownHostException;\nimport java.security.KeyManagementException;\nimport java.security.KeyStore;\nimport java.security.KeyStoreException;\nimport java.security.NoSuchAlgorithmException;\nimport java.security.UnrecoverableKeyException;\nimport java.security.cert.CertificateException;\nimport java.security.cert.X509Certificate;\nimport java.util.ArrayList;\nimport java.util.Date;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Set;\n\nimport javax.net.ssl.SSLContext;\nimport javax.net.ssl.SSLPeerUnverifiedException;\nimport javax.net.ssl.TrustManager;\nimport javax.net.ssl.X509TrustManager;\n\nimport org.apache.http.HttpResponse;\nimport org.apache.http.HttpVersion;\nimport org.apache.http.auth.AuthScope;\nimport org.apache.http.auth.UsernamePasswordCredentials;\nimport org.apache.http.client.ClientProtocolException;\nimport org.apache.http.client.methods.HttpPost;\nimport org.apache.http.client.params.HttpClientParams;\nimport org.apache.http.conn.ClientConnectionManager;\nimport org.apache.http.conn.scheme.PlainSocketFactory;\nimport org.apache.http.conn.scheme.Scheme;\nimport org.apache.http.conn.scheme.SchemeRegistry;\nimport org.apache.http.conn.ssl.SSLSocketFactory;\nimport org.apache.http.entity.StringEntity;\nimport org.apache.http.impl.client.DefaultHttpClient;\nimport org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager;\nimport org.apache.http.params.BasicHttpParams;\nimport org.apache.http.params.HttpConnectionParams;\nimport org.apache.http.params.HttpParams;\nimport org.apache.http.params.HttpProtocolParams;\nimport org.apache.http.protocol.HTTP;\nimport org.codehaus.jackson.JsonFactory;\nimport org.codehaus.jackson.JsonParseException;\nimport org.codehaus.jackson.JsonParser;\nimport org.codehaus.jackson.JsonToken;\nimport org.json.JSONArray;\nimport org.json.JSONException;\nimport org.json.JSONObject;\n\nimport android.content.ContentValues;\nimport android.content.Context;\nimport android.content.Intent;\nimport android.content.SharedPreferences;\nimport android.database.Cursor;\nimport android.database.sqlite.SQLiteDatabase;\nimport android.database.sqlite.SQLiteQueryBuilder;\nimport android.graphics.Color;\nimport android.preference.PreferenceManager;\nimport android.util.Log;\n\nimport com.inovex.zabbixmobile.R;\nimport com.inovex.zabbixmobile.ZabbixContentProvider;\nimport com.inovex.zabbixmobile.model.ApplicationData;\nimport com.inovex.zabbixmobile.model.ApplicationItemRelationData;\nimport com.inovex.zabbixmobile.model.CacheData;\nimport com.inovex.zabbixmobile.model.EventData;\nimport com.inovex.zabbixmobile.model.GraphData;\nimport com.inovex.zabbixmobile.model.GraphItemData;\nimport com.inovex.zabbixmobile.model.HistoryDetailData;\nimport com.inovex.zabbixmobile.model.HostData;\nimport com.inovex.zabbixmobile.model.HostGroupData;\nimport com.inovex.zabbixmobile.model.ItemData;\nimport com.inovex.zabbixmobile.model.ScreenData;\nimport com.inovex.zabbixmobile.model.ScreenItemData;\nimport com.inovex.zabbixmobile.model.TriggerData;\n\n/**\n * interface to connect to the zabbix server\n */\npublic class ZabbixService {\n\tclass CustomSSLSocketFactory extends SSLSocketFactory {\n\t\tSSLContext sslContext = SSLContext.getInstance(\"TLS\");\n\n\t\tpublic CustomSSLSocketFactory(KeyStore truststore) throws NoSuchAlgorithmException, KeyManagementException, KeyStoreException, UnrecoverableKeyException {\n\t\t\tsuper(truststore);\n\t\t\tTrustManager tm = new X509TrustManager() {\n\t\t\t\t@Override\n\t\t\t\tpublic void checkClientTrusted(X509Certificate[] chain,\n\t\t\t\t\t\tString authType) throws CertificateException {\n\t\t\t\t}\n\t\t\t\t@Override\n\t\t\t\tpublic void checkServerTrusted(X509Certificate[] chain,\n\t\t\t\t\t\tString authType) throws CertificateException {\n\t\t\t\t}\n\t\t\t\t@Override\n\t\t\t\tpublic X509Certificate[] getAcceptedIssuers() {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t};\n\t\t\tsslContext.init(null, new TrustManager[] { tm }, null);\n\t\t}\n\n\t\t@Override\n\t\tpublic Socket createSocket() throws IOException {\n\t\t\treturn sslContext.getSocketFactory().createSocket();\n\t\t}\n\n\t\t@Override\n\t\tpublic Socket createSocket(Socket socket, String host, int port, boolean autoClose) throws IOException, UnknownHostException {\n\t\t\treturn sslContext.getSocketFactory().createSocket(socket, host, port, autoClose);\n\t\t}\n\t}\n\n\t/**\n\t * http auth is needed\n\t */\n\tpublic class HttpAuthorizationRequiredException extends Exception {\n\t\tprivate static final long serialVersionUID = 6632422081858878147L;\n\t}\n\n\t/**\n\t * zabbix error: no api access\n\t */\n\tpublic class NoAPIAccessException extends Exception {\n\t\tprivate static final long serialVersionUID = 6381395987443456382L;\n\t}\n\n\t/**\n\t * probably too old zabbix <= 1.8.2\n\t */\n\tpublic class PreconditionFailedException extends Exception {\n\t\tprivate static final long serialVersionUID = -2529885710860745023L;\n\t}\n\n\t/**\n\t * global constants\n\t */\n\tpublic class ZabbixConfig {\n\t\tpublic static final int APPLICATION_GET_LIMIT = 1000;\n\t\tpublic static final int EVENTS_GET_LIMIT = 60;\n\t\tpublic static final int HISTORY_GET_TIME_FROM_SHIFT = 8*60*60; // -8h\n\t\tpublic static final int HISTORY_GET_LIMIT = 8000;\n\t\tpublic static final int HOSTGROUP_GET_LIMIT = 200;\n\t\tpublic static final int HOST_GET_LIMIT = 300;\n\t\tpublic static final int ITEM_GET_LIMIT = 200;\n\t\tpublic static final int TRIGGER_GET_LIMIT = 100;\n\t\tpublic static final int EVENT_GET_TIME_FROM_SHIFT = 7*24*60*60; // -7 days\n\t\tpublic static final int CACHE_LIFETIME_APPLICATIONS = 2*24*60*60; // 2 days\n\t\tpublic static final int CACHE_LIFETIME_EVENTS = 120;\n\t\tpublic static final int CACHE_LIFETIME_HISTORY_DETAILS = 4*60;\n\t\tpublic static final int CACHE_LIFETIME_HOST_GROUPS = 7*24*60*60;\n\t\tpublic static final int CACHE_LIFETIME_HOSTS = 2*24*60*60;\n\t\tpublic static final int CACHE_LIFETIME_SCREENS = 2*24*60*60;\n\t\tpublic static final int CACHE_LIFETIME_ITEMS = 4*60;\n\t\tpublic static final int CACHE_LIFETIME_TRIGGERS = 2*60;\n\t\tpublic static final long STATUS_SHOW_TRIGGER_TIME = 14*24*60*60;\n\t\tpublic static final int HTTP_CONNECTION_TIMEOUT = 30000;\n\t}\n\n\tprivate final DefaultHttpClient httpClient;\n\tprivate final SQLiteDatabase zabbixLocalDB;\n\tprivate String url;\n\tprivate String token;\n\tprivate final Context context;\n\tprivate int _transactionStack;\n\tprivate JsonParser lastStream;\n\tprivate int transformProgressStart;\n\tprivate int transformProgressEnd;\n\tprivate boolean _notAuthorizedRetry;\n\tprivate boolean isVersion2 = true;\n\n\t/**\n\t * init\n\t * @param context android context\n\t * @param zabbixLocalDB sqlite\n\t */\n\tpublic ZabbixService(Context context, SQLiteDatabase zabbixLocalDB) {\n\t\tClientConnectionManager ccm = null;\n\t\tHttpParams params = null;\n\n\t\ttry {\n\t\t\tSharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(context);\n\t\t\tif (prefs.getBoolean(\"zabbix_trust_all_ssl_ca\", false)) {\n\t\t\t\tKeyStore trustStore = KeyStore.getInstance(KeyStore.getDefaultType());\n\t\t\t\ttrustStore.load(null, null);\n\n\t\t\t\tSSLSocketFactory sf = new CustomSSLSocketFactory(trustStore);\n\t\t\t\tsf.setHostnameVerifier(SSLSocketFactory.ALLOW_ALL_HOSTNAME_VERIFIER);\n\n\t\t\t\tparams = new BasicHttpParams();\n\t\t\t\tHttpProtocolParams.setVersion(params, HttpVersion.HTTP_1_1);\n\t\t\t\tHttpProtocolParams.setContentCharset(params, HTTP.UTF_8);\n\n\t\t\t\tSchemeRegistry registry = new SchemeRegistry();\n\t\t\t\tregistry.register(new Scheme(\"http\", PlainSocketFactory.getSocketFactory(), 80));\n\t\t\t\tregistry.register(new Scheme(\"https\", sf, 443));\n\n\t\t\t\tccm = new ThreadSafeClientConnManager(params, registry);\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\t// ignore for unit test\n\t\t}\n\n\t\tif (ccm == null || params == null) {\n\t\t\thttpClient = new DefaultHttpClient();\n\t\t} else {\n\t\t\thttpClient = new DefaultHttpClient(ccm, params);\n\t\t}\n\n\t\t// if applicable http auth\n\t\ttry {\n\t\t\tSharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(context);\n\t\t\tif (prefs.getBoolean(\"http_auth_enabled\", false)) {\n\t\t\t\tString user = prefs.getString(\"http_auth_username\", \"\");\n\t\t\t\tString pwd = prefs.getString(\"http_auth_password\", \"\");\n\t\t\t\thttpClient.getCredentialsProvider().setCredentials(AuthScope.ANY, new UsernamePasswordCredentials(user, pwd));\n\t\t\t}\n\t\t} catch (java.lang.UnsupportedOperationException e1) {\n\t\t\t// for unit test\n\t\t}\n\n\t\tparams = httpClient.getParams();\n\t\tHttpClientParams.setRedirecting(params, true); // redirecting\n\t\tHttpConnectionParams.setConnectionTimeout(params, ZabbixConfig.HTTP_CONNECTION_TIMEOUT);\n\t\tthis.context = context;\n\t\tthis.zabbixLocalDB = zabbixLocalDB;\n\t}\n\n\t/**\n\t * counts the sql inserts/updates and do a transaction commit to save the memory\n\t */\n\tprivate void _commitTransactionIfRecommended() {\n\t\tif (_transactionStack++ > 50) {\n\t\t\t_endTransaction();\n\t\t\t_startTransaction();\n\t\t}\n\t}\n\n\t/**\n\t * commit sql transaction\n\t */\n\tpublic void _endTransaction() {\n\t\tif (zabbixLocalDB.inTransaction()) {\n\t\t\tzabbixLocalDB.setTransactionSuccessful();\n\t\t\tzabbixLocalDB.endTransaction();\n\t\t}\n\t}\n\n\t/**\n\t * zabbix api call. data will be parsed as json object on-the-fly.\n\t * Caution: use this only for api calls with a small return data.\n\t * @param method\n\t * @param params\n\t * @return\n\t * @throws ClientProtocolException\n\t * @throws IOException\n\t * @throws JSONException\n\t * @throws HttpAuthorizationRequiredException\n\t * @throws NoAPIAccessException\n\t */\n\tprivate JSONObject _queryBuffer(String method, JSONObject params) throws ClientProtocolException, IOException, JSONException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\tHttpPost post = new HttpPost(url);\n\t\tpost.addHeader(\"Content-Type\", \"application/json; charset=utf-8\");\n\n\t\tString json =\n\t\t\t\"{\" +\n\t\t\t\"\t\\\"jsonrpc\\\" : \\\"2.0\\\",\" +\n\t\t\t\"\t\\\"method\\\" : \\\"\"+method+\"\\\",\" +\n\t\t\t\"\t\\\"params\\\" : \"+params.toString()+\",\" +\n\t\t\t\"\t\\\"auth\\\" : \"+(token==null?\"null\":'\"'+token+'\"')+\",\" +\n\t\t\t\"\t\\\"id\\\" : 0\" +\n\t\t\t\"}\";\n\n\t\tpost.setEntity(new StringEntity(json, \"UTF-8\"));\n\t\ttry {\n\t\t\tHttpResponse resp = httpClient.execute(post);\n\t\t\tif (resp.getStatusLine().getStatusCode() == 401) {\n\t\t\t\t// http auth failed\n\t\t\t\tthrow new HttpAuthorizationRequiredException();\n\t\t\t} else if (resp.getStatusLine().getStatusCode() == 412) {\n\t\t\t\t\t// Precondition failed / Looks like Zabbix 1.8.2\n\t\t\t\tthrow new PreconditionFailedException();\n\t\t\t} else if (resp.getStatusLine().getStatusCode() == 404) {\n\t\t\t\t// file not found\n\t\t\t\tthrow new IOException(resp.getStatusLine().getStatusCode()+\" \"+resp.getStatusLine().getReasonPhrase());\n\t\t\t} else {\n\t\t\t\tLog.d(\"ZabbixService\", resp.getStatusLine().getStatusCode()+\" \"+resp.getStatusLine().getReasonPhrase());\n\t\t\t}\n\t\t\tStringBuilder total = new StringBuilder();\n\t\t\tBufferedReader rd = new BufferedReader(new InputStreamReader(resp.getEntity().getContent()));\n\t\t\tint chr;\n\t\t\twhile ((chr = rd.read()) != -1) {\n\t\t\t\ttotal.append((char) chr);\n\t\t\t}\n\t\t\tJSONObject result = new JSONObject(total.toString());\n\t\t\ttry {\n\t\t\t\tif (result.getJSONObject(\"error\") != null) {\n\t\t\t\t\tif (result.getJSONObject(\"error\").getString(\"data\").equals(\"No API access\")) {\n\t\t\t\t\t\tthrow new NoAPIAccessException();\n\t\t\t\t\t} else throw new RuntimeException(result.getJSONObject(\"error\").toString());\n\t\t\t\t}\n\t\t\t\tif (result.getString(\"data\").equals(\"Not authorized\")) {\n\t\t\t\t\t// first do a new auth and then try the same api call again\n\t\t\t\t\tif (authenticate() && !_notAuthorizedRetry) {\n\t\t\t\t\t\t_notAuthorizedRetry = true;\n\t\t\t\t\t\tJSONObject r = _queryBuffer(method, params);\n\t\t\t\t\t\t_notAuthorizedRetry = false;\n\t\t\t\t\t\treturn r;\n\t\t\t\t\t} throw new IllegalStateException(result.toString());\n\t\t\t\t}\n\t\t\t} catch (JSONException e) {\n\t\t\t\t// ignore\n\t\t\t}\n\t\t\treturn result;\n\t\t} catch (SSLPeerUnverifiedException e) {\n\t\t\t// SSL not trusted\n\t\t\tIntent intent = new Intent(ZabbixContentProvider.CONTENT_PROVIDER_INTENT_ACTION);\n\t\t\tintent.putExtra(\"flag\", ZabbixContentProvider.INTENT_FLAG_SSL_NOT_TRUSTED);\n\t\t\tcontext.sendBroadcast(intent);\n\t\t\tthrow e;\n\t\t} catch (IOException e) {\n\t\t\t// internet problem\n\t\t\t// send intent to GUI\n\t\t\tIntent intent = new Intent(ZabbixContentProvider.CONTENT_PROVIDER_INTENT_ACTION);\n\t\t\tintent.putExtra(\"flag\", ZabbixContentProvider.INTENT_FLAG_CONNECTION_FAILED);\n\t\t\tintent.putExtra(\"value\", e.getMessage());\n\t\t\tcontext.sendBroadcast(intent);\n\t\t\tthrow e;\n\t\t}\n\t}\n\n\t/**\n\t * zabbix api call as stream.\n\t * @param method\n\t * @param params\n\t * @return stream im json array wrapper\n\t * @throws JSONException\n\t * @throws IOException\n\t * @throws HttpAuthorizationRequiredException\n\t * @throws NoAPIAccessException\n\t */\n\tprivate JsonArrayOrObjectReader _queryStream(String method, JSONObject params) throws JSONException, IOException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\t// http request\n\t\tHttpPost post = new HttpPost(url);\n\t\tpost.addHeader(\"Content-Type\", \"application/json; charset=utf-8\");\n\n\t\tJSONObject json = new JSONObject()\n\t\t\t.put(\"jsonrpc\", \"2.0\")\n\t\t\t.put(\"method\", method)\n\t\t\t.put(\"params\", params)\n\t\t\t.put(\"auth\", token)\n\t\t\t.put(\"id\", 0);\n\n\t\tLog.d(\"ZabbixService\", \"_queryStream: \"+url);\n\t\tLog.d(\"ZabbixService\", \"_queryStream: \"+json.toString());\n\n\t\tpost.setEntity(new StringEntity(json.toString(), \"UTF-8\"));\n\t\ttry {\n\t\t\tHttpResponse resp = httpClient.execute(post);\n\t\t\tif (resp.getStatusLine().getStatusCode() == 401) {\n\t\t\t\t// http auth failed\n\t\t\t\tthrow new HttpAuthorizationRequiredException();\n\t\t\t}\n\n\t\t\tJsonFactory jsonFac = new JsonFactory();\n\t\t\tJsonParser jp = jsonFac.createJsonParser(resp.getEntity().getContent());\n\t\t\t// store the last stream to close it if an exception will be thrown\n\t\t\tlastStream = jp;\n\t\t\tif (jp.nextToken() != JsonToken.START_OBJECT) {\n\t\t\t\tthrow new IOException(\"Expected data to start with an Object\");\n\t\t\t}\n\t\t\tdo {\n\t\t\t\tjp.nextToken();\n\t\t\t\tif (jp.getCurrentName().equals(\"error\")) {\n\t\t\t\t\tjp.nextToken();\n\t\t\t\t\tString errortxt = \"\";\n\t\t\t\t\twhile (jp.nextToken() != JsonToken.END_OBJECT) {\n\t\t\t\t\t\terrortxt += jp.getText();\n\t\t\t\t\t}\n\t\t\t\t\tif (errortxt.contains(\"No API access\")) {\n\t\t\t\t\t\tthrow new NoAPIAccessException();\n\t\t\t\t\t} else if (errortxt.contains(\"Not authorized\")) {\n\t\t\t\t\t\t// first do a new auth and then try the same api call again\n\t\t\t\t\t\tif (authenticate() && !_notAuthorizedRetry) {\n\t\t\t\t\t\t\t_notAuthorizedRetry = true;\n\t\t\t\t\t\t\tJsonArrayOrObjectReader r = _queryStream(method, params);\n\t\t\t\t\t\t\t_notAuthorizedRetry = false;\n\t\t\t\t\t\t\treturn r;\n\t\t\t\t\t\t} else throw new IllegalStateException(errortxt);\n\t\t\t\t\t} else throw new IllegalStateException(\"JSON API Error: \"+errortxt);\n\t\t\t\t}\n\t\t\t} while (!jp.getCurrentName().equals(\"result\"));\n\n\t\t\t// result array found\n\t\t\tif (jp.nextToken() != JsonToken.START_ARRAY && jp.getCurrentToken() != JsonToken.START_OBJECT) { // go inside the array\n\t\t\t\ttry {\n\t\t\t\t\tLog.d(\"ZabbixService\", \"current token: \"+jp.getCurrentToken());\n\t\t\t\t\tLog.d(\"ZabbixService\", \"current name: \"+jp.getCurrentName());\n\t\t\t\t\tLog.d(\"ZabbixService\", \"get text: \"+jp.getText());\n\t\t\t\t\tLog.d(\"ZabbixService\", \"next value: \"+jp.nextValue());\n\t\t\t\t\tLog.d(\"ZabbixService\", \"next token: \"+jp.nextToken());\n\t\t\t\t\tLog.d(\"ZabbixService\", \"current token: \"+jp.getCurrentToken());\n\t\t\t\t\tLog.d(\"ZabbixService\", \"current name: \"+jp.getCurrentName());\n\t\t\t\t\tLog.d(\"ZabbixService\", \"get text: \"+jp.getText());\n\t\t\t\t} catch (Exception e) {}\n\t\t\t\tthrow new IOException(\"Expected data to start with an Array\");\n\t\t\t}\n\t\t\treturn new JsonArrayOrObjectReader(jp);\n\t\t} catch (SSLPeerUnverifiedException e) {\n\t\t\tthrow e;\n\t\t} catch (IOException e) {\n\t\t\t// internet problem\n\t\t\t// send intent to GUI\n\t\t\tIntent intent = new Intent(ZabbixContentProvider.CONTENT_PROVIDER_INTENT_ACTION);\n\t\t\tintent.putExtra(\"flag\", ZabbixContentProvider.INTENT_FLAG_CONNECTION_FAILED);\n\t\t\tcontext.sendBroadcast(intent);\n\t\t\tthrow e;\n\t\t}\n\t}\n\n\t/**\n\t * begin sql transaction\n\t */\n\tprivate void _startTransaction() {\n\t\tzabbixLocalDB.beginTransaction();\n\t\t_transactionStack = 0;\n\t}\n\n\t/**\n\t * acknowledge zabbix event. Sets ack-flag with comment.\n\t * Caution: This is supported only for Zabbix version >= 1.8.4\n\t * @param eventid\n\t * @param comment\n\t * @return true, success.\n\t * @throws ClientProtocolException\n\t * @throws IOException\n\t * @throws JSONException\n\t * @throws HttpAuthorizationRequiredException\n\t * @throws NoAPIAccessException\n\t */\n\tpublic boolean acknowledgeEvent(String eventid, String comment) throws ClientProtocolException, IOException, JSONException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\t// for GUI unit test, just return true\n\t\tif (comment != null && comment.equals(\"__UNIT_TEST__RETURN_TRUE__\")) return true;\n\n\t\tJSONObject result = _queryBuffer(\n\t\t\t\t\"event.acknowledge\"\n\t\t\t\t, new JSONObject()\n\t\t\t\t\t.put(\"eventids\", new JSONArray().put(eventid))\n\t\t);\n\t\t// it can be an (empty) array\n\t\ttry {\n\t\t\treturn result.getJSONObject(\"result\").getJSONArray(\"eventids\").length() == 1;\n\t\t} catch (JSONException e) {\n\t\t\t// or a json object\n\t\t\treturn result.getJSONObject(\"result\").getJSONObject(\"eventids\").length() == 1;\n\t\t}\n\t}\n\n\t/**\n\t * zabbix auth. user and pwd from app preferences\n\t * @return true success\n\t * @throws ClientProtocolException\n\t * @throws IOException\n\t * @throws JSONException\n\t * @throws HttpAuthorizationRequiredException\n\t * @throws NoAPIAccessException\n\t */\n\tpublic boolean authenticate() throws ClientProtocolException, IOException, JSONException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\tSharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(context);\n\t\tString url = prefs.getString(\"zabbix_url\", \"\").trim();\n\t\tString user = prefs.getString(\"zabbix_username\", \"\").trim();\n\t\tString password = prefs.getString(\"zabbix_password\", \"\");\n\n\t\tthis.url = url+(url.endsWith(\"/\")?\"\":'/')+\"api_jsonrpc.php\";\n\t\tLog.d(\"ZabbixContentProvider\", url+\"//\"+user);\n\n\t\ttry {\n\t\t\tJSONObject result = _queryBuffer(\n\t\t\t\t\t\"user.authenticate\"\n\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t\t.put(\"user\", user)\n\t\t\t\t\t\t.put(\"password\", password)\n\t\t\t);\n\t\t\ttoken = result.getString(\"result\");\n\t\t} catch (JSONException e) {\n\t\t\t// there's no result\n\t\t\te.printStackTrace();\n\t\t} catch (RuntimeException e) {\n\t\t\t// wrong password. token remains null\n\t\t\te.printStackTrace();\n\t\t}\n\t\tif (token != null) {\n\t\t\t// get API version\n\t\t\tJSONObject result = _queryBuffer(\n\t\t\t\t\t\"apiinfo.version\"\n\t\t\t\t\t, new JSONObject()\n\t\t\t);\n\t\t\tisVersion2 = result.getString(\"result\").equals(\"1.4\");\n\t\t\tLog.i(\"ZabbixService\", \"Zabbix Server Version: isVersion2=\"+isVersion2);\n\t\t}\n\t\treturn token != null;\n\t}\n\n\t/**\n\t * close the last http stream\n\t */\n\tpublic void closeLastStream() {\n\t\tif (lastStream != null && !lastStream.isClosed()) {\n\t\t\ttry {\n\t\t\t\tlastStream.close();\n\t\t\t} catch (IOException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate void importApplications(long hostid, long itemid, JsonArrayOrObjectReader jsonArray) throws JsonParseException, NumberFormatException, IOException {\n\t\tint num = 0;\n\t\tJsonObjectReader application;\n\t\twhile ((application = jsonArray.next()) != null) {\n\t\t\tApplicationData app = new ApplicationData();\n\t\t\twhile (application.nextValueToken()) {\n\t\t\t\tString propName = application.getCurrentName();\n\t\t\t\tif (propName.equals(ApplicationData.COLUMN_APPLICATIONID)) {\n\t\t\t\t\tapp.set(ApplicationData.COLUMN_APPLICATIONID, Long.parseLong(application.getText()));\n\t\t\t\t} else if (propName.equals(ApplicationData.COLUMN_NAME)) {\n\t\t\t\t\tapp.set(ApplicationData.COLUMN_NAME, application.getText());\n\t\t\t\t} else if (propName.equals(ApplicationData.COLUMN_HOSTID)) {\n\t\t\t\t\tapp.set(ApplicationData.COLUMN_HOSTID, Long.parseLong(application.getText()));\n\t\t\t\t} else {\n\t\t\t\t\tapplication.nextProperty();\n\t\t\t\t}\n\t\t\t}\n\t\t\t// create applications that does not exist\n\t\t\tapp.insert(zabbixLocalDB, ApplicationData.COLUMN_APPLICATIONID);\n\t\t\t_commitTransactionIfRecommended();\n\n\t\t\t// create ApplicationItemRelation\n\t\t\tlong appid = (Long) app.get(ApplicationData.COLUMN_APPLICATIONID);\n\t\t\tApplicationItemRelationData rel = new ApplicationItemRelationData();\n\t\t\trel.set(ApplicationItemRelationData.COLUMN_APPLICATIONID, appid);\n\t\t\trel.set(ApplicationItemRelationData.COLUMN_ITEMID, itemid);\n\t\t\trel.set(ApplicationItemRelationData.COLUMN_HOSTID, hostid);\n\t\t\trel.insert(zabbixLocalDB);\n\t\t\t_commitTransactionIfRecommended();\n\n\t\t\tnum++;\n\t\t}\n\t\tif (num == 0) {\n\t\t\t// if there's no application, the ID #0 must be added (for other)\n\t\t\tApplicationItemRelationData rel = new ApplicationItemRelationData();\n\t\t\trel.set(ApplicationItemRelationData.COLUMN_APPLICATIONID, 0);\n\t\t\trel.set(ApplicationItemRelationData.COLUMN_ITEMID, itemid);\n\t\t\trel.set(ApplicationItemRelationData.COLUMN_HOSTID, hostid);\n\t\t\trel.insert(zabbixLocalDB);\n\n\t\t\t// if #0 \"other\" does not exist yet, it has to be created\n\t\t\tApplicationData app = new ApplicationData();\n\t\t\tapp.set(ApplicationData.COLUMN_APPLICATIONID, 0);\n\t\t\tapp.set(ApplicationData.COLUMN_NAME, \"- \"+context.getResources().getString(R.string.other)+\" -\");\n\t\t\tapp.insert(zabbixLocalDB, ApplicationData.COLUMN_APPLICATIONID);\n\t\t}\n\t}\n\n\t/**\n\t * import the newest event of a trigger\n\t * @param triggerid\n\t * @throws JSONException\n\t * @throws IOException\n\t * @throws HttpAuthorizationRequiredException\n\t * @throws NoAPIAccessException\n\t */\n\tpublic void importEventByTriggerId(String triggerid) throws JSONException, IOException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\tif (!isCached(EventData.TABLE_NAME, \"triggerid=\"+triggerid)) {\n\t\t\t_startTransaction();\n\t\t\tzabbixLocalDB.delete(EventData.TABLE_NAME, EventData.COLUMN_OBJECTID+\"=\"+triggerid, null);\n\n\t\t\tJSONObject params = new JSONObject()\n\t\t\t\t.put(\"output\", \"extend\")\n\t\t\t\t.put(isVersion2?\"selectHosts\":\"select_hosts\", \"extend\")\n\t\t\t\t.put(\"triggerids\", new JSONArray().put(triggerid))\n\t\t\t\t.put(\"limit\", 1)\n\t\t\t\t.put(\"source\", 0);\n\t\t\tif (!isVersion2) {\n\t\t\t\tparams.put(\"sortfield\", \"clock\")\n\t\t\t\t\t.put(\"sortorder\", \"DESC\");\n\t\t\t}\n\n\t\t\tJsonArrayOrObjectReader events = _queryStream(\n\t\t\t\t\t\"event.get\"\n\t\t\t\t\t, params\n\t\t\t);\n\t\t\timportEvents(events, null);\n\t\t\tevents.close();\n\n\t\t\tsetCached(EventData.TABLE_NAME, \"triggerid=\"+triggerid, ZabbixConfig.CACHE_LIFETIME_EVENTS);\n\t\t\t_endTransaction();\n\t\t}\n\t}\n\n\t/**\n\t * import the newest events\n\t * @throws ClientProtocolException\n\t * @throws IOException\n\t * @throws JSONException\n\t * @throws HttpAuthorizationRequiredException\n\t * @throws NoAPIAccessException\n\t */\n\tpublic void importEvents() throws ClientProtocolException, IOException, JSONException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\tif (!isCached(EventData.TABLE_NAME, null)) {\n\t\t\t_startTransaction();\n\t\t\tzabbixLocalDB.delete(EventData.TABLE_NAME, null, null);\n\t\t\tzabbixLocalDB.delete(TriggerData.TABLE_NAME, null, null);\n\t\t\tzabbixLocalDB.delete(CacheData.TABLE_NAME, CacheData.COLUMN_KIND+\"='\"+EventData.TABLE_NAME+\"'\", null);\n\t\t\tzabbixLocalDB.delete(CacheData.TABLE_NAME, CacheData.COLUMN_KIND+\"='\"+TriggerData.TABLE_NAME+\"'\", null);\n\n\t\t\tint numEvents = ZabbixConfig.EVENTS_GET_LIMIT;\n\n\t\t\tJSONObject params = new JSONObject()\n\t\t\t\t.put(\"output\", \"extend\")\n\t\t\t\t.put(\"limit\", ZabbixConfig.EVENTS_GET_LIMIT)\n\t\t\t\t.put(isVersion2?\"selectHosts\":\"select_hosts\", \"extend\")\n\t\t\t\t.put(isVersion2?\"selectTriggers\":\"select_triggers\", \"extend\")\n\t\t\t\t.put(\"source\", 0)\n\t\t\t\t.put(\"time_from\", (new Date().getTime()/1000) - ZabbixConfig.EVENT_GET_TIME_FROM_SHIFT);\n\t\t\tif (!isVersion2) {\n\t\t\t\t// in Zabbix version <2.0, this is not default\n\t\t\t\tparams.put(\"sortfield\", \"clock\")\n\t\t\t\t\t.put(\"sortorder\", \"DESC\");\n\t\t\t}\n\t\t\tJsonArrayOrObjectReader events = _queryStream(\n\t\t\t\t\t\"event.get\"\n\t\t\t\t\t, params\n\t\t\t);\n\t\t\timportEvents(events, numEvents);\n\t\t\tevents.close();\n\n\t\t\tsetCached(EventData.TABLE_NAME, null, ZabbixConfig.CACHE_LIFETIME_EVENTS);\n\t\t\t_endTransaction();\n\t\t}\n\t}\n\n\t/**\n\t * @param events stream\n\t * @param numEvents if null, no progressbar-update AND only isert, if it does not exist. If !null, progressbar-update AND always insert without checking\n\t * @throws JsonParseException\n\t * @throws IOException\n\t */\n\tprivate void importEvents(JsonArrayOrObjectReader events, Integer numEvents) throws JsonParseException, IOException {\n\t\tint i=0;\n\t\tJsonObjectReader eventReader;\n\t\twhile ((eventReader = events.next()) != null) {\n\t\t\tEventData e = new EventData();\n\t\t\twhile (eventReader.nextValueToken()) {\n\t\t\t\tString propName = eventReader.getCurrentName();\n\t\t\t\tif (propName.equals(\"hosts\")) {\n\t\t\t\t\t// import hosts\n\t\t\t\t\tString hostnames = (String) importHosts(eventReader.getJsonArray(), null)[0];\n\t\t\t\t\t// store hosts namen\n\t\t\t\t\te.set(EventData.COLUMN_HOSTS, hostnames);\n\t\t\t\t} else if (propName.equals(\"triggers\")) {\n\t\t\t\t\t// import triggers\n\t\t\t\t\timportTriggers(eventReader.getJsonArray());\n\t\t\t\t} else if (propName.equals(EventData.COLUMN_EVENTID)) {\n\t\t\t\t\te.set(EventData.COLUMN_EVENTID, Long.parseLong(eventReader.getText()));\n\t\t\t\t} else if (propName.equals(EventData.COLUMN_CLOCK)) {\n\t\t\t\t\te.set(EventData.COLUMN_CLOCK, Integer.parseInt(eventReader.getText()));\n\t\t\t\t} else if (propName.equals(EventData.COLUMN_OBJECTID)) {\n\t\t\t\t\te.set(EventData.COLUMN_OBJECTID, Long.parseLong(eventReader.getText()));\n\t\t\t\t} else if (propName.equals(EventData.COLUMN_ACK)) {\n\t\t\t\t\te.set(EventData.COLUMN_ACK, Integer.parseInt(eventReader.getText()) == 1);\n\t\t\t\t} else if (propName.equals(EventData.COLUMN_VALUE)) {\n\t\t\t\t\te.set(EventData.COLUMN_VALUE, Integer.parseInt(eventReader.getText()));\n\t\t\t\t} else {\n\t\t\t\t\teventReader.nextProperty();\n\t\t\t\t}\n\t\t\t}\n\t\t\t// event is parsed and can be inserted into the db\n\t\t\tif (numEvents == null) {\n\t\t\t\te.insert(zabbixLocalDB, EventData.COLUMN_EVENTID);\n\t\t\t} else {\n\t\t\t\te.insert(zabbixLocalDB);\n\t\t\t\tif (++i % 10 == 0) {\n\t\t\t\t\tshowProgress(i*100/numEvents);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t_commitTransactionIfRecommended();\n\t\t}\n\t}\n\n\t/**\n\t * import graph items\n\t *\n\t * @param graphItems\n\t * @return true, if graphid column has to be updated from -1 to the correct graphid later.\n\t * @throws JsonParseException\n\t * @throws NumberFormatException\n\t * @throws IOException\n\t */\n\tprivate boolean importGraphItems(JsonArrayOrObjectReader graphItems) throws JsonParseException, NumberFormatException, IOException {\n\t\tboolean mustSetGraphid = false;\n\t\tJsonObjectReader graphItemReader;\n\t\twhile ((graphItemReader = graphItems.next()) != null) {\n\t\t\tGraphItemData gi = new GraphItemData();\n\t\t\twhile (graphItemReader.nextValueToken()) {\n\t\t\t\tString propName = graphItemReader.getCurrentName();\n\t\t\t\tif (propName.equals(\"gitemid\")) {\n\t\t\t\t\tgi.set(GraphItemData.COLUMN_GRAPHITEMID, Long.parseLong(graphItemReader.getText()));\n\t\t\t\t} else if (propName.equals(GraphItemData.COLUMN_GRAPHID)) {\n\t\t\t\t\tgi.set(GraphItemData.COLUMN_GRAPHID, Long.parseLong(graphItemReader.getText()));\n\t\t\t\t} else if (propName.equals(GraphItemData.COLUMN_ITEMID)) {\n\t\t\t\t\tgi.set(GraphItemData.COLUMN_ITEMID, Long.parseLong(graphItemReader.getText()));\n\t\t\t\t} else if (propName.equals(GraphItemData.COLUMN_COLOR)) {\n\t\t\t\t\t// hex string => color int\n\t\t\t\t\tgi.set(GraphItemData.COLUMN_COLOR, Color.parseColor(\"#\"+graphItemReader.getText()));\n\t\t\t\t} else {\n\t\t\t\t\tgraphItemReader.nextProperty();\n\t\t\t\t}\n\t\t\t}\n\t\t\t// if graphid-column was not set, this must be done later. temporary graphid=-1\n\t\t\tif (gi.get(GraphItemData.COLUMN_GRAPHID) == null) {\n\t\t\t\tgi.set(GraphItemData.COLUMN_GRAPHID, -1);\n\t\t\t\tmustSetGraphid = true;\n\t\t\t}\n\t\t\tgi.insert(zabbixLocalDB);\n\t\t}\n\t\treturn mustSetGraphid;\n\t}\n\n\tpublic void importGraphsForScreen(long screenid) throws ClientProtocolException, IOException, JSONException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\tif (!isCached(GraphData.TABLE_NAME, \"screenid=\"+screenid)) {\n\t\t\t_startTransaction();\n\n\t\t\t// collect all graphids\n\t\t\tSet<Long> graphids = new HashSet<Long>();\n\t\t\tCursor cur = zabbixLocalDB.query(ScreenItemData.TABLE_NAME, null, ScreenItemData.COLUMN_SCREENID+\"=\"+screenid, null, null, null, null);\n\t\t\twhile (cur.moveToNext()) {\n\t\t\t\tgraphids.add(cur.getLong(cur.getColumnIndex(ScreenItemData.COLUMN_RESOURCEID)));\n\t\t\t}\n\n\t\t\t// delete old graphs\n\t\t\tString str_graphids = graphids.toString().replace(\"[\", \"\").replace(\"]\", \"\");\n\t\t\tif (str_graphids.length()>0) {\n\t\t\t\tzabbixLocalDB.delete(GraphData.TABLE_NAME, GraphData.COLUMN_GRAPHID+\" IN (\"+str_graphids+\")\", null);\n\t\t\t\tzabbixLocalDB.delete(GraphItemData.TABLE_NAME, GraphItemData.COLUMN_GRAPHID+\" IN (\"+str_graphids+\")\", null);\n\t\t\t}\n\t\t\tzabbixLocalDB.delete(CacheData.TABLE_NAME, CacheData.COLUMN_KIND+\"='\"+GraphData.TABLE_NAME+\"' AND \"+CacheData.COLUMN_FILTER+\"='screenid=\"+screenid+'\\'', null);\n\n\t\t\tJsonArrayOrObjectReader graphs = _queryStream(\n\t\t\t\t\t\"graph.get\"\n\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t\t.put(isVersion2?\"selectGraphItems\":\"select_graph_items\", \"extend\")\n\t\t\t\t\t\t.put(isVersion2?\"selectItems\":\"select_items\", \"extend\")\n\t\t\t\t\t\t.put(\"output\", \"extend\")\n\t\t\t\t\t\t.put(\"graphids\", new JSONArray(graphids))\n\t\t\t);\n\t\t\tJsonObjectReader graphReader;\n\t\t\twhile ((graphReader = graphs.next()) != null) {\n\t\t\t\tboolean mustSetGraphid = false;\n\t\t\t\tGraphData scr = new GraphData();\n\t\t\t\twhile (graphReader.nextValueToken()) {\n\t\t\t\t\tString propName = graphReader.getCurrentName();\n\t\t\t\t\tif (propName.equals(GraphData.COLUMN_GRAPHID)) {\n\t\t\t\t\t\tscr.set(GraphData.COLUMN_GRAPHID, Long.parseLong(graphReader.getText()));\n\t\t\t\t\t} else if (propName.equals(GraphData.COLUMN_NAME)) {\n\t\t\t\t\t\tscr.set(GraphData.COLUMN_NAME, graphReader.getText());\n\t\t\t\t\t} else if (propName.equals(\"gitems\")) {\n\t\t\t\t\t\tmustSetGraphid = importGraphItems(graphReader.getJsonArray());\n\t\t\t\t\t} else if (propName.equals(\"items\")) {\n\t\t\t\t\t\timportItems(graphReader.getJsonArray(), 0, true);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tgraphReader.nextProperty();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tscr.insert(zabbixLocalDB);\n\t\t\t\tif (mustSetGraphid) {\n\t\t\t\t\tContentValues values = new ContentValues(1);\n\t\t\t\t\tvalues.put(GraphItemData.COLUMN_GRAPHID, (Long) scr.get(GraphData.COLUMN_GRAPHID));\n\t\t\t\t\tzabbixLocalDB.update(\n\t\t\t\t\t\t\tGraphItemData.TABLE_NAME\n\t\t\t\t\t\t\t, values\n\t\t\t\t\t\t\t, GraphItemData.COLUMN_GRAPHID+\"=-1\"\n\t\t\t\t\t\t\t, null);\n\t\t\t\t}\n\t\t\t}\n\t\t\tgraphs.close();\n\n\t\t\tsetCached(GraphData.TABLE_NAME, \"screenid=\"+screenid, ZabbixConfig.CACHE_LIFETIME_SCREENS);\n\t\t\t_endTransaction();\n\t\t}\n\t}\n\n\tpublic void importHistoryDetails(String itemid) throws ClientProtocolException, IOException, JSONException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\tif (!isCached(HistoryDetailData.TABLE_NAME, itemid)) {\n\t\t\t_startTransaction();\n\t\t\tzabbixLocalDB.delete(HistoryDetailData.TABLE_NAME, HistoryDetailData.COLUMN_ITEMID+\"=\"+itemid, null);\n\n\t\t\t// the past 2 hours\n\t\t\tlong time_till = new Date().getTime() / 1000;\n\t\t\tlong time_from = time_till - ZabbixConfig.HISTORY_GET_TIME_FROM_SHIFT; // jetzt-2h\n\n\t\t\t// Workaround: historydetails only comes if you use the correct \"history\"-parameter.\n\t\t\t// this parameter can be \"null\" or a number 0-4. Because we don't know when to use which,\n\t\t\t// we try them all, until we get results.\n\t\t\tInteger historytype = null;\n\t\t\tJSONObject result = _queryBuffer(\n\t\t\t\t\t\"history.get\"\n\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t\t.put(\"limit\", 1)\n\t\t\t\t\t\t.put(\"history\", historytype) // for integer ?\n\t\t\t\t\t\t.put(\"itemids\", new JSONArray().put(itemid))\n\t\t\t\t\t\t.put(\"time_from\", time_from)\n\t\t\t);\n\n\t\t\tJSONArray testHistorydetails = result.getJSONArray(\"result\");\n\t\t\tif (testHistorydetails.length() == 0) {\n\t\t\t\thistorytype = -1;\n\t\t\t\twhile (testHistorydetails.length() == 0 && ++historytype <= 4) {\n\t\t\t\t\t// if we get an empty array, we try another history parameter\n\t\t\t\t\tresult = _queryBuffer(\n\t\t\t\t\t\t\t\"history.get\"\n\t\t\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t\t\t\t.put(\"output\", \"extend\")\n\t\t\t\t\t\t\t\t.put(\"limit\", 1)\n\t\t\t\t\t\t\t\t.put(\"history\", historytype)\n\t\t\t\t\t\t\t\t.put(\"itemids\", new JSONArray().put(itemid))\n\t\t\t\t\t\t\t\t.put(\"time_from\", time_from)\n\t\t\t\t\t);\n\t\t\t\t\ttestHistorydetails = result.getJSONArray(\"result\");\n\t\t\t\t}\n\t\t\t}\n\t\t\t// correct historytype found and there are data\n\t\t\tif (testHistorydetails.length() > 0) {\n\t\t\t\t// count of the entries cannot be detected (zabbix bug),\n\t\t\t\t// so we use a fiction\n\t\t\t\tint numDetails = 400;\n\t\t\t\tint curI=0;\n\t\t\t\tJsonArrayOrObjectReader historydetails = _queryStream(\n\t\t\t\t\t\t\"history.get\"\n\t\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t\t\t.put(\"output\", \"extend\")\n\t\t\t\t\t\t\t.put(\"limit\", ZabbixConfig.HISTORY_GET_LIMIT)\n\t\t\t\t\t\t\t.put(\"history\", historytype)\n\t\t\t\t\t\t\t.put(\"itemids\", new JSONArray().put(itemid))\n\t\t\t\t\t\t\t.put(\"time_from\", time_from)\n\t\t\t\t\t\t\t.put(\"sortfield\", \"clock\")\n\t\t\t\t\t\t\t.put(\"sortorder\", \"DESC\")\n\t\t\t\t);\n\t\t\t\tJsonObjectReader historydetail;\n\t\t\t\ttry {\n\t\t\t\t\tint selI = 0;\n\t\t\t\t\twhile ((historydetail = historydetails.next()) != null) {\n\t\t\t\t\t\t// save only every 20th\n\t\t\t\t\t\tif (selI++ % 20 != 0) {\n\t\t\t\t\t\t\twhile (historydetail.nextValueToken()) {\n\t\t\t\t\t\t\t\thistorydetail.nextProperty();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tHistoryDetailData h = new HistoryDetailData();\n\t\t\t\t\t\twhile (historydetail.nextValueToken()) {\n\t\t\t\t\t\t\tString propName = historydetail.getCurrentName();\n\t\t\t\t\t\t\tif (propName.equals(HistoryDetailData.COLUMN_CLOCK)) {\n\t\t\t\t\t\t\t\th.set(HistoryDetailData.COLUMN_CLOCK, Integer.parseInt(historydetail.getText()));\n\t\t\t\t\t\t\t} else if (propName.equals(HistoryDetailData.COLUMN_ITEMID)) {\n\t\t\t\t\t\t\t\th.set(HistoryDetailData.COLUMN_ITEMID, Long.parseLong(historydetail.getText()));\n\t\t\t\t\t\t\t} else if (propName.equals(HistoryDetailData.COLUMN_VALUE)) {\n\t\t\t\t\t\t\t\th.set(HistoryDetailData.COLUMN_VALUE, Double.parseDouble(historydetail.getText()));\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\thistorydetail.nextProperty();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\th.insert(zabbixLocalDB);\n\t\t\t\t\t\tif (++curI % 10 == 0) {\n\t\t\t\t\t\t\tshowProgress(Math.min(curI*100/numDetails, 84));\n\t\t\t\t\t\t}\n\t\t\t\t\t\t_commitTransactionIfRecommended();\n\t\t\t\t\t}\n\t\t\t\t} catch (NumberFormatException e) {\n\t\t\t\t\t// data are unuseable, e.g. because it's a string\n\t\t\t\t}\n\t\t\t\thistorydetails.close();\n\t\t\t}\n\t\t\tsetCached(HistoryDetailData.TABLE_NAME, itemid, ZabbixConfig.CACHE_LIFETIME_HISTORY_DETAILS);\n\t\t\t_endTransaction();\n\t\t}\n\t}\n\n\tprivate long importHostGroups(JsonArrayOrObjectReader jsonArray) throws JsonParseException, IOException {\n\t\tlong firstHostGroupId = -1;\n\t\tJsonObjectReader hostReader;\n\t\twhile ((hostReader = jsonArray.next()) != null) {\n\t\t\tHostGroupData h = new HostGroupData();\n\t\t\twhile (hostReader.nextValueToken()) {\n\t\t\t\tString propName = hostReader.getCurrentName();\n\t\t\t\tif (propName.equals(HostGroupData.COLUMN_GROUPID)) {\n\t\t\t\t\tlong id = Long.parseLong(hostReader.getText());\n\t\t\t\t\tif (firstHostGroupId == -1) firstHostGroupId = id;\n\t\t\t\t\th.set(HostGroupData.COLUMN_GROUPID, id);\n\t\t\t\t} else if (propName.equals(HostGroupData.COLUMN_NAME)) {\n\t\t\t\t\th.set(HostGroupData.COLUMN_NAME, hostReader.getText());\n\t\t\t\t} else {\n\t\t\t\t\thostReader.nextProperty();\n\t\t\t\t}\n\t\t\t}\n\t\t\th.insert(zabbixLocalDB, HostGroupData.COLUMN_GROUPID);\n\t\t\t_commitTransactionIfRecommended();\n\t\t}\n\n\t\treturn firstHostGroupId;\n\t}\n\n\t/**\n\t * import the hosts from stream\n\t * @param jsonArray stream\n\t * @param numHosts count of hosts for progressbar. null if unknown.\n\t * @return Object[] {(String) comma-separated all Hostnames, (Long) 1. host id}\n\t * @throws JsonParseException\n\t * @throws IOException\n\t */\n\tprivate Object[] importHosts(JsonArrayOrObjectReader jsonArray, Integer numHosts) throws JsonParseException, IOException {\n\t\tList<String> hostnames = new ArrayList<String>();\n\t\tlong firstHostId = -1;\n\t\tJsonObjectReader hostReader;\n\t\tint i=0;\n\t\twhile ((hostReader = jsonArray.next()) != null) {\n\t\t\tHostData h = new HostData();\n\t\t\twhile (hostReader.nextValueToken()) {\n\t\t\t\tString propName = hostReader.getCurrentName();\n\t\t\t\tif (propName.equals(HostData.COLUMN_HOSTID)) {\n\t\t\t\t\th.set(HostData.COLUMN_HOSTID, Long.parseLong(hostReader.getText()));\n\t\t\t\t\tif (firstHostId == -1) {\n\t\t\t\t\t\tfirstHostId = (Long) h.get(HostData.COLUMN_HOSTID);\n\t\t\t\t\t}\n\t\t\t\t} else if (propName.equals(HostData.COLUMN_HOST)) {\n\t\t\t\t\tString host = hostReader.getText();\n\t\t\t\t\thostnames.add(host);\n\t\t\t\t\th.set(HostData.COLUMN_HOST, host);\n\t\t\t\t} else if (propName.equals(\"groups\")) {\n\t\t\t\t\tlong groupid = importHostGroups(hostReader.getJsonArray());\n\t\t\t\t\tif (groupid != -1) {\n\t\t\t\t\t\th.set(HostData.COLUMN_GROUPID, groupid);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\thostReader.nextProperty();\n\t\t\t\t}\n\t\t\t}\n\t\t\t// host without group will get group #0 (other)\n\t\t\tif (h.get(HostData.COLUMN_GROUPID) == null) {\n\t\t\t\th.set(HostData.COLUMN_GROUPID, 0);\n\t\t\t\t// create \"other\" hostgroup #1\n\t\t\t\tHostGroupData hg = new HostGroupData();\n\t\t\t\thg.set(HostGroupData.COLUMN_GROUPID, 0);\n\t\t\t\thg.set(HostGroupData.COLUMN_NAME, \"- \"+context.getResources().getString(R.string.other)+\" -\");\n\t\t\t\thg.insert(zabbixLocalDB, HostGroupData.COLUMN_GROUPID);\n\t\t\t}\n\t\t\th.insert(zabbixLocalDB, HostData.COLUMN_HOSTID);\n\t\t\tif (numHosts != null && ++i % 10 == 0) {\n\t\t\t\tshowProgress(i*100/numHosts);\n\t\t\t}\n\t\t\t_commitTransactionIfRecommended();\n\t\t}\n\n\t\treturn new Object[] {hostnames.toString().replaceAll(\"[\\\\[\\\\]]\", \"\"), firstHostId};\n\t}\n\n\tpublic void importHostsAndGroups() throws JSONException, IOException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\tif (!isCached(HostData.TABLE_NAME, null)) {\n\t\t\t_startTransaction();\n\t\t\tzabbixLocalDB.delete(HostData.TABLE_NAME, null, null);\n\t\t\tzabbixLocalDB.delete(HostGroupData.TABLE_NAME, null, null);\n\n\t\t\t// get count of hosts\n\t\t\tJSONObject result = _queryBuffer(\n\t\t\t\t\t\"host.get\"\n\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t\t.put(\"countOutput\", 1)\n\t\t\t\t\t\t.put(\"limit\", ZabbixConfig.HOST_GET_LIMIT)\n\t\t\t\t\t\t.put(isVersion2?\"selectGroups\":\"select_groups\", \"extend\")\n\t\t\t);\n\t\t\tint numHosts = result.getInt(\"result\");\n\t\t\tJsonArrayOrObjectReader hosts = _queryStream(\n\t\t\t\t\t\"host.get\"\n\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t\t.put(\"output\", \"extend\")\n\t\t\t\t\t\t.put(\"limit\", ZabbixConfig.HOST_GET_LIMIT)\n\t\t\t\t\t\t.put(isVersion2?\"selectGroups\":\"select_groups\", \"extend\")\n\t\t\t);\n\t\t\timportHosts(hosts, numHosts);\n\t\t\thosts.close();\n\n\t\t\tsetCached(HostData.TABLE_NAME, null, ZabbixConfig.CACHE_LIFETIME_HOSTS);\n\t\t\t_endTransaction();\n\t\t}\n\t}\n\n\t/**\n\t * import items from stream.\n\t * @param items stream\n\t * @param numItems count for progressbar, if 0 no progressbarupdate\n\t * @param checkBeforeInsert if true, only make an insert if item does not exist\n\t * @return the first item id\n\t * @throws JsonParseException\n\t * @throws IOException\n\t */\n\tprivate long importItems(JsonArrayOrObjectReader items, int numItems, boolean checkBeforeInsert) throws JsonParseException, IOException {\n\t\tlong firstItemId = -1;\n\t\tint curI=0;\n\t\tJsonObjectReader itemReader;\n\t\twhile ((itemReader = items.next()) != null) {\n\t\t\tItemData i = new ItemData();\n\t\t\tString key_ = null;\n\t\t\twhile (itemReader.nextValueToken()) {\n\t\t\t\tString propName = itemReader.getCurrentName();\n\t\t\t\tif (propName.equals(ItemData.COLUMN_ITEMID)) {\n\t\t\t\t\ti.set(ItemData.COLUMN_ITEMID, Long.parseLong(itemReader.getText()));\n\t\t\t\t\tif (firstItemId == -1) {\n\t\t\t\t\t\tfirstItemId = (Long) i.get(ItemData.COLUMN_ITEMID);\n\t\t\t\t\t}\n\t\t\t\t} else if (propName.equals(ItemData.COLUMN_HOSTID)) {\n\t\t\t\t\ti.set(ItemData.COLUMN_HOSTID, Long.parseLong(itemReader.getText()));\n\t\t\t\t} else if (propName.equals(ItemData.COLUMN_DESCRIPTION) || propName.equals(\"name\")) {\n\t\t\t\t\t// since zabbix 2.x is the name of the item \"name\"\n\t\t\t\t\t// before zabbix 2.x the name field was \"description\"\n\t\t\t\t\tif (isVersion2 && propName.equals(\"name\")) {\n\t\t\t\t\t\ti.set(ItemData.COLUMN_DESCRIPTION, itemReader.getText());\n\t\t\t\t\t} else if (!isVersion2) {\n\t\t\t\t\t\ti.set(ItemData.COLUMN_DESCRIPTION, itemReader.getText());\n\t\t\t\t\t}\n\t\t\t\t} else if (propName.equals(ItemData.COLUMN_LASTCLOCK)) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\ti.set(ItemData.COLUMN_LASTCLOCK, Integer.parseInt(itemReader.getText()));\n\t\t\t\t\t} catch (NumberFormatException e) {\n\t\t\t\t\t\t// ignore\n\t\t\t\t\t}\n\t\t\t\t} else if (propName.equals(ItemData.COLUMN_LASTVALUE)) {\n\t\t\t\t\ti.set(ItemData.COLUMN_LASTVALUE, itemReader.getText());\n\t\t\t\t} else if (propName.equals(ItemData.COLUMN_UNITS)) {\n\t\t\t\t\ti.set(ItemData.COLUMN_UNITS, itemReader.getText());\n\t\t\t\t} else if (propName.equals(\"key_\")) {\n\t\t\t\t\tkey_ = itemReader.getText();\n\t\t\t\t} else if (propName.equals(\"applications\")) {\n\t\t\t\t\t// at this point itemid and hostid is unknown\n\t\t\t\t\t// because of this, all applicationrelations will be saved with itemid and hostid \"-1\".\n\t\t\t\t\t// later the IDs will be replaced with the correct\n\t\t\t\t\timportApplications(-1, -1, itemReader.getJsonArray());\n\t\t\t\t} else {\n\t\t\t\t\titemReader.nextProperty();\n\t\t\t\t}\n\t\t\t}\n\t\t\t// if applicable replace placeholder\n\t\t\tString description = (String) i.get(ItemData.COLUMN_DESCRIPTION);\n\t\t\tif (description.matches(\".*\\\\$[0-9].*\")) {\n\t\t\t\tif (key_ != null && key_.indexOf('[') != -1) {\n\t\t\t\t\tString[] keys = key_.substring(key_.indexOf('[')+1, key_.indexOf(']')).split(\",\");\n\t\t\t\t\tfor (int ix=0; ix<keys.length; ix++) {\n\t\t\t\t\t\tdescription = description.replace(\"$\"+(ix+1), keys[ix]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\ti.set(ItemData.COLUMN_DESCRIPTION, description);\n\t\t\tif (checkBeforeInsert) {\n\t\t\t\ti.insert(zabbixLocalDB, ItemData.COLUMN_ITEMID);\n\t\t\t} else {\n\t\t\t\ti.insert(zabbixLocalDB);\n\t\t\t}\n\t\t\tif (numItems > 0 && ++curI % 10 == 0) {\n\t\t\t\tshowProgress(curI*100/numItems);\n\t\t\t}\n\n\t\t\t// now the \"-1\" IDs of applicationsrelation will be replaced with the correct itemID\n\t\t\tContentValues values = new ContentValues(2);\n\t\t\tvalues.put(ApplicationItemRelationData.COLUMN_ITEMID, (Long) i.get(ItemData.COLUMN_ITEMID));\n\t\t\tvalues.put(ApplicationItemRelationData.COLUMN_HOSTID, (Long) i.get(ItemData.COLUMN_HOSTID));\n\t\t\tzabbixLocalDB.update(\n\t\t\t\t\tApplicationItemRelationData.TABLE_NAME\n\t\t\t\t\t, values\n\t\t\t\t\t, ApplicationItemRelationData.COLUMN_ITEMID+\"=-1\"\n\t\t\t\t\t, null\n\t\t\t);\n\t\t}\n\t\treturn firstItemId;\n\t}\n\n\tpublic void importItems(long hostid) throws JSONException, IOException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\tif (!isCached(ItemData.TABLE_NAME, \"hostid=\"+hostid)) {\n\t\t\t_startTransaction();\n\t\t\tzabbixLocalDB.delete(ItemData.TABLE_NAME, ItemData.COLUMN_HOSTID+\"=\"+hostid, null);\n\t\t\tzabbixLocalDB.delete(ApplicationItemRelationData.TABLE_NAME, ApplicationItemRelationData.COLUMN_HOSTID+\"=\"+hostid, null);\n\n\t\t\t// count of items\n\t\t\tJSONObject result = _queryBuffer(\n\t\t\t\t\t\"item.get\"\n\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t.put(\"output\", \"extend\")\n\t\t\t\t\t.put(\"countOutput\", 1)\n\t\t\t\t\t.put(\"limit\", ZabbixConfig.ITEM_GET_LIMIT)\n\t\t\t\t\t.put(\"hostids\", new JSONArray().put(hostid))\n\t\t\t);\n\t\t\tint numItems = result.getInt(\"result\");\n\t\t\tJsonArrayOrObjectReader items = _queryStream(\n\t\t\t\t\t\"item.get\"\n\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t\t.put(\"output\", \"extend\")\n\t\t\t\t\t\t.put(\"limit\", ZabbixConfig.ITEM_GET_LIMIT)\n\t\t\t\t\t\t.put(isVersion2?\"selectApplications\":\"select_applications\", \"extend\")\n\t\t\t\t\t\t.put(\"hostids\", new JSONArray().put(hostid))\n\t\t\t);\n\t\t\timportItems(items, numItems, false);\n\t\t\titems.close();\n\n\t\t\tsetCached(ItemData.TABLE_NAME, \"hostid=\"+hostid, ZabbixConfig.CACHE_LIFETIME_ITEMS);\n\t\t\t_endTransaction();\n\t\t}\n\t}\n\n\tprivate void importScreenItems(JsonArrayOrObjectReader screenItems) throws JsonParseException, NumberFormatException, IOException {\n\t\tJsonObjectReader screenItemReader;\n\t\twhile ((screenItemReader = screenItems.next()) != null) {\n\t\t\tScreenItemData si = new ScreenItemData();\n\t\t\tint resourcetype = -1;\n\t\t\twhile (screenItemReader.nextValueToken()) {\n\t\t\t\tString propName = screenItemReader.getCurrentName();\n\t\t\t\tif (propName.equals(ScreenItemData.COLUMN_SCREENITEMID)) {\n\t\t\t\t\tsi.set(ScreenItemData.COLUMN_SCREENITEMID, Long.parseLong(screenItemReader.getText()));\n\t\t\t\t} else if (propName.equals(ScreenItemData.COLUMN_SCREENID)) {\n\t\t\t\t\tsi.set(ScreenItemData.COLUMN_SCREENID, Long.parseLong(screenItemReader.getText()));\n\t\t\t\t} else if (propName.equals(ScreenItemData.COLUMN_RESOURCEID)) {\n\t\t\t\t\tsi.set(ScreenItemData.COLUMN_RESOURCEID, Long.parseLong(screenItemReader.getText()));\n\t\t\t\t} else if (propName.equals(\"resourcetype\")) {\n\t\t\t\t\tresourcetype = Integer.parseInt(screenItemReader.getText());\n\t\t\t\t} else {\n\t\t\t\t\tscreenItemReader.nextProperty();\n\t\t\t\t}\n\t\t\t}\n\t\t\t// only resouretype == 0\n\t\t\tif (resourcetype == 0) {\n\t\t\t\tsi.insert(zabbixLocalDB);\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic void importScreens() throws ClientProtocolException, IOException, JSONException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\tif (!isCached(ScreenData.TABLE_NAME, null)) {\n\t\t\t_startTransaction();\n\n\t\t\tzabbixLocalDB.delete(ScreenData.TABLE_NAME, null, null);\n\t\t\tzabbixLocalDB.delete(ScreenItemData.TABLE_NAME, null, null);\n\t\t\tzabbixLocalDB.delete(CacheData.TABLE_NAME, CacheData.COLUMN_KIND+\"='\"+ScreenData.TABLE_NAME+\"'\", null);\n\n\t\t\tJsonArrayOrObjectReader screens = _queryStream(\n\t\t\t\t\t(isVersion2?\"s\":\"S\")+\"creen.get\"\n\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t\t.put(\"output\", \"extend\")\n\t\t\t\t\t\t.put(isVersion2?\"selectScreenItems\":\"select_screenitems\", \"extend\")\n\t\t\t);\n\t\t\tJsonObjectReader screenReader;\n\t\t\twhile ((screenReader = screens.next()) != null) {\n\t\t\t\tScreenData scr = new ScreenData();\n\t\t\t\twhile (screenReader.nextValueToken()) {\n\t\t\t\t\tString propName = screenReader.getCurrentName();\n\t\t\t\t\tif (propName.equals(ScreenData.COLUMN_SCREENID)) {\n\t\t\t\t\t\tscr.set(ScreenData.COLUMN_SCREENID, Long.parseLong(screenReader.getText()));\n\t\t\t\t\t} else if (propName.equals(ScreenData.COLUMN_NAME)) {\n\t\t\t\t\t\tscr.set(ScreenData.COLUMN_NAME, screenReader.getText());\n\t\t\t\t\t} else if (propName.equals(\"screenitems\")) {\n\t\t\t\t\t\timportScreenItems(screenReader.getJsonArray());\n\t\t\t\t\t} else {\n\t\t\t\t\t\tscreenReader.nextProperty();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tscr.insert(zabbixLocalDB);\n\t\t\t}\n\t\t\tscreens.close();\n\n\t\t\tsetCached(ScreenData.TABLE_NAME, null, ZabbixConfig.CACHE_LIFETIME_SCREENS);\n\t\t\t_endTransaction();\n\t\t}\n\t}\n\n\tpublic void importTrigger(String triggerid) throws JSONException, IOException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\tif (!isCached(TriggerData.TABLE_NAME, \"triggerid=\"+triggerid)) {\n\t\t\t_startTransaction();\n\n\t\t\tJsonArrayOrObjectReader trigger = _queryStream(\n\t\t\t\t\t\"trigger.get\"\n\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t\t.put(\"output\", \"extend\")\n\t\t\t\t\t\t.put(isVersion2?\"selectHosts\":\"select_hosts\", \"extend\")\n\t\t\t\t\t\t.put(\"triggerids\", new JSONArray().put(triggerid))\n\t\t\t);\n\t\t\timportTriggers(trigger);\n\t\t\ttrigger.close();\n\n\t\t\tsetCached(TriggerData.TABLE_NAME, \"triggerid=\"+triggerid, ZabbixConfig.CACHE_LIFETIME_TRIGGERS);\n\t\t\t_endTransaction();\n\t\t}\n\t}\n\n\t/**\n\t * importiert ein trigger mit dem attribute itemid. ggf. wird der trigger zuerst gelöscht und neu angelegt.\n\t * imports a trigger with the attribute itemid. if trigger already exists, it will be removed first.\n\t * @param triggerid\n\t * @throws JSONException\n\t * @throws IOException\n\t * @throws HttpAuthorizationRequiredException\n\t * @throws NoAPIAccessException\n\t */\n\tpublic void importTriggerColumnItemId(String triggerid) throws JSONException, IOException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\t// check if the trigger exists and if the itemid was set\n\t\tboolean mustImport = true;\n\t\tCursor cur = zabbixLocalDB.query(TriggerData.TABLE_NAME, null, TriggerData.COLUMN_TRIGGERID+\"=\"+triggerid, null, null, null, null);\n\t\tif (cur.moveToFirst()) {\n\t\t\tlong itemid = 0;\n\t\t\ttry {\n\t\t\t\titemid = cur.getLong(cur.getColumnIndex(TriggerData.COLUMN_ITEMID));\n\t\t\t} catch (Exception e) {\n\t\t\t\t// no itemid\n\t\t\t}\n\t\t\tif (itemid > 0) {\n\t\t\t\tmustImport = false;\n\t\t\t}\n\t\t}\n\t\tif (mustImport) {\n\t\t\t_startTransaction();\n\t\t\tzabbixLocalDB.delete(TriggerData.TABLE_NAME, TriggerData.COLUMN_TRIGGERID+\"=\"+triggerid, null);\n\t\t\tJsonArrayOrObjectReader triggers = _queryStream(\n\t\t\t\t\t\"trigger.get\"\n\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t\t.put(\"output\", \"extend\")\n\t\t\t\t\t\t.put(isVersion2?\"selectHosts\":\"select_hosts\", \"extend\")\n\t\t\t\t\t\t.put(isVersion2?\"selectGroups\":\"select_groups\", \"extend\")\n\t\t\t\t\t\t.put(isVersion2?\"selectItems\":\"select_items\", \"extend\")\n\t\t\t\t\t\t.put(\"triggerids\", new JSONArray().put(triggerid))\n\t\t\t\t\t\t.put(\"limit\", 1)\n\t\t\t);\n\t\t\timportTriggers(triggers);\n\t\t\t_endTransaction();\n\t\t}\n\t}\n\n\t/**\n\t * imports the \"warning\"-triggers\n\t * @throws JSONException\n\t * @throws IOException\n\t * @throws HttpAuthorizationRequiredException\n\t * @throws NoAPIAccessException\n\t */\n\tpublic void importTriggers() throws JSONException, IOException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\tif (!isCached(TriggerData.TABLE_NAME, null)) {\n\t\t\t// clear triggers\n\t\t\tzabbixLocalDB.delete(TriggerData.TABLE_NAME, null, null);\n\n\t\t\t_startTransaction();\n\n\t\t\tlong min = (new Date().getTime()/1000)-ZabbixConfig.STATUS_SHOW_TRIGGER_TIME;\n\t\t\tJsonArrayOrObjectReader triggers = _queryStream(\n\t\t\t\t\t\"trigger.get\"\n\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t\t.put(\"output\", \"extend\")\n\t\t\t\t\t\t.put(\"sortfield\", \"lastchange\")\n\t\t\t\t\t\t.put(\"sortorder\", \"desc\")\n\t\t\t\t\t\t.put(isVersion2?\"selectHosts\":\"select_hosts\", \"extend\")\n\t\t\t\t\t\t.put(isVersion2?\"selectGroups\":\"select_groups\", \"extend\")\n\t\t\t\t\t\t.put(isVersion2?\"selectItems\":\"select_items\", \"extend\")\n\t\t\t\t\t\t.put(\"lastChangeSince\", min)\n\t\t\t\t\t\t.put(\"only_true\", \"1\")\n\t\t\t\t\t\t.put(\"limit\", ZabbixConfig.TRIGGER_GET_LIMIT)\n\t\t\t\t\t\t.put(\"expandDescription\", true)\n\t\t\t);\n\t\t\timportTriggers(triggers);\n\t\t\ttriggers.close();\n\n\t\t\tsetCached(TriggerData.TABLE_NAME, null, ZabbixConfig.CACHE_LIFETIME_TRIGGERS);\n\t\t\t_endTransaction();\n\t\t}\n\t}\n\n\tprivate void importTriggers(JsonArrayOrObjectReader jsonArray) throws JsonParseException, IOException {\n\t\tJsonObjectReader triggerReader;\n\t\twhile ((triggerReader = jsonArray.next()) != null) {\n\t\t\tTriggerData t = new TriggerData();\n\t\t\twhile (triggerReader.nextValueToken()) {\n\t\t\t\tString propName = triggerReader.getCurrentName();\n\t\t\t\tif (propName.equals(TriggerData.COLUMN_TRIGGERID)) {\n\t\t\t\t\tt.set(TriggerData.COLUMN_TRIGGERID, Long.parseLong(triggerReader.getText()));\n\t\t\t\t} else if (propName.equals(TriggerData.COLUMN_COMMENTS)) {\n\t\t\t\t\tt.set(TriggerData.COLUMN_COMMENTS, triggerReader.getText());\n\t\t\t\t} else if (propName.equals(TriggerData.COLUMN_DESCRIPTION)) {\n\t\t\t\t\tt.set(TriggerData.COLUMN_DESCRIPTION, triggerReader.getText());\n\t\t\t\t} else if (propName.equals(TriggerData.COLUMN_EXPRESSION)) {\n\t\t\t\t\tt.set(TriggerData.COLUMN_EXPRESSION, triggerReader.getText());\n\t\t\t\t} else if (propName.equals(TriggerData.COLUMN_LASTCHANGE)) {\n\t\t\t\t\tt.set(TriggerData.COLUMN_LASTCHANGE, Integer.parseInt(triggerReader.getText()));\n\t\t\t\t} else if (propName.equals(TriggerData.COLUMN_PRIORITY)) {\n\t\t\t\t\tt.set(TriggerData.COLUMN_PRIORITY, Integer.parseInt(triggerReader.getText()));\n\t\t\t\t} else if (propName.equals(TriggerData.COLUMN_STATUS)) {\n\t\t\t\t\tt.set(TriggerData.COLUMN_STATUS, Integer.parseInt(triggerReader.getText()));\n\t\t\t\t} else if (propName.equals(TriggerData.COLUMN_VALUE)) {\n\t\t\t\t\tt.set(TriggerData.COLUMN_VALUE, Integer.parseInt(triggerReader.getText()));\n\t\t\t\t} else if (propName.equals(TriggerData.COLUMN_URL)) {\n\t\t\t\t\tt.set(TriggerData.COLUMN_URL, triggerReader.getText());\n\t\t\t\t} else if (propName.equals(\"hosts\")) {\n\t\t\t\t\tObject[] hostsCache = importHosts(triggerReader.getJsonArray(), null);\n\t\t\t\t\tt.set(TriggerData.COLUMN_HOSTS, hostsCache[0]);\n\t\t\t\t\tt.set(TriggerData.COLUMN_HOSTID, hostsCache[1]);\n\t\t\t\t} else if (propName.equals(\"groups\")) {\n\t\t\t\t\timportHostGroups(triggerReader.getJsonArray());\n\t\t\t\t} else if (propName.equals(\"items\")) {\n\t\t\t\t\t// store the first item id\n\t\t\t\t\tt.set(TriggerData.COLUMN_ITEMID, importItems(triggerReader.getJsonArray(), 1, true));\n\t\t\t\t} else {\n\t\t\t\t\ttriggerReader.nextProperty();\n\t\t\t\t}\n\t\t\t}\n\t\t\tt.insert(zabbixLocalDB, TriggerData.COLUMN_TRIGGERID);\n\t\t\t_commitTransactionIfRecommended();\n\t\t}\n\t}\n\n\tpublic void importTriggersByItemId(String itemid) throws JSONException, IOException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\tif (!isCached(TriggerData.TABLE_NAME, \"itemid=\"+itemid)) {\n\t\t\t_startTransaction();\n\t\t\tzabbixLocalDB.delete(TriggerData.TABLE_NAME, TriggerData.COLUMN_ITEMID+\"=\"+itemid, null);\n\t\t\tJsonArrayOrObjectReader triggers = _queryStream(\n\t\t\t\t\t\"trigger.get\"\n\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t\t.put(\"output\", \"extend\")\n\t\t\t\t\t\t.put(isVersion2?\"selectHosts\":\"select_hosts\", \"extend\")\n\t\t\t\t\t\t.put(isVersion2?\"selectGroups\":\"select_groups\", \"extend\")\n\t\t\t\t\t\t.put(isVersion2?\"selectItems\":\"select_items\", \"extend\")\n\t\t\t\t\t\t.put(\"itemids\", new JSONArray().put(itemid))\n\t\t\t\t\t\t.put(\"limit\", 1)\n\t\t\t\t\t\t.put(\"sortfield\", \"lastchange\")\n\t\t\t\t\t\t.put(\"sortorder\", \"DESC\")\n\t\t\t);\n\t\t\timportTriggers(triggers);\n\t\t\tsetCached(TriggerData.TABLE_NAME, \"itemid=\"+itemid, ZabbixConfig.CACHE_LIFETIME_TRIGGERS);\n\t\t\t_endTransaction();\n\t\t}\n\t}\n\n\tpublic boolean isCached(String kind, String filter) {\n\t\tSQLiteQueryBuilder sqlBuilder = new SQLiteQueryBuilder();\n\t\tsqlBuilder.setTables(CacheData.TABLE_NAME);\n\t\tsqlBuilder.appendWhere(CacheData.COLUMN_KIND+\"='\"+kind+\"' AND \");\n\t\tsqlBuilder.appendWhere(CacheData.COLUMN_FILTER+\n\t\t\t\t(filter==null?\" IS NULL\":\"='\"+filter+\"'\")\n\t\t);\n\t\tsqlBuilder.appendWhere(\" AND \"+CacheData.COLUMN_EXPIRE_DATE+\">\"+new Date().getTime()/1000);\n\t\tCursor cur = sqlBuilder.query(\n\t\t\tzabbixLocalDB,\n\t\t\tnull,\n\t\t\tnull,\n\t\t\tnull,\n\t\t\tnull,\n\t\t\tnull,\n\t\t\tnull\n\t\t);\n\t\tLog.i(\"ZabbixContentProvider\", \"isCached \"+kind+\"//\"+filter+\"//\"+cur.moveToFirst());\n\t\treturn cur.moveToFirst();\n\t}\n\n\t/**\n\t * public, for the unit test\n\t */\n\tpublic void setCached(String kind, String filter, int lifetime) {\n\t\tCacheData cache = new CacheData();\n\t\tcache.set(CacheData.COLUMN_EXPIRE_DATE, new Date().getTime()/1000 + lifetime);\n\t\tcache.set(CacheData.COLUMN_KIND, kind);\n\t\tif (filter != null) {\n\t\t\tcache.set(CacheData.COLUMN_FILTER, filter);\n\t\t}\n\t\tcache.insert(zabbixLocalDB);\n\t}\n\n\t/**\n\t * updates the progressbar in the gui\n\t * @param i 0..100\n\t */\n\tpublic void showProgress(int i) {\n\t\t// if applicable, transform the progress\n\t\tif (transformProgressStart != 0 && transformProgressEnd != 0) {\n\t\t\ti = (int) (transformProgressStart + (transformProgressEnd-transformProgressStart)*(double)i/100);\n\t\t}\n\n\t\tIntent intent = new Intent(ZabbixContentProvider.CONTENT_PROVIDER_INTENT_ACTION);\n\t\tintent.putExtra(\"flag\", ZabbixContentProvider.INTENT_FLAG_SHOW_PROGRESS);\n\t\tintent.putExtra(\"value\", i);\n\t\tcontext.sendBroadcast(intent);\n\t}\n\n\t/**\n\t * transforms the progress\n\t * @param start 0% => start%\n\t * @param end 100% => end%\n\t */\n\tpublic void transformProgress(int start, int end) {\n\t\ttransformProgressStart = start;\n\t\ttransformProgressEnd = end;\n\t}\n}\n"],
    "c_hash_sni": "976f9d4001cf9c49a39f3b93acb53607ea8c0bfd",
    "name_sni": "src/com/inovex/zabbixmobile/api/ZabbixService.java",
    "c_parents_ss": ["bae0223e3d008ee05a94f9b7db30eec6844110b6"],
    "c_imports_removed_t": ["<empty>"],
    "p_hash_sni": "bae0223e3d008ee05a94f9b7db30eec6844110b6",
    "c_imports_added_t": ["<empty>"],
    "p_methods_t": ["ApplicationData ApplicationItemRelationData ArrayList, String BasicHttpParams BufferedReader CacheData ContentValues CustomSSLSocketFactory Date DefaultHttpClient EventData GraphData GraphItemData HashSet, Long HistoryDetailData HostData HostGroupData HttpAuthorizationRequiredException HttpPost IOException IllegalStateException InputStreamReader Intent ItemData JSONArray JSONObject JsonArrayOrObjectReader JsonFactory NoAPIAccessException PreconditionFailedException RuntimeException SQLiteQueryBuilder Scheme SchemeRegistry ScreenData ScreenItemData StringBuilder StringEntity ThreadSafeClientConnManager TriggerData UsernamePasswordCredentials X509TrustManager _commitTransactionIfRecommended _endTransaction _queryBuffer _queryStream _startTransaction add addHeader append appendWhere authenticate beginTransaction close contains createJsonParser createSocket d delete endTransaction endsWith equals execute get getBoolean getColumnIndex getContent getCredentialsProvider getCurrentName getCurrentToken getDefaultSharedPreferences getDefaultType getEntity getInstance getInt getJSONArray getJSONObject getJsonArray getLong getMessage getParams getReasonPhrase getResources getSocketFactory getStatusCode getStatusLine getString getText getTime i importApplications importEvents importGraphItems importHostGroups importHosts importItems importScreenItems importTriggers inTransaction indexOf init insert isCached isClosed length load matches min moveToFirst moveToNext next nextProperty nextToken nextValue nextValueToken parseColor parseDouble parseInt parseLong printStackTrace put putExtra query read register replace replaceAll sendBroadcast set setCached setConnectionTimeout setContentCharset setCredentials setEntity setHostnameVerifier setRedirecting setTables setTransactionSuccessful setVersion showProgress split substring toString trim update"],
    "c_imports_removed_cs": "<empty>",
    "p_imports_t": ["android.database.sqlite.SQLiteQueryBuilder org.apache.http.conn.scheme.SchemeRegistry java.util.HashSet org.apache.http.params.BasicHttpParams android.content.Context org.apache.http.params.HttpParams org.apache.http.conn.scheme.PlainSocketFactory java.util.ArrayList com.inovex.zabbixmobile.model.ItemData com.inovex.zabbixmobile.model.HostData com.inovex.zabbixmobile.model.GraphData com.inovex.zabbixmobile.model.EventData org.apache.http.auth.UsernamePasswordCredentials org.apache.http.params.HttpConnectionParams android.content.SharedPreferences java.security.KeyManagementException org.apache.http.conn.ClientConnectionManager org.codehaus.jackson.JsonFactory org.apache.http.entity.StringEntity java.util.Set org.apache.http.params.HttpProtocolParams com.inovex.zabbixmobile.model.ApplicationItemRelationData com.inovex.zabbixmobile.model.TriggerData org.codehaus.jackson.JsonToken android.database.Cursor java.net.Socket android.content.Intent org.apache.http.protocol.HTTP org.json.JSONException java.net.UnknownHostException com.inovex.zabbixmobile.model.HistoryDetailData org.apache.http.HttpResponse java.security.KeyStore com.inovex.zabbixmobile.ZabbixContentProvider android.preference.PreferenceManager android.util.Log org.json.JSONObject java.security.NoSuchAlgorithmException org.apache.http.client.params.HttpClientParams java.io.IOException org.apache.http.conn.scheme.Scheme org.apache.http.client.methods.HttpPost javax.net.ssl.SSLContext org.apache.http.auth.AuthScope org.apache.http.conn.ssl.SSLSocketFactory java.security.KeyStoreException android.content.ContentValues java.io.InputStreamReader java.util.Date java.security.UnrecoverableKeyException android.graphics.Color org.apache.http.client.ClientProtocolException com.inovex.zabbixmobile.model.GraphItemData org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager org.json.JSONArray com.inovex.zabbixmobile.model.CacheData javax.net.ssl.SSLPeerUnverifiedException com.inovex.zabbixmobile.model.HostGroupData org.codehaus.jackson.JsonParseException java.security.cert.X509Certificate org.apache.http.HttpVersion android.database.sqlite.SQLiteDatabase java.util.List java.security.cert.CertificateException java.io.BufferedReader com.inovex.zabbixmobile.model.ApplicationData com.inovex.zabbixmobile.model.ScreenItemData javax.net.ssl.TrustManager com.inovex.zabbixmobile.model.ScreenData com.inovex.zabbixmobile.R org.codehaus.jackson.JsonParser org.apache.http.impl.client.DefaultHttpClient javax.net.ssl.X509TrustManager"],
    "p_subject_t": ["triggers are more stable"],
    "p_callsites_cs": "<unknown>.set(<unknown>, <unknown>)#org.apache.http.HttpEntity.getContent()#java.lang.String.equals(java.lang.String)#org.json.JSONArray.JSONArray()#<unknown>.set(<unknown>, java.lang.Object)#org.json.JSONObject.put(java.lang.String, java.lang.Integer)#org.json.JSONArray.put(java.lang.String)#org.json.JSONObject.JSONObject()#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.codehaus.jackson.JsonFactory.createJsonParser(java.io.InputStream)#java.lang.String.equals(<unknown>)#org.apache.http.StatusLine.getStatusCode()#<unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>)#org.json.JSONObject.put(java.lang.String, java.lang.String)#android.database.sqlite.SQLiteDatabase.inTransaction()#android.util.Log.d(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService._startTransaction()#java.lang.String.equals(java.lang.String)#org.codehaus.jackson.JsonFactory.JsonFactory()#com.inovex.zabbixmobile.api.ZabbixService._endTransaction()#org.json.JSONObject.put(java.lang.String, int)#android.content.ContentValues.ContentValues(int)#org.apache.http.conn.scheme.SchemeRegistry.SchemeRegistry()#<unknown>.insert(android.database.sqlite.SQLiteDatabase)#<unknown>.insert(android.database.sqlite.SQLiteDatabase)#com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject)#com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject)#com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject)#org.json.JSONObject.getJSONObject(java.lang.String)#java.io.InputStreamReader.InputStreamReader(java.io.InputStream)#android.content.Intent.putExtra(java.lang.String, <unknown>)#org.json.JSONArray.length()#java.lang.String.equals(java.lang.String)#<unknown>.set(<unknown>, <unknown>)#java.lang.String.equals(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService.PreconditionFailedException.PreconditionFailedException()#java.lang.StringBuilder.StringBuilder()#android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null)#<unknown>.nextValueToken()#org.json.JSONObject.JSONObject()#org.json.JSONObject.put(java.lang.String, int)#org.json.JSONObject.put(java.lang.String, org.json.JSONArray)#java.lang.String.equals(<unknown>)#<unknown>.get(<unknown>)#<unknown>.insert(android.database.sqlite.SQLiteDatabase)#android.content.Intent.putExtra(java.lang.String, <unknown>)#java.lang.String.equals(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService.importItems(<unknown>, int, boolean)#com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, java.lang.String, int)#android.util.Log.d(java.lang.String, java.lang.String)#org.json.JSONObject.put(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject)#org.apache.http.conn.scheme.Scheme.Scheme(java.lang.String, org.apache.http.conn.ssl.SSLSocketFactory, int)#org.apache.http.HttpEntity.getContent()#org.codehaus.jackson.JsonParser.close()#java.lang.String.equals(<unknown>)#<unknown>.nextValueToken()#<unknown>.getCurrentName()#org.json.JSONArray.JSONArray(java.util.Set<java.lang.Long>)#<unknown>.nextValueToken()#android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null)#<unknown>.getJsonArray()#com.inovex.zabbixmobile.api.ZabbixService._startTransaction()#org.json.JSONArray.JSONArray()#<unknown>.nextProperty()#java.lang.String.equals(java.lang.String)#android.database.sqlite.SQLiteDatabase.update(<unknown>, android.content.ContentValues, <unknown>, null)#java.util.Set<java.lang.Long>.add(<unknown>)#<unknown>.get(<unknown>)#<unknown>.get(<unknown>)#android.content.ContentValues.put(<unknown>, java.lang.Long)#java.lang.String.equals(java.lang.String)#org.apache.http.StatusLine.getReasonPhrase()#java.lang.RuntimeException.RuntimeException(java.lang.String)#<unknown>.nextProperty()#java.lang.Throwable.printStackTrace()#java.lang.String.equals(<unknown>)#java.lang.Long.parseLong(<unknown>)#org.json.JSONObject.put(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject)#<unknown>.getCurrentName()#android.content.ContentValues.put(<unknown>, java.lang.Long)#org.apache.http.entity.StringEntity.StringEntity(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject)#java.lang.String.equals(<unknown>)#<unknown>.EventData()#<unknown>.next()#<unknown>.set(<unknown>, <unknown>)#com.inovex.zabbixmobile.api.ZabbixService.CustomSSLSocketFactory.CustomSSLSocketFactory(java.security.KeyStore)#com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject)#<unknown>.getCurrentName()#java.util.List<java.lang.String>.add(java.lang.String)#org.json.JSONObject.put(java.lang.String, int)#<unknown>.getText()#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.apache.http.conn.ssl.SSLSocketFactory.setHostnameVerifier(org.apache.http.conn.ssl.X509HostnameVerifier)#<unknown>.set(<unknown>, <unknown>)#<unknown>.getText()#org.json.JSONObject.put(java.lang.String, long)#java.util.Date.Date()#android.util.Log.i(java.lang.String, java.lang.String)#org.json.JSONObject.put(java.lang.String, int)#org.json.JSONObject.put(java.lang.String, int)#<unknown>.set(<unknown>, <unknown>)#com.inovex.zabbixmobile.api.ZabbixService.authenticate()#android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null)#android.util.Log.d(java.lang.String, java.lang.String)#java.lang.String.equals(java.lang.String)#org.apache.http.HttpResponse.getEntity()#org.json.JSONObject.JSONObject()#com.inovex.zabbixmobile.api.ZabbixService.importItems(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader, int, boolean)#com.inovex.zabbixmobile.api.ZabbixService._startTransaction()#com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, null, int)#java.io.BufferedReader.read()#org.json.JSONObject.put(java.lang.String, long)#<unknown>.set(<unknown>, <unknown>)#android.database.Cursor.getLong(<unknown>)#java.lang.IllegalStateException.IllegalStateException(java.lang.String)#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.getCurrentName()#android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null)#android.util.Log.d(java.lang.String, java.lang.String)#<unknown>.set(<unknown>, <unknown>)#java.lang.String.equals(<unknown>)#org.json.JSONObject.put(java.lang.String, java.lang.String)#android.database.Cursor.moveToFirst()#com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, java.lang.String)#android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null)#java.lang.String.equals(java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, java.lang.String)#<unknown>.getText()#org.json.JSONObject.put(java.lang.String, java.lang.String)#android.content.Intent.putExtra(java.lang.String, <unknown>)#<unknown>.getCurrentName()#android.content.res.Resources.getString(<unknown>)#android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null)#android.database.sqlite.SQLiteDatabase.setTransactionSuccessful()#<unknown>.next()#<unknown>.getText()#<unknown>.nextValueToken()#com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject)#com.inovex.zabbixmobile.api.ZabbixService.showProgress(<unknown>)#java.io.IOException.IOException(java.lang.String)#<unknown>.getCurrentName()#android.util.Log.d(java.lang.String, java.lang.String)#java.lang.Object.toString()#org.json.JSONObject.toString()#<unknown>.set(<unknown>, <unknown>)#org.json.JSONArray.JSONArray()#org.apache.http.HttpResponse.getStatusLine()#org.json.JSONArray.JSONArray()#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.apache.http.impl.client.DefaultHttpClient.DefaultHttpClient()#org.json.JSONObject.put(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject)#org.apache.http.HttpResponse.getStatusLine()#java.lang.String.equals(<unknown>)#java.util.Date.Date()#android.util.Log.i(java.lang.String, java.lang.String)#android.content.Context.getResources()#org.apache.http.impl.client.CloseableHttpClient.execute(org.apache.http.client.methods.HttpPost)#com.inovex.zabbixmobile.api.ZabbixService._commitTransactionIfRecommended()#com.inovex.zabbixmobile.api.ZabbixService.importHostGroups(<unknown>)#android.content.Context.sendBroadcast(android.content.Intent)#android.content.Context.sendBroadcast(android.content.Intent)#com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, null, int)#java.lang.Integer.parseInt(<unknown>)#<unknown>.ApplicationData()#com.inovex.zabbixmobile.api.ZabbixService.NoAPIAccessException.NoAPIAccessException()#com.inovex.zabbixmobile.api.ZabbixService._commitTransactionIfRecommended()#<unknown>.getJsonArray()#org.apache.http.message.AbstractHttpMessage.addHeader(java.lang.String, java.lang.String)#org.json.JSONObject.put(java.lang.String, int)#java.lang.String.replace(java.lang.String, java.lang.String)#org.json.JSONArray.JSONArray()#<unknown>.set(<unknown>, <unknown>)#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.set(<unknown>, <unknown>)#org.json.JSONArray.JSONArray()#java.lang.String.equals(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, java.lang.String, int)#<unknown>.nextProperty()#<unknown>.set(<unknown>, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject)#org.json.JSONObject.JSONObject()#java.lang.String.contains(java.lang.String)#org.apache.http.client.methods.HttpEntityEnclosingRequestBase.setEntity(org.apache.http.entity.StringEntity)#com.inovex.zabbixmobile.api.ZabbixService.importTriggers(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader)#org.json.JSONObject.put(java.lang.String, int)#<unknown>.HostGroupData()#<unknown>.JsonArrayOrObjectReader(org.codehaus.jackson.JsonParser)#<unknown>.HostGroupData()#<unknown>.nextProperty()#java.lang.Long.parseLong(<unknown>)#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.json.JSONObject.put(java.lang.String, org.json.JSONArray)#org.json.JSONObject.put(java.lang.String, java.lang.Integer)#<unknown>.set(<unknown>, <unknown>)#<unknown>.close()#org.json.JSONObject.put(java.lang.String, org.json.JSONArray)#<unknown>.set(<unknown>, <unknown>)#java.lang.String.equals(java.lang.String)#android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null)#<unknown>.next()#org.json.JSONObject.toString()#java.lang.String.equals(<unknown>)#java.lang.String.equals(<unknown>)#android.database.sqlite.SQLiteDatabase.query(<unknown>, null, <unknown>, null, null, null, null)#<unknown>.set(<unknown>, <unknown>)#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.CacheData()#<unknown>.getText()#com.inovex.zabbixmobile.api.ZabbixService._startTransaction()#<unknown>.set(<unknown>, <unknown>)#com.inovex.zabbixmobile.api.ZabbixService._endTransaction()#<unknown>.set(<unknown>, int)#<unknown>.getJsonArray()#java.lang.String.equals(<unknown>)#java.util.Date.getTime()#java.lang.String.equals(java.lang.String)#org.json.JSONObject.put(java.lang.String, int)#<unknown>.set(<unknown>, <unknown>)#java.lang.Integer.parseInt(<unknown>)#org.codehaus.jackson.JsonParser.getCurrentName()#<unknown>.nextProperty()#com.inovex.zabbixmobile.api.ZabbixService._endTransaction()#java.lang.String.equals(<unknown>)#org.json.JSONObject.put(java.lang.String, int)#android.database.sqlite.SQLiteDatabase.update(<unknown>, android.content.ContentValues, <unknown>, null)#com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject)#com.inovex.zabbixmobile.api.ZabbixService._endTransaction()#java.lang.StringBuilder.append(char)#<unknown>.set(<unknown>, <unknown>)#<unknown>.get(<unknown>)#<unknown>.set(<unknown>, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject)#org.json.JSONObject.put(java.lang.String, java.lang.String)#android.database.Cursor.getLong(<unknown>)#java.lang.String.equals(<unknown>)#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.json.JSONObject.JSONObject()#org.apache.http.params.HttpProtocolParams.setVersion(org.apache.http.params.HttpParams, org.apache.http.HttpVersion)#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.HistoryDetailData()#android.util.Log.d(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService._startTransaction()#<unknown>.next()#<unknown>.set(<unknown>, <unknown>)#<unknown>.nextValueToken()#org.json.JSONObject.JSONObject()#java.lang.String.equals(<unknown>)#java.lang.Long.parseLong(<unknown>)#java.lang.Integer.parseInt(<unknown>)#org.apache.http.client.methods.HttpPost.HttpPost(java.lang.String)#org.apache.http.StatusLine.getStatusCode()#<unknown>.set(<unknown>, int)#java.lang.String.equals(java.lang.String)#java.lang.String.equals(<unknown>)#java.lang.String.equals(<unknown>)#<unknown>.getCurrentName()#java.util.ArrayList<java.lang.String>.ArrayList, String()#com.inovex.zabbixmobile.api.ZabbixService._startTransaction()#com.inovex.zabbixmobile.api.ZabbixService.importTriggers(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader)#org.json.JSONArray.put(java.lang.String)#<unknown>.nextValueToken()#org.json.JSONArray.put(java.lang.String)#<unknown>.set(<unknown>, <unknown>)#org.json.JSONObject.put(java.lang.String, int)#com.inovex.zabbixmobile.api.ZabbixService.importItems(<unknown>, int, boolean)#org.json.JSONObject.JSONObject()#com.inovex.zabbixmobile.api.ZabbixService.importTriggers(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService.importGraphItems(<unknown>)#<unknown>.ScreenItemData()#<unknown>.set(<unknown>, <unknown>)#<unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>)#android.preference.PreferenceManager.getDefaultSharedPreferences(android.content.Context)#org.json.JSONObject.length()#<unknown>.nextValueToken()#java.util.HashSet<java.lang.Long>.HashSet, Long()#java.lang.String.equals(java.lang.String)#android.content.SharedPreferences.getBoolean(java.lang.String, boolean)#<unknown>.insert(android.database.sqlite.SQLiteDatabase)#org.json.JSONObject.put(java.lang.String, org.json.JSONArray)#<unknown>.close()#com.inovex.zabbixmobile.api.ZabbixService.importHosts(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader, int)#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.next()#android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null)#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.json.JSONObject.getString(java.lang.String)#<unknown>.set(<unknown>, <unknown>)#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.close()#org.json.JSONObject.getString(java.lang.String)#java.lang.String.equals(java.lang.String)#java.lang.Long.parseLong(<unknown>)#org.codehaus.jackson.JsonParser.isClosed()#org.json.JSONObject.put(java.lang.String, int)#org.json.JSONObject.put(java.lang.String, org.json.JSONArray)#org.json.JSONObject.put(java.lang.String, long)#<unknown>.close()#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.set(<unknown>, long)#org.json.JSONObject.put(java.lang.String, org.json.JSONObject)#<unknown>.set(<unknown>, <unknown>)#com.inovex.zabbixmobile.api.ZabbixService._endTransaction()#java.lang.String.replaceAll(java.lang.String, java.lang.String)#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.nextValueToken()#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.apache.http.params.BasicHttpParams.BasicHttpParams()#android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null)#android.database.sqlite.SQLiteDatabase.beginTransaction()#com.inovex.zabbixmobile.api.ZabbixService._commitTransactionIfRecommended()#com.inovex.zabbixmobile.api.ZabbixService._endTransaction()#java.lang.String.equals(<unknown>)#<unknown>.insert(android.database.sqlite.SQLiteDatabase)#<unknown>.insert(android.database.sqlite.SQLiteDatabase)#org.json.JSONObject.put(java.lang.String, int)#<unknown>.next()#com.inovex.zabbixmobile.api.ZabbixService._startTransaction()#<unknown>.getJsonArray()#android.content.SharedPreferences.getString(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, null, int)#javax.net.SocketFactory.createSocket()#java.lang.Long.parseLong(<unknown>)#org.apache.http.client.CredentialsProvider.setCredentials(org.apache.http.auth.AuthScope, org.apache.http.auth.UsernamePasswordCredentials)#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.next()#com.inovex.zabbixmobile.api.ZabbixService.HttpAuthorizationRequiredException.HttpAuthorizationRequiredException()#android.database.sqlite.SQLiteQueryBuilder.query(android.database.sqlite.SQLiteDatabase, null, null, null, null, null, null)#java.util.Date.Date()#com.inovex.zabbixmobile.api.ZabbixService._commitTransactionIfRecommended()#<unknown>.set(<unknown>, java.lang.String)#org.json.JSONObject.JSONObject()#<unknown>.next()#<unknown>.set(<unknown>, <unknown>)#<unknown>.set(<unknown>, <unknown>)#com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject)#java.lang.String.equals(java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, java.lang.String)#java.lang.String.indexOf(char)#android.database.sqlite.SQLiteDatabase.query(<unknown>, null, <unknown>, null, null, null, null)#android.preference.PreferenceManager.getDefaultSharedPreferences(android.content.Context)#<unknown>.nextProperty()#org.apache.http.impl.client.CloseableHttpClient.execute(org.apache.http.client.methods.HttpPost)#<unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>)#com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, java.lang.String)#org.json.JSONObject.JSONObject()#<unknown>.close()#android.database.Cursor.getColumnIndex(<unknown>)#android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null)#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.nextProperty()#org.apache.http.conn.scheme.PlainSocketFactory.getSocketFactory()#com.inovex.zabbixmobile.api.ZabbixService._commitTransactionIfRecommended()#com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject)#java.lang.StringBuilder.toString()#org.json.JSONObject.put(java.lang.String, java.lang.String)#android.database.sqlite.SQLiteQueryBuilder.SQLiteQueryBuilder()#<unknown>.insert(android.database.sqlite.SQLiteDatabase)#org.apache.http.conn.scheme.SchemeRegistry.register(org.apache.http.conn.scheme.Scheme)#<unknown>.set(<unknown>, <unknown>)#org.json.JSONObject.JSONObject(java.lang.String)#java.lang.String.equals(<unknown>)#<unknown>.set(<unknown>, <unknown>)#<unknown>.set(<unknown>, <unknown>)#java.lang.IllegalStateException.IllegalStateException(java.lang.String)#java.lang.Double.parseDouble(<unknown>)#android.content.ContentValues.put(<unknown>, java.lang.Long)#android.database.sqlite.SQLiteQueryBuilder.appendWhere(<unknown>)#org.apache.http.conn.scheme.SchemeRegistry.register(org.apache.http.conn.scheme.Scheme)#org.json.JSONObject.getInt(java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService.importHosts(<unknown>, null)#org.json.JSONObject.put(java.lang.String, boolean)#java.lang.Long.parseLong(<unknown>)#java.lang.String.indexOf(char)#android.database.sqlite.SQLiteQueryBuilder.appendWhere(<unknown>)#java.lang.String.length()#java.lang.String.equals(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject)#<unknown>.nextProperty()#<unknown>.next()#android.content.SharedPreferences.getString(java.lang.String, java.lang.String)#<unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>)#com.inovex.zabbixmobile.api.ZabbixService.importTriggers(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader)#<unknown>.GraphData()#org.json.JSONArray.put(java.lang.String)#org.apache.http.impl.client.AbstractHttpClient.getParams()#<unknown>.set(<unknown>, long)#<unknown>.set(<unknown>, <unknown>)#org.json.JSONObject.getJSONObject(java.lang.String)#org.json.JSONObject.put(java.lang.String, java.lang.String)#java.lang.String.equals(java.lang.String)#org.json.JSONObject.getString(java.lang.String)#java.lang.String.equals(<unknown>)#java.lang.String.equals(<unknown>)#<unknown>.getCurrentName()#java.lang.String.equals(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService.showProgress(int)#<unknown>.getCurrentName()#com.inovex.zabbixmobile.api.ZabbixService.importHosts(<unknown>, null)#com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, java.lang.String, int)#org.json.JSONObject.put(java.lang.String, int)#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.close()#java.lang.String.replace(java.lang.String, java.lang.String)#java.lang.String.equals(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject)#com.inovex.zabbixmobile.api.ZabbixService._endTransaction()#android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null)#android.database.Cursor.moveToNext()#<unknown>.HostData()#<unknown>.set(<unknown>, long)#<unknown>.next()#com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject)#android.database.sqlite.SQLiteQueryBuilder.setTables(<unknown>)#java.util.Date.getTime()#org.json.JSONObject.put(java.lang.String, long)#android.content.ContentValues.ContentValues(int)#java.lang.Long.parseLong(<unknown>)#org.apache.http.HttpResponse.getEntity()#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.getText()#java.lang.String.equals(java.lang.String)#<unknown>.set(<unknown>, <unknown>)#<unknown>.set(<unknown>, <unknown>)#javax.net.ssl.SSLContext.init(null, javax.net.ssl.TrustManager[], null)#android.database.sqlite.SQLiteDatabase.endTransaction()#java.lang.String.equals(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, java.lang.String)#android.util.Log.d(java.lang.String, java.lang.String)#<unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>)#<unknown>.next()#<unknown>.close()#<unknown>.insert(android.database.sqlite.SQLiteDatabase)#org.json.JSONObject.put(java.lang.String, java.lang.String)#java.lang.Throwable.getMessage()#java.lang.String.equals(<unknown>)#java.lang.String.equals(<unknown>)#<unknown>.set(<unknown>, <unknown>)#com.inovex.zabbixmobile.api.ZabbixService._endTransaction()#javax.net.ssl.SSLContext.getSocketFactory()#org.json.JSONObject.JSONObject()#android.content.Context.getResources()#org.json.JSONObject.put(java.lang.String, int)#com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, null)#com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, java.lang.String, int)#java.lang.String.matches(java.lang.String)#<unknown>.set(<unknown>, <unknown>)#org.json.JSONArray.put(java.lang.String)#<unknown>.set(<unknown>, <unknown>)#android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null)#android.content.Context.sendBroadcast(android.content.Intent)#org.json.JSONObject.getJSONObject(java.lang.String)#<unknown>.get(<unknown>)#android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null)#java.lang.String.equals(<unknown>)#android.content.SharedPreferences.getBoolean(java.lang.String, boolean)#java.lang.Throwable.printStackTrace()#android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null)#org.json.JSONObject.put(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService._startTransaction()#android.content.Intent.putExtra(java.lang.String, int)#org.json.JSONObject.JSONObject()#<unknown>.getText()#com.inovex.zabbixmobile.api.ZabbixService._endTransaction()#org.apache.http.client.methods.HttpPost.HttpPost(java.lang.String)#android.content.SharedPreferences.getString(java.lang.String, java.lang.String)#<unknown>.GraphItemData()#com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, java.lang.String, int)#<unknown>.nextValueToken()#org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager.ThreadSafeClientConnManager(org.apache.http.params.HttpParams, org.apache.http.conn.scheme.SchemeRegistry)#<unknown>.ApplicationItemRelationData()#java.lang.Object.toString()#android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null)#org.json.JSONArray.JSONArray()#java.lang.String.equals(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService._startTransaction()#org.json.JSONObject.put(java.lang.String, org.json.JSONArray)#com.inovex.zabbixmobile.api.ZabbixService.importApplications(int, int, <unknown>)#<unknown>.set(<unknown>, int)#org.json.JSONObject.put(java.lang.String, int)#com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, java.lang.String, int)#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.json.JSONObject.JSONObject()#java.lang.Math.min(int, int)#com.inovex.zabbixmobile.api.ZabbixService.showProgress(<unknown>)#java.lang.String.equals(java.lang.String)#android.content.Intent.Intent(<unknown>)#java.lang.String.equals(<unknown>)#org.json.JSONObject.put(java.lang.String, int)#javax.net.ssl.SSLContext.getInstance(java.lang.String)#android.content.res.Resources.getString(<unknown>)#org.json.JSONObject.JSONObject()#android.content.Intent.Intent(<unknown>)#java.lang.String.equals(<unknown>)#<unknown>.nextProperty()#javax.net.ssl.SSLSocketFactory.createSocket(java.net.Socket, java.lang.String, int, boolean)#org.json.JSONObject.put(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject)#<unknown>.get(<unknown>)#java.io.IOException.IOException(java.lang.String)#java.lang.String.trim()#java.lang.String.contains(java.lang.String)#org.apache.http.entity.StringEntity.StringEntity(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService._endTransaction()#.X509TrustManager()#com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject)#android.graphics.Color.parseColor(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, null)#org.json.JSONObject.getJSONArray(java.lang.String)#org.apache.http.client.params.HttpClientParams.setRedirecting(org.apache.http.params.HttpParams, boolean)#com.inovex.zabbixmobile.api.ZabbixService._startTransaction()#<unknown>.getCurrentName()#java.lang.String.equals(<unknown>)#java.lang.Long.parseLong(<unknown>)#android.util.Log.d(java.lang.String, java.lang.String)#org.codehaus.jackson.JsonParser.getCurrentToken()#org.codehaus.jackson.JsonParser.nextValue()#java.lang.Long.parseLong(<unknown>)#<unknown>.getText()#java.util.Date.getTime()#android.content.Intent.putExtra(java.lang.String, <unknown>)#android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null)#<unknown>.get(<unknown>)#android.database.Cursor.moveToFirst()#org.apache.http.client.methods.HttpEntityEnclosingRequestBase.setEntity(org.apache.http.entity.StringEntity)#com.inovex.zabbixmobile.api.ZabbixService._commitTransactionIfRecommended()#com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, null)#android.database.sqlite.SQLiteQueryBuilder.appendWhere(<unknown>)#org.apache.http.auth.UsernamePasswordCredentials.UsernamePasswordCredentials(java.lang.String, java.lang.String)#java.util.Date.getTime()#java.lang.String.equals(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService._endTransaction()#org.json.JSONObject.put(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService.authenticate()#java.lang.String.equals(<unknown>)#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.json.JSONObject.put(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService.NoAPIAccessException.NoAPIAccessException()#org.json.JSONArray.put(long)#com.inovex.zabbixmobile.api.ZabbixService._endTransaction()#android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null)#<unknown>.getJsonArray()#<unknown>.ScreenData()#java.util.Date.Date()#java.util.Date.Date()#<unknown>.set(<unknown>, long)#<unknown>.getCurrentName()#org.json.JSONObject.put(java.lang.String, org.json.JSONArray)#<unknown>.set(<unknown>, long)#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.apache.http.params.HttpConnectionParams.setConnectionTimeout(org.apache.http.params.HttpParams, int)#org.json.JSONArray.length()#<unknown>.set(<unknown>, java.lang.String)#<unknown>.set(<unknown>, long)#java.util.Date.getTime()#<unknown>.set(<unknown>, <unknown>)#<unknown>.set(<unknown>, <unknown>)#org.json.JSONArray.put(java.lang.String)#java.lang.String.equals(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService.importScreenItems(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService.HttpAuthorizationRequiredException.HttpAuthorizationRequiredException()#<unknown>.getText()#org.json.JSONObject.put(java.lang.String, org.json.JSONArray)#com.inovex.zabbixmobile.api.ZabbixService.importEvents(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader, null)#org.json.JSONObject.JSONObject()#<unknown>.set(<unknown>, <unknown>)#com.inovex.zabbixmobile.api.ZabbixService.importHostGroups(<unknown>)#org.json.JSONObject.toString()#java.lang.Integer.parseInt(<unknown>)#java.lang.String.equals(java.lang.String)#org.apache.http.params.HttpProtocolParams.setContentCharset(org.apache.http.params.HttpParams, java.lang.String)#<unknown>.get(<unknown>)#android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null)#java.lang.String.equals(<unknown>)#<unknown>.set(<unknown>, <unknown>)#<unknown>.nextValueToken()#<unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>)#org.json.JSONObject.put(java.lang.String, org.json.JSONArray)#org.json.JSONObject.put(java.lang.String, java.lang.Integer)#<unknown>.getText()#<unknown>.set(<unknown>, <unknown>)#org.apache.http.message.AbstractHttpMessage.addHeader(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject)#org.json.JSONObject.getJSONArray(java.lang.String)#java.security.KeyStore.load(null, null)#java.lang.String.replace(java.lang.String, java.lang.String)#java.lang.Long.parseLong(<unknown>)#org.json.JSONObject.toString()#com.inovex.zabbixmobile.api.ZabbixService.importTriggers(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader)#android.util.Log.d(java.lang.String, java.lang.String)#android.content.SharedPreferences.getString(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, java.lang.String)#<unknown>.TriggerData()#android.content.SharedPreferences.getString(java.lang.String, java.lang.String)#android.content.Intent.Intent(<unknown>)#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.apache.http.impl.client.AbstractHttpClient.getCredentialsProvider()#<unknown>.set(<unknown>, <unknown>)#java.io.IOException.IOException(java.lang.String)#java.lang.String.trim()#org.json.JSONObject.put(java.lang.String, org.json.JSONArray)#java.lang.String.split(java.lang.String)#java.lang.String.equals(java.lang.String)#java.lang.String.endsWith(java.lang.String)#<unknown>.set(<unknown>, int)#com.inovex.zabbixmobile.api.ZabbixService.showProgress(int)#<unknown>.ItemData()#org.json.JSONObject.put(java.lang.String, int)#<unknown>.set(<unknown>, <unknown>)#org.codehaus.jackson.JsonParser.getText()#android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null)#org.apache.http.impl.client.DefaultHttpClient.DefaultHttpClient(org.apache.http.conn.ClientConnectionManager, org.apache.http.params.HttpParams)#<unknown>.close()#java.lang.IllegalStateException.IllegalStateException(java.lang.String)#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.codehaus.jackson.JsonParser.nextToken()#android.database.Cursor.getColumnIndex(<unknown>)#org.json.JSONObject.put(java.lang.String, org.json.JSONArray)#<unknown>.nextValueToken()#com.inovex.zabbixmobile.api.ZabbixService._startTransaction()#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.set(<unknown>, java.lang.String)#java.lang.String.substring(int, int)#java.lang.Long.parseLong(<unknown>)#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.json.JSONObject.getInt(java.lang.String)#java.lang.String.equals(java.lang.String)#<unknown>.set(<unknown>, <unknown>)#<unknown>.set(<unknown>, <unknown>)#java.security.KeyStore.getInstance(java.lang.String)#java.lang.Integer.parseInt(<unknown>)#java.lang.String.equals(java.lang.String)#<unknown>.nextProperty()#android.content.Intent.putExtra(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, null)#<unknown>.set(<unknown>, int)#java.io.BufferedReader.BufferedReader(java.io.InputStreamReader)#com.inovex.zabbixmobile.api.ZabbixService.importEvents(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader, int)#java.security.KeyStore.getDefaultType()#java.lang.String.equals(<unknown>)#<unknown>.getText()#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.set(<unknown>, java.lang.Object)#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.insert(android.database.sqlite.SQLiteDatabase)#<unknown>.nextProperty()#com.inovex.zabbixmobile.api.ZabbixService._startTransaction()#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.close()#<unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>)#org.json.JSONObject.put(java.lang.String, long)#com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, null, int)#<unknown>.getJsonArray()#<unknown>.set(<unknown>, <unknown>)#java.lang.String.equals(<unknown>)#org.apache.http.conn.scheme.Scheme.Scheme(java.lang.String, org.apache.http.conn.scheme.PlainSocketFactory, int)#org.json.JSONObject.put(java.lang.String, java.lang.String)#java.lang.String.equals(<unknown>)",
    "p_callsites_t": ["<unknown>.set(<unknown>, <unknown>) org.apache.http.HttpEntity.getContent() java.lang.String.equals(java.lang.String) org.json.JSONArray.JSONArray() <unknown>.set(<unknown>, java.lang.Object) org.json.JSONObject.put(java.lang.String, java.lang.Integer) org.json.JSONArray.put(java.lang.String) org.json.JSONObject.JSONObject() org.json.JSONObject.put(java.lang.String, java.lang.String) org.codehaus.jackson.JsonFactory.createJsonParser(java.io.InputStream) java.lang.String.equals(<unknown>) org.apache.http.StatusLine.getStatusCode() <unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>) org.json.JSONObject.put(java.lang.String, java.lang.String) android.database.sqlite.SQLiteDatabase.inTransaction() android.util.Log.d(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService._startTransaction() java.lang.String.equals(java.lang.String) org.codehaus.jackson.JsonFactory.JsonFactory() com.inovex.zabbixmobile.api.ZabbixService._endTransaction() org.json.JSONObject.put(java.lang.String, int) android.content.ContentValues.ContentValues(int) org.apache.http.conn.scheme.SchemeRegistry.SchemeRegistry() <unknown>.insert(android.database.sqlite.SQLiteDatabase) <unknown>.insert(android.database.sqlite.SQLiteDatabase) com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject) com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject) com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject) org.json.JSONObject.getJSONObject(java.lang.String) java.io.InputStreamReader.InputStreamReader(java.io.InputStream) android.content.Intent.putExtra(java.lang.String, <unknown>) org.json.JSONArray.length() java.lang.String.equals(java.lang.String) <unknown>.set(<unknown>, <unknown>) java.lang.String.equals(<unknown>) com.inovex.zabbixmobile.api.ZabbixService.PreconditionFailedException.PreconditionFailedException() java.lang.StringBuilder.StringBuilder() android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null) <unknown>.nextValueToken() org.json.JSONObject.JSONObject() org.json.JSONObject.put(java.lang.String, int) org.json.JSONObject.put(java.lang.String, org.json.JSONArray) java.lang.String.equals(<unknown>) <unknown>.get(<unknown>) <unknown>.insert(android.database.sqlite.SQLiteDatabase) android.content.Intent.putExtra(java.lang.String, <unknown>) java.lang.String.equals(<unknown>) com.inovex.zabbixmobile.api.ZabbixService.importItems(<unknown>, int, boolean) com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, java.lang.String, int) android.util.Log.d(java.lang.String, java.lang.String) org.json.JSONObject.put(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject) org.apache.http.conn.scheme.Scheme.Scheme(java.lang.String, org.apache.http.conn.ssl.SSLSocketFactory, int) org.apache.http.HttpEntity.getContent() org.codehaus.jackson.JsonParser.close() java.lang.String.equals(<unknown>) <unknown>.nextValueToken() <unknown>.getCurrentName() org.json.JSONArray.JSONArray(java.util.Set<java.lang.Long>) <unknown>.nextValueToken() android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null) <unknown>.getJsonArray() com.inovex.zabbixmobile.api.ZabbixService._startTransaction() org.json.JSONArray.JSONArray() <unknown>.nextProperty() java.lang.String.equals(java.lang.String) android.database.sqlite.SQLiteDatabase.update(<unknown>, android.content.ContentValues, <unknown>, null) java.util.Set<java.lang.Long>.add(<unknown>) <unknown>.get(<unknown>) <unknown>.get(<unknown>) android.content.ContentValues.put(<unknown>, java.lang.Long) java.lang.String.equals(java.lang.String) org.apache.http.StatusLine.getReasonPhrase() java.lang.RuntimeException.RuntimeException(java.lang.String) <unknown>.nextProperty() java.lang.Throwable.printStackTrace() java.lang.String.equals(<unknown>) java.lang.Long.parseLong(<unknown>) org.json.JSONObject.put(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject) <unknown>.getCurrentName() android.content.ContentValues.put(<unknown>, java.lang.Long) org.apache.http.entity.StringEntity.StringEntity(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject) java.lang.String.equals(<unknown>) <unknown>.EventData() <unknown>.next() <unknown>.set(<unknown>, <unknown>) com.inovex.zabbixmobile.api.ZabbixService.CustomSSLSocketFactory.CustomSSLSocketFactory(java.security.KeyStore) com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject) <unknown>.getCurrentName() java.util.List<java.lang.String>.add(java.lang.String) org.json.JSONObject.put(java.lang.String, int) <unknown>.getText() org.json.JSONObject.put(java.lang.String, java.lang.String) org.apache.http.conn.ssl.SSLSocketFactory.setHostnameVerifier(org.apache.http.conn.ssl.X509HostnameVerifier) <unknown>.set(<unknown>, <unknown>) <unknown>.getText() org.json.JSONObject.put(java.lang.String, long) java.util.Date.Date() android.util.Log.i(java.lang.String, java.lang.String) org.json.JSONObject.put(java.lang.String, int) org.json.JSONObject.put(java.lang.String, int) <unknown>.set(<unknown>, <unknown>) com.inovex.zabbixmobile.api.ZabbixService.authenticate() android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null) android.util.Log.d(java.lang.String, java.lang.String) java.lang.String.equals(java.lang.String) org.apache.http.HttpResponse.getEntity() org.json.JSONObject.JSONObject() com.inovex.zabbixmobile.api.ZabbixService.importItems(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader, int, boolean) com.inovex.zabbixmobile.api.ZabbixService._startTransaction() com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, null, int) java.io.BufferedReader.read() org.json.JSONObject.put(java.lang.String, long) <unknown>.set(<unknown>, <unknown>) android.database.Cursor.getLong(<unknown>) java.lang.IllegalStateException.IllegalStateException(java.lang.String) org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.getCurrentName() android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null) android.util.Log.d(java.lang.String, java.lang.String) <unknown>.set(<unknown>, <unknown>) java.lang.String.equals(<unknown>) org.json.JSONObject.put(java.lang.String, java.lang.String) android.database.Cursor.moveToFirst() com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, java.lang.String) android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null) java.lang.String.equals(java.lang.String) com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, java.lang.String) <unknown>.getText() org.json.JSONObject.put(java.lang.String, java.lang.String) android.content.Intent.putExtra(java.lang.String, <unknown>) <unknown>.getCurrentName() android.content.res.Resources.getString(<unknown>) android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null) android.database.sqlite.SQLiteDatabase.setTransactionSuccessful() <unknown>.next() <unknown>.getText() <unknown>.nextValueToken() com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject) com.inovex.zabbixmobile.api.ZabbixService.showProgress(<unknown>) java.io.IOException.IOException(java.lang.String) <unknown>.getCurrentName() android.util.Log.d(java.lang.String, java.lang.String) java.lang.Object.toString() org.json.JSONObject.toString() <unknown>.set(<unknown>, <unknown>) org.json.JSONArray.JSONArray() org.apache.http.HttpResponse.getStatusLine() org.json.JSONArray.JSONArray() org.json.JSONObject.put(java.lang.String, java.lang.String) org.apache.http.impl.client.DefaultHttpClient.DefaultHttpClient() org.json.JSONObject.put(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject) org.apache.http.HttpResponse.getStatusLine() java.lang.String.equals(<unknown>) java.util.Date.Date() android.util.Log.i(java.lang.String, java.lang.String) android.content.Context.getResources() org.apache.http.impl.client.CloseableHttpClient.execute(org.apache.http.client.methods.HttpPost) com.inovex.zabbixmobile.api.ZabbixService._commitTransactionIfRecommended() com.inovex.zabbixmobile.api.ZabbixService.importHostGroups(<unknown>) android.content.Context.sendBroadcast(android.content.Intent) android.content.Context.sendBroadcast(android.content.Intent) com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, null, int) java.lang.Integer.parseInt(<unknown>) <unknown>.ApplicationData() com.inovex.zabbixmobile.api.ZabbixService.NoAPIAccessException.NoAPIAccessException() com.inovex.zabbixmobile.api.ZabbixService._commitTransactionIfRecommended() <unknown>.getJsonArray() org.apache.http.message.AbstractHttpMessage.addHeader(java.lang.String, java.lang.String) org.json.JSONObject.put(java.lang.String, int) java.lang.String.replace(java.lang.String, java.lang.String) org.json.JSONArray.JSONArray() <unknown>.set(<unknown>, <unknown>) org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.set(<unknown>, <unknown>) org.json.JSONArray.JSONArray() java.lang.String.equals(<unknown>) com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, java.lang.String, int) <unknown>.nextProperty() <unknown>.set(<unknown>, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject) org.json.JSONObject.JSONObject() java.lang.String.contains(java.lang.String) org.apache.http.client.methods.HttpEntityEnclosingRequestBase.setEntity(org.apache.http.entity.StringEntity) com.inovex.zabbixmobile.api.ZabbixService.importTriggers(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader) org.json.JSONObject.put(java.lang.String, int) <unknown>.HostGroupData() <unknown>.JsonArrayOrObjectReader(org.codehaus.jackson.JsonParser) <unknown>.HostGroupData() <unknown>.nextProperty() java.lang.Long.parseLong(<unknown>) org.json.JSONObject.put(java.lang.String, java.lang.String) org.json.JSONObject.put(java.lang.String, org.json.JSONArray) org.json.JSONObject.put(java.lang.String, java.lang.Integer) <unknown>.set(<unknown>, <unknown>) <unknown>.close() org.json.JSONObject.put(java.lang.String, org.json.JSONArray) <unknown>.set(<unknown>, <unknown>) java.lang.String.equals(java.lang.String) android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null) <unknown>.next() org.json.JSONObject.toString() java.lang.String.equals(<unknown>) java.lang.String.equals(<unknown>) android.database.sqlite.SQLiteDatabase.query(<unknown>, null, <unknown>, null, null, null, null) <unknown>.set(<unknown>, <unknown>) org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.CacheData() <unknown>.getText() com.inovex.zabbixmobile.api.ZabbixService._startTransaction() <unknown>.set(<unknown>, <unknown>) com.inovex.zabbixmobile.api.ZabbixService._endTransaction() <unknown>.set(<unknown>, int) <unknown>.getJsonArray() java.lang.String.equals(<unknown>) java.util.Date.getTime() java.lang.String.equals(java.lang.String) org.json.JSONObject.put(java.lang.String, int) <unknown>.set(<unknown>, <unknown>) java.lang.Integer.parseInt(<unknown>) org.codehaus.jackson.JsonParser.getCurrentName() <unknown>.nextProperty() com.inovex.zabbixmobile.api.ZabbixService._endTransaction() java.lang.String.equals(<unknown>) org.json.JSONObject.put(java.lang.String, int) android.database.sqlite.SQLiteDatabase.update(<unknown>, android.content.ContentValues, <unknown>, null) com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject) com.inovex.zabbixmobile.api.ZabbixService._endTransaction() java.lang.StringBuilder.append(char) <unknown>.set(<unknown>, <unknown>) <unknown>.get(<unknown>) <unknown>.set(<unknown>, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject) org.json.JSONObject.put(java.lang.String, java.lang.String) android.database.Cursor.getLong(<unknown>) java.lang.String.equals(<unknown>) org.json.JSONObject.put(java.lang.String, java.lang.String) org.json.JSONObject.JSONObject() org.apache.http.params.HttpProtocolParams.setVersion(org.apache.http.params.HttpParams, org.apache.http.HttpVersion) org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.HistoryDetailData() android.util.Log.d(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService._startTransaction() <unknown>.next() <unknown>.set(<unknown>, <unknown>) <unknown>.nextValueToken() org.json.JSONObject.JSONObject() java.lang.String.equals(<unknown>) java.lang.Long.parseLong(<unknown>) java.lang.Integer.parseInt(<unknown>) org.apache.http.client.methods.HttpPost.HttpPost(java.lang.String) org.apache.http.StatusLine.getStatusCode() <unknown>.set(<unknown>, int) java.lang.String.equals(java.lang.String) java.lang.String.equals(<unknown>) java.lang.String.equals(<unknown>) <unknown>.getCurrentName() java.util.ArrayList<java.lang.String>.ArrayList, String() com.inovex.zabbixmobile.api.ZabbixService._startTransaction() com.inovex.zabbixmobile.api.ZabbixService.importTriggers(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader) org.json.JSONArray.put(java.lang.String) <unknown>.nextValueToken() org.json.JSONArray.put(java.lang.String) <unknown>.set(<unknown>, <unknown>) org.json.JSONObject.put(java.lang.String, int) com.inovex.zabbixmobile.api.ZabbixService.importItems(<unknown>, int, boolean) org.json.JSONObject.JSONObject() com.inovex.zabbixmobile.api.ZabbixService.importTriggers(<unknown>) com.inovex.zabbixmobile.api.ZabbixService.importGraphItems(<unknown>) <unknown>.ScreenItemData() <unknown>.set(<unknown>, <unknown>) <unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>) android.preference.PreferenceManager.getDefaultSharedPreferences(android.content.Context) org.json.JSONObject.length() <unknown>.nextValueToken() java.util.HashSet<java.lang.Long>.HashSet, Long() java.lang.String.equals(java.lang.String) android.content.SharedPreferences.getBoolean(java.lang.String, boolean) <unknown>.insert(android.database.sqlite.SQLiteDatabase) org.json.JSONObject.put(java.lang.String, org.json.JSONArray) <unknown>.close() com.inovex.zabbixmobile.api.ZabbixService.importHosts(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader, int) org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.next() android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null) org.json.JSONObject.put(java.lang.String, java.lang.String) org.json.JSONObject.getString(java.lang.String) <unknown>.set(<unknown>, <unknown>) org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.close() org.json.JSONObject.getString(java.lang.String) java.lang.String.equals(java.lang.String) java.lang.Long.parseLong(<unknown>) org.codehaus.jackson.JsonParser.isClosed() org.json.JSONObject.put(java.lang.String, int) org.json.JSONObject.put(java.lang.String, org.json.JSONArray) org.json.JSONObject.put(java.lang.String, long) <unknown>.close() org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.set(<unknown>, long) org.json.JSONObject.put(java.lang.String, org.json.JSONObject) <unknown>.set(<unknown>, <unknown>) com.inovex.zabbixmobile.api.ZabbixService._endTransaction() java.lang.String.replaceAll(java.lang.String, java.lang.String) org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.nextValueToken() org.json.JSONObject.put(java.lang.String, java.lang.String) org.json.JSONObject.put(java.lang.String, java.lang.String) org.apache.http.params.BasicHttpParams.BasicHttpParams() android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null) android.database.sqlite.SQLiteDatabase.beginTransaction() com.inovex.zabbixmobile.api.ZabbixService._commitTransactionIfRecommended() com.inovex.zabbixmobile.api.ZabbixService._endTransaction() java.lang.String.equals(<unknown>) <unknown>.insert(android.database.sqlite.SQLiteDatabase) <unknown>.insert(android.database.sqlite.SQLiteDatabase) org.json.JSONObject.put(java.lang.String, int) <unknown>.next() com.inovex.zabbixmobile.api.ZabbixService._startTransaction() <unknown>.getJsonArray() android.content.SharedPreferences.getString(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, null, int) javax.net.SocketFactory.createSocket() java.lang.Long.parseLong(<unknown>) org.apache.http.client.CredentialsProvider.setCredentials(org.apache.http.auth.AuthScope, org.apache.http.auth.UsernamePasswordCredentials) org.json.JSONObject.put(java.lang.String, java.lang.String) org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.next() com.inovex.zabbixmobile.api.ZabbixService.HttpAuthorizationRequiredException.HttpAuthorizationRequiredException() android.database.sqlite.SQLiteQueryBuilder.query(android.database.sqlite.SQLiteDatabase, null, null, null, null, null, null) java.util.Date.Date() com.inovex.zabbixmobile.api.ZabbixService._commitTransactionIfRecommended() <unknown>.set(<unknown>, java.lang.String) org.json.JSONObject.JSONObject() <unknown>.next() <unknown>.set(<unknown>, <unknown>) <unknown>.set(<unknown>, <unknown>) com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject) java.lang.String.equals(java.lang.String) com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, java.lang.String) java.lang.String.indexOf(char) android.database.sqlite.SQLiteDatabase.query(<unknown>, null, <unknown>, null, null, null, null) android.preference.PreferenceManager.getDefaultSharedPreferences(android.content.Context) <unknown>.nextProperty() org.apache.http.impl.client.CloseableHttpClient.execute(org.apache.http.client.methods.HttpPost) <unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>) com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, java.lang.String) org.json.JSONObject.JSONObject() <unknown>.close() android.database.Cursor.getColumnIndex(<unknown>) android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null) org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.nextProperty() org.apache.http.conn.scheme.PlainSocketFactory.getSocketFactory() com.inovex.zabbixmobile.api.ZabbixService._commitTransactionIfRecommended() com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject) java.lang.StringBuilder.toString() org.json.JSONObject.put(java.lang.String, java.lang.String) android.database.sqlite.SQLiteQueryBuilder.SQLiteQueryBuilder() <unknown>.insert(android.database.sqlite.SQLiteDatabase) org.apache.http.conn.scheme.SchemeRegistry.register(org.apache.http.conn.scheme.Scheme) <unknown>.set(<unknown>, <unknown>) org.json.JSONObject.JSONObject(java.lang.String) java.lang.String.equals(<unknown>) <unknown>.set(<unknown>, <unknown>) <unknown>.set(<unknown>, <unknown>) java.lang.IllegalStateException.IllegalStateException(java.lang.String) java.lang.Double.parseDouble(<unknown>) android.content.ContentValues.put(<unknown>, java.lang.Long) android.database.sqlite.SQLiteQueryBuilder.appendWhere(<unknown>) org.apache.http.conn.scheme.SchemeRegistry.register(org.apache.http.conn.scheme.Scheme) org.json.JSONObject.getInt(java.lang.String) com.inovex.zabbixmobile.api.ZabbixService.importHosts(<unknown>, null) org.json.JSONObject.put(java.lang.String, boolean) java.lang.Long.parseLong(<unknown>) java.lang.String.indexOf(char) android.database.sqlite.SQLiteQueryBuilder.appendWhere(<unknown>) java.lang.String.length() java.lang.String.equals(<unknown>) com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject) <unknown>.nextProperty() <unknown>.next() android.content.SharedPreferences.getString(java.lang.String, java.lang.String) <unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>) com.inovex.zabbixmobile.api.ZabbixService.importTriggers(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader) <unknown>.GraphData() org.json.JSONArray.put(java.lang.String) org.apache.http.impl.client.AbstractHttpClient.getParams() <unknown>.set(<unknown>, long) <unknown>.set(<unknown>, <unknown>) org.json.JSONObject.getJSONObject(java.lang.String) org.json.JSONObject.put(java.lang.String, java.lang.String) java.lang.String.equals(java.lang.String) org.json.JSONObject.getString(java.lang.String) java.lang.String.equals(<unknown>) java.lang.String.equals(<unknown>) <unknown>.getCurrentName() java.lang.String.equals(<unknown>) com.inovex.zabbixmobile.api.ZabbixService.showProgress(int) <unknown>.getCurrentName() com.inovex.zabbixmobile.api.ZabbixService.importHosts(<unknown>, null) com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, java.lang.String, int) org.json.JSONObject.put(java.lang.String, int) org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.close() java.lang.String.replace(java.lang.String, java.lang.String) java.lang.String.equals(<unknown>) com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject) com.inovex.zabbixmobile.api.ZabbixService._endTransaction() android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null) android.database.Cursor.moveToNext() <unknown>.HostData() <unknown>.set(<unknown>, long) <unknown>.next() com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject) android.database.sqlite.SQLiteQueryBuilder.setTables(<unknown>) java.util.Date.getTime() org.json.JSONObject.put(java.lang.String, long) android.content.ContentValues.ContentValues(int) java.lang.Long.parseLong(<unknown>) org.apache.http.HttpResponse.getEntity() org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.getText() java.lang.String.equals(java.lang.String) <unknown>.set(<unknown>, <unknown>) <unknown>.set(<unknown>, <unknown>) javax.net.ssl.SSLContext.init(null, javax.net.ssl.TrustManager[], null) android.database.sqlite.SQLiteDatabase.endTransaction() java.lang.String.equals(<unknown>) com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, java.lang.String) android.util.Log.d(java.lang.String, java.lang.String) <unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>) <unknown>.next() <unknown>.close() <unknown>.insert(android.database.sqlite.SQLiteDatabase) org.json.JSONObject.put(java.lang.String, java.lang.String) java.lang.Throwable.getMessage() java.lang.String.equals(<unknown>) java.lang.String.equals(<unknown>) <unknown>.set(<unknown>, <unknown>) com.inovex.zabbixmobile.api.ZabbixService._endTransaction() javax.net.ssl.SSLContext.getSocketFactory() org.json.JSONObject.JSONObject() android.content.Context.getResources() org.json.JSONObject.put(java.lang.String, int) com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, null) com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, java.lang.String, int) java.lang.String.matches(java.lang.String) <unknown>.set(<unknown>, <unknown>) org.json.JSONArray.put(java.lang.String) <unknown>.set(<unknown>, <unknown>) android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null) android.content.Context.sendBroadcast(android.content.Intent) org.json.JSONObject.getJSONObject(java.lang.String) <unknown>.get(<unknown>) android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null) java.lang.String.equals(<unknown>) android.content.SharedPreferences.getBoolean(java.lang.String, boolean) java.lang.Throwable.printStackTrace() android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null) org.json.JSONObject.put(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService._startTransaction() android.content.Intent.putExtra(java.lang.String, int) org.json.JSONObject.JSONObject() <unknown>.getText() com.inovex.zabbixmobile.api.ZabbixService._endTransaction() org.apache.http.client.methods.HttpPost.HttpPost(java.lang.String) android.content.SharedPreferences.getString(java.lang.String, java.lang.String) <unknown>.GraphItemData() com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, java.lang.String, int) <unknown>.nextValueToken() org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager.ThreadSafeClientConnManager(org.apache.http.params.HttpParams, org.apache.http.conn.scheme.SchemeRegistry) <unknown>.ApplicationItemRelationData() java.lang.Object.toString() android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null) org.json.JSONArray.JSONArray() java.lang.String.equals(<unknown>) com.inovex.zabbixmobile.api.ZabbixService._startTransaction() org.json.JSONObject.put(java.lang.String, org.json.JSONArray) com.inovex.zabbixmobile.api.ZabbixService.importApplications(int, int, <unknown>) <unknown>.set(<unknown>, int) org.json.JSONObject.put(java.lang.String, int) com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, java.lang.String, int) org.json.JSONObject.put(java.lang.String, java.lang.String) org.json.JSONObject.JSONObject() java.lang.Math.min(int, int) com.inovex.zabbixmobile.api.ZabbixService.showProgress(<unknown>) java.lang.String.equals(java.lang.String) android.content.Intent.Intent(<unknown>) java.lang.String.equals(<unknown>) org.json.JSONObject.put(java.lang.String, int) javax.net.ssl.SSLContext.getInstance(java.lang.String) android.content.res.Resources.getString(<unknown>) org.json.JSONObject.JSONObject() android.content.Intent.Intent(<unknown>) java.lang.String.equals(<unknown>) <unknown>.nextProperty() javax.net.ssl.SSLSocketFactory.createSocket(java.net.Socket, java.lang.String, int, boolean) org.json.JSONObject.put(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject) <unknown>.get(<unknown>) java.io.IOException.IOException(java.lang.String) java.lang.String.trim() java.lang.String.contains(java.lang.String) org.apache.http.entity.StringEntity.StringEntity(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService._endTransaction() .X509TrustManager() com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject) android.graphics.Color.parseColor(<unknown>) com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, null) org.json.JSONObject.getJSONArray(java.lang.String) org.apache.http.client.params.HttpClientParams.setRedirecting(org.apache.http.params.HttpParams, boolean) com.inovex.zabbixmobile.api.ZabbixService._startTransaction() <unknown>.getCurrentName() java.lang.String.equals(<unknown>) java.lang.Long.parseLong(<unknown>) android.util.Log.d(java.lang.String, java.lang.String) org.codehaus.jackson.JsonParser.getCurrentToken() org.codehaus.jackson.JsonParser.nextValue() java.lang.Long.parseLong(<unknown>) <unknown>.getText() java.util.Date.getTime() android.content.Intent.putExtra(java.lang.String, <unknown>) android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null) <unknown>.get(<unknown>) android.database.Cursor.moveToFirst() org.apache.http.client.methods.HttpEntityEnclosingRequestBase.setEntity(org.apache.http.entity.StringEntity) com.inovex.zabbixmobile.api.ZabbixService._commitTransactionIfRecommended() com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, null) android.database.sqlite.SQLiteQueryBuilder.appendWhere(<unknown>) org.apache.http.auth.UsernamePasswordCredentials.UsernamePasswordCredentials(java.lang.String, java.lang.String) java.util.Date.getTime() java.lang.String.equals(<unknown>) com.inovex.zabbixmobile.api.ZabbixService._endTransaction() org.json.JSONObject.put(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService.authenticate() java.lang.String.equals(<unknown>) org.json.JSONObject.put(java.lang.String, java.lang.String) org.json.JSONObject.put(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService.NoAPIAccessException.NoAPIAccessException() org.json.JSONArray.put(long) com.inovex.zabbixmobile.api.ZabbixService._endTransaction() android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null) <unknown>.getJsonArray() <unknown>.ScreenData() java.util.Date.Date() java.util.Date.Date() <unknown>.set(<unknown>, long) <unknown>.getCurrentName() org.json.JSONObject.put(java.lang.String, org.json.JSONArray) <unknown>.set(<unknown>, long) org.json.JSONObject.put(java.lang.String, java.lang.String) org.apache.http.params.HttpConnectionParams.setConnectionTimeout(org.apache.http.params.HttpParams, int) org.json.JSONArray.length() <unknown>.set(<unknown>, java.lang.String) <unknown>.set(<unknown>, long) java.util.Date.getTime() <unknown>.set(<unknown>, <unknown>) <unknown>.set(<unknown>, <unknown>) org.json.JSONArray.put(java.lang.String) java.lang.String.equals(<unknown>) com.inovex.zabbixmobile.api.ZabbixService.importScreenItems(<unknown>) com.inovex.zabbixmobile.api.ZabbixService.HttpAuthorizationRequiredException.HttpAuthorizationRequiredException() <unknown>.getText() org.json.JSONObject.put(java.lang.String, org.json.JSONArray) com.inovex.zabbixmobile.api.ZabbixService.importEvents(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader, null) org.json.JSONObject.JSONObject() <unknown>.set(<unknown>, <unknown>) com.inovex.zabbixmobile.api.ZabbixService.importHostGroups(<unknown>) org.json.JSONObject.toString() java.lang.Integer.parseInt(<unknown>) java.lang.String.equals(java.lang.String) org.apache.http.params.HttpProtocolParams.setContentCharset(org.apache.http.params.HttpParams, java.lang.String) <unknown>.get(<unknown>) android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null) java.lang.String.equals(<unknown>) <unknown>.set(<unknown>, <unknown>) <unknown>.nextValueToken() <unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>) org.json.JSONObject.put(java.lang.String, org.json.JSONArray) org.json.JSONObject.put(java.lang.String, java.lang.Integer) <unknown>.getText() <unknown>.set(<unknown>, <unknown>) org.apache.http.message.AbstractHttpMessage.addHeader(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject) org.json.JSONObject.getJSONArray(java.lang.String) java.security.KeyStore.load(null, null) java.lang.String.replace(java.lang.String, java.lang.String) java.lang.Long.parseLong(<unknown>) org.json.JSONObject.toString() com.inovex.zabbixmobile.api.ZabbixService.importTriggers(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader) android.util.Log.d(java.lang.String, java.lang.String) android.content.SharedPreferences.getString(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, java.lang.String) <unknown>.TriggerData() android.content.SharedPreferences.getString(java.lang.String, java.lang.String) android.content.Intent.Intent(<unknown>) org.json.JSONObject.put(java.lang.String, java.lang.String) org.apache.http.impl.client.AbstractHttpClient.getCredentialsProvider() <unknown>.set(<unknown>, <unknown>) java.io.IOException.IOException(java.lang.String) java.lang.String.trim() org.json.JSONObject.put(java.lang.String, org.json.JSONArray) java.lang.String.split(java.lang.String) java.lang.String.equals(java.lang.String) java.lang.String.endsWith(java.lang.String) <unknown>.set(<unknown>, int) com.inovex.zabbixmobile.api.ZabbixService.showProgress(int) <unknown>.ItemData() org.json.JSONObject.put(java.lang.String, int) <unknown>.set(<unknown>, <unknown>) org.codehaus.jackson.JsonParser.getText() android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null) org.apache.http.impl.client.DefaultHttpClient.DefaultHttpClient(org.apache.http.conn.ClientConnectionManager, org.apache.http.params.HttpParams) <unknown>.close() java.lang.IllegalStateException.IllegalStateException(java.lang.String) org.json.JSONObject.put(java.lang.String, java.lang.String) org.codehaus.jackson.JsonParser.nextToken() android.database.Cursor.getColumnIndex(<unknown>) org.json.JSONObject.put(java.lang.String, org.json.JSONArray) <unknown>.nextValueToken() com.inovex.zabbixmobile.api.ZabbixService._startTransaction() org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.set(<unknown>, java.lang.String) java.lang.String.substring(int, int) java.lang.Long.parseLong(<unknown>) org.json.JSONObject.put(java.lang.String, java.lang.String) org.json.JSONObject.getInt(java.lang.String) java.lang.String.equals(java.lang.String) <unknown>.set(<unknown>, <unknown>) <unknown>.set(<unknown>, <unknown>) java.security.KeyStore.getInstance(java.lang.String) java.lang.Integer.parseInt(<unknown>) java.lang.String.equals(java.lang.String) <unknown>.nextProperty() android.content.Intent.putExtra(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, null) <unknown>.set(<unknown>, int) java.io.BufferedReader.BufferedReader(java.io.InputStreamReader) com.inovex.zabbixmobile.api.ZabbixService.importEvents(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader, int) java.security.KeyStore.getDefaultType() java.lang.String.equals(<unknown>) <unknown>.getText() org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.set(<unknown>, java.lang.Object) org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.insert(android.database.sqlite.SQLiteDatabase) <unknown>.nextProperty() com.inovex.zabbixmobile.api.ZabbixService._startTransaction() org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.close() <unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>) org.json.JSONObject.put(java.lang.String, long) com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, null, int) <unknown>.getJsonArray() <unknown>.set(<unknown>, <unknown>) java.lang.String.equals(<unknown>) org.apache.http.conn.scheme.Scheme.Scheme(java.lang.String, org.apache.http.conn.scheme.PlainSocketFactory, int) org.json.JSONObject.put(java.lang.String, java.lang.String) java.lang.String.equals(<unknown>)"],
    "c_callsites_t": ["<unknown>.set(<unknown>, <unknown>) org.apache.http.HttpEntity.getContent() java.lang.String.equals(java.lang.String) org.json.JSONArray.JSONArray() <unknown>.set(<unknown>, java.lang.Object) org.json.JSONObject.put(java.lang.String, java.lang.Integer) org.json.JSONArray.put(java.lang.String) org.json.JSONObject.JSONObject() org.json.JSONObject.put(java.lang.String, java.lang.String) org.codehaus.jackson.JsonFactory.createJsonParser(java.io.InputStream) java.lang.String.equals(<unknown>) org.apache.http.StatusLine.getStatusCode() <unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>) org.json.JSONObject.put(java.lang.String, java.lang.String) android.database.sqlite.SQLiteDatabase.inTransaction() android.util.Log.d(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService._startTransaction() java.lang.String.equals(java.lang.String) org.codehaus.jackson.JsonFactory.JsonFactory() com.inovex.zabbixmobile.api.ZabbixService._endTransaction() org.json.JSONObject.put(java.lang.String, int) android.content.ContentValues.ContentValues(int) org.apache.http.conn.scheme.SchemeRegistry.SchemeRegistry() <unknown>.insert(android.database.sqlite.SQLiteDatabase) <unknown>.insert(android.database.sqlite.SQLiteDatabase) com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject) com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject) com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject) org.json.JSONObject.getJSONObject(java.lang.String) java.io.InputStreamReader.InputStreamReader(java.io.InputStream) android.content.Intent.putExtra(java.lang.String, <unknown>) org.json.JSONArray.length() java.lang.String.equals(java.lang.String) <unknown>.set(<unknown>, <unknown>) java.lang.String.equals(<unknown>) com.inovex.zabbixmobile.api.ZabbixService.PreconditionFailedException.PreconditionFailedException() java.lang.StringBuilder.StringBuilder() android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null) <unknown>.nextValueToken() org.json.JSONObject.JSONObject() org.json.JSONObject.put(java.lang.String, int) org.json.JSONObject.put(java.lang.String, org.json.JSONArray) java.lang.String.equals(<unknown>) <unknown>.get(<unknown>) <unknown>.insert(android.database.sqlite.SQLiteDatabase) android.content.Intent.putExtra(java.lang.String, <unknown>) java.lang.String.equals(<unknown>) com.inovex.zabbixmobile.api.ZabbixService.importItems(<unknown>, int, boolean) com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, java.lang.String, int) android.util.Log.d(java.lang.String, java.lang.String) org.json.JSONObject.put(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject) org.apache.http.conn.scheme.Scheme.Scheme(java.lang.String, org.apache.http.conn.ssl.SSLSocketFactory, int) org.apache.http.HttpEntity.getContent() org.codehaus.jackson.JsonParser.close() java.lang.String.equals(<unknown>) <unknown>.nextValueToken() <unknown>.getCurrentName() org.json.JSONArray.JSONArray(java.util.Set<java.lang.Long>) <unknown>.nextValueToken() android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null) <unknown>.getJsonArray() com.inovex.zabbixmobile.api.ZabbixService._startTransaction() org.json.JSONArray.JSONArray() <unknown>.nextProperty() java.lang.String.equals(java.lang.String) android.database.sqlite.SQLiteDatabase.update(<unknown>, android.content.ContentValues, <unknown>, null) java.util.Set<java.lang.Long>.add(<unknown>) <unknown>.get(<unknown>) <unknown>.get(<unknown>) android.content.ContentValues.put(<unknown>, java.lang.Long) java.lang.String.equals(java.lang.String) org.apache.http.StatusLine.getReasonPhrase() java.lang.RuntimeException.RuntimeException(java.lang.String) <unknown>.nextProperty() java.lang.Throwable.printStackTrace() java.lang.String.equals(<unknown>) java.lang.Long.parseLong(<unknown>) org.json.JSONObject.put(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject) <unknown>.getCurrentName() android.content.ContentValues.put(<unknown>, java.lang.Long) org.apache.http.entity.StringEntity.StringEntity(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject) java.lang.String.equals(<unknown>) <unknown>.EventData() <unknown>.next() <unknown>.set(<unknown>, <unknown>) com.inovex.zabbixmobile.api.ZabbixService.CustomSSLSocketFactory.CustomSSLSocketFactory(java.security.KeyStore) com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject) <unknown>.getCurrentName() java.util.List<java.lang.String>.add(java.lang.String) org.json.JSONObject.put(java.lang.String, int) <unknown>.getText() org.json.JSONObject.put(java.lang.String, java.lang.String) org.apache.http.conn.ssl.SSLSocketFactory.setHostnameVerifier(org.apache.http.conn.ssl.X509HostnameVerifier) <unknown>.set(<unknown>, <unknown>) <unknown>.getText() org.json.JSONObject.put(java.lang.String, long) java.util.Date.Date() org.json.JSONObject.put(java.lang.String, int) org.json.JSONObject.put(java.lang.String, int) <unknown>.set(<unknown>, <unknown>) com.inovex.zabbixmobile.api.ZabbixService.authenticate() android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null) android.util.Log.d(java.lang.String, java.lang.String) java.lang.String.equals(java.lang.String) org.apache.http.HttpResponse.getEntity() org.json.JSONObject.JSONObject() com.inovex.zabbixmobile.api.ZabbixService.importItems(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader, int, boolean) com.inovex.zabbixmobile.api.ZabbixService._startTransaction() com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, null, int) java.io.BufferedReader.read() org.json.JSONObject.put(java.lang.String, long) <unknown>.set(<unknown>, <unknown>) android.database.Cursor.getLong(<unknown>) java.lang.IllegalStateException.IllegalStateException(java.lang.String) org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.getCurrentName() android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null) android.util.Log.d(java.lang.String, java.lang.String) <unknown>.set(<unknown>, <unknown>) java.lang.String.equals(<unknown>) org.json.JSONObject.put(java.lang.String, java.lang.String) android.database.Cursor.moveToFirst() com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, java.lang.String) android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null) java.lang.String.equals(java.lang.String) com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, java.lang.String) <unknown>.getText() org.json.JSONObject.put(java.lang.String, java.lang.String) android.content.Intent.putExtra(java.lang.String, <unknown>) <unknown>.getCurrentName() android.content.res.Resources.getString(<unknown>) android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null) android.database.sqlite.SQLiteDatabase.setTransactionSuccessful() <unknown>.next() <unknown>.getText() <unknown>.nextValueToken() com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject) com.inovex.zabbixmobile.api.ZabbixService.showProgress(<unknown>) java.io.IOException.IOException(java.lang.String) <unknown>.getCurrentName() android.util.Log.d(java.lang.String, java.lang.String) java.lang.Object.toString() org.json.JSONObject.toString() <unknown>.set(<unknown>, <unknown>) org.json.JSONArray.JSONArray() org.apache.http.HttpResponse.getStatusLine() org.json.JSONArray.JSONArray() org.json.JSONObject.put(java.lang.String, java.lang.String) org.apache.http.impl.client.DefaultHttpClient.DefaultHttpClient() org.json.JSONObject.put(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject) org.apache.http.HttpResponse.getStatusLine() java.lang.String.equals(<unknown>) java.util.Date.Date() android.util.Log.i(java.lang.String, java.lang.String) android.content.Context.getResources() org.apache.http.impl.client.CloseableHttpClient.execute(org.apache.http.client.methods.HttpPost) com.inovex.zabbixmobile.api.ZabbixService._commitTransactionIfRecommended() com.inovex.zabbixmobile.api.ZabbixService.importHostGroups(<unknown>) android.content.Context.sendBroadcast(android.content.Intent) android.content.Context.sendBroadcast(android.content.Intent) com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, null, int) java.lang.Integer.parseInt(<unknown>) <unknown>.ApplicationData() com.inovex.zabbixmobile.api.ZabbixService.NoAPIAccessException.NoAPIAccessException() com.inovex.zabbixmobile.api.ZabbixService._commitTransactionIfRecommended() <unknown>.getJsonArray() org.apache.http.message.AbstractHttpMessage.addHeader(java.lang.String, java.lang.String) org.json.JSONObject.put(java.lang.String, int) java.lang.String.replace(java.lang.String, java.lang.String) org.json.JSONArray.JSONArray() <unknown>.set(<unknown>, <unknown>) org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.set(<unknown>, <unknown>) org.json.JSONArray.JSONArray() java.lang.String.equals(<unknown>) com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, java.lang.String, int) <unknown>.nextProperty() <unknown>.set(<unknown>, java.lang.String) org.json.JSONObject.JSONObject() java.lang.String.contains(java.lang.String) org.apache.http.client.methods.HttpEntityEnclosingRequestBase.setEntity(org.apache.http.entity.StringEntity) com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject) com.inovex.zabbixmobile.api.ZabbixService.importTriggers(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader) org.json.JSONObject.put(java.lang.String, int) <unknown>.HostGroupData() <unknown>.JsonArrayOrObjectReader(org.codehaus.jackson.JsonParser) <unknown>.HostGroupData() <unknown>.nextProperty() java.lang.Long.parseLong(<unknown>) org.json.JSONObject.put(java.lang.String, java.lang.String) org.json.JSONObject.put(java.lang.String, org.json.JSONArray) org.json.JSONObject.put(java.lang.String, java.lang.Integer) <unknown>.set(<unknown>, <unknown>) <unknown>.close() org.json.JSONObject.put(java.lang.String, org.json.JSONArray) <unknown>.set(<unknown>, <unknown>) java.lang.String.equals(java.lang.String) android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null) <unknown>.next() org.json.JSONObject.toString() java.lang.String.equals(<unknown>) java.lang.String.equals(<unknown>) android.database.sqlite.SQLiteDatabase.query(<unknown>, null, <unknown>, null, null, null, null) <unknown>.set(<unknown>, <unknown>) org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.CacheData() <unknown>.getText() com.inovex.zabbixmobile.api.ZabbixService._startTransaction() <unknown>.set(<unknown>, <unknown>) com.inovex.zabbixmobile.api.ZabbixService._endTransaction() <unknown>.set(<unknown>, int) <unknown>.getJsonArray() java.lang.String.equals(<unknown>) java.util.Date.getTime() java.lang.String.equals(java.lang.String) org.json.JSONObject.put(java.lang.String, int) <unknown>.set(<unknown>, <unknown>) java.lang.Integer.parseInt(<unknown>) org.codehaus.jackson.JsonParser.getCurrentName() <unknown>.nextProperty() com.inovex.zabbixmobile.api.ZabbixService._endTransaction() java.lang.String.equals(<unknown>) org.json.JSONObject.put(java.lang.String, int) android.database.sqlite.SQLiteDatabase.update(<unknown>, android.content.ContentValues, <unknown>, null) com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject) com.inovex.zabbixmobile.api.ZabbixService._endTransaction() java.lang.StringBuilder.append(char) <unknown>.set(<unknown>, <unknown>) <unknown>.get(<unknown>) <unknown>.set(<unknown>, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject) org.json.JSONObject.put(java.lang.String, java.lang.String) android.database.Cursor.getLong(<unknown>) java.lang.String.equals(<unknown>) org.json.JSONObject.put(java.lang.String, java.lang.String) org.json.JSONObject.JSONObject() org.apache.http.params.HttpProtocolParams.setVersion(org.apache.http.params.HttpParams, org.apache.http.HttpVersion) org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.HistoryDetailData() android.util.Log.d(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService._startTransaction() <unknown>.next() <unknown>.set(<unknown>, <unknown>) <unknown>.nextValueToken() org.json.JSONObject.JSONObject() java.lang.String.equals(<unknown>) java.lang.Long.parseLong(<unknown>) java.lang.Integer.parseInt(<unknown>) org.apache.http.client.methods.HttpPost.HttpPost(java.lang.String) org.apache.http.StatusLine.getStatusCode() <unknown>.set(<unknown>, int) java.lang.String.equals(java.lang.String) java.lang.String.equals(<unknown>) java.lang.String.equals(<unknown>) <unknown>.getCurrentName() java.util.ArrayList<java.lang.String>.ArrayList, String() com.inovex.zabbixmobile.api.ZabbixService._startTransaction() com.inovex.zabbixmobile.api.ZabbixService.importTriggers(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader) org.json.JSONArray.put(java.lang.String) <unknown>.nextValueToken() org.json.JSONArray.put(java.lang.String) <unknown>.set(<unknown>, <unknown>) org.json.JSONObject.put(java.lang.String, int) com.inovex.zabbixmobile.api.ZabbixService.importItems(<unknown>, int, boolean) org.json.JSONObject.JSONObject() com.inovex.zabbixmobile.api.ZabbixService.importTriggers(<unknown>) com.inovex.zabbixmobile.api.ZabbixService.importGraphItems(<unknown>) <unknown>.ScreenItemData() <unknown>.set(<unknown>, <unknown>) <unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>) android.preference.PreferenceManager.getDefaultSharedPreferences(android.content.Context) org.json.JSONObject.length() <unknown>.nextValueToken() java.util.HashSet<java.lang.Long>.HashSet, Long() java.lang.String.equals(java.lang.String) android.content.SharedPreferences.getBoolean(java.lang.String, boolean) <unknown>.insert(android.database.sqlite.SQLiteDatabase) org.json.JSONObject.put(java.lang.String, org.json.JSONArray) <unknown>.close() com.inovex.zabbixmobile.api.ZabbixService.importHosts(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader, int) org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.next() android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null) org.json.JSONObject.put(java.lang.String, java.lang.String) org.json.JSONObject.getString(java.lang.String) <unknown>.set(<unknown>, <unknown>) org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.close() org.json.JSONObject.getString(java.lang.String) java.lang.String.equals(java.lang.String) java.lang.Long.parseLong(<unknown>) org.codehaus.jackson.JsonParser.isClosed() org.json.JSONObject.put(java.lang.String, int) org.json.JSONObject.put(java.lang.String, org.json.JSONArray) java.lang.String.startsWith(java.lang.String) org.json.JSONObject.put(java.lang.String, long) <unknown>.close() org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.set(<unknown>, long) org.json.JSONObject.put(java.lang.String, org.json.JSONObject) <unknown>.set(<unknown>, <unknown>) com.inovex.zabbixmobile.api.ZabbixService._endTransaction() java.lang.String.replaceAll(java.lang.String, java.lang.String) org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.nextValueToken() org.json.JSONObject.put(java.lang.String, java.lang.String) org.json.JSONObject.put(java.lang.String, java.lang.String) org.apache.http.params.BasicHttpParams.BasicHttpParams() android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null) android.database.sqlite.SQLiteDatabase.beginTransaction() com.inovex.zabbixmobile.api.ZabbixService._commitTransactionIfRecommended() com.inovex.zabbixmobile.api.ZabbixService._endTransaction() java.lang.String.equals(<unknown>) <unknown>.insert(android.database.sqlite.SQLiteDatabase) <unknown>.insert(android.database.sqlite.SQLiteDatabase) org.json.JSONObject.put(java.lang.String, int) <unknown>.next() com.inovex.zabbixmobile.api.ZabbixService._startTransaction() <unknown>.getJsonArray() android.content.SharedPreferences.getString(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, null, int) javax.net.SocketFactory.createSocket() java.lang.Long.parseLong(<unknown>) org.apache.http.client.CredentialsProvider.setCredentials(org.apache.http.auth.AuthScope, org.apache.http.auth.UsernamePasswordCredentials) org.json.JSONObject.put(java.lang.String, java.lang.String) org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.next() com.inovex.zabbixmobile.api.ZabbixService.HttpAuthorizationRequiredException.HttpAuthorizationRequiredException() android.database.sqlite.SQLiteQueryBuilder.query(android.database.sqlite.SQLiteDatabase, null, null, null, null, null, null) java.util.Date.Date() com.inovex.zabbixmobile.api.ZabbixService._commitTransactionIfRecommended() <unknown>.set(<unknown>, java.lang.String) org.json.JSONObject.JSONObject() <unknown>.next() <unknown>.set(<unknown>, <unknown>) <unknown>.set(<unknown>, <unknown>) com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject) java.lang.String.equals(java.lang.String) com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, java.lang.String) java.lang.String.indexOf(char) android.database.sqlite.SQLiteDatabase.query(<unknown>, null, <unknown>, null, null, null, null) android.preference.PreferenceManager.getDefaultSharedPreferences(android.content.Context) <unknown>.nextProperty() org.apache.http.impl.client.CloseableHttpClient.execute(org.apache.http.client.methods.HttpPost) <unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>) com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, java.lang.String) org.json.JSONObject.JSONObject() <unknown>.close() android.database.Cursor.getColumnIndex(<unknown>) android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null) org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.nextProperty() org.apache.http.conn.scheme.PlainSocketFactory.getSocketFactory() com.inovex.zabbixmobile.api.ZabbixService._commitTransactionIfRecommended() com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject) java.lang.StringBuilder.toString() org.json.JSONObject.put(java.lang.String, java.lang.String) android.database.sqlite.SQLiteQueryBuilder.SQLiteQueryBuilder() <unknown>.insert(android.database.sqlite.SQLiteDatabase) org.apache.http.conn.scheme.SchemeRegistry.register(org.apache.http.conn.scheme.Scheme) <unknown>.set(<unknown>, <unknown>) org.json.JSONObject.JSONObject(java.lang.String) java.lang.String.equals(<unknown>) <unknown>.set(<unknown>, <unknown>) <unknown>.set(<unknown>, <unknown>) java.lang.IllegalStateException.IllegalStateException(java.lang.String) java.lang.Double.parseDouble(<unknown>) android.content.ContentValues.put(<unknown>, java.lang.Long) android.util.Log.i(java.lang.String, java.lang.String) android.database.sqlite.SQLiteQueryBuilder.appendWhere(<unknown>) org.apache.http.conn.scheme.SchemeRegistry.register(org.apache.http.conn.scheme.Scheme) org.json.JSONObject.getInt(java.lang.String) com.inovex.zabbixmobile.api.ZabbixService.importHosts(<unknown>, null) org.json.JSONObject.put(java.lang.String, boolean) java.lang.Long.parseLong(<unknown>) java.lang.String.indexOf(char) java.lang.String.equals(java.lang.String) android.database.sqlite.SQLiteQueryBuilder.appendWhere(<unknown>) java.lang.String.length() java.lang.String.equals(<unknown>) com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject) <unknown>.nextProperty() <unknown>.next() android.content.SharedPreferences.getString(java.lang.String, java.lang.String) <unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>) com.inovex.zabbixmobile.api.ZabbixService.importTriggers(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader) <unknown>.GraphData() org.json.JSONArray.put(java.lang.String) org.apache.http.impl.client.AbstractHttpClient.getParams() <unknown>.set(<unknown>, long) <unknown>.set(<unknown>, <unknown>) org.json.JSONObject.getJSONObject(java.lang.String) org.json.JSONObject.put(java.lang.String, java.lang.String) java.lang.String.equals(java.lang.String) org.json.JSONObject.getString(java.lang.String) java.lang.String.equals(<unknown>) java.lang.String.equals(<unknown>) <unknown>.getCurrentName() java.lang.String.equals(<unknown>) com.inovex.zabbixmobile.api.ZabbixService.showProgress(int) <unknown>.getCurrentName() com.inovex.zabbixmobile.api.ZabbixService.importHosts(<unknown>, null) com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, java.lang.String, int) org.json.JSONObject.put(java.lang.String, int) org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.close() java.lang.String.replace(java.lang.String, java.lang.String) java.lang.String.equals(<unknown>) com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject) com.inovex.zabbixmobile.api.ZabbixService._endTransaction() android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null) android.database.Cursor.moveToNext() <unknown>.HostData() <unknown>.set(<unknown>, long) <unknown>.next() com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject) android.database.sqlite.SQLiteQueryBuilder.setTables(<unknown>) java.util.Date.getTime() org.json.JSONObject.put(java.lang.String, long) android.content.ContentValues.ContentValues(int) java.lang.Long.parseLong(<unknown>) org.apache.http.HttpResponse.getEntity() org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.getText() java.lang.String.equals(java.lang.String) <unknown>.set(<unknown>, <unknown>) <unknown>.set(<unknown>, <unknown>) javax.net.ssl.SSLContext.init(null, javax.net.ssl.TrustManager[], null) android.database.sqlite.SQLiteDatabase.endTransaction() java.lang.String.equals(<unknown>) com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, java.lang.String) android.util.Log.d(java.lang.String, java.lang.String) <unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>) <unknown>.next() <unknown>.close() <unknown>.insert(android.database.sqlite.SQLiteDatabase) org.json.JSONObject.put(java.lang.String, java.lang.String) java.lang.Throwable.getMessage() java.lang.String.equals(<unknown>) java.lang.String.equals(<unknown>) <unknown>.set(<unknown>, <unknown>) com.inovex.zabbixmobile.api.ZabbixService._endTransaction() javax.net.ssl.SSLContext.getSocketFactory() org.json.JSONObject.JSONObject() android.content.Context.getResources() org.json.JSONObject.put(java.lang.String, int) com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, null) com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, java.lang.String, int) java.lang.String.matches(java.lang.String) <unknown>.set(<unknown>, <unknown>) org.json.JSONArray.put(java.lang.String) <unknown>.set(<unknown>, <unknown>) android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null) android.content.Context.sendBroadcast(android.content.Intent) org.json.JSONObject.getJSONObject(java.lang.String) <unknown>.get(<unknown>) android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null) java.lang.String.equals(<unknown>) android.content.SharedPreferences.getBoolean(java.lang.String, boolean) java.lang.Throwable.printStackTrace() android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null) org.json.JSONObject.put(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService._startTransaction() android.content.Intent.putExtra(java.lang.String, int) org.json.JSONObject.JSONObject() <unknown>.getText() com.inovex.zabbixmobile.api.ZabbixService._endTransaction() org.apache.http.client.methods.HttpPost.HttpPost(java.lang.String) android.content.SharedPreferences.getString(java.lang.String, java.lang.String) <unknown>.GraphItemData() com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, java.lang.String, int) <unknown>.nextValueToken() org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager.ThreadSafeClientConnManager(org.apache.http.params.HttpParams, org.apache.http.conn.scheme.SchemeRegistry) <unknown>.ApplicationItemRelationData() java.lang.Object.toString() android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null) org.json.JSONArray.JSONArray() java.lang.String.equals(<unknown>) com.inovex.zabbixmobile.api.ZabbixService._startTransaction() org.json.JSONObject.put(java.lang.String, org.json.JSONArray) com.inovex.zabbixmobile.api.ZabbixService.importApplications(int, int, <unknown>) <unknown>.set(<unknown>, int) org.json.JSONObject.put(java.lang.String, int) com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, java.lang.String, int) org.json.JSONObject.put(java.lang.String, java.lang.String) org.json.JSONObject.JSONObject() java.lang.Math.min(int, int) com.inovex.zabbixmobile.api.ZabbixService.showProgress(<unknown>) java.lang.String.equals(java.lang.String) android.content.Intent.Intent(<unknown>) java.lang.String.equals(<unknown>) org.json.JSONObject.put(java.lang.String, int) javax.net.ssl.SSLContext.getInstance(java.lang.String) android.content.res.Resources.getString(<unknown>) org.json.JSONObject.JSONObject() android.content.Intent.Intent(<unknown>) java.lang.String.equals(<unknown>) <unknown>.nextProperty() javax.net.ssl.SSLSocketFactory.createSocket(java.net.Socket, java.lang.String, int, boolean) org.json.JSONObject.put(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject) <unknown>.get(<unknown>) java.io.IOException.IOException(java.lang.String) java.lang.String.trim() java.lang.String.contains(java.lang.String) org.apache.http.entity.StringEntity.StringEntity(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService._endTransaction() .X509TrustManager() com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject) android.graphics.Color.parseColor(<unknown>) com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, null) org.json.JSONObject.getJSONArray(java.lang.String) org.apache.http.client.params.HttpClientParams.setRedirecting(org.apache.http.params.HttpParams, boolean) com.inovex.zabbixmobile.api.ZabbixService._startTransaction() <unknown>.getCurrentName() java.lang.String.equals(<unknown>) java.lang.Long.parseLong(<unknown>) android.util.Log.d(java.lang.String, java.lang.String) org.codehaus.jackson.JsonParser.getCurrentToken() org.codehaus.jackson.JsonParser.nextValue() java.lang.Long.parseLong(<unknown>) <unknown>.getText() java.util.Date.getTime() android.content.Intent.putExtra(java.lang.String, <unknown>) android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null) <unknown>.get(<unknown>) android.database.Cursor.moveToFirst() org.apache.http.client.methods.HttpEntityEnclosingRequestBase.setEntity(org.apache.http.entity.StringEntity) com.inovex.zabbixmobile.api.ZabbixService._commitTransactionIfRecommended() com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, null) android.database.sqlite.SQLiteQueryBuilder.appendWhere(<unknown>) org.apache.http.auth.UsernamePasswordCredentials.UsernamePasswordCredentials(java.lang.String, java.lang.String) java.util.Date.getTime() java.lang.String.equals(<unknown>) com.inovex.zabbixmobile.api.ZabbixService._endTransaction() org.json.JSONObject.put(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService.authenticate() java.lang.String.equals(<unknown>) org.json.JSONObject.put(java.lang.String, java.lang.String) org.json.JSONObject.put(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService.NoAPIAccessException.NoAPIAccessException() org.json.JSONArray.put(long) com.inovex.zabbixmobile.api.ZabbixService._endTransaction() android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null) <unknown>.getJsonArray() <unknown>.ScreenData() java.util.Date.Date() java.util.Date.Date() <unknown>.set(<unknown>, long) <unknown>.getCurrentName() org.json.JSONObject.put(java.lang.String, org.json.JSONArray) <unknown>.set(<unknown>, long) org.json.JSONObject.put(java.lang.String, java.lang.String) org.apache.http.params.HttpConnectionParams.setConnectionTimeout(org.apache.http.params.HttpParams, int) org.json.JSONArray.length() <unknown>.set(<unknown>, java.lang.String) <unknown>.set(<unknown>, long) java.util.Date.getTime() <unknown>.set(<unknown>, <unknown>) <unknown>.set(<unknown>, <unknown>) org.json.JSONArray.put(java.lang.String) java.lang.String.equals(<unknown>) com.inovex.zabbixmobile.api.ZabbixService.importScreenItems(<unknown>) com.inovex.zabbixmobile.api.ZabbixService.HttpAuthorizationRequiredException.HttpAuthorizationRequiredException() <unknown>.getText() org.json.JSONObject.put(java.lang.String, org.json.JSONArray) com.inovex.zabbixmobile.api.ZabbixService.importEvents(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader, null) org.json.JSONObject.JSONObject() <unknown>.set(<unknown>, <unknown>) com.inovex.zabbixmobile.api.ZabbixService.importHostGroups(<unknown>) org.json.JSONObject.toString() java.lang.Integer.parseInt(<unknown>) android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null) org.apache.http.params.HttpProtocolParams.setContentCharset(org.apache.http.params.HttpParams, java.lang.String) <unknown>.get(<unknown>) java.lang.String.equals(<unknown>) <unknown>.set(<unknown>, <unknown>) <unknown>.nextValueToken() <unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>) org.json.JSONObject.put(java.lang.String, org.json.JSONArray) org.json.JSONObject.put(java.lang.String, java.lang.Integer) <unknown>.getText() <unknown>.set(<unknown>, <unknown>) org.apache.http.message.AbstractHttpMessage.addHeader(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject) org.json.JSONObject.getJSONArray(java.lang.String) java.security.KeyStore.load(null, null) java.lang.String.replace(java.lang.String, java.lang.String) java.lang.Long.parseLong(<unknown>) org.json.JSONObject.toString() com.inovex.zabbixmobile.api.ZabbixService.importTriggers(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader) android.util.Log.d(java.lang.String, java.lang.String) android.content.SharedPreferences.getString(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, java.lang.String) <unknown>.TriggerData() android.content.SharedPreferences.getString(java.lang.String, java.lang.String) android.content.Intent.Intent(<unknown>) org.json.JSONObject.put(java.lang.String, java.lang.String) org.apache.http.impl.client.AbstractHttpClient.getCredentialsProvider() <unknown>.set(<unknown>, <unknown>) java.io.IOException.IOException(java.lang.String) java.lang.String.trim() org.json.JSONObject.put(java.lang.String, org.json.JSONArray) java.lang.String.split(java.lang.String) java.lang.String.equals(java.lang.String) java.lang.String.endsWith(java.lang.String) <unknown>.set(<unknown>, int) com.inovex.zabbixmobile.api.ZabbixService.showProgress(int) <unknown>.ItemData() org.json.JSONObject.put(java.lang.String, int) <unknown>.set(<unknown>, <unknown>) org.codehaus.jackson.JsonParser.getText() android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null) org.apache.http.impl.client.DefaultHttpClient.DefaultHttpClient(org.apache.http.conn.ClientConnectionManager, org.apache.http.params.HttpParams) <unknown>.close() java.lang.IllegalStateException.IllegalStateException(java.lang.String) org.json.JSONObject.put(java.lang.String, java.lang.String) org.codehaus.jackson.JsonParser.nextToken() android.database.Cursor.getColumnIndex(<unknown>) org.json.JSONObject.put(java.lang.String, org.json.JSONArray) <unknown>.nextValueToken() com.inovex.zabbixmobile.api.ZabbixService._startTransaction() org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.set(<unknown>, java.lang.String) java.lang.String.substring(int, int) java.lang.Long.parseLong(<unknown>) org.json.JSONObject.put(java.lang.String, java.lang.String) org.json.JSONObject.getInt(java.lang.String) java.lang.String.equals(java.lang.String) <unknown>.set(<unknown>, <unknown>) <unknown>.set(<unknown>, <unknown>) java.security.KeyStore.getInstance(java.lang.String) java.lang.Integer.parseInt(<unknown>) java.lang.String.equals(java.lang.String) <unknown>.nextProperty() android.content.Intent.putExtra(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, null) <unknown>.set(<unknown>, int) java.io.BufferedReader.BufferedReader(java.io.InputStreamReader) com.inovex.zabbixmobile.api.ZabbixService.importEvents(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader, int) java.security.KeyStore.getDefaultType() java.lang.String.equals(<unknown>) <unknown>.getText() org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.set(<unknown>, java.lang.Object) org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.insert(android.database.sqlite.SQLiteDatabase) <unknown>.nextProperty() com.inovex.zabbixmobile.api.ZabbixService._startTransaction() org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.close() <unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>) org.json.JSONObject.put(java.lang.String, long) com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, null, int) <unknown>.getJsonArray() <unknown>.set(<unknown>, <unknown>) java.lang.String.equals(<unknown>) org.apache.http.conn.scheme.Scheme.Scheme(java.lang.String, org.apache.http.conn.scheme.PlainSocketFactory, int) org.json.JSONObject.put(java.lang.String, java.lang.String) java.lang.String.equals(<unknown>)"],
    "c_callsites_added_t": ["java.lang.String.startsWith(java.lang.String)"],
    "c_methods_t": ["ApplicationData ApplicationItemRelationData ArrayList, String BasicHttpParams BufferedReader CacheData ContentValues CustomSSLSocketFactory Date DefaultHttpClient EventData GraphData GraphItemData HashSet, Long HistoryDetailData HostData HostGroupData HttpAuthorizationRequiredException HttpPost IOException IllegalStateException InputStreamReader Intent ItemData JSONArray JSONObject JsonArrayOrObjectReader JsonFactory NoAPIAccessException PreconditionFailedException RuntimeException SQLiteQueryBuilder Scheme SchemeRegistry ScreenData ScreenItemData StringBuilder StringEntity ThreadSafeClientConnManager TriggerData UsernamePasswordCredentials X509TrustManager _commitTransactionIfRecommended _endTransaction _queryBuffer _queryStream _startTransaction add addHeader append appendWhere authenticate beginTransaction close contains createJsonParser createSocket d delete endTransaction endsWith equals execute get getBoolean getColumnIndex getContent getCredentialsProvider getCurrentName getCurrentToken getDefaultSharedPreferences getDefaultType getEntity getInstance getInt getJSONArray getJSONObject getJsonArray getLong getMessage getParams getReasonPhrase getResources getSocketFactory getStatusCode getStatusLine getString getText getTime i importApplications importEvents importGraphItems importHostGroups importHosts importItems importScreenItems importTriggers inTransaction indexOf init insert isCached isClosed length load matches min moveToFirst moveToNext next nextProperty nextToken nextValue nextValueToken parseColor parseDouble parseInt parseLong printStackTrace put putExtra query read register replace replaceAll sendBroadcast set setCached setConnectionTimeout setContentCharset setCredentials setEntity setHostnameVerifier setRedirecting setTables setTransactionSuccessful setVersion showProgress split startsWith substring toString trim update"],
    "id": "inovex/zax\u0000src/com/inovex/zabbixmobile/api/ZabbixService.java\u0000bae0223e3d008ee05a94f9b7db30eec6844110b6\u0000976f9d4001cf9c49a39f3b93acb53607ea8c0bfd",
    "p_comments_t": ["\t\t\t// create ApplicationItemRelation /** \n * public, for the unit test\n */\n /** \n * import the hosts from stream\n * @param jsonArray stream\n * @param numHosts count of hosts for progressbar. null if unknown.\n * @return Object[] {(String) comma-separated all Hostnames, (Long) 1. host id}\n * @throws JsonParseException\n * @throws IOException\n */\n \t\t\t// result array found /** \n * import graph items\n * @param graphItems\n * @return true, if graphid column has to be updated from -1 to the correct graphid later.\n * @throws JsonParseException\n * @throws NumberFormatException\n * @throws IOException\n */\n \t\t\t\t\t\t// save only every 20th \t\t\t// wrong password. token remains null \t\t\t// the past 2 hours \t\t\t\t\t// data are unuseable, e.g. because it's a string /** \n * @param events stream\n * @param numEvents if null, no progressbar-update AND only isert, if it does not exist. If !null, progressbar-update AND always insert without checking\n * @throws JsonParseException\n * @throws IOException\n */\n \t\t\t\t\t// Precondition failed / Looks like Zabbix 1.8.2 \t\t\t// get API version \t\t\t// if #0 \"other\" does not exist yet, it has to be created \t\t\t\t\t// later the IDs will be replaced with the correct /** \n * zabbix api call. data will be parsed as json object on-the-fly. Caution: use this only for api calls with a small return data.\n * @param method\n * @param params\n * @return\n * @throws ClientProtocolException\n * @throws IOException\n * @throws JSONException\n * @throws HttpAuthorizationRequiredException\n * @throws NoAPIAccessException\n */\n /** \n * begin sql transaction\n */\n \t\t\t\t\t\t// first do a new auth and then try the same api call again \t\t\t\t// no itemid \t\t\t// count of items /** \n * init\n * @param context android context\n * @param zabbixLocalDB sqlite\n */\n \t\t\t// create applications that does not exist \t\t\t\t// so we use a fiction \t\t\t// only resouretype == 0 /** \n * probably too old zabbix <= 1.8.2\n */\n /** \n * zabbix auth. user and pwd from app preferences\n * @return true success\n * @throws ClientProtocolException\n * @throws IOException\n * @throws JSONException\n * @throws HttpAuthorizationRequiredException\n * @throws NoAPIAccessException\n */\n /** \n * close the last http stream\n */\n \t\t\t// Workaround: historydetails only comes if you use the correct \"history\"-parameter. /** \n * transforms the progress\n * @param start 0% => start%\n * @param end 100% => end%\n */\n \t\t\t\t// in Zabbix version <2.0, this is not default \t\t\t\t// file not found \t\t\t\t\t// hex string => color int \t\tHttpClientParams.setRedirecting(params, true); // redirecting \t\t\t// if applicable replace placeholder \t\t\t// if graphid-column was not set, this must be done later. temporary graphid=-1 \t\t// for GUI unit test, just return true /** \n * imports the \"warning\"-triggers\n * @throws JSONException\n * @throws IOException\n * @throws HttpAuthorizationRequiredException\n * @throws NoAPIAccessException\n */\n \t\t\t// event is parsed and can be inserted into the db \t\tpublic static final int EVENT_GET_TIME_FROM_SHIFT = 7*24*60*60; // -7 days \t\t// http request \t\t\t\t\t// store hosts namen \t\t\t\t// http auth failed \t\t\t\t\t// at this point itemid and hostid is unknown \t\t\t\t\t// import triggers \t\t\t// we try them all, until we get results. /** \n * importiert ein trigger mit dem attribute itemid. ggf. wird der trigger zuerst gelöscht und neu angelegt. imports a trigger with the attribute itemid. if trigger already exists, it will be removed first.\n * @param triggerid\n * @throws JSONException\n * @throws IOException\n * @throws HttpAuthorizationRequiredException\n * @throws NoAPIAccessException\n */\n \t\t\t\t\t// import hosts \t\t\t// for unit test \t\t\t\t// ignore \t\t\tlong time_from = time_till - ZabbixConfig.HISTORY_GET_TIME_FROM_SHIFT; // jetzt-2h \t\t\t// or a json object /** \n * zabbix error: no api access\n */\n /** \n * counts the sql inserts/updates and do a transaction commit to save the memory\n */\n \t\t\t// send intent to GUI \t\t\t\t\t// before zabbix 2.x the name field was \"description\" \t\t\t\t\t// if we get an empty array, we try another history parameter \t\t\t\t\t// store the first item id \t\t// check if the trigger exists and if the itemid was set /** \n * global constants\n */\n \t\t\t\t// create \"other\" hostgroup #1 \t\t\t// if there's no application, the ID #0 must be added (for other) \t\t\t\t\t// because of this, all applicationrelations will be saved with itemid and hostid \"-1\". \t\tpublic static final int HISTORY_GET_TIME_FROM_SHIFT = 8*60*60; // -8h \t\t\t\t\t\t.put(\"history\", historytype) // for integer ? /** \n * interface to connect to the zabbix server\n */\n /** \n * acknowledge zabbix event. Sets ack-flag with comment. Caution: This is supported only for Zabbix version >= 1.8.4\n * @param eventid\n * @param comment\n * @return true, success.\n * @throws ClientProtocolException\n * @throws IOException\n * @throws JSONException\n * @throws HttpAuthorizationRequiredException\n * @throws NoAPIAccessException\n */\n \t\t\t// store the last stream to close it if an exception will be thrown /** \n * zabbix api call as stream.\n * @param method\n * @param params\n * @return stream im json array wrapper\n * @throws JSONException\n * @throws IOException\n * @throws HttpAuthorizationRequiredException\n * @throws NoAPIAccessException\n */\n \t\t// if applicable http auth \t\t\t// correct historytype found and there are data \t\t\t\t// count of the entries cannot be detected (zabbix bug), /** \n * import items from stream.\n * @param items stream\n * @param numItems count for progressbar, if 0 no progressbarupdate\n * @param checkBeforeInsert if true, only make an insert if item does not exist\n * @return the first item id\n * @throws JsonParseException\n * @throws IOException\n */\n \t\t\t// collect all graphids /** \n * http auth is needed\n */\n \t\t\t// ignore for unit test /** \n * commit sql transaction\n */\n \t\t\t// delete old graphs \t\t\t// host without group will get group #0 (other) \t\t\t// there's no result \t\t// if applicable, transform the progress \t\t\t// SSL not trusted \t\t\t// internet problem \t\t\tif (jp.nextToken() != JsonToken.START_ARRAY && jp.getCurrentToken() != JsonToken.START_OBJECT) { // go inside the array \t\tpublic static final int CACHE_LIFETIME_APPLICATIONS = 2*24*60*60; // 2 days \t\t\t\t\t// since zabbix 2.x is the name of the item \"name\" \t\t\t// now the \"-1\" IDs of applicationsrelation will be replaced with the correct itemID \t\t\t// get count of hosts /** \n * import the newest events\n * @throws ClientProtocolException\n * @throws IOException\n * @throws JSONException\n * @throws HttpAuthorizationRequiredException\n * @throws NoAPIAccessException\n */\n /** \n * updates the progressbar in the gui\n * @param i 0..100\n */\n \t\t\t\t\t\t// ignore \t\t\t\t\t// first do a new auth and then try the same api call again /** \n * import the newest event of a trigger\n * @param triggerid\n * @throws JSONException\n * @throws IOException\n * @throws HttpAuthorizationRequiredException\n * @throws NoAPIAccessException\n */\n \t\t// it can be an (empty) array \t\t\t// this parameter can be \"null\" or a number 0-4. Because we don't know when to use which, \t\t\t// clear triggers"],
    "p_email_sni": "jonas.gehring@inovex.de",
    "c_callsites_removed_t": ["<empty>"],
    "c_callsites_cs": "<unknown>.set(<unknown>, <unknown>)#org.apache.http.HttpEntity.getContent()#java.lang.String.equals(java.lang.String)#org.json.JSONArray.JSONArray()#<unknown>.set(<unknown>, java.lang.Object)#org.json.JSONObject.put(java.lang.String, java.lang.Integer)#org.json.JSONArray.put(java.lang.String)#org.json.JSONObject.JSONObject()#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.codehaus.jackson.JsonFactory.createJsonParser(java.io.InputStream)#java.lang.String.equals(<unknown>)#org.apache.http.StatusLine.getStatusCode()#<unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>)#org.json.JSONObject.put(java.lang.String, java.lang.String)#android.database.sqlite.SQLiteDatabase.inTransaction()#android.util.Log.d(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService._startTransaction()#java.lang.String.equals(java.lang.String)#org.codehaus.jackson.JsonFactory.JsonFactory()#com.inovex.zabbixmobile.api.ZabbixService._endTransaction()#org.json.JSONObject.put(java.lang.String, int)#android.content.ContentValues.ContentValues(int)#org.apache.http.conn.scheme.SchemeRegistry.SchemeRegistry()#<unknown>.insert(android.database.sqlite.SQLiteDatabase)#<unknown>.insert(android.database.sqlite.SQLiteDatabase)#com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject)#com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject)#com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject)#org.json.JSONObject.getJSONObject(java.lang.String)#java.io.InputStreamReader.InputStreamReader(java.io.InputStream)#android.content.Intent.putExtra(java.lang.String, <unknown>)#org.json.JSONArray.length()#java.lang.String.equals(java.lang.String)#<unknown>.set(<unknown>, <unknown>)#java.lang.String.equals(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService.PreconditionFailedException.PreconditionFailedException()#java.lang.StringBuilder.StringBuilder()#android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null)#<unknown>.nextValueToken()#org.json.JSONObject.JSONObject()#org.json.JSONObject.put(java.lang.String, int)#org.json.JSONObject.put(java.lang.String, org.json.JSONArray)#java.lang.String.equals(<unknown>)#<unknown>.get(<unknown>)#<unknown>.insert(android.database.sqlite.SQLiteDatabase)#android.content.Intent.putExtra(java.lang.String, <unknown>)#java.lang.String.equals(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService.importItems(<unknown>, int, boolean)#com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, java.lang.String, int)#android.util.Log.d(java.lang.String, java.lang.String)#org.json.JSONObject.put(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject)#org.apache.http.conn.scheme.Scheme.Scheme(java.lang.String, org.apache.http.conn.ssl.SSLSocketFactory, int)#org.apache.http.HttpEntity.getContent()#org.codehaus.jackson.JsonParser.close()#java.lang.String.equals(<unknown>)#<unknown>.nextValueToken()#<unknown>.getCurrentName()#org.json.JSONArray.JSONArray(java.util.Set<java.lang.Long>)#<unknown>.nextValueToken()#android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null)#<unknown>.getJsonArray()#com.inovex.zabbixmobile.api.ZabbixService._startTransaction()#org.json.JSONArray.JSONArray()#<unknown>.nextProperty()#java.lang.String.equals(java.lang.String)#android.database.sqlite.SQLiteDatabase.update(<unknown>, android.content.ContentValues, <unknown>, null)#java.util.Set<java.lang.Long>.add(<unknown>)#<unknown>.get(<unknown>)#<unknown>.get(<unknown>)#android.content.ContentValues.put(<unknown>, java.lang.Long)#java.lang.String.equals(java.lang.String)#org.apache.http.StatusLine.getReasonPhrase()#java.lang.RuntimeException.RuntimeException(java.lang.String)#<unknown>.nextProperty()#java.lang.Throwable.printStackTrace()#java.lang.String.equals(<unknown>)#java.lang.Long.parseLong(<unknown>)#org.json.JSONObject.put(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject)#<unknown>.getCurrentName()#android.content.ContentValues.put(<unknown>, java.lang.Long)#org.apache.http.entity.StringEntity.StringEntity(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject)#java.lang.String.equals(<unknown>)#<unknown>.EventData()#<unknown>.next()#<unknown>.set(<unknown>, <unknown>)#com.inovex.zabbixmobile.api.ZabbixService.CustomSSLSocketFactory.CustomSSLSocketFactory(java.security.KeyStore)#com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject)#<unknown>.getCurrentName()#java.util.List<java.lang.String>.add(java.lang.String)#org.json.JSONObject.put(java.lang.String, int)#<unknown>.getText()#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.apache.http.conn.ssl.SSLSocketFactory.setHostnameVerifier(org.apache.http.conn.ssl.X509HostnameVerifier)#<unknown>.set(<unknown>, <unknown>)#<unknown>.getText()#org.json.JSONObject.put(java.lang.String, long)#java.util.Date.Date()#org.json.JSONObject.put(java.lang.String, int)#org.json.JSONObject.put(java.lang.String, int)#<unknown>.set(<unknown>, <unknown>)#com.inovex.zabbixmobile.api.ZabbixService.authenticate()#android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null)#android.util.Log.d(java.lang.String, java.lang.String)#java.lang.String.equals(java.lang.String)#org.apache.http.HttpResponse.getEntity()#org.json.JSONObject.JSONObject()#com.inovex.zabbixmobile.api.ZabbixService.importItems(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader, int, boolean)#com.inovex.zabbixmobile.api.ZabbixService._startTransaction()#com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, null, int)#java.io.BufferedReader.read()#org.json.JSONObject.put(java.lang.String, long)#<unknown>.set(<unknown>, <unknown>)#android.database.Cursor.getLong(<unknown>)#java.lang.IllegalStateException.IllegalStateException(java.lang.String)#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.getCurrentName()#android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null)#android.util.Log.d(java.lang.String, java.lang.String)#<unknown>.set(<unknown>, <unknown>)#java.lang.String.equals(<unknown>)#org.json.JSONObject.put(java.lang.String, java.lang.String)#android.database.Cursor.moveToFirst()#com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, java.lang.String)#android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null)#java.lang.String.equals(java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, java.lang.String)#<unknown>.getText()#org.json.JSONObject.put(java.lang.String, java.lang.String)#android.content.Intent.putExtra(java.lang.String, <unknown>)#<unknown>.getCurrentName()#android.content.res.Resources.getString(<unknown>)#android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null)#android.database.sqlite.SQLiteDatabase.setTransactionSuccessful()#<unknown>.next()#<unknown>.getText()#<unknown>.nextValueToken()#com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject)#com.inovex.zabbixmobile.api.ZabbixService.showProgress(<unknown>)#java.io.IOException.IOException(java.lang.String)#<unknown>.getCurrentName()#android.util.Log.d(java.lang.String, java.lang.String)#java.lang.Object.toString()#org.json.JSONObject.toString()#<unknown>.set(<unknown>, <unknown>)#org.json.JSONArray.JSONArray()#org.apache.http.HttpResponse.getStatusLine()#org.json.JSONArray.JSONArray()#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.apache.http.impl.client.DefaultHttpClient.DefaultHttpClient()#org.json.JSONObject.put(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject)#org.apache.http.HttpResponse.getStatusLine()#java.lang.String.equals(<unknown>)#java.util.Date.Date()#android.util.Log.i(java.lang.String, java.lang.String)#android.content.Context.getResources()#org.apache.http.impl.client.CloseableHttpClient.execute(org.apache.http.client.methods.HttpPost)#com.inovex.zabbixmobile.api.ZabbixService._commitTransactionIfRecommended()#com.inovex.zabbixmobile.api.ZabbixService.importHostGroups(<unknown>)#android.content.Context.sendBroadcast(android.content.Intent)#android.content.Context.sendBroadcast(android.content.Intent)#com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, null, int)#java.lang.Integer.parseInt(<unknown>)#<unknown>.ApplicationData()#com.inovex.zabbixmobile.api.ZabbixService.NoAPIAccessException.NoAPIAccessException()#com.inovex.zabbixmobile.api.ZabbixService._commitTransactionIfRecommended()#<unknown>.getJsonArray()#org.apache.http.message.AbstractHttpMessage.addHeader(java.lang.String, java.lang.String)#org.json.JSONObject.put(java.lang.String, int)#java.lang.String.replace(java.lang.String, java.lang.String)#org.json.JSONArray.JSONArray()#<unknown>.set(<unknown>, <unknown>)#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.set(<unknown>, <unknown>)#org.json.JSONArray.JSONArray()#java.lang.String.equals(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, java.lang.String, int)#<unknown>.nextProperty()#<unknown>.set(<unknown>, java.lang.String)#org.json.JSONObject.JSONObject()#java.lang.String.contains(java.lang.String)#org.apache.http.client.methods.HttpEntityEnclosingRequestBase.setEntity(org.apache.http.entity.StringEntity)#com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject)#com.inovex.zabbixmobile.api.ZabbixService.importTriggers(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader)#org.json.JSONObject.put(java.lang.String, int)#<unknown>.HostGroupData()#<unknown>.JsonArrayOrObjectReader(org.codehaus.jackson.JsonParser)#<unknown>.HostGroupData()#<unknown>.nextProperty()#java.lang.Long.parseLong(<unknown>)#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.json.JSONObject.put(java.lang.String, org.json.JSONArray)#org.json.JSONObject.put(java.lang.String, java.lang.Integer)#<unknown>.set(<unknown>, <unknown>)#<unknown>.close()#org.json.JSONObject.put(java.lang.String, org.json.JSONArray)#<unknown>.set(<unknown>, <unknown>)#java.lang.String.equals(java.lang.String)#android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null)#<unknown>.next()#org.json.JSONObject.toString()#java.lang.String.equals(<unknown>)#java.lang.String.equals(<unknown>)#android.database.sqlite.SQLiteDatabase.query(<unknown>, null, <unknown>, null, null, null, null)#<unknown>.set(<unknown>, <unknown>)#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.CacheData()#<unknown>.getText()#com.inovex.zabbixmobile.api.ZabbixService._startTransaction()#<unknown>.set(<unknown>, <unknown>)#com.inovex.zabbixmobile.api.ZabbixService._endTransaction()#<unknown>.set(<unknown>, int)#<unknown>.getJsonArray()#java.lang.String.equals(<unknown>)#java.util.Date.getTime()#java.lang.String.equals(java.lang.String)#org.json.JSONObject.put(java.lang.String, int)#<unknown>.set(<unknown>, <unknown>)#java.lang.Integer.parseInt(<unknown>)#org.codehaus.jackson.JsonParser.getCurrentName()#<unknown>.nextProperty()#com.inovex.zabbixmobile.api.ZabbixService._endTransaction()#java.lang.String.equals(<unknown>)#org.json.JSONObject.put(java.lang.String, int)#android.database.sqlite.SQLiteDatabase.update(<unknown>, android.content.ContentValues, <unknown>, null)#com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject)#com.inovex.zabbixmobile.api.ZabbixService._endTransaction()#java.lang.StringBuilder.append(char)#<unknown>.set(<unknown>, <unknown>)#<unknown>.get(<unknown>)#<unknown>.set(<unknown>, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject)#org.json.JSONObject.put(java.lang.String, java.lang.String)#android.database.Cursor.getLong(<unknown>)#java.lang.String.equals(<unknown>)#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.json.JSONObject.JSONObject()#org.apache.http.params.HttpProtocolParams.setVersion(org.apache.http.params.HttpParams, org.apache.http.HttpVersion)#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.HistoryDetailData()#android.util.Log.d(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService._startTransaction()#<unknown>.next()#<unknown>.set(<unknown>, <unknown>)#<unknown>.nextValueToken()#org.json.JSONObject.JSONObject()#java.lang.String.equals(<unknown>)#java.lang.Long.parseLong(<unknown>)#java.lang.Integer.parseInt(<unknown>)#org.apache.http.client.methods.HttpPost.HttpPost(java.lang.String)#org.apache.http.StatusLine.getStatusCode()#<unknown>.set(<unknown>, int)#java.lang.String.equals(java.lang.String)#java.lang.String.equals(<unknown>)#java.lang.String.equals(<unknown>)#<unknown>.getCurrentName()#java.util.ArrayList<java.lang.String>.ArrayList, String()#com.inovex.zabbixmobile.api.ZabbixService._startTransaction()#com.inovex.zabbixmobile.api.ZabbixService.importTriggers(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader)#org.json.JSONArray.put(java.lang.String)#<unknown>.nextValueToken()#org.json.JSONArray.put(java.lang.String)#<unknown>.set(<unknown>, <unknown>)#org.json.JSONObject.put(java.lang.String, int)#com.inovex.zabbixmobile.api.ZabbixService.importItems(<unknown>, int, boolean)#org.json.JSONObject.JSONObject()#com.inovex.zabbixmobile.api.ZabbixService.importTriggers(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService.importGraphItems(<unknown>)#<unknown>.ScreenItemData()#<unknown>.set(<unknown>, <unknown>)#<unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>)#android.preference.PreferenceManager.getDefaultSharedPreferences(android.content.Context)#org.json.JSONObject.length()#<unknown>.nextValueToken()#java.util.HashSet<java.lang.Long>.HashSet, Long()#java.lang.String.equals(java.lang.String)#android.content.SharedPreferences.getBoolean(java.lang.String, boolean)#<unknown>.insert(android.database.sqlite.SQLiteDatabase)#org.json.JSONObject.put(java.lang.String, org.json.JSONArray)#<unknown>.close()#com.inovex.zabbixmobile.api.ZabbixService.importHosts(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader, int)#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.next()#android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null)#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.json.JSONObject.getString(java.lang.String)#<unknown>.set(<unknown>, <unknown>)#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.close()#org.json.JSONObject.getString(java.lang.String)#java.lang.String.equals(java.lang.String)#java.lang.Long.parseLong(<unknown>)#org.codehaus.jackson.JsonParser.isClosed()#org.json.JSONObject.put(java.lang.String, int)#org.json.JSONObject.put(java.lang.String, org.json.JSONArray)#java.lang.String.startsWith(java.lang.String)#org.json.JSONObject.put(java.lang.String, long)#<unknown>.close()#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.set(<unknown>, long)#org.json.JSONObject.put(java.lang.String, org.json.JSONObject)#<unknown>.set(<unknown>, <unknown>)#com.inovex.zabbixmobile.api.ZabbixService._endTransaction()#java.lang.String.replaceAll(java.lang.String, java.lang.String)#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.nextValueToken()#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.apache.http.params.BasicHttpParams.BasicHttpParams()#android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null)#android.database.sqlite.SQLiteDatabase.beginTransaction()#com.inovex.zabbixmobile.api.ZabbixService._commitTransactionIfRecommended()#com.inovex.zabbixmobile.api.ZabbixService._endTransaction()#java.lang.String.equals(<unknown>)#<unknown>.insert(android.database.sqlite.SQLiteDatabase)#<unknown>.insert(android.database.sqlite.SQLiteDatabase)#org.json.JSONObject.put(java.lang.String, int)#<unknown>.next()#com.inovex.zabbixmobile.api.ZabbixService._startTransaction()#<unknown>.getJsonArray()#android.content.SharedPreferences.getString(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, null, int)#javax.net.SocketFactory.createSocket()#java.lang.Long.parseLong(<unknown>)#org.apache.http.client.CredentialsProvider.setCredentials(org.apache.http.auth.AuthScope, org.apache.http.auth.UsernamePasswordCredentials)#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.next()#com.inovex.zabbixmobile.api.ZabbixService.HttpAuthorizationRequiredException.HttpAuthorizationRequiredException()#android.database.sqlite.SQLiteQueryBuilder.query(android.database.sqlite.SQLiteDatabase, null, null, null, null, null, null)#java.util.Date.Date()#com.inovex.zabbixmobile.api.ZabbixService._commitTransactionIfRecommended()#<unknown>.set(<unknown>, java.lang.String)#org.json.JSONObject.JSONObject()#<unknown>.next()#<unknown>.set(<unknown>, <unknown>)#<unknown>.set(<unknown>, <unknown>)#com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject)#java.lang.String.equals(java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, java.lang.String)#java.lang.String.indexOf(char)#android.database.sqlite.SQLiteDatabase.query(<unknown>, null, <unknown>, null, null, null, null)#android.preference.PreferenceManager.getDefaultSharedPreferences(android.content.Context)#<unknown>.nextProperty()#org.apache.http.impl.client.CloseableHttpClient.execute(org.apache.http.client.methods.HttpPost)#<unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>)#com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, java.lang.String)#org.json.JSONObject.JSONObject()#<unknown>.close()#android.database.Cursor.getColumnIndex(<unknown>)#android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null)#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.nextProperty()#org.apache.http.conn.scheme.PlainSocketFactory.getSocketFactory()#com.inovex.zabbixmobile.api.ZabbixService._commitTransactionIfRecommended()#com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject)#java.lang.StringBuilder.toString()#org.json.JSONObject.put(java.lang.String, java.lang.String)#android.database.sqlite.SQLiteQueryBuilder.SQLiteQueryBuilder()#<unknown>.insert(android.database.sqlite.SQLiteDatabase)#org.apache.http.conn.scheme.SchemeRegistry.register(org.apache.http.conn.scheme.Scheme)#<unknown>.set(<unknown>, <unknown>)#org.json.JSONObject.JSONObject(java.lang.String)#java.lang.String.equals(<unknown>)#<unknown>.set(<unknown>, <unknown>)#<unknown>.set(<unknown>, <unknown>)#java.lang.IllegalStateException.IllegalStateException(java.lang.String)#java.lang.Double.parseDouble(<unknown>)#android.content.ContentValues.put(<unknown>, java.lang.Long)#android.util.Log.i(java.lang.String, java.lang.String)#android.database.sqlite.SQLiteQueryBuilder.appendWhere(<unknown>)#org.apache.http.conn.scheme.SchemeRegistry.register(org.apache.http.conn.scheme.Scheme)#org.json.JSONObject.getInt(java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService.importHosts(<unknown>, null)#org.json.JSONObject.put(java.lang.String, boolean)#java.lang.Long.parseLong(<unknown>)#java.lang.String.indexOf(char)#java.lang.String.equals(java.lang.String)#android.database.sqlite.SQLiteQueryBuilder.appendWhere(<unknown>)#java.lang.String.length()#java.lang.String.equals(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject)#<unknown>.nextProperty()#<unknown>.next()#android.content.SharedPreferences.getString(java.lang.String, java.lang.String)#<unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>)#com.inovex.zabbixmobile.api.ZabbixService.importTriggers(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader)#<unknown>.GraphData()#org.json.JSONArray.put(java.lang.String)#org.apache.http.impl.client.AbstractHttpClient.getParams()#<unknown>.set(<unknown>, long)#<unknown>.set(<unknown>, <unknown>)#org.json.JSONObject.getJSONObject(java.lang.String)#org.json.JSONObject.put(java.lang.String, java.lang.String)#java.lang.String.equals(java.lang.String)#org.json.JSONObject.getString(java.lang.String)#java.lang.String.equals(<unknown>)#java.lang.String.equals(<unknown>)#<unknown>.getCurrentName()#java.lang.String.equals(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService.showProgress(int)#<unknown>.getCurrentName()#com.inovex.zabbixmobile.api.ZabbixService.importHosts(<unknown>, null)#com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, java.lang.String, int)#org.json.JSONObject.put(java.lang.String, int)#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.close()#java.lang.String.replace(java.lang.String, java.lang.String)#java.lang.String.equals(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject)#com.inovex.zabbixmobile.api.ZabbixService._endTransaction()#android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null)#android.database.Cursor.moveToNext()#<unknown>.HostData()#<unknown>.set(<unknown>, long)#<unknown>.next()#com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject)#android.database.sqlite.SQLiteQueryBuilder.setTables(<unknown>)#java.util.Date.getTime()#org.json.JSONObject.put(java.lang.String, long)#android.content.ContentValues.ContentValues(int)#java.lang.Long.parseLong(<unknown>)#org.apache.http.HttpResponse.getEntity()#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.getText()#java.lang.String.equals(java.lang.String)#<unknown>.set(<unknown>, <unknown>)#<unknown>.set(<unknown>, <unknown>)#javax.net.ssl.SSLContext.init(null, javax.net.ssl.TrustManager[], null)#android.database.sqlite.SQLiteDatabase.endTransaction()#java.lang.String.equals(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, java.lang.String)#android.util.Log.d(java.lang.String, java.lang.String)#<unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>)#<unknown>.next()#<unknown>.close()#<unknown>.insert(android.database.sqlite.SQLiteDatabase)#org.json.JSONObject.put(java.lang.String, java.lang.String)#java.lang.Throwable.getMessage()#java.lang.String.equals(<unknown>)#java.lang.String.equals(<unknown>)#<unknown>.set(<unknown>, <unknown>)#com.inovex.zabbixmobile.api.ZabbixService._endTransaction()#javax.net.ssl.SSLContext.getSocketFactory()#org.json.JSONObject.JSONObject()#android.content.Context.getResources()#org.json.JSONObject.put(java.lang.String, int)#com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, null)#com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, java.lang.String, int)#java.lang.String.matches(java.lang.String)#<unknown>.set(<unknown>, <unknown>)#org.json.JSONArray.put(java.lang.String)#<unknown>.set(<unknown>, <unknown>)#android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null)#android.content.Context.sendBroadcast(android.content.Intent)#org.json.JSONObject.getJSONObject(java.lang.String)#<unknown>.get(<unknown>)#android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null)#java.lang.String.equals(<unknown>)#android.content.SharedPreferences.getBoolean(java.lang.String, boolean)#java.lang.Throwable.printStackTrace()#android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null)#org.json.JSONObject.put(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService._startTransaction()#android.content.Intent.putExtra(java.lang.String, int)#org.json.JSONObject.JSONObject()#<unknown>.getText()#com.inovex.zabbixmobile.api.ZabbixService._endTransaction()#org.apache.http.client.methods.HttpPost.HttpPost(java.lang.String)#android.content.SharedPreferences.getString(java.lang.String, java.lang.String)#<unknown>.GraphItemData()#com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, java.lang.String, int)#<unknown>.nextValueToken()#org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager.ThreadSafeClientConnManager(org.apache.http.params.HttpParams, org.apache.http.conn.scheme.SchemeRegistry)#<unknown>.ApplicationItemRelationData()#java.lang.Object.toString()#android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null)#org.json.JSONArray.JSONArray()#java.lang.String.equals(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService._startTransaction()#org.json.JSONObject.put(java.lang.String, org.json.JSONArray)#com.inovex.zabbixmobile.api.ZabbixService.importApplications(int, int, <unknown>)#<unknown>.set(<unknown>, int)#org.json.JSONObject.put(java.lang.String, int)#com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, java.lang.String, int)#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.json.JSONObject.JSONObject()#java.lang.Math.min(int, int)#com.inovex.zabbixmobile.api.ZabbixService.showProgress(<unknown>)#java.lang.String.equals(java.lang.String)#android.content.Intent.Intent(<unknown>)#java.lang.String.equals(<unknown>)#org.json.JSONObject.put(java.lang.String, int)#javax.net.ssl.SSLContext.getInstance(java.lang.String)#android.content.res.Resources.getString(<unknown>)#org.json.JSONObject.JSONObject()#android.content.Intent.Intent(<unknown>)#java.lang.String.equals(<unknown>)#<unknown>.nextProperty()#javax.net.ssl.SSLSocketFactory.createSocket(java.net.Socket, java.lang.String, int, boolean)#org.json.JSONObject.put(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject)#<unknown>.get(<unknown>)#java.io.IOException.IOException(java.lang.String)#java.lang.String.trim()#java.lang.String.contains(java.lang.String)#org.apache.http.entity.StringEntity.StringEntity(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService._endTransaction()#.X509TrustManager()#com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject)#android.graphics.Color.parseColor(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, null)#org.json.JSONObject.getJSONArray(java.lang.String)#org.apache.http.client.params.HttpClientParams.setRedirecting(org.apache.http.params.HttpParams, boolean)#com.inovex.zabbixmobile.api.ZabbixService._startTransaction()#<unknown>.getCurrentName()#java.lang.String.equals(<unknown>)#java.lang.Long.parseLong(<unknown>)#android.util.Log.d(java.lang.String, java.lang.String)#org.codehaus.jackson.JsonParser.getCurrentToken()#org.codehaus.jackson.JsonParser.nextValue()#java.lang.Long.parseLong(<unknown>)#<unknown>.getText()#java.util.Date.getTime()#android.content.Intent.putExtra(java.lang.String, <unknown>)#android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null)#<unknown>.get(<unknown>)#android.database.Cursor.moveToFirst()#org.apache.http.client.methods.HttpEntityEnclosingRequestBase.setEntity(org.apache.http.entity.StringEntity)#com.inovex.zabbixmobile.api.ZabbixService._commitTransactionIfRecommended()#com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, null)#android.database.sqlite.SQLiteQueryBuilder.appendWhere(<unknown>)#org.apache.http.auth.UsernamePasswordCredentials.UsernamePasswordCredentials(java.lang.String, java.lang.String)#java.util.Date.getTime()#java.lang.String.equals(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService._endTransaction()#org.json.JSONObject.put(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService.authenticate()#java.lang.String.equals(<unknown>)#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.json.JSONObject.put(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService.NoAPIAccessException.NoAPIAccessException()#org.json.JSONArray.put(long)#com.inovex.zabbixmobile.api.ZabbixService._endTransaction()#android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null)#<unknown>.getJsonArray()#<unknown>.ScreenData()#java.util.Date.Date()#java.util.Date.Date()#<unknown>.set(<unknown>, long)#<unknown>.getCurrentName()#org.json.JSONObject.put(java.lang.String, org.json.JSONArray)#<unknown>.set(<unknown>, long)#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.apache.http.params.HttpConnectionParams.setConnectionTimeout(org.apache.http.params.HttpParams, int)#org.json.JSONArray.length()#<unknown>.set(<unknown>, java.lang.String)#<unknown>.set(<unknown>, long)#java.util.Date.getTime()#<unknown>.set(<unknown>, <unknown>)#<unknown>.set(<unknown>, <unknown>)#org.json.JSONArray.put(java.lang.String)#java.lang.String.equals(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService.importScreenItems(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService.HttpAuthorizationRequiredException.HttpAuthorizationRequiredException()#<unknown>.getText()#org.json.JSONObject.put(java.lang.String, org.json.JSONArray)#com.inovex.zabbixmobile.api.ZabbixService.importEvents(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader, null)#org.json.JSONObject.JSONObject()#<unknown>.set(<unknown>, <unknown>)#com.inovex.zabbixmobile.api.ZabbixService.importHostGroups(<unknown>)#org.json.JSONObject.toString()#java.lang.Integer.parseInt(<unknown>)#android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null)#org.apache.http.params.HttpProtocolParams.setContentCharset(org.apache.http.params.HttpParams, java.lang.String)#<unknown>.get(<unknown>)#java.lang.String.equals(<unknown>)#<unknown>.set(<unknown>, <unknown>)#<unknown>.nextValueToken()#<unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>)#org.json.JSONObject.put(java.lang.String, org.json.JSONArray)#org.json.JSONObject.put(java.lang.String, java.lang.Integer)#<unknown>.getText()#<unknown>.set(<unknown>, <unknown>)#org.apache.http.message.AbstractHttpMessage.addHeader(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject)#org.json.JSONObject.getJSONArray(java.lang.String)#java.security.KeyStore.load(null, null)#java.lang.String.replace(java.lang.String, java.lang.String)#java.lang.Long.parseLong(<unknown>)#org.json.JSONObject.toString()#com.inovex.zabbixmobile.api.ZabbixService.importTriggers(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader)#android.util.Log.d(java.lang.String, java.lang.String)#android.content.SharedPreferences.getString(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, java.lang.String)#<unknown>.TriggerData()#android.content.SharedPreferences.getString(java.lang.String, java.lang.String)#android.content.Intent.Intent(<unknown>)#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.apache.http.impl.client.AbstractHttpClient.getCredentialsProvider()#<unknown>.set(<unknown>, <unknown>)#java.io.IOException.IOException(java.lang.String)#java.lang.String.trim()#org.json.JSONObject.put(java.lang.String, org.json.JSONArray)#java.lang.String.split(java.lang.String)#java.lang.String.equals(java.lang.String)#java.lang.String.endsWith(java.lang.String)#<unknown>.set(<unknown>, int)#com.inovex.zabbixmobile.api.ZabbixService.showProgress(int)#<unknown>.ItemData()#org.json.JSONObject.put(java.lang.String, int)#<unknown>.set(<unknown>, <unknown>)#org.codehaus.jackson.JsonParser.getText()#android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null)#org.apache.http.impl.client.DefaultHttpClient.DefaultHttpClient(org.apache.http.conn.ClientConnectionManager, org.apache.http.params.HttpParams)#<unknown>.close()#java.lang.IllegalStateException.IllegalStateException(java.lang.String)#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.codehaus.jackson.JsonParser.nextToken()#android.database.Cursor.getColumnIndex(<unknown>)#org.json.JSONObject.put(java.lang.String, org.json.JSONArray)#<unknown>.nextValueToken()#com.inovex.zabbixmobile.api.ZabbixService._startTransaction()#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.set(<unknown>, java.lang.String)#java.lang.String.substring(int, int)#java.lang.Long.parseLong(<unknown>)#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.json.JSONObject.getInt(java.lang.String)#java.lang.String.equals(java.lang.String)#<unknown>.set(<unknown>, <unknown>)#<unknown>.set(<unknown>, <unknown>)#java.security.KeyStore.getInstance(java.lang.String)#java.lang.Integer.parseInt(<unknown>)#java.lang.String.equals(java.lang.String)#<unknown>.nextProperty()#android.content.Intent.putExtra(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, null)#<unknown>.set(<unknown>, int)#java.io.BufferedReader.BufferedReader(java.io.InputStreamReader)#com.inovex.zabbixmobile.api.ZabbixService.importEvents(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader, int)#java.security.KeyStore.getDefaultType()#java.lang.String.equals(<unknown>)#<unknown>.getText()#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.set(<unknown>, java.lang.Object)#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.insert(android.database.sqlite.SQLiteDatabase)#<unknown>.nextProperty()#com.inovex.zabbixmobile.api.ZabbixService._startTransaction()#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.close()#<unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>)#org.json.JSONObject.put(java.lang.String, long)#com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, null, int)#<unknown>.getJsonArray()#<unknown>.set(<unknown>, <unknown>)#java.lang.String.equals(<unknown>)#org.apache.http.conn.scheme.Scheme.Scheme(java.lang.String, org.apache.http.conn.scheme.PlainSocketFactory, int)#org.json.JSONObject.put(java.lang.String, java.lang.String)#java.lang.String.equals(<unknown>)",
    "p_body_t": ["<empty>"],
    "c_patch_t": [" \tpublic class ZabbixConfig {\n \t\tpublic static final int APPLICATION_GET_LIMIT = 1000;\n \t\tpublic static final int EVENTS_GET_LIMIT = 60;\n-\t\tpublic static final int HISTORY_GET_TIME_FROM_SHIFT = 8*60*60; // -8h\n+\t\tpublic static final int HISTORY_GET_TIME_FROM_SHIFT = 24*60*60; // -24h\n \t\tpublic static final int HISTORY_GET_LIMIT = 8000;\n \t\tpublic static final int HOSTGROUP_GET_LIMIT = 200;\n \t\tpublic static final int HOST_GET_LIMIT = 300;\n@@ -172,6 +172,11 @@ public class ZabbixService {\n \tprivate int transformProgressEnd;\n \tprivate boolean _notAuthorizedRetry;\n \tprivate boolean isVersion2 = true;\n+\t/**\n+\t * The API version. From 1.8.3 (maybe earlier) to 2.0 (excluded), this was 1.3. With 2.0, it changed to 1.4. \n+\t * Finally, since 2.0.4, the API version matches the program version.\n+\t */\n+\tprivate String apiVersion = \"\";\n \n \t/**\n \t * init\n@@ -499,8 +504,9 @@ public class ZabbixService {\n \t\t\t\t\t\"apiinfo.version\"\n \t\t\t\t\t, new JSONObject()\n \t\t\t);\n-\t\t\tisVersion2 = result.getString(\"result\").equals(\"1.4\");\n-\t\t\tLog.i(\"ZabbixService\", \"Zabbix Server Version: isVersion2=\"+isVersion2);\n+\t\t\tapiVersion = result.getString(\"result\");\n+\t\t\tisVersion2 = (apiVersion.equals(\"1.4\") || apiVersion.startsWith(\"2\"));\n+\t\t\tLog.i(\"ZabbixService\", \"Zabbix API Version: \" + apiVersion);\n \t\t}\n \t\treturn token != null;\n \t}\n@@ -802,7 +808,7 @@ public class ZabbixService {\n \n \t\t\t// the past 2 hours\n \t\t\tlong time_till = new Date().getTime() / 1000;\n-\t\t\tlong time_from = time_till - ZabbixConfig.HISTORY_GET_TIME_FROM_SHIFT; // jetzt-2h\n+\t\t\tlong time_from = time_till - ZabbixConfig.HISTORY_GET_TIME_FROM_SHIFT;\n \n \t\t\t// Workaround: historydetails only comes if you use the correct \"history\"-parameter.\n \t\t\t// this parameter can be \"null\" or a number 0-4. Because we don't know when to use which,"],
    "c_body_t": ["<empty>"],
    "c_email_sni": "jschamburger@inovex.de",
    "p_patch_t": [" \t */\n \tpublic void importTriggers() throws JSONException, IOException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n \t\tif (!isCached(TriggerData.TABLE_NAME, null)) {\n+\t\t\t// clear triggers\n+\t\t\tzabbixLocalDB.delete(TriggerData.TABLE_NAME, null, null);\n+\n \t\t\t_startTransaction();\n \n \t\t\tlong min = (new Date().getTime()/1000)-ZabbixConfig.STATUS_SHOW_TRIGGER_TIME;"],
    "repo_sni": "inovex/zax",
    "_version_": 1526823823713763328,
    "c_user_sni": "Johannes Schamburger",
    "c_callsites_added_cs": "java.lang.String.startsWith(java.lang.String)",
    "p_parents_ss": ["df53c588a80d246f2f77494f72b9fc4b285728ad"],
    "p_user_sni": "Jonas Gehring",
    "c_subject_t": ["- libraries are now in libs folder (as suggested by the Android documentation) - removed references to the source code of other projects - corrected distinction between API version 1.3, 1.4 and 2.x - enlarged time range of item history details - small bugfixes in main.xml and main_tablet.xml - compatibility with latest GraphView library"],
    "c_imports_added_cs": "<empty>",
    "c_callsites_removed_cs": "<empty>"
  }, {
    "c_patch_no_context_t": ["-\t\tonSongFinished(PlayerHater.FINISH_SKIP_BUTTON);\n+\t\tonSongFinished(nowPlaying(), PlayerHater.FINISH_SKIP_BUTTON);\n+\tpublic void enqueue(int position, Song song) {\n+\t\tgetQueue().addSongAtPosition(song, position);\n+\t}\n+\n+\t@Override\n-\t\tonSongFinished(PlayerHater.FINISH_SKIP_BUTTON);\n-\t\treturn getQueue().skipTo(position);\n+\t\tonSongFinished(nowPlaying(), PlayerHater.FINISH_SKIP_BUTTON);\n+\t\tif (getQueue().skipTo(position)) {\n+\t\t\treturn true;\n+\t\t} else {\n+\t\t\tcommitTransaction();\n+\t\t\treturn false;\n+\t\t}\n-\t\tonSongFinished(PlayerHater.FINISH_SKIP_BUTTON);\n+\t\tonSongFinished(nowPlaying(), PlayerHater.FINISH_SKIP_BUTTON);\n-\t\t\tonSongFinished(PlayerHater.FINISH_SKIP_BUTTON);\n+\t\t\tonSongFinished(nowPlaying(), PlayerHater.FINISH_SKIP_BUTTON);\n-\t\treturn getQueue().getPosition() + (isPlaying() ? 1 : 0);\n+\t\treturn getQueue().getPosition() + (getCurrentPosition() > 0 ? 1 : 0);\n-\t\tonSongChanged();\n+\t\tonSongChanged(nowPlaying);\n-\t\tonNextSongChanged();\n+\t\tonNextSongChanged(nextSong);\n-\t\t\tonSongFinished(PlayerHater.FINISH_SONG_END);\n+\t\t\tonSongFinished(nowPlaying(), PlayerHater.FINISH_SONG_END);\n-\t\t\tonSongFinished(PlayerHater.FINISH_ERROR);\n+\t\t\tonSongFinished(nowPlaying(), PlayerHater.FINISH_ERROR);"],
    "p_patch_no_context_t": ["-\t\tif (peekMediaPlayer() != null) {\n-\t\t\tmMediaPlayerPool.recycle(peekMediaPlayer(), was == null ? null\n-\t\t\t\t\t: was.getUri());\n-\t\t}\n+\t\tmMediaPlayerPool.recycle(peekMediaPlayer());\n-\t\t\tSynchronousPlayer player = peekMediaPlayer();\n+\t\t\tmMediaPlayerPool.recycle(peekMediaPlayer());\n-\t\t\tmMediaPlayerPool.recycle(player, nowPlaying().getUri());\n-\t\t\tSynchronousPlayer player = peekMediaPlayer();\n+\t\t\tmMediaPlayerPool.recycle(peekMediaPlayer());\n-\t\t\tmMediaPlayerPool.recycle(player, nowPlaying().getUri());"],
    "c_date_tdt": "Jun 5, 2013 7:19:33 AM",
    "c_imports_t": ["org.prx.playerhater.songs.SongQueue org.prx.playerhater.service.PlayerHaterService android.media.MediaPlayer.OnCompletionListener org.prx.playerhater.mediaplayer.SynchronousPlayer org.prx.playerhater.songs.SongQueue.OnQueuedSongsChangedListener android.media.MediaPlayer.OnErrorListener android.media.MediaPlayer org.prx.playerhater.mediaplayer.MediaPlayerPool"],
    "c_contents_t": ["/*******************************************************************************\n * Copyright 2013 Chris Rhoden, Rebecca Nesson, Public Radio Exchange\n * \n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * \n *   http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n ******************************************************************************/\n\npackage org.prx.playerhater;\n\nimport org.prx.playerhater.mediaplayer.MediaPlayerPool;\nimport org.prx.playerhater.mediaplayer.SynchronousPlayer;\nimport org.prx.playerhater.service.PlayerHaterService;\nimport org.prx.playerhater.songs.SongQueue;\nimport org.prx.playerhater.songs.SongQueue.OnQueuedSongsChangedListener;\n\nimport android.media.MediaPlayer;\nimport android.media.MediaPlayer.OnCompletionListener;\nimport android.media.MediaPlayer.OnErrorListener;\n\npublic class PlaybackService extends PlayerHaterService implements\n\t\tOnQueuedSongsChangedListener, OnErrorListener, OnCompletionListener {\n\n\tprivate MediaPlayerPool mMediaPlayerPool;\n\n\t@Override\n\tpublic void onCreate() {\n\t\tsuper.onCreate();\n\t\tmMediaPlayerPool = new MediaPlayerPool();\n\t}\n\n\t@Override\n\tpublic void onDestroy() {\n\t\tmMediaPlayerPool.release();\n\t\tsuper.onDestroy();\n\t}\n\n\t@Override\n\tpublic boolean play(Song song, int startTime) {\n\t\tonSongFinished(nowPlaying(), PlayerHater.FINISH_SKIP_BUTTON);\n\t\tonNowPlayingChanged(song, nowPlaying());\n\t\tgetQueue().appendAndSkip(song);\n\t\tseekTo(startTime);\n\t\treturn play();\n\t}\n\n\t@Override\n\tpublic boolean seekTo(int startTime) {\n\t\tgetMediaPlayer().seekTo(startTime);\n\t\treturn true;\n\t}\n\n\t@Override\n\tpublic int enqueue(Song song) {\n\t\tint q = getQueue().appendSong(song);\n\t\treturn q;\n\t}\n\n\t@Override\n\tpublic void enqueue(int position, Song song) {\n\t\tgetQueue().addSongAtPosition(song, position);\n\t}\n\n\t@Override\n\tpublic boolean skipTo(int position) {\n\t\tstartTransaction();\n\t\tonSongFinished(nowPlaying(), PlayerHater.FINISH_SKIP_BUTTON);\n\t\tif (getQueue().skipTo(position)) {\n\t\t\treturn true;\n\t\t} else {\n\t\t\tcommitTransaction();\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t@Override\n\tpublic void skip() {\n\t\tstartTransaction();\n\t\tonSongFinished(nowPlaying(), PlayerHater.FINISH_SKIP_BUTTON);\n\t\tgetQueue().next();\n\t}\n\n\t@Override\n\tpublic void skipBack() {\n\t\tif (getCurrentPosition() < 2000) {\n\t\t\tstartTransaction();\n\t\t\tonSongFinished(nowPlaying(), PlayerHater.FINISH_SKIP_BUTTON);\n\t\t\tgetQueue().back();\n\t\t} else {\n\t\t\tseekTo(0);\n\t\t}\n\t}\n\n\t@Override\n\tpublic void emptyQueue() {\n\t\tgetQueue().empty();\n\t}\n\n\t@Override\n\tpublic Song nowPlaying() {\n\t\treturn getQueue().getNowPlaying();\n\t}\n\n\tprivate SongQueue mQueue;\n\n\tprivate SongQueue getQueue() {\n\t\tif (mQueue == null) {\n\t\t\tmQueue = new SongQueue();\n\t\t\tmQueue.setQueuedSongsChangedListener(this);\n\t\t}\n\t\treturn mQueue;\n\t}\n\n\t@Override\n\tpublic int getQueueLength() {\n\t\treturn getQueue().size();\n\t}\n\n\t@Override\n\tpublic int getQueuePosition() {\n\t\treturn getQueue().getPosition() + (getCurrentPosition() > 0 ? 1 : 0);\n\t}\n\n\t@Override\n\tpublic boolean removeFromQueue(int position) {\n\t\treturn getQueue().remove(position);\n\t}\n\n\t@Override\n\tpublic void onNowPlayingChanged(Song nowPlaying, Song was) {\n\t\tstartTransaction();\n\t\tmMediaPlayerPool.recycle(peekMediaPlayer());\n\t\tif (nowPlaying == null) {\n\t\t\tsetMediaPlayer(null);\n\t\t} else {\n\t\t\tsetMediaPlayer(mMediaPlayerPool.getPlayer(getApplicationContext(),\n\t\t\t\t\tnowPlaying.getUri()));\n\t\t\tif (isPlaying()) {\n\t\t\t\tgetMediaPlayer().start();\n\t\t\t}\n\t\t}\n\t\tcommitTransaction();\n\t\tonSongChanged(nowPlaying);\n\t}\n\n\t@Override\n\tpublic void onNextSongChanged(Song nextSong, Song was) {\n\t\tif (nextSong != null) {\n\t\t\tmMediaPlayerPool\n\t\t\t\t\t.prepare(getApplicationContext(), nextSong.getUri());\n\t\t}\n\t\tonNextSongChanged(nextSong);\n\t}\n\n\t@Override\n\tpublic void onCompletion(MediaPlayer mp) {\n\t\tif (peekMediaPlayer() != null && peekMediaPlayer().equals(mp)) {\n\t\t\tstartTransaction();\n\t\t\tmMediaPlayerPool.recycle(peekMediaPlayer());\n\t\t\tsetMediaPlayer(null);\n\t\t\tonSongFinished(nowPlaying(), PlayerHater.FINISH_SONG_END);\n\t\t\tgetQueue().next();\n\t\t}\n\t}\n\n\t@Override\n\tpublic boolean onError(MediaPlayer mp, int what, int extra) {\n\t\tif (peekMediaPlayer() != null && peekMediaPlayer().equals(mp)) {\n\t\t\tstartTransaction();\n\t\t\tmMediaPlayerPool.recycle(peekMediaPlayer());\n\t\t\tsetMediaPlayer(null);\n\t\t\tonSongFinished(nowPlaying(), PlayerHater.FINISH_ERROR);\n\t\t\tgetQueue().next();\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\t@Override\n\tpublic Song getNextSong() {\n\t\treturn getQueue().getNextPlaying();\n\t}\n\n\t@Override\n\tprotected void setMediaPlayer(SynchronousPlayer mediaPlayer) {\n\t\tSynchronousPlayer oldPlayer = peekMediaPlayer();\n\t\tif (oldPlayer != null) {\n\t\t\toldPlayer.setOnErrorListener(null);\n\t\t\toldPlayer.setOnCompletionListener(null);\n\t\t}\n\t\tsuper.setMediaPlayer(mediaPlayer);\n\t\tif (mediaPlayer != null) {\n\t\t\tmediaPlayer.setOnErrorListener(this);\n\t\t\tmediaPlayer.setOnCompletionListener(this);\n\t\t}\n\t}\n}\n"],
    "p_date_tdt": "Jun 4, 2013 11:08:28 AM",
    "c_comments_t": ["<empty>"],
    "p_contents_t": ["/*******************************************************************************\n * Copyright 2013 Chris Rhoden, Rebecca Nesson, Public Radio Exchange\n * \n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * \n *   http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n ******************************************************************************/\n\npackage org.prx.playerhater;\n\nimport org.prx.playerhater.mediaplayer.MediaPlayerPool;\nimport org.prx.playerhater.mediaplayer.SynchronousPlayer;\nimport org.prx.playerhater.service.PlayerHaterService;\nimport org.prx.playerhater.songs.SongQueue;\nimport org.prx.playerhater.songs.SongQueue.OnQueuedSongsChangedListener;\n\nimport android.media.MediaPlayer;\nimport android.media.MediaPlayer.OnCompletionListener;\nimport android.media.MediaPlayer.OnErrorListener;\n\npublic class PlaybackService extends PlayerHaterService implements\n\t\tOnQueuedSongsChangedListener, OnErrorListener, OnCompletionListener {\n\n\tprivate MediaPlayerPool mMediaPlayerPool;\n\n\t@Override\n\tpublic void onCreate() {\n\t\tsuper.onCreate();\n\t\tmMediaPlayerPool = new MediaPlayerPool();\n\t}\n\n\t@Override\n\tpublic void onDestroy() {\n\t\tmMediaPlayerPool.release();\n\t\tsuper.onDestroy();\n\t}\n\n\t@Override\n\tpublic boolean play(Song song, int startTime) {\n\t\tonSongFinished(PlayerHater.FINISH_SKIP_BUTTON);\n\t\tonNowPlayingChanged(song, nowPlaying());\n\t\tgetQueue().appendAndSkip(song);\n\t\tseekTo(startTime);\n\t\treturn play();\n\t}\n\n\t@Override\n\tpublic boolean seekTo(int startTime) {\n\t\tgetMediaPlayer().seekTo(startTime);\n\t\treturn true;\n\t}\n\n\t@Override\n\tpublic int enqueue(Song song) {\n\t\tint q = getQueue().appendSong(song);\n\t\treturn q;\n\t}\n\n\t@Override\n\tpublic boolean skipTo(int position) {\n\t\tstartTransaction();\n\t\tonSongFinished(PlayerHater.FINISH_SKIP_BUTTON);\n\t\treturn getQueue().skipTo(position);\n\t}\n\n\t@Override\n\tpublic void skip() {\n\t\tstartTransaction();\n\t\tonSongFinished(PlayerHater.FINISH_SKIP_BUTTON);\n\t\tgetQueue().next();\n\t}\n\n\t@Override\n\tpublic void skipBack() {\n\t\tif (getCurrentPosition() < 2000) {\n\t\t\tstartTransaction();\n\t\t\tonSongFinished(PlayerHater.FINISH_SKIP_BUTTON);\n\t\t\tgetQueue().back();\n\t\t} else {\n\t\t\tseekTo(0);\n\t\t}\n\t}\n\n\t@Override\n\tpublic void emptyQueue() {\n\t\tgetQueue().empty();\n\t}\n\n\t@Override\n\tpublic Song nowPlaying() {\n\t\treturn getQueue().getNowPlaying();\n\t}\n\n\tprivate SongQueue mQueue;\n\n\tprivate SongQueue getQueue() {\n\t\tif (mQueue == null) {\n\t\t\tmQueue = new SongQueue();\n\t\t\tmQueue.setQueuedSongsChangedListener(this);\n\t\t}\n\t\treturn mQueue;\n\t}\n\n\t@Override\n\tpublic int getQueueLength() {\n\t\treturn getQueue().size();\n\t}\n\n\t@Override\n\tpublic int getQueuePosition() {\n\t\treturn getQueue().getPosition() + (isPlaying() ? 1 : 0);\n\t}\n\n\t@Override\n\tpublic boolean removeFromQueue(int position) {\n\t\treturn getQueue().remove(position);\n\t}\n\n\t@Override\n\tpublic void onNowPlayingChanged(Song nowPlaying, Song was) {\n\t\tstartTransaction();\n\t\tmMediaPlayerPool.recycle(peekMediaPlayer());\n\t\tif (nowPlaying == null) {\n\t\t\tsetMediaPlayer(null);\n\t\t} else {\n\t\t\tsetMediaPlayer(mMediaPlayerPool.getPlayer(getApplicationContext(),\n\t\t\t\t\tnowPlaying.getUri()));\n\t\t\tif (isPlaying()) {\n\t\t\t\tgetMediaPlayer().start();\n\t\t\t}\n\t\t}\n\t\tcommitTransaction();\n\t\tonSongChanged();\n\t}\n\n\t@Override\n\tpublic void onNextSongChanged(Song nextSong, Song was) {\n\t\tif (nextSong != null) {\n\t\t\tmMediaPlayerPool\n\t\t\t\t\t.prepare(getApplicationContext(), nextSong.getUri());\n\t\t}\n\t\tonNextSongChanged();\n\t}\n\n\t@Override\n\tpublic void onCompletion(MediaPlayer mp) {\n\t\tif (peekMediaPlayer() != null && peekMediaPlayer().equals(mp)) {\n\t\t\tstartTransaction();\n\t\t\tmMediaPlayerPool.recycle(peekMediaPlayer());\n\t\t\tsetMediaPlayer(null);\n\t\t\tonSongFinished(PlayerHater.FINISH_SONG_END);\n\t\t\tgetQueue().next();\n\t\t}\n\t}\n\n\t@Override\n\tpublic boolean onError(MediaPlayer mp, int what, int extra) {\n\t\tif (peekMediaPlayer() != null && peekMediaPlayer().equals(mp)) {\n\t\t\tstartTransaction();\n\t\t\tmMediaPlayerPool.recycle(peekMediaPlayer());\n\t\t\tsetMediaPlayer(null);\n\t\t\tonSongFinished(PlayerHater.FINISH_ERROR);\n\t\t\tgetQueue().next();\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\t@Override\n\tpublic Song getNextSong() {\n\t\treturn getQueue().getNextPlaying();\n\t}\n\n\t@Override\n\tprotected void setMediaPlayer(SynchronousPlayer mediaPlayer) {\n\t\tSynchronousPlayer oldPlayer = peekMediaPlayer();\n\t\tif (oldPlayer != null) {\n\t\t\toldPlayer.setOnErrorListener(null);\n\t\t\toldPlayer.setOnCompletionListener(null);\n\t\t}\n\t\tsuper.setMediaPlayer(mediaPlayer);\n\t\tif (mediaPlayer != null) {\n\t\t\tmediaPlayer.setOnErrorListener(this);\n\t\t\tmediaPlayer.setOnCompletionListener(this);\n\t\t}\n\t}\n}\n"],
    "c_hash_sni": "9e97d3f64b77342df67e00a029e5b35851ed7afa",
    "name_sni": "src/main/java/org/prx/playerhater/PlaybackService.java",
    "c_parents_ss": ["3eec6bb02717a9a34fd618ca7c0a107f96552477"],
    "c_imports_removed_t": ["<empty>"],
    "p_hash_sni": "3eec6bb02717a9a34fd618ca7c0a107f96552477",
    "c_imports_added_t": ["<empty>"],
    "p_methods_t": ["MediaPlayerPool SongQueue appendAndSkip appendSong back commitTransaction empty equals getApplicationContext getCurrentPosition getMediaPlayer getNextPlaying getNowPlaying getPlayer getPosition getQueue getUri isPlaying next nowPlaying onNextSongChanged onNowPlayingChanged onSongChanged onSongFinished peekMediaPlayer play prepare recycle release remove seekTo setMediaPlayer setOnCompletionListener setOnErrorListener setQueuedSongsChangedListener size skipTo start startTransaction"],
    "c_imports_removed_cs": "<empty>",
    "p_imports_t": ["org.prx.playerhater.songs.SongQueue org.prx.playerhater.service.PlayerHaterService android.media.MediaPlayer.OnCompletionListener org.prx.playerhater.mediaplayer.SynchronousPlayer org.prx.playerhater.songs.SongQueue.OnQueuedSongsChangedListener android.media.MediaPlayer.OnErrorListener android.media.MediaPlayer org.prx.playerhater.mediaplayer.MediaPlayerPool"],
    "p_subject_t": ["fixes"],
    "p_callsites_cs": "<unknown>.peekMediaPlayer()#<unknown>.setOnErrorListener(null)#<unknown>.recycle(<unknown>)#<unknown>.recycle(<unknown>)#org.prx.playerhater.PlaybackService.setMediaPlayer(null)#<unknown>.remove(int)#org.prx.playerhater.PlaybackService.getQueue()#<unknown>.setQueuedSongsChangedListener(org.prx.playerhater.PlaybackService)#<unknown>.SongQueue()#<unknown>.next()#<unknown>.next()#<unknown>.onSongFinished(<unknown>)#<unknown>.getMediaPlayer()#<unknown>.equals(android.media.MediaPlayer)#<unknown>.peekMediaPlayer()#<unknown>.setOnCompletionListener(org.prx.playerhater.PlaybackService)#org.prx.playerhater.PlaybackService.getQueue()#<unknown>.recycle(<unknown>)#<unknown>.onSongFinished(<unknown>)#<unknown>.next()#<unknown>.release()#<unknown>.startTransaction()#org.prx.playerhater.PlaybackService.getQueue()#org.prx.playerhater.PlaybackService.setMediaPlayer(null)#org.prx.playerhater.PlaybackService.onNowPlayingChanged(org.prx.playerhater.Song, org.prx.playerhater.Song)#org.prx.playerhater.PlaybackService.getQueue()#<unknown>.setOnErrorListener(org.prx.playerhater.PlaybackService)#org.prx.playerhater.PlaybackService.setMediaPlayer(<unknown>)#<unknown>.onSongFinished(<unknown>)#<unknown>.skipTo(int)#org.prx.playerhater.PlaybackService.onNextSongChanged()#org.prx.playerhater.PlaybackService.play()#<unknown>.appendSong(org.prx.playerhater.Song)#<unknown>.onSongFinished(<unknown>)#org.prx.playerhater.PlaybackService.getQueue()#org.prx.playerhater.PlaybackService.setMediaPlayer(null)#<unknown>.seekTo(int)#<unknown>.startTransaction()#org.prx.playerhater.PlaybackService.getQueue()#org.prx.playerhater.PlaybackService.getQueue()#<unknown>.startTransaction()#org.prx.playerhater.PlaybackService.getQueue()#<unknown>.start()#<unknown>.onSongChanged()#<unknown>.isPlaying()#<unknown>.getNextPlaying()#<unknown>.size()#<unknown>.commitTransaction()#<unknown>.startTransaction()#<unknown>.MediaPlayerPool()#<unknown>.getApplicationContext()#<unknown>.appendAndSkip(org.prx.playerhater.Song)#org.prx.playerhater.PlaybackService.getQueue()#org.prx.playerhater.PlaybackService.nowPlaying()#<unknown>.startTransaction()#<unknown>.peekMediaPlayer()#<unknown>.peekMediaPlayer()#org.prx.playerhater.PlaybackService.getQueue()#org.prx.playerhater.PlaybackService.getQueue()#<unknown>.getApplicationContext()#org.prx.playerhater.PlaybackService.seekTo(int)#<unknown>.empty()#org.prx.playerhater.PlaybackService.seekTo(int)#<unknown>.prepare(<unknown>, <unknown>)#<unknown>.onSongFinished(<unknown>)#<unknown>.equals(android.media.MediaPlayer)#<unknown>.getCurrentPosition()#<unknown>.getMediaPlayer()#<unknown>.getUri()#org.prx.playerhater.PlaybackService.getQueue()#<unknown>.onSongFinished(<unknown>)#<unknown>.isPlaying()#org.prx.playerhater.PlaybackService.getQueue()#<unknown>.getUri()#<unknown>.getNowPlaying()#<unknown>.back()#<unknown>.getPosition()#<unknown>.getPlayer(<unknown>, <unknown>)#<unknown>.setOnCompletionListener(null)#<unknown>.startTransaction()",
    "p_callsites_t": ["<unknown>.peekMediaPlayer() <unknown>.setOnErrorListener(null) <unknown>.recycle(<unknown>) <unknown>.recycle(<unknown>) org.prx.playerhater.PlaybackService.setMediaPlayer(null) <unknown>.remove(int) org.prx.playerhater.PlaybackService.getQueue() <unknown>.setQueuedSongsChangedListener(org.prx.playerhater.PlaybackService) <unknown>.SongQueue() <unknown>.next() <unknown>.next() <unknown>.onSongFinished(<unknown>) <unknown>.getMediaPlayer() <unknown>.equals(android.media.MediaPlayer) <unknown>.peekMediaPlayer() <unknown>.setOnCompletionListener(org.prx.playerhater.PlaybackService) org.prx.playerhater.PlaybackService.getQueue() <unknown>.recycle(<unknown>) <unknown>.onSongFinished(<unknown>) <unknown>.next() <unknown>.release() <unknown>.startTransaction() org.prx.playerhater.PlaybackService.getQueue() org.prx.playerhater.PlaybackService.setMediaPlayer(null) org.prx.playerhater.PlaybackService.onNowPlayingChanged(org.prx.playerhater.Song, org.prx.playerhater.Song) org.prx.playerhater.PlaybackService.getQueue() <unknown>.setOnErrorListener(org.prx.playerhater.PlaybackService) org.prx.playerhater.PlaybackService.setMediaPlayer(<unknown>) <unknown>.onSongFinished(<unknown>) <unknown>.skipTo(int) org.prx.playerhater.PlaybackService.onNextSongChanged() org.prx.playerhater.PlaybackService.play() <unknown>.appendSong(org.prx.playerhater.Song) <unknown>.onSongFinished(<unknown>) org.prx.playerhater.PlaybackService.getQueue() org.prx.playerhater.PlaybackService.setMediaPlayer(null) <unknown>.seekTo(int) <unknown>.startTransaction() org.prx.playerhater.PlaybackService.getQueue() org.prx.playerhater.PlaybackService.getQueue() <unknown>.startTransaction() org.prx.playerhater.PlaybackService.getQueue() <unknown>.start() <unknown>.onSongChanged() <unknown>.isPlaying() <unknown>.getNextPlaying() <unknown>.size() <unknown>.commitTransaction() <unknown>.startTransaction() <unknown>.MediaPlayerPool() <unknown>.getApplicationContext() <unknown>.appendAndSkip(org.prx.playerhater.Song) org.prx.playerhater.PlaybackService.getQueue() org.prx.playerhater.PlaybackService.nowPlaying() <unknown>.startTransaction() <unknown>.peekMediaPlayer() <unknown>.peekMediaPlayer() org.prx.playerhater.PlaybackService.getQueue() org.prx.playerhater.PlaybackService.getQueue() <unknown>.getApplicationContext() org.prx.playerhater.PlaybackService.seekTo(int) <unknown>.empty() org.prx.playerhater.PlaybackService.seekTo(int) <unknown>.prepare(<unknown>, <unknown>) <unknown>.onSongFinished(<unknown>) <unknown>.equals(android.media.MediaPlayer) <unknown>.getCurrentPosition() <unknown>.getMediaPlayer() <unknown>.getUri() org.prx.playerhater.PlaybackService.getQueue() <unknown>.onSongFinished(<unknown>) <unknown>.isPlaying() org.prx.playerhater.PlaybackService.getQueue() <unknown>.getUri() <unknown>.getNowPlaying() <unknown>.back() <unknown>.getPosition() <unknown>.getPlayer(<unknown>, <unknown>) <unknown>.setOnCompletionListener(null) <unknown>.startTransaction()"],
    "c_callsites_t": ["<unknown>.peekMediaPlayer() <unknown>.setOnErrorListener(null) <unknown>.recycle(<unknown>) <unknown>.recycle(<unknown>) org.prx.playerhater.PlaybackService.setMediaPlayer(null) <unknown>.remove(int) org.prx.playerhater.PlaybackService.getQueue() <unknown>.setQueuedSongsChangedListener(org.prx.playerhater.PlaybackService) <unknown>.SongQueue() <unknown>.onSongFinished(org.prx.playerhater.Song, <unknown>) org.prx.playerhater.PlaybackService.nowPlaying() <unknown>.commitTransaction() <unknown>.next() <unknown>.next() <unknown>.getMediaPlayer() <unknown>.equals(android.media.MediaPlayer) <unknown>.peekMediaPlayer() <unknown>.onSongFinished(org.prx.playerhater.Song, <unknown>) <unknown>.setOnCompletionListener(org.prx.playerhater.PlaybackService) org.prx.playerhater.PlaybackService.getQueue() <unknown>.recycle(<unknown>) org.prx.playerhater.PlaybackService.onNextSongChanged(org.prx.playerhater.Song) <unknown>.next() <unknown>.release() <unknown>.addSongAtPosition(org.prx.playerhater.Song, int) org.prx.playerhater.PlaybackService.getQueue() <unknown>.startTransaction() org.prx.playerhater.PlaybackService.setMediaPlayer(null) org.prx.playerhater.PlaybackService.onNowPlayingChanged(org.prx.playerhater.Song, org.prx.playerhater.Song) org.prx.playerhater.PlaybackService.getQueue() <unknown>.setOnErrorListener(org.prx.playerhater.PlaybackService) org.prx.playerhater.PlaybackService.setMediaPlayer(<unknown>) org.prx.playerhater.PlaybackService.nowPlaying() <unknown>.skipTo(int) <unknown>.onSongFinished(org.prx.playerhater.Song, <unknown>) org.prx.playerhater.PlaybackService.play() <unknown>.appendSong(org.prx.playerhater.Song) <unknown>.getCurrentPosition() org.prx.playerhater.PlaybackService.setMediaPlayer(null) org.prx.playerhater.PlaybackService.getQueue() <unknown>.seekTo(int) <unknown>.startTransaction() org.prx.playerhater.PlaybackService.getQueue() org.prx.playerhater.PlaybackService.getQueue() <unknown>.startTransaction() org.prx.playerhater.PlaybackService.getQueue() <unknown>.start() org.prx.playerhater.PlaybackService.nowPlaying() <unknown>.onSongFinished(org.prx.playerhater.Song, <unknown>) <unknown>.isPlaying() <unknown>.getNextPlaying() <unknown>.size() <unknown>.commitTransaction() <unknown>.startTransaction() org.prx.playerhater.PlaybackService.nowPlaying() <unknown>.MediaPlayerPool() <unknown>.getApplicationContext() <unknown>.appendAndSkip(org.prx.playerhater.Song) org.prx.playerhater.PlaybackService.getQueue() org.prx.playerhater.PlaybackService.nowPlaying() <unknown>.onSongFinished(org.prx.playerhater.Song, <unknown>) <unknown>.peekMediaPlayer() <unknown>.startTransaction() org.prx.playerhater.PlaybackService.nowPlaying() <unknown>.peekMediaPlayer() org.prx.playerhater.PlaybackService.getQueue() org.prx.playerhater.PlaybackService.getQueue() <unknown>.getApplicationContext() org.prx.playerhater.PlaybackService.seekTo(int) <unknown>.empty() org.prx.playerhater.PlaybackService.seekTo(int) <unknown>.prepare(<unknown>, <unknown>) <unknown>.equals(android.media.MediaPlayer) <unknown>.getCurrentPosition() <unknown>.getMediaPlayer() <unknown>.getUri() org.prx.playerhater.PlaybackService.getQueue() <unknown>.onSongFinished(org.prx.playerhater.Song, <unknown>) org.prx.playerhater.PlaybackService.getQueue() <unknown>.getUri() <unknown>.getNowPlaying() <unknown>.back() <unknown>.getPosition() <unknown>.getPlayer(<unknown>, <unknown>) <unknown>.onSongChanged(org.prx.playerhater.Song) <unknown>.startTransaction() <unknown>.setOnCompletionListener(null)"],
    "c_callsites_added_t": ["<unknown>.onSongFinished(org.prx.playerhater.Song, <unknown>) <unknown>.onSongFinished(org.prx.playerhater.Song, <unknown>) org.prx.playerhater.PlaybackService.onNextSongChanged(org.prx.playerhater.Song) <unknown>.addSongAtPosition(org.prx.playerhater.Song, int) org.prx.playerhater.PlaybackService.nowPlaying() <unknown>.onSongFinished(org.prx.playerhater.Song, <unknown>) org.prx.playerhater.PlaybackService.nowPlaying() <unknown>.onSongFinished(org.prx.playerhater.Song, <unknown>) <unknown>.commitTransaction() org.prx.playerhater.PlaybackService.nowPlaying() org.prx.playerhater.PlaybackService.nowPlaying() <unknown>.onSongFinished(org.prx.playerhater.Song, <unknown>) org.prx.playerhater.PlaybackService.nowPlaying() <unknown>.getCurrentPosition() <unknown>.onSongFinished(org.prx.playerhater.Song, <unknown>) <unknown>.onSongChanged(org.prx.playerhater.Song)"],
    "c_methods_t": ["MediaPlayerPool SongQueue addSongAtPosition appendAndSkip appendSong back commitTransaction empty equals getApplicationContext getCurrentPosition getMediaPlayer getNextPlaying getNowPlaying getPlayer getPosition getQueue getUri isPlaying next nowPlaying onNextSongChanged onNowPlayingChanged onSongChanged onSongFinished peekMediaPlayer play prepare recycle release remove seekTo setMediaPlayer setOnCompletionListener setOnErrorListener setQueuedSongsChangedListener size skipTo start startTransaction"],
    "id": "chrisrhoden/PlayerHater\u0000src/main/java/org/prx/playerhater/PlaybackService.java\u00003eec6bb02717a9a34fd618ca7c0a107f96552477\u00009e97d3f64b77342df67e00a029e5b35851ed7afa",
    "p_comments_t": ["<empty>"],
    "p_email_sni": "carhoden@gmail.com",
    "c_callsites_removed_t": ["<unknown>.onSongFinished(<unknown>) <unknown>.onSongFinished(<unknown>) <unknown>.onSongFinished(<unknown>) org.prx.playerhater.PlaybackService.onNextSongChanged() <unknown>.onSongFinished(<unknown>) <unknown>.onSongChanged() <unknown>.onSongFinished(<unknown>) <unknown>.onSongFinished(<unknown>) <unknown>.isPlaying()"],
    "c_callsites_cs": "<unknown>.peekMediaPlayer()#<unknown>.setOnErrorListener(null)#<unknown>.recycle(<unknown>)#<unknown>.recycle(<unknown>)#org.prx.playerhater.PlaybackService.setMediaPlayer(null)#<unknown>.remove(int)#org.prx.playerhater.PlaybackService.getQueue()#<unknown>.setQueuedSongsChangedListener(org.prx.playerhater.PlaybackService)#<unknown>.SongQueue()#<unknown>.onSongFinished(org.prx.playerhater.Song, <unknown>)#org.prx.playerhater.PlaybackService.nowPlaying()#<unknown>.commitTransaction()#<unknown>.next()#<unknown>.next()#<unknown>.getMediaPlayer()#<unknown>.equals(android.media.MediaPlayer)#<unknown>.peekMediaPlayer()#<unknown>.onSongFinished(org.prx.playerhater.Song, <unknown>)#<unknown>.setOnCompletionListener(org.prx.playerhater.PlaybackService)#org.prx.playerhater.PlaybackService.getQueue()#<unknown>.recycle(<unknown>)#org.prx.playerhater.PlaybackService.onNextSongChanged(org.prx.playerhater.Song)#<unknown>.next()#<unknown>.release()#<unknown>.addSongAtPosition(org.prx.playerhater.Song, int)#org.prx.playerhater.PlaybackService.getQueue()#<unknown>.startTransaction()#org.prx.playerhater.PlaybackService.setMediaPlayer(null)#org.prx.playerhater.PlaybackService.onNowPlayingChanged(org.prx.playerhater.Song, org.prx.playerhater.Song)#org.prx.playerhater.PlaybackService.getQueue()#<unknown>.setOnErrorListener(org.prx.playerhater.PlaybackService)#org.prx.playerhater.PlaybackService.setMediaPlayer(<unknown>)#org.prx.playerhater.PlaybackService.nowPlaying()#<unknown>.skipTo(int)#<unknown>.onSongFinished(org.prx.playerhater.Song, <unknown>)#org.prx.playerhater.PlaybackService.play()#<unknown>.appendSong(org.prx.playerhater.Song)#<unknown>.getCurrentPosition()#org.prx.playerhater.PlaybackService.setMediaPlayer(null)#org.prx.playerhater.PlaybackService.getQueue()#<unknown>.seekTo(int)#<unknown>.startTransaction()#org.prx.playerhater.PlaybackService.getQueue()#org.prx.playerhater.PlaybackService.getQueue()#<unknown>.startTransaction()#org.prx.playerhater.PlaybackService.getQueue()#<unknown>.start()#org.prx.playerhater.PlaybackService.nowPlaying()#<unknown>.onSongFinished(org.prx.playerhater.Song, <unknown>)#<unknown>.isPlaying()#<unknown>.getNextPlaying()#<unknown>.size()#<unknown>.commitTransaction()#<unknown>.startTransaction()#org.prx.playerhater.PlaybackService.nowPlaying()#<unknown>.MediaPlayerPool()#<unknown>.getApplicationContext()#<unknown>.appendAndSkip(org.prx.playerhater.Song)#org.prx.playerhater.PlaybackService.getQueue()#org.prx.playerhater.PlaybackService.nowPlaying()#<unknown>.onSongFinished(org.prx.playerhater.Song, <unknown>)#<unknown>.peekMediaPlayer()#<unknown>.startTransaction()#org.prx.playerhater.PlaybackService.nowPlaying()#<unknown>.peekMediaPlayer()#org.prx.playerhater.PlaybackService.getQueue()#org.prx.playerhater.PlaybackService.getQueue()#<unknown>.getApplicationContext()#org.prx.playerhater.PlaybackService.seekTo(int)#<unknown>.empty()#org.prx.playerhater.PlaybackService.seekTo(int)#<unknown>.prepare(<unknown>, <unknown>)#<unknown>.equals(android.media.MediaPlayer)#<unknown>.getCurrentPosition()#<unknown>.getMediaPlayer()#<unknown>.getUri()#org.prx.playerhater.PlaybackService.getQueue()#<unknown>.onSongFinished(org.prx.playerhater.Song, <unknown>)#org.prx.playerhater.PlaybackService.getQueue()#<unknown>.getUri()#<unknown>.getNowPlaying()#<unknown>.back()#<unknown>.getPosition()#<unknown>.getPlayer(<unknown>, <unknown>)#<unknown>.onSongChanged(org.prx.playerhater.Song)#<unknown>.startTransaction()#<unknown>.setOnCompletionListener(null)",
    "p_body_t": ["<empty>"],
    "c_patch_t": [" \n \t@Override\n \tpublic boolean play(Song song, int startTime) {\n-\t\tonSongFinished(PlayerHater.FINISH_SKIP_BUTTON);\n+\t\tonSongFinished(nowPlaying(), PlayerHater.FINISH_SKIP_BUTTON);\n \t\tonNowPlayingChanged(song, nowPlaying());\n \t\tgetQueue().appendAndSkip(song);\n \t\tseekTo(startTime);\n@@ -65,16 +65,26 @@ public class PlaybackService extends PlayerHaterService implements\n \t}\n \n \t@Override\n+\tpublic void enqueue(int position, Song song) {\n+\t\tgetQueue().addSongAtPosition(song, position);\n+\t}\n+\n+\t@Override\n \tpublic boolean skipTo(int position) {\n \t\tstartTransaction();\n-\t\tonSongFinished(PlayerHater.FINISH_SKIP_BUTTON);\n-\t\treturn getQueue().skipTo(position);\n+\t\tonSongFinished(nowPlaying(), PlayerHater.FINISH_SKIP_BUTTON);\n+\t\tif (getQueue().skipTo(position)) {\n+\t\t\treturn true;\n+\t\t} else {\n+\t\t\tcommitTransaction();\n+\t\t\treturn false;\n+\t\t}\n \t}\n \n \t@Override\n \tpublic void skip() {\n \t\tstartTransaction();\n-\t\tonSongFinished(PlayerHater.FINISH_SKIP_BUTTON);\n+\t\tonSongFinished(nowPlaying(), PlayerHater.FINISH_SKIP_BUTTON);\n \t\tgetQueue().next();\n \t}\n \n@@ -82,7 +92,7 @@ public class PlaybackService extends PlayerHaterService implements\n \tpublic void skipBack() {\n \t\tif (getCurrentPosition() < 2000) {\n \t\t\tstartTransaction();\n-\t\t\tonSongFinished(PlayerHater.FINISH_SKIP_BUTTON);\n+\t\t\tonSongFinished(nowPlaying(), PlayerHater.FINISH_SKIP_BUTTON);\n \t\t\tgetQueue().back();\n \t\t} else {\n \t\t\tseekTo(0);\n@@ -116,7 +126,7 @@ public class PlaybackService extends PlayerHaterService implements\n \n \t@Override\n \tpublic int getQueuePosition() {\n-\t\treturn getQueue().getPosition() + (isPlaying() ? 1 : 0);\n+\t\treturn getQueue().getPosition() + (getCurrentPosition() > 0 ? 1 : 0);\n \t}\n \n \t@Override\n@@ -138,7 +148,7 @@ public class PlaybackService extends PlayerHaterService implements\n \t\t\t}\n \t\t}\n \t\tcommitTransaction();\n-\t\tonSongChanged();\n+\t\tonSongChanged(nowPlaying);\n \t}\n \n \t@Override\n@@ -147,7 +157,7 @@ public class PlaybackService extends PlayerHaterService implements\n \t\t\tmMediaPlayerPool\n \t\t\t\t\t.prepare(getApplicationContext(), nextSong.getUri());\n \t\t}\n-\t\tonNextSongChanged();\n+\t\tonNextSongChanged(nextSong);\n \t}\n \n \t@Override\n@@ -156,7 +166,7 @@ public class PlaybackService extends PlayerHaterService implements\n \t\t\tstartTransaction();\n \t\t\tmMediaPlayerPool.recycle(peekMediaPlayer());\n \t\t\tsetMediaPlayer(null);\n-\t\t\tonSongFinished(PlayerHater.FINISH_SONG_END);\n+\t\t\tonSongFinished(nowPlaying(), PlayerHater.FINISH_SONG_END);\n \t\t\tgetQueue().next();\n \t\t}\n \t}\n@@ -167,7 +177,7 @@ public class PlaybackService extends PlayerHaterService implements\n \t\t\tstartTransaction();\n \t\t\tmMediaPlayerPool.recycle(peekMediaPlayer());\n \t\t\tsetMediaPlayer(null);\n-\t\t\tonSongFinished(PlayerHater.FINISH_ERROR);\n+\t\t\tonSongFinished(nowPlaying(), PlayerHater.FINISH_ERROR);\n \t\t\tgetQueue().next();\n \t\t\treturn true;\n \t\t}"],
    "c_body_t": ["<empty>"],
    "c_email_sni": "carhoden@gmail.com",
    "p_patch_t": [" \t@Override\n \tpublic void onNowPlayingChanged(Song nowPlaying, Song was) {\n \t\tstartTransaction();\n-\t\tif (peekMediaPlayer() != null) {\n-\t\t\tmMediaPlayerPool.recycle(peekMediaPlayer(), was == null ? null\n-\t\t\t\t\t: was.getUri());\n-\t\t}\n+\t\tmMediaPlayerPool.recycle(peekMediaPlayer());\n \t\tif (nowPlaying == null) {\n \t\t\tsetMediaPlayer(null);\n \t\t} else {\n@@ -157,9 +154,8 @@ public class PlaybackService extends PlayerHaterService implements\n \tpublic void onCompletion(MediaPlayer mp) {\n \t\tif (peekMediaPlayer() != null && peekMediaPlayer().equals(mp)) {\n \t\t\tstartTransaction();\n-\t\t\tSynchronousPlayer player = peekMediaPlayer();\n+\t\t\tmMediaPlayerPool.recycle(peekMediaPlayer());\n \t\t\tsetMediaPlayer(null);\n-\t\t\tmMediaPlayerPool.recycle(player, nowPlaying().getUri());\n \t\t\tonSongFinished(PlayerHater.FINISH_SONG_END);\n \t\t\tgetQueue().next();\n \t\t}\n@@ -169,9 +165,8 @@ public class PlaybackService extends PlayerHaterService implements\n \tpublic boolean onError(MediaPlayer mp, int what, int extra) {\n \t\tif (peekMediaPlayer() != null && peekMediaPlayer().equals(mp)) {\n \t\t\tstartTransaction();\n-\t\t\tSynchronousPlayer player = peekMediaPlayer();\n+\t\t\tmMediaPlayerPool.recycle(peekMediaPlayer());\n \t\t\tsetMediaPlayer(null);\n-\t\t\tmMediaPlayerPool.recycle(player, nowPlaying().getUri());\n \t\t\tonSongFinished(PlayerHater.FINISH_ERROR);\n \t\t\tgetQueue().next();\n \t\t\treturn true;"],
    "repo_sni": "chrisrhoden/PlayerHater",
    "_version_": 1526803907616964608,
    "c_user_sni": "chrisrhoden",
    "c_callsites_added_cs": "<unknown>.onSongFinished(org.prx.playerhater.Song, <unknown>)#<unknown>.onSongFinished(org.prx.playerhater.Song, <unknown>)#org.prx.playerhater.PlaybackService.onNextSongChanged(org.prx.playerhater.Song)#<unknown>.addSongAtPosition(org.prx.playerhater.Song, int)#org.prx.playerhater.PlaybackService.nowPlaying()#<unknown>.onSongFinished(org.prx.playerhater.Song, <unknown>)#org.prx.playerhater.PlaybackService.nowPlaying()#<unknown>.onSongFinished(org.prx.playerhater.Song, <unknown>)#<unknown>.commitTransaction()#org.prx.playerhater.PlaybackService.nowPlaying()#org.prx.playerhater.PlaybackService.nowPlaying()#<unknown>.onSongFinished(org.prx.playerhater.Song, <unknown>)#org.prx.playerhater.PlaybackService.nowPlaying()#<unknown>.getCurrentPosition()#<unknown>.onSongFinished(org.prx.playerhater.Song, <unknown>)#<unknown>.onSongChanged(org.prx.playerhater.Song)",
    "p_parents_ss": ["080589b32d9174c485c3d5acf959c200c6e78654"],
    "p_user_sni": "chrisrhoden",
    "c_subject_t": ["allow enqueueing at a specific position and other fixes"],
    "c_imports_added_cs": "<empty>",
    "c_callsites_removed_cs": "<unknown>.onSongFinished(<unknown>)#<unknown>.onSongFinished(<unknown>)#<unknown>.onSongFinished(<unknown>)#org.prx.playerhater.PlaybackService.onNextSongChanged()#<unknown>.onSongFinished(<unknown>)#<unknown>.onSongChanged()#<unknown>.onSongFinished(<unknown>)#<unknown>.onSongFinished(<unknown>)#<unknown>.isPlaying()"
  }, {
    "c_patch_no_context_t": ["-\tprivate MediaPlayerPool mMediaPlayerPool;\n+\tprivate MediaPlayerPool<SynchronousPlayer> mMediaPlayerPool;\n-\t\tmMediaPlayerPool = new MediaPlayerPool();\n+\t\tmMediaPlayerPool = MediaPlayerPool.getInstance(SynchronousPlayer.class);"],
    "p_patch_no_context_t": ["-"],
    "c_date_tdt": "Jun 14, 2013 12:22:13 PM",
    "c_imports_t": ["org.prx.playerhater.songs.SongQueue org.prx.playerhater.service.PlayerHaterService android.media.MediaPlayer.OnCompletionListener org.prx.playerhater.mediaplayer.SynchronousPlayer org.prx.playerhater.songs.SongQueue.OnQueuedSongsChangedListener android.media.MediaPlayer.OnErrorListener android.media.MediaPlayer org.prx.playerhater.mediaplayer.MediaPlayerPool"],
    "c_contents_t": ["/*******************************************************************************\n * Copyright 2013 Chris Rhoden, Rebecca Nesson, Public Radio Exchange\n * \n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * \n *   http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n ******************************************************************************/\npackage org.prx.playerhater;\n\nimport org.prx.playerhater.mediaplayer.MediaPlayerPool;\nimport org.prx.playerhater.mediaplayer.SynchronousPlayer;\nimport org.prx.playerhater.service.PlayerHaterService;\nimport org.prx.playerhater.songs.SongQueue;\nimport org.prx.playerhater.songs.SongQueue.OnQueuedSongsChangedListener;\n\nimport android.media.MediaPlayer;\nimport android.media.MediaPlayer.OnCompletionListener;\nimport android.media.MediaPlayer.OnErrorListener;\n\npublic class PlaybackService extends PlayerHaterService implements\n\t\tOnQueuedSongsChangedListener, OnErrorListener, OnCompletionListener {\n\n\tprivate MediaPlayerPool<SynchronousPlayer> mMediaPlayerPool;\n\n\t@Override\n\tpublic void onCreate() {\n\t\tsuper.onCreate();\n\t\tmMediaPlayerPool = MediaPlayerPool.getInstance(SynchronousPlayer.class);\n\t}\n\n\t@Override\n\tpublic void onDestroy() {\n\t\tmMediaPlayerPool.release();\n\t\tsuper.onDestroy();\n\t}\n\n\t@Override\n\tpublic boolean play(Song song, int startTime) {\n\t\tonSongFinished(nowPlaying(), PlayerHater.FINISH_SKIP_BUTTON);\n\t\tonNowPlayingChanged(song, nowPlaying());\n\t\tgetQueue().appendAndSkip(song);\n\t\tseekTo(startTime);\n\t\treturn play();\n\t}\n\n\t@Override\n\tpublic boolean seekTo(int startTime) {\n\t\tgetMediaPlayer().seekTo(startTime);\n\t\treturn true;\n\t}\n\n\t@Override\n\tpublic int enqueue(Song song) {\n\t\tint q = getQueue().appendSong(song);\n\t\treturn q;\n\t}\n\n\t@Override\n\tpublic void enqueue(int position, Song song) {\n\t\tgetQueue().addSongAtPosition(song, position);\n\t}\n\n\t@Override\n\tpublic boolean skipTo(int position) {\n\t\tstartTransaction();\n\t\tonSongFinished(nowPlaying(), PlayerHater.FINISH_SKIP_BUTTON);\n\t\tif (getQueue().skipTo(position)) {\n\t\t\treturn true;\n\t\t} else {\n\t\t\tcommitTransaction();\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t@Override\n\tpublic void skip() {\n\t\tif (nextAllowed()) {\n\t\t\tstartTransaction();\n\t\t\tonSongFinished(nowPlaying(), PlayerHater.FINISH_SKIP_BUTTON);\n\t\t\tgetQueue().next();\n\t\t}\n\t}\n\n\t@Override\n\tpublic void skipBack() {\n\t\tif (previousAllowed()) {\n\t\t\tif (getCurrentPosition() < 2000) {\n\t\t\t\tstartTransaction();\n\t\t\t\tonSongFinished(nowPlaying(), PlayerHater.FINISH_SKIP_BUTTON);\n\t\t\t\tgetQueue().back();\n\t\t\t} else {\n\t\t\t\tseekTo(0);\n\t\t\t}\n\t\t}\n\t}\n\n\t@Override\n\tpublic void emptyQueue() {\n\t\tgetQueue().empty();\n\t}\n\n\t@Override\n\tpublic Song nowPlaying() {\n\t\treturn getQueue().getNowPlaying();\n\t}\n\n\tprivate SongQueue mQueue;\n\n\tprivate SongQueue getQueue() {\n\t\tif (mQueue == null) {\n\t\t\tmQueue = new SongQueue();\n\t\t\tmQueue.setQueuedSongsChangedListener(this);\n\t\t}\n\t\treturn mQueue;\n\t}\n\n\t@Override\n\tpublic int getQueueLength() {\n\t\treturn getQueue().size();\n\t}\n\n\t@Override\n\tpublic int getQueuePosition() {\n\t\treturn getQueue().getPosition() - (getCurrentPosition() > 0 ? 0 : 1);\n\t}\n\n\t@Override\n\tpublic boolean removeFromQueue(int position) {\n\t\treturn getQueue().remove(position);\n\t}\n\n\t@Override\n\tpublic void onNowPlayingChanged(Song nowPlaying, Song was) {\n\t\tstartTransaction();\n\t\tmMediaPlayerPool.recycle(peekMediaPlayer());\n\t\tif (nowPlaying == null) {\n\t\t\tsetMediaPlayer(null);\n\t\t} else {\n\t\t\tsetMediaPlayer(mMediaPlayerPool.getPlayer(getApplicationContext(),\n\t\t\t\t\tnowPlaying.getUri()));\n\t\t\tif (isPlaying()) {\n\t\t\t\tgetMediaPlayer().start();\n\t\t\t}\n\t\t}\n\t\tcommitTransaction();\n\t\tonSongChanged(nowPlaying);\n\t}\n\n\t@Override\n\tpublic void onNextSongChanged(Song nextSong, Song was) {\n\t\tif (nextSong != null) {\n\t\t\tmMediaPlayerPool\n\t\t\t\t\t.prepare(getApplicationContext(), nextSong.getUri());\n\t\t}\n\t\tonNextSongChanged(nextSong);\n\t}\n\n\t@Override\n\tpublic void onCompletion(MediaPlayer mp) {\n\t\tif (peekMediaPlayer() != null && peekMediaPlayer().equals(mp)) {\n\t\t\tstartTransaction();\n\t\t\tmMediaPlayerPool.recycle(peekMediaPlayer());\n\t\t\tsetMediaPlayer(null);\n\t\t\tonSongFinished(nowPlaying(), PlayerHater.FINISH_SONG_END);\n\t\t\tgetQueue().next();\n\t\t}\n\t}\n\n\t@Override\n\tpublic boolean onError(MediaPlayer mp, int what, int extra) {\n\t\tif (peekMediaPlayer() != null && peekMediaPlayer().equals(mp)) {\n\t\t\tstartTransaction();\n\t\t\tmMediaPlayerPool.recycle(peekMediaPlayer());\n\t\t\tsetMediaPlayer(null);\n\t\t\tonSongFinished(nowPlaying(), PlayerHater.FINISH_ERROR);\n\t\t\tgetQueue().next();\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\t@Override\n\tpublic Song getNextSong() {\n\t\treturn getQueue().getNextPlaying();\n\t}\n\n\t@Override\n\tprotected synchronized void setMediaPlayer(SynchronousPlayer mediaPlayer) {\n\t\tSynchronousPlayer oldPlayer = peekMediaPlayer();\n\t\tif (oldPlayer != null) {\n\t\t\toldPlayer.setOnErrorListener(null);\n\t\t\toldPlayer.setOnCompletionListener(null);\n\t\t}\n\t\tsuper.setMediaPlayer(mediaPlayer);\n\t\tif (mediaPlayer != null) {\n\t\t\tmediaPlayer.setOnErrorListener(this);\n\t\t\tmediaPlayer.setOnCompletionListener(this);\n\t\t}\n\t}\n}\n"],
    "p_date_tdt": "Jun 14, 2013 11:56:16 AM",
    "c_comments_t": ["<empty>"],
    "p_contents_t": ["/*******************************************************************************\n * Copyright 2013 Chris Rhoden, Rebecca Nesson, Public Radio Exchange\n * \n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * \n *   http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n ******************************************************************************/\npackage org.prx.playerhater;\n\nimport org.prx.playerhater.mediaplayer.MediaPlayerPool;\nimport org.prx.playerhater.mediaplayer.SynchronousPlayer;\nimport org.prx.playerhater.service.PlayerHaterService;\nimport org.prx.playerhater.songs.SongQueue;\nimport org.prx.playerhater.songs.SongQueue.OnQueuedSongsChangedListener;\n\nimport android.media.MediaPlayer;\nimport android.media.MediaPlayer.OnCompletionListener;\nimport android.media.MediaPlayer.OnErrorListener;\n\npublic class PlaybackService extends PlayerHaterService implements\n\t\tOnQueuedSongsChangedListener, OnErrorListener, OnCompletionListener {\n\n\tprivate MediaPlayerPool mMediaPlayerPool;\n\n\t@Override\n\tpublic void onCreate() {\n\t\tsuper.onCreate();\n\t\tmMediaPlayerPool = new MediaPlayerPool();\n\t}\n\n\t@Override\n\tpublic void onDestroy() {\n\t\tmMediaPlayerPool.release();\n\t\tsuper.onDestroy();\n\t}\n\n\t@Override\n\tpublic boolean play(Song song, int startTime) {\n\t\tonSongFinished(nowPlaying(), PlayerHater.FINISH_SKIP_BUTTON);\n\t\tonNowPlayingChanged(song, nowPlaying());\n\t\tgetQueue().appendAndSkip(song);\n\t\tseekTo(startTime);\n\t\treturn play();\n\t}\n\n\t@Override\n\tpublic boolean seekTo(int startTime) {\n\t\tgetMediaPlayer().seekTo(startTime);\n\t\treturn true;\n\t}\n\n\t@Override\n\tpublic int enqueue(Song song) {\n\t\tint q = getQueue().appendSong(song);\n\t\treturn q;\n\t}\n\n\t@Override\n\tpublic void enqueue(int position, Song song) {\n\t\tgetQueue().addSongAtPosition(song, position);\n\t}\n\n\t@Override\n\tpublic boolean skipTo(int position) {\n\t\tstartTransaction();\n\t\tonSongFinished(nowPlaying(), PlayerHater.FINISH_SKIP_BUTTON);\n\t\tif (getQueue().skipTo(position)) {\n\t\t\treturn true;\n\t\t} else {\n\t\t\tcommitTransaction();\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t@Override\n\tpublic void skip() {\n\t\tif (nextAllowed()) {\n\t\t\tstartTransaction();\n\t\t\tonSongFinished(nowPlaying(), PlayerHater.FINISH_SKIP_BUTTON);\n\t\t\tgetQueue().next();\n\t\t}\n\t}\n\n\t@Override\n\tpublic void skipBack() {\n\t\tif (previousAllowed()) {\n\t\t\tif (getCurrentPosition() < 2000) {\n\t\t\t\tstartTransaction();\n\t\t\t\tonSongFinished(nowPlaying(), PlayerHater.FINISH_SKIP_BUTTON);\n\t\t\t\tgetQueue().back();\n\t\t\t} else {\n\t\t\t\tseekTo(0);\n\t\t\t}\n\t\t}\n\t}\n\n\t@Override\n\tpublic void emptyQueue() {\n\t\tgetQueue().empty();\n\t}\n\n\t@Override\n\tpublic Song nowPlaying() {\n\t\treturn getQueue().getNowPlaying();\n\t}\n\n\tprivate SongQueue mQueue;\n\n\tprivate SongQueue getQueue() {\n\t\tif (mQueue == null) {\n\t\t\tmQueue = new SongQueue();\n\t\t\tmQueue.setQueuedSongsChangedListener(this);\n\t\t}\n\t\treturn mQueue;\n\t}\n\n\t@Override\n\tpublic int getQueueLength() {\n\t\treturn getQueue().size();\n\t}\n\n\t@Override\n\tpublic int getQueuePosition() {\n\t\treturn getQueue().getPosition() - (getCurrentPosition() > 0 ? 0 : 1);\n\t}\n\n\t@Override\n\tpublic boolean removeFromQueue(int position) {\n\t\treturn getQueue().remove(position);\n\t}\n\n\t@Override\n\tpublic void onNowPlayingChanged(Song nowPlaying, Song was) {\n\t\tstartTransaction();\n\t\tmMediaPlayerPool.recycle(peekMediaPlayer());\n\t\tif (nowPlaying == null) {\n\t\t\tsetMediaPlayer(null);\n\t\t} else {\n\t\t\tsetMediaPlayer(mMediaPlayerPool.getPlayer(getApplicationContext(),\n\t\t\t\t\tnowPlaying.getUri()));\n\t\t\tif (isPlaying()) {\n\t\t\t\tgetMediaPlayer().start();\n\t\t\t}\n\t\t}\n\t\tcommitTransaction();\n\t\tonSongChanged(nowPlaying);\n\t}\n\n\t@Override\n\tpublic void onNextSongChanged(Song nextSong, Song was) {\n\t\tif (nextSong != null) {\n\t\t\tmMediaPlayerPool\n\t\t\t\t\t.prepare(getApplicationContext(), nextSong.getUri());\n\t\t}\n\t\tonNextSongChanged(nextSong);\n\t}\n\n\t@Override\n\tpublic void onCompletion(MediaPlayer mp) {\n\t\tif (peekMediaPlayer() != null && peekMediaPlayer().equals(mp)) {\n\t\t\tstartTransaction();\n\t\t\tmMediaPlayerPool.recycle(peekMediaPlayer());\n\t\t\tsetMediaPlayer(null);\n\t\t\tonSongFinished(nowPlaying(), PlayerHater.FINISH_SONG_END);\n\t\t\tgetQueue().next();\n\t\t}\n\t}\n\n\t@Override\n\tpublic boolean onError(MediaPlayer mp, int what, int extra) {\n\t\tif (peekMediaPlayer() != null && peekMediaPlayer().equals(mp)) {\n\t\t\tstartTransaction();\n\t\t\tmMediaPlayerPool.recycle(peekMediaPlayer());\n\t\t\tsetMediaPlayer(null);\n\t\t\tonSongFinished(nowPlaying(), PlayerHater.FINISH_ERROR);\n\t\t\tgetQueue().next();\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\t@Override\n\tpublic Song getNextSong() {\n\t\treturn getQueue().getNextPlaying();\n\t}\n\n\t@Override\n\tprotected synchronized void setMediaPlayer(SynchronousPlayer mediaPlayer) {\n\t\tSynchronousPlayer oldPlayer = peekMediaPlayer();\n\t\tif (oldPlayer != null) {\n\t\t\toldPlayer.setOnErrorListener(null);\n\t\t\toldPlayer.setOnCompletionListener(null);\n\t\t}\n\t\tsuper.setMediaPlayer(mediaPlayer);\n\t\tif (mediaPlayer != null) {\n\t\t\tmediaPlayer.setOnErrorListener(this);\n\t\t\tmediaPlayer.setOnCompletionListener(this);\n\t\t}\n\t}\n}\n"],
    "c_hash_sni": "3daf80a7f1ca48a34011221f1156479f6843ef88",
    "name_sni": "src/main/java/org/prx/playerhater/PlaybackService.java",
    "c_parents_ss": ["507230ea2070740a9a3528c29e1c2dadf83e1d25"],
    "c_imports_removed_t": ["<empty>"],
    "p_hash_sni": "507230ea2070740a9a3528c29e1c2dadf83e1d25",
    "c_imports_added_t": ["<empty>"],
    "p_methods_t": ["MediaPlayerPool SongQueue addSongAtPosition appendAndSkip appendSong back commitTransaction empty equals getApplicationContext getCurrentPosition getMediaPlayer getNextPlaying getNowPlaying getPlayer getPosition getQueue getUri isPlaying next nextAllowed nowPlaying onNextSongChanged onNowPlayingChanged onSongChanged onSongFinished peekMediaPlayer play prepare previousAllowed recycle release remove seekTo setMediaPlayer setOnCompletionListener setOnErrorListener setQueuedSongsChangedListener size skipTo start startTransaction"],
    "c_imports_removed_cs": "<empty>",
    "p_imports_t": ["org.prx.playerhater.songs.SongQueue org.prx.playerhater.service.PlayerHaterService android.media.MediaPlayer.OnCompletionListener org.prx.playerhater.mediaplayer.SynchronousPlayer org.prx.playerhater.songs.SongQueue.OnQueuedSongsChangedListener android.media.MediaPlayer.OnErrorListener android.media.MediaPlayer org.prx.playerhater.mediaplayer.MediaPlayerPool"],
    "p_subject_t": ["copyright"],
    "p_callsites_cs": "<unknown>.peekMediaPlayer()#<unknown>.setOnErrorListener(null)#<unknown>.recycle(<unknown>)#<unknown>.recycle(<unknown>)#org.prx.playerhater.PlaybackService.setMediaPlayer(null)#<unknown>.remove(int)#<unknown>.nextAllowed()#org.prx.playerhater.PlaybackService.getQueue()#<unknown>.previousAllowed()#<unknown>.setQueuedSongsChangedListener(org.prx.playerhater.PlaybackService)#<unknown>.SongQueue()#<unknown>.onSongFinished(org.prx.playerhater.Song, <unknown>)#org.prx.playerhater.PlaybackService.nowPlaying()#<unknown>.commitTransaction()#<unknown>.next()#<unknown>.next()#<unknown>.getMediaPlayer()#<unknown>.equals(android.media.MediaPlayer)#<unknown>.peekMediaPlayer()#<unknown>.onSongFinished(org.prx.playerhater.Song, <unknown>)#<unknown>.setOnCompletionListener(org.prx.playerhater.PlaybackService)#org.prx.playerhater.PlaybackService.getQueue()#<unknown>.recycle(<unknown>)#org.prx.playerhater.PlaybackService.onNextSongChanged(org.prx.playerhater.Song)#<unknown>.next()#<unknown>.release()#<unknown>.addSongAtPosition(org.prx.playerhater.Song, int)#org.prx.playerhater.PlaybackService.getQueue()#<unknown>.startTransaction()#org.prx.playerhater.PlaybackService.setMediaPlayer(null)#org.prx.playerhater.PlaybackService.onNowPlayingChanged(org.prx.playerhater.Song, org.prx.playerhater.Song)#org.prx.playerhater.PlaybackService.getQueue()#<unknown>.setOnErrorListener(org.prx.playerhater.PlaybackService)#org.prx.playerhater.PlaybackService.setMediaPlayer(<unknown>)#org.prx.playerhater.PlaybackService.nowPlaying()#<unknown>.skipTo(int)#<unknown>.onSongFinished(org.prx.playerhater.Song, <unknown>)#org.prx.playerhater.PlaybackService.play()#<unknown>.appendSong(org.prx.playerhater.Song)#<unknown>.getCurrentPosition()#org.prx.playerhater.PlaybackService.setMediaPlayer(null)#org.prx.playerhater.PlaybackService.getQueue()#<unknown>.seekTo(int)#<unknown>.startTransaction()#org.prx.playerhater.PlaybackService.getQueue()#org.prx.playerhater.PlaybackService.getQueue()#<unknown>.startTransaction()#org.prx.playerhater.PlaybackService.getQueue()#<unknown>.start()#org.prx.playerhater.PlaybackService.nowPlaying()#<unknown>.onSongFinished(org.prx.playerhater.Song, <unknown>)#<unknown>.isPlaying()#<unknown>.getNextPlaying()#<unknown>.size()#<unknown>.commitTransaction()#<unknown>.startTransaction()#org.prx.playerhater.PlaybackService.nowPlaying()#<unknown>.MediaPlayerPool()#<unknown>.getApplicationContext()#<unknown>.appendAndSkip(org.prx.playerhater.Song)#org.prx.playerhater.PlaybackService.getQueue()#org.prx.playerhater.PlaybackService.nowPlaying()#<unknown>.onSongFinished(org.prx.playerhater.Song, <unknown>)#<unknown>.peekMediaPlayer()#<unknown>.startTransaction()#org.prx.playerhater.PlaybackService.nowPlaying()#<unknown>.peekMediaPlayer()#org.prx.playerhater.PlaybackService.getQueue()#org.prx.playerhater.PlaybackService.getQueue()#<unknown>.getApplicationContext()#org.prx.playerhater.PlaybackService.seekTo(int)#<unknown>.empty()#org.prx.playerhater.PlaybackService.seekTo(int)#<unknown>.prepare(<unknown>, <unknown>)#<unknown>.equals(android.media.MediaPlayer)#<unknown>.getCurrentPosition()#<unknown>.getMediaPlayer()#<unknown>.getUri()#org.prx.playerhater.PlaybackService.getQueue()#<unknown>.onSongFinished(org.prx.playerhater.Song, <unknown>)#org.prx.playerhater.PlaybackService.getQueue()#<unknown>.getUri()#<unknown>.getNowPlaying()#<unknown>.back()#<unknown>.getPosition()#<unknown>.getPlayer(<unknown>, <unknown>)#<unknown>.onSongChanged(org.prx.playerhater.Song)#<unknown>.startTransaction()#<unknown>.setOnCompletionListener(null)",
    "p_callsites_t": ["<unknown>.peekMediaPlayer() <unknown>.setOnErrorListener(null) <unknown>.recycle(<unknown>) <unknown>.recycle(<unknown>) org.prx.playerhater.PlaybackService.setMediaPlayer(null) <unknown>.remove(int) <unknown>.nextAllowed() org.prx.playerhater.PlaybackService.getQueue() <unknown>.previousAllowed() <unknown>.setQueuedSongsChangedListener(org.prx.playerhater.PlaybackService) <unknown>.SongQueue() <unknown>.onSongFinished(org.prx.playerhater.Song, <unknown>) org.prx.playerhater.PlaybackService.nowPlaying() <unknown>.commitTransaction() <unknown>.next() <unknown>.next() <unknown>.getMediaPlayer() <unknown>.equals(android.media.MediaPlayer) <unknown>.peekMediaPlayer() <unknown>.onSongFinished(org.prx.playerhater.Song, <unknown>) <unknown>.setOnCompletionListener(org.prx.playerhater.PlaybackService) org.prx.playerhater.PlaybackService.getQueue() <unknown>.recycle(<unknown>) org.prx.playerhater.PlaybackService.onNextSongChanged(org.prx.playerhater.Song) <unknown>.next() <unknown>.release() <unknown>.addSongAtPosition(org.prx.playerhater.Song, int) org.prx.playerhater.PlaybackService.getQueue() <unknown>.startTransaction() org.prx.playerhater.PlaybackService.setMediaPlayer(null) org.prx.playerhater.PlaybackService.onNowPlayingChanged(org.prx.playerhater.Song, org.prx.playerhater.Song) org.prx.playerhater.PlaybackService.getQueue() <unknown>.setOnErrorListener(org.prx.playerhater.PlaybackService) org.prx.playerhater.PlaybackService.setMediaPlayer(<unknown>) org.prx.playerhater.PlaybackService.nowPlaying() <unknown>.skipTo(int) <unknown>.onSongFinished(org.prx.playerhater.Song, <unknown>) org.prx.playerhater.PlaybackService.play() <unknown>.appendSong(org.prx.playerhater.Song) <unknown>.getCurrentPosition() org.prx.playerhater.PlaybackService.setMediaPlayer(null) org.prx.playerhater.PlaybackService.getQueue() <unknown>.seekTo(int) <unknown>.startTransaction() org.prx.playerhater.PlaybackService.getQueue() org.prx.playerhater.PlaybackService.getQueue() <unknown>.startTransaction() org.prx.playerhater.PlaybackService.getQueue() <unknown>.start() org.prx.playerhater.PlaybackService.nowPlaying() <unknown>.onSongFinished(org.prx.playerhater.Song, <unknown>) <unknown>.isPlaying() <unknown>.getNextPlaying() <unknown>.size() <unknown>.commitTransaction() <unknown>.startTransaction() org.prx.playerhater.PlaybackService.nowPlaying() <unknown>.MediaPlayerPool() <unknown>.getApplicationContext() <unknown>.appendAndSkip(org.prx.playerhater.Song) org.prx.playerhater.PlaybackService.getQueue() org.prx.playerhater.PlaybackService.nowPlaying() <unknown>.onSongFinished(org.prx.playerhater.Song, <unknown>) <unknown>.peekMediaPlayer() <unknown>.startTransaction() org.prx.playerhater.PlaybackService.nowPlaying() <unknown>.peekMediaPlayer() org.prx.playerhater.PlaybackService.getQueue() org.prx.playerhater.PlaybackService.getQueue() <unknown>.getApplicationContext() org.prx.playerhater.PlaybackService.seekTo(int) <unknown>.empty() org.prx.playerhater.PlaybackService.seekTo(int) <unknown>.prepare(<unknown>, <unknown>) <unknown>.equals(android.media.MediaPlayer) <unknown>.getCurrentPosition() <unknown>.getMediaPlayer() <unknown>.getUri() org.prx.playerhater.PlaybackService.getQueue() <unknown>.onSongFinished(org.prx.playerhater.Song, <unknown>) org.prx.playerhater.PlaybackService.getQueue() <unknown>.getUri() <unknown>.getNowPlaying() <unknown>.back() <unknown>.getPosition() <unknown>.getPlayer(<unknown>, <unknown>) <unknown>.onSongChanged(org.prx.playerhater.Song) <unknown>.startTransaction() <unknown>.setOnCompletionListener(null)"],
    "c_callsites_t": ["<unknown>.peekMediaPlayer() <unknown>.setOnErrorListener(null) <unknown>.recycle(<unknown>) <unknown>.recycle(<unknown>) org.prx.playerhater.PlaybackService.setMediaPlayer(null) <unknown>.remove(int) <unknown>.nextAllowed() org.prx.playerhater.PlaybackService.getQueue() <unknown>.previousAllowed() <unknown>.setQueuedSongsChangedListener(org.prx.playerhater.PlaybackService) <unknown>.SongQueue() <unknown>.onSongFinished(org.prx.playerhater.Song, <unknown>) org.prx.playerhater.PlaybackService.nowPlaying() <unknown>.commitTransaction() <unknown>.next() <unknown>.next() <unknown>.getMediaPlayer() <unknown>.equals(android.media.MediaPlayer) <unknown>.peekMediaPlayer() <unknown>.onSongFinished(org.prx.playerhater.Song, <unknown>) <unknown>.setOnCompletionListener(org.prx.playerhater.PlaybackService) org.prx.playerhater.PlaybackService.getQueue() <unknown>.recycle(<unknown>) org.prx.playerhater.PlaybackService.onNextSongChanged(org.prx.playerhater.Song) <unknown>.next() <unknown>.release() <unknown>.addSongAtPosition(org.prx.playerhater.Song, int) org.prx.playerhater.PlaybackService.getQueue() <unknown>.startTransaction() org.prx.playerhater.PlaybackService.setMediaPlayer(null) org.prx.playerhater.PlaybackService.onNowPlayingChanged(org.prx.playerhater.Song, org.prx.playerhater.Song) org.prx.playerhater.PlaybackService.getQueue() <unknown>.setOnErrorListener(org.prx.playerhater.PlaybackService) org.prx.playerhater.PlaybackService.setMediaPlayer(<unknown>) org.prx.playerhater.PlaybackService.nowPlaying() <unknown>.skipTo(int) <unknown>.onSongFinished(org.prx.playerhater.Song, <unknown>) org.prx.playerhater.PlaybackService.play() <unknown>.appendSong(org.prx.playerhater.Song) <unknown>.getCurrentPosition() org.prx.playerhater.PlaybackService.setMediaPlayer(null) org.prx.playerhater.PlaybackService.getQueue() <unknown>.seekTo(int) <unknown>.startTransaction() org.prx.playerhater.PlaybackService.getQueue() org.prx.playerhater.PlaybackService.getQueue() <unknown>.startTransaction() org.prx.playerhater.PlaybackService.getQueue() <unknown>.start() org.prx.playerhater.PlaybackService.nowPlaying() <unknown>.onSongFinished(org.prx.playerhater.Song, <unknown>) <unknown>.isPlaying() <unknown>.getNextPlaying() <unknown>.size() <unknown>.commitTransaction() <unknown>.startTransaction() org.prx.playerhater.PlaybackService.nowPlaying() <unknown>.getApplicationContext() <unknown>.appendAndSkip(org.prx.playerhater.Song) org.prx.playerhater.PlaybackService.getQueue() org.prx.playerhater.PlaybackService.nowPlaying() <unknown>.onSongFinished(org.prx.playerhater.Song, <unknown>) <unknown>.getInstance(java.lang.Class) <unknown>.peekMediaPlayer() <unknown>.startTransaction() org.prx.playerhater.PlaybackService.nowPlaying() <unknown>.peekMediaPlayer() org.prx.playerhater.PlaybackService.getQueue() org.prx.playerhater.PlaybackService.getQueue() <unknown>.getApplicationContext() org.prx.playerhater.PlaybackService.seekTo(int) <unknown>.empty() org.prx.playerhater.PlaybackService.seekTo(int) <unknown>.prepare(<unknown>, <unknown>) <unknown>.equals(android.media.MediaPlayer) <unknown>.getCurrentPosition() <unknown>.getMediaPlayer() <unknown>.getUri() org.prx.playerhater.PlaybackService.getQueue() <unknown>.onSongFinished(org.prx.playerhater.Song, <unknown>) org.prx.playerhater.PlaybackService.getQueue() <unknown>.getUri() <unknown>.getNowPlaying() <unknown>.back() <unknown>.getPosition() <unknown>.getPlayer(<unknown>, <unknown>) <unknown>.onSongChanged(org.prx.playerhater.Song) <unknown>.startTransaction() <unknown>.setOnCompletionListener(null)"],
    "c_callsites_added_t": ["<unknown>.getInstance(java.lang.Class)"],
    "c_methods_t": ["SongQueue addSongAtPosition appendAndSkip appendSong back commitTransaction empty equals getApplicationContext getCurrentPosition getInstance getMediaPlayer getNextPlaying getNowPlaying getPlayer getPosition getQueue getUri isPlaying next nextAllowed nowPlaying onNextSongChanged onNowPlayingChanged onSongChanged onSongFinished peekMediaPlayer play prepare previousAllowed recycle release remove seekTo setMediaPlayer setOnCompletionListener setOnErrorListener setQueuedSongsChangedListener size skipTo start startTransaction"],
    "id": "chrisrhoden/PlayerHater\u0000src/main/java/org/prx/playerhater/PlaybackService.java\u0000507230ea2070740a9a3528c29e1c2dadf83e1d25\u00003daf80a7f1ca48a34011221f1156479f6843ef88",
    "p_comments_t": ["<empty>"],
    "p_email_sni": "carhoden@gmail.com",
    "c_callsites_removed_t": ["<unknown>.MediaPlayerPool()"],
    "c_callsites_cs": "<unknown>.peekMediaPlayer()#<unknown>.setOnErrorListener(null)#<unknown>.recycle(<unknown>)#<unknown>.recycle(<unknown>)#org.prx.playerhater.PlaybackService.setMediaPlayer(null)#<unknown>.remove(int)#<unknown>.nextAllowed()#org.prx.playerhater.PlaybackService.getQueue()#<unknown>.previousAllowed()#<unknown>.setQueuedSongsChangedListener(org.prx.playerhater.PlaybackService)#<unknown>.SongQueue()#<unknown>.onSongFinished(org.prx.playerhater.Song, <unknown>)#org.prx.playerhater.PlaybackService.nowPlaying()#<unknown>.commitTransaction()#<unknown>.next()#<unknown>.next()#<unknown>.getMediaPlayer()#<unknown>.equals(android.media.MediaPlayer)#<unknown>.peekMediaPlayer()#<unknown>.onSongFinished(org.prx.playerhater.Song, <unknown>)#<unknown>.setOnCompletionListener(org.prx.playerhater.PlaybackService)#org.prx.playerhater.PlaybackService.getQueue()#<unknown>.recycle(<unknown>)#org.prx.playerhater.PlaybackService.onNextSongChanged(org.prx.playerhater.Song)#<unknown>.next()#<unknown>.release()#<unknown>.addSongAtPosition(org.prx.playerhater.Song, int)#org.prx.playerhater.PlaybackService.getQueue()#<unknown>.startTransaction()#org.prx.playerhater.PlaybackService.setMediaPlayer(null)#org.prx.playerhater.PlaybackService.onNowPlayingChanged(org.prx.playerhater.Song, org.prx.playerhater.Song)#org.prx.playerhater.PlaybackService.getQueue()#<unknown>.setOnErrorListener(org.prx.playerhater.PlaybackService)#org.prx.playerhater.PlaybackService.setMediaPlayer(<unknown>)#org.prx.playerhater.PlaybackService.nowPlaying()#<unknown>.skipTo(int)#<unknown>.onSongFinished(org.prx.playerhater.Song, <unknown>)#org.prx.playerhater.PlaybackService.play()#<unknown>.appendSong(org.prx.playerhater.Song)#<unknown>.getCurrentPosition()#org.prx.playerhater.PlaybackService.setMediaPlayer(null)#org.prx.playerhater.PlaybackService.getQueue()#<unknown>.seekTo(int)#<unknown>.startTransaction()#org.prx.playerhater.PlaybackService.getQueue()#org.prx.playerhater.PlaybackService.getQueue()#<unknown>.startTransaction()#org.prx.playerhater.PlaybackService.getQueue()#<unknown>.start()#org.prx.playerhater.PlaybackService.nowPlaying()#<unknown>.onSongFinished(org.prx.playerhater.Song, <unknown>)#<unknown>.isPlaying()#<unknown>.getNextPlaying()#<unknown>.size()#<unknown>.commitTransaction()#<unknown>.startTransaction()#org.prx.playerhater.PlaybackService.nowPlaying()#<unknown>.getApplicationContext()#<unknown>.appendAndSkip(org.prx.playerhater.Song)#org.prx.playerhater.PlaybackService.getQueue()#org.prx.playerhater.PlaybackService.nowPlaying()#<unknown>.onSongFinished(org.prx.playerhater.Song, <unknown>)#<unknown>.getInstance(java.lang.Class)#<unknown>.peekMediaPlayer()#<unknown>.startTransaction()#org.prx.playerhater.PlaybackService.nowPlaying()#<unknown>.peekMediaPlayer()#org.prx.playerhater.PlaybackService.getQueue()#org.prx.playerhater.PlaybackService.getQueue()#<unknown>.getApplicationContext()#org.prx.playerhater.PlaybackService.seekTo(int)#<unknown>.empty()#org.prx.playerhater.PlaybackService.seekTo(int)#<unknown>.prepare(<unknown>, <unknown>)#<unknown>.equals(android.media.MediaPlayer)#<unknown>.getCurrentPosition()#<unknown>.getMediaPlayer()#<unknown>.getUri()#org.prx.playerhater.PlaybackService.getQueue()#<unknown>.onSongFinished(org.prx.playerhater.Song, <unknown>)#org.prx.playerhater.PlaybackService.getQueue()#<unknown>.getUri()#<unknown>.getNowPlaying()#<unknown>.back()#<unknown>.getPosition()#<unknown>.getPlayer(<unknown>, <unknown>)#<unknown>.onSongChanged(org.prx.playerhater.Song)#<unknown>.startTransaction()#<unknown>.setOnCompletionListener(null)",
    "p_body_t": ["<empty>"],
    "c_patch_t": [" public class PlaybackService extends PlayerHaterService implements\n \t\tOnQueuedSongsChangedListener, OnErrorListener, OnCompletionListener {\n \n-\tprivate MediaPlayerPool mMediaPlayerPool;\n+\tprivate MediaPlayerPool<SynchronousPlayer> mMediaPlayerPool;\n \n \t@Override\n \tpublic void onCreate() {\n \t\tsuper.onCreate();\n-\t\tmMediaPlayerPool = new MediaPlayerPool();\n+\t\tmMediaPlayerPool = MediaPlayerPool.getInstance(SynchronousPlayer.class);\n \t}\n \n \t@Override"],
    "c_body_t": ["<empty>"],
    "c_email_sni": "carhoden@gmail.com",
    "p_patch_t": ["  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  ******************************************************************************/\n-\n package org.prx.playerhater;\n \n import org.prx.playerhater.mediaplayer.MediaPlayerPool;"],
    "repo_sni": "chrisrhoden/PlayerHater",
    "_version_": 1526803907622207488,
    "c_user_sni": "chrisrhoden",
    "c_callsites_added_cs": "<unknown>.getInstance(java.lang.Class)",
    "p_parents_ss": ["a6c4bf92694a59e52556e4268a8e6728235200e0"],
    "p_user_sni": "chrisrhoden",
    "c_subject_t": ["generics, holy no"],
    "c_imports_added_cs": "<empty>",
    "c_callsites_removed_cs": "<unknown>.MediaPlayerPool()"
  }],
  "elapsedTime": 337,
  "response": {
    "nvPairs": ["responseHeader", {
      "nvPairs": ["status", 0, "QTime", 2, "params", {
        "nvPairs": ["q", "*:*", "qt", "/select", "indent", "on", "fq", "c_callsites_t:startTransaction OR c_imports_added_t:startTransaction OR c_imports_removed_t:startTransaction", "wt", "javabin", "version", "2"]
      }]
    }, "response", [{
      "c_patch_no_context_t": ["+import org.prx.playerhater.util.Log;\n+\t\tstartTransaction();\n+\t\tstartTransaction();\n+\t\t\tstartTransaction();\n-\t\tboolean willContinuePlaying = isPlaying();\n-\t\tSynchronousPlayer player = mMediaPlayerPool.getPlayer(\n-\t\t\t\tgetApplicationContext(), nowPlaying.getUri());\n+\t\tstartTransaction();\n+\t\tLog.d(\"Currently in state \" + getState());\n-\t\t\tmMediaPlayerPool.recycle(swapMediaPlayer(player,\n-\t\t\t\t\twillContinuePlaying));\n+\t\t\tmMediaPlayerPool.recycle(peekMediaPlayer());\n-\t\t\tmMediaPlayerPool.recycle(\n-\t\t\t\t\tswapMediaPlayer(player, willContinuePlaying), was.getUri());\n+\t\t\tmMediaPlayerPool.recycle(peekMediaPlayer(), was.getUri());\n+\t\tLog.d(\"Currently in state \" + getState());\n+\t\tsetMediaPlayer(mMediaPlayerPool.getPlayer(getApplicationContext(),\n+\t\t\t\tnowPlaying.getUri()));\n+\t\tLog.d(\"Currently in state \" + getState());\n+\t\tif (isPlaying()) {\n+\t\t\tgetMediaPlayer().start();\n+\t\t}\n+\t\tLog.d(\"Currently in state \" + getState());\n+\t\tcommitTransaction();\n+\t\t\tstartTransaction();\n+\t\t\tstartTransaction();"],
      "p_patch_no_context_t": ["+import org.prx.playerhater.mediaplayer.MediaPlayerPool;\n+import org.prx.playerhater.mediaplayer.SynchronousPlayer;\n-public class PlaybackService extends PlayerHaterService implements\n-\t\tOnQueuedSongsChangedListener {\n-\n-\t@Override\n-\tpublic boolean pause() {\n-\t\treturn getMediaPlayer().conditionalPause();\n-\t}\n+import android.media.MediaPlayer;\n+import android.media.MediaPlayer.OnCompletionListener;\n+import android.media.MediaPlayer.OnErrorListener;\n-\t@Override\n-\tpublic boolean stop() {\n-\t\tonStopped();\n-\t\treturn getMediaPlayer().conditionalStop();\n-\t}\n+public class PlaybackService extends PlayerHaterService implements\n+\t\tOnQueuedSongsChangedListener, OnErrorListener, OnCompletionListener {\n-\t@Override\n-\tpublic boolean play() {\n-\t\treturn getMediaPlayer().conditionalPlay();\n-\t}\n+\tprivate MediaPlayerPool mMediaPlayerPool;\n-\tpublic boolean play(int startTime) {\n-\t\tgetMediaPlayer().conditionalPause();\n-\t\tgetMediaPlayer().seekTo(startTime);\n-\t\tgetMediaPlayer().conditionalPlay();\n-\t\treturn true;\n+\tpublic void onCreate() {\n+\t\tsuper.onCreate();\n+\t\tmMediaPlayerPool = new MediaPlayerPool();\n-\t\tgetMediaPlayer().prepareAndPlay(getApplicationContext(), song.getUri(),\n-\t\t\t\tstartTime);\n-\t\treturn true;\n+\t\tint position = enqueue(song);\n+\t\tonSongFinished(PlayerHater.FINISH_SKIP_BUTTON);\n+\t\tgetQueue().skipTo(position);\n+\t\tseekTo(startTime);\n+\t\treturn play();\n+\t\tonSongFinished(PlayerHater.FINISH_SKIP_BUTTON);\n+\t\tonSongFinished(PlayerHater.FINISH_SKIP_BUTTON);\n-\t\tgetQueue().back();\n+\t\tif (getCurrentPosition() < 2000) {\n+\t\t\tonSongFinished(PlayerHater.FINISH_SKIP_BUTTON);\n+\t\t\tgetQueue().back();\n+\t\t} else {\n+\t\t\tseekTo(0);\n+\t\t}\n-\t\treturn getQueue().getPosition();\n+\t\treturn getQueue().getPosition() + (isPlaying() ? 1 : 0);\n-\tpublic void onNowPlayingChanged(Song nowPlaying) {\n-\t\tgetMediaPlayer().prepare(getApplicationContext(), nowPlaying.getUri());\n+\tpublic void onNowPlayingChanged(Song nowPlaying, Song was) {\n+\t\tboolean willContinuePlaying = isPlaying();\n+\t\tSynchronousPlayer player = mMediaPlayerPool.getPlayer(\n+\t\t\t\tgetApplicationContext(), nowPlaying.getUri());\n+\t\tif (was == null) {\n+\t\t\tmMediaPlayerPool.recycle(swapMediaPlayer(player,\n+\t\t\t\t\twillContinuePlaying));\n+\t\t} else {\n+\t\t\tmMediaPlayerPool.recycle(\n+\t\t\t\t\tswapMediaPlayer(player, willContinuePlaying), was.getUri());\n+\t\t}\n-\tpublic void onNextSongChanged(Song nextSong) {\n+\tpublic void onNextSongChanged(Song nextSong, Song was) {\n+\t\tif (nextSong != null) {\n+\t\t\tmMediaPlayerPool\n+\t\t\t\t\t.prepare(getApplicationContext(), nextSong.getUri());\n+\t\t}\n-\t\n+\n+\t@Override\n+\tpublic void onCompletion(MediaPlayer mp) {\n+\t\tif (peekMediaPlayer() != null && peekMediaPlayer().equals(mp)) {\n+\t\t\tonSongFinished(PlayerHater.FINISH_SONG_END);\n+\t\t\tgetQueue().next();\n+\t\t}\n+\t}\n+\n+\t@Override\n+\tpublic boolean onError(MediaPlayer mp, int what, int extra) {\n+\t\tif (peekMediaPlayer() != null && peekMediaPlayer().equals(mp)) {\n+\t\t\tonSongFinished(PlayerHater.FINISH_ERROR);\n+\t\t\tgetQueue().next();\n+\t\t\treturn true;\n+\t\t}\n+\t\treturn false;\n+\t}\n+\n+\n+\t@Override\n+\tprotected void setMediaPlayer(SynchronousPlayer mediaPlayer) {\n+\t\tSynchronousPlayer oldPlayer = peekMediaPlayer();\n+\t\tif (oldPlayer != null) {\n+\t\t\toldPlayer.setOnErrorListener(null);\n+\t\t\toldPlayer.setOnCompletionListener(null);\n+\t\t}\n+\t\tsuper.setMediaPlayer(mediaPlayer);\n+\t\tmediaPlayer.setOnErrorListener(this);\n+\t\tmediaPlayer.setOnCompletionListener(this);\n+\t}"],
      "c_date_tdt": "May 31, 2013 1:07:52 PM",
      "c_imports_t": ["org.prx.playerhater.songs.SongQueue org.prx.playerhater.util.Log org.prx.playerhater.service.PlayerHaterService android.media.MediaPlayer.OnCompletionListener org.prx.playerhater.mediaplayer.SynchronousPlayer org.prx.playerhater.songs.SongQueue.OnQueuedSongsChangedListener android.media.MediaPlayer.OnErrorListener android.media.MediaPlayer org.prx.playerhater.mediaplayer.MediaPlayerPool"],
      "c_contents_t": ["package org.prx.playerhater;\n\nimport org.prx.playerhater.mediaplayer.MediaPlayerPool;\nimport org.prx.playerhater.mediaplayer.SynchronousPlayer;\nimport org.prx.playerhater.service.PlayerHaterService;\nimport org.prx.playerhater.songs.SongQueue;\nimport org.prx.playerhater.songs.SongQueue.OnQueuedSongsChangedListener;\nimport org.prx.playerhater.util.Log;\n\nimport android.media.MediaPlayer;\nimport android.media.MediaPlayer.OnCompletionListener;\nimport android.media.MediaPlayer.OnErrorListener;\n\npublic class PlaybackService extends PlayerHaterService implements\n\t\tOnQueuedSongsChangedListener, OnErrorListener, OnCompletionListener {\n\n\tprivate MediaPlayerPool mMediaPlayerPool;\n\n\t@Override\n\tpublic void onCreate() {\n\t\tsuper.onCreate();\n\t\tmMediaPlayerPool = new MediaPlayerPool();\n\t}\n\n\t@Override\n\tpublic boolean play(Song song, int startTime) {\n\t\tint position = enqueue(song);\n\t\tonSongFinished(PlayerHater.FINISH_SKIP_BUTTON);\n\t\tgetQueue().skipTo(position);\n\t\tseekTo(startTime);\n\t\treturn play();\n\t}\n\n\t@Override\n\tpublic boolean seekTo(int startTime) {\n\t\tgetMediaPlayer().seekTo(startTime);\n\t\treturn true;\n\t}\n\n\t@Override\n\tpublic int enqueue(Song song) {\n\t\treturn getQueue().appendSong(song);\n\t}\n\n\t@Override\n\tpublic boolean skipTo(int position) {\n\t\tstartTransaction();\n\t\tonSongFinished(PlayerHater.FINISH_SKIP_BUTTON);\n\t\treturn getQueue().skipTo(position);\n\t}\n\n\t@Override\n\tpublic void skip() {\n\t\tstartTransaction();\n\t\tonSongFinished(PlayerHater.FINISH_SKIP_BUTTON);\n\t\tgetQueue().next();\n\t}\n\n\t@Override\n\tpublic void skipBack() {\n\t\tif (getCurrentPosition() < 2000) {\n\t\t\tstartTransaction();\n\t\t\tonSongFinished(PlayerHater.FINISH_SKIP_BUTTON);\n\t\t\tgetQueue().back();\n\t\t} else {\n\t\t\tseekTo(0);\n\t\t}\n\t}\n\n\t@Override\n\tpublic void emptyQueue() {\n\t\tgetQueue().empty();\n\t}\n\n\t@Override\n\tpublic Song nowPlaying() {\n\t\treturn getQueue().getNowPlaying();\n\t}\n\n\tprivate SongQueue mQueue;\n\n\tprivate SongQueue getQueue() {\n\t\tif (mQueue == null) {\n\t\t\tmQueue = new SongQueue();\n\t\t\tmQueue.setQueuedSongsChangedListener(this);\n\t\t}\n\t\treturn mQueue;\n\t}\n\n\t@Override\n\tpublic int getQueueLength() {\n\t\treturn getQueue().size();\n\t}\n\n\t@Override\n\tpublic int getQueuePosition() {\n\t\treturn getQueue().getPosition() + (isPlaying() ? 1 : 0);\n\t}\n\n\t@Override\n\tpublic boolean removeFromQueue(int position) {\n\t\treturn getQueue().remove(position);\n\t}\n\n\t@Override\n\tpublic void onNowPlayingChanged(Song nowPlaying, Song was) {\n\t\tstartTransaction();\n\t\tLog.d(\"Currently in state \" + getState());\n\t\tif (was == null) {\n\t\t\tmMediaPlayerPool.recycle(peekMediaPlayer());\n\t\t} else {\n\t\t\tmMediaPlayerPool.recycle(peekMediaPlayer(), was.getUri());\n\t\t}\n\t\tLog.d(\"Currently in state \" + getState());\n\t\tsetMediaPlayer(mMediaPlayerPool.getPlayer(getApplicationContext(),\n\t\t\t\tnowPlaying.getUri()));\n\t\tLog.d(\"Currently in state \" + getState());\n\t\tif (isPlaying()) {\n\t\t\tgetMediaPlayer().start();\n\t\t}\n\t\tLog.d(\"Currently in state \" + getState());\n\t\tcommitTransaction();\n\t\tonSongChanged();\n\t}\n\n\t@Override\n\tpublic void onNextSongChanged(Song nextSong, Song was) {\n\t\tif (nextSong != null) {\n\t\t\tmMediaPlayerPool\n\t\t\t\t\t.prepare(getApplicationContext(), nextSong.getUri());\n\t\t}\n\t\tonNextSongChanged();\n\t}\n\n\t@Override\n\tpublic void onCompletion(MediaPlayer mp) {\n\t\tif (peekMediaPlayer() != null && peekMediaPlayer().equals(mp)) {\n\t\t\tstartTransaction();\n\t\t\tonSongFinished(PlayerHater.FINISH_SONG_END);\n\t\t\tgetQueue().next();\n\t\t}\n\t}\n\n\t@Override\n\tpublic boolean onError(MediaPlayer mp, int what, int extra) {\n\t\tif (peekMediaPlayer() != null && peekMediaPlayer().equals(mp)) {\n\t\t\tstartTransaction();\n\t\t\tonSongFinished(PlayerHater.FINISH_ERROR);\n\t\t\tgetQueue().next();\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\t@Override\n\tpublic Song getNextSong() {\n\t\treturn getQueue().getNextPlaying();\n\t}\n\n\t@Override\n\tprotected void setMediaPlayer(SynchronousPlayer mediaPlayer) {\n\t\tSynchronousPlayer oldPlayer = peekMediaPlayer();\n\t\tif (oldPlayer != null) {\n\t\t\toldPlayer.setOnErrorListener(null);\n\t\t\toldPlayer.setOnCompletionListener(null);\n\t\t}\n\t\tsuper.setMediaPlayer(mediaPlayer);\n\t\tmediaPlayer.setOnErrorListener(this);\n\t\tmediaPlayer.setOnCompletionListener(this);\n\t}\n}\n"],
      "p_date_tdt": "May 31, 2013 11:44:05 AM",
      "c_comments_t": ["<empty>"],
      "p_contents_t": ["package org.prx.playerhater;\n\nimport org.prx.playerhater.mediaplayer.MediaPlayerPool;\nimport org.prx.playerhater.mediaplayer.SynchronousPlayer;\nimport org.prx.playerhater.service.PlayerHaterService;\nimport org.prx.playerhater.songs.SongQueue;\nimport org.prx.playerhater.songs.SongQueue.OnQueuedSongsChangedListener;\n\nimport android.media.MediaPlayer;\nimport android.media.MediaPlayer.OnCompletionListener;\nimport android.media.MediaPlayer.OnErrorListener;\n\npublic class PlaybackService extends PlayerHaterService implements\n\t\tOnQueuedSongsChangedListener, OnErrorListener, OnCompletionListener {\n\n\tprivate MediaPlayerPool mMediaPlayerPool;\n\n\t@Override\n\tpublic void onCreate() {\n\t\tsuper.onCreate();\n\t\tmMediaPlayerPool = new MediaPlayerPool();\n\t}\n\n\t@Override\n\tpublic boolean play(Song song, int startTime) {\n\t\tint position = enqueue(song);\n\t\tonSongFinished(PlayerHater.FINISH_SKIP_BUTTON);\n\t\tgetQueue().skipTo(position);\n\t\tseekTo(startTime);\n\t\treturn play();\n\t}\n\n\t@Override\n\tpublic boolean seekTo(int startTime) {\n\t\tgetMediaPlayer().seekTo(startTime);\n\t\treturn true;\n\t}\n\n\t@Override\n\tpublic int enqueue(Song song) {\n\t\treturn getQueue().appendSong(song);\n\t}\n\n\t@Override\n\tpublic boolean skipTo(int position) {\n\t\tonSongFinished(PlayerHater.FINISH_SKIP_BUTTON);\n\t\treturn getQueue().skipTo(position);\n\t}\n\n\t@Override\n\tpublic void skip() {\n\t\tonSongFinished(PlayerHater.FINISH_SKIP_BUTTON);\n\t\tgetQueue().next();\n\t}\n\n\t@Override\n\tpublic void skipBack() {\n\t\tif (getCurrentPosition() < 2000) {\n\t\t\tonSongFinished(PlayerHater.FINISH_SKIP_BUTTON);\n\t\t\tgetQueue().back();\n\t\t} else {\n\t\t\tseekTo(0);\n\t\t}\n\t}\n\n\t@Override\n\tpublic void emptyQueue() {\n\t\tgetQueue().empty();\n\t}\n\n\t@Override\n\tpublic Song nowPlaying() {\n\t\treturn getQueue().getNowPlaying();\n\t}\n\n\tprivate SongQueue mQueue;\n\n\tprivate SongQueue getQueue() {\n\t\tif (mQueue == null) {\n\t\t\tmQueue = new SongQueue();\n\t\t\tmQueue.setQueuedSongsChangedListener(this);\n\t\t}\n\t\treturn mQueue;\n\t}\n\n\t@Override\n\tpublic int getQueueLength() {\n\t\treturn getQueue().size();\n\t}\n\n\t@Override\n\tpublic int getQueuePosition() {\n\t\treturn getQueue().getPosition() + (isPlaying() ? 1 : 0);\n\t}\n\n\t@Override\n\tpublic boolean removeFromQueue(int position) {\n\t\treturn getQueue().remove(position);\n\t}\n\n\t@Override\n\tpublic void onNowPlayingChanged(Song nowPlaying, Song was) {\n\t\tboolean willContinuePlaying = isPlaying();\n\t\tSynchronousPlayer player = mMediaPlayerPool.getPlayer(\n\t\t\t\tgetApplicationContext(), nowPlaying.getUri());\n\t\tif (was == null) {\n\t\t\tmMediaPlayerPool.recycle(swapMediaPlayer(player,\n\t\t\t\t\twillContinuePlaying));\n\t\t} else {\n\t\t\tmMediaPlayerPool.recycle(\n\t\t\t\t\tswapMediaPlayer(player, willContinuePlaying), was.getUri());\n\t\t}\n\t\tonSongChanged();\n\t}\n\n\t@Override\n\tpublic void onNextSongChanged(Song nextSong, Song was) {\n\t\tif (nextSong != null) {\n\t\t\tmMediaPlayerPool\n\t\t\t\t\t.prepare(getApplicationContext(), nextSong.getUri());\n\t\t}\n\t\tonNextSongChanged();\n\t}\n\n\t@Override\n\tpublic void onCompletion(MediaPlayer mp) {\n\t\tif (peekMediaPlayer() != null && peekMediaPlayer().equals(mp)) {\n\t\t\tonSongFinished(PlayerHater.FINISH_SONG_END);\n\t\t\tgetQueue().next();\n\t\t}\n\t}\n\n\t@Override\n\tpublic boolean onError(MediaPlayer mp, int what, int extra) {\n\t\tif (peekMediaPlayer() != null && peekMediaPlayer().equals(mp)) {\n\t\t\tonSongFinished(PlayerHater.FINISH_ERROR);\n\t\t\tgetQueue().next();\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\t@Override\n\tpublic Song getNextSong() {\n\t\treturn getQueue().getNextPlaying();\n\t}\n\n\t@Override\n\tprotected void setMediaPlayer(SynchronousPlayer mediaPlayer) {\n\t\tSynchronousPlayer oldPlayer = peekMediaPlayer();\n\t\tif (oldPlayer != null) {\n\t\t\toldPlayer.setOnErrorListener(null);\n\t\t\toldPlayer.setOnCompletionListener(null);\n\t\t}\n\t\tsuper.setMediaPlayer(mediaPlayer);\n\t\tmediaPlayer.setOnErrorListener(this);\n\t\tmediaPlayer.setOnCompletionListener(this);\n\t}\n}\n"],
      "c_hash_sni": "32d9e7db8bb4324c6638adea2e43a7cfbf173797",
      "name_sni": "src/org/prx/playerhater/PlaybackService.java",
      "c_parents_ss": ["a5f377899e973f3adf3094c36111b5e63a63482b"],
      "c_imports_removed_t": ["<empty>"],
      "p_hash_sni": "a5f377899e973f3adf3094c36111b5e63a63482b",
      "c_imports_added_t": ["org.prx.playerhater.util.Log"],
      "p_methods_t": ["MediaPlayerPool SongQueue appendSong back empty enqueue equals getApplicationContext getCurrentPosition getMediaPlayer getNextPlaying getNowPlaying getPlayer getPosition getQueue getUri isPlaying next onNextSongChanged onSongChanged onSongFinished peekMediaPlayer play prepare recycle remove seekTo setOnCompletionListener setOnErrorListener setQueuedSongsChangedListener size skipTo swapMediaPlayer"],
      "c_imports_removed_cs": "<empty>",
      "p_imports_t": ["org.prx.playerhater.songs.SongQueue org.prx.playerhater.service.PlayerHaterService android.media.MediaPlayer.OnCompletionListener org.prx.playerhater.mediaplayer.SynchronousPlayer org.prx.playerhater.songs.SongQueue.OnQueuedSongsChangedListener android.media.MediaPlayer.OnErrorListener android.media.MediaPlayer org.prx.playerhater.mediaplayer.MediaPlayerPool"],
      "p_subject_t": ["completion events"],
      "p_callsites_cs": "<unknown>.peekMediaPlayer()#<unknown>.setOnErrorListener(null)#<unknown>.remove(int)#<unknown>.recycle(<unknown>, <unknown>)#<unknown>.skipTo(int)#org.prx.playerhater.PlaybackService.getQueue()#<unknown>.setQueuedSongsChangedListener(org.prx.playerhater.PlaybackService)#<unknown>.SongQueue()#org.prx.playerhater.PlaybackService.enqueue(org.prx.playerhater.Song)#<unknown>.next()#<unknown>.next()#<unknown>.onSongFinished(<unknown>)#<unknown>.equals(android.media.MediaPlayer)#<unknown>.peekMediaPlayer()#<unknown>.setOnCompletionListener(org.prx.playerhater.PlaybackService)#org.prx.playerhater.PlaybackService.getQueue()#<unknown>.onSongFinished(<unknown>)#<unknown>.next()#<unknown>.swapMediaPlayer(org.prx.playerhater.SynchronousPlayer, boolean)#org.prx.playerhater.PlaybackService.getQueue()#org.prx.playerhater.PlaybackService.getQueue()#<unknown>.setOnErrorListener(org.prx.playerhater.PlaybackService)#<unknown>.onSongFinished(<unknown>)#<unknown>.skipTo(int)#org.prx.playerhater.PlaybackService.onNextSongChanged()#org.prx.playerhater.PlaybackService.play()#<unknown>.appendSong(org.prx.playerhater.Song)#<unknown>.onSongFinished(<unknown>)#org.prx.playerhater.PlaybackService.getQueue()#<unknown>.seekTo(int)#org.prx.playerhater.PlaybackService.getQueue()#org.prx.playerhater.PlaybackService.getQueue()#org.prx.playerhater.PlaybackService.getQueue()#<unknown>.onSongChanged()#<unknown>.isPlaying()#<unknown>.getNextPlaying()#<unknown>.size()#<unknown>.getUri()#<unknown>.MediaPlayerPool()#<unknown>.getApplicationContext()#org.prx.playerhater.PlaybackService.getQueue()#<unknown>.peekMediaPlayer()#org.prx.playerhater.PlaybackService.getQueue()#org.prx.playerhater.PlaybackService.getQueue()#<unknown>.getApplicationContext()#org.prx.playerhater.PlaybackService.seekTo(int)#<unknown>.empty()#org.prx.playerhater.PlaybackService.seekTo(int)#<unknown>.prepare(<unknown>, <unknown>)#<unknown>.onSongFinished(<unknown>)#<unknown>.equals(android.media.MediaPlayer)#<unknown>.getCurrentPosition()#<unknown>.getMediaPlayer()#<unknown>.getUri()#org.prx.playerhater.PlaybackService.getQueue()#<unknown>.onSongFinished(<unknown>)#<unknown>.isPlaying()#org.prx.playerhater.PlaybackService.getQueue()#<unknown>.getUri()#<unknown>.getNowPlaying()#<unknown>.back()#<unknown>.getPosition()#<unknown>.getPlayer(<unknown>, <unknown>)#<unknown>.setOnCompletionListener(null)#<unknown>.recycle(<unknown>)",
      "p_callsites_t": ["<unknown>.peekMediaPlayer() <unknown>.setOnErrorListener(null) <unknown>.remove(int) <unknown>.recycle(<unknown>, <unknown>) <unknown>.skipTo(int) org.prx.playerhater.PlaybackService.getQueue() <unknown>.setQueuedSongsChangedListener(org.prx.playerhater.PlaybackService) <unknown>.SongQueue() org.prx.playerhater.PlaybackService.enqueue(org.prx.playerhater.Song) <unknown>.next() <unknown>.next() <unknown>.onSongFinished(<unknown>) <unknown>.equals(android.media.MediaPlayer) <unknown>.peekMediaPlayer() <unknown>.setOnCompletionListener(org.prx.playerhater.PlaybackService) org.prx.playerhater.PlaybackService.getQueue() <unknown>.onSongFinished(<unknown>) <unknown>.next() <unknown>.swapMediaPlayer(org.prx.playerhater.SynchronousPlayer, boolean) org.prx.playerhater.PlaybackService.getQueue() org.prx.playerhater.PlaybackService.getQueue() <unknown>.setOnErrorListener(org.prx.playerhater.PlaybackService) <unknown>.onSongFinished(<unknown>) <unknown>.skipTo(int) org.prx.playerhater.PlaybackService.onNextSongChanged() org.prx.playerhater.PlaybackService.play() <unknown>.appendSong(org.prx.playerhater.Song) <unknown>.onSongFinished(<unknown>) org.prx.playerhater.PlaybackService.getQueue() <unknown>.seekTo(int) org.prx.playerhater.PlaybackService.getQueue() org.prx.playerhater.PlaybackService.getQueue() org.prx.playerhater.PlaybackService.getQueue() <unknown>.onSongChanged() <unknown>.isPlaying() <unknown>.getNextPlaying() <unknown>.size() <unknown>.getUri() <unknown>.MediaPlayerPool() <unknown>.getApplicationContext() org.prx.playerhater.PlaybackService.getQueue() <unknown>.peekMediaPlayer() org.prx.playerhater.PlaybackService.getQueue() org.prx.playerhater.PlaybackService.getQueue() <unknown>.getApplicationContext() org.prx.playerhater.PlaybackService.seekTo(int) <unknown>.empty() org.prx.playerhater.PlaybackService.seekTo(int) <unknown>.prepare(<unknown>, <unknown>) <unknown>.onSongFinished(<unknown>) <unknown>.equals(android.media.MediaPlayer) <unknown>.getCurrentPosition() <unknown>.getMediaPlayer() <unknown>.getUri() org.prx.playerhater.PlaybackService.getQueue() <unknown>.onSongFinished(<unknown>) <unknown>.isPlaying() org.prx.playerhater.PlaybackService.getQueue() <unknown>.getUri() <unknown>.getNowPlaying() <unknown>.back() <unknown>.getPosition() <unknown>.getPlayer(<unknown>, <unknown>) <unknown>.setOnCompletionListener(null) <unknown>.recycle(<unknown>)"],
      "c_callsites_t": ["<unknown>.peekMediaPlayer() <unknown>.setOnErrorListener(null) <unknown>.recycle(<unknown>) <unknown>.remove(int) <unknown>.skipTo(int) org.prx.playerhater.PlaybackService.getQueue() <unknown>.setQueuedSongsChangedListener(org.prx.playerhater.PlaybackService) <unknown>.SongQueue() org.prx.playerhater.PlaybackService.enqueue(org.prx.playerhater.Song) <unknown>.d(<unknown>) <unknown>.next() <unknown>.next() <unknown>.onSongFinished(<unknown>) <unknown>.getMediaPlayer() <unknown>.equals(android.media.MediaPlayer) <unknown>.peekMediaPlayer() <unknown>.setOnCompletionListener(org.prx.playerhater.PlaybackService) org.prx.playerhater.PlaybackService.getQueue() <unknown>.onSongFinished(<unknown>) <unknown>.getState() <unknown>.next() <unknown>.startTransaction() org.prx.playerhater.PlaybackService.getQueue() org.prx.playerhater.PlaybackService.getQueue() <unknown>.setOnErrorListener(org.prx.playerhater.PlaybackService) org.prx.playerhater.PlaybackService.setMediaPlayer(<unknown>) <unknown>.onSongFinished(<unknown>) <unknown>.skipTo(int) org.prx.playerhater.PlaybackService.onNextSongChanged() org.prx.playerhater.PlaybackService.play() <unknown>.appendSong(org.prx.playerhater.Song) <unknown>.onSongFinished(<unknown>) org.prx.playerhater.PlaybackService.getQueue() <unknown>.seekTo(int) <unknown>.recycle(<unknown>, <unknown>) <unknown>.startTransaction() org.prx.playerhater.PlaybackService.getQueue() org.prx.playerhater.PlaybackService.getQueue() <unknown>.startTransaction() org.prx.playerhater.PlaybackService.getQueue() <unknown>.start() <unknown>.onSongChanged() <unknown>.isPlaying() <unknown>.getNextPlaying() <unknown>.size() <unknown>.commitTransaction() <unknown>.startTransaction() <unknown>.getUri() <unknown>.MediaPlayerPool() <unknown>.getApplicationContext() org.prx.playerhater.PlaybackService.getQueue() <unknown>.startTransaction() <unknown>.peekMediaPlayer() <unknown>.peekMediaPlayer() org.prx.playerhater.PlaybackService.getQueue() org.prx.playerhater.PlaybackService.getQueue() <unknown>.getApplicationContext() org.prx.playerhater.PlaybackService.seekTo(int) <unknown>.empty() org.prx.playerhater.PlaybackService.seekTo(int) <unknown>.prepare(<unknown>, <unknown>) <unknown>.onSongFinished(<unknown>) <unknown>.equals(android.media.MediaPlayer) <unknown>.getCurrentPosition() <unknown>.getMediaPlayer() <unknown>.getUri() org.prx.playerhater.PlaybackService.getQueue() <unknown>.onSongFinished(<unknown>) <unknown>.isPlaying() org.prx.playerhater.PlaybackService.getQueue() <unknown>.getUri() <unknown>.getNowPlaying() <unknown>.back() <unknown>.getPosition() <unknown>.getPlayer(<unknown>, <unknown>) <unknown>.setOnCompletionListener(null) <unknown>.startTransaction()"],
      "c_callsites_added_t": ["<unknown>.d(<unknown>) <unknown>.getState() <unknown>.startTransaction() org.prx.playerhater.PlaybackService.setMediaPlayer(<unknown>) <unknown>.startTransaction() <unknown>.startTransaction() <unknown>.start() <unknown>.commitTransaction() <unknown>.startTransaction() <unknown>.startTransaction() <unknown>.peekMediaPlayer() <unknown>.getMediaPlayer() <unknown>.startTransaction()"],
      "c_methods_t": ["MediaPlayerPool SongQueue appendSong back commitTransaction d empty enqueue equals getApplicationContext getCurrentPosition getMediaPlayer getNextPlaying getNowPlaying getPlayer getPosition getQueue getState getUri isPlaying next onNextSongChanged onSongChanged onSongFinished peekMediaPlayer play prepare recycle remove seekTo setMediaPlayer setOnCompletionListener setOnErrorListener setQueuedSongsChangedListener size skipTo start startTransaction"],
      "id": "chrisrhoden/PlayerHater\u0000src/org/prx/playerhater/PlaybackService.java\u0000a5f377899e973f3adf3094c36111b5e63a63482b\u000032d9e7db8bb4324c6638adea2e43a7cfbf173797",
      "p_comments_t": ["<empty>"],
      "p_email_sni": "carhoden@gmail.com",
      "c_callsites_removed_t": ["<unknown>.swapMediaPlayer(org.prx.playerhater.SynchronousPlayer, boolean)"],
      "c_callsites_cs": "<unknown>.peekMediaPlayer()#<unknown>.setOnErrorListener(null)#<unknown>.recycle(<unknown>)#<unknown>.remove(int)#<unknown>.skipTo(int)#org.prx.playerhater.PlaybackService.getQueue()#<unknown>.setQueuedSongsChangedListener(org.prx.playerhater.PlaybackService)#<unknown>.SongQueue()#org.prx.playerhater.PlaybackService.enqueue(org.prx.playerhater.Song)#<unknown>.d(<unknown>)#<unknown>.next()#<unknown>.next()#<unknown>.onSongFinished(<unknown>)#<unknown>.getMediaPlayer()#<unknown>.equals(android.media.MediaPlayer)#<unknown>.peekMediaPlayer()#<unknown>.setOnCompletionListener(org.prx.playerhater.PlaybackService)#org.prx.playerhater.PlaybackService.getQueue()#<unknown>.onSongFinished(<unknown>)#<unknown>.getState()#<unknown>.next()#<unknown>.startTransaction()#org.prx.playerhater.PlaybackService.getQueue()#org.prx.playerhater.PlaybackService.getQueue()#<unknown>.setOnErrorListener(org.prx.playerhater.PlaybackService)#org.prx.playerhater.PlaybackService.setMediaPlayer(<unknown>)#<unknown>.onSongFinished(<unknown>)#<unknown>.skipTo(int)#org.prx.playerhater.PlaybackService.onNextSongChanged()#org.prx.playerhater.PlaybackService.play()#<unknown>.appendSong(org.prx.playerhater.Song)#<unknown>.onSongFinished(<unknown>)#org.prx.playerhater.PlaybackService.getQueue()#<unknown>.seekTo(int)#<unknown>.recycle(<unknown>, <unknown>)#<unknown>.startTransaction()#org.prx.playerhater.PlaybackService.getQueue()#org.prx.playerhater.PlaybackService.getQueue()#<unknown>.startTransaction()#org.prx.playerhater.PlaybackService.getQueue()#<unknown>.start()#<unknown>.onSongChanged()#<unknown>.isPlaying()#<unknown>.getNextPlaying()#<unknown>.size()#<unknown>.commitTransaction()#<unknown>.startTransaction()#<unknown>.getUri()#<unknown>.MediaPlayerPool()#<unknown>.getApplicationContext()#org.prx.playerhater.PlaybackService.getQueue()#<unknown>.startTransaction()#<unknown>.peekMediaPlayer()#<unknown>.peekMediaPlayer()#org.prx.playerhater.PlaybackService.getQueue()#org.prx.playerhater.PlaybackService.getQueue()#<unknown>.getApplicationContext()#org.prx.playerhater.PlaybackService.seekTo(int)#<unknown>.empty()#org.prx.playerhater.PlaybackService.seekTo(int)#<unknown>.prepare(<unknown>, <unknown>)#<unknown>.onSongFinished(<unknown>)#<unknown>.equals(android.media.MediaPlayer)#<unknown>.getCurrentPosition()#<unknown>.getMediaPlayer()#<unknown>.getUri()#org.prx.playerhater.PlaybackService.getQueue()#<unknown>.onSongFinished(<unknown>)#<unknown>.isPlaying()#org.prx.playerhater.PlaybackService.getQueue()#<unknown>.getUri()#<unknown>.getNowPlaying()#<unknown>.back()#<unknown>.getPosition()#<unknown>.getPlayer(<unknown>, <unknown>)#<unknown>.setOnCompletionListener(null)#<unknown>.startTransaction()",
      "p_body_t": ["<empty>"],
      "c_patch_t": [" import org.prx.playerhater.service.PlayerHaterService;\n import org.prx.playerhater.songs.SongQueue;\n import org.prx.playerhater.songs.SongQueue.OnQueuedSongsChangedListener;\n+import org.prx.playerhater.util.Log;\n \n import android.media.MediaPlayer;\n import android.media.MediaPlayer.OnCompletionListener;\n@@ -43,12 +44,14 @@ public class PlaybackService extends PlayerHaterService implements\n \n \t@Override\n \tpublic boolean skipTo(int position) {\n+\t\tstartTransaction();\n \t\tonSongFinished(PlayerHater.FINISH_SKIP_BUTTON);\n \t\treturn getQueue().skipTo(position);\n \t}\n \n \t@Override\n \tpublic void skip() {\n+\t\tstartTransaction();\n \t\tonSongFinished(PlayerHater.FINISH_SKIP_BUTTON);\n \t\tgetQueue().next();\n \t}\n@@ -56,6 +59,7 @@ public class PlaybackService extends PlayerHaterService implements\n \t@Override\n \tpublic void skipBack() {\n \t\tif (getCurrentPosition() < 2000) {\n+\t\t\tstartTransaction();\n \t\t\tonSongFinished(PlayerHater.FINISH_SKIP_BUTTON);\n \t\t\tgetQueue().back();\n \t\t} else {\n@@ -100,16 +104,22 @@ public class PlaybackService extends PlayerHaterService implements\n \n \t@Override\n \tpublic void onNowPlayingChanged(Song nowPlaying, Song was) {\n-\t\tboolean willContinuePlaying = isPlaying();\n-\t\tSynchronousPlayer player = mMediaPlayerPool.getPlayer(\n-\t\t\t\tgetApplicationContext(), nowPlaying.getUri());\n+\t\tstartTransaction();\n+\t\tLog.d(\"Currently in state \" + getState());\n \t\tif (was == null) {\n-\t\t\tmMediaPlayerPool.recycle(swapMediaPlayer(player,\n-\t\t\t\t\twillContinuePlaying));\n+\t\t\tmMediaPlayerPool.recycle(peekMediaPlayer());\n \t\t} else {\n-\t\t\tmMediaPlayerPool.recycle(\n-\t\t\t\t\tswapMediaPlayer(player, willContinuePlaying), was.getUri());\n+\t\t\tmMediaPlayerPool.recycle(peekMediaPlayer(), was.getUri());\n \t\t}\n+\t\tLog.d(\"Currently in state \" + getState());\n+\t\tsetMediaPlayer(mMediaPlayerPool.getPlayer(getApplicationContext(),\n+\t\t\t\tnowPlaying.getUri()));\n+\t\tLog.d(\"Currently in state \" + getState());\n+\t\tif (isPlaying()) {\n+\t\t\tgetMediaPlayer().start();\n+\t\t}\n+\t\tLog.d(\"Currently in state \" + getState());\n+\t\tcommitTransaction();\n \t\tonSongChanged();\n \t}\n \n@@ -125,6 +135,7 @@ public class PlaybackService extends PlayerHaterService implements\n \t@Override\n \tpublic void onCompletion(MediaPlayer mp) {\n \t\tif (peekMediaPlayer() != null && peekMediaPlayer().equals(mp)) {\n+\t\t\tstartTransaction();\n \t\t\tonSongFinished(PlayerHater.FINISH_SONG_END);\n \t\t\tgetQueue().next();\n \t\t}\n@@ -133,6 +144,7 @@ public class PlaybackService extends PlayerHaterService implements\n \t@Override\n \tpublic boolean onError(MediaPlayer mp, int what, int extra) {\n \t\tif (peekMediaPlayer() != null && peekMediaPlayer().equals(mp)) {\n+\t\t\tstartTransaction();\n \t\t\tonSongFinished(PlayerHater.FINISH_ERROR);\n \t\t\tgetQueue().next();\n \t\t\treturn true;"],
      "c_body_t": ["<empty>"],
      "c_email_sni": "carhoden@gmail.com",
      "p_patch_t": [" package org.prx.playerhater;\n \n+import org.prx.playerhater.mediaplayer.MediaPlayerPool;\n+import org.prx.playerhater.mediaplayer.SynchronousPlayer;\n import org.prx.playerhater.service.PlayerHaterService;\n import org.prx.playerhater.songs.SongQueue;\n import org.prx.playerhater.songs.SongQueue.OnQueuedSongsChangedListener;\n \n-public class PlaybackService extends PlayerHaterService implements\n-\t\tOnQueuedSongsChangedListener {\n-\n-\t@Override\n-\tpublic boolean pause() {\n-\t\treturn getMediaPlayer().conditionalPause();\n-\t}\n+import android.media.MediaPlayer;\n+import android.media.MediaPlayer.OnCompletionListener;\n+import android.media.MediaPlayer.OnErrorListener;\n \n-\t@Override\n-\tpublic boolean stop() {\n-\t\tonStopped();\n-\t\treturn getMediaPlayer().conditionalStop();\n-\t}\n+public class PlaybackService extends PlayerHaterService implements\n+\t\tOnQueuedSongsChangedListener, OnErrorListener, OnCompletionListener {\n \n-\t@Override\n-\tpublic boolean play() {\n-\t\treturn getMediaPlayer().conditionalPlay();\n-\t}\n+\tprivate MediaPlayerPool mMediaPlayerPool;\n \n \t@Override\n-\tpublic boolean play(int startTime) {\n-\t\tgetMediaPlayer().conditionalPause();\n-\t\tgetMediaPlayer().seekTo(startTime);\n-\t\tgetMediaPlayer().conditionalPlay();\n-\t\treturn true;\n+\tpublic void onCreate() {\n+\t\tsuper.onCreate();\n+\t\tmMediaPlayerPool = new MediaPlayerPool();\n \t}\n \n \t@Override\n \tpublic boolean play(Song song, int startTime) {\n-\t\tgetMediaPlayer().prepareAndPlay(getApplicationContext(), song.getUri(),\n-\t\t\t\tstartTime);\n-\t\treturn true;\n+\t\tint position = enqueue(song);\n+\t\tonSongFinished(PlayerHater.FINISH_SKIP_BUTTON);\n+\t\tgetQueue().skipTo(position);\n+\t\tseekTo(startTime);\n+\t\treturn play();\n \t}\n \n \t@Override\n@@ -51,17 +43,24 @@ public class PlaybackService extends PlayerHaterService implements\n \n \t@Override\n \tpublic boolean skipTo(int position) {\n+\t\tonSongFinished(PlayerHater.FINISH_SKIP_BUTTON);\n \t\treturn getQueue().skipTo(position);\n \t}\n \n \t@Override\n \tpublic void skip() {\n+\t\tonSongFinished(PlayerHater.FINISH_SKIP_BUTTON);\n \t\tgetQueue().next();\n \t}\n \n \t@Override\n \tpublic void skipBack() {\n-\t\tgetQueue().back();\n+\t\tif (getCurrentPosition() < 2000) {\n+\t\t\tonSongFinished(PlayerHater.FINISH_SKIP_BUTTON);\n+\t\t\tgetQueue().back();\n+\t\t} else {\n+\t\t\tseekTo(0);\n+\t\t}\n \t}\n \n \t@Override\n@@ -91,7 +90,7 @@ public class PlaybackService extends PlayerHaterService implements\n \n \t@Override\n \tpublic int getQueuePosition() {\n-\t\treturn getQueue().getPosition();\n+\t\treturn getQueue().getPosition() + (isPlaying() ? 1 : 0);\n \t}\n \n \t@Override\n@@ -100,18 +99,61 @@ public class PlaybackService extends PlayerHaterService implements\n \t}\n \n \t@Override\n-\tpublic void onNowPlayingChanged(Song nowPlaying) {\n-\t\tgetMediaPlayer().prepare(getApplicationContext(), nowPlaying.getUri());\n+\tpublic void onNowPlayingChanged(Song nowPlaying, Song was) {\n+\t\tboolean willContinuePlaying = isPlaying();\n+\t\tSynchronousPlayer player = mMediaPlayerPool.getPlayer(\n+\t\t\t\tgetApplicationContext(), nowPlaying.getUri());\n+\t\tif (was == null) {\n+\t\t\tmMediaPlayerPool.recycle(swapMediaPlayer(player,\n+\t\t\t\t\twillContinuePlaying));\n+\t\t} else {\n+\t\t\tmMediaPlayerPool.recycle(\n+\t\t\t\t\tswapMediaPlayer(player, willContinuePlaying), was.getUri());\n+\t\t}\n \t\tonSongChanged();\n \t}\n \n \t@Override\n-\tpublic void onNextSongChanged(Song nextSong) {\n+\tpublic void onNextSongChanged(Song nextSong, Song was) {\n+\t\tif (nextSong != null) {\n+\t\t\tmMediaPlayerPool\n+\t\t\t\t\t.prepare(getApplicationContext(), nextSong.getUri());\n+\t\t}\n \t\tonNextSongChanged();\n \t}\n-\t\n+\n+\t@Override\n+\tpublic void onCompletion(MediaPlayer mp) {\n+\t\tif (peekMediaPlayer() != null && peekMediaPlayer().equals(mp)) {\n+\t\t\tonSongFinished(PlayerHater.FINISH_SONG_END);\n+\t\t\tgetQueue().next();\n+\t\t}\n+\t}\n+\n+\t@Override\n+\tpublic boolean onError(MediaPlayer mp, int what, int extra) {\n+\t\tif (peekMediaPlayer() != null && peekMediaPlayer().equals(mp)) {\n+\t\t\tonSongFinished(PlayerHater.FINISH_ERROR);\n+\t\t\tgetQueue().next();\n+\t\t\treturn true;\n+\t\t}\n+\t\treturn false;\n+\t}\n+\n \t@Override\n \tpublic Song getNextSong() {\n \t\treturn getQueue().getNextPlaying();\n \t}\n+\n+\t@Override\n+\tprotected void setMediaPlayer(SynchronousPlayer mediaPlayer) {\n+\t\tSynchronousPlayer oldPlayer = peekMediaPlayer();\n+\t\tif (oldPlayer != null) {\n+\t\t\toldPlayer.setOnErrorListener(null);\n+\t\t\toldPlayer.setOnCompletionListener(null);\n+\t\t}\n+\t\tsuper.setMediaPlayer(mediaPlayer);\n+\t\tmediaPlayer.setOnErrorListener(this);\n+\t\tmediaPlayer.setOnCompletionListener(this);\n+\t}\n }"],
      "repo_sni": "chrisrhoden/PlayerHater",
      "_version_": 1526826138538606592,
      "c_user_sni": "chrisrhoden",
      "c_callsites_added_cs": "<unknown>.d(<unknown>)#<unknown>.getState()#<unknown>.startTransaction()#org.prx.playerhater.PlaybackService.setMediaPlayer(<unknown>)#<unknown>.startTransaction()#<unknown>.startTransaction()#<unknown>.start()#<unknown>.commitTransaction()#<unknown>.startTransaction()#<unknown>.startTransaction()#<unknown>.peekMediaPlayer()#<unknown>.getMediaPlayer()#<unknown>.startTransaction()",
      "p_parents_ss": ["2ff9c40d96a27549a40442f7e9acb99f766cafe5"],
      "p_user_sni": "chrisrhoden",
      "c_subject_t": ["transact player changes"],
      "c_imports_added_cs": "org.prx.playerhater.util.Log",
      "c_callsites_removed_cs": "<unknown>.swapMediaPlayer(org.prx.playerhater.SynchronousPlayer, boolean)"
    }, {
      "c_patch_no_context_t": ["-\t\tLog.d(\"Currently in state \" + getState());\n-\t\tif (was == null) {\n-\t\t\tmMediaPlayerPool.recycle(peekMediaPlayer());\n-\t\t} else {\n-\t\t\tmMediaPlayerPool.recycle(peekMediaPlayer(), was.getUri());\n+\t\tif (peekMediaPlayer() != null) {\n+\t\t\tmMediaPlayerPool.recycle(peekMediaPlayer(), was == null ? null : was.getUri());\n-\t\tLog.d(\"Currently in state \" + getState());\n-\t\tLog.d(\"Currently in state \" + getState());\n-\t\tLog.d(\"Currently in state \" + getState());\n+\t\t\tSynchronousPlayer player = peekMediaPlayer();\n+\t\t\tsetMediaPlayer(null);\n+\t\t\tmMediaPlayerPool.recycle(player, nowPlaying().getUri());\n+\t\t\tSynchronousPlayer player = peekMediaPlayer();\n+\t\t\tsetMediaPlayer(null);\n+\t\t\tmMediaPlayerPool.recycle(player, nowPlaying().getUri());"],
      "p_patch_no_context_t": ["+import org.prx.playerhater.util.Log;\n+\t\tstartTransaction();\n+\t\tstartTransaction();\n+\t\t\tstartTransaction();\n-\t\tboolean willContinuePlaying = isPlaying();\n-\t\tSynchronousPlayer player = mMediaPlayerPool.getPlayer(\n-\t\t\t\tgetApplicationContext(), nowPlaying.getUri());\n+\t\tstartTransaction();\n+\t\tLog.d(\"Currently in state \" + getState());\n-\t\t\tmMediaPlayerPool.recycle(swapMediaPlayer(player,\n-\t\t\t\t\twillContinuePlaying));\n+\t\t\tmMediaPlayerPool.recycle(peekMediaPlayer());\n-\t\t\tmMediaPlayerPool.recycle(\n-\t\t\t\t\tswapMediaPlayer(player, willContinuePlaying), was.getUri());\n+\t\t\tmMediaPlayerPool.recycle(peekMediaPlayer(), was.getUri());\n+\t\tLog.d(\"Currently in state \" + getState());\n+\t\tsetMediaPlayer(mMediaPlayerPool.getPlayer(getApplicationContext(),\n+\t\t\t\tnowPlaying.getUri()));\n+\t\tLog.d(\"Currently in state \" + getState());\n+\t\tif (isPlaying()) {\n+\t\t\tgetMediaPlayer().start();\n+\t\t}\n+\t\tLog.d(\"Currently in state \" + getState());\n+\t\tcommitTransaction();\n+\t\t\tstartTransaction();\n+\t\t\tstartTransaction();"],
      "c_date_tdt": "May 31, 2013 1:53:27 PM",
      "c_imports_t": ["org.prx.playerhater.songs.SongQueue org.prx.playerhater.util.Log org.prx.playerhater.service.PlayerHaterService android.media.MediaPlayer.OnCompletionListener org.prx.playerhater.mediaplayer.SynchronousPlayer org.prx.playerhater.songs.SongQueue.OnQueuedSongsChangedListener android.media.MediaPlayer.OnErrorListener android.media.MediaPlayer org.prx.playerhater.mediaplayer.MediaPlayerPool"],
      "c_contents_t": ["package org.prx.playerhater;\n\nimport org.prx.playerhater.mediaplayer.MediaPlayerPool;\nimport org.prx.playerhater.mediaplayer.SynchronousPlayer;\nimport org.prx.playerhater.service.PlayerHaterService;\nimport org.prx.playerhater.songs.SongQueue;\nimport org.prx.playerhater.songs.SongQueue.OnQueuedSongsChangedListener;\nimport org.prx.playerhater.util.Log;\n\nimport android.media.MediaPlayer;\nimport android.media.MediaPlayer.OnCompletionListener;\nimport android.media.MediaPlayer.OnErrorListener;\n\npublic class PlaybackService extends PlayerHaterService implements\n\t\tOnQueuedSongsChangedListener, OnErrorListener, OnCompletionListener {\n\n\tprivate MediaPlayerPool mMediaPlayerPool;\n\n\t@Override\n\tpublic void onCreate() {\n\t\tsuper.onCreate();\n\t\tmMediaPlayerPool = new MediaPlayerPool();\n\t}\n\n\t@Override\n\tpublic boolean play(Song song, int startTime) {\n\t\tint position = enqueue(song);\n\t\tonSongFinished(PlayerHater.FINISH_SKIP_BUTTON);\n\t\tgetQueue().skipTo(position);\n\t\tseekTo(startTime);\n\t\treturn play();\n\t}\n\n\t@Override\n\tpublic boolean seekTo(int startTime) {\n\t\tgetMediaPlayer().seekTo(startTime);\n\t\treturn true;\n\t}\n\n\t@Override\n\tpublic int enqueue(Song song) {\n\t\treturn getQueue().appendSong(song);\n\t}\n\n\t@Override\n\tpublic boolean skipTo(int position) {\n\t\tstartTransaction();\n\t\tonSongFinished(PlayerHater.FINISH_SKIP_BUTTON);\n\t\treturn getQueue().skipTo(position);\n\t}\n\n\t@Override\n\tpublic void skip() {\n\t\tstartTransaction();\n\t\tonSongFinished(PlayerHater.FINISH_SKIP_BUTTON);\n\t\tgetQueue().next();\n\t}\n\n\t@Override\n\tpublic void skipBack() {\n\t\tif (getCurrentPosition() < 2000) {\n\t\t\tstartTransaction();\n\t\t\tonSongFinished(PlayerHater.FINISH_SKIP_BUTTON);\n\t\t\tgetQueue().back();\n\t\t} else {\n\t\t\tseekTo(0);\n\t\t}\n\t}\n\n\t@Override\n\tpublic void emptyQueue() {\n\t\tgetQueue().empty();\n\t}\n\n\t@Override\n\tpublic Song nowPlaying() {\n\t\treturn getQueue().getNowPlaying();\n\t}\n\n\tprivate SongQueue mQueue;\n\n\tprivate SongQueue getQueue() {\n\t\tif (mQueue == null) {\n\t\t\tmQueue = new SongQueue();\n\t\t\tmQueue.setQueuedSongsChangedListener(this);\n\t\t}\n\t\treturn mQueue;\n\t}\n\n\t@Override\n\tpublic int getQueueLength() {\n\t\treturn getQueue().size();\n\t}\n\n\t@Override\n\tpublic int getQueuePosition() {\n\t\treturn getQueue().getPosition() + (isPlaying() ? 1 : 0);\n\t}\n\n\t@Override\n\tpublic boolean removeFromQueue(int position) {\n\t\treturn getQueue().remove(position);\n\t}\n\n\t@Override\n\tpublic void onNowPlayingChanged(Song nowPlaying, Song was) {\n\t\tstartTransaction();\n\t\tif (peekMediaPlayer() != null) {\n\t\t\tmMediaPlayerPool.recycle(peekMediaPlayer(), was == null ? null : was.getUri());\n\t\t}\n\t\tsetMediaPlayer(mMediaPlayerPool.getPlayer(getApplicationContext(),\n\t\t\t\tnowPlaying.getUri()));\n\t\tif (isPlaying()) {\n\t\t\tgetMediaPlayer().start();\n\t\t}\n\t\tcommitTransaction();\n\t\tonSongChanged();\n\t}\n\n\t@Override\n\tpublic void onNextSongChanged(Song nextSong, Song was) {\n\t\tif (nextSong != null) {\n\t\t\tmMediaPlayerPool\n\t\t\t\t\t.prepare(getApplicationContext(), nextSong.getUri());\n\t\t}\n\t\tonNextSongChanged();\n\t}\n\n\t@Override\n\tpublic void onCompletion(MediaPlayer mp) {\n\t\tif (peekMediaPlayer() != null && peekMediaPlayer().equals(mp)) {\n\t\t\tstartTransaction();\n\t\t\tSynchronousPlayer player = peekMediaPlayer();\n\t\t\tsetMediaPlayer(null);\n\t\t\tmMediaPlayerPool.recycle(player, nowPlaying().getUri());\n\t\t\tonSongFinished(PlayerHater.FINISH_SONG_END);\n\t\t\tgetQueue().next();\n\t\t}\n\t}\n\n\t@Override\n\tpublic boolean onError(MediaPlayer mp, int what, int extra) {\n\t\tif (peekMediaPlayer() != null && peekMediaPlayer().equals(mp)) {\n\t\t\tstartTransaction();\n\t\t\tSynchronousPlayer player = peekMediaPlayer();\n\t\t\tsetMediaPlayer(null);\n\t\t\tmMediaPlayerPool.recycle(player, nowPlaying().getUri());\n\t\t\tonSongFinished(PlayerHater.FINISH_ERROR);\n\t\t\tgetQueue().next();\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\t@Override\n\tpublic Song getNextSong() {\n\t\treturn getQueue().getNextPlaying();\n\t}\n\n\t@Override\n\tprotected void setMediaPlayer(SynchronousPlayer mediaPlayer) {\n\t\tSynchronousPlayer oldPlayer = peekMediaPlayer();\n\t\tif (oldPlayer != null) {\n\t\t\toldPlayer.setOnErrorListener(null);\n\t\t\toldPlayer.setOnCompletionListener(null);\n\t\t}\n\t\tsuper.setMediaPlayer(mediaPlayer);\n\t\tmediaPlayer.setOnErrorListener(this);\n\t\tmediaPlayer.setOnCompletionListener(this);\n\t}\n}\n"],
      "p_date_tdt": "May 31, 2013 1:07:52 PM",
      "c_comments_t": ["<empty>"],
      "p_contents_t": ["package org.prx.playerhater;\n\nimport org.prx.playerhater.mediaplayer.MediaPlayerPool;\nimport org.prx.playerhater.mediaplayer.SynchronousPlayer;\nimport org.prx.playerhater.service.PlayerHaterService;\nimport org.prx.playerhater.songs.SongQueue;\nimport org.prx.playerhater.songs.SongQueue.OnQueuedSongsChangedListener;\nimport org.prx.playerhater.util.Log;\n\nimport android.media.MediaPlayer;\nimport android.media.MediaPlayer.OnCompletionListener;\nimport android.media.MediaPlayer.OnErrorListener;\n\npublic class PlaybackService extends PlayerHaterService implements\n\t\tOnQueuedSongsChangedListener, OnErrorListener, OnCompletionListener {\n\n\tprivate MediaPlayerPool mMediaPlayerPool;\n\n\t@Override\n\tpublic void onCreate() {\n\t\tsuper.onCreate();\n\t\tmMediaPlayerPool = new MediaPlayerPool();\n\t}\n\n\t@Override\n\tpublic boolean play(Song song, int startTime) {\n\t\tint position = enqueue(song);\n\t\tonSongFinished(PlayerHater.FINISH_SKIP_BUTTON);\n\t\tgetQueue().skipTo(position);\n\t\tseekTo(startTime);\n\t\treturn play();\n\t}\n\n\t@Override\n\tpublic boolean seekTo(int startTime) {\n\t\tgetMediaPlayer().seekTo(startTime);\n\t\treturn true;\n\t}\n\n\t@Override\n\tpublic int enqueue(Song song) {\n\t\treturn getQueue().appendSong(song);\n\t}\n\n\t@Override\n\tpublic boolean skipTo(int position) {\n\t\tstartTransaction();\n\t\tonSongFinished(PlayerHater.FINISH_SKIP_BUTTON);\n\t\treturn getQueue().skipTo(position);\n\t}\n\n\t@Override\n\tpublic void skip() {\n\t\tstartTransaction();\n\t\tonSongFinished(PlayerHater.FINISH_SKIP_BUTTON);\n\t\tgetQueue().next();\n\t}\n\n\t@Override\n\tpublic void skipBack() {\n\t\tif (getCurrentPosition() < 2000) {\n\t\t\tstartTransaction();\n\t\t\tonSongFinished(PlayerHater.FINISH_SKIP_BUTTON);\n\t\t\tgetQueue().back();\n\t\t} else {\n\t\t\tseekTo(0);\n\t\t}\n\t}\n\n\t@Override\n\tpublic void emptyQueue() {\n\t\tgetQueue().empty();\n\t}\n\n\t@Override\n\tpublic Song nowPlaying() {\n\t\treturn getQueue().getNowPlaying();\n\t}\n\n\tprivate SongQueue mQueue;\n\n\tprivate SongQueue getQueue() {\n\t\tif (mQueue == null) {\n\t\t\tmQueue = new SongQueue();\n\t\t\tmQueue.setQueuedSongsChangedListener(this);\n\t\t}\n\t\treturn mQueue;\n\t}\n\n\t@Override\n\tpublic int getQueueLength() {\n\t\treturn getQueue().size();\n\t}\n\n\t@Override\n\tpublic int getQueuePosition() {\n\t\treturn getQueue().getPosition() + (isPlaying() ? 1 : 0);\n\t}\n\n\t@Override\n\tpublic boolean removeFromQueue(int position) {\n\t\treturn getQueue().remove(position);\n\t}\n\n\t@Override\n\tpublic void onNowPlayingChanged(Song nowPlaying, Song was) {\n\t\tstartTransaction();\n\t\tLog.d(\"Currently in state \" + getState());\n\t\tif (was == null) {\n\t\t\tmMediaPlayerPool.recycle(peekMediaPlayer());\n\t\t} else {\n\t\t\tmMediaPlayerPool.recycle(peekMediaPlayer(), was.getUri());\n\t\t}\n\t\tLog.d(\"Currently in state \" + getState());\n\t\tsetMediaPlayer(mMediaPlayerPool.getPlayer(getApplicationContext(),\n\t\t\t\tnowPlaying.getUri()));\n\t\tLog.d(\"Currently in state \" + getState());\n\t\tif (isPlaying()) {\n\t\t\tgetMediaPlayer().start();\n\t\t}\n\t\tLog.d(\"Currently in state \" + getState());\n\t\tcommitTransaction();\n\t\tonSongChanged();\n\t}\n\n\t@Override\n\tpublic void onNextSongChanged(Song nextSong, Song was) {\n\t\tif (nextSong != null) {\n\t\t\tmMediaPlayerPool\n\t\t\t\t\t.prepare(getApplicationContext(), nextSong.getUri());\n\t\t}\n\t\tonNextSongChanged();\n\t}\n\n\t@Override\n\tpublic void onCompletion(MediaPlayer mp) {\n\t\tif (peekMediaPlayer() != null && peekMediaPlayer().equals(mp)) {\n\t\t\tstartTransaction();\n\t\t\tonSongFinished(PlayerHater.FINISH_SONG_END);\n\t\t\tgetQueue().next();\n\t\t}\n\t}\n\n\t@Override\n\tpublic boolean onError(MediaPlayer mp, int what, int extra) {\n\t\tif (peekMediaPlayer() != null && peekMediaPlayer().equals(mp)) {\n\t\t\tstartTransaction();\n\t\t\tonSongFinished(PlayerHater.FINISH_ERROR);\n\t\t\tgetQueue().next();\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\t@Override\n\tpublic Song getNextSong() {\n\t\treturn getQueue().getNextPlaying();\n\t}\n\n\t@Override\n\tprotected void setMediaPlayer(SynchronousPlayer mediaPlayer) {\n\t\tSynchronousPlayer oldPlayer = peekMediaPlayer();\n\t\tif (oldPlayer != null) {\n\t\t\toldPlayer.setOnErrorListener(null);\n\t\t\toldPlayer.setOnCompletionListener(null);\n\t\t}\n\t\tsuper.setMediaPlayer(mediaPlayer);\n\t\tmediaPlayer.setOnErrorListener(this);\n\t\tmediaPlayer.setOnCompletionListener(this);\n\t}\n}\n"],
      "c_hash_sni": "016e87cd537186f979b4abb14c640679a02d91b1",
      "name_sni": "src/org/prx/playerhater/PlaybackService.java",
      "c_parents_ss": ["32d9e7db8bb4324c6638adea2e43a7cfbf173797"],
      "c_imports_removed_t": ["<empty>"],
      "p_hash_sni": "32d9e7db8bb4324c6638adea2e43a7cfbf173797",
      "c_imports_added_t": ["<empty>"],
      "p_methods_t": ["MediaPlayerPool SongQueue appendSong back commitTransaction d empty enqueue equals getApplicationContext getCurrentPosition getMediaPlayer getNextPlaying getNowPlaying getPlayer getPosition getQueue getState getUri isPlaying next onNextSongChanged onSongChanged onSongFinished peekMediaPlayer play prepare recycle remove seekTo setMediaPlayer setOnCompletionListener setOnErrorListener setQueuedSongsChangedListener size skipTo start startTransaction"],
      "c_imports_removed_cs": "<empty>",
      "p_imports_t": ["org.prx.playerhater.songs.SongQueue org.prx.playerhater.util.Log org.prx.playerhater.service.PlayerHaterService android.media.MediaPlayer.OnCompletionListener org.prx.playerhater.mediaplayer.SynchronousPlayer org.prx.playerhater.songs.SongQueue.OnQueuedSongsChangedListener android.media.MediaPlayer.OnErrorListener android.media.MediaPlayer org.prx.playerhater.mediaplayer.MediaPlayerPool"],
      "p_subject_t": ["transact player changes"],
      "p_callsites_cs": "<unknown>.peekMediaPlayer()#<unknown>.setOnErrorListener(null)#<unknown>.recycle(<unknown>)#<unknown>.remove(int)#<unknown>.skipTo(int)#org.prx.playerhater.PlaybackService.getQueue()#<unknown>.setQueuedSongsChangedListener(org.prx.playerhater.PlaybackService)#<unknown>.SongQueue()#org.prx.playerhater.PlaybackService.enqueue(org.prx.playerhater.Song)#<unknown>.d(<unknown>)#<unknown>.next()#<unknown>.next()#<unknown>.onSongFinished(<unknown>)#<unknown>.getMediaPlayer()#<unknown>.equals(android.media.MediaPlayer)#<unknown>.peekMediaPlayer()#<unknown>.setOnCompletionListener(org.prx.playerhater.PlaybackService)#org.prx.playerhater.PlaybackService.getQueue()#<unknown>.onSongFinished(<unknown>)#<unknown>.getState()#<unknown>.next()#<unknown>.startTransaction()#org.prx.playerhater.PlaybackService.getQueue()#org.prx.playerhater.PlaybackService.getQueue()#<unknown>.setOnErrorListener(org.prx.playerhater.PlaybackService)#org.prx.playerhater.PlaybackService.setMediaPlayer(<unknown>)#<unknown>.onSongFinished(<unknown>)#<unknown>.skipTo(int)#org.prx.playerhater.PlaybackService.onNextSongChanged()#org.prx.playerhater.PlaybackService.play()#<unknown>.appendSong(org.prx.playerhater.Song)#<unknown>.onSongFinished(<unknown>)#org.prx.playerhater.PlaybackService.getQueue()#<unknown>.seekTo(int)#<unknown>.recycle(<unknown>, <unknown>)#<unknown>.startTransaction()#org.prx.playerhater.PlaybackService.getQueue()#org.prx.playerhater.PlaybackService.getQueue()#<unknown>.startTransaction()#org.prx.playerhater.PlaybackService.getQueue()#<unknown>.start()#<unknown>.onSongChanged()#<unknown>.isPlaying()#<unknown>.getNextPlaying()#<unknown>.size()#<unknown>.commitTransaction()#<unknown>.startTransaction()#<unknown>.getUri()#<unknown>.MediaPlayerPool()#<unknown>.getApplicationContext()#org.prx.playerhater.PlaybackService.getQueue()#<unknown>.startTransaction()#<unknown>.peekMediaPlayer()#<unknown>.peekMediaPlayer()#org.prx.playerhater.PlaybackService.getQueue()#org.prx.playerhater.PlaybackService.getQueue()#<unknown>.getApplicationContext()#org.prx.playerhater.PlaybackService.seekTo(int)#<unknown>.empty()#org.prx.playerhater.PlaybackService.seekTo(int)#<unknown>.prepare(<unknown>, <unknown>)#<unknown>.onSongFinished(<unknown>)#<unknown>.equals(android.media.MediaPlayer)#<unknown>.getCurrentPosition()#<unknown>.getMediaPlayer()#<unknown>.getUri()#org.prx.playerhater.PlaybackService.getQueue()#<unknown>.onSongFinished(<unknown>)#<unknown>.isPlaying()#org.prx.playerhater.PlaybackService.getQueue()#<unknown>.getUri()#<unknown>.getNowPlaying()#<unknown>.back()#<unknown>.getPosition()#<unknown>.getPlayer(<unknown>, <unknown>)#<unknown>.setOnCompletionListener(null)#<unknown>.startTransaction()",
      "p_callsites_t": ["<unknown>.peekMediaPlayer() <unknown>.setOnErrorListener(null) <unknown>.recycle(<unknown>) <unknown>.remove(int) <unknown>.skipTo(int) org.prx.playerhater.PlaybackService.getQueue() <unknown>.setQueuedSongsChangedListener(org.prx.playerhater.PlaybackService) <unknown>.SongQueue() org.prx.playerhater.PlaybackService.enqueue(org.prx.playerhater.Song) <unknown>.d(<unknown>) <unknown>.next() <unknown>.next() <unknown>.onSongFinished(<unknown>) <unknown>.getMediaPlayer() <unknown>.equals(android.media.MediaPlayer) <unknown>.peekMediaPlayer() <unknown>.setOnCompletionListener(org.prx.playerhater.PlaybackService) org.prx.playerhater.PlaybackService.getQueue() <unknown>.onSongFinished(<unknown>) <unknown>.getState() <unknown>.next() <unknown>.startTransaction() org.prx.playerhater.PlaybackService.getQueue() org.prx.playerhater.PlaybackService.getQueue() <unknown>.setOnErrorListener(org.prx.playerhater.PlaybackService) org.prx.playerhater.PlaybackService.setMediaPlayer(<unknown>) <unknown>.onSongFinished(<unknown>) <unknown>.skipTo(int) org.prx.playerhater.PlaybackService.onNextSongChanged() org.prx.playerhater.PlaybackService.play() <unknown>.appendSong(org.prx.playerhater.Song) <unknown>.onSongFinished(<unknown>) org.prx.playerhater.PlaybackService.getQueue() <unknown>.seekTo(int) <unknown>.recycle(<unknown>, <unknown>) <unknown>.startTransaction() org.prx.playerhater.PlaybackService.getQueue() org.prx.playerhater.PlaybackService.getQueue() <unknown>.startTransaction() org.prx.playerhater.PlaybackService.getQueue() <unknown>.start() <unknown>.onSongChanged() <unknown>.isPlaying() <unknown>.getNextPlaying() <unknown>.size() <unknown>.commitTransaction() <unknown>.startTransaction() <unknown>.getUri() <unknown>.MediaPlayerPool() <unknown>.getApplicationContext() org.prx.playerhater.PlaybackService.getQueue() <unknown>.startTransaction() <unknown>.peekMediaPlayer() <unknown>.peekMediaPlayer() org.prx.playerhater.PlaybackService.getQueue() org.prx.playerhater.PlaybackService.getQueue() <unknown>.getApplicationContext() org.prx.playerhater.PlaybackService.seekTo(int) <unknown>.empty() org.prx.playerhater.PlaybackService.seekTo(int) <unknown>.prepare(<unknown>, <unknown>) <unknown>.onSongFinished(<unknown>) <unknown>.equals(android.media.MediaPlayer) <unknown>.getCurrentPosition() <unknown>.getMediaPlayer() <unknown>.getUri() org.prx.playerhater.PlaybackService.getQueue() <unknown>.onSongFinished(<unknown>) <unknown>.isPlaying() org.prx.playerhater.PlaybackService.getQueue() <unknown>.getUri() <unknown>.getNowPlaying() <unknown>.back() <unknown>.getPosition() <unknown>.getPlayer(<unknown>, <unknown>) <unknown>.setOnCompletionListener(null) <unknown>.startTransaction()"],
      "c_callsites_t": ["<unknown>.peekMediaPlayer() <unknown>.setOnErrorListener(null) org.prx.playerhater.PlaybackService.setMediaPlayer(null) <unknown>.remove(int) <unknown>.skipTo(int) org.prx.playerhater.PlaybackService.getQueue() <unknown>.recycle(org.prx.playerhater.SynchronousPlayer, <unknown>) <unknown>.setQueuedSongsChangedListener(org.prx.playerhater.PlaybackService) <unknown>.SongQueue() org.prx.playerhater.PlaybackService.enqueue(org.prx.playerhater.Song) <unknown>.next() <unknown>.next() <unknown>.onSongFinished(<unknown>) <unknown>.getMediaPlayer() <unknown>.equals(android.media.MediaPlayer) <unknown>.peekMediaPlayer() <unknown>.setOnCompletionListener(org.prx.playerhater.PlaybackService) org.prx.playerhater.PlaybackService.getQueue() <unknown>.recycle(org.prx.playerhater.SynchronousPlayer, <unknown>) <unknown>.onSongFinished(<unknown>) <unknown>.next() <unknown>.startTransaction() org.prx.playerhater.PlaybackService.getQueue() org.prx.playerhater.PlaybackService.setMediaPlayer(null) org.prx.playerhater.PlaybackService.getQueue() <unknown>.setOnErrorListener(org.prx.playerhater.PlaybackService) org.prx.playerhater.PlaybackService.setMediaPlayer(<unknown>) org.prx.playerhater.PlaybackService.nowPlaying() <unknown>.onSongFinished(<unknown>) <unknown>.skipTo(int) org.prx.playerhater.PlaybackService.onNextSongChanged() org.prx.playerhater.PlaybackService.play() <unknown>.appendSong(org.prx.playerhater.Song) <unknown>.onSongFinished(<unknown>) org.prx.playerhater.PlaybackService.getQueue() <unknown>.seekTo(int) <unknown>.startTransaction() <unknown>.getUri() org.prx.playerhater.PlaybackService.getQueue() org.prx.playerhater.PlaybackService.getQueue() <unknown>.startTransaction() org.prx.playerhater.PlaybackService.getQueue() <unknown>.start() <unknown>.onSongChanged() org.prx.playerhater.PlaybackService.nowPlaying() <unknown>.isPlaying() <unknown>.getNextPlaying() <unknown>.size() <unknown>.commitTransaction() <unknown>.startTransaction() <unknown>.getUri() <unknown>.MediaPlayerPool() <unknown>.getApplicationContext() org.prx.playerhater.PlaybackService.getQueue() <unknown>.startTransaction() <unknown>.peekMediaPlayer() <unknown>.peekMediaPlayer() <unknown>.recycle(<unknown>, <unknown>) <unknown>.getUri() org.prx.playerhater.PlaybackService.getQueue() org.prx.playerhater.PlaybackService.getQueue() <unknown>.getApplicationContext() org.prx.playerhater.PlaybackService.seekTo(int) <unknown>.empty() org.prx.playerhater.PlaybackService.seekTo(int) <unknown>.prepare(<unknown>, <unknown>) <unknown>.onSongFinished(<unknown>) <unknown>.equals(android.media.MediaPlayer) <unknown>.getCurrentPosition() <unknown>.getMediaPlayer() <unknown>.getUri() org.prx.playerhater.PlaybackService.getQueue() <unknown>.onSongFinished(<unknown>) <unknown>.isPlaying() org.prx.playerhater.PlaybackService.getQueue() <unknown>.getUri() <unknown>.getNowPlaying() <unknown>.back() <unknown>.getPosition() <unknown>.getPlayer(<unknown>, <unknown>) <unknown>.setOnCompletionListener(null) <unknown>.startTransaction()"],
      "c_callsites_added_t": ["org.prx.playerhater.PlaybackService.setMediaPlayer(null) <unknown>.recycle(org.prx.playerhater.SynchronousPlayer, <unknown>) <unknown>.recycle(org.prx.playerhater.SynchronousPlayer, <unknown>) org.prx.playerhater.PlaybackService.setMediaPlayer(null) org.prx.playerhater.PlaybackService.nowPlaying() org.prx.playerhater.PlaybackService.nowPlaying() <unknown>.getUri() <unknown>.getUri()"],
      "c_methods_t": ["MediaPlayerPool SongQueue appendSong back commitTransaction empty enqueue equals getApplicationContext getCurrentPosition getMediaPlayer getNextPlaying getNowPlaying getPlayer getPosition getQueue getUri isPlaying next nowPlaying onNextSongChanged onSongChanged onSongFinished peekMediaPlayer play prepare recycle remove seekTo setMediaPlayer setOnCompletionListener setOnErrorListener setQueuedSongsChangedListener size skipTo start startTransaction"],
      "id": "chrisrhoden/PlayerHater\u0000src/org/prx/playerhater/PlaybackService.java\u000032d9e7db8bb4324c6638adea2e43a7cfbf173797\u0000016e87cd537186f979b4abb14c640679a02d91b1",
      "p_comments_t": ["<empty>"],
      "p_email_sni": "carhoden@gmail.com",
      "c_callsites_removed_t": ["<unknown>.recycle(<unknown>) <unknown>.d(<unknown>) <unknown>.getState()"],
      "c_callsites_cs": "<unknown>.peekMediaPlayer()#<unknown>.setOnErrorListener(null)#org.prx.playerhater.PlaybackService.setMediaPlayer(null)#<unknown>.remove(int)#<unknown>.skipTo(int)#org.prx.playerhater.PlaybackService.getQueue()#<unknown>.recycle(org.prx.playerhater.SynchronousPlayer, <unknown>)#<unknown>.setQueuedSongsChangedListener(org.prx.playerhater.PlaybackService)#<unknown>.SongQueue()#org.prx.playerhater.PlaybackService.enqueue(org.prx.playerhater.Song)#<unknown>.next()#<unknown>.next()#<unknown>.onSongFinished(<unknown>)#<unknown>.getMediaPlayer()#<unknown>.equals(android.media.MediaPlayer)#<unknown>.peekMediaPlayer()#<unknown>.setOnCompletionListener(org.prx.playerhater.PlaybackService)#org.prx.playerhater.PlaybackService.getQueue()#<unknown>.recycle(org.prx.playerhater.SynchronousPlayer, <unknown>)#<unknown>.onSongFinished(<unknown>)#<unknown>.next()#<unknown>.startTransaction()#org.prx.playerhater.PlaybackService.getQueue()#org.prx.playerhater.PlaybackService.setMediaPlayer(null)#org.prx.playerhater.PlaybackService.getQueue()#<unknown>.setOnErrorListener(org.prx.playerhater.PlaybackService)#org.prx.playerhater.PlaybackService.setMediaPlayer(<unknown>)#org.prx.playerhater.PlaybackService.nowPlaying()#<unknown>.onSongFinished(<unknown>)#<unknown>.skipTo(int)#org.prx.playerhater.PlaybackService.onNextSongChanged()#org.prx.playerhater.PlaybackService.play()#<unknown>.appendSong(org.prx.playerhater.Song)#<unknown>.onSongFinished(<unknown>)#org.prx.playerhater.PlaybackService.getQueue()#<unknown>.seekTo(int)#<unknown>.startTransaction()#<unknown>.getUri()#org.prx.playerhater.PlaybackService.getQueue()#org.prx.playerhater.PlaybackService.getQueue()#<unknown>.startTransaction()#org.prx.playerhater.PlaybackService.getQueue()#<unknown>.start()#<unknown>.onSongChanged()#org.prx.playerhater.PlaybackService.nowPlaying()#<unknown>.isPlaying()#<unknown>.getNextPlaying()#<unknown>.size()#<unknown>.commitTransaction()#<unknown>.startTransaction()#<unknown>.getUri()#<unknown>.MediaPlayerPool()#<unknown>.getApplicationContext()#org.prx.playerhater.PlaybackService.getQueue()#<unknown>.startTransaction()#<unknown>.peekMediaPlayer()#<unknown>.peekMediaPlayer()#<unknown>.recycle(<unknown>, <unknown>)#<unknown>.getUri()#org.prx.playerhater.PlaybackService.getQueue()#org.prx.playerhater.PlaybackService.getQueue()#<unknown>.getApplicationContext()#org.prx.playerhater.PlaybackService.seekTo(int)#<unknown>.empty()#org.prx.playerhater.PlaybackService.seekTo(int)#<unknown>.prepare(<unknown>, <unknown>)#<unknown>.onSongFinished(<unknown>)#<unknown>.equals(android.media.MediaPlayer)#<unknown>.getCurrentPosition()#<unknown>.getMediaPlayer()#<unknown>.getUri()#org.prx.playerhater.PlaybackService.getQueue()#<unknown>.onSongFinished(<unknown>)#<unknown>.isPlaying()#org.prx.playerhater.PlaybackService.getQueue()#<unknown>.getUri()#<unknown>.getNowPlaying()#<unknown>.back()#<unknown>.getPosition()#<unknown>.getPlayer(<unknown>, <unknown>)#<unknown>.setOnCompletionListener(null)#<unknown>.startTransaction()",
      "p_body_t": ["<empty>"],
      "c_patch_t": [" \t@Override\n \tpublic void onNowPlayingChanged(Song nowPlaying, Song was) {\n \t\tstartTransaction();\n-\t\tLog.d(\"Currently in state \" + getState());\n-\t\tif (was == null) {\n-\t\t\tmMediaPlayerPool.recycle(peekMediaPlayer());\n-\t\t} else {\n-\t\t\tmMediaPlayerPool.recycle(peekMediaPlayer(), was.getUri());\n+\t\tif (peekMediaPlayer() != null) {\n+\t\t\tmMediaPlayerPool.recycle(peekMediaPlayer(), was == null ? null : was.getUri());\n \t\t}\n-\t\tLog.d(\"Currently in state \" + getState());\n \t\tsetMediaPlayer(mMediaPlayerPool.getPlayer(getApplicationContext(),\n \t\t\t\tnowPlaying.getUri()));\n-\t\tLog.d(\"Currently in state \" + getState());\n \t\tif (isPlaying()) {\n \t\t\tgetMediaPlayer().start();\n \t\t}\n-\t\tLog.d(\"Currently in state \" + getState());\n \t\tcommitTransaction();\n \t\tonSongChanged();\n \t}\n@@ -136,6 +130,9 @@ public class PlaybackService extends PlayerHaterService implements\n \tpublic void onCompletion(MediaPlayer mp) {\n \t\tif (peekMediaPlayer() != null && peekMediaPlayer().equals(mp)) {\n \t\t\tstartTransaction();\n+\t\t\tSynchronousPlayer player = peekMediaPlayer();\n+\t\t\tsetMediaPlayer(null);\n+\t\t\tmMediaPlayerPool.recycle(player, nowPlaying().getUri());\n \t\t\tonSongFinished(PlayerHater.FINISH_SONG_END);\n \t\t\tgetQueue().next();\n \t\t}\n@@ -145,6 +142,9 @@ public class PlaybackService extends PlayerHaterService implements\n \tpublic boolean onError(MediaPlayer mp, int what, int extra) {\n \t\tif (peekMediaPlayer() != null && peekMediaPlayer().equals(mp)) {\n \t\t\tstartTransaction();\n+\t\t\tSynchronousPlayer player = peekMediaPlayer();\n+\t\t\tsetMediaPlayer(null);\n+\t\t\tmMediaPlayerPool.recycle(player, nowPlaying().getUri());\n \t\t\tonSongFinished(PlayerHater.FINISH_ERROR);\n \t\t\tgetQueue().next();\n \t\t\treturn true;"],
      "c_body_t": ["<empty>"],
      "c_email_sni": "carhoden@gmail.com",
      "p_patch_t": [" import org.prx.playerhater.service.PlayerHaterService;\n import org.prx.playerhater.songs.SongQueue;\n import org.prx.playerhater.songs.SongQueue.OnQueuedSongsChangedListener;\n+import org.prx.playerhater.util.Log;\n \n import android.media.MediaPlayer;\n import android.media.MediaPlayer.OnCompletionListener;\n@@ -43,12 +44,14 @@ public class PlaybackService extends PlayerHaterService implements\n \n \t@Override\n \tpublic boolean skipTo(int position) {\n+\t\tstartTransaction();\n \t\tonSongFinished(PlayerHater.FINISH_SKIP_BUTTON);\n \t\treturn getQueue().skipTo(position);\n \t}\n \n \t@Override\n \tpublic void skip() {\n+\t\tstartTransaction();\n \t\tonSongFinished(PlayerHater.FINISH_SKIP_BUTTON);\n \t\tgetQueue().next();\n \t}\n@@ -56,6 +59,7 @@ public class PlaybackService extends PlayerHaterService implements\n \t@Override\n \tpublic void skipBack() {\n \t\tif (getCurrentPosition() < 2000) {\n+\t\t\tstartTransaction();\n \t\t\tonSongFinished(PlayerHater.FINISH_SKIP_BUTTON);\n \t\t\tgetQueue().back();\n \t\t} else {\n@@ -100,16 +104,22 @@ public class PlaybackService extends PlayerHaterService implements\n \n \t@Override\n \tpublic void onNowPlayingChanged(Song nowPlaying, Song was) {\n-\t\tboolean willContinuePlaying = isPlaying();\n-\t\tSynchronousPlayer player = mMediaPlayerPool.getPlayer(\n-\t\t\t\tgetApplicationContext(), nowPlaying.getUri());\n+\t\tstartTransaction();\n+\t\tLog.d(\"Currently in state \" + getState());\n \t\tif (was == null) {\n-\t\t\tmMediaPlayerPool.recycle(swapMediaPlayer(player,\n-\t\t\t\t\twillContinuePlaying));\n+\t\t\tmMediaPlayerPool.recycle(peekMediaPlayer());\n \t\t} else {\n-\t\t\tmMediaPlayerPool.recycle(\n-\t\t\t\t\tswapMediaPlayer(player, willContinuePlaying), was.getUri());\n+\t\t\tmMediaPlayerPool.recycle(peekMediaPlayer(), was.getUri());\n \t\t}\n+\t\tLog.d(\"Currently in state \" + getState());\n+\t\tsetMediaPlayer(mMediaPlayerPool.getPlayer(getApplicationContext(),\n+\t\t\t\tnowPlaying.getUri()));\n+\t\tLog.d(\"Currently in state \" + getState());\n+\t\tif (isPlaying()) {\n+\t\t\tgetMediaPlayer().start();\n+\t\t}\n+\t\tLog.d(\"Currently in state \" + getState());\n+\t\tcommitTransaction();\n \t\tonSongChanged();\n \t}\n \n@@ -125,6 +135,7 @@ public class PlaybackService extends PlayerHaterService implements\n \t@Override\n \tpublic void onCompletion(MediaPlayer mp) {\n \t\tif (peekMediaPlayer() != null && peekMediaPlayer().equals(mp)) {\n+\t\t\tstartTransaction();\n \t\t\tonSongFinished(PlayerHater.FINISH_SONG_END);\n \t\t\tgetQueue().next();\n \t\t}\n@@ -133,6 +144,7 @@ public class PlaybackService extends PlayerHaterService implements\n \t@Override\n \tpublic boolean onError(MediaPlayer mp, int what, int extra) {\n \t\tif (peekMediaPlayer() != null && peekMediaPlayer().equals(mp)) {\n+\t\t\tstartTransaction();\n \t\t\tonSongFinished(PlayerHater.FINISH_ERROR);\n \t\t\tgetQueue().next();\n \t\t\treturn true;"],
      "repo_sni": "chrisrhoden/PlayerHater",
      "_version_": 1526826138551189504,
      "c_user_sni": "chrisrhoden",
      "c_callsites_added_cs": "org.prx.playerhater.PlaybackService.setMediaPlayer(null)#<unknown>.recycle(org.prx.playerhater.SynchronousPlayer, <unknown>)#<unknown>.recycle(org.prx.playerhater.SynchronousPlayer, <unknown>)#org.prx.playerhater.PlaybackService.setMediaPlayer(null)#org.prx.playerhater.PlaybackService.nowPlaying()#org.prx.playerhater.PlaybackService.nowPlaying()#<unknown>.getUri()#<unknown>.getUri()",
      "p_parents_ss": ["a5f377899e973f3adf3094c36111b5e63a63482b"],
      "p_user_sni": "chrisrhoden",
      "c_subject_t": ["Zeno"],
      "c_imports_added_cs": "<empty>",
      "c_callsites_removed_cs": "<unknown>.recycle(<unknown>)#<unknown>.d(<unknown>)#<unknown>.getState()"
    }, {
      "c_patch_no_context_t": ["+/*******************************************************************************\n+ * Copyright 2013 Chris Rhoden, Rebecca Nesson, Public Radio Exchange\n+ * \n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * \n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ ******************************************************************************/\n+\n-import org.prx.playerhater.util.Log;\n+\t\n+\t@Override\n+\tpublic void onDestroy() {\n+\t\tmMediaPlayerPool.release();\n+\t\tsuper.onDestroy();\n+\t}\n+\t\n-\t\tmediaPlayer.setOnErrorListener(this);\n-\t\tmediaPlayer.setOnCompletionListener(this);\n+\t\tif (mediaPlayer != null) {\n+\t\t\tmediaPlayer.setOnErrorListener(this);\n+\t\t\tmediaPlayer.setOnCompletionListener(this);\n+\t\t}"],
      "p_patch_no_context_t": ["-\t\tLog.d(\"Currently in state \" + getState());\n-\t\tif (was == null) {\n-\t\t\tmMediaPlayerPool.recycle(peekMediaPlayer());\n-\t\t} else {\n-\t\t\tmMediaPlayerPool.recycle(peekMediaPlayer(), was.getUri());\n+\t\tif (peekMediaPlayer() != null) {\n+\t\t\tmMediaPlayerPool.recycle(peekMediaPlayer(), was == null ? null : was.getUri());\n-\t\tLog.d(\"Currently in state \" + getState());\n-\t\tLog.d(\"Currently in state \" + getState());\n-\t\tLog.d(\"Currently in state \" + getState());\n+\t\t\tSynchronousPlayer player = peekMediaPlayer();\n+\t\t\tsetMediaPlayer(null);\n+\t\t\tmMediaPlayerPool.recycle(player, nowPlaying().getUri());\n+\t\t\tSynchronousPlayer player = peekMediaPlayer();\n+\t\t\tsetMediaPlayer(null);\n+\t\t\tmMediaPlayerPool.recycle(player, nowPlaying().getUri());"],
      "c_date_tdt": "May 31, 2013 3:17:47 PM",
      "c_imports_t": ["org.prx.playerhater.songs.SongQueue org.prx.playerhater.service.PlayerHaterService android.media.MediaPlayer.OnCompletionListener org.prx.playerhater.mediaplayer.SynchronousPlayer org.prx.playerhater.songs.SongQueue.OnQueuedSongsChangedListener android.media.MediaPlayer.OnErrorListener android.media.MediaPlayer org.prx.playerhater.mediaplayer.MediaPlayerPool"],
      "c_contents_t": ["/*******************************************************************************\n * Copyright 2013 Chris Rhoden, Rebecca Nesson, Public Radio Exchange\n * \n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * \n *   http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n ******************************************************************************/\n\npackage org.prx.playerhater;\n\nimport org.prx.playerhater.mediaplayer.MediaPlayerPool;\nimport org.prx.playerhater.mediaplayer.SynchronousPlayer;\nimport org.prx.playerhater.service.PlayerHaterService;\nimport org.prx.playerhater.songs.SongQueue;\nimport org.prx.playerhater.songs.SongQueue.OnQueuedSongsChangedListener;\n\nimport android.media.MediaPlayer;\nimport android.media.MediaPlayer.OnCompletionListener;\nimport android.media.MediaPlayer.OnErrorListener;\n\npublic class PlaybackService extends PlayerHaterService implements\n\t\tOnQueuedSongsChangedListener, OnErrorListener, OnCompletionListener {\n\n\tprivate MediaPlayerPool mMediaPlayerPool;\n\n\t@Override\n\tpublic void onCreate() {\n\t\tsuper.onCreate();\n\t\tmMediaPlayerPool = new MediaPlayerPool();\n\t}\n\n\t\n\t@Override\n\tpublic void onDestroy() {\n\t\tmMediaPlayerPool.release();\n\t\tsuper.onDestroy();\n\t}\n\t\n\t@Override\n\tpublic boolean play(Song song, int startTime) {\n\t\tint position = enqueue(song);\n\t\tonSongFinished(PlayerHater.FINISH_SKIP_BUTTON);\n\t\tgetQueue().skipTo(position);\n\t\tseekTo(startTime);\n\t\treturn play();\n\t}\n\n\t@Override\n\tpublic boolean seekTo(int startTime) {\n\t\tgetMediaPlayer().seekTo(startTime);\n\t\treturn true;\n\t}\n\n\t@Override\n\tpublic int enqueue(Song song) {\n\t\treturn getQueue().appendSong(song);\n\t}\n\n\t@Override\n\tpublic boolean skipTo(int position) {\n\t\tstartTransaction();\n\t\tonSongFinished(PlayerHater.FINISH_SKIP_BUTTON);\n\t\treturn getQueue().skipTo(position);\n\t}\n\n\t@Override\n\tpublic void skip() {\n\t\tstartTransaction();\n\t\tonSongFinished(PlayerHater.FINISH_SKIP_BUTTON);\n\t\tgetQueue().next();\n\t}\n\n\t@Override\n\tpublic void skipBack() {\n\t\tif (getCurrentPosition() < 2000) {\n\t\t\tstartTransaction();\n\t\t\tonSongFinished(PlayerHater.FINISH_SKIP_BUTTON);\n\t\t\tgetQueue().back();\n\t\t} else {\n\t\t\tseekTo(0);\n\t\t}\n\t}\n\n\t@Override\n\tpublic void emptyQueue() {\n\t\tgetQueue().empty();\n\t}\n\n\t@Override\n\tpublic Song nowPlaying() {\n\t\treturn getQueue().getNowPlaying();\n\t}\n\n\tprivate SongQueue mQueue;\n\n\tprivate SongQueue getQueue() {\n\t\tif (mQueue == null) {\n\t\t\tmQueue = new SongQueue();\n\t\t\tmQueue.setQueuedSongsChangedListener(this);\n\t\t}\n\t\treturn mQueue;\n\t}\n\n\t@Override\n\tpublic int getQueueLength() {\n\t\treturn getQueue().size();\n\t}\n\n\t@Override\n\tpublic int getQueuePosition() {\n\t\treturn getQueue().getPosition() + (isPlaying() ? 1 : 0);\n\t}\n\n\t@Override\n\tpublic boolean removeFromQueue(int position) {\n\t\treturn getQueue().remove(position);\n\t}\n\n\t@Override\n\tpublic void onNowPlayingChanged(Song nowPlaying, Song was) {\n\t\tstartTransaction();\n\t\tif (peekMediaPlayer() != null) {\n\t\t\tmMediaPlayerPool.recycle(peekMediaPlayer(), was == null ? null : was.getUri());\n\t\t}\n\t\tsetMediaPlayer(mMediaPlayerPool.getPlayer(getApplicationContext(),\n\t\t\t\tnowPlaying.getUri()));\n\t\tif (isPlaying()) {\n\t\t\tgetMediaPlayer().start();\n\t\t}\n\t\tcommitTransaction();\n\t\tonSongChanged();\n\t}\n\n\t@Override\n\tpublic void onNextSongChanged(Song nextSong, Song was) {\n\t\tif (nextSong != null) {\n\t\t\tmMediaPlayerPool\n\t\t\t\t\t.prepare(getApplicationContext(), nextSong.getUri());\n\t\t}\n\t\tonNextSongChanged();\n\t}\n\n\t@Override\n\tpublic void onCompletion(MediaPlayer mp) {\n\t\tif (peekMediaPlayer() != null && peekMediaPlayer().equals(mp)) {\n\t\t\tstartTransaction();\n\t\t\tSynchronousPlayer player = peekMediaPlayer();\n\t\t\tsetMediaPlayer(null);\n\t\t\tmMediaPlayerPool.recycle(player, nowPlaying().getUri());\n\t\t\tonSongFinished(PlayerHater.FINISH_SONG_END);\n\t\t\tgetQueue().next();\n\t\t}\n\t}\n\n\t@Override\n\tpublic boolean onError(MediaPlayer mp, int what, int extra) {\n\t\tif (peekMediaPlayer() != null && peekMediaPlayer().equals(mp)) {\n\t\t\tstartTransaction();\n\t\t\tSynchronousPlayer player = peekMediaPlayer();\n\t\t\tsetMediaPlayer(null);\n\t\t\tmMediaPlayerPool.recycle(player, nowPlaying().getUri());\n\t\t\tonSongFinished(PlayerHater.FINISH_ERROR);\n\t\t\tgetQueue().next();\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\t@Override\n\tpublic Song getNextSong() {\n\t\treturn getQueue().getNextPlaying();\n\t}\n\n\t@Override\n\tprotected void setMediaPlayer(SynchronousPlayer mediaPlayer) {\n\t\tSynchronousPlayer oldPlayer = peekMediaPlayer();\n\t\tif (oldPlayer != null) {\n\t\t\toldPlayer.setOnErrorListener(null);\n\t\t\toldPlayer.setOnCompletionListener(null);\n\t\t}\n\t\tsuper.setMediaPlayer(mediaPlayer);\n\t\tif (mediaPlayer != null) {\n\t\t\tmediaPlayer.setOnErrorListener(this);\n\t\t\tmediaPlayer.setOnCompletionListener(this);\n\t\t}\n\t}\n}\n"],
      "p_date_tdt": "May 31, 2013 1:53:27 PM",
      "c_comments_t": ["<empty>"],
      "p_contents_t": ["package org.prx.playerhater;\n\nimport org.prx.playerhater.mediaplayer.MediaPlayerPool;\nimport org.prx.playerhater.mediaplayer.SynchronousPlayer;\nimport org.prx.playerhater.service.PlayerHaterService;\nimport org.prx.playerhater.songs.SongQueue;\nimport org.prx.playerhater.songs.SongQueue.OnQueuedSongsChangedListener;\nimport org.prx.playerhater.util.Log;\n\nimport android.media.MediaPlayer;\nimport android.media.MediaPlayer.OnCompletionListener;\nimport android.media.MediaPlayer.OnErrorListener;\n\npublic class PlaybackService extends PlayerHaterService implements\n\t\tOnQueuedSongsChangedListener, OnErrorListener, OnCompletionListener {\n\n\tprivate MediaPlayerPool mMediaPlayerPool;\n\n\t@Override\n\tpublic void onCreate() {\n\t\tsuper.onCreate();\n\t\tmMediaPlayerPool = new MediaPlayerPool();\n\t}\n\n\t@Override\n\tpublic boolean play(Song song, int startTime) {\n\t\tint position = enqueue(song);\n\t\tonSongFinished(PlayerHater.FINISH_SKIP_BUTTON);\n\t\tgetQueue().skipTo(position);\n\t\tseekTo(startTime);\n\t\treturn play();\n\t}\n\n\t@Override\n\tpublic boolean seekTo(int startTime) {\n\t\tgetMediaPlayer().seekTo(startTime);\n\t\treturn true;\n\t}\n\n\t@Override\n\tpublic int enqueue(Song song) {\n\t\treturn getQueue().appendSong(song);\n\t}\n\n\t@Override\n\tpublic boolean skipTo(int position) {\n\t\tstartTransaction();\n\t\tonSongFinished(PlayerHater.FINISH_SKIP_BUTTON);\n\t\treturn getQueue().skipTo(position);\n\t}\n\n\t@Override\n\tpublic void skip() {\n\t\tstartTransaction();\n\t\tonSongFinished(PlayerHater.FINISH_SKIP_BUTTON);\n\t\tgetQueue().next();\n\t}\n\n\t@Override\n\tpublic void skipBack() {\n\t\tif (getCurrentPosition() < 2000) {\n\t\t\tstartTransaction();\n\t\t\tonSongFinished(PlayerHater.FINISH_SKIP_BUTTON);\n\t\t\tgetQueue().back();\n\t\t} else {\n\t\t\tseekTo(0);\n\t\t}\n\t}\n\n\t@Override\n\tpublic void emptyQueue() {\n\t\tgetQueue().empty();\n\t}\n\n\t@Override\n\tpublic Song nowPlaying() {\n\t\treturn getQueue().getNowPlaying();\n\t}\n\n\tprivate SongQueue mQueue;\n\n\tprivate SongQueue getQueue() {\n\t\tif (mQueue == null) {\n\t\t\tmQueue = new SongQueue();\n\t\t\tmQueue.setQueuedSongsChangedListener(this);\n\t\t}\n\t\treturn mQueue;\n\t}\n\n\t@Override\n\tpublic int getQueueLength() {\n\t\treturn getQueue().size();\n\t}\n\n\t@Override\n\tpublic int getQueuePosition() {\n\t\treturn getQueue().getPosition() + (isPlaying() ? 1 : 0);\n\t}\n\n\t@Override\n\tpublic boolean removeFromQueue(int position) {\n\t\treturn getQueue().remove(position);\n\t}\n\n\t@Override\n\tpublic void onNowPlayingChanged(Song nowPlaying, Song was) {\n\t\tstartTransaction();\n\t\tif (peekMediaPlayer() != null) {\n\t\t\tmMediaPlayerPool.recycle(peekMediaPlayer(), was == null ? null : was.getUri());\n\t\t}\n\t\tsetMediaPlayer(mMediaPlayerPool.getPlayer(getApplicationContext(),\n\t\t\t\tnowPlaying.getUri()));\n\t\tif (isPlaying()) {\n\t\t\tgetMediaPlayer().start();\n\t\t}\n\t\tcommitTransaction();\n\t\tonSongChanged();\n\t}\n\n\t@Override\n\tpublic void onNextSongChanged(Song nextSong, Song was) {\n\t\tif (nextSong != null) {\n\t\t\tmMediaPlayerPool\n\t\t\t\t\t.prepare(getApplicationContext(), nextSong.getUri());\n\t\t}\n\t\tonNextSongChanged();\n\t}\n\n\t@Override\n\tpublic void onCompletion(MediaPlayer mp) {\n\t\tif (peekMediaPlayer() != null && peekMediaPlayer().equals(mp)) {\n\t\t\tstartTransaction();\n\t\t\tSynchronousPlayer player = peekMediaPlayer();\n\t\t\tsetMediaPlayer(null);\n\t\t\tmMediaPlayerPool.recycle(player, nowPlaying().getUri());\n\t\t\tonSongFinished(PlayerHater.FINISH_SONG_END);\n\t\t\tgetQueue().next();\n\t\t}\n\t}\n\n\t@Override\n\tpublic boolean onError(MediaPlayer mp, int what, int extra) {\n\t\tif (peekMediaPlayer() != null && peekMediaPlayer().equals(mp)) {\n\t\t\tstartTransaction();\n\t\t\tSynchronousPlayer player = peekMediaPlayer();\n\t\t\tsetMediaPlayer(null);\n\t\t\tmMediaPlayerPool.recycle(player, nowPlaying().getUri());\n\t\t\tonSongFinished(PlayerHater.FINISH_ERROR);\n\t\t\tgetQueue().next();\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\t@Override\n\tpublic Song getNextSong() {\n\t\treturn getQueue().getNextPlaying();\n\t}\n\n\t@Override\n\tprotected void setMediaPlayer(SynchronousPlayer mediaPlayer) {\n\t\tSynchronousPlayer oldPlayer = peekMediaPlayer();\n\t\tif (oldPlayer != null) {\n\t\t\toldPlayer.setOnErrorListener(null);\n\t\t\toldPlayer.setOnCompletionListener(null);\n\t\t}\n\t\tsuper.setMediaPlayer(mediaPlayer);\n\t\tmediaPlayer.setOnErrorListener(this);\n\t\tmediaPlayer.setOnCompletionListener(this);\n\t}\n}\n"],
      "c_hash_sni": "26b7a482e7714b9a19094ab9ad47210aa43e9fb6",
      "name_sni": "src/org/prx/playerhater/PlaybackService.java",
      "c_parents_ss": ["016e87cd537186f979b4abb14c640679a02d91b1"],
      "c_imports_removed_t": ["org.prx.playerhater.util.Log"],
      "p_hash_sni": "016e87cd537186f979b4abb14c640679a02d91b1",
      "c_imports_added_t": ["<empty>"],
      "p_methods_t": ["MediaPlayerPool SongQueue appendSong back commitTransaction empty enqueue equals getApplicationContext getCurrentPosition getMediaPlayer getNextPlaying getNowPlaying getPlayer getPosition getQueue getUri isPlaying next nowPlaying onNextSongChanged onSongChanged onSongFinished peekMediaPlayer play prepare recycle remove seekTo setMediaPlayer setOnCompletionListener setOnErrorListener setQueuedSongsChangedListener size skipTo start startTransaction"],
      "c_imports_removed_cs": "org.prx.playerhater.util.Log",
      "p_imports_t": ["org.prx.playerhater.songs.SongQueue org.prx.playerhater.util.Log org.prx.playerhater.service.PlayerHaterService android.media.MediaPlayer.OnCompletionListener org.prx.playerhater.mediaplayer.SynchronousPlayer org.prx.playerhater.songs.SongQueue.OnQueuedSongsChangedListener android.media.MediaPlayer.OnErrorListener android.media.MediaPlayer org.prx.playerhater.mediaplayer.MediaPlayerPool"],
      "p_subject_t": ["Zeno"],
      "p_callsites_cs": "<unknown>.peekMediaPlayer()#<unknown>.setOnErrorListener(null)#org.prx.playerhater.PlaybackService.setMediaPlayer(null)#<unknown>.remove(int)#<unknown>.skipTo(int)#org.prx.playerhater.PlaybackService.getQueue()#<unknown>.recycle(org.prx.playerhater.SynchronousPlayer, <unknown>)#<unknown>.setQueuedSongsChangedListener(org.prx.playerhater.PlaybackService)#<unknown>.SongQueue()#org.prx.playerhater.PlaybackService.enqueue(org.prx.playerhater.Song)#<unknown>.next()#<unknown>.next()#<unknown>.onSongFinished(<unknown>)#<unknown>.getMediaPlayer()#<unknown>.equals(android.media.MediaPlayer)#<unknown>.peekMediaPlayer()#<unknown>.setOnCompletionListener(org.prx.playerhater.PlaybackService)#org.prx.playerhater.PlaybackService.getQueue()#<unknown>.recycle(org.prx.playerhater.SynchronousPlayer, <unknown>)#<unknown>.onSongFinished(<unknown>)#<unknown>.next()#<unknown>.startTransaction()#org.prx.playerhater.PlaybackService.getQueue()#org.prx.playerhater.PlaybackService.setMediaPlayer(null)#org.prx.playerhater.PlaybackService.getQueue()#<unknown>.setOnErrorListener(org.prx.playerhater.PlaybackService)#org.prx.playerhater.PlaybackService.setMediaPlayer(<unknown>)#org.prx.playerhater.PlaybackService.nowPlaying()#<unknown>.onSongFinished(<unknown>)#<unknown>.skipTo(int)#org.prx.playerhater.PlaybackService.onNextSongChanged()#org.prx.playerhater.PlaybackService.play()#<unknown>.appendSong(org.prx.playerhater.Song)#<unknown>.onSongFinished(<unknown>)#org.prx.playerhater.PlaybackService.getQueue()#<unknown>.seekTo(int)#<unknown>.startTransaction()#<unknown>.getUri()#org.prx.playerhater.PlaybackService.getQueue()#org.prx.playerhater.PlaybackService.getQueue()#<unknown>.startTransaction()#org.prx.playerhater.PlaybackService.getQueue()#<unknown>.start()#<unknown>.onSongChanged()#org.prx.playerhater.PlaybackService.nowPlaying()#<unknown>.isPlaying()#<unknown>.getNextPlaying()#<unknown>.size()#<unknown>.commitTransaction()#<unknown>.startTransaction()#<unknown>.getUri()#<unknown>.MediaPlayerPool()#<unknown>.getApplicationContext()#org.prx.playerhater.PlaybackService.getQueue()#<unknown>.startTransaction()#<unknown>.peekMediaPlayer()#<unknown>.peekMediaPlayer()#<unknown>.recycle(<unknown>, <unknown>)#<unknown>.getUri()#org.prx.playerhater.PlaybackService.getQueue()#org.prx.playerhater.PlaybackService.getQueue()#<unknown>.getApplicationContext()#org.prx.playerhater.PlaybackService.seekTo(int)#<unknown>.empty()#org.prx.playerhater.PlaybackService.seekTo(int)#<unknown>.prepare(<unknown>, <unknown>)#<unknown>.onSongFinished(<unknown>)#<unknown>.equals(android.media.MediaPlayer)#<unknown>.getCurrentPosition()#<unknown>.getMediaPlayer()#<unknown>.getUri()#org.prx.playerhater.PlaybackService.getQueue()#<unknown>.onSongFinished(<unknown>)#<unknown>.isPlaying()#org.prx.playerhater.PlaybackService.getQueue()#<unknown>.getUri()#<unknown>.getNowPlaying()#<unknown>.back()#<unknown>.getPosition()#<unknown>.getPlayer(<unknown>, <unknown>)#<unknown>.setOnCompletionListener(null)#<unknown>.startTransaction()",
      "p_callsites_t": ["<unknown>.peekMediaPlayer() <unknown>.setOnErrorListener(null) org.prx.playerhater.PlaybackService.setMediaPlayer(null) <unknown>.remove(int) <unknown>.skipTo(int) org.prx.playerhater.PlaybackService.getQueue() <unknown>.recycle(org.prx.playerhater.SynchronousPlayer, <unknown>) <unknown>.setQueuedSongsChangedListener(org.prx.playerhater.PlaybackService) <unknown>.SongQueue() org.prx.playerhater.PlaybackService.enqueue(org.prx.playerhater.Song) <unknown>.next() <unknown>.next() <unknown>.onSongFinished(<unknown>) <unknown>.getMediaPlayer() <unknown>.equals(android.media.MediaPlayer) <unknown>.peekMediaPlayer() <unknown>.setOnCompletionListener(org.prx.playerhater.PlaybackService) org.prx.playerhater.PlaybackService.getQueue() <unknown>.recycle(org.prx.playerhater.SynchronousPlayer, <unknown>) <unknown>.onSongFinished(<unknown>) <unknown>.next() <unknown>.startTransaction() org.prx.playerhater.PlaybackService.getQueue() org.prx.playerhater.PlaybackService.setMediaPlayer(null) org.prx.playerhater.PlaybackService.getQueue() <unknown>.setOnErrorListener(org.prx.playerhater.PlaybackService) org.prx.playerhater.PlaybackService.setMediaPlayer(<unknown>) org.prx.playerhater.PlaybackService.nowPlaying() <unknown>.onSongFinished(<unknown>) <unknown>.skipTo(int) org.prx.playerhater.PlaybackService.onNextSongChanged() org.prx.playerhater.PlaybackService.play() <unknown>.appendSong(org.prx.playerhater.Song) <unknown>.onSongFinished(<unknown>) org.prx.playerhater.PlaybackService.getQueue() <unknown>.seekTo(int) <unknown>.startTransaction() <unknown>.getUri() org.prx.playerhater.PlaybackService.getQueue() org.prx.playerhater.PlaybackService.getQueue() <unknown>.startTransaction() org.prx.playerhater.PlaybackService.getQueue() <unknown>.start() <unknown>.onSongChanged() org.prx.playerhater.PlaybackService.nowPlaying() <unknown>.isPlaying() <unknown>.getNextPlaying() <unknown>.size() <unknown>.commitTransaction() <unknown>.startTransaction() <unknown>.getUri() <unknown>.MediaPlayerPool() <unknown>.getApplicationContext() org.prx.playerhater.PlaybackService.getQueue() <unknown>.startTransaction() <unknown>.peekMediaPlayer() <unknown>.peekMediaPlayer() <unknown>.recycle(<unknown>, <unknown>) <unknown>.getUri() org.prx.playerhater.PlaybackService.getQueue() org.prx.playerhater.PlaybackService.getQueue() <unknown>.getApplicationContext() org.prx.playerhater.PlaybackService.seekTo(int) <unknown>.empty() org.prx.playerhater.PlaybackService.seekTo(int) <unknown>.prepare(<unknown>, <unknown>) <unknown>.onSongFinished(<unknown>) <unknown>.equals(android.media.MediaPlayer) <unknown>.getCurrentPosition() <unknown>.getMediaPlayer() <unknown>.getUri() org.prx.playerhater.PlaybackService.getQueue() <unknown>.onSongFinished(<unknown>) <unknown>.isPlaying() org.prx.playerhater.PlaybackService.getQueue() <unknown>.getUri() <unknown>.getNowPlaying() <unknown>.back() <unknown>.getPosition() <unknown>.getPlayer(<unknown>, <unknown>) <unknown>.setOnCompletionListener(null) <unknown>.startTransaction()"],
      "c_callsites_t": ["<unknown>.peekMediaPlayer() <unknown>.setOnErrorListener(null) org.prx.playerhater.PlaybackService.setMediaPlayer(null) <unknown>.remove(int) <unknown>.skipTo(int) org.prx.playerhater.PlaybackService.getQueue() <unknown>.recycle(org.prx.playerhater.SynchronousPlayer, <unknown>) <unknown>.setQueuedSongsChangedListener(org.prx.playerhater.PlaybackService) <unknown>.SongQueue() org.prx.playerhater.PlaybackService.enqueue(org.prx.playerhater.Song) <unknown>.next() <unknown>.next() <unknown>.onSongFinished(<unknown>) <unknown>.getMediaPlayer() <unknown>.equals(android.media.MediaPlayer) <unknown>.peekMediaPlayer() <unknown>.setOnCompletionListener(org.prx.playerhater.PlaybackService) org.prx.playerhater.PlaybackService.getQueue() <unknown>.recycle(org.prx.playerhater.SynchronousPlayer, <unknown>) <unknown>.onSongFinished(<unknown>) <unknown>.next() <unknown>.release() <unknown>.startTransaction() org.prx.playerhater.PlaybackService.getQueue() org.prx.playerhater.PlaybackService.setMediaPlayer(null) org.prx.playerhater.PlaybackService.getQueue() <unknown>.setOnErrorListener(org.prx.playerhater.PlaybackService) org.prx.playerhater.PlaybackService.setMediaPlayer(<unknown>) org.prx.playerhater.PlaybackService.nowPlaying() <unknown>.onSongFinished(<unknown>) <unknown>.skipTo(int) org.prx.playerhater.PlaybackService.onNextSongChanged() org.prx.playerhater.PlaybackService.play() <unknown>.appendSong(org.prx.playerhater.Song) <unknown>.onSongFinished(<unknown>) org.prx.playerhater.PlaybackService.getQueue() <unknown>.seekTo(int) <unknown>.startTransaction() <unknown>.getUri() org.prx.playerhater.PlaybackService.getQueue() org.prx.playerhater.PlaybackService.getQueue() <unknown>.startTransaction() org.prx.playerhater.PlaybackService.getQueue() <unknown>.start() <unknown>.onSongChanged() org.prx.playerhater.PlaybackService.nowPlaying() <unknown>.isPlaying() <unknown>.getNextPlaying() <unknown>.size() <unknown>.commitTransaction() <unknown>.startTransaction() <unknown>.getUri() <unknown>.MediaPlayerPool() <unknown>.getApplicationContext() org.prx.playerhater.PlaybackService.getQueue() <unknown>.startTransaction() <unknown>.peekMediaPlayer() <unknown>.peekMediaPlayer() <unknown>.recycle(<unknown>, <unknown>) <unknown>.getUri() org.prx.playerhater.PlaybackService.getQueue() org.prx.playerhater.PlaybackService.getQueue() <unknown>.getApplicationContext() org.prx.playerhater.PlaybackService.seekTo(int) <unknown>.empty() org.prx.playerhater.PlaybackService.seekTo(int) <unknown>.prepare(<unknown>, <unknown>) <unknown>.onSongFinished(<unknown>) <unknown>.equals(android.media.MediaPlayer) <unknown>.getCurrentPosition() <unknown>.getMediaPlayer() <unknown>.getUri() org.prx.playerhater.PlaybackService.getQueue() <unknown>.onSongFinished(<unknown>) <unknown>.isPlaying() org.prx.playerhater.PlaybackService.getQueue() <unknown>.getUri() <unknown>.getNowPlaying() <unknown>.back() <unknown>.getPosition() <unknown>.getPlayer(<unknown>, <unknown>) <unknown>.setOnCompletionListener(null) <unknown>.startTransaction()"],
      "c_callsites_added_t": ["<unknown>.release()"],
      "c_methods_t": ["MediaPlayerPool SongQueue appendSong back commitTransaction empty enqueue equals getApplicationContext getCurrentPosition getMediaPlayer getNextPlaying getNowPlaying getPlayer getPosition getQueue getUri isPlaying next nowPlaying onNextSongChanged onSongChanged onSongFinished peekMediaPlayer play prepare recycle release remove seekTo setMediaPlayer setOnCompletionListener setOnErrorListener setQueuedSongsChangedListener size skipTo start startTransaction"],
      "id": "chrisrhoden/PlayerHater\u0000src/org/prx/playerhater/PlaybackService.java\u0000016e87cd537186f979b4abb14c640679a02d91b1\u000026b7a482e7714b9a19094ab9ad47210aa43e9fb6",
      "p_comments_t": ["<empty>"],
      "p_email_sni": "carhoden@gmail.com",
      "c_callsites_removed_t": ["<empty>"],
      "c_callsites_cs": "<unknown>.peekMediaPlayer()#<unknown>.setOnErrorListener(null)#org.prx.playerhater.PlaybackService.setMediaPlayer(null)#<unknown>.remove(int)#<unknown>.skipTo(int)#org.prx.playerhater.PlaybackService.getQueue()#<unknown>.recycle(org.prx.playerhater.SynchronousPlayer, <unknown>)#<unknown>.setQueuedSongsChangedListener(org.prx.playerhater.PlaybackService)#<unknown>.SongQueue()#org.prx.playerhater.PlaybackService.enqueue(org.prx.playerhater.Song)#<unknown>.next()#<unknown>.next()#<unknown>.onSongFinished(<unknown>)#<unknown>.getMediaPlayer()#<unknown>.equals(android.media.MediaPlayer)#<unknown>.peekMediaPlayer()#<unknown>.setOnCompletionListener(org.prx.playerhater.PlaybackService)#org.prx.playerhater.PlaybackService.getQueue()#<unknown>.recycle(org.prx.playerhater.SynchronousPlayer, <unknown>)#<unknown>.onSongFinished(<unknown>)#<unknown>.next()#<unknown>.release()#<unknown>.startTransaction()#org.prx.playerhater.PlaybackService.getQueue()#org.prx.playerhater.PlaybackService.setMediaPlayer(null)#org.prx.playerhater.PlaybackService.getQueue()#<unknown>.setOnErrorListener(org.prx.playerhater.PlaybackService)#org.prx.playerhater.PlaybackService.setMediaPlayer(<unknown>)#org.prx.playerhater.PlaybackService.nowPlaying()#<unknown>.onSongFinished(<unknown>)#<unknown>.skipTo(int)#org.prx.playerhater.PlaybackService.onNextSongChanged()#org.prx.playerhater.PlaybackService.play()#<unknown>.appendSong(org.prx.playerhater.Song)#<unknown>.onSongFinished(<unknown>)#org.prx.playerhater.PlaybackService.getQueue()#<unknown>.seekTo(int)#<unknown>.startTransaction()#<unknown>.getUri()#org.prx.playerhater.PlaybackService.getQueue()#org.prx.playerhater.PlaybackService.getQueue()#<unknown>.startTransaction()#org.prx.playerhater.PlaybackService.getQueue()#<unknown>.start()#<unknown>.onSongChanged()#org.prx.playerhater.PlaybackService.nowPlaying()#<unknown>.isPlaying()#<unknown>.getNextPlaying()#<unknown>.size()#<unknown>.commitTransaction()#<unknown>.startTransaction()#<unknown>.getUri()#<unknown>.MediaPlayerPool()#<unknown>.getApplicationContext()#org.prx.playerhater.PlaybackService.getQueue()#<unknown>.startTransaction()#<unknown>.peekMediaPlayer()#<unknown>.peekMediaPlayer()#<unknown>.recycle(<unknown>, <unknown>)#<unknown>.getUri()#org.prx.playerhater.PlaybackService.getQueue()#org.prx.playerhater.PlaybackService.getQueue()#<unknown>.getApplicationContext()#org.prx.playerhater.PlaybackService.seekTo(int)#<unknown>.empty()#org.prx.playerhater.PlaybackService.seekTo(int)#<unknown>.prepare(<unknown>, <unknown>)#<unknown>.onSongFinished(<unknown>)#<unknown>.equals(android.media.MediaPlayer)#<unknown>.getCurrentPosition()#<unknown>.getMediaPlayer()#<unknown>.getUri()#org.prx.playerhater.PlaybackService.getQueue()#<unknown>.onSongFinished(<unknown>)#<unknown>.isPlaying()#org.prx.playerhater.PlaybackService.getQueue()#<unknown>.getUri()#<unknown>.getNowPlaying()#<unknown>.back()#<unknown>.getPosition()#<unknown>.getPlayer(<unknown>, <unknown>)#<unknown>.setOnCompletionListener(null)#<unknown>.startTransaction()",
      "p_body_t": ["<empty>"],
      "c_patch_t": ["+/*******************************************************************************\n+ * Copyright 2013 Chris Rhoden, Rebecca Nesson, Public Radio Exchange\n+ * \n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * \n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ ******************************************************************************/\n+\n package org.prx.playerhater;\n \n import org.prx.playerhater.mediaplayer.MediaPlayerPool;\n@@ -5,7 +21,6 @@ import org.prx.playerhater.mediaplayer.SynchronousPlayer;\n import org.prx.playerhater.service.PlayerHaterService;\n import org.prx.playerhater.songs.SongQueue;\n import org.prx.playerhater.songs.SongQueue.OnQueuedSongsChangedListener;\n-import org.prx.playerhater.util.Log;\n \n import android.media.MediaPlayer;\n import android.media.MediaPlayer.OnCompletionListener;\n@@ -22,6 +37,13 @@ public class PlaybackService extends PlayerHaterService implements\n \t\tmMediaPlayerPool = new MediaPlayerPool();\n \t}\n \n+\t\n+\t@Override\n+\tpublic void onDestroy() {\n+\t\tmMediaPlayerPool.release();\n+\t\tsuper.onDestroy();\n+\t}\n+\t\n \t@Override\n \tpublic boolean play(Song song, int startTime) {\n \t\tint position = enqueue(song);\n@@ -165,7 +187,9 @@ public class PlaybackService extends PlayerHaterService implements\n \t\t\toldPlayer.setOnCompletionListener(null);\n \t\t}\n \t\tsuper.setMediaPlayer(mediaPlayer);\n-\t\tmediaPlayer.setOnErrorListener(this);\n-\t\tmediaPlayer.setOnCompletionListener(this);\n+\t\tif (mediaPlayer != null) {\n+\t\t\tmediaPlayer.setOnErrorListener(this);\n+\t\t\tmediaPlayer.setOnCompletionListener(this);\n+\t\t}\n \t}\n }"],
      "c_body_t": ["<empty>"],
      "c_email_sni": "carhoden@gmail.com",
      "p_patch_t": [" \t@Override\n \tpublic void onNowPlayingChanged(Song nowPlaying, Song was) {\n \t\tstartTransaction();\n-\t\tLog.d(\"Currently in state \" + getState());\n-\t\tif (was == null) {\n-\t\t\tmMediaPlayerPool.recycle(peekMediaPlayer());\n-\t\t} else {\n-\t\t\tmMediaPlayerPool.recycle(peekMediaPlayer(), was.getUri());\n+\t\tif (peekMediaPlayer() != null) {\n+\t\t\tmMediaPlayerPool.recycle(peekMediaPlayer(), was == null ? null : was.getUri());\n \t\t}\n-\t\tLog.d(\"Currently in state \" + getState());\n \t\tsetMediaPlayer(mMediaPlayerPool.getPlayer(getApplicationContext(),\n \t\t\t\tnowPlaying.getUri()));\n-\t\tLog.d(\"Currently in state \" + getState());\n \t\tif (isPlaying()) {\n \t\t\tgetMediaPlayer().start();\n \t\t}\n-\t\tLog.d(\"Currently in state \" + getState());\n \t\tcommitTransaction();\n \t\tonSongChanged();\n \t}\n@@ -136,6 +130,9 @@ public class PlaybackService extends PlayerHaterService implements\n \tpublic void onCompletion(MediaPlayer mp) {\n \t\tif (peekMediaPlayer() != null && peekMediaPlayer().equals(mp)) {\n \t\t\tstartTransaction();\n+\t\t\tSynchronousPlayer player = peekMediaPlayer();\n+\t\t\tsetMediaPlayer(null);\n+\t\t\tmMediaPlayerPool.recycle(player, nowPlaying().getUri());\n \t\t\tonSongFinished(PlayerHater.FINISH_SONG_END);\n \t\t\tgetQueue().next();\n \t\t}\n@@ -145,6 +142,9 @@ public class PlaybackService extends PlayerHaterService implements\n \tpublic boolean onError(MediaPlayer mp, int what, int extra) {\n \t\tif (peekMediaPlayer() != null && peekMediaPlayer().equals(mp)) {\n \t\t\tstartTransaction();\n+\t\t\tSynchronousPlayer player = peekMediaPlayer();\n+\t\t\tsetMediaPlayer(null);\n+\t\t\tmMediaPlayerPool.recycle(player, nowPlaying().getUri());\n \t\t\tonSongFinished(PlayerHater.FINISH_ERROR);\n \t\t\tgetQueue().next();\n \t\t\treturn true;"],
      "repo_sni": "chrisrhoden/PlayerHater",
      "_version_": 1526826138556432384,
      "c_user_sni": "chrisrhoden",
      "c_callsites_added_cs": "<unknown>.release()",
      "p_parents_ss": ["32d9e7db8bb4324c6638adea2e43a7cfbf173797"],
      "p_user_sni": "chrisrhoden",
      "c_subject_t": ["v 0.3.0"],
      "c_imports_added_cs": "<empty>",
      "c_callsites_removed_cs": "<empty>"
    }, {
      "c_patch_no_context_t": ["-\tprivate JsonArrayReader _queryStream(String method, JSONObject params) throws JSONException, IOException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n+\tprivate JsonArrayOrObjectReader _queryStream(String method, JSONObject params) throws JSONException, IOException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n+\t\tLog.d(\"ZabbixService\", \"_queryStream: \"+url);\n+\t\tLog.d(\"ZabbixService\", \"_queryStream: \"+json.toString());\n+\n-\t\t\t\t\t\t\tJsonArrayReader r = _queryStream(method, params);\n+\t\t\t\t\t\t\tJsonArrayOrObjectReader r = _queryStream(method, params);\n-\t\t\tif (jp.nextToken() != JsonToken.START_ARRAY) { // go inside the array\n+\t\t\tif (jp.nextToken() != JsonToken.START_ARRAY && jp.getCurrentToken() != JsonToken.START_OBJECT) { // go inside the array\n+\t\t\t\ttry {\n+\t\t\t\t\tLog.d(\"ZabbixService\", \"current token: \"+jp.getCurrentToken());\n+\t\t\t\t\tLog.d(\"ZabbixService\", \"current name: \"+jp.getCurrentName());\n+\t\t\t\t\tLog.d(\"ZabbixService\", \"get text: \"+jp.getText());\n+\t\t\t\t\tLog.d(\"ZabbixService\", \"next value: \"+jp.nextValue());\n+\t\t\t\t\tLog.d(\"ZabbixService\", \"next token: \"+jp.nextToken());\n+\t\t\t\t\tLog.d(\"ZabbixService\", \"current token: \"+jp.getCurrentToken());\n+\t\t\t\t\tLog.d(\"ZabbixService\", \"current name: \"+jp.getCurrentName());\n+\t\t\t\t\tLog.d(\"ZabbixService\", \"get text: \"+jp.getText());\n+\t\t\t\t} catch (Exception e) {}\n-\t\t\treturn new JsonArrayReader(jp);\n+\t\t\treturn new JsonArrayOrObjectReader(jp);\n+\t\t\tLog.i(\"ZabbixService\", \"Zabbix Server Version: isVersion2=\"+isVersion2);\n-\tprivate void importApplications(long hostid, long itemid, JsonArrayReader jsonArray) throws JsonParseException, NumberFormatException, IOException {\n+\tprivate void importApplications(long hostid, long itemid, JsonArrayOrObjectReader jsonArray) throws JsonParseException, NumberFormatException, IOException {\n-\t\t\tJsonArrayReader events = _queryStream(\n+\t\t\tJsonArrayOrObjectReader events = _queryStream(\n-\t\t\tJsonArrayReader events = _queryStream(\n+\t\t\tJsonArrayOrObjectReader events = _queryStream(\n-\tprivate void importEvents(JsonArrayReader events, Integer numEvents) throws JsonParseException, IOException {\n+\tprivate void importEvents(JsonArrayOrObjectReader events, Integer numEvents) throws JsonParseException, IOException {\n-\tprivate boolean importGraphItems(JsonArrayReader graphItems) throws JsonParseException, NumberFormatException, IOException {\n+\tprivate boolean importGraphItems(JsonArrayOrObjectReader graphItems) throws JsonParseException, NumberFormatException, IOException {\n-\t\t\tJsonArrayReader graphs = _queryStream(\n+\t\t\tJsonArrayOrObjectReader graphs = _queryStream(\n-\t\t\t\tJsonArrayReader historydetails = _queryStream(\n+\t\t\t\tJsonArrayOrObjectReader historydetails = _queryStream(\n-\tprivate long importHostGroups(JsonArrayReader jsonArray) throws JsonParseException, IOException {\n+\tprivate long importHostGroups(JsonArrayOrObjectReader jsonArray) throws JsonParseException, IOException {\n-\tprivate Object[] importHosts(JsonArrayReader jsonArray, Integer numHosts) throws JsonParseException, IOException {\n+\tprivate Object[] importHosts(JsonArrayOrObjectReader jsonArray, Integer numHosts) throws JsonParseException, IOException {\n-\t\t\tJsonArrayReader hosts = _queryStream(\n+\t\t\tJsonArrayOrObjectReader hosts = _queryStream(\n-\tprivate long importItems(JsonArrayReader items, int numItems, boolean checkBeforeInsert) throws JsonParseException, IOException {\n+\tprivate long importItems(JsonArrayOrObjectReader items, int numItems, boolean checkBeforeInsert) throws JsonParseException, IOException {\n-\t\t\tJsonArrayReader items = _queryStream(\n+\t\t\tJsonArrayOrObjectReader items = _queryStream(\n-\tprivate void importScreenItems(JsonArrayReader screenItems) throws JsonParseException, NumberFormatException, IOException {\n+\tprivate void importScreenItems(JsonArrayOrObjectReader screenItems) throws JsonParseException, NumberFormatException, IOException {\n-\t\t\tJsonArrayReader screens = _queryStream(\n+\t\t\tJsonArrayOrObjectReader screens = _queryStream(\n-\t\t\tJsonArrayReader trigger = _queryStream(\n+\t\t\tJsonArrayOrObjectReader trigger = _queryStream(\n-\t\t\tJsonArrayReader triggers = _queryStream(\n+\t\t\tJsonArrayOrObjectReader triggers = _queryStream(\n-\t\t\tJsonArrayReader triggers = _queryStream(\n+\t\t\tJsonArrayOrObjectReader triggers = _queryStream(\n-\tprivate void importTriggers(JsonArrayReader jsonArray) throws JsonParseException, IOException {\n+\tprivate void importTriggers(JsonArrayOrObjectReader jsonArray) throws JsonParseException, IOException {\n-\t\t\tJsonArrayReader triggers = _queryStream(\n+\t\t\tJsonArrayOrObjectReader triggers = _queryStream("],
      "p_patch_no_context_t": ["+package com.inovex.zabbixmobile.api;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.net.Socket;\n+import java.net.UnknownHostException;\n+import java.security.KeyManagementException;\n+import java.security.KeyStore;\n+import java.security.KeyStoreException;\n+import java.security.NoSuchAlgorithmException;\n+import java.security.UnrecoverableKeyException;\n+import java.security.cert.CertificateException;\n+import java.security.cert.X509Certificate;\n+import java.util.ArrayList;\n+import java.util.Date;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+\n+import javax.net.ssl.SSLContext;\n+import javax.net.ssl.SSLPeerUnverifiedException;\n+import javax.net.ssl.TrustManager;\n+import javax.net.ssl.X509TrustManager;\n+\n+import org.apache.http.HttpResponse;\n+import org.apache.http.HttpVersion;\n+import org.apache.http.auth.AuthScope;\n+import org.apache.http.auth.UsernamePasswordCredentials;\n+import org.apache.http.client.ClientProtocolException;\n+import org.apache.http.client.methods.HttpPost;\n+import org.apache.http.client.params.HttpClientParams;\n+import org.apache.http.conn.ClientConnectionManager;\n+import org.apache.http.conn.scheme.PlainSocketFactory;\n+import org.apache.http.conn.scheme.Scheme;\n+import org.apache.http.conn.scheme.SchemeRegistry;\n+import org.apache.http.conn.ssl.SSLSocketFactory;\n+import org.apache.http.entity.StringEntity;\n+import org.apache.http.impl.client.DefaultHttpClient;\n+import org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager;\n+import org.apache.http.params.BasicHttpParams;\n+import org.apache.http.params.HttpConnectionParams;\n+import org.apache.http.params.HttpParams;\n+import org.apache.http.params.HttpProtocolParams;\n+import org.apache.http.protocol.HTTP;\n+import org.codehaus.jackson.JsonFactory;\n+import org.codehaus.jackson.JsonParseException;\n+import org.codehaus.jackson.JsonParser;\n+import org.codehaus.jackson.JsonToken;\n+import org.json.JSONArray;\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+\n+import android.content.ContentValues;\n+import android.content.Context;\n+import android.content.Intent;\n+import android.content.SharedPreferences;\n+import android.database.Cursor;\n+import android.database.sqlite.SQLiteDatabase;\n+import android.database.sqlite.SQLiteQueryBuilder;\n+import android.graphics.Color;\n+import android.preference.PreferenceManager;\n+import android.util.Log;\n+\n+import com.inovex.zabbixmobile.R;\n+import com.inovex.zabbixmobile.ZabbixContentProvider;\n+import com.inovex.zabbixmobile.model.ApplicationData;\n+import com.inovex.zabbixmobile.model.ApplicationItemRelationData;\n+import com.inovex.zabbixmobile.model.CacheData;\n+import com.inovex.zabbixmobile.model.EventData;\n+import com.inovex.zabbixmobile.model.GraphData;\n+import com.inovex.zabbixmobile.model.GraphItemData;\n+import com.inovex.zabbixmobile.model.HistoryDetailData;\n+import com.inovex.zabbixmobile.model.HostData;\n+import com.inovex.zabbixmobile.model.HostGroupData;\n+import com.inovex.zabbixmobile.model.ItemData;\n+import com.inovex.zabbixmobile.model.ScreenData;\n+import com.inovex.zabbixmobile.model.ScreenItemData;\n+import com.inovex.zabbixmobile.model.TriggerData;\n+\n+/**\n+ * interface to connect to the zabbix server\n+ */\n+public class ZabbixService {\n+\tclass CustomSSLSocketFactory extends SSLSocketFactory {\n+\t\tSSLContext sslContext = SSLContext.getInstance(\"TLS\");\n+\n+\t\tpublic CustomSSLSocketFactory(KeyStore truststore) throws NoSuchAlgorithmException, KeyManagementException, KeyStoreException, UnrecoverableKeyException {\n+\t\t\tsuper(truststore);\n+\t\t\tTrustManager tm = new X509TrustManager() {\n+\t\t\t\t@Override\n+\t\t\t\tpublic void checkClientTrusted(X509Certificate[] chain,\n+\t\t\t\t\t\tString authType) throws CertificateException {\n+\t\t\t\t}\n+\t\t\t\t@Override\n+\t\t\t\tpublic void checkServerTrusted(X509Certificate[] chain,\n+\t\t\t\t\t\tString authType) throws CertificateException {\n+\t\t\t\t}\n+\t\t\t\t@Override\n+\t\t\t\tpublic X509Certificate[] getAcceptedIssuers() {\n+\t\t\t\t\treturn null;\n+\t\t\t\t}\n+\t\t\t};\n+\t\t\tsslContext.init(null, new TrustManager[] { tm }, null);\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic Socket createSocket() throws IOException {\n+\t\t\treturn sslContext.getSocketFactory().createSocket();\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic Socket createSocket(Socket socket, String host, int port, boolean autoClose) throws IOException, UnknownHostException {\n+\t\t\treturn sslContext.getSocketFactory().createSocket(socket, host, port, autoClose);\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * http auth is needed\n+\t */\n+\tpublic class HttpAuthorizationRequiredException extends Exception {\n+\t\tprivate static final long serialVersionUID = 6632422081858878147L;\n+\t}\n+\n+\t/**\n+\t * zabbix error: no api access\n+\t */\n+\tpublic class NoAPIAccessException extends Exception {\n+\t\tprivate static final long serialVersionUID = 6381395987443456382L;\n+\t}\n+\n+\t/**\n+\t * probably too old zabbix <= 1.8.2\n+\t */\n+\tpublic class PreconditionFailedException extends Exception {\n+\t\tprivate static final long serialVersionUID = -2529885710860745023L;\n+\t}\n+\n+\t/**\n+\t * global constants\n+\t */\n+\tpublic class ZabbixConfig {\n+\t\tpublic static final int APPLICATION_GET_LIMIT = 1000;\n+\t\tpublic static final int EVENTS_GET_LIMIT = 60;\n+\t\tpublic static final int HISTORY_GET_TIME_FROM_SHIFT = 8*60*60; // -8h\n+\t\tpublic static final int HISTORY_GET_LIMIT = 8000;\n+\t\tpublic static final int HOSTGROUP_GET_LIMIT = 200;\n+\t\tpublic static final int HOST_GET_LIMIT = 300;\n+\t\tpublic static final int ITEM_GET_LIMIT = 200;\n+\t\tpublic static final int TRIGGER_GET_LIMIT = 100;\n+\t\tpublic static final int EVENT_GET_TIME_FROM_SHIFT = 7*24*60*60; // -7 days\n+\t\tpublic static final int CACHE_LIFETIME_APPLICATIONS = 2*24*60*60; // 2 days\n+\t\tpublic static final int CACHE_LIFETIME_EVENTS = 120;\n+\t\tpublic static final int CACHE_LIFETIME_HISTORY_DETAILS = 4*60;\n+\t\tpublic static final int CACHE_LIFETIME_HOST_GROUPS = 7*24*60*60;\n+\t\tpublic static final int CACHE_LIFETIME_HOSTS = 2*24*60*60;\n+\t\tpublic static final int CACHE_LIFETIME_SCREENS = 2*24*60*60;\n+\t\tpublic static final int CACHE_LIFETIME_ITEMS = 4*60;\n+\t\tpublic static final int CACHE_LIFETIME_TRIGGERS = 2*60;\n+\t\tpublic static final long STATUS_SHOW_TRIGGER_TIME = 14*24*60*60;\n+\t\tpublic static final int HTTP_CONNECTION_TIMEOUT = 30000;\n+\t}\n+\n+\tprivate final DefaultHttpClient httpClient;\n+\tprivate final SQLiteDatabase zabbixLocalDB;\n+\tprivate String url;\n+\tprivate String token;\n+\tprivate final Context context;\n+\tprivate int _transactionStack;\n+\tprivate JsonParser lastStream;\n+\tprivate int transformProgressStart;\n+\tprivate int transformProgressEnd;\n+\tprivate boolean _notAuthorizedRetry;\n+\tprivate boolean isVersion2 = true;\n+\n+\t/**\n+\t * init\n+\t * @param context android context\n+\t * @param zabbixLocalDB sqlite\n+\t */\n+\tpublic ZabbixService(Context context, SQLiteDatabase zabbixLocalDB) {\n+\t\tClientConnectionManager ccm = null;\n+\t\tHttpParams params = null;\n+\n+\t\ttry {\n+\t\t\tSharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(context);\n+\t\t\tif (prefs.getBoolean(\"zabbix_trust_all_ssl_ca\", false)) {\n+\t\t\t\tKeyStore trustStore = KeyStore.getInstance(KeyStore.getDefaultType());\n+\t\t\t\ttrustStore.load(null, null);\n+\n+\t\t\t\tSSLSocketFactory sf = new CustomSSLSocketFactory(trustStore);\n+\t\t\t\tsf.setHostnameVerifier(SSLSocketFactory.ALLOW_ALL_HOSTNAME_VERIFIER);\n+\n+\t\t\t\tparams = new BasicHttpParams();\n+\t\t\t\tHttpProtocolParams.setVersion(params, HttpVersion.HTTP_1_1);\n+\t\t\t\tHttpProtocolParams.setContentCharset(params, HTTP.UTF_8);\n+\n+\t\t\t\tSchemeRegistry registry = new SchemeRegistry();\n+\t\t\t\tregistry.register(new Scheme(\"http\", PlainSocketFactory.getSocketFactory(), 80));\n+\t\t\t\tregistry.register(new Scheme(\"https\", sf, 443));\n+\n+\t\t\t\tccm = new ThreadSafeClientConnManager(params, registry);\n+\t\t\t}\n+\t\t} catch (Exception e) {\n+\t\t\t// ignore for unit test\n+\t\t}\n+\n+\t\tif (ccm == null || params == null) {\n+\t\t\thttpClient = new DefaultHttpClient();\n+\t\t} else {\n+\t\t\thttpClient = new DefaultHttpClient(ccm, params);\n+\t\t}\n+\n+\t\t// if applicable http auth\n+\t\ttry {\n+\t\t\tSharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(context);\n+\t\t\tif (prefs.getBoolean(\"http_auth_enabled\", false)) {\n+\t\t\t\tString user = prefs.getString(\"http_auth_username\", \"\");\n+\t\t\t\tString pwd = prefs.getString(\"http_auth_password\", \"\");\n+\t\t\t\thttpClient.getCredentialsProvider().setCredentials(AuthScope.ANY, new UsernamePasswordCredentials(user, pwd));\n+\t\t\t}\n+\t\t} catch (java.lang.UnsupportedOperationException e1) {\n+\t\t\t// for unit test\n+\t\t}\n+\n+\t\tparams = httpClient.getParams();\n+\t\tHttpClientParams.setRedirecting(params, true); // redirecting\n+\t\tHttpConnectionParams.setConnectionTimeout(params, ZabbixConfig.HTTP_CONNECTION_TIMEOUT);\n+\t\tthis.context = context;\n+\t\tthis.zabbixLocalDB = zabbixLocalDB;\n+\t}\n+\n+\t/**\n+\t * counts the sql inserts/updates and do a transaction commit to save the memory\n+\t */\n+\tprivate void _commitTransactionIfRecommended() {\n+\t\tif (_transactionStack++ > 50) {\n+\t\t\t_endTransaction();\n+\t\t\t_startTransaction();\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * commit sql transaction\n+\t */\n+\tpublic void _endTransaction() {\n+\t\tif (zabbixLocalDB.inTransaction()) {\n+\t\t\tzabbixLocalDB.setTransactionSuccessful();\n+\t\t\tzabbixLocalDB.endTransaction();\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * zabbix api call. data will be parsed as json object on-the-fly.\n+\t * Caution: use this only for api calls with a small return data.\n+\t * @param method\n+\t * @param params\n+\t * @return\n+\t * @throws ClientProtocolException\n+\t * @throws IOException\n+\t * @throws JSONException\n+\t * @throws HttpAuthorizationRequiredException\n+\t * @throws NoAPIAccessException\n+\t */\n+\tprivate JSONObject _queryBuffer(String method, JSONObject params) throws ClientProtocolException, IOException, JSONException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n+\t\tHttpPost post = new HttpPost(url);\n+\t\tpost.addHeader(\"Content-Type\", \"application/json; charset=utf-8\");\n+\n+\t\tString json =\n+\t\t\t\"{\" +\n+\t\t\t\"\t\\\"jsonrpc\\\" : \\\"2.0\\\",\" +\n+\t\t\t\"\t\\\"method\\\" : \\\"\"+method+\"\\\",\" +\n+\t\t\t\"\t\\\"params\\\" : \"+params.toString()+\",\" +\n+\t\t\t\"\t\\\"auth\\\" : \"+(token==null?\"null\":'\"'+token+'\"')+\",\" +\n+\t\t\t\"\t\\\"id\\\" : 0\" +\n+\t\t\t\"}\";\n+\n+\t\tpost.setEntity(new StringEntity(json, \"UTF-8\"));\n+\t\ttry {\n+\t\t\tHttpResponse resp = httpClient.execute(post);\n+\t\t\tif (resp.getStatusLine().getStatusCode() == 401) {\n+\t\t\t\t// http auth failed\n+\t\t\t\tthrow new HttpAuthorizationRequiredException();\n+\t\t\t} else if (resp.getStatusLine().getStatusCode() == 412) {\n+\t\t\t\t\t// Precondition failed / Looks like Zabbix 1.8.2\n+\t\t\t\tthrow new PreconditionFailedException();\n+\t\t\t} else if (resp.getStatusLine().getStatusCode() == 404) {\n+\t\t\t\t// file not found\n+\t\t\t\tthrow new IOException(resp.getStatusLine().getStatusCode()+\" \"+resp.getStatusLine().getReasonPhrase());\n+\t\t\t} else {\n+\t\t\t\tLog.d(\"ZabbixService\", resp.getStatusLine().getStatusCode()+\" \"+resp.getStatusLine().getReasonPhrase());\n+\t\t\t}\n+\t\t\tStringBuilder total = new StringBuilder();\n+\t\t\tBufferedReader rd = new BufferedReader(new InputStreamReader(resp.getEntity().getContent()));\n+\t\t\tint chr;\n+\t\t\twhile ((chr = rd.read()) != -1) {\n+\t\t\t\ttotal.append((char) chr);\n+\t\t\t}\n+\t\t\tJSONObject result = new JSONObject(total.toString());\n+\t\t\ttry {\n+\t\t\t\tif (result.getJSONObject(\"error\") != null) {\n+\t\t\t\t\tif (result.getJSONObject(\"error\").getString(\"data\").equals(\"No API access\")) {\n+\t\t\t\t\t\tthrow new NoAPIAccessException();\n+\t\t\t\t\t} else throw new RuntimeException(result.getJSONObject(\"error\").toString());\n+\t\t\t\t}\n+\t\t\t\tif (result.getString(\"data\").equals(\"Not authorized\")) {\n+\t\t\t\t\t// first do a new auth and then try the same api call again\n+\t\t\t\t\tif (authenticate() && !_notAuthorizedRetry) {\n+\t\t\t\t\t\t_notAuthorizedRetry = true;\n+\t\t\t\t\t\tJSONObject r = _queryBuffer(method, params);\n+\t\t\t\t\t\t_notAuthorizedRetry = false;\n+\t\t\t\t\t\treturn r;\n+\t\t\t\t\t} throw new IllegalStateException(result.toString());\n+\t\t\t\t}\n+\t\t\t} catch (JSONException e) {\n+\t\t\t\t// ignore\n+\t\t\t}\n+\t\t\treturn result;\n+\t\t} catch (SSLPeerUnverifiedException e) {\n+\t\t\t// SSL not trusted\n+\t\t\tIntent intent = new Intent(ZabbixContentProvider.CONTENT_PROVIDER_INTENT_ACTION);\n+\t\t\tintent.putExtra(\"flag\", ZabbixContentProvider.INTENT_FLAG_SSL_NOT_TRUSTED);\n+\t\t\tcontext.sendBroadcast(intent);\n+\t\t\tthrow e;\n+\t\t} catch (IOException e) {\n+\t\t\t// internet problem\n+\t\t\t// send intent to GUI\n+\t\t\tIntent intent = new Intent(ZabbixContentProvider.CONTENT_PROVIDER_INTENT_ACTION);\n+\t\t\tintent.putExtra(\"flag\", ZabbixContentProvider.INTENT_FLAG_CONNECTION_FAILED);\n+\t\t\tintent.putExtra(\"value\", e.getMessage());\n+\t\t\tcontext.sendBroadcast(intent);\n+\t\t\tthrow e;\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * zabbix api call as stream.\n+\t * @param method\n+\t * @param params\n+\t * @return stream im json array wrapper\n+\t * @throws JSONException\n+\t * @throws IOException\n+\t * @throws HttpAuthorizationRequiredException\n+\t * @throws NoAPIAccessException\n+\t */\n+\tprivate JsonArrayReader _queryStream(String method, JSONObject params) throws JSONException, IOException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n+\t\t// http request\n+\t\tHttpPost post = new HttpPost(url);\n+\t\tpost.addHeader(\"Content-Type\", \"application/json; charset=utf-8\");\n+\n+\t\tJSONObject json = new JSONObject()\n+\t\t\t.put(\"jsonrpc\", \"2.0\")\n+\t\t\t.put(\"method\", method)\n+\t\t\t.put(\"params\", params)\n+\t\t\t.put(\"auth\", token)\n+\t\t\t.put(\"id\", 0);\n+\n+\t\tpost.setEntity(new StringEntity(json.toString(), \"UTF-8\"));\n+\t\ttry {\n+\t\t\tHttpResponse resp = httpClient.execute(post);\n+\t\t\tif (resp.getStatusLine().getStatusCode() == 401) {\n+\t\t\t\t// http auth failed\n+\t\t\t\tthrow new HttpAuthorizationRequiredException();\n+\t\t\t}\n+\n+\t\t\tJsonFactory jsonFac = new JsonFactory();\n+\t\t\tJsonParser jp = jsonFac.createJsonParser(resp.getEntity().getContent());\n+\t\t\t// store the last stream to close it if an exception will be thrown\n+\t\t\tlastStream = jp;\n+\t\t\tif (jp.nextToken() != JsonToken.START_OBJECT) {\n+\t\t\t\tthrow new IOException(\"Expected data to start with an Object\");\n+\t\t\t}\n+\t\t\tdo {\n+\t\t\t\tjp.nextToken();\n+\t\t\t\tif (jp.getCurrentName().equals(\"error\")) {\n+\t\t\t\t\tjp.nextToken();\n+\t\t\t\t\tString errortxt = \"\";\n+\t\t\t\t\twhile (jp.nextToken() != JsonToken.END_OBJECT) {\n+\t\t\t\t\t\terrortxt += jp.getText();\n+\t\t\t\t\t}\n+\t\t\t\t\tif (errortxt.contains(\"No API access\")) {\n+\t\t\t\t\t\tthrow new NoAPIAccessException();\n+\t\t\t\t\t} else if (errortxt.contains(\"Not authorized\")) {\n+\t\t\t\t\t\t// first do a new auth and then try the same api call again\n+\t\t\t\t\t\tif (authenticate() && !_notAuthorizedRetry) {\n+\t\t\t\t\t\t\t_notAuthorizedRetry = true;\n+\t\t\t\t\t\t\tJsonArrayReader r = _queryStream(method, params);\n+\t\t\t\t\t\t\t_notAuthorizedRetry = false;\n+\t\t\t\t\t\t\treturn r;\n+\t\t\t\t\t\t} else throw new IllegalStateException(errortxt);\n+\t\t\t\t\t} else throw new IllegalStateException(\"JSON API Error: \"+errortxt);\n+\t\t\t\t}\n+\t\t\t} while (!jp.getCurrentName().equals(\"result\"));\n+\n+\t\t\t// result array found\n+\t\t\tif (jp.nextToken() != JsonToken.START_ARRAY) { // go inside the array\n+\t\t\t\tthrow new IOException(\"Expected data to start with an Array\");\n+\t\t\t}\n+\t\t\treturn new JsonArrayReader(jp);\n+\t\t} catch (SSLPeerUnverifiedException e) {\n+\t\t\tthrow e;\n+\t\t} catch (IOException e) {\n+\t\t\t// internet problem\n+\t\t\t// send intent to GUI\n+\t\t\tIntent intent = new Intent(ZabbixContentProvider.CONTENT_PROVIDER_INTENT_ACTION);\n+\t\t\tintent.putExtra(\"flag\", ZabbixContentProvider.INTENT_FLAG_CONNECTION_FAILED);\n+\t\t\tcontext.sendBroadcast(intent);\n+\t\t\tthrow e;\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * begin sql transaction\n+\t */\n+\tprivate void _startTransaction() {\n+\t\tzabbixLocalDB.beginTransaction();\n+\t\t_transactionStack = 0;\n+\t}\n+\n+\t/**\n+\t * acknowledge zabbix event. Sets ack-flag with comment.\n+\t * Caution: This is supported only for Zabbix version >= 1.8.4\n+\t * @param eventid\n+\t * @param comment\n+\t * @return true, success.\n+\t * @throws ClientProtocolException\n+\t * @throws IOException\n+\t * @throws JSONException\n+\t * @throws HttpAuthorizationRequiredException\n+\t * @throws NoAPIAccessException\n+\t */\n+\tpublic boolean acknowledgeEvent(String eventid, String comment) throws ClientProtocolException, IOException, JSONException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n+\t\t// for GUI unit test, just return true\n+\t\tif (comment != null && comment.equals(\"__UNIT_TEST__RETURN_TRUE__\")) return true;\n+\n+\t\tJSONObject result = _queryBuffer(\n+\t\t\t\t\"event.acknowledge\"\n+\t\t\t\t, new JSONObject()\n+\t\t\t\t\t.put(\"eventids\", new JSONArray().put(eventid))\n+\t\t);\n+\t\t// it can be an (empty) array\n+\t\ttry {\n+\t\t\treturn result.getJSONObject(\"result\").getJSONArray(\"eventids\").length() == 1;\n+\t\t} catch (JSONException e) {\n+\t\t\t// or a json object\n+\t\t\treturn result.getJSONObject(\"result\").getJSONObject(\"eventids\").length() == 1;\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * zabbix auth. user and pwd from app preferences\n+\t * @return true success\n+\t * @throws ClientProtocolException\n+\t * @throws IOException\n+\t * @throws JSONException\n+\t * @throws HttpAuthorizationRequiredException\n+\t * @throws NoAPIAccessException\n+\t */\n+\tpublic boolean authenticate() throws ClientProtocolException, IOException, JSONException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n+\t\tSharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(context);\n+\t\tString url = prefs.getString(\"zabbix_url\", \"\").trim();\n+\t\tString user = prefs.getString(\"zabbix_username\", \"\").trim();\n+\t\tString password = prefs.getString(\"zabbix_password\", \"\");\n+\n+\t\tthis.url = url+(url.endsWith(\"/\")?\"\":'/')+\"api_jsonrpc.php\";\n+\t\tLog.d(\"ZabbixContentProvider\", url+\"//\"+user);\n+\n+\t\ttry {\n+\t\t\tJSONObject result = _queryBuffer(\n+\t\t\t\t\t\"user.authenticate\"\n+\t\t\t\t\t, new JSONObject()\n+\t\t\t\t\t\t.put(\"user\", user)\n+\t\t\t\t\t\t.put(\"password\", password)\n+\t\t\t);\n+\t\t\ttoken = result.getString(\"result\");\n+\t\t} catch (JSONException e) {\n+\t\t\t// there's no result\n+\t\t\te.printStackTrace();\n+\t\t} catch (RuntimeException e) {\n+\t\t\t// wrong password. token remains null\n+\t\t\te.printStackTrace();\n+\t\t}\n+\t\tif (token != null) {\n+\t\t\t// get API version\n+\t\t\tJSONObject result = _queryBuffer(\n+\t\t\t\t\t\"apiinfo.version\"\n+\t\t\t\t\t, new JSONObject()\n+\t\t\t);\n+\t\t\tisVersion2 = result.getString(\"result\").equals(\"1.4\");\n+\t\t}\n+\t\treturn token != null;\n+\t}\n+\n+\t/**\n+\t * close the last http stream\n+\t */\n+\tpublic void closeLastStream() {\n+\t\tif (lastStream != null && !lastStream.isClosed()) {\n+\t\t\ttry {\n+\t\t\t\tlastStream.close();\n+\t\t\t} catch (IOException e) {\n+\t\t\t\te.printStackTrace();\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\tprivate void importApplications(long hostid, long itemid, JsonArrayReader jsonArray) throws JsonParseException, NumberFormatException, IOException {\n+\t\tint num = 0;\n+\t\tJsonObjectReader application;\n+\t\twhile ((application = jsonArray.next()) != null) {\n+\t\t\tApplicationData app = new ApplicationData();\n+\t\t\twhile (application.nextValueToken()) {\n+\t\t\t\tString propName = application.getCurrentName();\n+\t\t\t\tif (propName.equals(ApplicationData.COLUMN_APPLICATIONID)) {\n+\t\t\t\t\tapp.set(ApplicationData.COLUMN_APPLICATIONID, Long.parseLong(application.getText()));\n+\t\t\t\t} else if (propName.equals(ApplicationData.COLUMN_NAME)) {\n+\t\t\t\t\tapp.set(ApplicationData.COLUMN_NAME, application.getText());\n+\t\t\t\t} else if (propName.equals(ApplicationData.COLUMN_HOSTID)) {\n+\t\t\t\t\tapp.set(ApplicationData.COLUMN_HOSTID, Long.parseLong(application.getText()));\n+\t\t\t\t} else {\n+\t\t\t\t\tapplication.nextProperty();\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\t// create applications that does not exist\n+\t\t\tapp.insert(zabbixLocalDB, ApplicationData.COLUMN_APPLICATIONID);\n+\t\t\t_commitTransactionIfRecommended();\n+\n+\t\t\t// create ApplicationItemRelation\n+\t\t\tlong appid = (Long) app.get(ApplicationData.COLUMN_APPLICATIONID);\n+\t\t\tApplicationItemRelationData rel = new ApplicationItemRelationData();\n+\t\t\trel.set(ApplicationItemRelationData.COLUMN_APPLICATIONID, appid);\n+\t\t\trel.set(ApplicationItemRelationData.COLUMN_ITEMID, itemid);\n+\t\t\trel.set(ApplicationItemRelationData.COLUMN_HOSTID, hostid);\n+\t\t\trel.insert(zabbixLocalDB);\n+\t\t\t_commitTransactionIfRecommended();\n+\n+\t\t\tnum++;\n+\t\t}\n+\t\tif (num == 0) {\n+\t\t\t// if there's no application, the ID #0 must be added (for other)\n+\t\t\tApplicationItemRelationData rel = new ApplicationItemRelationData();\n+\t\t\trel.set(ApplicationItemRelationData.COLUMN_APPLICATIONID, 0);\n+\t\t\trel.set(ApplicationItemRelationData.COLUMN_ITEMID, itemid);\n+\t\t\trel.set(ApplicationItemRelationData.COLUMN_HOSTID, hostid);\n+\t\t\trel.insert(zabbixLocalDB);\n+\n+\t\t\t// if #0 \"other\" does not exist yet, it has to be created\n+\t\t\tApplicationData app = new ApplicationData();\n+\t\t\tapp.set(ApplicationData.COLUMN_APPLICATIONID, 0);\n+\t\t\tapp.set(ApplicationData.COLUMN_NAME, \"- \"+context.getResources().getString(R.string.other)+\" -\");\n+\t\t\tapp.insert(zabbixLocalDB, ApplicationData.COLUMN_APPLICATIONID);\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * import the newest event of a trigger\n+\t * @param triggerid\n+\t * @throws JSONException\n+\t * @throws IOException\n+\t * @throws HttpAuthorizationRequiredException\n+\t * @throws NoAPIAccessException\n+\t */\n+\tpublic void importEventByTriggerId(String triggerid) throws JSONException, IOException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n+\t\tif (!isCached(EventData.TABLE_NAME, \"triggerid=\"+triggerid)) {\n+\t\t\t_startTransaction();\n+\t\t\tzabbixLocalDB.delete(EventData.TABLE_NAME, EventData.COLUMN_OBJECTID+\"=\"+triggerid, null);\n+\n+\t\t\tJSONObject params = new JSONObject()\n+\t\t\t\t.put(\"output\", \"extend\")\n+\t\t\t\t.put(isVersion2?\"selectHosts\":\"select_hosts\", \"extend\")\n+\t\t\t\t.put(\"triggerids\", new JSONArray().put(triggerid))\n+\t\t\t\t.put(\"limit\", 1)\n+\t\t\t\t.put(\"source\", 0);\n+\t\t\tif (!isVersion2) {\n+\t\t\t\tparams.put(\"sortfield\", \"clock\")\n+\t\t\t\t\t.put(\"sortorder\", \"DESC\");\n+\t\t\t}\n+\n+\t\t\tJsonArrayReader events = _queryStream(\n+\t\t\t\t\t\"event.get\"\n+\t\t\t\t\t, params\n+\t\t\t);\n+\t\t\timportEvents(events, null);\n+\t\t\tevents.close();\n+\n+\t\t\tsetCached(EventData.TABLE_NAME, \"triggerid=\"+triggerid, ZabbixConfig.CACHE_LIFETIME_EVENTS);\n+\t\t\t_endTransaction();\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * import the newest events\n+\t * @throws ClientProtocolException\n+\t * @throws IOException\n+\t * @throws JSONException\n+\t * @throws HttpAuthorizationRequiredException\n+\t * @throws NoAPIAccessException\n+\t */\n+\tpublic void importEvents() throws ClientProtocolException, IOException, JSONException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n+\t\tif (!isCached(EventData.TABLE_NAME, null)) {\n+\t\t\t_startTransaction();\n+\t\t\tzabbixLocalDB.delete(EventData.TABLE_NAME, null, null);\n+\t\t\tzabbixLocalDB.delete(TriggerData.TABLE_NAME, null, null);\n+\t\t\tzabbixLocalDB.delete(CacheData.TABLE_NAME, CacheData.COLUMN_KIND+\"='\"+EventData.TABLE_NAME+\"'\", null);\n+\t\t\tzabbixLocalDB.delete(CacheData.TABLE_NAME, CacheData.COLUMN_KIND+\"='\"+TriggerData.TABLE_NAME+\"'\", null);\n+\n+\t\t\tint numEvents = ZabbixConfig.EVENTS_GET_LIMIT;\n+\n+\t\t\tJSONObject params = new JSONObject()\n+\t\t\t\t.put(\"output\", \"extend\")\n+\t\t\t\t.put(\"limit\", ZabbixConfig.EVENTS_GET_LIMIT)\n+\t\t\t\t.put(isVersion2?\"selectHosts\":\"select_hosts\", \"extend\")\n+\t\t\t\t.put(isVersion2?\"selectTriggers\":\"select_triggers\", \"extend\")\n+\t\t\t\t.put(\"source\", 0)\n+\t\t\t\t.put(\"time_from\", (new Date().getTime()/1000) - ZabbixConfig.EVENT_GET_TIME_FROM_SHIFT);\n+\t\t\tif (!isVersion2) {\n+\t\t\t\t// in Zabbix version <2.0, this is not default\n+\t\t\t\tparams.put(\"sortfield\", \"clock\")\n+\t\t\t\t\t.put(\"sortorder\", \"DESC\");\n+\t\t\t}\n+\t\t\tJsonArrayReader events = _queryStream(\n+\t\t\t\t\t\"event.get\"\n+\t\t\t\t\t, params\n+\t\t\t);\n+\t\t\timportEvents(events, numEvents);\n+\t\t\tevents.close();\n+\n+\t\t\tsetCached(EventData.TABLE_NAME, null, ZabbixConfig.CACHE_LIFETIME_EVENTS);\n+\t\t\t_endTransaction();\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * @param events stream\n+\t * @param numEvents if null, no progressbar-update AND only isert, if it does not exist. If !null, progressbar-update AND always insert without checking\n+\t * @throws JsonParseException\n+\t * @throws IOException\n+\t */\n+\tprivate void importEvents(JsonArrayReader events, Integer numEvents) throws JsonParseException, IOException {\n+\t\tint i=0;\n+\t\tJsonObjectReader eventReader;\n+\t\twhile ((eventReader = events.next()) != null) {\n+\t\t\tEventData e = new EventData();\n+\t\t\twhile (eventReader.nextValueToken()) {\n+\t\t\t\tString propName = eventReader.getCurrentName();\n+\t\t\t\tif (propName.equals(\"hosts\")) {\n+\t\t\t\t\t// import hosts\n+\t\t\t\t\tString hostnames = (String) importHosts(eventReader.getJsonArray(), null)[0];\n+\t\t\t\t\t// store hosts namen\n+\t\t\t\t\te.set(EventData.COLUMN_HOSTS, hostnames);\n+\t\t\t\t} else if (propName.equals(\"triggers\")) {\n+\t\t\t\t\t// import triggers\n+\t\t\t\t\timportTriggers(eventReader.getJsonArray());\n+\t\t\t\t} else if (propName.equals(EventData.COLUMN_EVENTID)) {\n+\t\t\t\t\te.set(EventData.COLUMN_EVENTID, Long.parseLong(eventReader.getText()));\n+\t\t\t\t} else if (propName.equals(EventData.COLUMN_CLOCK)) {\n+\t\t\t\t\te.set(EventData.COLUMN_CLOCK, Integer.parseInt(eventReader.getText()));\n+\t\t\t\t} else if (propName.equals(EventData.COLUMN_OBJECTID)) {\n+\t\t\t\t\te.set(EventData.COLUMN_OBJECTID, Long.parseLong(eventReader.getText()));\n+\t\t\t\t} else if (propName.equals(EventData.COLUMN_ACK)) {\n+\t\t\t\t\te.set(EventData.COLUMN_ACK, Integer.parseInt(eventReader.getText()) == 1);\n+\t\t\t\t} else if (propName.equals(EventData.COLUMN_VALUE)) {\n+\t\t\t\t\te.set(EventData.COLUMN_VALUE, Integer.parseInt(eventReader.getText()));\n+\t\t\t\t} else {\n+\t\t\t\t\teventReader.nextProperty();\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\t// event is parsed and can be inserted into the db\n+\t\t\tif (numEvents == null) {\n+\t\t\t\te.insert(zabbixLocalDB, EventData.COLUMN_EVENTID);\n+\t\t\t} else {\n+\t\t\t\te.insert(zabbixLocalDB);\n+\t\t\t\tif (++i % 10 == 0) {\n+\t\t\t\t\tshowProgress(i*100/numEvents);\n+\t\t\t\t}\n+\t\t\t}\n+\n+\t\t\t_commitTransactionIfRecommended();\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * import graph items\n+\t *\n+\t * @param graphItems\n+\t * @return true, if graphid column has to be updated from -1 to the correct graphid later.\n+\t * @throws JsonParseException\n+\t * @throws NumberFormatException\n+\t * @throws IOException\n+\t */\n+\tprivate boolean importGraphItems(JsonArrayReader graphItems) throws JsonParseException, NumberFormatException, IOException {\n+\t\tboolean mustSetGraphid = false;\n+\t\tJsonObjectReader graphItemReader;\n+\t\twhile ((graphItemReader = graphItems.next()) != null) {\n+\t\t\tGraphItemData gi = new GraphItemData();\n+\t\t\twhile (graphItemReader.nextValueToken()) {\n+\t\t\t\tString propName = graphItemReader.getCurrentName();\n+\t\t\t\tif (propName.equals(\"gitemid\")) {\n+\t\t\t\t\tgi.set(GraphItemData.COLUMN_GRAPHITEMID, Long.parseLong(graphItemReader.getText()));\n+\t\t\t\t} else if (propName.equals(GraphItemData.COLUMN_GRAPHID)) {\n+\t\t\t\t\tgi.set(GraphItemData.COLUMN_GRAPHID, Long.parseLong(graphItemReader.getText()));\n+\t\t\t\t} else if (propName.equals(GraphItemData.COLUMN_ITEMID)) {\n+\t\t\t\t\tgi.set(GraphItemData.COLUMN_ITEMID, Long.parseLong(graphItemReader.getText()));\n+\t\t\t\t} else if (propName.equals(GraphItemData.COLUMN_COLOR)) {\n+\t\t\t\t\t// hex string => color int\n+\t\t\t\t\tgi.set(GraphItemData.COLUMN_COLOR, Color.parseColor(\"#\"+graphItemReader.getText()));\n+\t\t\t\t} else {\n+\t\t\t\t\tgraphItemReader.nextProperty();\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\t// if graphid-column was not set, this must be done later. temporary graphid=-1\n+\t\t\tif (gi.get(GraphItemData.COLUMN_GRAPHID) == null) {\n+\t\t\t\tgi.set(GraphItemData.COLUMN_GRAPHID, -1);\n+\t\t\t\tmustSetGraphid = true;\n+\t\t\t}\n+\t\t\tgi.insert(zabbixLocalDB);\n+\t\t}\n+\t\treturn mustSetGraphid;\n+\t}\n+\n+\tpublic void importGraphsForScreen(long screenid) throws ClientProtocolException, IOException, JSONException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n+\t\tif (!isCached(GraphData.TABLE_NAME, \"screenid=\"+screenid)) {\n+\t\t\t_startTransaction();\n+\n+\t\t\t// collect all graphids\n+\t\t\tSet<Long> graphids = new HashSet<Long>();\n+\t\t\tCursor cur = zabbixLocalDB.query(ScreenItemData.TABLE_NAME, null, ScreenItemData.COLUMN_SCREENID+\"=\"+screenid, null, null, null, null);\n+\t\t\twhile (cur.moveToNext()) {\n+\t\t\t\tgraphids.add(cur.getLong(cur.getColumnIndex(ScreenItemData.COLUMN_RESOURCEID)));\n+\t\t\t}\n+\n+\t\t\t// delete old graphs\n+\t\t\tString str_graphids = graphids.toString().replace(\"[\", \"\").replace(\"]\", \"\");\n+\t\t\tif (str_graphids.length()>0) {\n+\t\t\t\tzabbixLocalDB.delete(GraphData.TABLE_NAME, GraphData.COLUMN_GRAPHID+\" IN (\"+str_graphids+\")\", null);\n+\t\t\t\tzabbixLocalDB.delete(GraphItemData.TABLE_NAME, GraphItemData.COLUMN_GRAPHID+\" IN (\"+str_graphids+\")\", null);\n+\t\t\t}\n+\t\t\tzabbixLocalDB.delete(CacheData.TABLE_NAME, CacheData.COLUMN_KIND+\"='\"+GraphData.TABLE_NAME+\"' AND \"+CacheData.COLUMN_FILTER+\"='screenid=\"+screenid+'\\'', null);\n+\n+\t\t\tJsonArrayReader graphs = _queryStream(\n+\t\t\t\t\t\"graph.get\"\n+\t\t\t\t\t, new JSONObject()\n+\t\t\t\t\t\t.put(isVersion2?\"selectGraphItems\":\"select_graph_items\", \"extend\")\n+\t\t\t\t\t\t.put(isVersion2?\"selectItems\":\"select_items\", \"extend\")\n+\t\t\t\t\t\t.put(\"output\", \"extend\")\n+\t\t\t\t\t\t.put(\"graphids\", new JSONArray(graphids))\n+\t\t\t);\n+\t\t\tJsonObjectReader graphReader;\n+\t\t\twhile ((graphReader = graphs.next()) != null) {\n+\t\t\t\tboolean mustSetGraphid = false;\n+\t\t\t\tGraphData scr = new GraphData();\n+\t\t\t\twhile (graphReader.nextValueToken()) {\n+\t\t\t\t\tString propName = graphReader.getCurrentName();\n+\t\t\t\t\tif (propName.equals(GraphData.COLUMN_GRAPHID)) {\n+\t\t\t\t\t\tscr.set(GraphData.COLUMN_GRAPHID, Long.parseLong(graphReader.getText()));\n+\t\t\t\t\t} else if (propName.equals(GraphData.COLUMN_NAME)) {\n+\t\t\t\t\t\tscr.set(GraphData.COLUMN_NAME, graphReader.getText());\n+\t\t\t\t\t} else if (propName.equals(\"gitems\")) {\n+\t\t\t\t\t\tmustSetGraphid = importGraphItems(graphReader.getJsonArray());\n+\t\t\t\t\t} else if (propName.equals(\"items\")) {\n+\t\t\t\t\t\timportItems(graphReader.getJsonArray(), 0, true);\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tgraphReader.nextProperty();\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\tscr.insert(zabbixLocalDB);\n+\t\t\t\tif (mustSetGraphid) {\n+\t\t\t\t\tContentValues values = new ContentValues(1);\n+\t\t\t\t\tvalues.put(GraphItemData.COLUMN_GRAPHID, (Long) scr.get(GraphData.COLUMN_GRAPHID));\n+\t\t\t\t\tzabbixLocalDB.update(\n+\t\t\t\t\t\t\tGraphItemData.TABLE_NAME\n+\t\t\t\t\t\t\t, values\n+\t\t\t\t\t\t\t, GraphItemData.COLUMN_GRAPHID+\"=-1\"\n+\t\t\t\t\t\t\t, null);\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\tgraphs.close();\n+\n+\t\t\tsetCached(GraphData.TABLE_NAME, \"screenid=\"+screenid, ZabbixConfig.CACHE_LIFETIME_SCREENS);\n+\t\t\t_endTransaction();\n+\t\t}\n+\t}\n+\n+\tpublic void importHistoryDetails(String itemid) throws ClientProtocolException, IOException, JSONException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n+\t\tif (!isCached(HistoryDetailData.TABLE_NAME, itemid)) {\n+\t\t\t_startTransaction();\n+\t\t\tzabbixLocalDB.delete(HistoryDetailData.TABLE_NAME, HistoryDetailData.COLUMN_ITEMID+\"=\"+itemid, null);\n+\n+\t\t\t// the past 2 hours\n+\t\t\tlong time_till = new Date().getTime() / 1000;\n+\t\t\tlong time_from = time_till - ZabbixConfig.HISTORY_GET_TIME_FROM_SHIFT; // jetzt-2h\n+\n+\t\t\t// Workaround: historydetails only comes if you use the correct \"history\"-parameter.\n+\t\t\t// this parameter can be \"null\" or a number 0-4. Because we don't know when to use which,\n+\t\t\t// we try them all, until we get results.\n+\t\t\tInteger historytype = null;\n+\t\t\tJSONObject result = _queryBuffer(\n+\t\t\t\t\t\"history.get\"\n+\t\t\t\t\t, new JSONObject()\n+\t\t\t\t\t\t.put(\"limit\", 1)\n+\t\t\t\t\t\t.put(\"history\", historytype) // for integer ?\n+\t\t\t\t\t\t.put(\"itemids\", new JSONArray().put(itemid))\n+\t\t\t\t\t\t.put(\"time_from\", time_from)\n+\t\t\t);\n+\n+\t\t\tJSONArray testHistorydetails = result.getJSONArray(\"result\");\n+\t\t\tif (testHistorydetails.length() == 0) {\n+\t\t\t\thistorytype = -1;\n+\t\t\t\twhile (testHistorydetails.length() == 0 && ++historytype <= 4) {\n+\t\t\t\t\t// if we get an empty array, we try another history parameter\n+\t\t\t\t\tresult = _queryBuffer(\n+\t\t\t\t\t\t\t\"history.get\"\n+\t\t\t\t\t\t\t, new JSONObject()\n+\t\t\t\t\t\t\t\t.put(\"output\", \"extend\")\n+\t\t\t\t\t\t\t\t.put(\"limit\", 1)\n+\t\t\t\t\t\t\t\t.put(\"history\", historytype)\n+\t\t\t\t\t\t\t\t.put(\"itemids\", new JSONArray().put(itemid))\n+\t\t\t\t\t\t\t\t.put(\"time_from\", time_from)\n+\t\t\t\t\t);\n+\t\t\t\t\ttestHistorydetails = result.getJSONArray(\"result\");\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\t// correct historytype found and there are data\n+\t\t\tif (testHistorydetails.length() > 0) {\n+\t\t\t\t// count of the entries cannot be detected (zabbix bug),\n+\t\t\t\t// so we use a fiction\n+\t\t\t\tint numDetails = 400;\n+\t\t\t\tint curI=0;\n+\t\t\t\tJsonArrayReader historydetails = _queryStream(\n+\t\t\t\t\t\t\"history.get\"\n+\t\t\t\t\t\t, new JSONObject()\n+\t\t\t\t\t\t\t.put(\"output\", \"extend\")\n+\t\t\t\t\t\t\t.put(\"limit\", ZabbixConfig.HISTORY_GET_LIMIT)\n+\t\t\t\t\t\t\t.put(\"history\", historytype)\n+\t\t\t\t\t\t\t.put(\"itemids\", new JSONArray().put(itemid))\n+\t\t\t\t\t\t\t.put(\"time_from\", time_from)\n+\t\t\t\t\t\t\t.put(\"sortfield\", \"clock\")\n+\t\t\t\t\t\t\t.put(\"sortorder\", \"DESC\")\n+\t\t\t\t);\n+\t\t\t\tJsonObjectReader historydetail;\n+\t\t\t\ttry {\n+\t\t\t\t\tint selI = 0;\n+\t\t\t\t\twhile ((historydetail = historydetails.next()) != null) {\n+\t\t\t\t\t\t// save only every 20th\n+\t\t\t\t\t\tif (selI++ % 20 != 0) {\n+\t\t\t\t\t\t\twhile (historydetail.nextValueToken()) {\n+\t\t\t\t\t\t\t\thistorydetail.nextProperty();\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\tcontinue;\n+\t\t\t\t\t\t}\n+\n+\t\t\t\t\t\tHistoryDetailData h = new HistoryDetailData();\n+\t\t\t\t\t\twhile (historydetail.nextValueToken()) {\n+\t\t\t\t\t\t\tString propName = historydetail.getCurrentName();\n+\t\t\t\t\t\t\tif (propName.equals(HistoryDetailData.COLUMN_CLOCK)) {\n+\t\t\t\t\t\t\t\th.set(HistoryDetailData.COLUMN_CLOCK, Integer.parseInt(historydetail.getText()));\n+\t\t\t\t\t\t\t} else if (propName.equals(HistoryDetailData.COLUMN_ITEMID)) {\n+\t\t\t\t\t\t\t\th.set(HistoryDetailData.COLUMN_ITEMID, Long.parseLong(historydetail.getText()));\n+\t\t\t\t\t\t\t} else if (propName.equals(HistoryDetailData.COLUMN_VALUE)) {\n+\t\t\t\t\t\t\t\th.set(HistoryDetailData.COLUMN_VALUE, Double.parseDouble(historydetail.getText()));\n+\t\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\t\thistorydetail.nextProperty();\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\th.insert(zabbixLocalDB);\n+\t\t\t\t\t\tif (++curI % 10 == 0) {\n+\t\t\t\t\t\t\tshowProgress(Math.min(curI*100/numDetails, 84));\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\t_commitTransactionIfRecommended();\n+\t\t\t\t\t}\n+\t\t\t\t} catch (NumberFormatException e) {\n+\t\t\t\t\t// data are unuseable, e.g. because it's a string\n+\t\t\t\t}\n+\t\t\t\thistorydetails.close();\n+\t\t\t}\n+\t\t\tsetCached(HistoryDetailData.TABLE_NAME, itemid, ZabbixConfig.CACHE_LIFETIME_HISTORY_DETAILS);\n+\t\t\t_endTransaction();\n+\t\t}\n+\t}\n+\n+\tprivate long importHostGroups(JsonArrayReader jsonArray) throws JsonParseException, IOException {\n+\t\tlong firstHostGroupId = -1;\n+\t\tJsonObjectReader hostReader;\n+\t\twhile ((hostReader = jsonArray.next()) != null) {\n+\t\t\tHostGroupData h = new HostGroupData();\n+\t\t\twhile (hostReader.nextValueToken()) {\n+\t\t\t\tString propName = hostReader.getCurrentName();\n+\t\t\t\tif (propName.equals(HostGroupData.COLUMN_GROUPID)) {\n+\t\t\t\t\tlong id = Long.parseLong(hostReader.getText());\n+\t\t\t\t\tif (firstHostGroupId == -1) firstHostGroupId = id;\n+\t\t\t\t\th.set(HostGroupData.COLUMN_GROUPID, id);\n+\t\t\t\t} else if (propName.equals(HostGroupData.COLUMN_NAME)) {\n+\t\t\t\t\th.set(HostGroupData.COLUMN_NAME, hostReader.getText());\n+\t\t\t\t} else {\n+\t\t\t\t\thostReader.nextProperty();\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\th.insert(zabbixLocalDB, HostGroupData.COLUMN_GROUPID);\n+\t\t\t_commitTransactionIfRecommended();\n+\t\t}\n+\n+\t\treturn firstHostGroupId;\n+\t}\n+\n+\t/**\n+\t * import the hosts from stream\n+\t * @param jsonArray stream\n+\t * @param numHosts count of hosts for progressbar. null if unknown.\n+\t * @return Object[] {(String) comma-separated all Hostnames, (Long) 1. host id}\n+\t * @throws JsonParseException\n+\t * @throws IOException\n+\t */\n+\tprivate Object[] importHosts(JsonArrayReader jsonArray, Integer numHosts) throws JsonParseException, IOException {\n+\t\tList<String> hostnames = new ArrayList<String>();\n+\t\tlong firstHostId = -1;\n+\t\tJsonObjectReader hostReader;\n+\t\tint i=0;\n+\t\twhile ((hostReader = jsonArray.next()) != null) {\n+\t\t\tHostData h = new HostData();\n+\t\t\twhile (hostReader.nextValueToken()) {\n+\t\t\t\tString propName = hostReader.getCurrentName();\n+\t\t\t\tif (propName.equals(HostData.COLUMN_HOSTID)) {\n+\t\t\t\t\th.set(HostData.COLUMN_HOSTID, Long.parseLong(hostReader.getText()));\n+\t\t\t\t\tif (firstHostId == -1) {\n+\t\t\t\t\t\tfirstHostId = (Long) h.get(HostData.COLUMN_HOSTID);\n+\t\t\t\t\t}\n+\t\t\t\t} else if (propName.equals(HostData.COLUMN_HOST)) {\n+\t\t\t\t\tString host = hostReader.getText();\n+\t\t\t\t\thostnames.add(host);\n+\t\t\t\t\th.set(HostData.COLUMN_HOST, host);\n+\t\t\t\t} else if (propName.equals(\"groups\")) {\n+\t\t\t\t\tlong groupid = importHostGroups(hostReader.getJsonArray());\n+\t\t\t\t\tif (groupid != -1) {\n+\t\t\t\t\t\th.set(HostData.COLUMN_GROUPID, groupid);\n+\t\t\t\t\t}\n+\t\t\t\t} else {\n+\t\t\t\t\thostReader.nextProperty();\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\t// host without group will get group #0 (other)\n+\t\t\tif (h.get(HostData.COLUMN_GROUPID) == null) {\n+\t\t\t\th.set(HostData.COLUMN_GROUPID, 0);\n+\t\t\t\t// create \"other\" hostgroup #1\n+\t\t\t\tHostGroupData hg = new HostGroupData();\n+\t\t\t\thg.set(HostGroupData.COLUMN_GROUPID, 0);\n+\t\t\t\thg.set(HostGroupData.COLUMN_NAME, \"- \"+context.getResources().getString(R.string.other)+\" -\");\n+\t\t\t\thg.insert(zabbixLocalDB, HostGroupData.COLUMN_GROUPID);\n+\t\t\t}\n+\t\t\th.insert(zabbixLocalDB, HostData.COLUMN_HOSTID);\n+\t\t\tif (numHosts != null && ++i % 10 == 0) {\n+\t\t\t\tshowProgress(i*100/numHosts);\n+\t\t\t}\n+\t\t\t_commitTransactionIfRecommended();\n+\t\t}\n+\n+\t\treturn new Object[] {hostnames.toString().replaceAll(\"[\\\\[\\\\]]\", \"\"), firstHostId};\n+\t}\n+\n+\tpublic void importHostsAndGroups() throws JSONException, IOException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n+\t\tif (!isCached(HostData.TABLE_NAME, null)) {\n+\t\t\t_startTransaction();\n+\t\t\tzabbixLocalDB.delete(HostData.TABLE_NAME, null, null);\n+\t\t\tzabbixLocalDB.delete(HostGroupData.TABLE_NAME, null, null);\n+\n+\t\t\t// get count of hosts\n+\t\t\tJSONObject result = _queryBuffer(\n+\t\t\t\t\t\"host.get\"\n+\t\t\t\t\t, new JSONObject()\n+\t\t\t\t\t\t.put(\"countOutput\", 1)\n+\t\t\t\t\t\t.put(\"limit\", ZabbixConfig.HOST_GET_LIMIT)\n+\t\t\t\t\t\t.put(isVersion2?\"selectGroups\":\"select_groups\", \"extend\")\n+\t\t\t);\n+\t\t\tint numHosts = result.getInt(\"result\");\n+\t\t\tJsonArrayReader hosts = _queryStream(\n+\t\t\t\t\t\"host.get\"\n+\t\t\t\t\t, new JSONObject()\n+\t\t\t\t\t\t.put(\"output\", \"extend\")\n+\t\t\t\t\t\t.put(\"limit\", ZabbixConfig.HOST_GET_LIMIT)\n+\t\t\t\t\t\t.put(isVersion2?\"selectGroups\":\"select_groups\", \"extend\")\n+\t\t\t);\n+\t\t\timportHosts(hosts, numHosts);\n+\t\t\thosts.close();\n+\n+\t\t\tsetCached(HostData.TABLE_NAME, null, ZabbixConfig.CACHE_LIFETIME_HOSTS);\n+\t\t\t_endTransaction();\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * import items from stream.\n+\t * @param items stream\n+\t * @param numItems count for progressbar, if 0 no progressbarupdate\n+\t * @param checkBeforeInsert if true, only make an insert if item does not exist\n+\t * @return the first item id\n+\t * @throws JsonParseException\n+\t * @throws IOException\n+\t */\n+\tprivate long importItems(JsonArrayReader items, int numItems, boolean checkBeforeInsert) throws JsonParseException, IOException {\n+\t\tlong firstItemId = -1;\n+\t\tint curI=0;\n+\t\tJsonObjectReader itemReader;\n+\t\twhile ((itemReader = items.next()) != null) {\n+\t\t\tItemData i = new ItemData();\n+\t\t\tString key_ = null;\n+\t\t\twhile (itemReader.nextValueToken()) {\n+\t\t\t\tString propName = itemReader.getCurrentName();\n+\t\t\t\tif (propName.equals(ItemData.COLUMN_ITEMID)) {\n+\t\t\t\t\ti.set(ItemData.COLUMN_ITEMID, Long.parseLong(itemReader.getText()));\n+\t\t\t\t\tif (firstItemId == -1) {\n+\t\t\t\t\t\tfirstItemId = (Long) i.get(ItemData.COLUMN_ITEMID);\n+\t\t\t\t\t}\n+\t\t\t\t} else if (propName.equals(ItemData.COLUMN_HOSTID)) {\n+\t\t\t\t\ti.set(ItemData.COLUMN_HOSTID, Long.parseLong(itemReader.getText()));\n+\t\t\t\t} else if (propName.equals(ItemData.COLUMN_DESCRIPTION) || propName.equals(\"name\")) {\n+\t\t\t\t\t// since zabbix 2.x is the name of the item \"name\"\n+\t\t\t\t\t// before zabbix 2.x the name field was \"description\"\n+\t\t\t\t\tif (isVersion2 && propName.equals(\"name\")) {\n+\t\t\t\t\t\ti.set(ItemData.COLUMN_DESCRIPTION, itemReader.getText());\n+\t\t\t\t\t} else if (!isVersion2) {\n+\t\t\t\t\t\ti.set(ItemData.COLUMN_DESCRIPTION, itemReader.getText());\n+\t\t\t\t\t}\n+\t\t\t\t} else if (propName.equals(ItemData.COLUMN_LASTCLOCK)) {\n+\t\t\t\t\ttry {\n+\t\t\t\t\t\ti.set(ItemData.COLUMN_LASTCLOCK, Integer.parseInt(itemReader.getText()));\n+\t\t\t\t\t} catch (NumberFormatException e) {\n+\t\t\t\t\t\t// ignore\n+\t\t\t\t\t}\n+\t\t\t\t} else if (propName.equals(ItemData.COLUMN_LASTVALUE)) {\n+\t\t\t\t\ti.set(ItemData.COLUMN_LASTVALUE, itemReader.getText());\n+\t\t\t\t} else if (propName.equals(ItemData.COLUMN_UNITS)) {\n+\t\t\t\t\ti.set(ItemData.COLUMN_UNITS, itemReader.getText());\n+\t\t\t\t} else if (propName.equals(\"key_\")) {\n+\t\t\t\t\tkey_ = itemReader.getText();\n+\t\t\t\t} else if (propName.equals(\"applications\")) {\n+\t\t\t\t\t// at this point itemid and hostid is unknown\n+\t\t\t\t\t// because of this, all applicationrelations will be saved with itemid and hostid \"-1\".\n+\t\t\t\t\t// later the IDs will be replaced with the correct\n+\t\t\t\t\timportApplications(-1, -1, itemReader.getJsonArray());\n+\t\t\t\t} else {\n+\t\t\t\t\titemReader.nextProperty();\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\t// if applicable replace placeholder\n+\t\t\tString description = (String) i.get(ItemData.COLUMN_DESCRIPTION);\n+\t\t\tif (description.matches(\".*\\\\$[0-9].*\")) {\n+\t\t\t\tif (key_ != null && key_.indexOf('[') != -1) {\n+\t\t\t\t\tString[] keys = key_.substring(key_.indexOf('[')+1, key_.indexOf(']')).split(\",\");\n+\t\t\t\t\tfor (int ix=0; ix<keys.length; ix++) {\n+\t\t\t\t\t\tdescription = description.replace(\"$\"+(ix+1), keys[ix]);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\ti.set(ItemData.COLUMN_DESCRIPTION, description);\n+\t\t\tif (checkBeforeInsert) {\n+\t\t\t\ti.insert(zabbixLocalDB, ItemData.COLUMN_ITEMID);\n+\t\t\t} else {\n+\t\t\t\ti.insert(zabbixLocalDB);\n+\t\t\t}\n+\t\t\tif (numItems > 0 && ++curI % 10 == 0) {\n+\t\t\t\tshowProgress(curI*100/numItems);\n+\t\t\t}\n+\n+\t\t\t// now the \"-1\" IDs of applicationsrelation will be replaced with the correct itemID\n+\t\t\tContentValues values = new ContentValues(2);\n+\t\t\tvalues.put(ApplicationItemRelationData.COLUMN_ITEMID, (Long) i.get(ItemData.COLUMN_ITEMID));\n+\t\t\tvalues.put(ApplicationItemRelationData.COLUMN_HOSTID, (Long) i.get(ItemData.COLUMN_HOSTID));\n+\t\t\tzabbixLocalDB.update(\n+\t\t\t\t\tApplicationItemRelationData.TABLE_NAME\n+\t\t\t\t\t, values\n+\t\t\t\t\t, ApplicationItemRelationData.COLUMN_ITEMID+\"=-1\"\n+\t\t\t\t\t, null\n+\t\t\t);\n+\t\t}\n+\t\treturn firstItemId;\n+\t}\n+\n+\tpublic void importItems(long hostid) throws JSONException, IOException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n+\t\tif (!isCached(ItemData.TABLE_NAME, \"hostid=\"+hostid)) {\n+\t\t\t_startTransaction();\n+\t\t\tzabbixLocalDB.delete(ItemData.TABLE_NAME, ItemData.COLUMN_HOSTID+\"=\"+hostid, null);\n+\t\t\tzabbixLocalDB.delete(ApplicationItemRelationData.TABLE_NAME, ApplicationItemRelationData.COLUMN_HOSTID+\"=\"+hostid, null);\n+\n+\t\t\t// count of items\n+\t\t\tJSONObject result = _queryBuffer(\n+\t\t\t\t\t\"item.get\"\n+\t\t\t\t\t, new JSONObject()\n+\t\t\t\t\t.put(\"output\", \"extend\")\n+\t\t\t\t\t.put(\"countOutput\", 1)\n+\t\t\t\t\t.put(\"limit\", ZabbixConfig.ITEM_GET_LIMIT)\n+\t\t\t\t\t.put(\"hostids\", new JSONArray().put(hostid))\n+\t\t\t);\n+\t\t\tint numItems = result.getInt(\"result\");\n+\t\t\tJsonArrayReader items = _queryStream(\n+\t\t\t\t\t\"item.get\"\n+\t\t\t\t\t, new JSONObject()\n+\t\t\t\t\t\t.put(\"output\", \"extend\")\n+\t\t\t\t\t\t.put(\"limit\", ZabbixConfig.ITEM_GET_LIMIT)\n+\t\t\t\t\t\t.put(isVersion2?\"selectApplications\":\"select_applications\", \"extend\")\n+\t\t\t\t\t\t.put(\"hostids\", new JSONArray().put(hostid))\n+\t\t\t);\n+\t\t\timportItems(items, numItems, false);\n+\t\t\titems.close();\n+\n+\t\t\tsetCached(ItemData.TABLE_NAME, \"hostid=\"+hostid, ZabbixConfig.CACHE_LIFETIME_ITEMS);\n+\t\t\t_endTransaction();\n+\t\t}\n+\t}\n+\n+\tprivate void importScreenItems(JsonArrayReader screenItems) throws JsonParseException, NumberFormatException, IOException {\n+\t\tJsonObjectReader screenItemReader;\n+\t\twhile ((screenItemReader = screenItems.next()) != null) {\n+\t\t\tScreenItemData si = new ScreenItemData();\n+\t\t\tint resourcetype = -1;\n+\t\t\twhile (screenItemReader.nextValueToken()) {\n+\t\t\t\tString propName = screenItemReader.getCurrentName();\n+\t\t\t\tif (propName.equals(ScreenItemData.COLUMN_SCREENITEMID)) {\n+\t\t\t\t\tsi.set(ScreenItemData.COLUMN_SCREENITEMID, Long.parseLong(screenItemReader.getText()));\n+\t\t\t\t} else if (propName.equals(ScreenItemData.COLUMN_SCREENID)) {\n+\t\t\t\t\tsi.set(ScreenItemData.COLUMN_SCREENID, Long.parseLong(screenItemReader.getText()));\n+\t\t\t\t} else if (propName.equals(ScreenItemData.COLUMN_RESOURCEID)) {\n+\t\t\t\t\tsi.set(ScreenItemData.COLUMN_RESOURCEID, Long.parseLong(screenItemReader.getText()));\n+\t\t\t\t} else if (propName.equals(\"resourcetype\")) {\n+\t\t\t\t\tresourcetype = Integer.parseInt(screenItemReader.getText());\n+\t\t\t\t} else {\n+\t\t\t\t\tscreenItemReader.nextProperty();\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\t// only resouretype == 0\n+\t\t\tif (resourcetype == 0) {\n+\t\t\t\tsi.insert(zabbixLocalDB);\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\tpublic void importScreens() throws ClientProtocolException, IOException, JSONException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n+\t\tif (!isCached(ScreenData.TABLE_NAME, null)) {\n+\t\t\t_startTransaction();\n+\n+\t\t\tzabbixLocalDB.delete(ScreenData.TABLE_NAME, null, null);\n+\t\t\tzabbixLocalDB.delete(ScreenItemData.TABLE_NAME, null, null);\n+\t\t\tzabbixLocalDB.delete(CacheData.TABLE_NAME, CacheData.COLUMN_KIND+\"='\"+ScreenData.TABLE_NAME+\"'\", null);\n+\n+\t\t\tJsonArrayReader screens = _queryStream(\n+\t\t\t\t\t(isVersion2?\"s\":\"S\")+\"creen.get\"\n+\t\t\t\t\t, new JSONObject()\n+\t\t\t\t\t\t.put(\"output\", \"extend\")\n+\t\t\t\t\t\t.put(isVersion2?\"selectScreenItems\":\"select_screenitems\", \"extend\")\n+\t\t\t);\n+\t\t\tJsonObjectReader screenReader;\n+\t\t\twhile ((screenReader = screens.next()) != null) {\n+\t\t\t\tScreenData scr = new ScreenData();\n+\t\t\t\twhile (screenReader.nextValueToken()) {\n+\t\t\t\t\tString propName = screenReader.getCurrentName();\n+\t\t\t\t\tif (propName.equals(ScreenData.COLUMN_SCREENID)) {\n+\t\t\t\t\t\tscr.set(ScreenData.COLUMN_SCREENID, Long.parseLong(screenReader.getText()));\n+\t\t\t\t\t} else if (propName.equals(ScreenData.COLUMN_NAME)) {\n+\t\t\t\t\t\tscr.set(ScreenData.COLUMN_NAME, screenReader.getText());\n+\t\t\t\t\t} else if (propName.equals(\"screenitems\")) {\n+\t\t\t\t\t\timportScreenItems(screenReader.getJsonArray());\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tscreenReader.nextProperty();\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\tscr.insert(zabbixLocalDB);\n+\t\t\t}\n+\t\t\tscreens.close();\n+\n+\t\t\tsetCached(ScreenData.TABLE_NAME, null, ZabbixConfig.CACHE_LIFETIME_SCREENS);\n+\t\t\t_endTransaction();\n+\t\t}\n+\t}\n+\n+\tpublic void importTrigger(String triggerid) throws JSONException, IOException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n+\t\tif (!isCached(TriggerData.TABLE_NAME, \"triggerid=\"+triggerid)) {\n+\t\t\t_startTransaction();\n+\n+\t\t\tJsonArrayReader trigger = _queryStream(\n+\t\t\t\t\t\"trigger.get\"\n+\t\t\t\t\t, new JSONObject()\n+\t\t\t\t\t\t.put(\"output\", \"extend\")\n+\t\t\t\t\t\t.put(isVersion2?\"selectHosts\":\"select_hosts\", \"extend\")\n+\t\t\t\t\t\t.put(\"triggerids\", new JSONArray().put(triggerid))\n+\t\t\t);\n+\t\t\timportTriggers(trigger);\n+\t\t\ttrigger.close();\n+\n+\t\t\tsetCached(TriggerData.TABLE_NAME, \"triggerid=\"+triggerid, ZabbixConfig.CACHE_LIFETIME_TRIGGERS);\n+\t\t\t_endTransaction();\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * importiert ein trigger mit dem attribute itemid. ggf. wird der trigger zuerst gelöscht und neu angelegt.\n+\t * imports a trigger with the attribute itemid. if trigger already exists, it will be removed first.\n+\t * @param triggerid\n+\t * @throws JSONException\n+\t * @throws IOException\n+\t * @throws HttpAuthorizationRequiredException\n+\t * @throws NoAPIAccessException\n+\t */\n+\tpublic void importTriggerColumnItemId(String triggerid) throws JSONException, IOException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n+\t\t// check if the trigger exists and if the itemid was set\n+\t\tboolean mustImport = true;\n+\t\tCursor cur = zabbixLocalDB.query(TriggerData.TABLE_NAME, null, TriggerData.COLUMN_TRIGGERID+\"=\"+triggerid, null, null, null, null);\n+\t\tif (cur.moveToFirst()) {\n+\t\t\tlong itemid = 0;\n+\t\t\ttry {\n+\t\t\t\titemid = cur.getLong(cur.getColumnIndex(TriggerData.COLUMN_ITEMID));\n+\t\t\t} catch (Exception e) {\n+\t\t\t\t// no itemid\n+\t\t\t}\n+\t\t\tif (itemid > 0) {\n+\t\t\t\tmustImport = false;\n+\t\t\t}\n+\t\t}\n+\t\tif (mustImport) {\n+\t\t\t_startTransaction();\n+\t\t\tzabbixLocalDB.delete(TriggerData.TABLE_NAME, TriggerData.COLUMN_TRIGGERID+\"=\"+triggerid, null);\n+\t\t\tJsonArrayReader triggers = _queryStream(\n+\t\t\t\t\t\"trigger.get\"\n+\t\t\t\t\t, new JSONObject()\n+\t\t\t\t\t\t.put(\"output\", \"extend\")\n+\t\t\t\t\t\t.put(isVersion2?\"selectHosts\":\"select_hosts\", \"extend\")\n+\t\t\t\t\t\t.put(isVersion2?\"selectGroups\":\"select_groups\", \"extend\")\n+\t\t\t\t\t\t.put(isVersion2?\"selectItems\":\"select_items\", \"extend\")\n+\t\t\t\t\t\t.put(\"triggerids\", new JSONArray().put(triggerid))\n+\t\t\t\t\t\t.put(\"limit\", 1)\n+\t\t\t);\n+\t\t\timportTriggers(triggers);\n+\t\t\t_endTransaction();\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * imports the \"warning\"-triggers\n+\t * @throws JSONException\n+\t * @throws IOException\n+\t * @throws HttpAuthorizationRequiredException\n+\t * @throws NoAPIAccessException\n+\t */\n+\tpublic void importTriggers() throws JSONException, IOException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n+\t\tif (!isCached(TriggerData.TABLE_NAME, null)) {\n+\t\t\t_startTransaction();\n+\n+\t\t\tlong min = (new Date().getTime()/1000)-ZabbixConfig.STATUS_SHOW_TRIGGER_TIME;\n+\t\t\tJsonArrayReader triggers = _queryStream(\n+\t\t\t\t\t\"trigger.get\"\n+\t\t\t\t\t, new JSONObject()\n+\t\t\t\t\t\t.put(\"output\", \"extend\")\n+\t\t\t\t\t\t.put(\"sortfield\", \"lastchange\")\n+\t\t\t\t\t\t.put(\"sortorder\", \"desc\")\n+\t\t\t\t\t\t.put(isVersion2?\"selectHosts\":\"select_hosts\", \"extend\")\n+\t\t\t\t\t\t.put(isVersion2?\"selectGroups\":\"select_groups\", \"extend\")\n+\t\t\t\t\t\t.put(isVersion2?\"selectItems\":\"select_items\", \"extend\")\n+\t\t\t\t\t\t.put(\"lastChangeSince\", min)\n+\t\t\t\t\t\t.put(\"only_true\", \"1\")\n+\t\t\t\t\t\t.put(\"limit\", ZabbixConfig.TRIGGER_GET_LIMIT)\n+\t\t\t\t\t\t.put(\"expandDescription\", true)\n+\t\t\t);\n+\t\t\timportTriggers(triggers);\n+\t\t\ttriggers.close();\n+\n+\t\t\tsetCached(TriggerData.TABLE_NAME, null, ZabbixConfig.CACHE_LIFETIME_TRIGGERS);\n+\t\t\t_endTransaction();\n+\t\t}\n+\t}\n+\n+\tprivate void importTriggers(JsonArrayReader jsonArray) throws JsonParseException, IOException {\n+\t\tJsonObjectReader triggerReader;\n+\t\twhile ((triggerReader = jsonArray.next()) != null) {\n+\t\t\tTriggerData t = new TriggerData();\n+\t\t\twhile (triggerReader.nextValueToken()) {\n+\t\t\t\tString propName = triggerReader.getCurrentName();\n+\t\t\t\tif (propName.equals(TriggerData.COLUMN_TRIGGERID)) {\n+\t\t\t\t\tt.set(TriggerData.COLUMN_TRIGGERID, Long.parseLong(triggerReader.getText()));\n+\t\t\t\t} else if (propName.equals(TriggerData.COLUMN_COMMENTS)) {\n+\t\t\t\t\tt.set(TriggerData.COLUMN_COMMENTS, triggerReader.getText());\n+\t\t\t\t} else if (propName.equals(TriggerData.COLUMN_DESCRIPTION)) {\n+\t\t\t\t\tt.set(TriggerData.COLUMN_DESCRIPTION, triggerReader.getText());\n+\t\t\t\t} else if (propName.equals(TriggerData.COLUMN_EXPRESSION)) {\n+\t\t\t\t\tt.set(TriggerData.COLUMN_EXPRESSION, triggerReader.getText());\n+\t\t\t\t} else if (propName.equals(TriggerData.COLUMN_LASTCHANGE)) {\n+\t\t\t\t\tt.set(TriggerData.COLUMN_LASTCHANGE, Integer.parseInt(triggerReader.getText()));\n+\t\t\t\t} else if (propName.equals(TriggerData.COLUMN_PRIORITY)) {\n+\t\t\t\t\tt.set(TriggerData.COLUMN_PRIORITY, Integer.parseInt(triggerReader.getText()));\n+\t\t\t\t} else if (propName.equals(TriggerData.COLUMN_STATUS)) {\n+\t\t\t\t\tt.set(TriggerData.COLUMN_STATUS, Integer.parseInt(triggerReader.getText()));\n+\t\t\t\t} else if (propName.equals(TriggerData.COLUMN_VALUE)) {\n+\t\t\t\t\tt.set(TriggerData.COLUMN_VALUE, Integer.parseInt(triggerReader.getText()));\n+\t\t\t\t} else if (propName.equals(TriggerData.COLUMN_URL)) {\n+\t\t\t\t\tt.set(TriggerData.COLUMN_URL, triggerReader.getText());\n+\t\t\t\t} else if (propName.equals(\"hosts\")) {\n+\t\t\t\t\tObject[] hostsCache = importHosts(triggerReader.getJsonArray(), null);\n+\t\t\t\t\tt.set(TriggerData.COLUMN_HOSTS, hostsCache[0]);\n+\t\t\t\t\tt.set(TriggerData.COLUMN_HOSTID, hostsCache[1]);\n+\t\t\t\t} else if (propName.equals(\"groups\")) {\n+\t\t\t\t\timportHostGroups(triggerReader.getJsonArray());\n+\t\t\t\t} else if (propName.equals(\"items\")) {\n+\t\t\t\t\t// store the first item id\n+\t\t\t\t\tt.set(TriggerData.COLUMN_ITEMID, importItems(triggerReader.getJsonArray(), 1, true));\n+\t\t\t\t} else {\n+\t\t\t\t\ttriggerReader.nextProperty();\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\tt.insert(zabbixLocalDB, TriggerData.COLUMN_TRIGGERID);\n+\t\t\t_commitTransactionIfRecommended();\n+\t\t}\n+\t}\n+\n+\tpublic void importTriggersByItemId(String itemid) throws JSONException, IOException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n+\t\tif (!isCached(TriggerData.TABLE_NAME, \"itemid=\"+itemid)) {\n+\t\t\t_startTransaction();\n+\t\t\tzabbixLocalDB.delete(TriggerData.TABLE_NAME, TriggerData.COLUMN_ITEMID+\"=\"+itemid, null);\n+\t\t\tJsonArrayReader triggers = _queryStream(\n+\t\t\t\t\t\"trigger.get\"\n+\t\t\t\t\t, new JSONObject()\n+\t\t\t\t\t\t.put(\"output\", \"extend\")\n+\t\t\t\t\t\t.put(isVersion2?\"selectHosts\":\"select_hosts\", \"extend\")\n+\t\t\t\t\t\t.put(isVersion2?\"selectGroups\":\"select_groups\", \"extend\")\n+\t\t\t\t\t\t.put(isVersion2?\"selectItems\":\"select_items\", \"extend\")\n+\t\t\t\t\t\t.put(\"itemids\", new JSONArray().put(itemid))\n+\t\t\t\t\t\t.put(\"limit\", 1)\n+\t\t\t\t\t\t.put(\"sortfield\", \"lastchange\")\n+\t\t\t\t\t\t.put(\"sortorder\", \"DESC\")\n+\t\t\t);\n+\t\t\timportTriggers(triggers);\n+\t\t\tsetCached(TriggerData.TABLE_NAME, \"itemid=\"+itemid, ZabbixConfig.CACHE_LIFETIME_TRIGGERS);\n+\t\t\t_endTransaction();\n+\t\t}\n+\t}\n+\n+\tpublic boolean isCached(String kind, String filter) {\n+\t\tSQLiteQueryBuilder sqlBuilder = new SQLiteQueryBuilder();\n+\t\tsqlBuilder.setTables(CacheData.TABLE_NAME);\n+\t\tsqlBuilder.appendWhere(CacheData.COLUMN_KIND+\"='\"+kind+\"' AND \");\n+\t\tsqlBuilder.appendWhere(CacheData.COLUMN_FILTER+\n+\t\t\t\t(filter==null?\" IS NULL\":\"='\"+filter+\"'\")\n+\t\t);\n+\t\tsqlBuilder.appendWhere(\" AND \"+CacheData.COLUMN_EXPIRE_DATE+\">\"+new Date().getTime()/1000);\n+\t\tCursor cur = sqlBuilder.query(\n+\t\t\tzabbixLocalDB,\n+\t\t\tnull,\n+\t\t\tnull,\n+\t\t\tnull,\n+\t\t\tnull,\n+\t\t\tnull,\n+\t\t\tnull\n+\t\t);\n+\t\tLog.i(\"ZabbixContentProvider\", \"isCached \"+kind+\"//\"+filter+\"//\"+cur.moveToFirst());\n+\t\treturn cur.moveToFirst();\n+\t}\n+\n+\t/**\n+\t * public, for the unit test\n+\t */\n+\tpublic void setCached(String kind, String filter, int lifetime) {\n+\t\tCacheData cache = new CacheData();\n+\t\tcache.set(CacheData.COLUMN_EXPIRE_DATE, new Date().getTime()/1000 + lifetime);\n+\t\tcache.set(CacheData.COLUMN_KIND, kind);\n+\t\tif (filter != null) {\n+\t\t\tcache.set(CacheData.COLUMN_FILTER, filter);\n+\t\t}\n+\t\tcache.insert(zabbixLocalDB);\n+\t}\n+\n+\t/**\n+\t * updates the progressbar in the gui\n+\t * @param i 0..100\n+\t */\n+\tpublic void showProgress(int i) {\n+\t\t// if applicable, transform the progress\n+\t\tif (transformProgressStart != 0 && transformProgressEnd != 0) {\n+\t\t\ti = (int) (transformProgressStart + (transformProgressEnd-transformProgressStart)*(double)i/100);\n+\t\t}\n+\n+\t\tIntent intent = new Intent(ZabbixContentProvider.CONTENT_PROVIDER_INTENT_ACTION);\n+\t\tintent.putExtra(\"flag\", ZabbixContentProvider.INTENT_FLAG_SHOW_PROGRESS);\n+\t\tintent.putExtra(\"value\", i);\n+\t\tcontext.sendBroadcast(intent);\n+\t}\n+\n+\t/**\n+\t * transforms the progress\n+\t * @param start 0% => start%\n+\t * @param end 100% => end%\n+\t */\n+\tpublic void transformProgress(int start, int end) {\n+\t\ttransformProgressStart = start;\n+\t\ttransformProgressEnd = end;\n+\t}\n+}"],
      "c_date_tdt": "Sep 12, 2012 5:48:12 AM",
      "c_imports_t": ["android.database.sqlite.SQLiteQueryBuilder org.apache.http.conn.scheme.SchemeRegistry java.util.HashSet org.apache.http.params.BasicHttpParams android.content.Context org.apache.http.params.HttpParams org.apache.http.conn.scheme.PlainSocketFactory java.util.ArrayList com.inovex.zabbixmobile.model.ItemData com.inovex.zabbixmobile.model.HostData com.inovex.zabbixmobile.model.GraphData com.inovex.zabbixmobile.model.EventData org.apache.http.auth.UsernamePasswordCredentials org.apache.http.params.HttpConnectionParams android.content.SharedPreferences java.security.KeyManagementException org.apache.http.conn.ClientConnectionManager org.codehaus.jackson.JsonFactory org.apache.http.entity.StringEntity java.util.Set org.apache.http.params.HttpProtocolParams com.inovex.zabbixmobile.model.ApplicationItemRelationData com.inovex.zabbixmobile.model.TriggerData org.codehaus.jackson.JsonToken android.database.Cursor java.net.Socket android.content.Intent org.apache.http.protocol.HTTP org.json.JSONException java.net.UnknownHostException com.inovex.zabbixmobile.model.HistoryDetailData org.apache.http.HttpResponse java.security.KeyStore com.inovex.zabbixmobile.ZabbixContentProvider android.preference.PreferenceManager android.util.Log org.json.JSONObject java.security.NoSuchAlgorithmException org.apache.http.client.params.HttpClientParams java.io.IOException org.apache.http.conn.scheme.Scheme org.apache.http.client.methods.HttpPost javax.net.ssl.SSLContext org.apache.http.auth.AuthScope org.apache.http.conn.ssl.SSLSocketFactory java.security.KeyStoreException android.content.ContentValues java.io.InputStreamReader java.util.Date java.security.UnrecoverableKeyException android.graphics.Color org.apache.http.client.ClientProtocolException com.inovex.zabbixmobile.model.GraphItemData org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager org.json.JSONArray com.inovex.zabbixmobile.model.CacheData javax.net.ssl.SSLPeerUnverifiedException com.inovex.zabbixmobile.model.HostGroupData org.codehaus.jackson.JsonParseException java.security.cert.X509Certificate org.apache.http.HttpVersion android.database.sqlite.SQLiteDatabase java.util.List java.security.cert.CertificateException java.io.BufferedReader com.inovex.zabbixmobile.model.ApplicationData com.inovex.zabbixmobile.model.ScreenItemData javax.net.ssl.TrustManager com.inovex.zabbixmobile.model.ScreenData com.inovex.zabbixmobile.R org.codehaus.jackson.JsonParser org.apache.http.impl.client.DefaultHttpClient javax.net.ssl.X509TrustManager"],
      "c_contents_t": ["package com.inovex.zabbixmobile.api;\n\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.net.Socket;\nimport java.net.UnknownHostException;\nimport java.security.KeyManagementException;\nimport java.security.KeyStore;\nimport java.security.KeyStoreException;\nimport java.security.NoSuchAlgorithmException;\nimport java.security.UnrecoverableKeyException;\nimport java.security.cert.CertificateException;\nimport java.security.cert.X509Certificate;\nimport java.util.ArrayList;\nimport java.util.Date;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Set;\n\nimport javax.net.ssl.SSLContext;\nimport javax.net.ssl.SSLPeerUnverifiedException;\nimport javax.net.ssl.TrustManager;\nimport javax.net.ssl.X509TrustManager;\n\nimport org.apache.http.HttpResponse;\nimport org.apache.http.HttpVersion;\nimport org.apache.http.auth.AuthScope;\nimport org.apache.http.auth.UsernamePasswordCredentials;\nimport org.apache.http.client.ClientProtocolException;\nimport org.apache.http.client.methods.HttpPost;\nimport org.apache.http.client.params.HttpClientParams;\nimport org.apache.http.conn.ClientConnectionManager;\nimport org.apache.http.conn.scheme.PlainSocketFactory;\nimport org.apache.http.conn.scheme.Scheme;\nimport org.apache.http.conn.scheme.SchemeRegistry;\nimport org.apache.http.conn.ssl.SSLSocketFactory;\nimport org.apache.http.entity.StringEntity;\nimport org.apache.http.impl.client.DefaultHttpClient;\nimport org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager;\nimport org.apache.http.params.BasicHttpParams;\nimport org.apache.http.params.HttpConnectionParams;\nimport org.apache.http.params.HttpParams;\nimport org.apache.http.params.HttpProtocolParams;\nimport org.apache.http.protocol.HTTP;\nimport org.codehaus.jackson.JsonFactory;\nimport org.codehaus.jackson.JsonParseException;\nimport org.codehaus.jackson.JsonParser;\nimport org.codehaus.jackson.JsonToken;\nimport org.json.JSONArray;\nimport org.json.JSONException;\nimport org.json.JSONObject;\n\nimport android.content.ContentValues;\nimport android.content.Context;\nimport android.content.Intent;\nimport android.content.SharedPreferences;\nimport android.database.Cursor;\nimport android.database.sqlite.SQLiteDatabase;\nimport android.database.sqlite.SQLiteQueryBuilder;\nimport android.graphics.Color;\nimport android.preference.PreferenceManager;\nimport android.util.Log;\n\nimport com.inovex.zabbixmobile.R;\nimport com.inovex.zabbixmobile.ZabbixContentProvider;\nimport com.inovex.zabbixmobile.model.ApplicationData;\nimport com.inovex.zabbixmobile.model.ApplicationItemRelationData;\nimport com.inovex.zabbixmobile.model.CacheData;\nimport com.inovex.zabbixmobile.model.EventData;\nimport com.inovex.zabbixmobile.model.GraphData;\nimport com.inovex.zabbixmobile.model.GraphItemData;\nimport com.inovex.zabbixmobile.model.HistoryDetailData;\nimport com.inovex.zabbixmobile.model.HostData;\nimport com.inovex.zabbixmobile.model.HostGroupData;\nimport com.inovex.zabbixmobile.model.ItemData;\nimport com.inovex.zabbixmobile.model.ScreenData;\nimport com.inovex.zabbixmobile.model.ScreenItemData;\nimport com.inovex.zabbixmobile.model.TriggerData;\n\n/**\n * interface to connect to the zabbix server\n */\npublic class ZabbixService {\n\tclass CustomSSLSocketFactory extends SSLSocketFactory {\n\t\tSSLContext sslContext = SSLContext.getInstance(\"TLS\");\n\n\t\tpublic CustomSSLSocketFactory(KeyStore truststore) throws NoSuchAlgorithmException, KeyManagementException, KeyStoreException, UnrecoverableKeyException {\n\t\t\tsuper(truststore);\n\t\t\tTrustManager tm = new X509TrustManager() {\n\t\t\t\t@Override\n\t\t\t\tpublic void checkClientTrusted(X509Certificate[] chain,\n\t\t\t\t\t\tString authType) throws CertificateException {\n\t\t\t\t}\n\t\t\t\t@Override\n\t\t\t\tpublic void checkServerTrusted(X509Certificate[] chain,\n\t\t\t\t\t\tString authType) throws CertificateException {\n\t\t\t\t}\n\t\t\t\t@Override\n\t\t\t\tpublic X509Certificate[] getAcceptedIssuers() {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t};\n\t\t\tsslContext.init(null, new TrustManager[] { tm }, null);\n\t\t}\n\n\t\t@Override\n\t\tpublic Socket createSocket() throws IOException {\n\t\t\treturn sslContext.getSocketFactory().createSocket();\n\t\t}\n\n\t\t@Override\n\t\tpublic Socket createSocket(Socket socket, String host, int port, boolean autoClose) throws IOException, UnknownHostException {\n\t\t\treturn sslContext.getSocketFactory().createSocket(socket, host, port, autoClose);\n\t\t}\n\t}\n\n\t/**\n\t * http auth is needed\n\t */\n\tpublic class HttpAuthorizationRequiredException extends Exception {\n\t\tprivate static final long serialVersionUID = 6632422081858878147L;\n\t}\n\n\t/**\n\t * zabbix error: no api access\n\t */\n\tpublic class NoAPIAccessException extends Exception {\n\t\tprivate static final long serialVersionUID = 6381395987443456382L;\n\t}\n\n\t/**\n\t * probably too old zabbix <= 1.8.2\n\t */\n\tpublic class PreconditionFailedException extends Exception {\n\t\tprivate static final long serialVersionUID = -2529885710860745023L;\n\t}\n\n\t/**\n\t * global constants\n\t */\n\tpublic class ZabbixConfig {\n\t\tpublic static final int APPLICATION_GET_LIMIT = 1000;\n\t\tpublic static final int EVENTS_GET_LIMIT = 60;\n\t\tpublic static final int HISTORY_GET_TIME_FROM_SHIFT = 8*60*60; // -8h\n\t\tpublic static final int HISTORY_GET_LIMIT = 8000;\n\t\tpublic static final int HOSTGROUP_GET_LIMIT = 200;\n\t\tpublic static final int HOST_GET_LIMIT = 300;\n\t\tpublic static final int ITEM_GET_LIMIT = 200;\n\t\tpublic static final int TRIGGER_GET_LIMIT = 100;\n\t\tpublic static final int EVENT_GET_TIME_FROM_SHIFT = 7*24*60*60; // -7 days\n\t\tpublic static final int CACHE_LIFETIME_APPLICATIONS = 2*24*60*60; // 2 days\n\t\tpublic static final int CACHE_LIFETIME_EVENTS = 120;\n\t\tpublic static final int CACHE_LIFETIME_HISTORY_DETAILS = 4*60;\n\t\tpublic static final int CACHE_LIFETIME_HOST_GROUPS = 7*24*60*60;\n\t\tpublic static final int CACHE_LIFETIME_HOSTS = 2*24*60*60;\n\t\tpublic static final int CACHE_LIFETIME_SCREENS = 2*24*60*60;\n\t\tpublic static final int CACHE_LIFETIME_ITEMS = 4*60;\n\t\tpublic static final int CACHE_LIFETIME_TRIGGERS = 2*60;\n\t\tpublic static final long STATUS_SHOW_TRIGGER_TIME = 14*24*60*60;\n\t\tpublic static final int HTTP_CONNECTION_TIMEOUT = 30000;\n\t}\n\n\tprivate final DefaultHttpClient httpClient;\n\tprivate final SQLiteDatabase zabbixLocalDB;\n\tprivate String url;\n\tprivate String token;\n\tprivate final Context context;\n\tprivate int _transactionStack;\n\tprivate JsonParser lastStream;\n\tprivate int transformProgressStart;\n\tprivate int transformProgressEnd;\n\tprivate boolean _notAuthorizedRetry;\n\tprivate boolean isVersion2 = true;\n\n\t/**\n\t * init\n\t * @param context android context\n\t * @param zabbixLocalDB sqlite\n\t */\n\tpublic ZabbixService(Context context, SQLiteDatabase zabbixLocalDB) {\n\t\tClientConnectionManager ccm = null;\n\t\tHttpParams params = null;\n\n\t\ttry {\n\t\t\tSharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(context);\n\t\t\tif (prefs.getBoolean(\"zabbix_trust_all_ssl_ca\", false)) {\n\t\t\t\tKeyStore trustStore = KeyStore.getInstance(KeyStore.getDefaultType());\n\t\t\t\ttrustStore.load(null, null);\n\n\t\t\t\tSSLSocketFactory sf = new CustomSSLSocketFactory(trustStore);\n\t\t\t\tsf.setHostnameVerifier(SSLSocketFactory.ALLOW_ALL_HOSTNAME_VERIFIER);\n\n\t\t\t\tparams = new BasicHttpParams();\n\t\t\t\tHttpProtocolParams.setVersion(params, HttpVersion.HTTP_1_1);\n\t\t\t\tHttpProtocolParams.setContentCharset(params, HTTP.UTF_8);\n\n\t\t\t\tSchemeRegistry registry = new SchemeRegistry();\n\t\t\t\tregistry.register(new Scheme(\"http\", PlainSocketFactory.getSocketFactory(), 80));\n\t\t\t\tregistry.register(new Scheme(\"https\", sf, 443));\n\n\t\t\t\tccm = new ThreadSafeClientConnManager(params, registry);\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\t// ignore for unit test\n\t\t}\n\n\t\tif (ccm == null || params == null) {\n\t\t\thttpClient = new DefaultHttpClient();\n\t\t} else {\n\t\t\thttpClient = new DefaultHttpClient(ccm, params);\n\t\t}\n\n\t\t// if applicable http auth\n\t\ttry {\n\t\t\tSharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(context);\n\t\t\tif (prefs.getBoolean(\"http_auth_enabled\", false)) {\n\t\t\t\tString user = prefs.getString(\"http_auth_username\", \"\");\n\t\t\t\tString pwd = prefs.getString(\"http_auth_password\", \"\");\n\t\t\t\thttpClient.getCredentialsProvider().setCredentials(AuthScope.ANY, new UsernamePasswordCredentials(user, pwd));\n\t\t\t}\n\t\t} catch (java.lang.UnsupportedOperationException e1) {\n\t\t\t// for unit test\n\t\t}\n\n\t\tparams = httpClient.getParams();\n\t\tHttpClientParams.setRedirecting(params, true); // redirecting\n\t\tHttpConnectionParams.setConnectionTimeout(params, ZabbixConfig.HTTP_CONNECTION_TIMEOUT);\n\t\tthis.context = context;\n\t\tthis.zabbixLocalDB = zabbixLocalDB;\n\t}\n\n\t/**\n\t * counts the sql inserts/updates and do a transaction commit to save the memory\n\t */\n\tprivate void _commitTransactionIfRecommended() {\n\t\tif (_transactionStack++ > 50) {\n\t\t\t_endTransaction();\n\t\t\t_startTransaction();\n\t\t}\n\t}\n\n\t/**\n\t * commit sql transaction\n\t */\n\tpublic void _endTransaction() {\n\t\tif (zabbixLocalDB.inTransaction()) {\n\t\t\tzabbixLocalDB.setTransactionSuccessful();\n\t\t\tzabbixLocalDB.endTransaction();\n\t\t}\n\t}\n\n\t/**\n\t * zabbix api call. data will be parsed as json object on-the-fly.\n\t * Caution: use this only for api calls with a small return data.\n\t * @param method\n\t * @param params\n\t * @return\n\t * @throws ClientProtocolException\n\t * @throws IOException\n\t * @throws JSONException\n\t * @throws HttpAuthorizationRequiredException\n\t * @throws NoAPIAccessException\n\t */\n\tprivate JSONObject _queryBuffer(String method, JSONObject params) throws ClientProtocolException, IOException, JSONException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\tHttpPost post = new HttpPost(url);\n\t\tpost.addHeader(\"Content-Type\", \"application/json; charset=utf-8\");\n\n\t\tString json =\n\t\t\t\"{\" +\n\t\t\t\"\t\\\"jsonrpc\\\" : \\\"2.0\\\",\" +\n\t\t\t\"\t\\\"method\\\" : \\\"\"+method+\"\\\",\" +\n\t\t\t\"\t\\\"params\\\" : \"+params.toString()+\",\" +\n\t\t\t\"\t\\\"auth\\\" : \"+(token==null?\"null\":'\"'+token+'\"')+\",\" +\n\t\t\t\"\t\\\"id\\\" : 0\" +\n\t\t\t\"}\";\n\n\t\tpost.setEntity(new StringEntity(json, \"UTF-8\"));\n\t\ttry {\n\t\t\tHttpResponse resp = httpClient.execute(post);\n\t\t\tif (resp.getStatusLine().getStatusCode() == 401) {\n\t\t\t\t// http auth failed\n\t\t\t\tthrow new HttpAuthorizationRequiredException();\n\t\t\t} else if (resp.getStatusLine().getStatusCode() == 412) {\n\t\t\t\t\t// Precondition failed / Looks like Zabbix 1.8.2\n\t\t\t\tthrow new PreconditionFailedException();\n\t\t\t} else if (resp.getStatusLine().getStatusCode() == 404) {\n\t\t\t\t// file not found\n\t\t\t\tthrow new IOException(resp.getStatusLine().getStatusCode()+\" \"+resp.getStatusLine().getReasonPhrase());\n\t\t\t} else {\n\t\t\t\tLog.d(\"ZabbixService\", resp.getStatusLine().getStatusCode()+\" \"+resp.getStatusLine().getReasonPhrase());\n\t\t\t}\n\t\t\tStringBuilder total = new StringBuilder();\n\t\t\tBufferedReader rd = new BufferedReader(new InputStreamReader(resp.getEntity().getContent()));\n\t\t\tint chr;\n\t\t\twhile ((chr = rd.read()) != -1) {\n\t\t\t\ttotal.append((char) chr);\n\t\t\t}\n\t\t\tJSONObject result = new JSONObject(total.toString());\n\t\t\ttry {\n\t\t\t\tif (result.getJSONObject(\"error\") != null) {\n\t\t\t\t\tif (result.getJSONObject(\"error\").getString(\"data\").equals(\"No API access\")) {\n\t\t\t\t\t\tthrow new NoAPIAccessException();\n\t\t\t\t\t} else throw new RuntimeException(result.getJSONObject(\"error\").toString());\n\t\t\t\t}\n\t\t\t\tif (result.getString(\"data\").equals(\"Not authorized\")) {\n\t\t\t\t\t// first do a new auth and then try the same api call again\n\t\t\t\t\tif (authenticate() && !_notAuthorizedRetry) {\n\t\t\t\t\t\t_notAuthorizedRetry = true;\n\t\t\t\t\t\tJSONObject r = _queryBuffer(method, params);\n\t\t\t\t\t\t_notAuthorizedRetry = false;\n\t\t\t\t\t\treturn r;\n\t\t\t\t\t} throw new IllegalStateException(result.toString());\n\t\t\t\t}\n\t\t\t} catch (JSONException e) {\n\t\t\t\t// ignore\n\t\t\t}\n\t\t\treturn result;\n\t\t} catch (SSLPeerUnverifiedException e) {\n\t\t\t// SSL not trusted\n\t\t\tIntent intent = new Intent(ZabbixContentProvider.CONTENT_PROVIDER_INTENT_ACTION);\n\t\t\tintent.putExtra(\"flag\", ZabbixContentProvider.INTENT_FLAG_SSL_NOT_TRUSTED);\n\t\t\tcontext.sendBroadcast(intent);\n\t\t\tthrow e;\n\t\t} catch (IOException e) {\n\t\t\t// internet problem\n\t\t\t// send intent to GUI\n\t\t\tIntent intent = new Intent(ZabbixContentProvider.CONTENT_PROVIDER_INTENT_ACTION);\n\t\t\tintent.putExtra(\"flag\", ZabbixContentProvider.INTENT_FLAG_CONNECTION_FAILED);\n\t\t\tintent.putExtra(\"value\", e.getMessage());\n\t\t\tcontext.sendBroadcast(intent);\n\t\t\tthrow e;\n\t\t}\n\t}\n\n\t/**\n\t * zabbix api call as stream.\n\t * @param method\n\t * @param params\n\t * @return stream im json array wrapper\n\t * @throws JSONException\n\t * @throws IOException\n\t * @throws HttpAuthorizationRequiredException\n\t * @throws NoAPIAccessException\n\t */\n\tprivate JsonArrayOrObjectReader _queryStream(String method, JSONObject params) throws JSONException, IOException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\t// http request\n\t\tHttpPost post = new HttpPost(url);\n\t\tpost.addHeader(\"Content-Type\", \"application/json; charset=utf-8\");\n\n\t\tJSONObject json = new JSONObject()\n\t\t\t.put(\"jsonrpc\", \"2.0\")\n\t\t\t.put(\"method\", method)\n\t\t\t.put(\"params\", params)\n\t\t\t.put(\"auth\", token)\n\t\t\t.put(\"id\", 0);\n\n\t\tLog.d(\"ZabbixService\", \"_queryStream: \"+url);\n\t\tLog.d(\"ZabbixService\", \"_queryStream: \"+json.toString());\n\n\t\tpost.setEntity(new StringEntity(json.toString(), \"UTF-8\"));\n\t\ttry {\n\t\t\tHttpResponse resp = httpClient.execute(post);\n\t\t\tif (resp.getStatusLine().getStatusCode() == 401) {\n\t\t\t\t// http auth failed\n\t\t\t\tthrow new HttpAuthorizationRequiredException();\n\t\t\t}\n\n\t\t\tJsonFactory jsonFac = new JsonFactory();\n\t\t\tJsonParser jp = jsonFac.createJsonParser(resp.getEntity().getContent());\n\t\t\t// store the last stream to close it if an exception will be thrown\n\t\t\tlastStream = jp;\n\t\t\tif (jp.nextToken() != JsonToken.START_OBJECT) {\n\t\t\t\tthrow new IOException(\"Expected data to start with an Object\");\n\t\t\t}\n\t\t\tdo {\n\t\t\t\tjp.nextToken();\n\t\t\t\tif (jp.getCurrentName().equals(\"error\")) {\n\t\t\t\t\tjp.nextToken();\n\t\t\t\t\tString errortxt = \"\";\n\t\t\t\t\twhile (jp.nextToken() != JsonToken.END_OBJECT) {\n\t\t\t\t\t\terrortxt += jp.getText();\n\t\t\t\t\t}\n\t\t\t\t\tif (errortxt.contains(\"No API access\")) {\n\t\t\t\t\t\tthrow new NoAPIAccessException();\n\t\t\t\t\t} else if (errortxt.contains(\"Not authorized\")) {\n\t\t\t\t\t\t// first do a new auth and then try the same api call again\n\t\t\t\t\t\tif (authenticate() && !_notAuthorizedRetry) {\n\t\t\t\t\t\t\t_notAuthorizedRetry = true;\n\t\t\t\t\t\t\tJsonArrayOrObjectReader r = _queryStream(method, params);\n\t\t\t\t\t\t\t_notAuthorizedRetry = false;\n\t\t\t\t\t\t\treturn r;\n\t\t\t\t\t\t} else throw new IllegalStateException(errortxt);\n\t\t\t\t\t} else throw new IllegalStateException(\"JSON API Error: \"+errortxt);\n\t\t\t\t}\n\t\t\t} while (!jp.getCurrentName().equals(\"result\"));\n\n\t\t\t// result array found\n\t\t\tif (jp.nextToken() != JsonToken.START_ARRAY && jp.getCurrentToken() != JsonToken.START_OBJECT) { // go inside the array\n\t\t\t\ttry {\n\t\t\t\t\tLog.d(\"ZabbixService\", \"current token: \"+jp.getCurrentToken());\n\t\t\t\t\tLog.d(\"ZabbixService\", \"current name: \"+jp.getCurrentName());\n\t\t\t\t\tLog.d(\"ZabbixService\", \"get text: \"+jp.getText());\n\t\t\t\t\tLog.d(\"ZabbixService\", \"next value: \"+jp.nextValue());\n\t\t\t\t\tLog.d(\"ZabbixService\", \"next token: \"+jp.nextToken());\n\t\t\t\t\tLog.d(\"ZabbixService\", \"current token: \"+jp.getCurrentToken());\n\t\t\t\t\tLog.d(\"ZabbixService\", \"current name: \"+jp.getCurrentName());\n\t\t\t\t\tLog.d(\"ZabbixService\", \"get text: \"+jp.getText());\n\t\t\t\t} catch (Exception e) {}\n\t\t\t\tthrow new IOException(\"Expected data to start with an Array\");\n\t\t\t}\n\t\t\treturn new JsonArrayOrObjectReader(jp);\n\t\t} catch (SSLPeerUnverifiedException e) {\n\t\t\tthrow e;\n\t\t} catch (IOException e) {\n\t\t\t// internet problem\n\t\t\t// send intent to GUI\n\t\t\tIntent intent = new Intent(ZabbixContentProvider.CONTENT_PROVIDER_INTENT_ACTION);\n\t\t\tintent.putExtra(\"flag\", ZabbixContentProvider.INTENT_FLAG_CONNECTION_FAILED);\n\t\t\tcontext.sendBroadcast(intent);\n\t\t\tthrow e;\n\t\t}\n\t}\n\n\t/**\n\t * begin sql transaction\n\t */\n\tprivate void _startTransaction() {\n\t\tzabbixLocalDB.beginTransaction();\n\t\t_transactionStack = 0;\n\t}\n\n\t/**\n\t * acknowledge zabbix event. Sets ack-flag with comment.\n\t * Caution: This is supported only for Zabbix version >= 1.8.4\n\t * @param eventid\n\t * @param comment\n\t * @return true, success.\n\t * @throws ClientProtocolException\n\t * @throws IOException\n\t * @throws JSONException\n\t * @throws HttpAuthorizationRequiredException\n\t * @throws NoAPIAccessException\n\t */\n\tpublic boolean acknowledgeEvent(String eventid, String comment) throws ClientProtocolException, IOException, JSONException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\t// for GUI unit test, just return true\n\t\tif (comment != null && comment.equals(\"__UNIT_TEST__RETURN_TRUE__\")) return true;\n\n\t\tJSONObject result = _queryBuffer(\n\t\t\t\t\"event.acknowledge\"\n\t\t\t\t, new JSONObject()\n\t\t\t\t\t.put(\"eventids\", new JSONArray().put(eventid))\n\t\t);\n\t\t// it can be an (empty) array\n\t\ttry {\n\t\t\treturn result.getJSONObject(\"result\").getJSONArray(\"eventids\").length() == 1;\n\t\t} catch (JSONException e) {\n\t\t\t// or a json object\n\t\t\treturn result.getJSONObject(\"result\").getJSONObject(\"eventids\").length() == 1;\n\t\t}\n\t}\n\n\t/**\n\t * zabbix auth. user and pwd from app preferences\n\t * @return true success\n\t * @throws ClientProtocolException\n\t * @throws IOException\n\t * @throws JSONException\n\t * @throws HttpAuthorizationRequiredException\n\t * @throws NoAPIAccessException\n\t */\n\tpublic boolean authenticate() throws ClientProtocolException, IOException, JSONException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\tSharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(context);\n\t\tString url = prefs.getString(\"zabbix_url\", \"\").trim();\n\t\tString user = prefs.getString(\"zabbix_username\", \"\").trim();\n\t\tString password = prefs.getString(\"zabbix_password\", \"\");\n\n\t\tthis.url = url+(url.endsWith(\"/\")?\"\":'/')+\"api_jsonrpc.php\";\n\t\tLog.d(\"ZabbixContentProvider\", url+\"//\"+user);\n\n\t\ttry {\n\t\t\tJSONObject result = _queryBuffer(\n\t\t\t\t\t\"user.authenticate\"\n\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t\t.put(\"user\", user)\n\t\t\t\t\t\t.put(\"password\", password)\n\t\t\t);\n\t\t\ttoken = result.getString(\"result\");\n\t\t} catch (JSONException e) {\n\t\t\t// there's no result\n\t\t\te.printStackTrace();\n\t\t} catch (RuntimeException e) {\n\t\t\t// wrong password. token remains null\n\t\t\te.printStackTrace();\n\t\t}\n\t\tif (token != null) {\n\t\t\t// get API version\n\t\t\tJSONObject result = _queryBuffer(\n\t\t\t\t\t\"apiinfo.version\"\n\t\t\t\t\t, new JSONObject()\n\t\t\t);\n\t\t\tisVersion2 = result.getString(\"result\").equals(\"1.4\");\n\t\t\tLog.i(\"ZabbixService\", \"Zabbix Server Version: isVersion2=\"+isVersion2);\n\t\t}\n\t\treturn token != null;\n\t}\n\n\t/**\n\t * close the last http stream\n\t */\n\tpublic void closeLastStream() {\n\t\tif (lastStream != null && !lastStream.isClosed()) {\n\t\t\ttry {\n\t\t\t\tlastStream.close();\n\t\t\t} catch (IOException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate void importApplications(long hostid, long itemid, JsonArrayOrObjectReader jsonArray) throws JsonParseException, NumberFormatException, IOException {\n\t\tint num = 0;\n\t\tJsonObjectReader application;\n\t\twhile ((application = jsonArray.next()) != null) {\n\t\t\tApplicationData app = new ApplicationData();\n\t\t\twhile (application.nextValueToken()) {\n\t\t\t\tString propName = application.getCurrentName();\n\t\t\t\tif (propName.equals(ApplicationData.COLUMN_APPLICATIONID)) {\n\t\t\t\t\tapp.set(ApplicationData.COLUMN_APPLICATIONID, Long.parseLong(application.getText()));\n\t\t\t\t} else if (propName.equals(ApplicationData.COLUMN_NAME)) {\n\t\t\t\t\tapp.set(ApplicationData.COLUMN_NAME, application.getText());\n\t\t\t\t} else if (propName.equals(ApplicationData.COLUMN_HOSTID)) {\n\t\t\t\t\tapp.set(ApplicationData.COLUMN_HOSTID, Long.parseLong(application.getText()));\n\t\t\t\t} else {\n\t\t\t\t\tapplication.nextProperty();\n\t\t\t\t}\n\t\t\t}\n\t\t\t// create applications that does not exist\n\t\t\tapp.insert(zabbixLocalDB, ApplicationData.COLUMN_APPLICATIONID);\n\t\t\t_commitTransactionIfRecommended();\n\n\t\t\t// create ApplicationItemRelation\n\t\t\tlong appid = (Long) app.get(ApplicationData.COLUMN_APPLICATIONID);\n\t\t\tApplicationItemRelationData rel = new ApplicationItemRelationData();\n\t\t\trel.set(ApplicationItemRelationData.COLUMN_APPLICATIONID, appid);\n\t\t\trel.set(ApplicationItemRelationData.COLUMN_ITEMID, itemid);\n\t\t\trel.set(ApplicationItemRelationData.COLUMN_HOSTID, hostid);\n\t\t\trel.insert(zabbixLocalDB);\n\t\t\t_commitTransactionIfRecommended();\n\n\t\t\tnum++;\n\t\t}\n\t\tif (num == 0) {\n\t\t\t// if there's no application, the ID #0 must be added (for other)\n\t\t\tApplicationItemRelationData rel = new ApplicationItemRelationData();\n\t\t\trel.set(ApplicationItemRelationData.COLUMN_APPLICATIONID, 0);\n\t\t\trel.set(ApplicationItemRelationData.COLUMN_ITEMID, itemid);\n\t\t\trel.set(ApplicationItemRelationData.COLUMN_HOSTID, hostid);\n\t\t\trel.insert(zabbixLocalDB);\n\n\t\t\t// if #0 \"other\" does not exist yet, it has to be created\n\t\t\tApplicationData app = new ApplicationData();\n\t\t\tapp.set(ApplicationData.COLUMN_APPLICATIONID, 0);\n\t\t\tapp.set(ApplicationData.COLUMN_NAME, \"- \"+context.getResources().getString(R.string.other)+\" -\");\n\t\t\tapp.insert(zabbixLocalDB, ApplicationData.COLUMN_APPLICATIONID);\n\t\t}\n\t}\n\n\t/**\n\t * import the newest event of a trigger\n\t * @param triggerid\n\t * @throws JSONException\n\t * @throws IOException\n\t * @throws HttpAuthorizationRequiredException\n\t * @throws NoAPIAccessException\n\t */\n\tpublic void importEventByTriggerId(String triggerid) throws JSONException, IOException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\tif (!isCached(EventData.TABLE_NAME, \"triggerid=\"+triggerid)) {\n\t\t\t_startTransaction();\n\t\t\tzabbixLocalDB.delete(EventData.TABLE_NAME, EventData.COLUMN_OBJECTID+\"=\"+triggerid, null);\n\n\t\t\tJSONObject params = new JSONObject()\n\t\t\t\t.put(\"output\", \"extend\")\n\t\t\t\t.put(isVersion2?\"selectHosts\":\"select_hosts\", \"extend\")\n\t\t\t\t.put(\"triggerids\", new JSONArray().put(triggerid))\n\t\t\t\t.put(\"limit\", 1)\n\t\t\t\t.put(\"source\", 0);\n\t\t\tif (!isVersion2) {\n\t\t\t\tparams.put(\"sortfield\", \"clock\")\n\t\t\t\t\t.put(\"sortorder\", \"DESC\");\n\t\t\t}\n\n\t\t\tJsonArrayOrObjectReader events = _queryStream(\n\t\t\t\t\t\"event.get\"\n\t\t\t\t\t, params\n\t\t\t);\n\t\t\timportEvents(events, null);\n\t\t\tevents.close();\n\n\t\t\tsetCached(EventData.TABLE_NAME, \"triggerid=\"+triggerid, ZabbixConfig.CACHE_LIFETIME_EVENTS);\n\t\t\t_endTransaction();\n\t\t}\n\t}\n\n\t/**\n\t * import the newest events\n\t * @throws ClientProtocolException\n\t * @throws IOException\n\t * @throws JSONException\n\t * @throws HttpAuthorizationRequiredException\n\t * @throws NoAPIAccessException\n\t */\n\tpublic void importEvents() throws ClientProtocolException, IOException, JSONException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\tif (!isCached(EventData.TABLE_NAME, null)) {\n\t\t\t_startTransaction();\n\t\t\tzabbixLocalDB.delete(EventData.TABLE_NAME, null, null);\n\t\t\tzabbixLocalDB.delete(TriggerData.TABLE_NAME, null, null);\n\t\t\tzabbixLocalDB.delete(CacheData.TABLE_NAME, CacheData.COLUMN_KIND+\"='\"+EventData.TABLE_NAME+\"'\", null);\n\t\t\tzabbixLocalDB.delete(CacheData.TABLE_NAME, CacheData.COLUMN_KIND+\"='\"+TriggerData.TABLE_NAME+\"'\", null);\n\n\t\t\tint numEvents = ZabbixConfig.EVENTS_GET_LIMIT;\n\n\t\t\tJSONObject params = new JSONObject()\n\t\t\t\t.put(\"output\", \"extend\")\n\t\t\t\t.put(\"limit\", ZabbixConfig.EVENTS_GET_LIMIT)\n\t\t\t\t.put(isVersion2?\"selectHosts\":\"select_hosts\", \"extend\")\n\t\t\t\t.put(isVersion2?\"selectTriggers\":\"select_triggers\", \"extend\")\n\t\t\t\t.put(\"source\", 0)\n\t\t\t\t.put(\"time_from\", (new Date().getTime()/1000) - ZabbixConfig.EVENT_GET_TIME_FROM_SHIFT);\n\t\t\tif (!isVersion2) {\n\t\t\t\t// in Zabbix version <2.0, this is not default\n\t\t\t\tparams.put(\"sortfield\", \"clock\")\n\t\t\t\t\t.put(\"sortorder\", \"DESC\");\n\t\t\t}\n\t\t\tJsonArrayOrObjectReader events = _queryStream(\n\t\t\t\t\t\"event.get\"\n\t\t\t\t\t, params\n\t\t\t);\n\t\t\timportEvents(events, numEvents);\n\t\t\tevents.close();\n\n\t\t\tsetCached(EventData.TABLE_NAME, null, ZabbixConfig.CACHE_LIFETIME_EVENTS);\n\t\t\t_endTransaction();\n\t\t}\n\t}\n\n\t/**\n\t * @param events stream\n\t * @param numEvents if null, no progressbar-update AND only isert, if it does not exist. If !null, progressbar-update AND always insert without checking\n\t * @throws JsonParseException\n\t * @throws IOException\n\t */\n\tprivate void importEvents(JsonArrayOrObjectReader events, Integer numEvents) throws JsonParseException, IOException {\n\t\tint i=0;\n\t\tJsonObjectReader eventReader;\n\t\twhile ((eventReader = events.next()) != null) {\n\t\t\tEventData e = new EventData();\n\t\t\twhile (eventReader.nextValueToken()) {\n\t\t\t\tString propName = eventReader.getCurrentName();\n\t\t\t\tif (propName.equals(\"hosts\")) {\n\t\t\t\t\t// import hosts\n\t\t\t\t\tString hostnames = (String) importHosts(eventReader.getJsonArray(), null)[0];\n\t\t\t\t\t// store hosts namen\n\t\t\t\t\te.set(EventData.COLUMN_HOSTS, hostnames);\n\t\t\t\t} else if (propName.equals(\"triggers\")) {\n\t\t\t\t\t// import triggers\n\t\t\t\t\timportTriggers(eventReader.getJsonArray());\n\t\t\t\t} else if (propName.equals(EventData.COLUMN_EVENTID)) {\n\t\t\t\t\te.set(EventData.COLUMN_EVENTID, Long.parseLong(eventReader.getText()));\n\t\t\t\t} else if (propName.equals(EventData.COLUMN_CLOCK)) {\n\t\t\t\t\te.set(EventData.COLUMN_CLOCK, Integer.parseInt(eventReader.getText()));\n\t\t\t\t} else if (propName.equals(EventData.COLUMN_OBJECTID)) {\n\t\t\t\t\te.set(EventData.COLUMN_OBJECTID, Long.parseLong(eventReader.getText()));\n\t\t\t\t} else if (propName.equals(EventData.COLUMN_ACK)) {\n\t\t\t\t\te.set(EventData.COLUMN_ACK, Integer.parseInt(eventReader.getText()) == 1);\n\t\t\t\t} else if (propName.equals(EventData.COLUMN_VALUE)) {\n\t\t\t\t\te.set(EventData.COLUMN_VALUE, Integer.parseInt(eventReader.getText()));\n\t\t\t\t} else {\n\t\t\t\t\teventReader.nextProperty();\n\t\t\t\t}\n\t\t\t}\n\t\t\t// event is parsed and can be inserted into the db\n\t\t\tif (numEvents == null) {\n\t\t\t\te.insert(zabbixLocalDB, EventData.COLUMN_EVENTID);\n\t\t\t} else {\n\t\t\t\te.insert(zabbixLocalDB);\n\t\t\t\tif (++i % 10 == 0) {\n\t\t\t\t\tshowProgress(i*100/numEvents);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t_commitTransactionIfRecommended();\n\t\t}\n\t}\n\n\t/**\n\t * import graph items\n\t *\n\t * @param graphItems\n\t * @return true, if graphid column has to be updated from -1 to the correct graphid later.\n\t * @throws JsonParseException\n\t * @throws NumberFormatException\n\t * @throws IOException\n\t */\n\tprivate boolean importGraphItems(JsonArrayOrObjectReader graphItems) throws JsonParseException, NumberFormatException, IOException {\n\t\tboolean mustSetGraphid = false;\n\t\tJsonObjectReader graphItemReader;\n\t\twhile ((graphItemReader = graphItems.next()) != null) {\n\t\t\tGraphItemData gi = new GraphItemData();\n\t\t\twhile (graphItemReader.nextValueToken()) {\n\t\t\t\tString propName = graphItemReader.getCurrentName();\n\t\t\t\tif (propName.equals(\"gitemid\")) {\n\t\t\t\t\tgi.set(GraphItemData.COLUMN_GRAPHITEMID, Long.parseLong(graphItemReader.getText()));\n\t\t\t\t} else if (propName.equals(GraphItemData.COLUMN_GRAPHID)) {\n\t\t\t\t\tgi.set(GraphItemData.COLUMN_GRAPHID, Long.parseLong(graphItemReader.getText()));\n\t\t\t\t} else if (propName.equals(GraphItemData.COLUMN_ITEMID)) {\n\t\t\t\t\tgi.set(GraphItemData.COLUMN_ITEMID, Long.parseLong(graphItemReader.getText()));\n\t\t\t\t} else if (propName.equals(GraphItemData.COLUMN_COLOR)) {\n\t\t\t\t\t// hex string => color int\n\t\t\t\t\tgi.set(GraphItemData.COLUMN_COLOR, Color.parseColor(\"#\"+graphItemReader.getText()));\n\t\t\t\t} else {\n\t\t\t\t\tgraphItemReader.nextProperty();\n\t\t\t\t}\n\t\t\t}\n\t\t\t// if graphid-column was not set, this must be done later. temporary graphid=-1\n\t\t\tif (gi.get(GraphItemData.COLUMN_GRAPHID) == null) {\n\t\t\t\tgi.set(GraphItemData.COLUMN_GRAPHID, -1);\n\t\t\t\tmustSetGraphid = true;\n\t\t\t}\n\t\t\tgi.insert(zabbixLocalDB);\n\t\t}\n\t\treturn mustSetGraphid;\n\t}\n\n\tpublic void importGraphsForScreen(long screenid) throws ClientProtocolException, IOException, JSONException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\tif (!isCached(GraphData.TABLE_NAME, \"screenid=\"+screenid)) {\n\t\t\t_startTransaction();\n\n\t\t\t// collect all graphids\n\t\t\tSet<Long> graphids = new HashSet<Long>();\n\t\t\tCursor cur = zabbixLocalDB.query(ScreenItemData.TABLE_NAME, null, ScreenItemData.COLUMN_SCREENID+\"=\"+screenid, null, null, null, null);\n\t\t\twhile (cur.moveToNext()) {\n\t\t\t\tgraphids.add(cur.getLong(cur.getColumnIndex(ScreenItemData.COLUMN_RESOURCEID)));\n\t\t\t}\n\n\t\t\t// delete old graphs\n\t\t\tString str_graphids = graphids.toString().replace(\"[\", \"\").replace(\"]\", \"\");\n\t\t\tif (str_graphids.length()>0) {\n\t\t\t\tzabbixLocalDB.delete(GraphData.TABLE_NAME, GraphData.COLUMN_GRAPHID+\" IN (\"+str_graphids+\")\", null);\n\t\t\t\tzabbixLocalDB.delete(GraphItemData.TABLE_NAME, GraphItemData.COLUMN_GRAPHID+\" IN (\"+str_graphids+\")\", null);\n\t\t\t}\n\t\t\tzabbixLocalDB.delete(CacheData.TABLE_NAME, CacheData.COLUMN_KIND+\"='\"+GraphData.TABLE_NAME+\"' AND \"+CacheData.COLUMN_FILTER+\"='screenid=\"+screenid+'\\'', null);\n\n\t\t\tJsonArrayOrObjectReader graphs = _queryStream(\n\t\t\t\t\t\"graph.get\"\n\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t\t.put(isVersion2?\"selectGraphItems\":\"select_graph_items\", \"extend\")\n\t\t\t\t\t\t.put(isVersion2?\"selectItems\":\"select_items\", \"extend\")\n\t\t\t\t\t\t.put(\"output\", \"extend\")\n\t\t\t\t\t\t.put(\"graphids\", new JSONArray(graphids))\n\t\t\t);\n\t\t\tJsonObjectReader graphReader;\n\t\t\twhile ((graphReader = graphs.next()) != null) {\n\t\t\t\tboolean mustSetGraphid = false;\n\t\t\t\tGraphData scr = new GraphData();\n\t\t\t\twhile (graphReader.nextValueToken()) {\n\t\t\t\t\tString propName = graphReader.getCurrentName();\n\t\t\t\t\tif (propName.equals(GraphData.COLUMN_GRAPHID)) {\n\t\t\t\t\t\tscr.set(GraphData.COLUMN_GRAPHID, Long.parseLong(graphReader.getText()));\n\t\t\t\t\t} else if (propName.equals(GraphData.COLUMN_NAME)) {\n\t\t\t\t\t\tscr.set(GraphData.COLUMN_NAME, graphReader.getText());\n\t\t\t\t\t} else if (propName.equals(\"gitems\")) {\n\t\t\t\t\t\tmustSetGraphid = importGraphItems(graphReader.getJsonArray());\n\t\t\t\t\t} else if (propName.equals(\"items\")) {\n\t\t\t\t\t\timportItems(graphReader.getJsonArray(), 0, true);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tgraphReader.nextProperty();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tscr.insert(zabbixLocalDB);\n\t\t\t\tif (mustSetGraphid) {\n\t\t\t\t\tContentValues values = new ContentValues(1);\n\t\t\t\t\tvalues.put(GraphItemData.COLUMN_GRAPHID, (Long) scr.get(GraphData.COLUMN_GRAPHID));\n\t\t\t\t\tzabbixLocalDB.update(\n\t\t\t\t\t\t\tGraphItemData.TABLE_NAME\n\t\t\t\t\t\t\t, values\n\t\t\t\t\t\t\t, GraphItemData.COLUMN_GRAPHID+\"=-1\"\n\t\t\t\t\t\t\t, null);\n\t\t\t\t}\n\t\t\t}\n\t\t\tgraphs.close();\n\n\t\t\tsetCached(GraphData.TABLE_NAME, \"screenid=\"+screenid, ZabbixConfig.CACHE_LIFETIME_SCREENS);\n\t\t\t_endTransaction();\n\t\t}\n\t}\n\n\tpublic void importHistoryDetails(String itemid) throws ClientProtocolException, IOException, JSONException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\tif (!isCached(HistoryDetailData.TABLE_NAME, itemid)) {\n\t\t\t_startTransaction();\n\t\t\tzabbixLocalDB.delete(HistoryDetailData.TABLE_NAME, HistoryDetailData.COLUMN_ITEMID+\"=\"+itemid, null);\n\n\t\t\t// the past 2 hours\n\t\t\tlong time_till = new Date().getTime() / 1000;\n\t\t\tlong time_from = time_till - ZabbixConfig.HISTORY_GET_TIME_FROM_SHIFT; // jetzt-2h\n\n\t\t\t// Workaround: historydetails only comes if you use the correct \"history\"-parameter.\n\t\t\t// this parameter can be \"null\" or a number 0-4. Because we don't know when to use which,\n\t\t\t// we try them all, until we get results.\n\t\t\tInteger historytype = null;\n\t\t\tJSONObject result = _queryBuffer(\n\t\t\t\t\t\"history.get\"\n\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t\t.put(\"limit\", 1)\n\t\t\t\t\t\t.put(\"history\", historytype) // for integer ?\n\t\t\t\t\t\t.put(\"itemids\", new JSONArray().put(itemid))\n\t\t\t\t\t\t.put(\"time_from\", time_from)\n\t\t\t);\n\n\t\t\tJSONArray testHistorydetails = result.getJSONArray(\"result\");\n\t\t\tif (testHistorydetails.length() == 0) {\n\t\t\t\thistorytype = -1;\n\t\t\t\twhile (testHistorydetails.length() == 0 && ++historytype <= 4) {\n\t\t\t\t\t// if we get an empty array, we try another history parameter\n\t\t\t\t\tresult = _queryBuffer(\n\t\t\t\t\t\t\t\"history.get\"\n\t\t\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t\t\t\t.put(\"output\", \"extend\")\n\t\t\t\t\t\t\t\t.put(\"limit\", 1)\n\t\t\t\t\t\t\t\t.put(\"history\", historytype)\n\t\t\t\t\t\t\t\t.put(\"itemids\", new JSONArray().put(itemid))\n\t\t\t\t\t\t\t\t.put(\"time_from\", time_from)\n\t\t\t\t\t);\n\t\t\t\t\ttestHistorydetails = result.getJSONArray(\"result\");\n\t\t\t\t}\n\t\t\t}\n\t\t\t// correct historytype found and there are data\n\t\t\tif (testHistorydetails.length() > 0) {\n\t\t\t\t// count of the entries cannot be detected (zabbix bug),\n\t\t\t\t// so we use a fiction\n\t\t\t\tint numDetails = 400;\n\t\t\t\tint curI=0;\n\t\t\t\tJsonArrayOrObjectReader historydetails = _queryStream(\n\t\t\t\t\t\t\"history.get\"\n\t\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t\t\t.put(\"output\", \"extend\")\n\t\t\t\t\t\t\t.put(\"limit\", ZabbixConfig.HISTORY_GET_LIMIT)\n\t\t\t\t\t\t\t.put(\"history\", historytype)\n\t\t\t\t\t\t\t.put(\"itemids\", new JSONArray().put(itemid))\n\t\t\t\t\t\t\t.put(\"time_from\", time_from)\n\t\t\t\t\t\t\t.put(\"sortfield\", \"clock\")\n\t\t\t\t\t\t\t.put(\"sortorder\", \"DESC\")\n\t\t\t\t);\n\t\t\t\tJsonObjectReader historydetail;\n\t\t\t\ttry {\n\t\t\t\t\tint selI = 0;\n\t\t\t\t\twhile ((historydetail = historydetails.next()) != null) {\n\t\t\t\t\t\t// save only every 20th\n\t\t\t\t\t\tif (selI++ % 20 != 0) {\n\t\t\t\t\t\t\twhile (historydetail.nextValueToken()) {\n\t\t\t\t\t\t\t\thistorydetail.nextProperty();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tHistoryDetailData h = new HistoryDetailData();\n\t\t\t\t\t\twhile (historydetail.nextValueToken()) {\n\t\t\t\t\t\t\tString propName = historydetail.getCurrentName();\n\t\t\t\t\t\t\tif (propName.equals(HistoryDetailData.COLUMN_CLOCK)) {\n\t\t\t\t\t\t\t\th.set(HistoryDetailData.COLUMN_CLOCK, Integer.parseInt(historydetail.getText()));\n\t\t\t\t\t\t\t} else if (propName.equals(HistoryDetailData.COLUMN_ITEMID)) {\n\t\t\t\t\t\t\t\th.set(HistoryDetailData.COLUMN_ITEMID, Long.parseLong(historydetail.getText()));\n\t\t\t\t\t\t\t} else if (propName.equals(HistoryDetailData.COLUMN_VALUE)) {\n\t\t\t\t\t\t\t\th.set(HistoryDetailData.COLUMN_VALUE, Double.parseDouble(historydetail.getText()));\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\thistorydetail.nextProperty();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\th.insert(zabbixLocalDB);\n\t\t\t\t\t\tif (++curI % 10 == 0) {\n\t\t\t\t\t\t\tshowProgress(Math.min(curI*100/numDetails, 84));\n\t\t\t\t\t\t}\n\t\t\t\t\t\t_commitTransactionIfRecommended();\n\t\t\t\t\t}\n\t\t\t\t} catch (NumberFormatException e) {\n\t\t\t\t\t// data are unuseable, e.g. because it's a string\n\t\t\t\t}\n\t\t\t\thistorydetails.close();\n\t\t\t}\n\t\t\tsetCached(HistoryDetailData.TABLE_NAME, itemid, ZabbixConfig.CACHE_LIFETIME_HISTORY_DETAILS);\n\t\t\t_endTransaction();\n\t\t}\n\t}\n\n\tprivate long importHostGroups(JsonArrayOrObjectReader jsonArray) throws JsonParseException, IOException {\n\t\tlong firstHostGroupId = -1;\n\t\tJsonObjectReader hostReader;\n\t\twhile ((hostReader = jsonArray.next()) != null) {\n\t\t\tHostGroupData h = new HostGroupData();\n\t\t\twhile (hostReader.nextValueToken()) {\n\t\t\t\tString propName = hostReader.getCurrentName();\n\t\t\t\tif (propName.equals(HostGroupData.COLUMN_GROUPID)) {\n\t\t\t\t\tlong id = Long.parseLong(hostReader.getText());\n\t\t\t\t\tif (firstHostGroupId == -1) firstHostGroupId = id;\n\t\t\t\t\th.set(HostGroupData.COLUMN_GROUPID, id);\n\t\t\t\t} else if (propName.equals(HostGroupData.COLUMN_NAME)) {\n\t\t\t\t\th.set(HostGroupData.COLUMN_NAME, hostReader.getText());\n\t\t\t\t} else {\n\t\t\t\t\thostReader.nextProperty();\n\t\t\t\t}\n\t\t\t}\n\t\t\th.insert(zabbixLocalDB, HostGroupData.COLUMN_GROUPID);\n\t\t\t_commitTransactionIfRecommended();\n\t\t}\n\n\t\treturn firstHostGroupId;\n\t}\n\n\t/**\n\t * import the hosts from stream\n\t * @param jsonArray stream\n\t * @param numHosts count of hosts for progressbar. null if unknown.\n\t * @return Object[] {(String) comma-separated all Hostnames, (Long) 1. host id}\n\t * @throws JsonParseException\n\t * @throws IOException\n\t */\n\tprivate Object[] importHosts(JsonArrayOrObjectReader jsonArray, Integer numHosts) throws JsonParseException, IOException {\n\t\tList<String> hostnames = new ArrayList<String>();\n\t\tlong firstHostId = -1;\n\t\tJsonObjectReader hostReader;\n\t\tint i=0;\n\t\twhile ((hostReader = jsonArray.next()) != null) {\n\t\t\tHostData h = new HostData();\n\t\t\twhile (hostReader.nextValueToken()) {\n\t\t\t\tString propName = hostReader.getCurrentName();\n\t\t\t\tif (propName.equals(HostData.COLUMN_HOSTID)) {\n\t\t\t\t\th.set(HostData.COLUMN_HOSTID, Long.parseLong(hostReader.getText()));\n\t\t\t\t\tif (firstHostId == -1) {\n\t\t\t\t\t\tfirstHostId = (Long) h.get(HostData.COLUMN_HOSTID);\n\t\t\t\t\t}\n\t\t\t\t} else if (propName.equals(HostData.COLUMN_HOST)) {\n\t\t\t\t\tString host = hostReader.getText();\n\t\t\t\t\thostnames.add(host);\n\t\t\t\t\th.set(HostData.COLUMN_HOST, host);\n\t\t\t\t} else if (propName.equals(\"groups\")) {\n\t\t\t\t\tlong groupid = importHostGroups(hostReader.getJsonArray());\n\t\t\t\t\tif (groupid != -1) {\n\t\t\t\t\t\th.set(HostData.COLUMN_GROUPID, groupid);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\thostReader.nextProperty();\n\t\t\t\t}\n\t\t\t}\n\t\t\t// host without group will get group #0 (other)\n\t\t\tif (h.get(HostData.COLUMN_GROUPID) == null) {\n\t\t\t\th.set(HostData.COLUMN_GROUPID, 0);\n\t\t\t\t// create \"other\" hostgroup #1\n\t\t\t\tHostGroupData hg = new HostGroupData();\n\t\t\t\thg.set(HostGroupData.COLUMN_GROUPID, 0);\n\t\t\t\thg.set(HostGroupData.COLUMN_NAME, \"- \"+context.getResources().getString(R.string.other)+\" -\");\n\t\t\t\thg.insert(zabbixLocalDB, HostGroupData.COLUMN_GROUPID);\n\t\t\t}\n\t\t\th.insert(zabbixLocalDB, HostData.COLUMN_HOSTID);\n\t\t\tif (numHosts != null && ++i % 10 == 0) {\n\t\t\t\tshowProgress(i*100/numHosts);\n\t\t\t}\n\t\t\t_commitTransactionIfRecommended();\n\t\t}\n\n\t\treturn new Object[] {hostnames.toString().replaceAll(\"[\\\\[\\\\]]\", \"\"), firstHostId};\n\t}\n\n\tpublic void importHostsAndGroups() throws JSONException, IOException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\tif (!isCached(HostData.TABLE_NAME, null)) {\n\t\t\t_startTransaction();\n\t\t\tzabbixLocalDB.delete(HostData.TABLE_NAME, null, null);\n\t\t\tzabbixLocalDB.delete(HostGroupData.TABLE_NAME, null, null);\n\n\t\t\t// get count of hosts\n\t\t\tJSONObject result = _queryBuffer(\n\t\t\t\t\t\"host.get\"\n\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t\t.put(\"countOutput\", 1)\n\t\t\t\t\t\t.put(\"limit\", ZabbixConfig.HOST_GET_LIMIT)\n\t\t\t\t\t\t.put(isVersion2?\"selectGroups\":\"select_groups\", \"extend\")\n\t\t\t);\n\t\t\tint numHosts = result.getInt(\"result\");\n\t\t\tJsonArrayOrObjectReader hosts = _queryStream(\n\t\t\t\t\t\"host.get\"\n\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t\t.put(\"output\", \"extend\")\n\t\t\t\t\t\t.put(\"limit\", ZabbixConfig.HOST_GET_LIMIT)\n\t\t\t\t\t\t.put(isVersion2?\"selectGroups\":\"select_groups\", \"extend\")\n\t\t\t);\n\t\t\timportHosts(hosts, numHosts);\n\t\t\thosts.close();\n\n\t\t\tsetCached(HostData.TABLE_NAME, null, ZabbixConfig.CACHE_LIFETIME_HOSTS);\n\t\t\t_endTransaction();\n\t\t}\n\t}\n\n\t/**\n\t * import items from stream.\n\t * @param items stream\n\t * @param numItems count for progressbar, if 0 no progressbarupdate\n\t * @param checkBeforeInsert if true, only make an insert if item does not exist\n\t * @return the first item id\n\t * @throws JsonParseException\n\t * @throws IOException\n\t */\n\tprivate long importItems(JsonArrayOrObjectReader items, int numItems, boolean checkBeforeInsert) throws JsonParseException, IOException {\n\t\tlong firstItemId = -1;\n\t\tint curI=0;\n\t\tJsonObjectReader itemReader;\n\t\twhile ((itemReader = items.next()) != null) {\n\t\t\tItemData i = new ItemData();\n\t\t\tString key_ = null;\n\t\t\twhile (itemReader.nextValueToken()) {\n\t\t\t\tString propName = itemReader.getCurrentName();\n\t\t\t\tif (propName.equals(ItemData.COLUMN_ITEMID)) {\n\t\t\t\t\ti.set(ItemData.COLUMN_ITEMID, Long.parseLong(itemReader.getText()));\n\t\t\t\t\tif (firstItemId == -1) {\n\t\t\t\t\t\tfirstItemId = (Long) i.get(ItemData.COLUMN_ITEMID);\n\t\t\t\t\t}\n\t\t\t\t} else if (propName.equals(ItemData.COLUMN_HOSTID)) {\n\t\t\t\t\ti.set(ItemData.COLUMN_HOSTID, Long.parseLong(itemReader.getText()));\n\t\t\t\t} else if (propName.equals(ItemData.COLUMN_DESCRIPTION) || propName.equals(\"name\")) {\n\t\t\t\t\t// since zabbix 2.x is the name of the item \"name\"\n\t\t\t\t\t// before zabbix 2.x the name field was \"description\"\n\t\t\t\t\tif (isVersion2 && propName.equals(\"name\")) {\n\t\t\t\t\t\ti.set(ItemData.COLUMN_DESCRIPTION, itemReader.getText());\n\t\t\t\t\t} else if (!isVersion2) {\n\t\t\t\t\t\ti.set(ItemData.COLUMN_DESCRIPTION, itemReader.getText());\n\t\t\t\t\t}\n\t\t\t\t} else if (propName.equals(ItemData.COLUMN_LASTCLOCK)) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\ti.set(ItemData.COLUMN_LASTCLOCK, Integer.parseInt(itemReader.getText()));\n\t\t\t\t\t} catch (NumberFormatException e) {\n\t\t\t\t\t\t// ignore\n\t\t\t\t\t}\n\t\t\t\t} else if (propName.equals(ItemData.COLUMN_LASTVALUE)) {\n\t\t\t\t\ti.set(ItemData.COLUMN_LASTVALUE, itemReader.getText());\n\t\t\t\t} else if (propName.equals(ItemData.COLUMN_UNITS)) {\n\t\t\t\t\ti.set(ItemData.COLUMN_UNITS, itemReader.getText());\n\t\t\t\t} else if (propName.equals(\"key_\")) {\n\t\t\t\t\tkey_ = itemReader.getText();\n\t\t\t\t} else if (propName.equals(\"applications\")) {\n\t\t\t\t\t// at this point itemid and hostid is unknown\n\t\t\t\t\t// because of this, all applicationrelations will be saved with itemid and hostid \"-1\".\n\t\t\t\t\t// later the IDs will be replaced with the correct\n\t\t\t\t\timportApplications(-1, -1, itemReader.getJsonArray());\n\t\t\t\t} else {\n\t\t\t\t\titemReader.nextProperty();\n\t\t\t\t}\n\t\t\t}\n\t\t\t// if applicable replace placeholder\n\t\t\tString description = (String) i.get(ItemData.COLUMN_DESCRIPTION);\n\t\t\tif (description.matches(\".*\\\\$[0-9].*\")) {\n\t\t\t\tif (key_ != null && key_.indexOf('[') != -1) {\n\t\t\t\t\tString[] keys = key_.substring(key_.indexOf('[')+1, key_.indexOf(']')).split(\",\");\n\t\t\t\t\tfor (int ix=0; ix<keys.length; ix++) {\n\t\t\t\t\t\tdescription = description.replace(\"$\"+(ix+1), keys[ix]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\ti.set(ItemData.COLUMN_DESCRIPTION, description);\n\t\t\tif (checkBeforeInsert) {\n\t\t\t\ti.insert(zabbixLocalDB, ItemData.COLUMN_ITEMID);\n\t\t\t} else {\n\t\t\t\ti.insert(zabbixLocalDB);\n\t\t\t}\n\t\t\tif (numItems > 0 && ++curI % 10 == 0) {\n\t\t\t\tshowProgress(curI*100/numItems);\n\t\t\t}\n\n\t\t\t// now the \"-1\" IDs of applicationsrelation will be replaced with the correct itemID\n\t\t\tContentValues values = new ContentValues(2);\n\t\t\tvalues.put(ApplicationItemRelationData.COLUMN_ITEMID, (Long) i.get(ItemData.COLUMN_ITEMID));\n\t\t\tvalues.put(ApplicationItemRelationData.COLUMN_HOSTID, (Long) i.get(ItemData.COLUMN_HOSTID));\n\t\t\tzabbixLocalDB.update(\n\t\t\t\t\tApplicationItemRelationData.TABLE_NAME\n\t\t\t\t\t, values\n\t\t\t\t\t, ApplicationItemRelationData.COLUMN_ITEMID+\"=-1\"\n\t\t\t\t\t, null\n\t\t\t);\n\t\t}\n\t\treturn firstItemId;\n\t}\n\n\tpublic void importItems(long hostid) throws JSONException, IOException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\tif (!isCached(ItemData.TABLE_NAME, \"hostid=\"+hostid)) {\n\t\t\t_startTransaction();\n\t\t\tzabbixLocalDB.delete(ItemData.TABLE_NAME, ItemData.COLUMN_HOSTID+\"=\"+hostid, null);\n\t\t\tzabbixLocalDB.delete(ApplicationItemRelationData.TABLE_NAME, ApplicationItemRelationData.COLUMN_HOSTID+\"=\"+hostid, null);\n\n\t\t\t// count of items\n\t\t\tJSONObject result = _queryBuffer(\n\t\t\t\t\t\"item.get\"\n\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t.put(\"output\", \"extend\")\n\t\t\t\t\t.put(\"countOutput\", 1)\n\t\t\t\t\t.put(\"limit\", ZabbixConfig.ITEM_GET_LIMIT)\n\t\t\t\t\t.put(\"hostids\", new JSONArray().put(hostid))\n\t\t\t);\n\t\t\tint numItems = result.getInt(\"result\");\n\t\t\tJsonArrayOrObjectReader items = _queryStream(\n\t\t\t\t\t\"item.get\"\n\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t\t.put(\"output\", \"extend\")\n\t\t\t\t\t\t.put(\"limit\", ZabbixConfig.ITEM_GET_LIMIT)\n\t\t\t\t\t\t.put(isVersion2?\"selectApplications\":\"select_applications\", \"extend\")\n\t\t\t\t\t\t.put(\"hostids\", new JSONArray().put(hostid))\n\t\t\t);\n\t\t\timportItems(items, numItems, false);\n\t\t\titems.close();\n\n\t\t\tsetCached(ItemData.TABLE_NAME, \"hostid=\"+hostid, ZabbixConfig.CACHE_LIFETIME_ITEMS);\n\t\t\t_endTransaction();\n\t\t}\n\t}\n\n\tprivate void importScreenItems(JsonArrayOrObjectReader screenItems) throws JsonParseException, NumberFormatException, IOException {\n\t\tJsonObjectReader screenItemReader;\n\t\twhile ((screenItemReader = screenItems.next()) != null) {\n\t\t\tScreenItemData si = new ScreenItemData();\n\t\t\tint resourcetype = -1;\n\t\t\twhile (screenItemReader.nextValueToken()) {\n\t\t\t\tString propName = screenItemReader.getCurrentName();\n\t\t\t\tif (propName.equals(ScreenItemData.COLUMN_SCREENITEMID)) {\n\t\t\t\t\tsi.set(ScreenItemData.COLUMN_SCREENITEMID, Long.parseLong(screenItemReader.getText()));\n\t\t\t\t} else if (propName.equals(ScreenItemData.COLUMN_SCREENID)) {\n\t\t\t\t\tsi.set(ScreenItemData.COLUMN_SCREENID, Long.parseLong(screenItemReader.getText()));\n\t\t\t\t} else if (propName.equals(ScreenItemData.COLUMN_RESOURCEID)) {\n\t\t\t\t\tsi.set(ScreenItemData.COLUMN_RESOURCEID, Long.parseLong(screenItemReader.getText()));\n\t\t\t\t} else if (propName.equals(\"resourcetype\")) {\n\t\t\t\t\tresourcetype = Integer.parseInt(screenItemReader.getText());\n\t\t\t\t} else {\n\t\t\t\t\tscreenItemReader.nextProperty();\n\t\t\t\t}\n\t\t\t}\n\t\t\t// only resouretype == 0\n\t\t\tif (resourcetype == 0) {\n\t\t\t\tsi.insert(zabbixLocalDB);\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic void importScreens() throws ClientProtocolException, IOException, JSONException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\tif (!isCached(ScreenData.TABLE_NAME, null)) {\n\t\t\t_startTransaction();\n\n\t\t\tzabbixLocalDB.delete(ScreenData.TABLE_NAME, null, null);\n\t\t\tzabbixLocalDB.delete(ScreenItemData.TABLE_NAME, null, null);\n\t\t\tzabbixLocalDB.delete(CacheData.TABLE_NAME, CacheData.COLUMN_KIND+\"='\"+ScreenData.TABLE_NAME+\"'\", null);\n\n\t\t\tJsonArrayOrObjectReader screens = _queryStream(\n\t\t\t\t\t(isVersion2?\"s\":\"S\")+\"creen.get\"\n\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t\t.put(\"output\", \"extend\")\n\t\t\t\t\t\t.put(isVersion2?\"selectScreenItems\":\"select_screenitems\", \"extend\")\n\t\t\t);\n\t\t\tJsonObjectReader screenReader;\n\t\t\twhile ((screenReader = screens.next()) != null) {\n\t\t\t\tScreenData scr = new ScreenData();\n\t\t\t\twhile (screenReader.nextValueToken()) {\n\t\t\t\t\tString propName = screenReader.getCurrentName();\n\t\t\t\t\tif (propName.equals(ScreenData.COLUMN_SCREENID)) {\n\t\t\t\t\t\tscr.set(ScreenData.COLUMN_SCREENID, Long.parseLong(screenReader.getText()));\n\t\t\t\t\t} else if (propName.equals(ScreenData.COLUMN_NAME)) {\n\t\t\t\t\t\tscr.set(ScreenData.COLUMN_NAME, screenReader.getText());\n\t\t\t\t\t} else if (propName.equals(\"screenitems\")) {\n\t\t\t\t\t\timportScreenItems(screenReader.getJsonArray());\n\t\t\t\t\t} else {\n\t\t\t\t\t\tscreenReader.nextProperty();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tscr.insert(zabbixLocalDB);\n\t\t\t}\n\t\t\tscreens.close();\n\n\t\t\tsetCached(ScreenData.TABLE_NAME, null, ZabbixConfig.CACHE_LIFETIME_SCREENS);\n\t\t\t_endTransaction();\n\t\t}\n\t}\n\n\tpublic void importTrigger(String triggerid) throws JSONException, IOException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\tif (!isCached(TriggerData.TABLE_NAME, \"triggerid=\"+triggerid)) {\n\t\t\t_startTransaction();\n\n\t\t\tJsonArrayOrObjectReader trigger = _queryStream(\n\t\t\t\t\t\"trigger.get\"\n\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t\t.put(\"output\", \"extend\")\n\t\t\t\t\t\t.put(isVersion2?\"selectHosts\":\"select_hosts\", \"extend\")\n\t\t\t\t\t\t.put(\"triggerids\", new JSONArray().put(triggerid))\n\t\t\t);\n\t\t\timportTriggers(trigger);\n\t\t\ttrigger.close();\n\n\t\t\tsetCached(TriggerData.TABLE_NAME, \"triggerid=\"+triggerid, ZabbixConfig.CACHE_LIFETIME_TRIGGERS);\n\t\t\t_endTransaction();\n\t\t}\n\t}\n\n\t/**\n\t * importiert ein trigger mit dem attribute itemid. ggf. wird der trigger zuerst gelöscht und neu angelegt.\n\t * imports a trigger with the attribute itemid. if trigger already exists, it will be removed first.\n\t * @param triggerid\n\t * @throws JSONException\n\t * @throws IOException\n\t * @throws HttpAuthorizationRequiredException\n\t * @throws NoAPIAccessException\n\t */\n\tpublic void importTriggerColumnItemId(String triggerid) throws JSONException, IOException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\t// check if the trigger exists and if the itemid was set\n\t\tboolean mustImport = true;\n\t\tCursor cur = zabbixLocalDB.query(TriggerData.TABLE_NAME, null, TriggerData.COLUMN_TRIGGERID+\"=\"+triggerid, null, null, null, null);\n\t\tif (cur.moveToFirst()) {\n\t\t\tlong itemid = 0;\n\t\t\ttry {\n\t\t\t\titemid = cur.getLong(cur.getColumnIndex(TriggerData.COLUMN_ITEMID));\n\t\t\t} catch (Exception e) {\n\t\t\t\t// no itemid\n\t\t\t}\n\t\t\tif (itemid > 0) {\n\t\t\t\tmustImport = false;\n\t\t\t}\n\t\t}\n\t\tif (mustImport) {\n\t\t\t_startTransaction();\n\t\t\tzabbixLocalDB.delete(TriggerData.TABLE_NAME, TriggerData.COLUMN_TRIGGERID+\"=\"+triggerid, null);\n\t\t\tJsonArrayOrObjectReader triggers = _queryStream(\n\t\t\t\t\t\"trigger.get\"\n\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t\t.put(\"output\", \"extend\")\n\t\t\t\t\t\t.put(isVersion2?\"selectHosts\":\"select_hosts\", \"extend\")\n\t\t\t\t\t\t.put(isVersion2?\"selectGroups\":\"select_groups\", \"extend\")\n\t\t\t\t\t\t.put(isVersion2?\"selectItems\":\"select_items\", \"extend\")\n\t\t\t\t\t\t.put(\"triggerids\", new JSONArray().put(triggerid))\n\t\t\t\t\t\t.put(\"limit\", 1)\n\t\t\t);\n\t\t\timportTriggers(triggers);\n\t\t\t_endTransaction();\n\t\t}\n\t}\n\n\t/**\n\t * imports the \"warning\"-triggers\n\t * @throws JSONException\n\t * @throws IOException\n\t * @throws HttpAuthorizationRequiredException\n\t * @throws NoAPIAccessException\n\t */\n\tpublic void importTriggers() throws JSONException, IOException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\tif (!isCached(TriggerData.TABLE_NAME, null)) {\n\t\t\t_startTransaction();\n\n\t\t\tlong min = (new Date().getTime()/1000)-ZabbixConfig.STATUS_SHOW_TRIGGER_TIME;\n\t\t\tJsonArrayOrObjectReader triggers = _queryStream(\n\t\t\t\t\t\"trigger.get\"\n\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t\t.put(\"output\", \"extend\")\n\t\t\t\t\t\t.put(\"sortfield\", \"lastchange\")\n\t\t\t\t\t\t.put(\"sortorder\", \"desc\")\n\t\t\t\t\t\t.put(isVersion2?\"selectHosts\":\"select_hosts\", \"extend\")\n\t\t\t\t\t\t.put(isVersion2?\"selectGroups\":\"select_groups\", \"extend\")\n\t\t\t\t\t\t.put(isVersion2?\"selectItems\":\"select_items\", \"extend\")\n\t\t\t\t\t\t.put(\"lastChangeSince\", min)\n\t\t\t\t\t\t.put(\"only_true\", \"1\")\n\t\t\t\t\t\t.put(\"limit\", ZabbixConfig.TRIGGER_GET_LIMIT)\n\t\t\t\t\t\t.put(\"expandDescription\", true)\n\t\t\t);\n\t\t\timportTriggers(triggers);\n\t\t\ttriggers.close();\n\n\t\t\tsetCached(TriggerData.TABLE_NAME, null, ZabbixConfig.CACHE_LIFETIME_TRIGGERS);\n\t\t\t_endTransaction();\n\t\t}\n\t}\n\n\tprivate void importTriggers(JsonArrayOrObjectReader jsonArray) throws JsonParseException, IOException {\n\t\tJsonObjectReader triggerReader;\n\t\twhile ((triggerReader = jsonArray.next()) != null) {\n\t\t\tTriggerData t = new TriggerData();\n\t\t\twhile (triggerReader.nextValueToken()) {\n\t\t\t\tString propName = triggerReader.getCurrentName();\n\t\t\t\tif (propName.equals(TriggerData.COLUMN_TRIGGERID)) {\n\t\t\t\t\tt.set(TriggerData.COLUMN_TRIGGERID, Long.parseLong(triggerReader.getText()));\n\t\t\t\t} else if (propName.equals(TriggerData.COLUMN_COMMENTS)) {\n\t\t\t\t\tt.set(TriggerData.COLUMN_COMMENTS, triggerReader.getText());\n\t\t\t\t} else if (propName.equals(TriggerData.COLUMN_DESCRIPTION)) {\n\t\t\t\t\tt.set(TriggerData.COLUMN_DESCRIPTION, triggerReader.getText());\n\t\t\t\t} else if (propName.equals(TriggerData.COLUMN_EXPRESSION)) {\n\t\t\t\t\tt.set(TriggerData.COLUMN_EXPRESSION, triggerReader.getText());\n\t\t\t\t} else if (propName.equals(TriggerData.COLUMN_LASTCHANGE)) {\n\t\t\t\t\tt.set(TriggerData.COLUMN_LASTCHANGE, Integer.parseInt(triggerReader.getText()));\n\t\t\t\t} else if (propName.equals(TriggerData.COLUMN_PRIORITY)) {\n\t\t\t\t\tt.set(TriggerData.COLUMN_PRIORITY, Integer.parseInt(triggerReader.getText()));\n\t\t\t\t} else if (propName.equals(TriggerData.COLUMN_STATUS)) {\n\t\t\t\t\tt.set(TriggerData.COLUMN_STATUS, Integer.parseInt(triggerReader.getText()));\n\t\t\t\t} else if (propName.equals(TriggerData.COLUMN_VALUE)) {\n\t\t\t\t\tt.set(TriggerData.COLUMN_VALUE, Integer.parseInt(triggerReader.getText()));\n\t\t\t\t} else if (propName.equals(TriggerData.COLUMN_URL)) {\n\t\t\t\t\tt.set(TriggerData.COLUMN_URL, triggerReader.getText());\n\t\t\t\t} else if (propName.equals(\"hosts\")) {\n\t\t\t\t\tObject[] hostsCache = importHosts(triggerReader.getJsonArray(), null);\n\t\t\t\t\tt.set(TriggerData.COLUMN_HOSTS, hostsCache[0]);\n\t\t\t\t\tt.set(TriggerData.COLUMN_HOSTID, hostsCache[1]);\n\t\t\t\t} else if (propName.equals(\"groups\")) {\n\t\t\t\t\timportHostGroups(triggerReader.getJsonArray());\n\t\t\t\t} else if (propName.equals(\"items\")) {\n\t\t\t\t\t// store the first item id\n\t\t\t\t\tt.set(TriggerData.COLUMN_ITEMID, importItems(triggerReader.getJsonArray(), 1, true));\n\t\t\t\t} else {\n\t\t\t\t\ttriggerReader.nextProperty();\n\t\t\t\t}\n\t\t\t}\n\t\t\tt.insert(zabbixLocalDB, TriggerData.COLUMN_TRIGGERID);\n\t\t\t_commitTransactionIfRecommended();\n\t\t}\n\t}\n\n\tpublic void importTriggersByItemId(String itemid) throws JSONException, IOException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\tif (!isCached(TriggerData.TABLE_NAME, \"itemid=\"+itemid)) {\n\t\t\t_startTransaction();\n\t\t\tzabbixLocalDB.delete(TriggerData.TABLE_NAME, TriggerData.COLUMN_ITEMID+\"=\"+itemid, null);\n\t\t\tJsonArrayOrObjectReader triggers = _queryStream(\n\t\t\t\t\t\"trigger.get\"\n\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t\t.put(\"output\", \"extend\")\n\t\t\t\t\t\t.put(isVersion2?\"selectHosts\":\"select_hosts\", \"extend\")\n\t\t\t\t\t\t.put(isVersion2?\"selectGroups\":\"select_groups\", \"extend\")\n\t\t\t\t\t\t.put(isVersion2?\"selectItems\":\"select_items\", \"extend\")\n\t\t\t\t\t\t.put(\"itemids\", new JSONArray().put(itemid))\n\t\t\t\t\t\t.put(\"limit\", 1)\n\t\t\t\t\t\t.put(\"sortfield\", \"lastchange\")\n\t\t\t\t\t\t.put(\"sortorder\", \"DESC\")\n\t\t\t);\n\t\t\timportTriggers(triggers);\n\t\t\tsetCached(TriggerData.TABLE_NAME, \"itemid=\"+itemid, ZabbixConfig.CACHE_LIFETIME_TRIGGERS);\n\t\t\t_endTransaction();\n\t\t}\n\t}\n\n\tpublic boolean isCached(String kind, String filter) {\n\t\tSQLiteQueryBuilder sqlBuilder = new SQLiteQueryBuilder();\n\t\tsqlBuilder.setTables(CacheData.TABLE_NAME);\n\t\tsqlBuilder.appendWhere(CacheData.COLUMN_KIND+\"='\"+kind+\"' AND \");\n\t\tsqlBuilder.appendWhere(CacheData.COLUMN_FILTER+\n\t\t\t\t(filter==null?\" IS NULL\":\"='\"+filter+\"'\")\n\t\t);\n\t\tsqlBuilder.appendWhere(\" AND \"+CacheData.COLUMN_EXPIRE_DATE+\">\"+new Date().getTime()/1000);\n\t\tCursor cur = sqlBuilder.query(\n\t\t\tzabbixLocalDB,\n\t\t\tnull,\n\t\t\tnull,\n\t\t\tnull,\n\t\t\tnull,\n\t\t\tnull,\n\t\t\tnull\n\t\t);\n\t\tLog.i(\"ZabbixContentProvider\", \"isCached \"+kind+\"//\"+filter+\"//\"+cur.moveToFirst());\n\t\treturn cur.moveToFirst();\n\t}\n\n\t/**\n\t * public, for the unit test\n\t */\n\tpublic void setCached(String kind, String filter, int lifetime) {\n\t\tCacheData cache = new CacheData();\n\t\tcache.set(CacheData.COLUMN_EXPIRE_DATE, new Date().getTime()/1000 + lifetime);\n\t\tcache.set(CacheData.COLUMN_KIND, kind);\n\t\tif (filter != null) {\n\t\t\tcache.set(CacheData.COLUMN_FILTER, filter);\n\t\t}\n\t\tcache.insert(zabbixLocalDB);\n\t}\n\n\t/**\n\t * updates the progressbar in the gui\n\t * @param i 0..100\n\t */\n\tpublic void showProgress(int i) {\n\t\t// if applicable, transform the progress\n\t\tif (transformProgressStart != 0 && transformProgressEnd != 0) {\n\t\t\ti = (int) (transformProgressStart + (transformProgressEnd-transformProgressStart)*(double)i/100);\n\t\t}\n\n\t\tIntent intent = new Intent(ZabbixContentProvider.CONTENT_PROVIDER_INTENT_ACTION);\n\t\tintent.putExtra(\"flag\", ZabbixContentProvider.INTENT_FLAG_SHOW_PROGRESS);\n\t\tintent.putExtra(\"value\", i);\n\t\tcontext.sendBroadcast(intent);\n\t}\n\n\t/**\n\t * transforms the progress\n\t * @param start 0% => start%\n\t * @param end 100% => end%\n\t */\n\tpublic void transformProgress(int start, int end) {\n\t\ttransformProgressStart = start;\n\t\ttransformProgressEnd = end;\n\t}\n}\n"],
      "p_date_tdt": "Jun 12, 2012 7:16:24 AM",
      "c_comments_t": ["\t\t\t// create ApplicationItemRelation /** \n * public, for the unit test\n */\n /** \n * import the hosts from stream\n * @param jsonArray stream\n * @param numHosts count of hosts for progressbar. null if unknown.\n * @return Object[] {(String) comma-separated all Hostnames, (Long) 1. host id}\n * @throws JsonParseException\n * @throws IOException\n */\n \t\t\t// result array found /** \n * import graph items\n * @param graphItems\n * @return true, if graphid column has to be updated from -1 to the correct graphid later.\n * @throws JsonParseException\n * @throws NumberFormatException\n * @throws IOException\n */\n \t\t\t\t\t\t// save only every 20th \t\t\t// wrong password. token remains null \t\t\t// the past 2 hours \t\t\t\t\t// data are unuseable, e.g. because it's a string /** \n * @param events stream\n * @param numEvents if null, no progressbar-update AND only isert, if it does not exist. If !null, progressbar-update AND always insert without checking\n * @throws JsonParseException\n * @throws IOException\n */\n \t\t\t\t\t// Precondition failed / Looks like Zabbix 1.8.2 \t\t\t// get API version \t\t\t// if #0 \"other\" does not exist yet, it has to be created \t\t\t\t\t// later the IDs will be replaced with the correct /** \n * zabbix api call. data will be parsed as json object on-the-fly. Caution: use this only for api calls with a small return data.\n * @param method\n * @param params\n * @return\n * @throws ClientProtocolException\n * @throws IOException\n * @throws JSONException\n * @throws HttpAuthorizationRequiredException\n * @throws NoAPIAccessException\n */\n /** \n * begin sql transaction\n */\n \t\t\t\t\t\t// first do a new auth and then try the same api call again \t\t\t\t// no itemid \t\t\t// count of items /** \n * init\n * @param context android context\n * @param zabbixLocalDB sqlite\n */\n \t\t\t// create applications that does not exist \t\t\t\t// so we use a fiction \t\t\t// only resouretype == 0 /** \n * probably too old zabbix <= 1.8.2\n */\n /** \n * zabbix auth. user and pwd from app preferences\n * @return true success\n * @throws ClientProtocolException\n * @throws IOException\n * @throws JSONException\n * @throws HttpAuthorizationRequiredException\n * @throws NoAPIAccessException\n */\n /** \n * close the last http stream\n */\n \t\t\t// Workaround: historydetails only comes if you use the correct \"history\"-parameter. /** \n * transforms the progress\n * @param start 0% => start%\n * @param end 100% => end%\n */\n \t\t\t\t// in Zabbix version <2.0, this is not default \t\t\t\t// file not found \t\t\t\t\t// hex string => color int \t\tHttpClientParams.setRedirecting(params, true); // redirecting \t\t\t// if applicable replace placeholder \t\t\t// if graphid-column was not set, this must be done later. temporary graphid=-1 \t\t// for GUI unit test, just return true /** \n * imports the \"warning\"-triggers\n * @throws JSONException\n * @throws IOException\n * @throws HttpAuthorizationRequiredException\n * @throws NoAPIAccessException\n */\n \t\t\t// event is parsed and can be inserted into the db \t\tpublic static final int EVENT_GET_TIME_FROM_SHIFT = 7*24*60*60; // -7 days \t\t// http request \t\t\t\t\t// store hosts namen \t\t\t\t// http auth failed \t\t\t\t\t// at this point itemid and hostid is unknown \t\t\t\t\t// import triggers \t\t\t// we try them all, until we get results. /** \n * importiert ein trigger mit dem attribute itemid. ggf. wird der trigger zuerst gelöscht und neu angelegt. imports a trigger with the attribute itemid. if trigger already exists, it will be removed first.\n * @param triggerid\n * @throws JSONException\n * @throws IOException\n * @throws HttpAuthorizationRequiredException\n * @throws NoAPIAccessException\n */\n \t\t\t\t\t// import hosts \t\t\t// for unit test \t\t\t\t// ignore \t\t\tlong time_from = time_till - ZabbixConfig.HISTORY_GET_TIME_FROM_SHIFT; // jetzt-2h \t\t\t// or a json object /** \n * zabbix error: no api access\n */\n /** \n * counts the sql inserts/updates and do a transaction commit to save the memory\n */\n \t\t\t// send intent to GUI \t\t\t\t\t// before zabbix 2.x the name field was \"description\" \t\t\t\t\t// if we get an empty array, we try another history parameter \t\t\t\t\t// store the first item id \t\t// check if the trigger exists and if the itemid was set /** \n * global constants\n */\n \t\t\t\t// create \"other\" hostgroup #1 \t\t\t// if there's no application, the ID #0 must be added (for other) \t\t\t\t\t// because of this, all applicationrelations will be saved with itemid and hostid \"-1\". \t\tpublic static final int HISTORY_GET_TIME_FROM_SHIFT = 8*60*60; // -8h \t\t\t\t\t\t.put(\"history\", historytype) // for integer ? /** \n * interface to connect to the zabbix server\n */\n /** \n * acknowledge zabbix event. Sets ack-flag with comment. Caution: This is supported only for Zabbix version >= 1.8.4\n * @param eventid\n * @param comment\n * @return true, success.\n * @throws ClientProtocolException\n * @throws IOException\n * @throws JSONException\n * @throws HttpAuthorizationRequiredException\n * @throws NoAPIAccessException\n */\n \t\t\t// store the last stream to close it if an exception will be thrown /** \n * zabbix api call as stream.\n * @param method\n * @param params\n * @return stream im json array wrapper\n * @throws JSONException\n * @throws IOException\n * @throws HttpAuthorizationRequiredException\n * @throws NoAPIAccessException\n */\n \t\t// if applicable http auth \t\t\t// correct historytype found and there are data \t\t\t\t// count of the entries cannot be detected (zabbix bug), /** \n * import items from stream.\n * @param items stream\n * @param numItems count for progressbar, if 0 no progressbarupdate\n * @param checkBeforeInsert if true, only make an insert if item does not exist\n * @return the first item id\n * @throws JsonParseException\n * @throws IOException\n */\n \t\t\t// collect all graphids /** \n * http auth is needed\n */\n \t\t\t// ignore for unit test /** \n * commit sql transaction\n */\n \t\t\t// delete old graphs \t\t\t// host without group will get group #0 (other) \t\t\t// there's no result \t\t// if applicable, transform the progress \t\t\t// SSL not trusted \t\t\t// internet problem \t\t\tif (jp.nextToken() != JsonToken.START_ARRAY && jp.getCurrentToken() != JsonToken.START_OBJECT) { // go inside the array \t\tpublic static final int CACHE_LIFETIME_APPLICATIONS = 2*24*60*60; // 2 days \t\t\t\t\t// since zabbix 2.x is the name of the item \"name\" \t\t\t// now the \"-1\" IDs of applicationsrelation will be replaced with the correct itemID \t\t\t// get count of hosts /** \n * import the newest events\n * @throws ClientProtocolException\n * @throws IOException\n * @throws JSONException\n * @throws HttpAuthorizationRequiredException\n * @throws NoAPIAccessException\n */\n /** \n * updates the progressbar in the gui\n * @param i 0..100\n */\n \t\t\t\t\t\t// ignore \t\t\t\t\t// first do a new auth and then try the same api call again /** \n * import the newest event of a trigger\n * @param triggerid\n * @throws JSONException\n * @throws IOException\n * @throws HttpAuthorizationRequiredException\n * @throws NoAPIAccessException\n */\n \t\t// it can be an (empty) array \t\t\t// this parameter can be \"null\" or a number 0-4. Because we don't know when to use which,"],
      "p_contents_t": ["package com.inovex.zabbixmobile.api;\n\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.net.Socket;\nimport java.net.UnknownHostException;\nimport java.security.KeyManagementException;\nimport java.security.KeyStore;\nimport java.security.KeyStoreException;\nimport java.security.NoSuchAlgorithmException;\nimport java.security.UnrecoverableKeyException;\nimport java.security.cert.CertificateException;\nimport java.security.cert.X509Certificate;\nimport java.util.ArrayList;\nimport java.util.Date;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Set;\n\nimport javax.net.ssl.SSLContext;\nimport javax.net.ssl.SSLPeerUnverifiedException;\nimport javax.net.ssl.TrustManager;\nimport javax.net.ssl.X509TrustManager;\n\nimport org.apache.http.HttpResponse;\nimport org.apache.http.HttpVersion;\nimport org.apache.http.auth.AuthScope;\nimport org.apache.http.auth.UsernamePasswordCredentials;\nimport org.apache.http.client.ClientProtocolException;\nimport org.apache.http.client.methods.HttpPost;\nimport org.apache.http.client.params.HttpClientParams;\nimport org.apache.http.conn.ClientConnectionManager;\nimport org.apache.http.conn.scheme.PlainSocketFactory;\nimport org.apache.http.conn.scheme.Scheme;\nimport org.apache.http.conn.scheme.SchemeRegistry;\nimport org.apache.http.conn.ssl.SSLSocketFactory;\nimport org.apache.http.entity.StringEntity;\nimport org.apache.http.impl.client.DefaultHttpClient;\nimport org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager;\nimport org.apache.http.params.BasicHttpParams;\nimport org.apache.http.params.HttpConnectionParams;\nimport org.apache.http.params.HttpParams;\nimport org.apache.http.params.HttpProtocolParams;\nimport org.apache.http.protocol.HTTP;\nimport org.codehaus.jackson.JsonFactory;\nimport org.codehaus.jackson.JsonParseException;\nimport org.codehaus.jackson.JsonParser;\nimport org.codehaus.jackson.JsonToken;\nimport org.json.JSONArray;\nimport org.json.JSONException;\nimport org.json.JSONObject;\n\nimport android.content.ContentValues;\nimport android.content.Context;\nimport android.content.Intent;\nimport android.content.SharedPreferences;\nimport android.database.Cursor;\nimport android.database.sqlite.SQLiteDatabase;\nimport android.database.sqlite.SQLiteQueryBuilder;\nimport android.graphics.Color;\nimport android.preference.PreferenceManager;\nimport android.util.Log;\n\nimport com.inovex.zabbixmobile.R;\nimport com.inovex.zabbixmobile.ZabbixContentProvider;\nimport com.inovex.zabbixmobile.model.ApplicationData;\nimport com.inovex.zabbixmobile.model.ApplicationItemRelationData;\nimport com.inovex.zabbixmobile.model.CacheData;\nimport com.inovex.zabbixmobile.model.EventData;\nimport com.inovex.zabbixmobile.model.GraphData;\nimport com.inovex.zabbixmobile.model.GraphItemData;\nimport com.inovex.zabbixmobile.model.HistoryDetailData;\nimport com.inovex.zabbixmobile.model.HostData;\nimport com.inovex.zabbixmobile.model.HostGroupData;\nimport com.inovex.zabbixmobile.model.ItemData;\nimport com.inovex.zabbixmobile.model.ScreenData;\nimport com.inovex.zabbixmobile.model.ScreenItemData;\nimport com.inovex.zabbixmobile.model.TriggerData;\n\n/**\n * interface to connect to the zabbix server\n */\npublic class ZabbixService {\n\tclass CustomSSLSocketFactory extends SSLSocketFactory {\n\t\tSSLContext sslContext = SSLContext.getInstance(\"TLS\");\n\n\t\tpublic CustomSSLSocketFactory(KeyStore truststore) throws NoSuchAlgorithmException, KeyManagementException, KeyStoreException, UnrecoverableKeyException {\n\t\t\tsuper(truststore);\n\t\t\tTrustManager tm = new X509TrustManager() {\n\t\t\t\t@Override\n\t\t\t\tpublic void checkClientTrusted(X509Certificate[] chain,\n\t\t\t\t\t\tString authType) throws CertificateException {\n\t\t\t\t}\n\t\t\t\t@Override\n\t\t\t\tpublic void checkServerTrusted(X509Certificate[] chain,\n\t\t\t\t\t\tString authType) throws CertificateException {\n\t\t\t\t}\n\t\t\t\t@Override\n\t\t\t\tpublic X509Certificate[] getAcceptedIssuers() {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t};\n\t\t\tsslContext.init(null, new TrustManager[] { tm }, null);\n\t\t}\n\n\t\t@Override\n\t\tpublic Socket createSocket() throws IOException {\n\t\t\treturn sslContext.getSocketFactory().createSocket();\n\t\t}\n\n\t\t@Override\n\t\tpublic Socket createSocket(Socket socket, String host, int port, boolean autoClose) throws IOException, UnknownHostException {\n\t\t\treturn sslContext.getSocketFactory().createSocket(socket, host, port, autoClose);\n\t\t}\n\t}\n\n\t/**\n\t * http auth is needed\n\t */\n\tpublic class HttpAuthorizationRequiredException extends Exception {\n\t\tprivate static final long serialVersionUID = 6632422081858878147L;\n\t}\n\n\t/**\n\t * zabbix error: no api access\n\t */\n\tpublic class NoAPIAccessException extends Exception {\n\t\tprivate static final long serialVersionUID = 6381395987443456382L;\n\t}\n\n\t/**\n\t * probably too old zabbix <= 1.8.2\n\t */\n\tpublic class PreconditionFailedException extends Exception {\n\t\tprivate static final long serialVersionUID = -2529885710860745023L;\n\t}\n\n\t/**\n\t * global constants\n\t */\n\tpublic class ZabbixConfig {\n\t\tpublic static final int APPLICATION_GET_LIMIT = 1000;\n\t\tpublic static final int EVENTS_GET_LIMIT = 60;\n\t\tpublic static final int HISTORY_GET_TIME_FROM_SHIFT = 8*60*60; // -8h\n\t\tpublic static final int HISTORY_GET_LIMIT = 8000;\n\t\tpublic static final int HOSTGROUP_GET_LIMIT = 200;\n\t\tpublic static final int HOST_GET_LIMIT = 300;\n\t\tpublic static final int ITEM_GET_LIMIT = 200;\n\t\tpublic static final int TRIGGER_GET_LIMIT = 100;\n\t\tpublic static final int EVENT_GET_TIME_FROM_SHIFT = 7*24*60*60; // -7 days\n\t\tpublic static final int CACHE_LIFETIME_APPLICATIONS = 2*24*60*60; // 2 days\n\t\tpublic static final int CACHE_LIFETIME_EVENTS = 120;\n\t\tpublic static final int CACHE_LIFETIME_HISTORY_DETAILS = 4*60;\n\t\tpublic static final int CACHE_LIFETIME_HOST_GROUPS = 7*24*60*60;\n\t\tpublic static final int CACHE_LIFETIME_HOSTS = 2*24*60*60;\n\t\tpublic static final int CACHE_LIFETIME_SCREENS = 2*24*60*60;\n\t\tpublic static final int CACHE_LIFETIME_ITEMS = 4*60;\n\t\tpublic static final int CACHE_LIFETIME_TRIGGERS = 2*60;\n\t\tpublic static final long STATUS_SHOW_TRIGGER_TIME = 14*24*60*60;\n\t\tpublic static final int HTTP_CONNECTION_TIMEOUT = 30000;\n\t}\n\n\tprivate final DefaultHttpClient httpClient;\n\tprivate final SQLiteDatabase zabbixLocalDB;\n\tprivate String url;\n\tprivate String token;\n\tprivate final Context context;\n\tprivate int _transactionStack;\n\tprivate JsonParser lastStream;\n\tprivate int transformProgressStart;\n\tprivate int transformProgressEnd;\n\tprivate boolean _notAuthorizedRetry;\n\tprivate boolean isVersion2 = true;\n\n\t/**\n\t * init\n\t * @param context android context\n\t * @param zabbixLocalDB sqlite\n\t */\n\tpublic ZabbixService(Context context, SQLiteDatabase zabbixLocalDB) {\n\t\tClientConnectionManager ccm = null;\n\t\tHttpParams params = null;\n\n\t\ttry {\n\t\t\tSharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(context);\n\t\t\tif (prefs.getBoolean(\"zabbix_trust_all_ssl_ca\", false)) {\n\t\t\t\tKeyStore trustStore = KeyStore.getInstance(KeyStore.getDefaultType());\n\t\t\t\ttrustStore.load(null, null);\n\n\t\t\t\tSSLSocketFactory sf = new CustomSSLSocketFactory(trustStore);\n\t\t\t\tsf.setHostnameVerifier(SSLSocketFactory.ALLOW_ALL_HOSTNAME_VERIFIER);\n\n\t\t\t\tparams = new BasicHttpParams();\n\t\t\t\tHttpProtocolParams.setVersion(params, HttpVersion.HTTP_1_1);\n\t\t\t\tHttpProtocolParams.setContentCharset(params, HTTP.UTF_8);\n\n\t\t\t\tSchemeRegistry registry = new SchemeRegistry();\n\t\t\t\tregistry.register(new Scheme(\"http\", PlainSocketFactory.getSocketFactory(), 80));\n\t\t\t\tregistry.register(new Scheme(\"https\", sf, 443));\n\n\t\t\t\tccm = new ThreadSafeClientConnManager(params, registry);\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\t// ignore for unit test\n\t\t}\n\n\t\tif (ccm == null || params == null) {\n\t\t\thttpClient = new DefaultHttpClient();\n\t\t} else {\n\t\t\thttpClient = new DefaultHttpClient(ccm, params);\n\t\t}\n\n\t\t// if applicable http auth\n\t\ttry {\n\t\t\tSharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(context);\n\t\t\tif (prefs.getBoolean(\"http_auth_enabled\", false)) {\n\t\t\t\tString user = prefs.getString(\"http_auth_username\", \"\");\n\t\t\t\tString pwd = prefs.getString(\"http_auth_password\", \"\");\n\t\t\t\thttpClient.getCredentialsProvider().setCredentials(AuthScope.ANY, new UsernamePasswordCredentials(user, pwd));\n\t\t\t}\n\t\t} catch (java.lang.UnsupportedOperationException e1) {\n\t\t\t// for unit test\n\t\t}\n\n\t\tparams = httpClient.getParams();\n\t\tHttpClientParams.setRedirecting(params, true); // redirecting\n\t\tHttpConnectionParams.setConnectionTimeout(params, ZabbixConfig.HTTP_CONNECTION_TIMEOUT);\n\t\tthis.context = context;\n\t\tthis.zabbixLocalDB = zabbixLocalDB;\n\t}\n\n\t/**\n\t * counts the sql inserts/updates and do a transaction commit to save the memory\n\t */\n\tprivate void _commitTransactionIfRecommended() {\n\t\tif (_transactionStack++ > 50) {\n\t\t\t_endTransaction();\n\t\t\t_startTransaction();\n\t\t}\n\t}\n\n\t/**\n\t * commit sql transaction\n\t */\n\tpublic void _endTransaction() {\n\t\tif (zabbixLocalDB.inTransaction()) {\n\t\t\tzabbixLocalDB.setTransactionSuccessful();\n\t\t\tzabbixLocalDB.endTransaction();\n\t\t}\n\t}\n\n\t/**\n\t * zabbix api call. data will be parsed as json object on-the-fly.\n\t * Caution: use this only for api calls with a small return data.\n\t * @param method\n\t * @param params\n\t * @return\n\t * @throws ClientProtocolException\n\t * @throws IOException\n\t * @throws JSONException\n\t * @throws HttpAuthorizationRequiredException\n\t * @throws NoAPIAccessException\n\t */\n\tprivate JSONObject _queryBuffer(String method, JSONObject params) throws ClientProtocolException, IOException, JSONException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\tHttpPost post = new HttpPost(url);\n\t\tpost.addHeader(\"Content-Type\", \"application/json; charset=utf-8\");\n\n\t\tString json =\n\t\t\t\"{\" +\n\t\t\t\"\t\\\"jsonrpc\\\" : \\\"2.0\\\",\" +\n\t\t\t\"\t\\\"method\\\" : \\\"\"+method+\"\\\",\" +\n\t\t\t\"\t\\\"params\\\" : \"+params.toString()+\",\" +\n\t\t\t\"\t\\\"auth\\\" : \"+(token==null?\"null\":'\"'+token+'\"')+\",\" +\n\t\t\t\"\t\\\"id\\\" : 0\" +\n\t\t\t\"}\";\n\n\t\tpost.setEntity(new StringEntity(json, \"UTF-8\"));\n\t\ttry {\n\t\t\tHttpResponse resp = httpClient.execute(post);\n\t\t\tif (resp.getStatusLine().getStatusCode() == 401) {\n\t\t\t\t// http auth failed\n\t\t\t\tthrow new HttpAuthorizationRequiredException();\n\t\t\t} else if (resp.getStatusLine().getStatusCode() == 412) {\n\t\t\t\t\t// Precondition failed / Looks like Zabbix 1.8.2\n\t\t\t\tthrow new PreconditionFailedException();\n\t\t\t} else if (resp.getStatusLine().getStatusCode() == 404) {\n\t\t\t\t// file not found\n\t\t\t\tthrow new IOException(resp.getStatusLine().getStatusCode()+\" \"+resp.getStatusLine().getReasonPhrase());\n\t\t\t} else {\n\t\t\t\tLog.d(\"ZabbixService\", resp.getStatusLine().getStatusCode()+\" \"+resp.getStatusLine().getReasonPhrase());\n\t\t\t}\n\t\t\tStringBuilder total = new StringBuilder();\n\t\t\tBufferedReader rd = new BufferedReader(new InputStreamReader(resp.getEntity().getContent()));\n\t\t\tint chr;\n\t\t\twhile ((chr = rd.read()) != -1) {\n\t\t\t\ttotal.append((char) chr);\n\t\t\t}\n\t\t\tJSONObject result = new JSONObject(total.toString());\n\t\t\ttry {\n\t\t\t\tif (result.getJSONObject(\"error\") != null) {\n\t\t\t\t\tif (result.getJSONObject(\"error\").getString(\"data\").equals(\"No API access\")) {\n\t\t\t\t\t\tthrow new NoAPIAccessException();\n\t\t\t\t\t} else throw new RuntimeException(result.getJSONObject(\"error\").toString());\n\t\t\t\t}\n\t\t\t\tif (result.getString(\"data\").equals(\"Not authorized\")) {\n\t\t\t\t\t// first do a new auth and then try the same api call again\n\t\t\t\t\tif (authenticate() && !_notAuthorizedRetry) {\n\t\t\t\t\t\t_notAuthorizedRetry = true;\n\t\t\t\t\t\tJSONObject r = _queryBuffer(method, params);\n\t\t\t\t\t\t_notAuthorizedRetry = false;\n\t\t\t\t\t\treturn r;\n\t\t\t\t\t} throw new IllegalStateException(result.toString());\n\t\t\t\t}\n\t\t\t} catch (JSONException e) {\n\t\t\t\t// ignore\n\t\t\t}\n\t\t\treturn result;\n\t\t} catch (SSLPeerUnverifiedException e) {\n\t\t\t// SSL not trusted\n\t\t\tIntent intent = new Intent(ZabbixContentProvider.CONTENT_PROVIDER_INTENT_ACTION);\n\t\t\tintent.putExtra(\"flag\", ZabbixContentProvider.INTENT_FLAG_SSL_NOT_TRUSTED);\n\t\t\tcontext.sendBroadcast(intent);\n\t\t\tthrow e;\n\t\t} catch (IOException e) {\n\t\t\t// internet problem\n\t\t\t// send intent to GUI\n\t\t\tIntent intent = new Intent(ZabbixContentProvider.CONTENT_PROVIDER_INTENT_ACTION);\n\t\t\tintent.putExtra(\"flag\", ZabbixContentProvider.INTENT_FLAG_CONNECTION_FAILED);\n\t\t\tintent.putExtra(\"value\", e.getMessage());\n\t\t\tcontext.sendBroadcast(intent);\n\t\t\tthrow e;\n\t\t}\n\t}\n\n\t/**\n\t * zabbix api call as stream.\n\t * @param method\n\t * @param params\n\t * @return stream im json array wrapper\n\t * @throws JSONException\n\t * @throws IOException\n\t * @throws HttpAuthorizationRequiredException\n\t * @throws NoAPIAccessException\n\t */\n\tprivate JsonArrayReader _queryStream(String method, JSONObject params) throws JSONException, IOException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\t// http request\n\t\tHttpPost post = new HttpPost(url);\n\t\tpost.addHeader(\"Content-Type\", \"application/json; charset=utf-8\");\n\n\t\tJSONObject json = new JSONObject()\n\t\t\t.put(\"jsonrpc\", \"2.0\")\n\t\t\t.put(\"method\", method)\n\t\t\t.put(\"params\", params)\n\t\t\t.put(\"auth\", token)\n\t\t\t.put(\"id\", 0);\n\n\t\tpost.setEntity(new StringEntity(json.toString(), \"UTF-8\"));\n\t\ttry {\n\t\t\tHttpResponse resp = httpClient.execute(post);\n\t\t\tif (resp.getStatusLine().getStatusCode() == 401) {\n\t\t\t\t// http auth failed\n\t\t\t\tthrow new HttpAuthorizationRequiredException();\n\t\t\t}\n\n\t\t\tJsonFactory jsonFac = new JsonFactory();\n\t\t\tJsonParser jp = jsonFac.createJsonParser(resp.getEntity().getContent());\n\t\t\t// store the last stream to close it if an exception will be thrown\n\t\t\tlastStream = jp;\n\t\t\tif (jp.nextToken() != JsonToken.START_OBJECT) {\n\t\t\t\tthrow new IOException(\"Expected data to start with an Object\");\n\t\t\t}\n\t\t\tdo {\n\t\t\t\tjp.nextToken();\n\t\t\t\tif (jp.getCurrentName().equals(\"error\")) {\n\t\t\t\t\tjp.nextToken();\n\t\t\t\t\tString errortxt = \"\";\n\t\t\t\t\twhile (jp.nextToken() != JsonToken.END_OBJECT) {\n\t\t\t\t\t\terrortxt += jp.getText();\n\t\t\t\t\t}\n\t\t\t\t\tif (errortxt.contains(\"No API access\")) {\n\t\t\t\t\t\tthrow new NoAPIAccessException();\n\t\t\t\t\t} else if (errortxt.contains(\"Not authorized\")) {\n\t\t\t\t\t\t// first do a new auth and then try the same api call again\n\t\t\t\t\t\tif (authenticate() && !_notAuthorizedRetry) {\n\t\t\t\t\t\t\t_notAuthorizedRetry = true;\n\t\t\t\t\t\t\tJsonArrayReader r = _queryStream(method, params);\n\t\t\t\t\t\t\t_notAuthorizedRetry = false;\n\t\t\t\t\t\t\treturn r;\n\t\t\t\t\t\t} else throw new IllegalStateException(errortxt);\n\t\t\t\t\t} else throw new IllegalStateException(\"JSON API Error: \"+errortxt);\n\t\t\t\t}\n\t\t\t} while (!jp.getCurrentName().equals(\"result\"));\n\n\t\t\t// result array found\n\t\t\tif (jp.nextToken() != JsonToken.START_ARRAY) { // go inside the array\n\t\t\t\tthrow new IOException(\"Expected data to start with an Array\");\n\t\t\t}\n\t\t\treturn new JsonArrayReader(jp);\n\t\t} catch (SSLPeerUnverifiedException e) {\n\t\t\tthrow e;\n\t\t} catch (IOException e) {\n\t\t\t// internet problem\n\t\t\t// send intent to GUI\n\t\t\tIntent intent = new Intent(ZabbixContentProvider.CONTENT_PROVIDER_INTENT_ACTION);\n\t\t\tintent.putExtra(\"flag\", ZabbixContentProvider.INTENT_FLAG_CONNECTION_FAILED);\n\t\t\tcontext.sendBroadcast(intent);\n\t\t\tthrow e;\n\t\t}\n\t}\n\n\t/**\n\t * begin sql transaction\n\t */\n\tprivate void _startTransaction() {\n\t\tzabbixLocalDB.beginTransaction();\n\t\t_transactionStack = 0;\n\t}\n\n\t/**\n\t * acknowledge zabbix event. Sets ack-flag with comment.\n\t * Caution: This is supported only for Zabbix version >= 1.8.4\n\t * @param eventid\n\t * @param comment\n\t * @return true, success.\n\t * @throws ClientProtocolException\n\t * @throws IOException\n\t * @throws JSONException\n\t * @throws HttpAuthorizationRequiredException\n\t * @throws NoAPIAccessException\n\t */\n\tpublic boolean acknowledgeEvent(String eventid, String comment) throws ClientProtocolException, IOException, JSONException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\t// for GUI unit test, just return true\n\t\tif (comment != null && comment.equals(\"__UNIT_TEST__RETURN_TRUE__\")) return true;\n\n\t\tJSONObject result = _queryBuffer(\n\t\t\t\t\"event.acknowledge\"\n\t\t\t\t, new JSONObject()\n\t\t\t\t\t.put(\"eventids\", new JSONArray().put(eventid))\n\t\t);\n\t\t// it can be an (empty) array\n\t\ttry {\n\t\t\treturn result.getJSONObject(\"result\").getJSONArray(\"eventids\").length() == 1;\n\t\t} catch (JSONException e) {\n\t\t\t// or a json object\n\t\t\treturn result.getJSONObject(\"result\").getJSONObject(\"eventids\").length() == 1;\n\t\t}\n\t}\n\n\t/**\n\t * zabbix auth. user and pwd from app preferences\n\t * @return true success\n\t * @throws ClientProtocolException\n\t * @throws IOException\n\t * @throws JSONException\n\t * @throws HttpAuthorizationRequiredException\n\t * @throws NoAPIAccessException\n\t */\n\tpublic boolean authenticate() throws ClientProtocolException, IOException, JSONException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\tSharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(context);\n\t\tString url = prefs.getString(\"zabbix_url\", \"\").trim();\n\t\tString user = prefs.getString(\"zabbix_username\", \"\").trim();\n\t\tString password = prefs.getString(\"zabbix_password\", \"\");\n\n\t\tthis.url = url+(url.endsWith(\"/\")?\"\":'/')+\"api_jsonrpc.php\";\n\t\tLog.d(\"ZabbixContentProvider\", url+\"//\"+user);\n\n\t\ttry {\n\t\t\tJSONObject result = _queryBuffer(\n\t\t\t\t\t\"user.authenticate\"\n\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t\t.put(\"user\", user)\n\t\t\t\t\t\t.put(\"password\", password)\n\t\t\t);\n\t\t\ttoken = result.getString(\"result\");\n\t\t} catch (JSONException e) {\n\t\t\t// there's no result\n\t\t\te.printStackTrace();\n\t\t} catch (RuntimeException e) {\n\t\t\t// wrong password. token remains null\n\t\t\te.printStackTrace();\n\t\t}\n\t\tif (token != null) {\n\t\t\t// get API version\n\t\t\tJSONObject result = _queryBuffer(\n\t\t\t\t\t\"apiinfo.version\"\n\t\t\t\t\t, new JSONObject()\n\t\t\t);\n\t\t\tisVersion2 = result.getString(\"result\").equals(\"1.4\");\n\t\t}\n\t\treturn token != null;\n\t}\n\n\t/**\n\t * close the last http stream\n\t */\n\tpublic void closeLastStream() {\n\t\tif (lastStream != null && !lastStream.isClosed()) {\n\t\t\ttry {\n\t\t\t\tlastStream.close();\n\t\t\t} catch (IOException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate void importApplications(long hostid, long itemid, JsonArrayReader jsonArray) throws JsonParseException, NumberFormatException, IOException {\n\t\tint num = 0;\n\t\tJsonObjectReader application;\n\t\twhile ((application = jsonArray.next()) != null) {\n\t\t\tApplicationData app = new ApplicationData();\n\t\t\twhile (application.nextValueToken()) {\n\t\t\t\tString propName = application.getCurrentName();\n\t\t\t\tif (propName.equals(ApplicationData.COLUMN_APPLICATIONID)) {\n\t\t\t\t\tapp.set(ApplicationData.COLUMN_APPLICATIONID, Long.parseLong(application.getText()));\n\t\t\t\t} else if (propName.equals(ApplicationData.COLUMN_NAME)) {\n\t\t\t\t\tapp.set(ApplicationData.COLUMN_NAME, application.getText());\n\t\t\t\t} else if (propName.equals(ApplicationData.COLUMN_HOSTID)) {\n\t\t\t\t\tapp.set(ApplicationData.COLUMN_HOSTID, Long.parseLong(application.getText()));\n\t\t\t\t} else {\n\t\t\t\t\tapplication.nextProperty();\n\t\t\t\t}\n\t\t\t}\n\t\t\t// create applications that does not exist\n\t\t\tapp.insert(zabbixLocalDB, ApplicationData.COLUMN_APPLICATIONID);\n\t\t\t_commitTransactionIfRecommended();\n\n\t\t\t// create ApplicationItemRelation\n\t\t\tlong appid = (Long) app.get(ApplicationData.COLUMN_APPLICATIONID);\n\t\t\tApplicationItemRelationData rel = new ApplicationItemRelationData();\n\t\t\trel.set(ApplicationItemRelationData.COLUMN_APPLICATIONID, appid);\n\t\t\trel.set(ApplicationItemRelationData.COLUMN_ITEMID, itemid);\n\t\t\trel.set(ApplicationItemRelationData.COLUMN_HOSTID, hostid);\n\t\t\trel.insert(zabbixLocalDB);\n\t\t\t_commitTransactionIfRecommended();\n\n\t\t\tnum++;\n\t\t}\n\t\tif (num == 0) {\n\t\t\t// if there's no application, the ID #0 must be added (for other)\n\t\t\tApplicationItemRelationData rel = new ApplicationItemRelationData();\n\t\t\trel.set(ApplicationItemRelationData.COLUMN_APPLICATIONID, 0);\n\t\t\trel.set(ApplicationItemRelationData.COLUMN_ITEMID, itemid);\n\t\t\trel.set(ApplicationItemRelationData.COLUMN_HOSTID, hostid);\n\t\t\trel.insert(zabbixLocalDB);\n\n\t\t\t// if #0 \"other\" does not exist yet, it has to be created\n\t\t\tApplicationData app = new ApplicationData();\n\t\t\tapp.set(ApplicationData.COLUMN_APPLICATIONID, 0);\n\t\t\tapp.set(ApplicationData.COLUMN_NAME, \"- \"+context.getResources().getString(R.string.other)+\" -\");\n\t\t\tapp.insert(zabbixLocalDB, ApplicationData.COLUMN_APPLICATIONID);\n\t\t}\n\t}\n\n\t/**\n\t * import the newest event of a trigger\n\t * @param triggerid\n\t * @throws JSONException\n\t * @throws IOException\n\t * @throws HttpAuthorizationRequiredException\n\t * @throws NoAPIAccessException\n\t */\n\tpublic void importEventByTriggerId(String triggerid) throws JSONException, IOException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\tif (!isCached(EventData.TABLE_NAME, \"triggerid=\"+triggerid)) {\n\t\t\t_startTransaction();\n\t\t\tzabbixLocalDB.delete(EventData.TABLE_NAME, EventData.COLUMN_OBJECTID+\"=\"+triggerid, null);\n\n\t\t\tJSONObject params = new JSONObject()\n\t\t\t\t.put(\"output\", \"extend\")\n\t\t\t\t.put(isVersion2?\"selectHosts\":\"select_hosts\", \"extend\")\n\t\t\t\t.put(\"triggerids\", new JSONArray().put(triggerid))\n\t\t\t\t.put(\"limit\", 1)\n\t\t\t\t.put(\"source\", 0);\n\t\t\tif (!isVersion2) {\n\t\t\t\tparams.put(\"sortfield\", \"clock\")\n\t\t\t\t\t.put(\"sortorder\", \"DESC\");\n\t\t\t}\n\n\t\t\tJsonArrayReader events = _queryStream(\n\t\t\t\t\t\"event.get\"\n\t\t\t\t\t, params\n\t\t\t);\n\t\t\timportEvents(events, null);\n\t\t\tevents.close();\n\n\t\t\tsetCached(EventData.TABLE_NAME, \"triggerid=\"+triggerid, ZabbixConfig.CACHE_LIFETIME_EVENTS);\n\t\t\t_endTransaction();\n\t\t}\n\t}\n\n\t/**\n\t * import the newest events\n\t * @throws ClientProtocolException\n\t * @throws IOException\n\t * @throws JSONException\n\t * @throws HttpAuthorizationRequiredException\n\t * @throws NoAPIAccessException\n\t */\n\tpublic void importEvents() throws ClientProtocolException, IOException, JSONException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\tif (!isCached(EventData.TABLE_NAME, null)) {\n\t\t\t_startTransaction();\n\t\t\tzabbixLocalDB.delete(EventData.TABLE_NAME, null, null);\n\t\t\tzabbixLocalDB.delete(TriggerData.TABLE_NAME, null, null);\n\t\t\tzabbixLocalDB.delete(CacheData.TABLE_NAME, CacheData.COLUMN_KIND+\"='\"+EventData.TABLE_NAME+\"'\", null);\n\t\t\tzabbixLocalDB.delete(CacheData.TABLE_NAME, CacheData.COLUMN_KIND+\"='\"+TriggerData.TABLE_NAME+\"'\", null);\n\n\t\t\tint numEvents = ZabbixConfig.EVENTS_GET_LIMIT;\n\n\t\t\tJSONObject params = new JSONObject()\n\t\t\t\t.put(\"output\", \"extend\")\n\t\t\t\t.put(\"limit\", ZabbixConfig.EVENTS_GET_LIMIT)\n\t\t\t\t.put(isVersion2?\"selectHosts\":\"select_hosts\", \"extend\")\n\t\t\t\t.put(isVersion2?\"selectTriggers\":\"select_triggers\", \"extend\")\n\t\t\t\t.put(\"source\", 0)\n\t\t\t\t.put(\"time_from\", (new Date().getTime()/1000) - ZabbixConfig.EVENT_GET_TIME_FROM_SHIFT);\n\t\t\tif (!isVersion2) {\n\t\t\t\t// in Zabbix version <2.0, this is not default\n\t\t\t\tparams.put(\"sortfield\", \"clock\")\n\t\t\t\t\t.put(\"sortorder\", \"DESC\");\n\t\t\t}\n\t\t\tJsonArrayReader events = _queryStream(\n\t\t\t\t\t\"event.get\"\n\t\t\t\t\t, params\n\t\t\t);\n\t\t\timportEvents(events, numEvents);\n\t\t\tevents.close();\n\n\t\t\tsetCached(EventData.TABLE_NAME, null, ZabbixConfig.CACHE_LIFETIME_EVENTS);\n\t\t\t_endTransaction();\n\t\t}\n\t}\n\n\t/**\n\t * @param events stream\n\t * @param numEvents if null, no progressbar-update AND only isert, if it does not exist. If !null, progressbar-update AND always insert without checking\n\t * @throws JsonParseException\n\t * @throws IOException\n\t */\n\tprivate void importEvents(JsonArrayReader events, Integer numEvents) throws JsonParseException, IOException {\n\t\tint i=0;\n\t\tJsonObjectReader eventReader;\n\t\twhile ((eventReader = events.next()) != null) {\n\t\t\tEventData e = new EventData();\n\t\t\twhile (eventReader.nextValueToken()) {\n\t\t\t\tString propName = eventReader.getCurrentName();\n\t\t\t\tif (propName.equals(\"hosts\")) {\n\t\t\t\t\t// import hosts\n\t\t\t\t\tString hostnames = (String) importHosts(eventReader.getJsonArray(), null)[0];\n\t\t\t\t\t// store hosts namen\n\t\t\t\t\te.set(EventData.COLUMN_HOSTS, hostnames);\n\t\t\t\t} else if (propName.equals(\"triggers\")) {\n\t\t\t\t\t// import triggers\n\t\t\t\t\timportTriggers(eventReader.getJsonArray());\n\t\t\t\t} else if (propName.equals(EventData.COLUMN_EVENTID)) {\n\t\t\t\t\te.set(EventData.COLUMN_EVENTID, Long.parseLong(eventReader.getText()));\n\t\t\t\t} else if (propName.equals(EventData.COLUMN_CLOCK)) {\n\t\t\t\t\te.set(EventData.COLUMN_CLOCK, Integer.parseInt(eventReader.getText()));\n\t\t\t\t} else if (propName.equals(EventData.COLUMN_OBJECTID)) {\n\t\t\t\t\te.set(EventData.COLUMN_OBJECTID, Long.parseLong(eventReader.getText()));\n\t\t\t\t} else if (propName.equals(EventData.COLUMN_ACK)) {\n\t\t\t\t\te.set(EventData.COLUMN_ACK, Integer.parseInt(eventReader.getText()) == 1);\n\t\t\t\t} else if (propName.equals(EventData.COLUMN_VALUE)) {\n\t\t\t\t\te.set(EventData.COLUMN_VALUE, Integer.parseInt(eventReader.getText()));\n\t\t\t\t} else {\n\t\t\t\t\teventReader.nextProperty();\n\t\t\t\t}\n\t\t\t}\n\t\t\t// event is parsed and can be inserted into the db\n\t\t\tif (numEvents == null) {\n\t\t\t\te.insert(zabbixLocalDB, EventData.COLUMN_EVENTID);\n\t\t\t} else {\n\t\t\t\te.insert(zabbixLocalDB);\n\t\t\t\tif (++i % 10 == 0) {\n\t\t\t\t\tshowProgress(i*100/numEvents);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t_commitTransactionIfRecommended();\n\t\t}\n\t}\n\n\t/**\n\t * import graph items\n\t *\n\t * @param graphItems\n\t * @return true, if graphid column has to be updated from -1 to the correct graphid later.\n\t * @throws JsonParseException\n\t * @throws NumberFormatException\n\t * @throws IOException\n\t */\n\tprivate boolean importGraphItems(JsonArrayReader graphItems) throws JsonParseException, NumberFormatException, IOException {\n\t\tboolean mustSetGraphid = false;\n\t\tJsonObjectReader graphItemReader;\n\t\twhile ((graphItemReader = graphItems.next()) != null) {\n\t\t\tGraphItemData gi = new GraphItemData();\n\t\t\twhile (graphItemReader.nextValueToken()) {\n\t\t\t\tString propName = graphItemReader.getCurrentName();\n\t\t\t\tif (propName.equals(\"gitemid\")) {\n\t\t\t\t\tgi.set(GraphItemData.COLUMN_GRAPHITEMID, Long.parseLong(graphItemReader.getText()));\n\t\t\t\t} else if (propName.equals(GraphItemData.COLUMN_GRAPHID)) {\n\t\t\t\t\tgi.set(GraphItemData.COLUMN_GRAPHID, Long.parseLong(graphItemReader.getText()));\n\t\t\t\t} else if (propName.equals(GraphItemData.COLUMN_ITEMID)) {\n\t\t\t\t\tgi.set(GraphItemData.COLUMN_ITEMID, Long.parseLong(graphItemReader.getText()));\n\t\t\t\t} else if (propName.equals(GraphItemData.COLUMN_COLOR)) {\n\t\t\t\t\t// hex string => color int\n\t\t\t\t\tgi.set(GraphItemData.COLUMN_COLOR, Color.parseColor(\"#\"+graphItemReader.getText()));\n\t\t\t\t} else {\n\t\t\t\t\tgraphItemReader.nextProperty();\n\t\t\t\t}\n\t\t\t}\n\t\t\t// if graphid-column was not set, this must be done later. temporary graphid=-1\n\t\t\tif (gi.get(GraphItemData.COLUMN_GRAPHID) == null) {\n\t\t\t\tgi.set(GraphItemData.COLUMN_GRAPHID, -1);\n\t\t\t\tmustSetGraphid = true;\n\t\t\t}\n\t\t\tgi.insert(zabbixLocalDB);\n\t\t}\n\t\treturn mustSetGraphid;\n\t}\n\n\tpublic void importGraphsForScreen(long screenid) throws ClientProtocolException, IOException, JSONException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\tif (!isCached(GraphData.TABLE_NAME, \"screenid=\"+screenid)) {\n\t\t\t_startTransaction();\n\n\t\t\t// collect all graphids\n\t\t\tSet<Long> graphids = new HashSet<Long>();\n\t\t\tCursor cur = zabbixLocalDB.query(ScreenItemData.TABLE_NAME, null, ScreenItemData.COLUMN_SCREENID+\"=\"+screenid, null, null, null, null);\n\t\t\twhile (cur.moveToNext()) {\n\t\t\t\tgraphids.add(cur.getLong(cur.getColumnIndex(ScreenItemData.COLUMN_RESOURCEID)));\n\t\t\t}\n\n\t\t\t// delete old graphs\n\t\t\tString str_graphids = graphids.toString().replace(\"[\", \"\").replace(\"]\", \"\");\n\t\t\tif (str_graphids.length()>0) {\n\t\t\t\tzabbixLocalDB.delete(GraphData.TABLE_NAME, GraphData.COLUMN_GRAPHID+\" IN (\"+str_graphids+\")\", null);\n\t\t\t\tzabbixLocalDB.delete(GraphItemData.TABLE_NAME, GraphItemData.COLUMN_GRAPHID+\" IN (\"+str_graphids+\")\", null);\n\t\t\t}\n\t\t\tzabbixLocalDB.delete(CacheData.TABLE_NAME, CacheData.COLUMN_KIND+\"='\"+GraphData.TABLE_NAME+\"' AND \"+CacheData.COLUMN_FILTER+\"='screenid=\"+screenid+'\\'', null);\n\n\t\t\tJsonArrayReader graphs = _queryStream(\n\t\t\t\t\t\"graph.get\"\n\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t\t.put(isVersion2?\"selectGraphItems\":\"select_graph_items\", \"extend\")\n\t\t\t\t\t\t.put(isVersion2?\"selectItems\":\"select_items\", \"extend\")\n\t\t\t\t\t\t.put(\"output\", \"extend\")\n\t\t\t\t\t\t.put(\"graphids\", new JSONArray(graphids))\n\t\t\t);\n\t\t\tJsonObjectReader graphReader;\n\t\t\twhile ((graphReader = graphs.next()) != null) {\n\t\t\t\tboolean mustSetGraphid = false;\n\t\t\t\tGraphData scr = new GraphData();\n\t\t\t\twhile (graphReader.nextValueToken()) {\n\t\t\t\t\tString propName = graphReader.getCurrentName();\n\t\t\t\t\tif (propName.equals(GraphData.COLUMN_GRAPHID)) {\n\t\t\t\t\t\tscr.set(GraphData.COLUMN_GRAPHID, Long.parseLong(graphReader.getText()));\n\t\t\t\t\t} else if (propName.equals(GraphData.COLUMN_NAME)) {\n\t\t\t\t\t\tscr.set(GraphData.COLUMN_NAME, graphReader.getText());\n\t\t\t\t\t} else if (propName.equals(\"gitems\")) {\n\t\t\t\t\t\tmustSetGraphid = importGraphItems(graphReader.getJsonArray());\n\t\t\t\t\t} else if (propName.equals(\"items\")) {\n\t\t\t\t\t\timportItems(graphReader.getJsonArray(), 0, true);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tgraphReader.nextProperty();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tscr.insert(zabbixLocalDB);\n\t\t\t\tif (mustSetGraphid) {\n\t\t\t\t\tContentValues values = new ContentValues(1);\n\t\t\t\t\tvalues.put(GraphItemData.COLUMN_GRAPHID, (Long) scr.get(GraphData.COLUMN_GRAPHID));\n\t\t\t\t\tzabbixLocalDB.update(\n\t\t\t\t\t\t\tGraphItemData.TABLE_NAME\n\t\t\t\t\t\t\t, values\n\t\t\t\t\t\t\t, GraphItemData.COLUMN_GRAPHID+\"=-1\"\n\t\t\t\t\t\t\t, null);\n\t\t\t\t}\n\t\t\t}\n\t\t\tgraphs.close();\n\n\t\t\tsetCached(GraphData.TABLE_NAME, \"screenid=\"+screenid, ZabbixConfig.CACHE_LIFETIME_SCREENS);\n\t\t\t_endTransaction();\n\t\t}\n\t}\n\n\tpublic void importHistoryDetails(String itemid) throws ClientProtocolException, IOException, JSONException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\tif (!isCached(HistoryDetailData.TABLE_NAME, itemid)) {\n\t\t\t_startTransaction();\n\t\t\tzabbixLocalDB.delete(HistoryDetailData.TABLE_NAME, HistoryDetailData.COLUMN_ITEMID+\"=\"+itemid, null);\n\n\t\t\t// the past 2 hours\n\t\t\tlong time_till = new Date().getTime() / 1000;\n\t\t\tlong time_from = time_till - ZabbixConfig.HISTORY_GET_TIME_FROM_SHIFT; // jetzt-2h\n\n\t\t\t// Workaround: historydetails only comes if you use the correct \"history\"-parameter.\n\t\t\t// this parameter can be \"null\" or a number 0-4. Because we don't know when to use which,\n\t\t\t// we try them all, until we get results.\n\t\t\tInteger historytype = null;\n\t\t\tJSONObject result = _queryBuffer(\n\t\t\t\t\t\"history.get\"\n\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t\t.put(\"limit\", 1)\n\t\t\t\t\t\t.put(\"history\", historytype) // for integer ?\n\t\t\t\t\t\t.put(\"itemids\", new JSONArray().put(itemid))\n\t\t\t\t\t\t.put(\"time_from\", time_from)\n\t\t\t);\n\n\t\t\tJSONArray testHistorydetails = result.getJSONArray(\"result\");\n\t\t\tif (testHistorydetails.length() == 0) {\n\t\t\t\thistorytype = -1;\n\t\t\t\twhile (testHistorydetails.length() == 0 && ++historytype <= 4) {\n\t\t\t\t\t// if we get an empty array, we try another history parameter\n\t\t\t\t\tresult = _queryBuffer(\n\t\t\t\t\t\t\t\"history.get\"\n\t\t\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t\t\t\t.put(\"output\", \"extend\")\n\t\t\t\t\t\t\t\t.put(\"limit\", 1)\n\t\t\t\t\t\t\t\t.put(\"history\", historytype)\n\t\t\t\t\t\t\t\t.put(\"itemids\", new JSONArray().put(itemid))\n\t\t\t\t\t\t\t\t.put(\"time_from\", time_from)\n\t\t\t\t\t);\n\t\t\t\t\ttestHistorydetails = result.getJSONArray(\"result\");\n\t\t\t\t}\n\t\t\t}\n\t\t\t// correct historytype found and there are data\n\t\t\tif (testHistorydetails.length() > 0) {\n\t\t\t\t// count of the entries cannot be detected (zabbix bug),\n\t\t\t\t// so we use a fiction\n\t\t\t\tint numDetails = 400;\n\t\t\t\tint curI=0;\n\t\t\t\tJsonArrayReader historydetails = _queryStream(\n\t\t\t\t\t\t\"history.get\"\n\t\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t\t\t.put(\"output\", \"extend\")\n\t\t\t\t\t\t\t.put(\"limit\", ZabbixConfig.HISTORY_GET_LIMIT)\n\t\t\t\t\t\t\t.put(\"history\", historytype)\n\t\t\t\t\t\t\t.put(\"itemids\", new JSONArray().put(itemid))\n\t\t\t\t\t\t\t.put(\"time_from\", time_from)\n\t\t\t\t\t\t\t.put(\"sortfield\", \"clock\")\n\t\t\t\t\t\t\t.put(\"sortorder\", \"DESC\")\n\t\t\t\t);\n\t\t\t\tJsonObjectReader historydetail;\n\t\t\t\ttry {\n\t\t\t\t\tint selI = 0;\n\t\t\t\t\twhile ((historydetail = historydetails.next()) != null) {\n\t\t\t\t\t\t// save only every 20th\n\t\t\t\t\t\tif (selI++ % 20 != 0) {\n\t\t\t\t\t\t\twhile (historydetail.nextValueToken()) {\n\t\t\t\t\t\t\t\thistorydetail.nextProperty();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tHistoryDetailData h = new HistoryDetailData();\n\t\t\t\t\t\twhile (historydetail.nextValueToken()) {\n\t\t\t\t\t\t\tString propName = historydetail.getCurrentName();\n\t\t\t\t\t\t\tif (propName.equals(HistoryDetailData.COLUMN_CLOCK)) {\n\t\t\t\t\t\t\t\th.set(HistoryDetailData.COLUMN_CLOCK, Integer.parseInt(historydetail.getText()));\n\t\t\t\t\t\t\t} else if (propName.equals(HistoryDetailData.COLUMN_ITEMID)) {\n\t\t\t\t\t\t\t\th.set(HistoryDetailData.COLUMN_ITEMID, Long.parseLong(historydetail.getText()));\n\t\t\t\t\t\t\t} else if (propName.equals(HistoryDetailData.COLUMN_VALUE)) {\n\t\t\t\t\t\t\t\th.set(HistoryDetailData.COLUMN_VALUE, Double.parseDouble(historydetail.getText()));\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\thistorydetail.nextProperty();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\th.insert(zabbixLocalDB);\n\t\t\t\t\t\tif (++curI % 10 == 0) {\n\t\t\t\t\t\t\tshowProgress(Math.min(curI*100/numDetails, 84));\n\t\t\t\t\t\t}\n\t\t\t\t\t\t_commitTransactionIfRecommended();\n\t\t\t\t\t}\n\t\t\t\t} catch (NumberFormatException e) {\n\t\t\t\t\t// data are unuseable, e.g. because it's a string\n\t\t\t\t}\n\t\t\t\thistorydetails.close();\n\t\t\t}\n\t\t\tsetCached(HistoryDetailData.TABLE_NAME, itemid, ZabbixConfig.CACHE_LIFETIME_HISTORY_DETAILS);\n\t\t\t_endTransaction();\n\t\t}\n\t}\n\n\tprivate long importHostGroups(JsonArrayReader jsonArray) throws JsonParseException, IOException {\n\t\tlong firstHostGroupId = -1;\n\t\tJsonObjectReader hostReader;\n\t\twhile ((hostReader = jsonArray.next()) != null) {\n\t\t\tHostGroupData h = new HostGroupData();\n\t\t\twhile (hostReader.nextValueToken()) {\n\t\t\t\tString propName = hostReader.getCurrentName();\n\t\t\t\tif (propName.equals(HostGroupData.COLUMN_GROUPID)) {\n\t\t\t\t\tlong id = Long.parseLong(hostReader.getText());\n\t\t\t\t\tif (firstHostGroupId == -1) firstHostGroupId = id;\n\t\t\t\t\th.set(HostGroupData.COLUMN_GROUPID, id);\n\t\t\t\t} else if (propName.equals(HostGroupData.COLUMN_NAME)) {\n\t\t\t\t\th.set(HostGroupData.COLUMN_NAME, hostReader.getText());\n\t\t\t\t} else {\n\t\t\t\t\thostReader.nextProperty();\n\t\t\t\t}\n\t\t\t}\n\t\t\th.insert(zabbixLocalDB, HostGroupData.COLUMN_GROUPID);\n\t\t\t_commitTransactionIfRecommended();\n\t\t}\n\n\t\treturn firstHostGroupId;\n\t}\n\n\t/**\n\t * import the hosts from stream\n\t * @param jsonArray stream\n\t * @param numHosts count of hosts for progressbar. null if unknown.\n\t * @return Object[] {(String) comma-separated all Hostnames, (Long) 1. host id}\n\t * @throws JsonParseException\n\t * @throws IOException\n\t */\n\tprivate Object[] importHosts(JsonArrayReader jsonArray, Integer numHosts) throws JsonParseException, IOException {\n\t\tList<String> hostnames = new ArrayList<String>();\n\t\tlong firstHostId = -1;\n\t\tJsonObjectReader hostReader;\n\t\tint i=0;\n\t\twhile ((hostReader = jsonArray.next()) != null) {\n\t\t\tHostData h = new HostData();\n\t\t\twhile (hostReader.nextValueToken()) {\n\t\t\t\tString propName = hostReader.getCurrentName();\n\t\t\t\tif (propName.equals(HostData.COLUMN_HOSTID)) {\n\t\t\t\t\th.set(HostData.COLUMN_HOSTID, Long.parseLong(hostReader.getText()));\n\t\t\t\t\tif (firstHostId == -1) {\n\t\t\t\t\t\tfirstHostId = (Long) h.get(HostData.COLUMN_HOSTID);\n\t\t\t\t\t}\n\t\t\t\t} else if (propName.equals(HostData.COLUMN_HOST)) {\n\t\t\t\t\tString host = hostReader.getText();\n\t\t\t\t\thostnames.add(host);\n\t\t\t\t\th.set(HostData.COLUMN_HOST, host);\n\t\t\t\t} else if (propName.equals(\"groups\")) {\n\t\t\t\t\tlong groupid = importHostGroups(hostReader.getJsonArray());\n\t\t\t\t\tif (groupid != -1) {\n\t\t\t\t\t\th.set(HostData.COLUMN_GROUPID, groupid);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\thostReader.nextProperty();\n\t\t\t\t}\n\t\t\t}\n\t\t\t// host without group will get group #0 (other)\n\t\t\tif (h.get(HostData.COLUMN_GROUPID) == null) {\n\t\t\t\th.set(HostData.COLUMN_GROUPID, 0);\n\t\t\t\t// create \"other\" hostgroup #1\n\t\t\t\tHostGroupData hg = new HostGroupData();\n\t\t\t\thg.set(HostGroupData.COLUMN_GROUPID, 0);\n\t\t\t\thg.set(HostGroupData.COLUMN_NAME, \"- \"+context.getResources().getString(R.string.other)+\" -\");\n\t\t\t\thg.insert(zabbixLocalDB, HostGroupData.COLUMN_GROUPID);\n\t\t\t}\n\t\t\th.insert(zabbixLocalDB, HostData.COLUMN_HOSTID);\n\t\t\tif (numHosts != null && ++i % 10 == 0) {\n\t\t\t\tshowProgress(i*100/numHosts);\n\t\t\t}\n\t\t\t_commitTransactionIfRecommended();\n\t\t}\n\n\t\treturn new Object[] {hostnames.toString().replaceAll(\"[\\\\[\\\\]]\", \"\"), firstHostId};\n\t}\n\n\tpublic void importHostsAndGroups() throws JSONException, IOException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\tif (!isCached(HostData.TABLE_NAME, null)) {\n\t\t\t_startTransaction();\n\t\t\tzabbixLocalDB.delete(HostData.TABLE_NAME, null, null);\n\t\t\tzabbixLocalDB.delete(HostGroupData.TABLE_NAME, null, null);\n\n\t\t\t// get count of hosts\n\t\t\tJSONObject result = _queryBuffer(\n\t\t\t\t\t\"host.get\"\n\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t\t.put(\"countOutput\", 1)\n\t\t\t\t\t\t.put(\"limit\", ZabbixConfig.HOST_GET_LIMIT)\n\t\t\t\t\t\t.put(isVersion2?\"selectGroups\":\"select_groups\", \"extend\")\n\t\t\t);\n\t\t\tint numHosts = result.getInt(\"result\");\n\t\t\tJsonArrayReader hosts = _queryStream(\n\t\t\t\t\t\"host.get\"\n\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t\t.put(\"output\", \"extend\")\n\t\t\t\t\t\t.put(\"limit\", ZabbixConfig.HOST_GET_LIMIT)\n\t\t\t\t\t\t.put(isVersion2?\"selectGroups\":\"select_groups\", \"extend\")\n\t\t\t);\n\t\t\timportHosts(hosts, numHosts);\n\t\t\thosts.close();\n\n\t\t\tsetCached(HostData.TABLE_NAME, null, ZabbixConfig.CACHE_LIFETIME_HOSTS);\n\t\t\t_endTransaction();\n\t\t}\n\t}\n\n\t/**\n\t * import items from stream.\n\t * @param items stream\n\t * @param numItems count for progressbar, if 0 no progressbarupdate\n\t * @param checkBeforeInsert if true, only make an insert if item does not exist\n\t * @return the first item id\n\t * @throws JsonParseException\n\t * @throws IOException\n\t */\n\tprivate long importItems(JsonArrayReader items, int numItems, boolean checkBeforeInsert) throws JsonParseException, IOException {\n\t\tlong firstItemId = -1;\n\t\tint curI=0;\n\t\tJsonObjectReader itemReader;\n\t\twhile ((itemReader = items.next()) != null) {\n\t\t\tItemData i = new ItemData();\n\t\t\tString key_ = null;\n\t\t\twhile (itemReader.nextValueToken()) {\n\t\t\t\tString propName = itemReader.getCurrentName();\n\t\t\t\tif (propName.equals(ItemData.COLUMN_ITEMID)) {\n\t\t\t\t\ti.set(ItemData.COLUMN_ITEMID, Long.parseLong(itemReader.getText()));\n\t\t\t\t\tif (firstItemId == -1) {\n\t\t\t\t\t\tfirstItemId = (Long) i.get(ItemData.COLUMN_ITEMID);\n\t\t\t\t\t}\n\t\t\t\t} else if (propName.equals(ItemData.COLUMN_HOSTID)) {\n\t\t\t\t\ti.set(ItemData.COLUMN_HOSTID, Long.parseLong(itemReader.getText()));\n\t\t\t\t} else if (propName.equals(ItemData.COLUMN_DESCRIPTION) || propName.equals(\"name\")) {\n\t\t\t\t\t// since zabbix 2.x is the name of the item \"name\"\n\t\t\t\t\t// before zabbix 2.x the name field was \"description\"\n\t\t\t\t\tif (isVersion2 && propName.equals(\"name\")) {\n\t\t\t\t\t\ti.set(ItemData.COLUMN_DESCRIPTION, itemReader.getText());\n\t\t\t\t\t} else if (!isVersion2) {\n\t\t\t\t\t\ti.set(ItemData.COLUMN_DESCRIPTION, itemReader.getText());\n\t\t\t\t\t}\n\t\t\t\t} else if (propName.equals(ItemData.COLUMN_LASTCLOCK)) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\ti.set(ItemData.COLUMN_LASTCLOCK, Integer.parseInt(itemReader.getText()));\n\t\t\t\t\t} catch (NumberFormatException e) {\n\t\t\t\t\t\t// ignore\n\t\t\t\t\t}\n\t\t\t\t} else if (propName.equals(ItemData.COLUMN_LASTVALUE)) {\n\t\t\t\t\ti.set(ItemData.COLUMN_LASTVALUE, itemReader.getText());\n\t\t\t\t} else if (propName.equals(ItemData.COLUMN_UNITS)) {\n\t\t\t\t\ti.set(ItemData.COLUMN_UNITS, itemReader.getText());\n\t\t\t\t} else if (propName.equals(\"key_\")) {\n\t\t\t\t\tkey_ = itemReader.getText();\n\t\t\t\t} else if (propName.equals(\"applications\")) {\n\t\t\t\t\t// at this point itemid and hostid is unknown\n\t\t\t\t\t// because of this, all applicationrelations will be saved with itemid and hostid \"-1\".\n\t\t\t\t\t// later the IDs will be replaced with the correct\n\t\t\t\t\timportApplications(-1, -1, itemReader.getJsonArray());\n\t\t\t\t} else {\n\t\t\t\t\titemReader.nextProperty();\n\t\t\t\t}\n\t\t\t}\n\t\t\t// if applicable replace placeholder\n\t\t\tString description = (String) i.get(ItemData.COLUMN_DESCRIPTION);\n\t\t\tif (description.matches(\".*\\\\$[0-9].*\")) {\n\t\t\t\tif (key_ != null && key_.indexOf('[') != -1) {\n\t\t\t\t\tString[] keys = key_.substring(key_.indexOf('[')+1, key_.indexOf(']')).split(\",\");\n\t\t\t\t\tfor (int ix=0; ix<keys.length; ix++) {\n\t\t\t\t\t\tdescription = description.replace(\"$\"+(ix+1), keys[ix]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\ti.set(ItemData.COLUMN_DESCRIPTION, description);\n\t\t\tif (checkBeforeInsert) {\n\t\t\t\ti.insert(zabbixLocalDB, ItemData.COLUMN_ITEMID);\n\t\t\t} else {\n\t\t\t\ti.insert(zabbixLocalDB);\n\t\t\t}\n\t\t\tif (numItems > 0 && ++curI % 10 == 0) {\n\t\t\t\tshowProgress(curI*100/numItems);\n\t\t\t}\n\n\t\t\t// now the \"-1\" IDs of applicationsrelation will be replaced with the correct itemID\n\t\t\tContentValues values = new ContentValues(2);\n\t\t\tvalues.put(ApplicationItemRelationData.COLUMN_ITEMID, (Long) i.get(ItemData.COLUMN_ITEMID));\n\t\t\tvalues.put(ApplicationItemRelationData.COLUMN_HOSTID, (Long) i.get(ItemData.COLUMN_HOSTID));\n\t\t\tzabbixLocalDB.update(\n\t\t\t\t\tApplicationItemRelationData.TABLE_NAME\n\t\t\t\t\t, values\n\t\t\t\t\t, ApplicationItemRelationData.COLUMN_ITEMID+\"=-1\"\n\t\t\t\t\t, null\n\t\t\t);\n\t\t}\n\t\treturn firstItemId;\n\t}\n\n\tpublic void importItems(long hostid) throws JSONException, IOException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\tif (!isCached(ItemData.TABLE_NAME, \"hostid=\"+hostid)) {\n\t\t\t_startTransaction();\n\t\t\tzabbixLocalDB.delete(ItemData.TABLE_NAME, ItemData.COLUMN_HOSTID+\"=\"+hostid, null);\n\t\t\tzabbixLocalDB.delete(ApplicationItemRelationData.TABLE_NAME, ApplicationItemRelationData.COLUMN_HOSTID+\"=\"+hostid, null);\n\n\t\t\t// count of items\n\t\t\tJSONObject result = _queryBuffer(\n\t\t\t\t\t\"item.get\"\n\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t.put(\"output\", \"extend\")\n\t\t\t\t\t.put(\"countOutput\", 1)\n\t\t\t\t\t.put(\"limit\", ZabbixConfig.ITEM_GET_LIMIT)\n\t\t\t\t\t.put(\"hostids\", new JSONArray().put(hostid))\n\t\t\t);\n\t\t\tint numItems = result.getInt(\"result\");\n\t\t\tJsonArrayReader items = _queryStream(\n\t\t\t\t\t\"item.get\"\n\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t\t.put(\"output\", \"extend\")\n\t\t\t\t\t\t.put(\"limit\", ZabbixConfig.ITEM_GET_LIMIT)\n\t\t\t\t\t\t.put(isVersion2?\"selectApplications\":\"select_applications\", \"extend\")\n\t\t\t\t\t\t.put(\"hostids\", new JSONArray().put(hostid))\n\t\t\t);\n\t\t\timportItems(items, numItems, false);\n\t\t\titems.close();\n\n\t\t\tsetCached(ItemData.TABLE_NAME, \"hostid=\"+hostid, ZabbixConfig.CACHE_LIFETIME_ITEMS);\n\t\t\t_endTransaction();\n\t\t}\n\t}\n\n\tprivate void importScreenItems(JsonArrayReader screenItems) throws JsonParseException, NumberFormatException, IOException {\n\t\tJsonObjectReader screenItemReader;\n\t\twhile ((screenItemReader = screenItems.next()) != null) {\n\t\t\tScreenItemData si = new ScreenItemData();\n\t\t\tint resourcetype = -1;\n\t\t\twhile (screenItemReader.nextValueToken()) {\n\t\t\t\tString propName = screenItemReader.getCurrentName();\n\t\t\t\tif (propName.equals(ScreenItemData.COLUMN_SCREENITEMID)) {\n\t\t\t\t\tsi.set(ScreenItemData.COLUMN_SCREENITEMID, Long.parseLong(screenItemReader.getText()));\n\t\t\t\t} else if (propName.equals(ScreenItemData.COLUMN_SCREENID)) {\n\t\t\t\t\tsi.set(ScreenItemData.COLUMN_SCREENID, Long.parseLong(screenItemReader.getText()));\n\t\t\t\t} else if (propName.equals(ScreenItemData.COLUMN_RESOURCEID)) {\n\t\t\t\t\tsi.set(ScreenItemData.COLUMN_RESOURCEID, Long.parseLong(screenItemReader.getText()));\n\t\t\t\t} else if (propName.equals(\"resourcetype\")) {\n\t\t\t\t\tresourcetype = Integer.parseInt(screenItemReader.getText());\n\t\t\t\t} else {\n\t\t\t\t\tscreenItemReader.nextProperty();\n\t\t\t\t}\n\t\t\t}\n\t\t\t// only resouretype == 0\n\t\t\tif (resourcetype == 0) {\n\t\t\t\tsi.insert(zabbixLocalDB);\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic void importScreens() throws ClientProtocolException, IOException, JSONException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\tif (!isCached(ScreenData.TABLE_NAME, null)) {\n\t\t\t_startTransaction();\n\n\t\t\tzabbixLocalDB.delete(ScreenData.TABLE_NAME, null, null);\n\t\t\tzabbixLocalDB.delete(ScreenItemData.TABLE_NAME, null, null);\n\t\t\tzabbixLocalDB.delete(CacheData.TABLE_NAME, CacheData.COLUMN_KIND+\"='\"+ScreenData.TABLE_NAME+\"'\", null);\n\n\t\t\tJsonArrayReader screens = _queryStream(\n\t\t\t\t\t(isVersion2?\"s\":\"S\")+\"creen.get\"\n\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t\t.put(\"output\", \"extend\")\n\t\t\t\t\t\t.put(isVersion2?\"selectScreenItems\":\"select_screenitems\", \"extend\")\n\t\t\t);\n\t\t\tJsonObjectReader screenReader;\n\t\t\twhile ((screenReader = screens.next()) != null) {\n\t\t\t\tScreenData scr = new ScreenData();\n\t\t\t\twhile (screenReader.nextValueToken()) {\n\t\t\t\t\tString propName = screenReader.getCurrentName();\n\t\t\t\t\tif (propName.equals(ScreenData.COLUMN_SCREENID)) {\n\t\t\t\t\t\tscr.set(ScreenData.COLUMN_SCREENID, Long.parseLong(screenReader.getText()));\n\t\t\t\t\t} else if (propName.equals(ScreenData.COLUMN_NAME)) {\n\t\t\t\t\t\tscr.set(ScreenData.COLUMN_NAME, screenReader.getText());\n\t\t\t\t\t} else if (propName.equals(\"screenitems\")) {\n\t\t\t\t\t\timportScreenItems(screenReader.getJsonArray());\n\t\t\t\t\t} else {\n\t\t\t\t\t\tscreenReader.nextProperty();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tscr.insert(zabbixLocalDB);\n\t\t\t}\n\t\t\tscreens.close();\n\n\t\t\tsetCached(ScreenData.TABLE_NAME, null, ZabbixConfig.CACHE_LIFETIME_SCREENS);\n\t\t\t_endTransaction();\n\t\t}\n\t}\n\n\tpublic void importTrigger(String triggerid) throws JSONException, IOException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\tif (!isCached(TriggerData.TABLE_NAME, \"triggerid=\"+triggerid)) {\n\t\t\t_startTransaction();\n\n\t\t\tJsonArrayReader trigger = _queryStream(\n\t\t\t\t\t\"trigger.get\"\n\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t\t.put(\"output\", \"extend\")\n\t\t\t\t\t\t.put(isVersion2?\"selectHosts\":\"select_hosts\", \"extend\")\n\t\t\t\t\t\t.put(\"triggerids\", new JSONArray().put(triggerid))\n\t\t\t);\n\t\t\timportTriggers(trigger);\n\t\t\ttrigger.close();\n\n\t\t\tsetCached(TriggerData.TABLE_NAME, \"triggerid=\"+triggerid, ZabbixConfig.CACHE_LIFETIME_TRIGGERS);\n\t\t\t_endTransaction();\n\t\t}\n\t}\n\n\t/**\n\t * importiert ein trigger mit dem attribute itemid. ggf. wird der trigger zuerst gelöscht und neu angelegt.\n\t * imports a trigger with the attribute itemid. if trigger already exists, it will be removed first.\n\t * @param triggerid\n\t * @throws JSONException\n\t * @throws IOException\n\t * @throws HttpAuthorizationRequiredException\n\t * @throws NoAPIAccessException\n\t */\n\tpublic void importTriggerColumnItemId(String triggerid) throws JSONException, IOException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\t// check if the trigger exists and if the itemid was set\n\t\tboolean mustImport = true;\n\t\tCursor cur = zabbixLocalDB.query(TriggerData.TABLE_NAME, null, TriggerData.COLUMN_TRIGGERID+\"=\"+triggerid, null, null, null, null);\n\t\tif (cur.moveToFirst()) {\n\t\t\tlong itemid = 0;\n\t\t\ttry {\n\t\t\t\titemid = cur.getLong(cur.getColumnIndex(TriggerData.COLUMN_ITEMID));\n\t\t\t} catch (Exception e) {\n\t\t\t\t// no itemid\n\t\t\t}\n\t\t\tif (itemid > 0) {\n\t\t\t\tmustImport = false;\n\t\t\t}\n\t\t}\n\t\tif (mustImport) {\n\t\t\t_startTransaction();\n\t\t\tzabbixLocalDB.delete(TriggerData.TABLE_NAME, TriggerData.COLUMN_TRIGGERID+\"=\"+triggerid, null);\n\t\t\tJsonArrayReader triggers = _queryStream(\n\t\t\t\t\t\"trigger.get\"\n\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t\t.put(\"output\", \"extend\")\n\t\t\t\t\t\t.put(isVersion2?\"selectHosts\":\"select_hosts\", \"extend\")\n\t\t\t\t\t\t.put(isVersion2?\"selectGroups\":\"select_groups\", \"extend\")\n\t\t\t\t\t\t.put(isVersion2?\"selectItems\":\"select_items\", \"extend\")\n\t\t\t\t\t\t.put(\"triggerids\", new JSONArray().put(triggerid))\n\t\t\t\t\t\t.put(\"limit\", 1)\n\t\t\t);\n\t\t\timportTriggers(triggers);\n\t\t\t_endTransaction();\n\t\t}\n\t}\n\n\t/**\n\t * imports the \"warning\"-triggers\n\t * @throws JSONException\n\t * @throws IOException\n\t * @throws HttpAuthorizationRequiredException\n\t * @throws NoAPIAccessException\n\t */\n\tpublic void importTriggers() throws JSONException, IOException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\tif (!isCached(TriggerData.TABLE_NAME, null)) {\n\t\t\t_startTransaction();\n\n\t\t\tlong min = (new Date().getTime()/1000)-ZabbixConfig.STATUS_SHOW_TRIGGER_TIME;\n\t\t\tJsonArrayReader triggers = _queryStream(\n\t\t\t\t\t\"trigger.get\"\n\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t\t.put(\"output\", \"extend\")\n\t\t\t\t\t\t.put(\"sortfield\", \"lastchange\")\n\t\t\t\t\t\t.put(\"sortorder\", \"desc\")\n\t\t\t\t\t\t.put(isVersion2?\"selectHosts\":\"select_hosts\", \"extend\")\n\t\t\t\t\t\t.put(isVersion2?\"selectGroups\":\"select_groups\", \"extend\")\n\t\t\t\t\t\t.put(isVersion2?\"selectItems\":\"select_items\", \"extend\")\n\t\t\t\t\t\t.put(\"lastChangeSince\", min)\n\t\t\t\t\t\t.put(\"only_true\", \"1\")\n\t\t\t\t\t\t.put(\"limit\", ZabbixConfig.TRIGGER_GET_LIMIT)\n\t\t\t\t\t\t.put(\"expandDescription\", true)\n\t\t\t);\n\t\t\timportTriggers(triggers);\n\t\t\ttriggers.close();\n\n\t\t\tsetCached(TriggerData.TABLE_NAME, null, ZabbixConfig.CACHE_LIFETIME_TRIGGERS);\n\t\t\t_endTransaction();\n\t\t}\n\t}\n\n\tprivate void importTriggers(JsonArrayReader jsonArray) throws JsonParseException, IOException {\n\t\tJsonObjectReader triggerReader;\n\t\twhile ((triggerReader = jsonArray.next()) != null) {\n\t\t\tTriggerData t = new TriggerData();\n\t\t\twhile (triggerReader.nextValueToken()) {\n\t\t\t\tString propName = triggerReader.getCurrentName();\n\t\t\t\tif (propName.equals(TriggerData.COLUMN_TRIGGERID)) {\n\t\t\t\t\tt.set(TriggerData.COLUMN_TRIGGERID, Long.parseLong(triggerReader.getText()));\n\t\t\t\t} else if (propName.equals(TriggerData.COLUMN_COMMENTS)) {\n\t\t\t\t\tt.set(TriggerData.COLUMN_COMMENTS, triggerReader.getText());\n\t\t\t\t} else if (propName.equals(TriggerData.COLUMN_DESCRIPTION)) {\n\t\t\t\t\tt.set(TriggerData.COLUMN_DESCRIPTION, triggerReader.getText());\n\t\t\t\t} else if (propName.equals(TriggerData.COLUMN_EXPRESSION)) {\n\t\t\t\t\tt.set(TriggerData.COLUMN_EXPRESSION, triggerReader.getText());\n\t\t\t\t} else if (propName.equals(TriggerData.COLUMN_LASTCHANGE)) {\n\t\t\t\t\tt.set(TriggerData.COLUMN_LASTCHANGE, Integer.parseInt(triggerReader.getText()));\n\t\t\t\t} else if (propName.equals(TriggerData.COLUMN_PRIORITY)) {\n\t\t\t\t\tt.set(TriggerData.COLUMN_PRIORITY, Integer.parseInt(triggerReader.getText()));\n\t\t\t\t} else if (propName.equals(TriggerData.COLUMN_STATUS)) {\n\t\t\t\t\tt.set(TriggerData.COLUMN_STATUS, Integer.parseInt(triggerReader.getText()));\n\t\t\t\t} else if (propName.equals(TriggerData.COLUMN_VALUE)) {\n\t\t\t\t\tt.set(TriggerData.COLUMN_VALUE, Integer.parseInt(triggerReader.getText()));\n\t\t\t\t} else if (propName.equals(TriggerData.COLUMN_URL)) {\n\t\t\t\t\tt.set(TriggerData.COLUMN_URL, triggerReader.getText());\n\t\t\t\t} else if (propName.equals(\"hosts\")) {\n\t\t\t\t\tObject[] hostsCache = importHosts(triggerReader.getJsonArray(), null);\n\t\t\t\t\tt.set(TriggerData.COLUMN_HOSTS, hostsCache[0]);\n\t\t\t\t\tt.set(TriggerData.COLUMN_HOSTID, hostsCache[1]);\n\t\t\t\t} else if (propName.equals(\"groups\")) {\n\t\t\t\t\timportHostGroups(triggerReader.getJsonArray());\n\t\t\t\t} else if (propName.equals(\"items\")) {\n\t\t\t\t\t// store the first item id\n\t\t\t\t\tt.set(TriggerData.COLUMN_ITEMID, importItems(triggerReader.getJsonArray(), 1, true));\n\t\t\t\t} else {\n\t\t\t\t\ttriggerReader.nextProperty();\n\t\t\t\t}\n\t\t\t}\n\t\t\tt.insert(zabbixLocalDB, TriggerData.COLUMN_TRIGGERID);\n\t\t\t_commitTransactionIfRecommended();\n\t\t}\n\t}\n\n\tpublic void importTriggersByItemId(String itemid) throws JSONException, IOException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\tif (!isCached(TriggerData.TABLE_NAME, \"itemid=\"+itemid)) {\n\t\t\t_startTransaction();\n\t\t\tzabbixLocalDB.delete(TriggerData.TABLE_NAME, TriggerData.COLUMN_ITEMID+\"=\"+itemid, null);\n\t\t\tJsonArrayReader triggers = _queryStream(\n\t\t\t\t\t\"trigger.get\"\n\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t\t.put(\"output\", \"extend\")\n\t\t\t\t\t\t.put(isVersion2?\"selectHosts\":\"select_hosts\", \"extend\")\n\t\t\t\t\t\t.put(isVersion2?\"selectGroups\":\"select_groups\", \"extend\")\n\t\t\t\t\t\t.put(isVersion2?\"selectItems\":\"select_items\", \"extend\")\n\t\t\t\t\t\t.put(\"itemids\", new JSONArray().put(itemid))\n\t\t\t\t\t\t.put(\"limit\", 1)\n\t\t\t\t\t\t.put(\"sortfield\", \"lastchange\")\n\t\t\t\t\t\t.put(\"sortorder\", \"DESC\")\n\t\t\t);\n\t\t\timportTriggers(triggers);\n\t\t\tsetCached(TriggerData.TABLE_NAME, \"itemid=\"+itemid, ZabbixConfig.CACHE_LIFETIME_TRIGGERS);\n\t\t\t_endTransaction();\n\t\t}\n\t}\n\n\tpublic boolean isCached(String kind, String filter) {\n\t\tSQLiteQueryBuilder sqlBuilder = new SQLiteQueryBuilder();\n\t\tsqlBuilder.setTables(CacheData.TABLE_NAME);\n\t\tsqlBuilder.appendWhere(CacheData.COLUMN_KIND+\"='\"+kind+\"' AND \");\n\t\tsqlBuilder.appendWhere(CacheData.COLUMN_FILTER+\n\t\t\t\t(filter==null?\" IS NULL\":\"='\"+filter+\"'\")\n\t\t);\n\t\tsqlBuilder.appendWhere(\" AND \"+CacheData.COLUMN_EXPIRE_DATE+\">\"+new Date().getTime()/1000);\n\t\tCursor cur = sqlBuilder.query(\n\t\t\tzabbixLocalDB,\n\t\t\tnull,\n\t\t\tnull,\n\t\t\tnull,\n\t\t\tnull,\n\t\t\tnull,\n\t\t\tnull\n\t\t);\n\t\tLog.i(\"ZabbixContentProvider\", \"isCached \"+kind+\"//\"+filter+\"//\"+cur.moveToFirst());\n\t\treturn cur.moveToFirst();\n\t}\n\n\t/**\n\t * public, for the unit test\n\t */\n\tpublic void setCached(String kind, String filter, int lifetime) {\n\t\tCacheData cache = new CacheData();\n\t\tcache.set(CacheData.COLUMN_EXPIRE_DATE, new Date().getTime()/1000 + lifetime);\n\t\tcache.set(CacheData.COLUMN_KIND, kind);\n\t\tif (filter != null) {\n\t\t\tcache.set(CacheData.COLUMN_FILTER, filter);\n\t\t}\n\t\tcache.insert(zabbixLocalDB);\n\t}\n\n\t/**\n\t * updates the progressbar in the gui\n\t * @param i 0..100\n\t */\n\tpublic void showProgress(int i) {\n\t\t// if applicable, transform the progress\n\t\tif (transformProgressStart != 0 && transformProgressEnd != 0) {\n\t\t\ti = (int) (transformProgressStart + (transformProgressEnd-transformProgressStart)*(double)i/100);\n\t\t}\n\n\t\tIntent intent = new Intent(ZabbixContentProvider.CONTENT_PROVIDER_INTENT_ACTION);\n\t\tintent.putExtra(\"flag\", ZabbixContentProvider.INTENT_FLAG_SHOW_PROGRESS);\n\t\tintent.putExtra(\"value\", i);\n\t\tcontext.sendBroadcast(intent);\n\t}\n\n\t/**\n\t * transforms the progress\n\t * @param start 0% => start%\n\t * @param end 100% => end%\n\t */\n\tpublic void transformProgress(int start, int end) {\n\t\ttransformProgressStart = start;\n\t\ttransformProgressEnd = end;\n\t}\n}\n"],
      "c_hash_sni": "df53c588a80d246f2f77494f72b9fc4b285728ad",
      "name_sni": "src/com/inovex/zabbixmobile/api/ZabbixService.java",
      "c_parents_ss": ["2bbdeb660e92821bffb04b3315e354e34764dc43"],
      "c_imports_removed_t": ["<empty>"],
      "p_hash_sni": "2bbdeb660e92821bffb04b3315e354e34764dc43",
      "c_imports_added_t": ["<empty>"],
      "p_methods_t": ["ApplicationData ApplicationItemRelationData ArrayList, String BasicHttpParams BufferedReader CacheData ContentValues CustomSSLSocketFactory Date DefaultHttpClient EventData GraphData GraphItemData HashSet, Long HistoryDetailData HostData HostGroupData HttpAuthorizationRequiredException HttpPost IOException IllegalStateException InputStreamReader Intent ItemData JSONArray JSONObject JsonArrayReader JsonFactory NoAPIAccessException PreconditionFailedException RuntimeException SQLiteQueryBuilder Scheme SchemeRegistry ScreenData ScreenItemData StringBuilder StringEntity ThreadSafeClientConnManager TriggerData UsernamePasswordCredentials X509TrustManager _commitTransactionIfRecommended _endTransaction _queryBuffer _queryStream _startTransaction add addHeader append appendWhere authenticate beginTransaction close contains createJsonParser createSocket d delete endTransaction endsWith equals execute get getBoolean getColumnIndex getContent getCredentialsProvider getCurrentName getDefaultSharedPreferences getDefaultType getEntity getInstance getInt getJSONArray getJSONObject getJsonArray getLong getMessage getParams getReasonPhrase getResources getSocketFactory getStatusCode getStatusLine getString getText getTime i importApplications importEvents importGraphItems importHostGroups importHosts importItems importScreenItems importTriggers inTransaction indexOf init insert isCached isClosed length load matches min moveToFirst moveToNext next nextProperty nextToken nextValueToken parseColor parseDouble parseInt parseLong printStackTrace put putExtra query read register replace replaceAll sendBroadcast set setCached setConnectionTimeout setContentCharset setCredentials setEntity setHostnameVerifier setRedirecting setTables setTransactionSuccessful setVersion showProgress split substring toString trim update"],
      "c_imports_removed_cs": "<empty>",
      "p_imports_t": ["android.database.sqlite.SQLiteQueryBuilder org.apache.http.conn.scheme.SchemeRegistry java.util.HashSet org.apache.http.params.BasicHttpParams android.content.Context org.apache.http.params.HttpParams org.apache.http.conn.scheme.PlainSocketFactory java.util.ArrayList com.inovex.zabbixmobile.model.ItemData com.inovex.zabbixmobile.model.HostData com.inovex.zabbixmobile.model.GraphData com.inovex.zabbixmobile.model.EventData org.apache.http.auth.UsernamePasswordCredentials org.apache.http.params.HttpConnectionParams android.content.SharedPreferences java.security.KeyManagementException org.apache.http.conn.ClientConnectionManager org.codehaus.jackson.JsonFactory org.apache.http.entity.StringEntity java.util.Set org.apache.http.params.HttpProtocolParams com.inovex.zabbixmobile.model.ApplicationItemRelationData com.inovex.zabbixmobile.model.TriggerData org.codehaus.jackson.JsonToken android.database.Cursor java.net.Socket android.content.Intent org.apache.http.protocol.HTTP org.json.JSONException java.net.UnknownHostException com.inovex.zabbixmobile.model.HistoryDetailData org.apache.http.HttpResponse java.security.KeyStore com.inovex.zabbixmobile.ZabbixContentProvider android.preference.PreferenceManager android.util.Log org.json.JSONObject java.security.NoSuchAlgorithmException org.apache.http.client.params.HttpClientParams java.io.IOException org.apache.http.conn.scheme.Scheme org.apache.http.client.methods.HttpPost javax.net.ssl.SSLContext org.apache.http.auth.AuthScope org.apache.http.conn.ssl.SSLSocketFactory java.security.KeyStoreException android.content.ContentValues java.io.InputStreamReader java.util.Date java.security.UnrecoverableKeyException android.graphics.Color org.apache.http.client.ClientProtocolException com.inovex.zabbixmobile.model.GraphItemData org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager org.json.JSONArray com.inovex.zabbixmobile.model.CacheData javax.net.ssl.SSLPeerUnverifiedException com.inovex.zabbixmobile.model.HostGroupData org.codehaus.jackson.JsonParseException java.security.cert.X509Certificate org.apache.http.HttpVersion android.database.sqlite.SQLiteDatabase java.util.List java.security.cert.CertificateException java.io.BufferedReader com.inovex.zabbixmobile.model.ApplicationData com.inovex.zabbixmobile.model.ScreenItemData javax.net.ssl.TrustManager com.inovex.zabbixmobile.model.ScreenData com.inovex.zabbixmobile.R org.codehaus.jackson.JsonParser org.apache.http.impl.client.DefaultHttpClient javax.net.ssl.X509TrustManager"],
      "p_subject_t": ["zabbix 1.4.2"],
      "p_callsites_cs": "<unknown>.set(<unknown>, <unknown>)#org.apache.http.HttpEntity.getContent()#java.lang.String.equals(java.lang.String)#org.json.JSONArray.JSONArray()#<unknown>.set(<unknown>, java.lang.Object)#org.json.JSONObject.put(java.lang.String, java.lang.Integer)#org.json.JSONArray.put(java.lang.String)#org.json.JSONObject.JSONObject()#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.codehaus.jackson.JsonFactory.createJsonParser(java.io.InputStream)#java.lang.String.equals(<unknown>)#org.apache.http.StatusLine.getStatusCode()#<unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>)#org.json.JSONObject.put(java.lang.String, java.lang.String)#android.database.sqlite.SQLiteDatabase.inTransaction()#com.inovex.zabbixmobile.api.ZabbixService._startTransaction()#java.lang.String.equals(java.lang.String)#org.codehaus.jackson.JsonFactory.JsonFactory()#com.inovex.zabbixmobile.api.ZabbixService._endTransaction()#org.json.JSONObject.put(java.lang.String, int)#android.content.ContentValues.ContentValues(int)#org.apache.http.conn.scheme.SchemeRegistry.SchemeRegistry()#<unknown>.insert(android.database.sqlite.SQLiteDatabase)#<unknown>.insert(android.database.sqlite.SQLiteDatabase)#com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject)#com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject)#com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject)#org.json.JSONObject.getJSONObject(java.lang.String)#java.io.InputStreamReader.InputStreamReader(java.io.InputStream)#android.content.Intent.putExtra(java.lang.String, <unknown>)#org.json.JSONArray.length()#java.lang.String.equals(java.lang.String)#<unknown>.set(<unknown>, <unknown>)#java.lang.String.equals(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService.PreconditionFailedException.PreconditionFailedException()#java.lang.StringBuilder.StringBuilder()#android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null)#<unknown>.nextValueToken()#org.json.JSONObject.JSONObject()#org.json.JSONObject.put(java.lang.String, int)#org.json.JSONObject.put(java.lang.String, org.json.JSONArray)#java.lang.String.equals(<unknown>)#<unknown>.get(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService.importTriggers(com.inovex.zabbixmobile.api.JsonArrayReader)#<unknown>.insert(android.database.sqlite.SQLiteDatabase)#android.content.Intent.putExtra(java.lang.String, <unknown>)#java.lang.String.equals(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService.importItems(<unknown>, int, boolean)#com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, java.lang.String, int)#org.json.JSONObject.put(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject)#org.apache.http.conn.scheme.Scheme.Scheme(java.lang.String, org.apache.http.conn.ssl.SSLSocketFactory, int)#org.apache.http.HttpEntity.getContent()#org.codehaus.jackson.JsonParser.close()#java.lang.String.equals(<unknown>)#<unknown>.nextValueToken()#<unknown>.getCurrentName()#org.json.JSONArray.JSONArray(java.util.Set<java.lang.Long>)#<unknown>.nextValueToken()#android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null)#<unknown>.getJsonArray()#com.inovex.zabbixmobile.api.ZabbixService._startTransaction()#org.json.JSONArray.JSONArray()#<unknown>.nextProperty()#java.lang.String.equals(java.lang.String)#android.database.sqlite.SQLiteDatabase.update(<unknown>, android.content.ContentValues, <unknown>, null)#java.util.Set<java.lang.Long>.add(<unknown>)#<unknown>.get(<unknown>)#<unknown>.get(<unknown>)#android.content.ContentValues.put(<unknown>, java.lang.Long)#java.lang.String.equals(java.lang.String)#org.apache.http.StatusLine.getReasonPhrase()#java.lang.RuntimeException.RuntimeException(java.lang.String)#<unknown>.nextProperty()#java.lang.Throwable.printStackTrace()#java.lang.String.equals(<unknown>)#java.lang.Long.parseLong(<unknown>)#org.json.JSONObject.put(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject)#<unknown>.getCurrentName()#android.content.ContentValues.put(<unknown>, java.lang.Long)#org.apache.http.entity.StringEntity.StringEntity(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject)#java.lang.String.equals(<unknown>)#<unknown>.EventData()#<unknown>.next()#<unknown>.set(<unknown>, <unknown>)#com.inovex.zabbixmobile.api.ZabbixService.CustomSSLSocketFactory.CustomSSLSocketFactory(java.security.KeyStore)#com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject)#<unknown>.getCurrentName()#java.util.List<java.lang.String>.add(java.lang.String)#org.json.JSONObject.put(java.lang.String, int)#<unknown>.getText()#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.apache.http.conn.ssl.SSLSocketFactory.setHostnameVerifier(org.apache.http.conn.ssl.X509HostnameVerifier)#<unknown>.set(<unknown>, <unknown>)#<unknown>.getText()#org.json.JSONObject.put(java.lang.String, long)#java.util.Date.Date()#<unknown>.JsonArrayReader(org.codehaus.jackson.JsonParser)#org.json.JSONObject.put(java.lang.String, int)#org.json.JSONObject.put(java.lang.String, int)#<unknown>.set(<unknown>, <unknown>)#com.inovex.zabbixmobile.api.ZabbixService.authenticate()#android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null)#java.lang.String.equals(java.lang.String)#org.apache.http.HttpResponse.getEntity()#org.json.JSONObject.JSONObject()#com.inovex.zabbixmobile.api.ZabbixService._startTransaction()#com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, null, int)#java.io.BufferedReader.read()#org.json.JSONObject.put(java.lang.String, long)#<unknown>.set(<unknown>, <unknown>)#android.database.Cursor.getLong(<unknown>)#java.lang.IllegalStateException.IllegalStateException(java.lang.String)#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.getCurrentName()#android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null)#android.util.Log.d(java.lang.String, java.lang.String)#<unknown>.set(<unknown>, <unknown>)#java.lang.String.equals(<unknown>)#org.json.JSONObject.put(java.lang.String, java.lang.String)#android.database.Cursor.moveToFirst()#com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, java.lang.String)#android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null)#java.lang.String.equals(java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, java.lang.String)#<unknown>.getText()#org.json.JSONObject.put(java.lang.String, java.lang.String)#android.content.Intent.putExtra(java.lang.String, <unknown>)#<unknown>.getCurrentName()#android.content.res.Resources.getString(<unknown>)#android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null)#android.database.sqlite.SQLiteDatabase.setTransactionSuccessful()#<unknown>.next()#<unknown>.getText()#<unknown>.nextValueToken()#com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject)#com.inovex.zabbixmobile.api.ZabbixService.showProgress(<unknown>)#java.io.IOException.IOException(java.lang.String)#<unknown>.getCurrentName()#android.util.Log.d(java.lang.String, java.lang.String)#java.lang.Object.toString()#org.json.JSONObject.toString()#<unknown>.set(<unknown>, <unknown>)#org.json.JSONArray.JSONArray()#org.apache.http.HttpResponse.getStatusLine()#org.json.JSONArray.JSONArray()#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.apache.http.impl.client.DefaultHttpClient.DefaultHttpClient()#org.json.JSONObject.put(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject)#org.apache.http.HttpResponse.getStatusLine()#java.lang.String.equals(<unknown>)#java.util.Date.Date()#android.util.Log.i(java.lang.String, java.lang.String)#android.content.Context.getResources()#org.apache.http.impl.client.CloseableHttpClient.execute(org.apache.http.client.methods.HttpPost)#com.inovex.zabbixmobile.api.ZabbixService._commitTransactionIfRecommended()#com.inovex.zabbixmobile.api.ZabbixService.importHostGroups(<unknown>)#android.content.Context.sendBroadcast(android.content.Intent)#android.content.Context.sendBroadcast(android.content.Intent)#com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, null, int)#java.lang.Integer.parseInt(<unknown>)#<unknown>.ApplicationData()#com.inovex.zabbixmobile.api.ZabbixService.NoAPIAccessException.NoAPIAccessException()#com.inovex.zabbixmobile.api.ZabbixService._commitTransactionIfRecommended()#<unknown>.getJsonArray()#org.apache.http.message.AbstractHttpMessage.addHeader(java.lang.String, java.lang.String)#org.json.JSONObject.put(java.lang.String, int)#java.lang.String.replace(java.lang.String, java.lang.String)#org.json.JSONArray.JSONArray()#<unknown>.set(<unknown>, <unknown>)#org.json.JSONObject.put(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService.importTriggers(com.inovex.zabbixmobile.api.JsonArrayReader)#<unknown>.set(<unknown>, <unknown>)#org.json.JSONArray.JSONArray()#java.lang.String.equals(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, java.lang.String, int)#<unknown>.nextProperty()#<unknown>.set(<unknown>, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject)#org.json.JSONObject.JSONObject()#java.lang.String.contains(java.lang.String)#org.apache.http.client.methods.HttpEntityEnclosingRequestBase.setEntity(org.apache.http.entity.StringEntity)#org.json.JSONObject.put(java.lang.String, int)#<unknown>.HostGroupData()#<unknown>.HostGroupData()#<unknown>.nextProperty()#java.lang.Long.parseLong(<unknown>)#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.json.JSONObject.put(java.lang.String, org.json.JSONArray)#org.json.JSONObject.put(java.lang.String, java.lang.Integer)#<unknown>.set(<unknown>, <unknown>)#<unknown>.close()#com.inovex.zabbixmobile.api.ZabbixService.importEvents(com.inovex.zabbixmobile.api.JsonArrayReader, int)#<unknown>.set(<unknown>, <unknown>)#org.json.JSONObject.put(java.lang.String, org.json.JSONArray)#java.lang.String.equals(java.lang.String)#android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null)#<unknown>.next()#org.json.JSONObject.toString()#java.lang.String.equals(<unknown>)#java.lang.String.equals(<unknown>)#android.database.sqlite.SQLiteDatabase.query(<unknown>, null, <unknown>, null, null, null, null)#<unknown>.set(<unknown>, <unknown>)#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.CacheData()#<unknown>.getText()#com.inovex.zabbixmobile.api.ZabbixService._startTransaction()#<unknown>.set(<unknown>, <unknown>)#com.inovex.zabbixmobile.api.ZabbixService._endTransaction()#<unknown>.set(<unknown>, int)#<unknown>.getJsonArray()#java.lang.String.equals(<unknown>)#java.util.Date.getTime()#java.lang.String.equals(java.lang.String)#org.json.JSONObject.put(java.lang.String, int)#<unknown>.set(<unknown>, <unknown>)#java.lang.Integer.parseInt(<unknown>)#org.codehaus.jackson.JsonParser.getCurrentName()#<unknown>.nextProperty()#com.inovex.zabbixmobile.api.ZabbixService._endTransaction()#java.lang.String.equals(<unknown>)#org.json.JSONObject.put(java.lang.String, int)#android.database.sqlite.SQLiteDatabase.update(<unknown>, android.content.ContentValues, <unknown>, null)#com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject)#com.inovex.zabbixmobile.api.ZabbixService._endTransaction()#java.lang.StringBuilder.append(char)#<unknown>.set(<unknown>, <unknown>)#<unknown>.get(<unknown>)#<unknown>.set(<unknown>, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject)#org.json.JSONObject.put(java.lang.String, java.lang.String)#android.database.Cursor.getLong(<unknown>)#java.lang.String.equals(<unknown>)#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.json.JSONObject.JSONObject()#org.apache.http.params.HttpProtocolParams.setVersion(org.apache.http.params.HttpParams, org.apache.http.HttpVersion)#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.HistoryDetailData()#com.inovex.zabbixmobile.api.ZabbixService._startTransaction()#<unknown>.next()#<unknown>.set(<unknown>, <unknown>)#<unknown>.nextValueToken()#org.json.JSONObject.JSONObject()#java.lang.String.equals(<unknown>)#java.lang.Long.parseLong(<unknown>)#java.lang.Integer.parseInt(<unknown>)#org.apache.http.client.methods.HttpPost.HttpPost(java.lang.String)#org.apache.http.StatusLine.getStatusCode()#<unknown>.set(<unknown>, int)#java.lang.String.equals(java.lang.String)#java.lang.String.equals(<unknown>)#java.lang.String.equals(<unknown>)#<unknown>.getCurrentName()#java.util.ArrayList<java.lang.String>.ArrayList, String()#com.inovex.zabbixmobile.api.ZabbixService._startTransaction()#org.json.JSONArray.put(java.lang.String)#<unknown>.nextValueToken()#org.json.JSONArray.put(java.lang.String)#<unknown>.set(<unknown>, <unknown>)#org.json.JSONObject.put(java.lang.String, int)#com.inovex.zabbixmobile.api.ZabbixService.importItems(<unknown>, int, boolean)#org.json.JSONObject.JSONObject()#com.inovex.zabbixmobile.api.ZabbixService.importTriggers(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService.importGraphItems(<unknown>)#<unknown>.ScreenItemData()#<unknown>.set(<unknown>, <unknown>)#<unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>)#android.preference.PreferenceManager.getDefaultSharedPreferences(android.content.Context)#org.json.JSONObject.length()#<unknown>.nextValueToken()#java.util.HashSet<java.lang.Long>.HashSet, Long()#java.lang.String.equals(java.lang.String)#android.content.SharedPreferences.getBoolean(java.lang.String, boolean)#<unknown>.insert(android.database.sqlite.SQLiteDatabase)#org.json.JSONObject.put(java.lang.String, org.json.JSONArray)#<unknown>.close()#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.next()#android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null)#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.json.JSONObject.getString(java.lang.String)#<unknown>.set(<unknown>, <unknown>)#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.close()#org.json.JSONObject.getString(java.lang.String)#java.lang.String.equals(java.lang.String)#java.lang.Long.parseLong(<unknown>)#org.codehaus.jackson.JsonParser.isClosed()#org.json.JSONObject.put(java.lang.String, int)#org.json.JSONObject.put(java.lang.String, org.json.JSONArray)#org.json.JSONObject.put(java.lang.String, long)#<unknown>.close()#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.set(<unknown>, long)#org.json.JSONObject.put(java.lang.String, org.json.JSONObject)#<unknown>.set(<unknown>, <unknown>)#com.inovex.zabbixmobile.api.ZabbixService._endTransaction()#java.lang.String.replaceAll(java.lang.String, java.lang.String)#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.nextValueToken()#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.apache.http.params.BasicHttpParams.BasicHttpParams()#android.database.sqlite.SQLiteDatabase.beginTransaction()#com.inovex.zabbixmobile.api.ZabbixService._commitTransactionIfRecommended()#com.inovex.zabbixmobile.api.ZabbixService._endTransaction()#java.lang.String.equals(<unknown>)#<unknown>.insert(android.database.sqlite.SQLiteDatabase)#<unknown>.insert(android.database.sqlite.SQLiteDatabase)#org.json.JSONObject.put(java.lang.String, int)#<unknown>.next()#com.inovex.zabbixmobile.api.ZabbixService._startTransaction()#<unknown>.getJsonArray()#android.content.SharedPreferences.getString(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, null, int)#javax.net.SocketFactory.createSocket()#java.lang.Long.parseLong(<unknown>)#org.apache.http.client.CredentialsProvider.setCredentials(org.apache.http.auth.AuthScope, org.apache.http.auth.UsernamePasswordCredentials)#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.json.JSONObject.put(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService.importTriggers(com.inovex.zabbixmobile.api.JsonArrayReader)#<unknown>.next()#com.inovex.zabbixmobile.api.ZabbixService.HttpAuthorizationRequiredException.HttpAuthorizationRequiredException()#android.database.sqlite.SQLiteQueryBuilder.query(android.database.sqlite.SQLiteDatabase, null, null, null, null, null, null)#java.util.Date.Date()#com.inovex.zabbixmobile.api.ZabbixService._commitTransactionIfRecommended()#<unknown>.set(<unknown>, java.lang.String)#org.json.JSONObject.JSONObject()#<unknown>.next()#<unknown>.set(<unknown>, <unknown>)#<unknown>.set(<unknown>, <unknown>)#com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject)#java.lang.String.equals(java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, java.lang.String)#java.lang.String.indexOf(char)#android.database.sqlite.SQLiteDatabase.query(<unknown>, null, <unknown>, null, null, null, null)#android.preference.PreferenceManager.getDefaultSharedPreferences(android.content.Context)#<unknown>.nextProperty()#org.apache.http.impl.client.CloseableHttpClient.execute(org.apache.http.client.methods.HttpPost)#<unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>)#com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, java.lang.String)#org.json.JSONObject.JSONObject()#<unknown>.close()#android.database.Cursor.getColumnIndex(<unknown>)#android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null)#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.nextProperty()#org.apache.http.conn.scheme.PlainSocketFactory.getSocketFactory()#com.inovex.zabbixmobile.api.ZabbixService._commitTransactionIfRecommended()#com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject)#java.lang.StringBuilder.toString()#org.json.JSONObject.put(java.lang.String, java.lang.String)#android.database.sqlite.SQLiteQueryBuilder.SQLiteQueryBuilder()#<unknown>.insert(android.database.sqlite.SQLiteDatabase)#org.apache.http.conn.scheme.SchemeRegistry.register(org.apache.http.conn.scheme.Scheme)#<unknown>.set(<unknown>, <unknown>)#org.json.JSONObject.JSONObject(java.lang.String)#java.lang.String.equals(<unknown>)#<unknown>.set(<unknown>, <unknown>)#<unknown>.set(<unknown>, <unknown>)#java.lang.IllegalStateException.IllegalStateException(java.lang.String)#java.lang.Double.parseDouble(<unknown>)#android.content.ContentValues.put(<unknown>, java.lang.Long)#android.database.sqlite.SQLiteQueryBuilder.appendWhere(<unknown>)#org.apache.http.conn.scheme.SchemeRegistry.register(org.apache.http.conn.scheme.Scheme)#org.json.JSONObject.getInt(java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService.importHosts(<unknown>, null)#org.json.JSONObject.put(java.lang.String, boolean)#java.lang.Long.parseLong(<unknown>)#java.lang.String.indexOf(char)#android.database.sqlite.SQLiteQueryBuilder.appendWhere(<unknown>)#java.lang.String.length()#java.lang.String.equals(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject)#<unknown>.nextProperty()#<unknown>.next()#android.content.SharedPreferences.getString(java.lang.String, java.lang.String)#<unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>)#<unknown>.GraphData()#org.json.JSONArray.put(java.lang.String)#org.apache.http.impl.client.AbstractHttpClient.getParams()#<unknown>.set(<unknown>, long)#<unknown>.set(<unknown>, <unknown>)#org.json.JSONObject.getJSONObject(java.lang.String)#org.json.JSONObject.put(java.lang.String, java.lang.String)#java.lang.String.equals(java.lang.String)#org.json.JSONObject.getString(java.lang.String)#java.lang.String.equals(<unknown>)#java.lang.String.equals(<unknown>)#<unknown>.getCurrentName()#java.lang.String.equals(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService.showProgress(int)#<unknown>.getCurrentName()#com.inovex.zabbixmobile.api.ZabbixService.importHosts(<unknown>, null)#com.inovex.zabbixmobile.api.ZabbixService.importItems(com.inovex.zabbixmobile.api.JsonArrayReader, int, boolean)#com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, java.lang.String, int)#org.json.JSONObject.put(java.lang.String, int)#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.close()#java.lang.String.replace(java.lang.String, java.lang.String)#java.lang.String.equals(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject)#com.inovex.zabbixmobile.api.ZabbixService._endTransaction()#android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null)#android.database.Cursor.moveToNext()#<unknown>.HostData()#<unknown>.set(<unknown>, long)#<unknown>.next()#com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject)#android.database.sqlite.SQLiteQueryBuilder.setTables(<unknown>)#java.util.Date.getTime()#org.json.JSONObject.put(java.lang.String, long)#android.content.ContentValues.ContentValues(int)#java.lang.Long.parseLong(<unknown>)#org.apache.http.HttpResponse.getEntity()#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.getText()#java.lang.String.equals(java.lang.String)#<unknown>.set(<unknown>, <unknown>)#<unknown>.set(<unknown>, <unknown>)#javax.net.ssl.SSLContext.init(null, javax.net.ssl.TrustManager[], null)#android.database.sqlite.SQLiteDatabase.endTransaction()#java.lang.String.equals(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, java.lang.String)#<unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>)#<unknown>.next()#<unknown>.close()#<unknown>.insert(android.database.sqlite.SQLiteDatabase)#org.json.JSONObject.put(java.lang.String, java.lang.String)#java.lang.Throwable.getMessage()#java.lang.String.equals(<unknown>)#java.lang.String.equals(<unknown>)#<unknown>.set(<unknown>, <unknown>)#com.inovex.zabbixmobile.api.ZabbixService._endTransaction()#javax.net.ssl.SSLContext.getSocketFactory()#org.json.JSONObject.JSONObject()#android.content.Context.getResources()#org.json.JSONObject.put(java.lang.String, int)#com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, null)#com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, java.lang.String, int)#java.lang.String.matches(java.lang.String)#<unknown>.set(<unknown>, <unknown>)#org.json.JSONArray.put(java.lang.String)#<unknown>.set(<unknown>, <unknown>)#android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null)#android.content.Context.sendBroadcast(android.content.Intent)#org.json.JSONObject.getJSONObject(java.lang.String)#<unknown>.get(<unknown>)#android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null)#java.lang.String.equals(<unknown>)#android.content.SharedPreferences.getBoolean(java.lang.String, boolean)#java.lang.Throwable.printStackTrace()#android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null)#org.json.JSONObject.put(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService._startTransaction()#android.content.Intent.putExtra(java.lang.String, int)#org.json.JSONObject.JSONObject()#<unknown>.getText()#com.inovex.zabbixmobile.api.ZabbixService.importHosts(com.inovex.zabbixmobile.api.JsonArrayReader, int)#com.inovex.zabbixmobile.api.ZabbixService._endTransaction()#org.apache.http.client.methods.HttpPost.HttpPost(java.lang.String)#android.content.SharedPreferences.getString(java.lang.String, java.lang.String)#<unknown>.GraphItemData()#com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, java.lang.String, int)#<unknown>.nextValueToken()#com.inovex.zabbixmobile.api.ZabbixService.importTriggers(com.inovex.zabbixmobile.api.JsonArrayReader)#org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager.ThreadSafeClientConnManager(org.apache.http.params.HttpParams, org.apache.http.conn.scheme.SchemeRegistry)#<unknown>.ApplicationItemRelationData()#java.lang.Object.toString()#android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null)#org.json.JSONArray.JSONArray()#java.lang.String.equals(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService._startTransaction()#org.json.JSONObject.put(java.lang.String, org.json.JSONArray)#com.inovex.zabbixmobile.api.ZabbixService.importApplications(int, int, <unknown>)#<unknown>.set(<unknown>, int)#org.json.JSONObject.put(java.lang.String, int)#com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, java.lang.String, int)#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.json.JSONObject.JSONObject()#java.lang.Math.min(int, int)#com.inovex.zabbixmobile.api.ZabbixService.showProgress(<unknown>)#java.lang.String.equals(java.lang.String)#android.content.Intent.Intent(<unknown>)#java.lang.String.equals(<unknown>)#org.json.JSONObject.put(java.lang.String, int)#javax.net.ssl.SSLContext.getInstance(java.lang.String)#android.content.res.Resources.getString(<unknown>)#org.json.JSONObject.JSONObject()#android.content.Intent.Intent(<unknown>)#java.lang.String.equals(<unknown>)#<unknown>.nextProperty()#javax.net.ssl.SSLSocketFactory.createSocket(java.net.Socket, java.lang.String, int, boolean)#org.json.JSONObject.put(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject)#<unknown>.get(<unknown>)#java.io.IOException.IOException(java.lang.String)#java.lang.String.trim()#java.lang.String.contains(java.lang.String)#org.apache.http.entity.StringEntity.StringEntity(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService._endTransaction()#.X509TrustManager()#com.inovex.zabbixmobile.api.ZabbixService.importEvents(com.inovex.zabbixmobile.api.JsonArrayReader, null)#com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject)#android.graphics.Color.parseColor(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, null)#org.json.JSONObject.getJSONArray(java.lang.String)#org.apache.http.client.params.HttpClientParams.setRedirecting(org.apache.http.params.HttpParams, boolean)#com.inovex.zabbixmobile.api.ZabbixService._startTransaction()#<unknown>.getCurrentName()#java.lang.String.equals(<unknown>)#java.lang.Long.parseLong(<unknown>)#java.lang.Long.parseLong(<unknown>)#<unknown>.getText()#java.util.Date.getTime()#android.content.Intent.putExtra(java.lang.String, <unknown>)#android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null)#<unknown>.get(<unknown>)#android.database.Cursor.moveToFirst()#org.apache.http.client.methods.HttpEntityEnclosingRequestBase.setEntity(org.apache.http.entity.StringEntity)#com.inovex.zabbixmobile.api.ZabbixService._commitTransactionIfRecommended()#com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, null)#android.database.sqlite.SQLiteQueryBuilder.appendWhere(<unknown>)#org.apache.http.auth.UsernamePasswordCredentials.UsernamePasswordCredentials(java.lang.String, java.lang.String)#java.util.Date.getTime()#java.lang.String.equals(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService._endTransaction()#org.json.JSONObject.put(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService.authenticate()#java.lang.String.equals(<unknown>)#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.json.JSONObject.put(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService.NoAPIAccessException.NoAPIAccessException()#org.json.JSONArray.put(long)#com.inovex.zabbixmobile.api.ZabbixService._endTransaction()#android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null)#<unknown>.getJsonArray()#<unknown>.ScreenData()#java.util.Date.Date()#java.util.Date.Date()#<unknown>.set(<unknown>, long)#<unknown>.getCurrentName()#org.json.JSONObject.put(java.lang.String, org.json.JSONArray)#<unknown>.set(<unknown>, long)#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.apache.http.params.HttpConnectionParams.setConnectionTimeout(org.apache.http.params.HttpParams, int)#org.json.JSONArray.length()#<unknown>.set(<unknown>, java.lang.String)#<unknown>.set(<unknown>, long)#java.util.Date.getTime()#<unknown>.set(<unknown>, <unknown>)#<unknown>.set(<unknown>, <unknown>)#org.json.JSONArray.put(java.lang.String)#java.lang.String.equals(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService.importScreenItems(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService.HttpAuthorizationRequiredException.HttpAuthorizationRequiredException()#<unknown>.getText()#org.json.JSONObject.put(java.lang.String, org.json.JSONArray)#org.json.JSONObject.JSONObject()#<unknown>.set(<unknown>, <unknown>)#com.inovex.zabbixmobile.api.ZabbixService.importHostGroups(<unknown>)#org.json.JSONObject.toString()#java.lang.Integer.parseInt(<unknown>)#java.lang.String.equals(java.lang.String)#org.apache.http.params.HttpProtocolParams.setContentCharset(org.apache.http.params.HttpParams, java.lang.String)#<unknown>.get(<unknown>)#android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null)#java.lang.String.equals(<unknown>)#<unknown>.set(<unknown>, <unknown>)#<unknown>.nextValueToken()#<unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>)#org.json.JSONObject.put(java.lang.String, org.json.JSONArray)#org.json.JSONObject.put(java.lang.String, java.lang.Integer)#<unknown>.getText()#<unknown>.set(<unknown>, <unknown>)#org.apache.http.message.AbstractHttpMessage.addHeader(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject)#org.json.JSONObject.getJSONArray(java.lang.String)#java.security.KeyStore.load(null, null)#java.lang.String.replace(java.lang.String, java.lang.String)#java.lang.Long.parseLong(<unknown>)#org.json.JSONObject.toString()#android.content.SharedPreferences.getString(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, java.lang.String)#<unknown>.TriggerData()#android.content.SharedPreferences.getString(java.lang.String, java.lang.String)#android.content.Intent.Intent(<unknown>)#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.apache.http.impl.client.AbstractHttpClient.getCredentialsProvider()#<unknown>.set(<unknown>, <unknown>)#java.io.IOException.IOException(java.lang.String)#java.lang.String.trim()#org.json.JSONObject.put(java.lang.String, org.json.JSONArray)#java.lang.String.split(java.lang.String)#java.lang.String.equals(java.lang.String)#java.lang.String.endsWith(java.lang.String)#<unknown>.set(<unknown>, int)#com.inovex.zabbixmobile.api.ZabbixService.showProgress(int)#<unknown>.ItemData()#org.json.JSONObject.put(java.lang.String, int)#<unknown>.set(<unknown>, <unknown>)#org.codehaus.jackson.JsonParser.getText()#android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null)#org.apache.http.impl.client.DefaultHttpClient.DefaultHttpClient(org.apache.http.conn.ClientConnectionManager, org.apache.http.params.HttpParams)#<unknown>.close()#java.lang.IllegalStateException.IllegalStateException(java.lang.String)#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.codehaus.jackson.JsonParser.nextToken()#android.database.Cursor.getColumnIndex(<unknown>)#org.json.JSONObject.put(java.lang.String, org.json.JSONArray)#<unknown>.nextValueToken()#com.inovex.zabbixmobile.api.ZabbixService._startTransaction()#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.set(<unknown>, java.lang.String)#java.lang.String.substring(int, int)#java.lang.Long.parseLong(<unknown>)#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.json.JSONObject.getInt(java.lang.String)#java.lang.String.equals(java.lang.String)#<unknown>.set(<unknown>, <unknown>)#<unknown>.set(<unknown>, <unknown>)#java.security.KeyStore.getInstance(java.lang.String)#java.lang.Integer.parseInt(<unknown>)#java.lang.String.equals(java.lang.String)#<unknown>.nextProperty()#android.content.Intent.putExtra(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, null)#<unknown>.set(<unknown>, int)#java.io.BufferedReader.BufferedReader(java.io.InputStreamReader)#java.security.KeyStore.getDefaultType()#java.lang.String.equals(<unknown>)#<unknown>.getText()#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.set(<unknown>, java.lang.Object)#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.insert(android.database.sqlite.SQLiteDatabase)#<unknown>.nextProperty()#com.inovex.zabbixmobile.api.ZabbixService._startTransaction()#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.close()#<unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>)#org.json.JSONObject.put(java.lang.String, long)#com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, null, int)#<unknown>.getJsonArray()#<unknown>.set(<unknown>, <unknown>)#java.lang.String.equals(<unknown>)#org.apache.http.conn.scheme.Scheme.Scheme(java.lang.String, org.apache.http.conn.scheme.PlainSocketFactory, int)#org.json.JSONObject.put(java.lang.String, java.lang.String)#java.lang.String.equals(<unknown>)",
      "p_callsites_t": ["<unknown>.set(<unknown>, <unknown>) org.apache.http.HttpEntity.getContent() java.lang.String.equals(java.lang.String) org.json.JSONArray.JSONArray() <unknown>.set(<unknown>, java.lang.Object) org.json.JSONObject.put(java.lang.String, java.lang.Integer) org.json.JSONArray.put(java.lang.String) org.json.JSONObject.JSONObject() org.json.JSONObject.put(java.lang.String, java.lang.String) org.codehaus.jackson.JsonFactory.createJsonParser(java.io.InputStream) java.lang.String.equals(<unknown>) org.apache.http.StatusLine.getStatusCode() <unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>) org.json.JSONObject.put(java.lang.String, java.lang.String) android.database.sqlite.SQLiteDatabase.inTransaction() com.inovex.zabbixmobile.api.ZabbixService._startTransaction() java.lang.String.equals(java.lang.String) org.codehaus.jackson.JsonFactory.JsonFactory() com.inovex.zabbixmobile.api.ZabbixService._endTransaction() org.json.JSONObject.put(java.lang.String, int) android.content.ContentValues.ContentValues(int) org.apache.http.conn.scheme.SchemeRegistry.SchemeRegistry() <unknown>.insert(android.database.sqlite.SQLiteDatabase) <unknown>.insert(android.database.sqlite.SQLiteDatabase) com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject) com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject) com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject) org.json.JSONObject.getJSONObject(java.lang.String) java.io.InputStreamReader.InputStreamReader(java.io.InputStream) android.content.Intent.putExtra(java.lang.String, <unknown>) org.json.JSONArray.length() java.lang.String.equals(java.lang.String) <unknown>.set(<unknown>, <unknown>) java.lang.String.equals(<unknown>) com.inovex.zabbixmobile.api.ZabbixService.PreconditionFailedException.PreconditionFailedException() java.lang.StringBuilder.StringBuilder() android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null) <unknown>.nextValueToken() org.json.JSONObject.JSONObject() org.json.JSONObject.put(java.lang.String, int) org.json.JSONObject.put(java.lang.String, org.json.JSONArray) java.lang.String.equals(<unknown>) <unknown>.get(<unknown>) com.inovex.zabbixmobile.api.ZabbixService.importTriggers(com.inovex.zabbixmobile.api.JsonArrayReader) <unknown>.insert(android.database.sqlite.SQLiteDatabase) android.content.Intent.putExtra(java.lang.String, <unknown>) java.lang.String.equals(<unknown>) com.inovex.zabbixmobile.api.ZabbixService.importItems(<unknown>, int, boolean) com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, java.lang.String, int) org.json.JSONObject.put(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject) org.apache.http.conn.scheme.Scheme.Scheme(java.lang.String, org.apache.http.conn.ssl.SSLSocketFactory, int) org.apache.http.HttpEntity.getContent() org.codehaus.jackson.JsonParser.close() java.lang.String.equals(<unknown>) <unknown>.nextValueToken() <unknown>.getCurrentName() org.json.JSONArray.JSONArray(java.util.Set<java.lang.Long>) <unknown>.nextValueToken() android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null) <unknown>.getJsonArray() com.inovex.zabbixmobile.api.ZabbixService._startTransaction() org.json.JSONArray.JSONArray() <unknown>.nextProperty() java.lang.String.equals(java.lang.String) android.database.sqlite.SQLiteDatabase.update(<unknown>, android.content.ContentValues, <unknown>, null) java.util.Set<java.lang.Long>.add(<unknown>) <unknown>.get(<unknown>) <unknown>.get(<unknown>) android.content.ContentValues.put(<unknown>, java.lang.Long) java.lang.String.equals(java.lang.String) org.apache.http.StatusLine.getReasonPhrase() java.lang.RuntimeException.RuntimeException(java.lang.String) <unknown>.nextProperty() java.lang.Throwable.printStackTrace() java.lang.String.equals(<unknown>) java.lang.Long.parseLong(<unknown>) org.json.JSONObject.put(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject) <unknown>.getCurrentName() android.content.ContentValues.put(<unknown>, java.lang.Long) org.apache.http.entity.StringEntity.StringEntity(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject) java.lang.String.equals(<unknown>) <unknown>.EventData() <unknown>.next() <unknown>.set(<unknown>, <unknown>) com.inovex.zabbixmobile.api.ZabbixService.CustomSSLSocketFactory.CustomSSLSocketFactory(java.security.KeyStore) com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject) <unknown>.getCurrentName() java.util.List<java.lang.String>.add(java.lang.String) org.json.JSONObject.put(java.lang.String, int) <unknown>.getText() org.json.JSONObject.put(java.lang.String, java.lang.String) org.apache.http.conn.ssl.SSLSocketFactory.setHostnameVerifier(org.apache.http.conn.ssl.X509HostnameVerifier) <unknown>.set(<unknown>, <unknown>) <unknown>.getText() org.json.JSONObject.put(java.lang.String, long) java.util.Date.Date() <unknown>.JsonArrayReader(org.codehaus.jackson.JsonParser) org.json.JSONObject.put(java.lang.String, int) org.json.JSONObject.put(java.lang.String, int) <unknown>.set(<unknown>, <unknown>) com.inovex.zabbixmobile.api.ZabbixService.authenticate() android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null) java.lang.String.equals(java.lang.String) org.apache.http.HttpResponse.getEntity() org.json.JSONObject.JSONObject() com.inovex.zabbixmobile.api.ZabbixService._startTransaction() com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, null, int) java.io.BufferedReader.read() org.json.JSONObject.put(java.lang.String, long) <unknown>.set(<unknown>, <unknown>) android.database.Cursor.getLong(<unknown>) java.lang.IllegalStateException.IllegalStateException(java.lang.String) org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.getCurrentName() android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null) android.util.Log.d(java.lang.String, java.lang.String) <unknown>.set(<unknown>, <unknown>) java.lang.String.equals(<unknown>) org.json.JSONObject.put(java.lang.String, java.lang.String) android.database.Cursor.moveToFirst() com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, java.lang.String) android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null) java.lang.String.equals(java.lang.String) com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, java.lang.String) <unknown>.getText() org.json.JSONObject.put(java.lang.String, java.lang.String) android.content.Intent.putExtra(java.lang.String, <unknown>) <unknown>.getCurrentName() android.content.res.Resources.getString(<unknown>) android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null) android.database.sqlite.SQLiteDatabase.setTransactionSuccessful() <unknown>.next() <unknown>.getText() <unknown>.nextValueToken() com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject) com.inovex.zabbixmobile.api.ZabbixService.showProgress(<unknown>) java.io.IOException.IOException(java.lang.String) <unknown>.getCurrentName() android.util.Log.d(java.lang.String, java.lang.String) java.lang.Object.toString() org.json.JSONObject.toString() <unknown>.set(<unknown>, <unknown>) org.json.JSONArray.JSONArray() org.apache.http.HttpResponse.getStatusLine() org.json.JSONArray.JSONArray() org.json.JSONObject.put(java.lang.String, java.lang.String) org.apache.http.impl.client.DefaultHttpClient.DefaultHttpClient() org.json.JSONObject.put(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject) org.apache.http.HttpResponse.getStatusLine() java.lang.String.equals(<unknown>) java.util.Date.Date() android.util.Log.i(java.lang.String, java.lang.String) android.content.Context.getResources() org.apache.http.impl.client.CloseableHttpClient.execute(org.apache.http.client.methods.HttpPost) com.inovex.zabbixmobile.api.ZabbixService._commitTransactionIfRecommended() com.inovex.zabbixmobile.api.ZabbixService.importHostGroups(<unknown>) android.content.Context.sendBroadcast(android.content.Intent) android.content.Context.sendBroadcast(android.content.Intent) com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, null, int) java.lang.Integer.parseInt(<unknown>) <unknown>.ApplicationData() com.inovex.zabbixmobile.api.ZabbixService.NoAPIAccessException.NoAPIAccessException() com.inovex.zabbixmobile.api.ZabbixService._commitTransactionIfRecommended() <unknown>.getJsonArray() org.apache.http.message.AbstractHttpMessage.addHeader(java.lang.String, java.lang.String) org.json.JSONObject.put(java.lang.String, int) java.lang.String.replace(java.lang.String, java.lang.String) org.json.JSONArray.JSONArray() <unknown>.set(<unknown>, <unknown>) org.json.JSONObject.put(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService.importTriggers(com.inovex.zabbixmobile.api.JsonArrayReader) <unknown>.set(<unknown>, <unknown>) org.json.JSONArray.JSONArray() java.lang.String.equals(<unknown>) com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, java.lang.String, int) <unknown>.nextProperty() <unknown>.set(<unknown>, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject) org.json.JSONObject.JSONObject() java.lang.String.contains(java.lang.String) org.apache.http.client.methods.HttpEntityEnclosingRequestBase.setEntity(org.apache.http.entity.StringEntity) org.json.JSONObject.put(java.lang.String, int) <unknown>.HostGroupData() <unknown>.HostGroupData() <unknown>.nextProperty() java.lang.Long.parseLong(<unknown>) org.json.JSONObject.put(java.lang.String, java.lang.String) org.json.JSONObject.put(java.lang.String, org.json.JSONArray) org.json.JSONObject.put(java.lang.String, java.lang.Integer) <unknown>.set(<unknown>, <unknown>) <unknown>.close() com.inovex.zabbixmobile.api.ZabbixService.importEvents(com.inovex.zabbixmobile.api.JsonArrayReader, int) <unknown>.set(<unknown>, <unknown>) org.json.JSONObject.put(java.lang.String, org.json.JSONArray) java.lang.String.equals(java.lang.String) android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null) <unknown>.next() org.json.JSONObject.toString() java.lang.String.equals(<unknown>) java.lang.String.equals(<unknown>) android.database.sqlite.SQLiteDatabase.query(<unknown>, null, <unknown>, null, null, null, null) <unknown>.set(<unknown>, <unknown>) org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.CacheData() <unknown>.getText() com.inovex.zabbixmobile.api.ZabbixService._startTransaction() <unknown>.set(<unknown>, <unknown>) com.inovex.zabbixmobile.api.ZabbixService._endTransaction() <unknown>.set(<unknown>, int) <unknown>.getJsonArray() java.lang.String.equals(<unknown>) java.util.Date.getTime() java.lang.String.equals(java.lang.String) org.json.JSONObject.put(java.lang.String, int) <unknown>.set(<unknown>, <unknown>) java.lang.Integer.parseInt(<unknown>) org.codehaus.jackson.JsonParser.getCurrentName() <unknown>.nextProperty() com.inovex.zabbixmobile.api.ZabbixService._endTransaction() java.lang.String.equals(<unknown>) org.json.JSONObject.put(java.lang.String, int) android.database.sqlite.SQLiteDatabase.update(<unknown>, android.content.ContentValues, <unknown>, null) com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject) com.inovex.zabbixmobile.api.ZabbixService._endTransaction() java.lang.StringBuilder.append(char) <unknown>.set(<unknown>, <unknown>) <unknown>.get(<unknown>) <unknown>.set(<unknown>, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject) org.json.JSONObject.put(java.lang.String, java.lang.String) android.database.Cursor.getLong(<unknown>) java.lang.String.equals(<unknown>) org.json.JSONObject.put(java.lang.String, java.lang.String) org.json.JSONObject.JSONObject() org.apache.http.params.HttpProtocolParams.setVersion(org.apache.http.params.HttpParams, org.apache.http.HttpVersion) org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.HistoryDetailData() com.inovex.zabbixmobile.api.ZabbixService._startTransaction() <unknown>.next() <unknown>.set(<unknown>, <unknown>) <unknown>.nextValueToken() org.json.JSONObject.JSONObject() java.lang.String.equals(<unknown>) java.lang.Long.parseLong(<unknown>) java.lang.Integer.parseInt(<unknown>) org.apache.http.client.methods.HttpPost.HttpPost(java.lang.String) org.apache.http.StatusLine.getStatusCode() <unknown>.set(<unknown>, int) java.lang.String.equals(java.lang.String) java.lang.String.equals(<unknown>) java.lang.String.equals(<unknown>) <unknown>.getCurrentName() java.util.ArrayList<java.lang.String>.ArrayList, String() com.inovex.zabbixmobile.api.ZabbixService._startTransaction() org.json.JSONArray.put(java.lang.String) <unknown>.nextValueToken() org.json.JSONArray.put(java.lang.String) <unknown>.set(<unknown>, <unknown>) org.json.JSONObject.put(java.lang.String, int) com.inovex.zabbixmobile.api.ZabbixService.importItems(<unknown>, int, boolean) org.json.JSONObject.JSONObject() com.inovex.zabbixmobile.api.ZabbixService.importTriggers(<unknown>) com.inovex.zabbixmobile.api.ZabbixService.importGraphItems(<unknown>) <unknown>.ScreenItemData() <unknown>.set(<unknown>, <unknown>) <unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>) android.preference.PreferenceManager.getDefaultSharedPreferences(android.content.Context) org.json.JSONObject.length() <unknown>.nextValueToken() java.util.HashSet<java.lang.Long>.HashSet, Long() java.lang.String.equals(java.lang.String) android.content.SharedPreferences.getBoolean(java.lang.String, boolean) <unknown>.insert(android.database.sqlite.SQLiteDatabase) org.json.JSONObject.put(java.lang.String, org.json.JSONArray) <unknown>.close() org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.next() android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null) org.json.JSONObject.put(java.lang.String, java.lang.String) org.json.JSONObject.getString(java.lang.String) <unknown>.set(<unknown>, <unknown>) org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.close() org.json.JSONObject.getString(java.lang.String) java.lang.String.equals(java.lang.String) java.lang.Long.parseLong(<unknown>) org.codehaus.jackson.JsonParser.isClosed() org.json.JSONObject.put(java.lang.String, int) org.json.JSONObject.put(java.lang.String, org.json.JSONArray) org.json.JSONObject.put(java.lang.String, long) <unknown>.close() org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.set(<unknown>, long) org.json.JSONObject.put(java.lang.String, org.json.JSONObject) <unknown>.set(<unknown>, <unknown>) com.inovex.zabbixmobile.api.ZabbixService._endTransaction() java.lang.String.replaceAll(java.lang.String, java.lang.String) org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.nextValueToken() org.json.JSONObject.put(java.lang.String, java.lang.String) org.json.JSONObject.put(java.lang.String, java.lang.String) org.apache.http.params.BasicHttpParams.BasicHttpParams() android.database.sqlite.SQLiteDatabase.beginTransaction() com.inovex.zabbixmobile.api.ZabbixService._commitTransactionIfRecommended() com.inovex.zabbixmobile.api.ZabbixService._endTransaction() java.lang.String.equals(<unknown>) <unknown>.insert(android.database.sqlite.SQLiteDatabase) <unknown>.insert(android.database.sqlite.SQLiteDatabase) org.json.JSONObject.put(java.lang.String, int) <unknown>.next() com.inovex.zabbixmobile.api.ZabbixService._startTransaction() <unknown>.getJsonArray() android.content.SharedPreferences.getString(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, null, int) javax.net.SocketFactory.createSocket() java.lang.Long.parseLong(<unknown>) org.apache.http.client.CredentialsProvider.setCredentials(org.apache.http.auth.AuthScope, org.apache.http.auth.UsernamePasswordCredentials) org.json.JSONObject.put(java.lang.String, java.lang.String) org.json.JSONObject.put(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService.importTriggers(com.inovex.zabbixmobile.api.JsonArrayReader) <unknown>.next() com.inovex.zabbixmobile.api.ZabbixService.HttpAuthorizationRequiredException.HttpAuthorizationRequiredException() android.database.sqlite.SQLiteQueryBuilder.query(android.database.sqlite.SQLiteDatabase, null, null, null, null, null, null) java.util.Date.Date() com.inovex.zabbixmobile.api.ZabbixService._commitTransactionIfRecommended() <unknown>.set(<unknown>, java.lang.String) org.json.JSONObject.JSONObject() <unknown>.next() <unknown>.set(<unknown>, <unknown>) <unknown>.set(<unknown>, <unknown>) com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject) java.lang.String.equals(java.lang.String) com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, java.lang.String) java.lang.String.indexOf(char) android.database.sqlite.SQLiteDatabase.query(<unknown>, null, <unknown>, null, null, null, null) android.preference.PreferenceManager.getDefaultSharedPreferences(android.content.Context) <unknown>.nextProperty() org.apache.http.impl.client.CloseableHttpClient.execute(org.apache.http.client.methods.HttpPost) <unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>) com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, java.lang.String) org.json.JSONObject.JSONObject() <unknown>.close() android.database.Cursor.getColumnIndex(<unknown>) android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null) org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.nextProperty() org.apache.http.conn.scheme.PlainSocketFactory.getSocketFactory() com.inovex.zabbixmobile.api.ZabbixService._commitTransactionIfRecommended() com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject) java.lang.StringBuilder.toString() org.json.JSONObject.put(java.lang.String, java.lang.String) android.database.sqlite.SQLiteQueryBuilder.SQLiteQueryBuilder() <unknown>.insert(android.database.sqlite.SQLiteDatabase) org.apache.http.conn.scheme.SchemeRegistry.register(org.apache.http.conn.scheme.Scheme) <unknown>.set(<unknown>, <unknown>) org.json.JSONObject.JSONObject(java.lang.String) java.lang.String.equals(<unknown>) <unknown>.set(<unknown>, <unknown>) <unknown>.set(<unknown>, <unknown>) java.lang.IllegalStateException.IllegalStateException(java.lang.String) java.lang.Double.parseDouble(<unknown>) android.content.ContentValues.put(<unknown>, java.lang.Long) android.database.sqlite.SQLiteQueryBuilder.appendWhere(<unknown>) org.apache.http.conn.scheme.SchemeRegistry.register(org.apache.http.conn.scheme.Scheme) org.json.JSONObject.getInt(java.lang.String) com.inovex.zabbixmobile.api.ZabbixService.importHosts(<unknown>, null) org.json.JSONObject.put(java.lang.String, boolean) java.lang.Long.parseLong(<unknown>) java.lang.String.indexOf(char) android.database.sqlite.SQLiteQueryBuilder.appendWhere(<unknown>) java.lang.String.length() java.lang.String.equals(<unknown>) com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject) <unknown>.nextProperty() <unknown>.next() android.content.SharedPreferences.getString(java.lang.String, java.lang.String) <unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>) <unknown>.GraphData() org.json.JSONArray.put(java.lang.String) org.apache.http.impl.client.AbstractHttpClient.getParams() <unknown>.set(<unknown>, long) <unknown>.set(<unknown>, <unknown>) org.json.JSONObject.getJSONObject(java.lang.String) org.json.JSONObject.put(java.lang.String, java.lang.String) java.lang.String.equals(java.lang.String) org.json.JSONObject.getString(java.lang.String) java.lang.String.equals(<unknown>) java.lang.String.equals(<unknown>) <unknown>.getCurrentName() java.lang.String.equals(<unknown>) com.inovex.zabbixmobile.api.ZabbixService.showProgress(int) <unknown>.getCurrentName() com.inovex.zabbixmobile.api.ZabbixService.importHosts(<unknown>, null) com.inovex.zabbixmobile.api.ZabbixService.importItems(com.inovex.zabbixmobile.api.JsonArrayReader, int, boolean) com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, java.lang.String, int) org.json.JSONObject.put(java.lang.String, int) org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.close() java.lang.String.replace(java.lang.String, java.lang.String) java.lang.String.equals(<unknown>) com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject) com.inovex.zabbixmobile.api.ZabbixService._endTransaction() android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null) android.database.Cursor.moveToNext() <unknown>.HostData() <unknown>.set(<unknown>, long) <unknown>.next() com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject) android.database.sqlite.SQLiteQueryBuilder.setTables(<unknown>) java.util.Date.getTime() org.json.JSONObject.put(java.lang.String, long) android.content.ContentValues.ContentValues(int) java.lang.Long.parseLong(<unknown>) org.apache.http.HttpResponse.getEntity() org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.getText() java.lang.String.equals(java.lang.String) <unknown>.set(<unknown>, <unknown>) <unknown>.set(<unknown>, <unknown>) javax.net.ssl.SSLContext.init(null, javax.net.ssl.TrustManager[], null) android.database.sqlite.SQLiteDatabase.endTransaction() java.lang.String.equals(<unknown>) com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, java.lang.String) <unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>) <unknown>.next() <unknown>.close() <unknown>.insert(android.database.sqlite.SQLiteDatabase) org.json.JSONObject.put(java.lang.String, java.lang.String) java.lang.Throwable.getMessage() java.lang.String.equals(<unknown>) java.lang.String.equals(<unknown>) <unknown>.set(<unknown>, <unknown>) com.inovex.zabbixmobile.api.ZabbixService._endTransaction() javax.net.ssl.SSLContext.getSocketFactory() org.json.JSONObject.JSONObject() android.content.Context.getResources() org.json.JSONObject.put(java.lang.String, int) com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, null) com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, java.lang.String, int) java.lang.String.matches(java.lang.String) <unknown>.set(<unknown>, <unknown>) org.json.JSONArray.put(java.lang.String) <unknown>.set(<unknown>, <unknown>) android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null) android.content.Context.sendBroadcast(android.content.Intent) org.json.JSONObject.getJSONObject(java.lang.String) <unknown>.get(<unknown>) android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null) java.lang.String.equals(<unknown>) android.content.SharedPreferences.getBoolean(java.lang.String, boolean) java.lang.Throwable.printStackTrace() android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null) org.json.JSONObject.put(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService._startTransaction() android.content.Intent.putExtra(java.lang.String, int) org.json.JSONObject.JSONObject() <unknown>.getText() com.inovex.zabbixmobile.api.ZabbixService.importHosts(com.inovex.zabbixmobile.api.JsonArrayReader, int) com.inovex.zabbixmobile.api.ZabbixService._endTransaction() org.apache.http.client.methods.HttpPost.HttpPost(java.lang.String) android.content.SharedPreferences.getString(java.lang.String, java.lang.String) <unknown>.GraphItemData() com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, java.lang.String, int) <unknown>.nextValueToken() com.inovex.zabbixmobile.api.ZabbixService.importTriggers(com.inovex.zabbixmobile.api.JsonArrayReader) org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager.ThreadSafeClientConnManager(org.apache.http.params.HttpParams, org.apache.http.conn.scheme.SchemeRegistry) <unknown>.ApplicationItemRelationData() java.lang.Object.toString() android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null) org.json.JSONArray.JSONArray() java.lang.String.equals(<unknown>) com.inovex.zabbixmobile.api.ZabbixService._startTransaction() org.json.JSONObject.put(java.lang.String, org.json.JSONArray) com.inovex.zabbixmobile.api.ZabbixService.importApplications(int, int, <unknown>) <unknown>.set(<unknown>, int) org.json.JSONObject.put(java.lang.String, int) com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, java.lang.String, int) org.json.JSONObject.put(java.lang.String, java.lang.String) org.json.JSONObject.JSONObject() java.lang.Math.min(int, int) com.inovex.zabbixmobile.api.ZabbixService.showProgress(<unknown>) java.lang.String.equals(java.lang.String) android.content.Intent.Intent(<unknown>) java.lang.String.equals(<unknown>) org.json.JSONObject.put(java.lang.String, int) javax.net.ssl.SSLContext.getInstance(java.lang.String) android.content.res.Resources.getString(<unknown>) org.json.JSONObject.JSONObject() android.content.Intent.Intent(<unknown>) java.lang.String.equals(<unknown>) <unknown>.nextProperty() javax.net.ssl.SSLSocketFactory.createSocket(java.net.Socket, java.lang.String, int, boolean) org.json.JSONObject.put(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject) <unknown>.get(<unknown>) java.io.IOException.IOException(java.lang.String) java.lang.String.trim() java.lang.String.contains(java.lang.String) org.apache.http.entity.StringEntity.StringEntity(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService._endTransaction() .X509TrustManager() com.inovex.zabbixmobile.api.ZabbixService.importEvents(com.inovex.zabbixmobile.api.JsonArrayReader, null) com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject) android.graphics.Color.parseColor(<unknown>) com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, null) org.json.JSONObject.getJSONArray(java.lang.String) org.apache.http.client.params.HttpClientParams.setRedirecting(org.apache.http.params.HttpParams, boolean) com.inovex.zabbixmobile.api.ZabbixService._startTransaction() <unknown>.getCurrentName() java.lang.String.equals(<unknown>) java.lang.Long.parseLong(<unknown>) java.lang.Long.parseLong(<unknown>) <unknown>.getText() java.util.Date.getTime() android.content.Intent.putExtra(java.lang.String, <unknown>) android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null) <unknown>.get(<unknown>) android.database.Cursor.moveToFirst() org.apache.http.client.methods.HttpEntityEnclosingRequestBase.setEntity(org.apache.http.entity.StringEntity) com.inovex.zabbixmobile.api.ZabbixService._commitTransactionIfRecommended() com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, null) android.database.sqlite.SQLiteQueryBuilder.appendWhere(<unknown>) org.apache.http.auth.UsernamePasswordCredentials.UsernamePasswordCredentials(java.lang.String, java.lang.String) java.util.Date.getTime() java.lang.String.equals(<unknown>) com.inovex.zabbixmobile.api.ZabbixService._endTransaction() org.json.JSONObject.put(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService.authenticate() java.lang.String.equals(<unknown>) org.json.JSONObject.put(java.lang.String, java.lang.String) org.json.JSONObject.put(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService.NoAPIAccessException.NoAPIAccessException() org.json.JSONArray.put(long) com.inovex.zabbixmobile.api.ZabbixService._endTransaction() android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null) <unknown>.getJsonArray() <unknown>.ScreenData() java.util.Date.Date() java.util.Date.Date() <unknown>.set(<unknown>, long) <unknown>.getCurrentName() org.json.JSONObject.put(java.lang.String, org.json.JSONArray) <unknown>.set(<unknown>, long) org.json.JSONObject.put(java.lang.String, java.lang.String) org.apache.http.params.HttpConnectionParams.setConnectionTimeout(org.apache.http.params.HttpParams, int) org.json.JSONArray.length() <unknown>.set(<unknown>, java.lang.String) <unknown>.set(<unknown>, long) java.util.Date.getTime() <unknown>.set(<unknown>, <unknown>) <unknown>.set(<unknown>, <unknown>) org.json.JSONArray.put(java.lang.String) java.lang.String.equals(<unknown>) com.inovex.zabbixmobile.api.ZabbixService.importScreenItems(<unknown>) com.inovex.zabbixmobile.api.ZabbixService.HttpAuthorizationRequiredException.HttpAuthorizationRequiredException() <unknown>.getText() org.json.JSONObject.put(java.lang.String, org.json.JSONArray) org.json.JSONObject.JSONObject() <unknown>.set(<unknown>, <unknown>) com.inovex.zabbixmobile.api.ZabbixService.importHostGroups(<unknown>) org.json.JSONObject.toString() java.lang.Integer.parseInt(<unknown>) java.lang.String.equals(java.lang.String) org.apache.http.params.HttpProtocolParams.setContentCharset(org.apache.http.params.HttpParams, java.lang.String) <unknown>.get(<unknown>) android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null) java.lang.String.equals(<unknown>) <unknown>.set(<unknown>, <unknown>) <unknown>.nextValueToken() <unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>) org.json.JSONObject.put(java.lang.String, org.json.JSONArray) org.json.JSONObject.put(java.lang.String, java.lang.Integer) <unknown>.getText() <unknown>.set(<unknown>, <unknown>) org.apache.http.message.AbstractHttpMessage.addHeader(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject) org.json.JSONObject.getJSONArray(java.lang.String) java.security.KeyStore.load(null, null) java.lang.String.replace(java.lang.String, java.lang.String) java.lang.Long.parseLong(<unknown>) org.json.JSONObject.toString() android.content.SharedPreferences.getString(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, java.lang.String) <unknown>.TriggerData() android.content.SharedPreferences.getString(java.lang.String, java.lang.String) android.content.Intent.Intent(<unknown>) org.json.JSONObject.put(java.lang.String, java.lang.String) org.apache.http.impl.client.AbstractHttpClient.getCredentialsProvider() <unknown>.set(<unknown>, <unknown>) java.io.IOException.IOException(java.lang.String) java.lang.String.trim() org.json.JSONObject.put(java.lang.String, org.json.JSONArray) java.lang.String.split(java.lang.String) java.lang.String.equals(java.lang.String) java.lang.String.endsWith(java.lang.String) <unknown>.set(<unknown>, int) com.inovex.zabbixmobile.api.ZabbixService.showProgress(int) <unknown>.ItemData() org.json.JSONObject.put(java.lang.String, int) <unknown>.set(<unknown>, <unknown>) org.codehaus.jackson.JsonParser.getText() android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null) org.apache.http.impl.client.DefaultHttpClient.DefaultHttpClient(org.apache.http.conn.ClientConnectionManager, org.apache.http.params.HttpParams) <unknown>.close() java.lang.IllegalStateException.IllegalStateException(java.lang.String) org.json.JSONObject.put(java.lang.String, java.lang.String) org.codehaus.jackson.JsonParser.nextToken() android.database.Cursor.getColumnIndex(<unknown>) org.json.JSONObject.put(java.lang.String, org.json.JSONArray) <unknown>.nextValueToken() com.inovex.zabbixmobile.api.ZabbixService._startTransaction() org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.set(<unknown>, java.lang.String) java.lang.String.substring(int, int) java.lang.Long.parseLong(<unknown>) org.json.JSONObject.put(java.lang.String, java.lang.String) org.json.JSONObject.getInt(java.lang.String) java.lang.String.equals(java.lang.String) <unknown>.set(<unknown>, <unknown>) <unknown>.set(<unknown>, <unknown>) java.security.KeyStore.getInstance(java.lang.String) java.lang.Integer.parseInt(<unknown>) java.lang.String.equals(java.lang.String) <unknown>.nextProperty() android.content.Intent.putExtra(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, null) <unknown>.set(<unknown>, int) java.io.BufferedReader.BufferedReader(java.io.InputStreamReader) java.security.KeyStore.getDefaultType() java.lang.String.equals(<unknown>) <unknown>.getText() org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.set(<unknown>, java.lang.Object) org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.insert(android.database.sqlite.SQLiteDatabase) <unknown>.nextProperty() com.inovex.zabbixmobile.api.ZabbixService._startTransaction() org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.close() <unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>) org.json.JSONObject.put(java.lang.String, long) com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, null, int) <unknown>.getJsonArray() <unknown>.set(<unknown>, <unknown>) java.lang.String.equals(<unknown>) org.apache.http.conn.scheme.Scheme.Scheme(java.lang.String, org.apache.http.conn.scheme.PlainSocketFactory, int) org.json.JSONObject.put(java.lang.String, java.lang.String) java.lang.String.equals(<unknown>)"],
      "c_callsites_t": ["<unknown>.set(<unknown>, <unknown>) org.apache.http.HttpEntity.getContent() java.lang.String.equals(java.lang.String) org.json.JSONArray.JSONArray() <unknown>.set(<unknown>, java.lang.Object) org.json.JSONObject.put(java.lang.String, java.lang.Integer) org.json.JSONArray.put(java.lang.String) org.json.JSONObject.JSONObject() org.json.JSONObject.put(java.lang.String, java.lang.String) org.codehaus.jackson.JsonFactory.createJsonParser(java.io.InputStream) java.lang.String.equals(<unknown>) org.apache.http.StatusLine.getStatusCode() <unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>) org.json.JSONObject.put(java.lang.String, java.lang.String) android.database.sqlite.SQLiteDatabase.inTransaction() android.util.Log.d(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService._startTransaction() java.lang.String.equals(java.lang.String) org.codehaus.jackson.JsonFactory.JsonFactory() com.inovex.zabbixmobile.api.ZabbixService._endTransaction() org.json.JSONObject.put(java.lang.String, int) android.content.ContentValues.ContentValues(int) org.apache.http.conn.scheme.SchemeRegistry.SchemeRegistry() <unknown>.insert(android.database.sqlite.SQLiteDatabase) <unknown>.insert(android.database.sqlite.SQLiteDatabase) com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject) com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject) com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject) org.json.JSONObject.getJSONObject(java.lang.String) java.io.InputStreamReader.InputStreamReader(java.io.InputStream) android.content.Intent.putExtra(java.lang.String, <unknown>) org.json.JSONArray.length() java.lang.String.equals(java.lang.String) <unknown>.set(<unknown>, <unknown>) java.lang.String.equals(<unknown>) com.inovex.zabbixmobile.api.ZabbixService.PreconditionFailedException.PreconditionFailedException() java.lang.StringBuilder.StringBuilder() android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null) <unknown>.nextValueToken() org.json.JSONObject.JSONObject() org.json.JSONObject.put(java.lang.String, int) org.json.JSONObject.put(java.lang.String, org.json.JSONArray) java.lang.String.equals(<unknown>) <unknown>.get(<unknown>) <unknown>.insert(android.database.sqlite.SQLiteDatabase) android.content.Intent.putExtra(java.lang.String, <unknown>) java.lang.String.equals(<unknown>) com.inovex.zabbixmobile.api.ZabbixService.importItems(<unknown>, int, boolean) com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, java.lang.String, int) android.util.Log.d(java.lang.String, java.lang.String) org.json.JSONObject.put(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject) org.apache.http.conn.scheme.Scheme.Scheme(java.lang.String, org.apache.http.conn.ssl.SSLSocketFactory, int) org.apache.http.HttpEntity.getContent() org.codehaus.jackson.JsonParser.close() java.lang.String.equals(<unknown>) <unknown>.nextValueToken() <unknown>.getCurrentName() org.json.JSONArray.JSONArray(java.util.Set<java.lang.Long>) <unknown>.nextValueToken() android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null) <unknown>.getJsonArray() com.inovex.zabbixmobile.api.ZabbixService._startTransaction() org.json.JSONArray.JSONArray() <unknown>.nextProperty() java.lang.String.equals(java.lang.String) android.database.sqlite.SQLiteDatabase.update(<unknown>, android.content.ContentValues, <unknown>, null) java.util.Set<java.lang.Long>.add(<unknown>) <unknown>.get(<unknown>) <unknown>.get(<unknown>) android.content.ContentValues.put(<unknown>, java.lang.Long) java.lang.String.equals(java.lang.String) org.apache.http.StatusLine.getReasonPhrase() java.lang.RuntimeException.RuntimeException(java.lang.String) <unknown>.nextProperty() java.lang.Throwable.printStackTrace() java.lang.String.equals(<unknown>) java.lang.Long.parseLong(<unknown>) org.json.JSONObject.put(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject) <unknown>.getCurrentName() android.content.ContentValues.put(<unknown>, java.lang.Long) org.apache.http.entity.StringEntity.StringEntity(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject) java.lang.String.equals(<unknown>) <unknown>.EventData() <unknown>.next() <unknown>.set(<unknown>, <unknown>) com.inovex.zabbixmobile.api.ZabbixService.CustomSSLSocketFactory.CustomSSLSocketFactory(java.security.KeyStore) com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject) <unknown>.getCurrentName() java.util.List<java.lang.String>.add(java.lang.String) org.json.JSONObject.put(java.lang.String, int) <unknown>.getText() org.json.JSONObject.put(java.lang.String, java.lang.String) org.apache.http.conn.ssl.SSLSocketFactory.setHostnameVerifier(org.apache.http.conn.ssl.X509HostnameVerifier) <unknown>.set(<unknown>, <unknown>) <unknown>.getText() org.json.JSONObject.put(java.lang.String, long) java.util.Date.Date() android.util.Log.i(java.lang.String, java.lang.String) org.json.JSONObject.put(java.lang.String, int) org.json.JSONObject.put(java.lang.String, int) <unknown>.set(<unknown>, <unknown>) com.inovex.zabbixmobile.api.ZabbixService.authenticate() android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null) android.util.Log.d(java.lang.String, java.lang.String) java.lang.String.equals(java.lang.String) org.apache.http.HttpResponse.getEntity() org.json.JSONObject.JSONObject() com.inovex.zabbixmobile.api.ZabbixService.importItems(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader, int, boolean) com.inovex.zabbixmobile.api.ZabbixService._startTransaction() com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, null, int) java.io.BufferedReader.read() org.json.JSONObject.put(java.lang.String, long) <unknown>.set(<unknown>, <unknown>) android.database.Cursor.getLong(<unknown>) java.lang.IllegalStateException.IllegalStateException(java.lang.String) org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.getCurrentName() android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null) android.util.Log.d(java.lang.String, java.lang.String) <unknown>.set(<unknown>, <unknown>) java.lang.String.equals(<unknown>) org.json.JSONObject.put(java.lang.String, java.lang.String) android.database.Cursor.moveToFirst() com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, java.lang.String) android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null) java.lang.String.equals(java.lang.String) com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, java.lang.String) <unknown>.getText() org.json.JSONObject.put(java.lang.String, java.lang.String) android.content.Intent.putExtra(java.lang.String, <unknown>) <unknown>.getCurrentName() android.content.res.Resources.getString(<unknown>) android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null) android.database.sqlite.SQLiteDatabase.setTransactionSuccessful() <unknown>.next() <unknown>.getText() <unknown>.nextValueToken() com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject) com.inovex.zabbixmobile.api.ZabbixService.showProgress(<unknown>) java.io.IOException.IOException(java.lang.String) <unknown>.getCurrentName() android.util.Log.d(java.lang.String, java.lang.String) java.lang.Object.toString() org.json.JSONObject.toString() <unknown>.set(<unknown>, <unknown>) org.json.JSONArray.JSONArray() org.apache.http.HttpResponse.getStatusLine() org.json.JSONArray.JSONArray() org.json.JSONObject.put(java.lang.String, java.lang.String) org.apache.http.impl.client.DefaultHttpClient.DefaultHttpClient() org.json.JSONObject.put(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject) org.apache.http.HttpResponse.getStatusLine() java.lang.String.equals(<unknown>) java.util.Date.Date() android.util.Log.i(java.lang.String, java.lang.String) android.content.Context.getResources() org.apache.http.impl.client.CloseableHttpClient.execute(org.apache.http.client.methods.HttpPost) com.inovex.zabbixmobile.api.ZabbixService._commitTransactionIfRecommended() com.inovex.zabbixmobile.api.ZabbixService.importHostGroups(<unknown>) android.content.Context.sendBroadcast(android.content.Intent) android.content.Context.sendBroadcast(android.content.Intent) com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, null, int) java.lang.Integer.parseInt(<unknown>) <unknown>.ApplicationData() com.inovex.zabbixmobile.api.ZabbixService.NoAPIAccessException.NoAPIAccessException() com.inovex.zabbixmobile.api.ZabbixService._commitTransactionIfRecommended() <unknown>.getJsonArray() org.apache.http.message.AbstractHttpMessage.addHeader(java.lang.String, java.lang.String) org.json.JSONObject.put(java.lang.String, int) java.lang.String.replace(java.lang.String, java.lang.String) org.json.JSONArray.JSONArray() <unknown>.set(<unknown>, <unknown>) org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.set(<unknown>, <unknown>) org.json.JSONArray.JSONArray() java.lang.String.equals(<unknown>) com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, java.lang.String, int) <unknown>.nextProperty() <unknown>.set(<unknown>, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject) org.json.JSONObject.JSONObject() java.lang.String.contains(java.lang.String) org.apache.http.client.methods.HttpEntityEnclosingRequestBase.setEntity(org.apache.http.entity.StringEntity) com.inovex.zabbixmobile.api.ZabbixService.importTriggers(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader) org.json.JSONObject.put(java.lang.String, int) <unknown>.HostGroupData() <unknown>.JsonArrayOrObjectReader(org.codehaus.jackson.JsonParser) <unknown>.HostGroupData() <unknown>.nextProperty() java.lang.Long.parseLong(<unknown>) org.json.JSONObject.put(java.lang.String, java.lang.String) org.json.JSONObject.put(java.lang.String, org.json.JSONArray) org.json.JSONObject.put(java.lang.String, java.lang.Integer) <unknown>.set(<unknown>, <unknown>) <unknown>.close() org.json.JSONObject.put(java.lang.String, org.json.JSONArray) <unknown>.set(<unknown>, <unknown>) java.lang.String.equals(java.lang.String) android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null) <unknown>.next() org.json.JSONObject.toString() java.lang.String.equals(<unknown>) java.lang.String.equals(<unknown>) android.database.sqlite.SQLiteDatabase.query(<unknown>, null, <unknown>, null, null, null, null) <unknown>.set(<unknown>, <unknown>) org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.CacheData() <unknown>.getText() com.inovex.zabbixmobile.api.ZabbixService._startTransaction() <unknown>.set(<unknown>, <unknown>) com.inovex.zabbixmobile.api.ZabbixService._endTransaction() <unknown>.set(<unknown>, int) <unknown>.getJsonArray() java.lang.String.equals(<unknown>) java.util.Date.getTime() java.lang.String.equals(java.lang.String) org.json.JSONObject.put(java.lang.String, int) <unknown>.set(<unknown>, <unknown>) java.lang.Integer.parseInt(<unknown>) org.codehaus.jackson.JsonParser.getCurrentName() <unknown>.nextProperty() com.inovex.zabbixmobile.api.ZabbixService._endTransaction() java.lang.String.equals(<unknown>) org.json.JSONObject.put(java.lang.String, int) android.database.sqlite.SQLiteDatabase.update(<unknown>, android.content.ContentValues, <unknown>, null) com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject) com.inovex.zabbixmobile.api.ZabbixService._endTransaction() java.lang.StringBuilder.append(char) <unknown>.set(<unknown>, <unknown>) <unknown>.get(<unknown>) <unknown>.set(<unknown>, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject) org.json.JSONObject.put(java.lang.String, java.lang.String) android.database.Cursor.getLong(<unknown>) java.lang.String.equals(<unknown>) org.json.JSONObject.put(java.lang.String, java.lang.String) org.json.JSONObject.JSONObject() org.apache.http.params.HttpProtocolParams.setVersion(org.apache.http.params.HttpParams, org.apache.http.HttpVersion) org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.HistoryDetailData() android.util.Log.d(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService._startTransaction() <unknown>.next() <unknown>.set(<unknown>, <unknown>) <unknown>.nextValueToken() org.json.JSONObject.JSONObject() java.lang.String.equals(<unknown>) java.lang.Long.parseLong(<unknown>) java.lang.Integer.parseInt(<unknown>) org.apache.http.client.methods.HttpPost.HttpPost(java.lang.String) org.apache.http.StatusLine.getStatusCode() <unknown>.set(<unknown>, int) java.lang.String.equals(java.lang.String) java.lang.String.equals(<unknown>) java.lang.String.equals(<unknown>) <unknown>.getCurrentName() java.util.ArrayList<java.lang.String>.ArrayList, String() com.inovex.zabbixmobile.api.ZabbixService._startTransaction() com.inovex.zabbixmobile.api.ZabbixService.importTriggers(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader) org.json.JSONArray.put(java.lang.String) <unknown>.nextValueToken() org.json.JSONArray.put(java.lang.String) <unknown>.set(<unknown>, <unknown>) org.json.JSONObject.put(java.lang.String, int) com.inovex.zabbixmobile.api.ZabbixService.importItems(<unknown>, int, boolean) org.json.JSONObject.JSONObject() com.inovex.zabbixmobile.api.ZabbixService.importTriggers(<unknown>) com.inovex.zabbixmobile.api.ZabbixService.importGraphItems(<unknown>) <unknown>.ScreenItemData() <unknown>.set(<unknown>, <unknown>) <unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>) android.preference.PreferenceManager.getDefaultSharedPreferences(android.content.Context) org.json.JSONObject.length() <unknown>.nextValueToken() java.util.HashSet<java.lang.Long>.HashSet, Long() java.lang.String.equals(java.lang.String) android.content.SharedPreferences.getBoolean(java.lang.String, boolean) <unknown>.insert(android.database.sqlite.SQLiteDatabase) org.json.JSONObject.put(java.lang.String, org.json.JSONArray) <unknown>.close() com.inovex.zabbixmobile.api.ZabbixService.importHosts(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader, int) org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.next() android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null) org.json.JSONObject.put(java.lang.String, java.lang.String) org.json.JSONObject.getString(java.lang.String) <unknown>.set(<unknown>, <unknown>) org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.close() org.json.JSONObject.getString(java.lang.String) java.lang.String.equals(java.lang.String) java.lang.Long.parseLong(<unknown>) org.codehaus.jackson.JsonParser.isClosed() org.json.JSONObject.put(java.lang.String, int) org.json.JSONObject.put(java.lang.String, org.json.JSONArray) org.json.JSONObject.put(java.lang.String, long) <unknown>.close() org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.set(<unknown>, long) org.json.JSONObject.put(java.lang.String, org.json.JSONObject) <unknown>.set(<unknown>, <unknown>) com.inovex.zabbixmobile.api.ZabbixService._endTransaction() java.lang.String.replaceAll(java.lang.String, java.lang.String) org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.nextValueToken() org.json.JSONObject.put(java.lang.String, java.lang.String) org.json.JSONObject.put(java.lang.String, java.lang.String) org.apache.http.params.BasicHttpParams.BasicHttpParams() android.database.sqlite.SQLiteDatabase.beginTransaction() com.inovex.zabbixmobile.api.ZabbixService._commitTransactionIfRecommended() com.inovex.zabbixmobile.api.ZabbixService._endTransaction() java.lang.String.equals(<unknown>) <unknown>.insert(android.database.sqlite.SQLiteDatabase) <unknown>.insert(android.database.sqlite.SQLiteDatabase) org.json.JSONObject.put(java.lang.String, int) <unknown>.next() com.inovex.zabbixmobile.api.ZabbixService._startTransaction() <unknown>.getJsonArray() android.content.SharedPreferences.getString(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, null, int) javax.net.SocketFactory.createSocket() java.lang.Long.parseLong(<unknown>) org.apache.http.client.CredentialsProvider.setCredentials(org.apache.http.auth.AuthScope, org.apache.http.auth.UsernamePasswordCredentials) org.json.JSONObject.put(java.lang.String, java.lang.String) org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.next() com.inovex.zabbixmobile.api.ZabbixService.HttpAuthorizationRequiredException.HttpAuthorizationRequiredException() android.database.sqlite.SQLiteQueryBuilder.query(android.database.sqlite.SQLiteDatabase, null, null, null, null, null, null) java.util.Date.Date() com.inovex.zabbixmobile.api.ZabbixService._commitTransactionIfRecommended() <unknown>.set(<unknown>, java.lang.String) org.json.JSONObject.JSONObject() <unknown>.next() <unknown>.set(<unknown>, <unknown>) <unknown>.set(<unknown>, <unknown>) com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject) java.lang.String.equals(java.lang.String) com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, java.lang.String) java.lang.String.indexOf(char) android.database.sqlite.SQLiteDatabase.query(<unknown>, null, <unknown>, null, null, null, null) android.preference.PreferenceManager.getDefaultSharedPreferences(android.content.Context) <unknown>.nextProperty() org.apache.http.impl.client.CloseableHttpClient.execute(org.apache.http.client.methods.HttpPost) <unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>) com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, java.lang.String) org.json.JSONObject.JSONObject() <unknown>.close() android.database.Cursor.getColumnIndex(<unknown>) android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null) org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.nextProperty() org.apache.http.conn.scheme.PlainSocketFactory.getSocketFactory() com.inovex.zabbixmobile.api.ZabbixService._commitTransactionIfRecommended() com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject) java.lang.StringBuilder.toString() org.json.JSONObject.put(java.lang.String, java.lang.String) android.database.sqlite.SQLiteQueryBuilder.SQLiteQueryBuilder() <unknown>.insert(android.database.sqlite.SQLiteDatabase) org.apache.http.conn.scheme.SchemeRegistry.register(org.apache.http.conn.scheme.Scheme) <unknown>.set(<unknown>, <unknown>) org.json.JSONObject.JSONObject(java.lang.String) java.lang.String.equals(<unknown>) <unknown>.set(<unknown>, <unknown>) <unknown>.set(<unknown>, <unknown>) java.lang.IllegalStateException.IllegalStateException(java.lang.String) java.lang.Double.parseDouble(<unknown>) android.content.ContentValues.put(<unknown>, java.lang.Long) android.database.sqlite.SQLiteQueryBuilder.appendWhere(<unknown>) org.apache.http.conn.scheme.SchemeRegistry.register(org.apache.http.conn.scheme.Scheme) org.json.JSONObject.getInt(java.lang.String) com.inovex.zabbixmobile.api.ZabbixService.importHosts(<unknown>, null) org.json.JSONObject.put(java.lang.String, boolean) java.lang.Long.parseLong(<unknown>) java.lang.String.indexOf(char) android.database.sqlite.SQLiteQueryBuilder.appendWhere(<unknown>) java.lang.String.length() java.lang.String.equals(<unknown>) com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject) <unknown>.nextProperty() <unknown>.next() android.content.SharedPreferences.getString(java.lang.String, java.lang.String) <unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>) com.inovex.zabbixmobile.api.ZabbixService.importTriggers(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader) <unknown>.GraphData() org.json.JSONArray.put(java.lang.String) org.apache.http.impl.client.AbstractHttpClient.getParams() <unknown>.set(<unknown>, long) <unknown>.set(<unknown>, <unknown>) org.json.JSONObject.getJSONObject(java.lang.String) org.json.JSONObject.put(java.lang.String, java.lang.String) java.lang.String.equals(java.lang.String) org.json.JSONObject.getString(java.lang.String) java.lang.String.equals(<unknown>) java.lang.String.equals(<unknown>) <unknown>.getCurrentName() java.lang.String.equals(<unknown>) com.inovex.zabbixmobile.api.ZabbixService.showProgress(int) <unknown>.getCurrentName() com.inovex.zabbixmobile.api.ZabbixService.importHosts(<unknown>, null) com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, java.lang.String, int) org.json.JSONObject.put(java.lang.String, int) org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.close() java.lang.String.replace(java.lang.String, java.lang.String) java.lang.String.equals(<unknown>) com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject) com.inovex.zabbixmobile.api.ZabbixService._endTransaction() android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null) android.database.Cursor.moveToNext() <unknown>.HostData() <unknown>.set(<unknown>, long) <unknown>.next() com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject) android.database.sqlite.SQLiteQueryBuilder.setTables(<unknown>) java.util.Date.getTime() org.json.JSONObject.put(java.lang.String, long) android.content.ContentValues.ContentValues(int) java.lang.Long.parseLong(<unknown>) org.apache.http.HttpResponse.getEntity() org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.getText() java.lang.String.equals(java.lang.String) <unknown>.set(<unknown>, <unknown>) <unknown>.set(<unknown>, <unknown>) javax.net.ssl.SSLContext.init(null, javax.net.ssl.TrustManager[], null) android.database.sqlite.SQLiteDatabase.endTransaction() java.lang.String.equals(<unknown>) com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, java.lang.String) android.util.Log.d(java.lang.String, java.lang.String) <unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>) <unknown>.next() <unknown>.close() <unknown>.insert(android.database.sqlite.SQLiteDatabase) org.json.JSONObject.put(java.lang.String, java.lang.String) java.lang.Throwable.getMessage() java.lang.String.equals(<unknown>) java.lang.String.equals(<unknown>) <unknown>.set(<unknown>, <unknown>) com.inovex.zabbixmobile.api.ZabbixService._endTransaction() javax.net.ssl.SSLContext.getSocketFactory() org.json.JSONObject.JSONObject() android.content.Context.getResources() org.json.JSONObject.put(java.lang.String, int) com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, null) com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, java.lang.String, int) java.lang.String.matches(java.lang.String) <unknown>.set(<unknown>, <unknown>) org.json.JSONArray.put(java.lang.String) <unknown>.set(<unknown>, <unknown>) android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null) android.content.Context.sendBroadcast(android.content.Intent) org.json.JSONObject.getJSONObject(java.lang.String) <unknown>.get(<unknown>) android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null) java.lang.String.equals(<unknown>) android.content.SharedPreferences.getBoolean(java.lang.String, boolean) java.lang.Throwable.printStackTrace() android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null) org.json.JSONObject.put(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService._startTransaction() android.content.Intent.putExtra(java.lang.String, int) org.json.JSONObject.JSONObject() <unknown>.getText() com.inovex.zabbixmobile.api.ZabbixService._endTransaction() org.apache.http.client.methods.HttpPost.HttpPost(java.lang.String) android.content.SharedPreferences.getString(java.lang.String, java.lang.String) <unknown>.GraphItemData() com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, java.lang.String, int) <unknown>.nextValueToken() org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager.ThreadSafeClientConnManager(org.apache.http.params.HttpParams, org.apache.http.conn.scheme.SchemeRegistry) <unknown>.ApplicationItemRelationData() java.lang.Object.toString() android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null) org.json.JSONArray.JSONArray() java.lang.String.equals(<unknown>) com.inovex.zabbixmobile.api.ZabbixService._startTransaction() org.json.JSONObject.put(java.lang.String, org.json.JSONArray) com.inovex.zabbixmobile.api.ZabbixService.importApplications(int, int, <unknown>) <unknown>.set(<unknown>, int) org.json.JSONObject.put(java.lang.String, int) com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, java.lang.String, int) org.json.JSONObject.put(java.lang.String, java.lang.String) org.json.JSONObject.JSONObject() java.lang.Math.min(int, int) com.inovex.zabbixmobile.api.ZabbixService.showProgress(<unknown>) java.lang.String.equals(java.lang.String) android.content.Intent.Intent(<unknown>) java.lang.String.equals(<unknown>) org.json.JSONObject.put(java.lang.String, int) javax.net.ssl.SSLContext.getInstance(java.lang.String) android.content.res.Resources.getString(<unknown>) org.json.JSONObject.JSONObject() android.content.Intent.Intent(<unknown>) java.lang.String.equals(<unknown>) <unknown>.nextProperty() javax.net.ssl.SSLSocketFactory.createSocket(java.net.Socket, java.lang.String, int, boolean) org.json.JSONObject.put(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject) <unknown>.get(<unknown>) java.io.IOException.IOException(java.lang.String) java.lang.String.trim() java.lang.String.contains(java.lang.String) org.apache.http.entity.StringEntity.StringEntity(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService._endTransaction() .X509TrustManager() com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject) android.graphics.Color.parseColor(<unknown>) com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, null) org.json.JSONObject.getJSONArray(java.lang.String) org.apache.http.client.params.HttpClientParams.setRedirecting(org.apache.http.params.HttpParams, boolean) com.inovex.zabbixmobile.api.ZabbixService._startTransaction() <unknown>.getCurrentName() java.lang.String.equals(<unknown>) java.lang.Long.parseLong(<unknown>) android.util.Log.d(java.lang.String, java.lang.String) org.codehaus.jackson.JsonParser.getCurrentToken() org.codehaus.jackson.JsonParser.nextValue() java.lang.Long.parseLong(<unknown>) <unknown>.getText() java.util.Date.getTime() android.content.Intent.putExtra(java.lang.String, <unknown>) android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null) <unknown>.get(<unknown>) android.database.Cursor.moveToFirst() org.apache.http.client.methods.HttpEntityEnclosingRequestBase.setEntity(org.apache.http.entity.StringEntity) com.inovex.zabbixmobile.api.ZabbixService._commitTransactionIfRecommended() com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, null) android.database.sqlite.SQLiteQueryBuilder.appendWhere(<unknown>) org.apache.http.auth.UsernamePasswordCredentials.UsernamePasswordCredentials(java.lang.String, java.lang.String) java.util.Date.getTime() java.lang.String.equals(<unknown>) com.inovex.zabbixmobile.api.ZabbixService._endTransaction() org.json.JSONObject.put(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService.authenticate() java.lang.String.equals(<unknown>) org.json.JSONObject.put(java.lang.String, java.lang.String) org.json.JSONObject.put(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService.NoAPIAccessException.NoAPIAccessException() org.json.JSONArray.put(long) com.inovex.zabbixmobile.api.ZabbixService._endTransaction() android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null) <unknown>.getJsonArray() <unknown>.ScreenData() java.util.Date.Date() java.util.Date.Date() <unknown>.set(<unknown>, long) <unknown>.getCurrentName() org.json.JSONObject.put(java.lang.String, org.json.JSONArray) <unknown>.set(<unknown>, long) org.json.JSONObject.put(java.lang.String, java.lang.String) org.apache.http.params.HttpConnectionParams.setConnectionTimeout(org.apache.http.params.HttpParams, int) org.json.JSONArray.length() <unknown>.set(<unknown>, java.lang.String) <unknown>.set(<unknown>, long) java.util.Date.getTime() <unknown>.set(<unknown>, <unknown>) <unknown>.set(<unknown>, <unknown>) org.json.JSONArray.put(java.lang.String) java.lang.String.equals(<unknown>) com.inovex.zabbixmobile.api.ZabbixService.importScreenItems(<unknown>) com.inovex.zabbixmobile.api.ZabbixService.HttpAuthorizationRequiredException.HttpAuthorizationRequiredException() <unknown>.getText() org.json.JSONObject.put(java.lang.String, org.json.JSONArray) com.inovex.zabbixmobile.api.ZabbixService.importEvents(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader, null) org.json.JSONObject.JSONObject() <unknown>.set(<unknown>, <unknown>) com.inovex.zabbixmobile.api.ZabbixService.importHostGroups(<unknown>) org.json.JSONObject.toString() java.lang.Integer.parseInt(<unknown>) java.lang.String.equals(java.lang.String) org.apache.http.params.HttpProtocolParams.setContentCharset(org.apache.http.params.HttpParams, java.lang.String) <unknown>.get(<unknown>) android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null) java.lang.String.equals(<unknown>) <unknown>.set(<unknown>, <unknown>) <unknown>.nextValueToken() <unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>) org.json.JSONObject.put(java.lang.String, org.json.JSONArray) org.json.JSONObject.put(java.lang.String, java.lang.Integer) <unknown>.getText() <unknown>.set(<unknown>, <unknown>) org.apache.http.message.AbstractHttpMessage.addHeader(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject) org.json.JSONObject.getJSONArray(java.lang.String) java.security.KeyStore.load(null, null) java.lang.String.replace(java.lang.String, java.lang.String) java.lang.Long.parseLong(<unknown>) org.json.JSONObject.toString() com.inovex.zabbixmobile.api.ZabbixService.importTriggers(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader) android.util.Log.d(java.lang.String, java.lang.String) android.content.SharedPreferences.getString(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, java.lang.String) <unknown>.TriggerData() android.content.SharedPreferences.getString(java.lang.String, java.lang.String) android.content.Intent.Intent(<unknown>) org.json.JSONObject.put(java.lang.String, java.lang.String) org.apache.http.impl.client.AbstractHttpClient.getCredentialsProvider() <unknown>.set(<unknown>, <unknown>) java.io.IOException.IOException(java.lang.String) java.lang.String.trim() org.json.JSONObject.put(java.lang.String, org.json.JSONArray) java.lang.String.split(java.lang.String) java.lang.String.equals(java.lang.String) java.lang.String.endsWith(java.lang.String) <unknown>.set(<unknown>, int) com.inovex.zabbixmobile.api.ZabbixService.showProgress(int) <unknown>.ItemData() org.json.JSONObject.put(java.lang.String, int) <unknown>.set(<unknown>, <unknown>) org.codehaus.jackson.JsonParser.getText() android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null) org.apache.http.impl.client.DefaultHttpClient.DefaultHttpClient(org.apache.http.conn.ClientConnectionManager, org.apache.http.params.HttpParams) <unknown>.close() java.lang.IllegalStateException.IllegalStateException(java.lang.String) org.json.JSONObject.put(java.lang.String, java.lang.String) org.codehaus.jackson.JsonParser.nextToken() android.database.Cursor.getColumnIndex(<unknown>) org.json.JSONObject.put(java.lang.String, org.json.JSONArray) <unknown>.nextValueToken() com.inovex.zabbixmobile.api.ZabbixService._startTransaction() org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.set(<unknown>, java.lang.String) java.lang.String.substring(int, int) java.lang.Long.parseLong(<unknown>) org.json.JSONObject.put(java.lang.String, java.lang.String) org.json.JSONObject.getInt(java.lang.String) java.lang.String.equals(java.lang.String) <unknown>.set(<unknown>, <unknown>) <unknown>.set(<unknown>, <unknown>) java.security.KeyStore.getInstance(java.lang.String) java.lang.Integer.parseInt(<unknown>) java.lang.String.equals(java.lang.String) <unknown>.nextProperty() android.content.Intent.putExtra(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, null) <unknown>.set(<unknown>, int) java.io.BufferedReader.BufferedReader(java.io.InputStreamReader) com.inovex.zabbixmobile.api.ZabbixService.importEvents(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader, int) java.security.KeyStore.getDefaultType() java.lang.String.equals(<unknown>) <unknown>.getText() org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.set(<unknown>, java.lang.Object) org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.insert(android.database.sqlite.SQLiteDatabase) <unknown>.nextProperty() com.inovex.zabbixmobile.api.ZabbixService._startTransaction() org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.close() <unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>) org.json.JSONObject.put(java.lang.String, long) com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, null, int) <unknown>.getJsonArray() <unknown>.set(<unknown>, <unknown>) java.lang.String.equals(<unknown>) org.apache.http.conn.scheme.Scheme.Scheme(java.lang.String, org.apache.http.conn.scheme.PlainSocketFactory, int) org.json.JSONObject.put(java.lang.String, java.lang.String) java.lang.String.equals(<unknown>)"],
      "c_callsites_added_t": ["android.util.Log.d(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService.importItems(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader, int, boolean) android.util.Log.d(java.lang.String, java.lang.String) android.util.Log.d(java.lang.String, java.lang.String) android.util.Log.i(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService.importTriggers(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader) <unknown>.JsonArrayOrObjectReader(org.codehaus.jackson.JsonParser) android.util.Log.d(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService.importTriggers(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader) com.inovex.zabbixmobile.api.ZabbixService.importHosts(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader, int) com.inovex.zabbixmobile.api.ZabbixService.importTriggers(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader) android.util.Log.d(java.lang.String, java.lang.String) android.util.Log.d(java.lang.String, java.lang.String) org.codehaus.jackson.JsonParser.getCurrentToken() org.codehaus.jackson.JsonParser.nextValue() com.inovex.zabbixmobile.api.ZabbixService.importEvents(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader, null) com.inovex.zabbixmobile.api.ZabbixService.importTriggers(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader) android.util.Log.d(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService.importEvents(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader, int)"],
      "c_methods_t": ["ApplicationData ApplicationItemRelationData ArrayList, String BasicHttpParams BufferedReader CacheData ContentValues CustomSSLSocketFactory Date DefaultHttpClient EventData GraphData GraphItemData HashSet, Long HistoryDetailData HostData HostGroupData HttpAuthorizationRequiredException HttpPost IOException IllegalStateException InputStreamReader Intent ItemData JSONArray JSONObject JsonArrayOrObjectReader JsonFactory NoAPIAccessException PreconditionFailedException RuntimeException SQLiteQueryBuilder Scheme SchemeRegistry ScreenData ScreenItemData StringBuilder StringEntity ThreadSafeClientConnManager TriggerData UsernamePasswordCredentials X509TrustManager _commitTransactionIfRecommended _endTransaction _queryBuffer _queryStream _startTransaction add addHeader append appendWhere authenticate beginTransaction close contains createJsonParser createSocket d delete endTransaction endsWith equals execute get getBoolean getColumnIndex getContent getCredentialsProvider getCurrentName getCurrentToken getDefaultSharedPreferences getDefaultType getEntity getInstance getInt getJSONArray getJSONObject getJsonArray getLong getMessage getParams getReasonPhrase getResources getSocketFactory getStatusCode getStatusLine getString getText getTime i importApplications importEvents importGraphItems importHostGroups importHosts importItems importScreenItems importTriggers inTransaction indexOf init insert isCached isClosed length load matches min moveToFirst moveToNext next nextProperty nextToken nextValue nextValueToken parseColor parseDouble parseInt parseLong printStackTrace put putExtra query read register replace replaceAll sendBroadcast set setCached setConnectionTimeout setContentCharset setCredentials setEntity setHostnameVerifier setRedirecting setTables setTransactionSuccessful setVersion showProgress split substring toString trim update"],
      "id": "inovex/zax\u0000src/com/inovex/zabbixmobile/api/ZabbixService.java\u00002bbdeb660e92821bffb04b3315e354e34764dc43\u0000df53c588a80d246f2f77494f72b9fc4b285728ad",
      "p_comments_t": ["\t\t\t// create ApplicationItemRelation /** \n * public, for the unit test\n */\n /** \n * import the hosts from stream\n * @param jsonArray stream\n * @param numHosts count of hosts for progressbar. null if unknown.\n * @return Object[] {(String) comma-separated all Hostnames, (Long) 1. host id}\n * @throws JsonParseException\n * @throws IOException\n */\n \t\t\t// result array found /** \n * import graph items\n * @param graphItems\n * @return true, if graphid column has to be updated from -1 to the correct graphid later.\n * @throws JsonParseException\n * @throws NumberFormatException\n * @throws IOException\n */\n \t\t\t\t\t\t// save only every 20th \t\t\t// wrong password. token remains null \t\t\t// the past 2 hours \t\t\t\t\t// data are unuseable, e.g. because it's a string /** \n * @param events stream\n * @param numEvents if null, no progressbar-update AND only isert, if it does not exist. If !null, progressbar-update AND always insert without checking\n * @throws JsonParseException\n * @throws IOException\n */\n \t\t\t\t\t// Precondition failed / Looks like Zabbix 1.8.2 \t\t\t// get API version \t\t\t// if #0 \"other\" does not exist yet, it has to be created \t\t\t\t\t// later the IDs will be replaced with the correct /** \n * zabbix api call. data will be parsed as json object on-the-fly. Caution: use this only for api calls with a small return data.\n * @param method\n * @param params\n * @return\n * @throws ClientProtocolException\n * @throws IOException\n * @throws JSONException\n * @throws HttpAuthorizationRequiredException\n * @throws NoAPIAccessException\n */\n /** \n * begin sql transaction\n */\n \t\t\t\t\t\t// first do a new auth and then try the same api call again \t\t\t\t// no itemid \t\t\t// count of items /** \n * init\n * @param context android context\n * @param zabbixLocalDB sqlite\n */\n \t\t\t// create applications that does not exist \t\t\t\t// so we use a fiction \t\t\t// only resouretype == 0 /** \n * probably too old zabbix <= 1.8.2\n */\n /** \n * zabbix auth. user and pwd from app preferences\n * @return true success\n * @throws ClientProtocolException\n * @throws IOException\n * @throws JSONException\n * @throws HttpAuthorizationRequiredException\n * @throws NoAPIAccessException\n */\n /** \n * close the last http stream\n */\n \t\t\t// Workaround: historydetails only comes if you use the correct \"history\"-parameter. /** \n * transforms the progress\n * @param start 0% => start%\n * @param end 100% => end%\n */\n \t\t\t\t// in Zabbix version <2.0, this is not default \t\t\t\t// file not found \t\t\t\t\t// hex string => color int \t\tHttpClientParams.setRedirecting(params, true); // redirecting \t\t\t// if applicable replace placeholder \t\t\t// if graphid-column was not set, this must be done later. temporary graphid=-1 \t\t// for GUI unit test, just return true /** \n * imports the \"warning\"-triggers\n * @throws JSONException\n * @throws IOException\n * @throws HttpAuthorizationRequiredException\n * @throws NoAPIAccessException\n */\n \t\t\t// event is parsed and can be inserted into the db \t\tpublic static final int EVENT_GET_TIME_FROM_SHIFT = 7*24*60*60; // -7 days \t\t// http request \t\t\t\t\t// store hosts namen \t\t\t\t// http auth failed \t\t\t\t\t// at this point itemid and hostid is unknown \t\t\t\t\t// import triggers \t\t\t// we try them all, until we get results. /** \n * importiert ein trigger mit dem attribute itemid. ggf. wird der trigger zuerst gelöscht und neu angelegt. imports a trigger with the attribute itemid. if trigger already exists, it will be removed first.\n * @param triggerid\n * @throws JSONException\n * @throws IOException\n * @throws HttpAuthorizationRequiredException\n * @throws NoAPIAccessException\n */\n \t\t\t\t\t// import hosts \t\t\t// for unit test \t\t\t\t// ignore \t\t\tlong time_from = time_till - ZabbixConfig.HISTORY_GET_TIME_FROM_SHIFT; // jetzt-2h \t\t\t// or a json object /** \n * zabbix error: no api access\n */\n /** \n * counts the sql inserts/updates and do a transaction commit to save the memory\n */\n \t\t\t// send intent to GUI \t\t\t\t\t// before zabbix 2.x the name field was \"description\" \t\t\t\t\t// if we get an empty array, we try another history parameter \t\t\t\t\t// store the first item id \t\t// check if the trigger exists and if the itemid was set /** \n * global constants\n */\n \t\t\t\t// create \"other\" hostgroup #1 \t\t\t// if there's no application, the ID #0 must be added (for other) \t\t\t\t\t// because of this, all applicationrelations will be saved with itemid and hostid \"-1\". \t\tpublic static final int HISTORY_GET_TIME_FROM_SHIFT = 8*60*60; // -8h \t\t\t\t\t\t.put(\"history\", historytype) // for integer ? /** \n * interface to connect to the zabbix server\n */\n /** \n * acknowledge zabbix event. Sets ack-flag with comment. Caution: This is supported only for Zabbix version >= 1.8.4\n * @param eventid\n * @param comment\n * @return true, success.\n * @throws ClientProtocolException\n * @throws IOException\n * @throws JSONException\n * @throws HttpAuthorizationRequiredException\n * @throws NoAPIAccessException\n */\n \t\t\t// store the last stream to close it if an exception will be thrown /** \n * zabbix api call as stream.\n * @param method\n * @param params\n * @return stream im json array wrapper\n * @throws JSONException\n * @throws IOException\n * @throws HttpAuthorizationRequiredException\n * @throws NoAPIAccessException\n */\n \t\t// if applicable http auth \t\t\t// correct historytype found and there are data \t\t\t\t// count of the entries cannot be detected (zabbix bug), /** \n * import items from stream.\n * @param items stream\n * @param numItems count for progressbar, if 0 no progressbarupdate\n * @param checkBeforeInsert if true, only make an insert if item does not exist\n * @return the first item id\n * @throws JsonParseException\n * @throws IOException\n */\n \t\t\t// collect all graphids /** \n * http auth is needed\n */\n \t\t\t// ignore for unit test /** \n * commit sql transaction\n */\n \t\t\t// delete old graphs \t\t\t// host without group will get group #0 (other) \t\t\t// there's no result \t\t\tif (jp.nextToken() != JsonToken.START_ARRAY) { // go inside the array \t\t// if applicable, transform the progress \t\t\t// SSL not trusted \t\t\t// internet problem \t\tpublic static final int CACHE_LIFETIME_APPLICATIONS = 2*24*60*60; // 2 days \t\t\t\t\t// since zabbix 2.x is the name of the item \"name\" \t\t\t// now the \"-1\" IDs of applicationsrelation will be replaced with the correct itemID \t\t\t// get count of hosts /** \n * import the newest events\n * @throws ClientProtocolException\n * @throws IOException\n * @throws JSONException\n * @throws HttpAuthorizationRequiredException\n * @throws NoAPIAccessException\n */\n /** \n * updates the progressbar in the gui\n * @param i 0..100\n */\n \t\t\t\t\t\t// ignore \t\t\t\t\t// first do a new auth and then try the same api call again /** \n * import the newest event of a trigger\n * @param triggerid\n * @throws JSONException\n * @throws IOException\n * @throws HttpAuthorizationRequiredException\n * @throws NoAPIAccessException\n */\n \t\t// it can be an (empty) array \t\t\t// this parameter can be \"null\" or a number 0-4. Because we don't know when to use which,"],
      "p_email_sni": "jonas.gehring@inovex.de",
      "c_callsites_removed_t": ["com.inovex.zabbixmobile.api.ZabbixService.importTriggers(com.inovex.zabbixmobile.api.JsonArrayReader) <unknown>.JsonArrayReader(org.codehaus.jackson.JsonParser) com.inovex.zabbixmobile.api.ZabbixService.importTriggers(com.inovex.zabbixmobile.api.JsonArrayReader) com.inovex.zabbixmobile.api.ZabbixService.importEvents(com.inovex.zabbixmobile.api.JsonArrayReader, int) com.inovex.zabbixmobile.api.ZabbixService.importTriggers(com.inovex.zabbixmobile.api.JsonArrayReader) com.inovex.zabbixmobile.api.ZabbixService.importItems(com.inovex.zabbixmobile.api.JsonArrayReader, int, boolean) com.inovex.zabbixmobile.api.ZabbixService.importHosts(com.inovex.zabbixmobile.api.JsonArrayReader, int) com.inovex.zabbixmobile.api.ZabbixService.importTriggers(com.inovex.zabbixmobile.api.JsonArrayReader) com.inovex.zabbixmobile.api.ZabbixService.importEvents(com.inovex.zabbixmobile.api.JsonArrayReader, null)"],
      "c_callsites_cs": "<unknown>.set(<unknown>, <unknown>)#org.apache.http.HttpEntity.getContent()#java.lang.String.equals(java.lang.String)#org.json.JSONArray.JSONArray()#<unknown>.set(<unknown>, java.lang.Object)#org.json.JSONObject.put(java.lang.String, java.lang.Integer)#org.json.JSONArray.put(java.lang.String)#org.json.JSONObject.JSONObject()#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.codehaus.jackson.JsonFactory.createJsonParser(java.io.InputStream)#java.lang.String.equals(<unknown>)#org.apache.http.StatusLine.getStatusCode()#<unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>)#org.json.JSONObject.put(java.lang.String, java.lang.String)#android.database.sqlite.SQLiteDatabase.inTransaction()#android.util.Log.d(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService._startTransaction()#java.lang.String.equals(java.lang.String)#org.codehaus.jackson.JsonFactory.JsonFactory()#com.inovex.zabbixmobile.api.ZabbixService._endTransaction()#org.json.JSONObject.put(java.lang.String, int)#android.content.ContentValues.ContentValues(int)#org.apache.http.conn.scheme.SchemeRegistry.SchemeRegistry()#<unknown>.insert(android.database.sqlite.SQLiteDatabase)#<unknown>.insert(android.database.sqlite.SQLiteDatabase)#com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject)#com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject)#com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject)#org.json.JSONObject.getJSONObject(java.lang.String)#java.io.InputStreamReader.InputStreamReader(java.io.InputStream)#android.content.Intent.putExtra(java.lang.String, <unknown>)#org.json.JSONArray.length()#java.lang.String.equals(java.lang.String)#<unknown>.set(<unknown>, <unknown>)#java.lang.String.equals(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService.PreconditionFailedException.PreconditionFailedException()#java.lang.StringBuilder.StringBuilder()#android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null)#<unknown>.nextValueToken()#org.json.JSONObject.JSONObject()#org.json.JSONObject.put(java.lang.String, int)#org.json.JSONObject.put(java.lang.String, org.json.JSONArray)#java.lang.String.equals(<unknown>)#<unknown>.get(<unknown>)#<unknown>.insert(android.database.sqlite.SQLiteDatabase)#android.content.Intent.putExtra(java.lang.String, <unknown>)#java.lang.String.equals(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService.importItems(<unknown>, int, boolean)#com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, java.lang.String, int)#android.util.Log.d(java.lang.String, java.lang.String)#org.json.JSONObject.put(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject)#org.apache.http.conn.scheme.Scheme.Scheme(java.lang.String, org.apache.http.conn.ssl.SSLSocketFactory, int)#org.apache.http.HttpEntity.getContent()#org.codehaus.jackson.JsonParser.close()#java.lang.String.equals(<unknown>)#<unknown>.nextValueToken()#<unknown>.getCurrentName()#org.json.JSONArray.JSONArray(java.util.Set<java.lang.Long>)#<unknown>.nextValueToken()#android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null)#<unknown>.getJsonArray()#com.inovex.zabbixmobile.api.ZabbixService._startTransaction()#org.json.JSONArray.JSONArray()#<unknown>.nextProperty()#java.lang.String.equals(java.lang.String)#android.database.sqlite.SQLiteDatabase.update(<unknown>, android.content.ContentValues, <unknown>, null)#java.util.Set<java.lang.Long>.add(<unknown>)#<unknown>.get(<unknown>)#<unknown>.get(<unknown>)#android.content.ContentValues.put(<unknown>, java.lang.Long)#java.lang.String.equals(java.lang.String)#org.apache.http.StatusLine.getReasonPhrase()#java.lang.RuntimeException.RuntimeException(java.lang.String)#<unknown>.nextProperty()#java.lang.Throwable.printStackTrace()#java.lang.String.equals(<unknown>)#java.lang.Long.parseLong(<unknown>)#org.json.JSONObject.put(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject)#<unknown>.getCurrentName()#android.content.ContentValues.put(<unknown>, java.lang.Long)#org.apache.http.entity.StringEntity.StringEntity(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject)#java.lang.String.equals(<unknown>)#<unknown>.EventData()#<unknown>.next()#<unknown>.set(<unknown>, <unknown>)#com.inovex.zabbixmobile.api.ZabbixService.CustomSSLSocketFactory.CustomSSLSocketFactory(java.security.KeyStore)#com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject)#<unknown>.getCurrentName()#java.util.List<java.lang.String>.add(java.lang.String)#org.json.JSONObject.put(java.lang.String, int)#<unknown>.getText()#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.apache.http.conn.ssl.SSLSocketFactory.setHostnameVerifier(org.apache.http.conn.ssl.X509HostnameVerifier)#<unknown>.set(<unknown>, <unknown>)#<unknown>.getText()#org.json.JSONObject.put(java.lang.String, long)#java.util.Date.Date()#android.util.Log.i(java.lang.String, java.lang.String)#org.json.JSONObject.put(java.lang.String, int)#org.json.JSONObject.put(java.lang.String, int)#<unknown>.set(<unknown>, <unknown>)#com.inovex.zabbixmobile.api.ZabbixService.authenticate()#android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null)#android.util.Log.d(java.lang.String, java.lang.String)#java.lang.String.equals(java.lang.String)#org.apache.http.HttpResponse.getEntity()#org.json.JSONObject.JSONObject()#com.inovex.zabbixmobile.api.ZabbixService.importItems(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader, int, boolean)#com.inovex.zabbixmobile.api.ZabbixService._startTransaction()#com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, null, int)#java.io.BufferedReader.read()#org.json.JSONObject.put(java.lang.String, long)#<unknown>.set(<unknown>, <unknown>)#android.database.Cursor.getLong(<unknown>)#java.lang.IllegalStateException.IllegalStateException(java.lang.String)#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.getCurrentName()#android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null)#android.util.Log.d(java.lang.String, java.lang.String)#<unknown>.set(<unknown>, <unknown>)#java.lang.String.equals(<unknown>)#org.json.JSONObject.put(java.lang.String, java.lang.String)#android.database.Cursor.moveToFirst()#com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, java.lang.String)#android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null)#java.lang.String.equals(java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, java.lang.String)#<unknown>.getText()#org.json.JSONObject.put(java.lang.String, java.lang.String)#android.content.Intent.putExtra(java.lang.String, <unknown>)#<unknown>.getCurrentName()#android.content.res.Resources.getString(<unknown>)#android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null)#android.database.sqlite.SQLiteDatabase.setTransactionSuccessful()#<unknown>.next()#<unknown>.getText()#<unknown>.nextValueToken()#com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject)#com.inovex.zabbixmobile.api.ZabbixService.showProgress(<unknown>)#java.io.IOException.IOException(java.lang.String)#<unknown>.getCurrentName()#android.util.Log.d(java.lang.String, java.lang.String)#java.lang.Object.toString()#org.json.JSONObject.toString()#<unknown>.set(<unknown>, <unknown>)#org.json.JSONArray.JSONArray()#org.apache.http.HttpResponse.getStatusLine()#org.json.JSONArray.JSONArray()#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.apache.http.impl.client.DefaultHttpClient.DefaultHttpClient()#org.json.JSONObject.put(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject)#org.apache.http.HttpResponse.getStatusLine()#java.lang.String.equals(<unknown>)#java.util.Date.Date()#android.util.Log.i(java.lang.String, java.lang.String)#android.content.Context.getResources()#org.apache.http.impl.client.CloseableHttpClient.execute(org.apache.http.client.methods.HttpPost)#com.inovex.zabbixmobile.api.ZabbixService._commitTransactionIfRecommended()#com.inovex.zabbixmobile.api.ZabbixService.importHostGroups(<unknown>)#android.content.Context.sendBroadcast(android.content.Intent)#android.content.Context.sendBroadcast(android.content.Intent)#com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, null, int)#java.lang.Integer.parseInt(<unknown>)#<unknown>.ApplicationData()#com.inovex.zabbixmobile.api.ZabbixService.NoAPIAccessException.NoAPIAccessException()#com.inovex.zabbixmobile.api.ZabbixService._commitTransactionIfRecommended()#<unknown>.getJsonArray()#org.apache.http.message.AbstractHttpMessage.addHeader(java.lang.String, java.lang.String)#org.json.JSONObject.put(java.lang.String, int)#java.lang.String.replace(java.lang.String, java.lang.String)#org.json.JSONArray.JSONArray()#<unknown>.set(<unknown>, <unknown>)#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.set(<unknown>, <unknown>)#org.json.JSONArray.JSONArray()#java.lang.String.equals(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, java.lang.String, int)#<unknown>.nextProperty()#<unknown>.set(<unknown>, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject)#org.json.JSONObject.JSONObject()#java.lang.String.contains(java.lang.String)#org.apache.http.client.methods.HttpEntityEnclosingRequestBase.setEntity(org.apache.http.entity.StringEntity)#com.inovex.zabbixmobile.api.ZabbixService.importTriggers(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader)#org.json.JSONObject.put(java.lang.String, int)#<unknown>.HostGroupData()#<unknown>.JsonArrayOrObjectReader(org.codehaus.jackson.JsonParser)#<unknown>.HostGroupData()#<unknown>.nextProperty()#java.lang.Long.parseLong(<unknown>)#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.json.JSONObject.put(java.lang.String, org.json.JSONArray)#org.json.JSONObject.put(java.lang.String, java.lang.Integer)#<unknown>.set(<unknown>, <unknown>)#<unknown>.close()#org.json.JSONObject.put(java.lang.String, org.json.JSONArray)#<unknown>.set(<unknown>, <unknown>)#java.lang.String.equals(java.lang.String)#android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null)#<unknown>.next()#org.json.JSONObject.toString()#java.lang.String.equals(<unknown>)#java.lang.String.equals(<unknown>)#android.database.sqlite.SQLiteDatabase.query(<unknown>, null, <unknown>, null, null, null, null)#<unknown>.set(<unknown>, <unknown>)#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.CacheData()#<unknown>.getText()#com.inovex.zabbixmobile.api.ZabbixService._startTransaction()#<unknown>.set(<unknown>, <unknown>)#com.inovex.zabbixmobile.api.ZabbixService._endTransaction()#<unknown>.set(<unknown>, int)#<unknown>.getJsonArray()#java.lang.String.equals(<unknown>)#java.util.Date.getTime()#java.lang.String.equals(java.lang.String)#org.json.JSONObject.put(java.lang.String, int)#<unknown>.set(<unknown>, <unknown>)#java.lang.Integer.parseInt(<unknown>)#org.codehaus.jackson.JsonParser.getCurrentName()#<unknown>.nextProperty()#com.inovex.zabbixmobile.api.ZabbixService._endTransaction()#java.lang.String.equals(<unknown>)#org.json.JSONObject.put(java.lang.String, int)#android.database.sqlite.SQLiteDatabase.update(<unknown>, android.content.ContentValues, <unknown>, null)#com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject)#com.inovex.zabbixmobile.api.ZabbixService._endTransaction()#java.lang.StringBuilder.append(char)#<unknown>.set(<unknown>, <unknown>)#<unknown>.get(<unknown>)#<unknown>.set(<unknown>, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject)#org.json.JSONObject.put(java.lang.String, java.lang.String)#android.database.Cursor.getLong(<unknown>)#java.lang.String.equals(<unknown>)#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.json.JSONObject.JSONObject()#org.apache.http.params.HttpProtocolParams.setVersion(org.apache.http.params.HttpParams, org.apache.http.HttpVersion)#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.HistoryDetailData()#android.util.Log.d(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService._startTransaction()#<unknown>.next()#<unknown>.set(<unknown>, <unknown>)#<unknown>.nextValueToken()#org.json.JSONObject.JSONObject()#java.lang.String.equals(<unknown>)#java.lang.Long.parseLong(<unknown>)#java.lang.Integer.parseInt(<unknown>)#org.apache.http.client.methods.HttpPost.HttpPost(java.lang.String)#org.apache.http.StatusLine.getStatusCode()#<unknown>.set(<unknown>, int)#java.lang.String.equals(java.lang.String)#java.lang.String.equals(<unknown>)#java.lang.String.equals(<unknown>)#<unknown>.getCurrentName()#java.util.ArrayList<java.lang.String>.ArrayList, String()#com.inovex.zabbixmobile.api.ZabbixService._startTransaction()#com.inovex.zabbixmobile.api.ZabbixService.importTriggers(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader)#org.json.JSONArray.put(java.lang.String)#<unknown>.nextValueToken()#org.json.JSONArray.put(java.lang.String)#<unknown>.set(<unknown>, <unknown>)#org.json.JSONObject.put(java.lang.String, int)#com.inovex.zabbixmobile.api.ZabbixService.importItems(<unknown>, int, boolean)#org.json.JSONObject.JSONObject()#com.inovex.zabbixmobile.api.ZabbixService.importTriggers(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService.importGraphItems(<unknown>)#<unknown>.ScreenItemData()#<unknown>.set(<unknown>, <unknown>)#<unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>)#android.preference.PreferenceManager.getDefaultSharedPreferences(android.content.Context)#org.json.JSONObject.length()#<unknown>.nextValueToken()#java.util.HashSet<java.lang.Long>.HashSet, Long()#java.lang.String.equals(java.lang.String)#android.content.SharedPreferences.getBoolean(java.lang.String, boolean)#<unknown>.insert(android.database.sqlite.SQLiteDatabase)#org.json.JSONObject.put(java.lang.String, org.json.JSONArray)#<unknown>.close()#com.inovex.zabbixmobile.api.ZabbixService.importHosts(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader, int)#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.next()#android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null)#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.json.JSONObject.getString(java.lang.String)#<unknown>.set(<unknown>, <unknown>)#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.close()#org.json.JSONObject.getString(java.lang.String)#java.lang.String.equals(java.lang.String)#java.lang.Long.parseLong(<unknown>)#org.codehaus.jackson.JsonParser.isClosed()#org.json.JSONObject.put(java.lang.String, int)#org.json.JSONObject.put(java.lang.String, org.json.JSONArray)#org.json.JSONObject.put(java.lang.String, long)#<unknown>.close()#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.set(<unknown>, long)#org.json.JSONObject.put(java.lang.String, org.json.JSONObject)#<unknown>.set(<unknown>, <unknown>)#com.inovex.zabbixmobile.api.ZabbixService._endTransaction()#java.lang.String.replaceAll(java.lang.String, java.lang.String)#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.nextValueToken()#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.apache.http.params.BasicHttpParams.BasicHttpParams()#android.database.sqlite.SQLiteDatabase.beginTransaction()#com.inovex.zabbixmobile.api.ZabbixService._commitTransactionIfRecommended()#com.inovex.zabbixmobile.api.ZabbixService._endTransaction()#java.lang.String.equals(<unknown>)#<unknown>.insert(android.database.sqlite.SQLiteDatabase)#<unknown>.insert(android.database.sqlite.SQLiteDatabase)#org.json.JSONObject.put(java.lang.String, int)#<unknown>.next()#com.inovex.zabbixmobile.api.ZabbixService._startTransaction()#<unknown>.getJsonArray()#android.content.SharedPreferences.getString(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, null, int)#javax.net.SocketFactory.createSocket()#java.lang.Long.parseLong(<unknown>)#org.apache.http.client.CredentialsProvider.setCredentials(org.apache.http.auth.AuthScope, org.apache.http.auth.UsernamePasswordCredentials)#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.next()#com.inovex.zabbixmobile.api.ZabbixService.HttpAuthorizationRequiredException.HttpAuthorizationRequiredException()#android.database.sqlite.SQLiteQueryBuilder.query(android.database.sqlite.SQLiteDatabase, null, null, null, null, null, null)#java.util.Date.Date()#com.inovex.zabbixmobile.api.ZabbixService._commitTransactionIfRecommended()#<unknown>.set(<unknown>, java.lang.String)#org.json.JSONObject.JSONObject()#<unknown>.next()#<unknown>.set(<unknown>, <unknown>)#<unknown>.set(<unknown>, <unknown>)#com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject)#java.lang.String.equals(java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, java.lang.String)#java.lang.String.indexOf(char)#android.database.sqlite.SQLiteDatabase.query(<unknown>, null, <unknown>, null, null, null, null)#android.preference.PreferenceManager.getDefaultSharedPreferences(android.content.Context)#<unknown>.nextProperty()#org.apache.http.impl.client.CloseableHttpClient.execute(org.apache.http.client.methods.HttpPost)#<unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>)#com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, java.lang.String)#org.json.JSONObject.JSONObject()#<unknown>.close()#android.database.Cursor.getColumnIndex(<unknown>)#android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null)#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.nextProperty()#org.apache.http.conn.scheme.PlainSocketFactory.getSocketFactory()#com.inovex.zabbixmobile.api.ZabbixService._commitTransactionIfRecommended()#com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject)#java.lang.StringBuilder.toString()#org.json.JSONObject.put(java.lang.String, java.lang.String)#android.database.sqlite.SQLiteQueryBuilder.SQLiteQueryBuilder()#<unknown>.insert(android.database.sqlite.SQLiteDatabase)#org.apache.http.conn.scheme.SchemeRegistry.register(org.apache.http.conn.scheme.Scheme)#<unknown>.set(<unknown>, <unknown>)#org.json.JSONObject.JSONObject(java.lang.String)#java.lang.String.equals(<unknown>)#<unknown>.set(<unknown>, <unknown>)#<unknown>.set(<unknown>, <unknown>)#java.lang.IllegalStateException.IllegalStateException(java.lang.String)#java.lang.Double.parseDouble(<unknown>)#android.content.ContentValues.put(<unknown>, java.lang.Long)#android.database.sqlite.SQLiteQueryBuilder.appendWhere(<unknown>)#org.apache.http.conn.scheme.SchemeRegistry.register(org.apache.http.conn.scheme.Scheme)#org.json.JSONObject.getInt(java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService.importHosts(<unknown>, null)#org.json.JSONObject.put(java.lang.String, boolean)#java.lang.Long.parseLong(<unknown>)#java.lang.String.indexOf(char)#android.database.sqlite.SQLiteQueryBuilder.appendWhere(<unknown>)#java.lang.String.length()#java.lang.String.equals(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject)#<unknown>.nextProperty()#<unknown>.next()#android.content.SharedPreferences.getString(java.lang.String, java.lang.String)#<unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>)#com.inovex.zabbixmobile.api.ZabbixService.importTriggers(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader)#<unknown>.GraphData()#org.json.JSONArray.put(java.lang.String)#org.apache.http.impl.client.AbstractHttpClient.getParams()#<unknown>.set(<unknown>, long)#<unknown>.set(<unknown>, <unknown>)#org.json.JSONObject.getJSONObject(java.lang.String)#org.json.JSONObject.put(java.lang.String, java.lang.String)#java.lang.String.equals(java.lang.String)#org.json.JSONObject.getString(java.lang.String)#java.lang.String.equals(<unknown>)#java.lang.String.equals(<unknown>)#<unknown>.getCurrentName()#java.lang.String.equals(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService.showProgress(int)#<unknown>.getCurrentName()#com.inovex.zabbixmobile.api.ZabbixService.importHosts(<unknown>, null)#com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, java.lang.String, int)#org.json.JSONObject.put(java.lang.String, int)#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.close()#java.lang.String.replace(java.lang.String, java.lang.String)#java.lang.String.equals(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject)#com.inovex.zabbixmobile.api.ZabbixService._endTransaction()#android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null)#android.database.Cursor.moveToNext()#<unknown>.HostData()#<unknown>.set(<unknown>, long)#<unknown>.next()#com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject)#android.database.sqlite.SQLiteQueryBuilder.setTables(<unknown>)#java.util.Date.getTime()#org.json.JSONObject.put(java.lang.String, long)#android.content.ContentValues.ContentValues(int)#java.lang.Long.parseLong(<unknown>)#org.apache.http.HttpResponse.getEntity()#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.getText()#java.lang.String.equals(java.lang.String)#<unknown>.set(<unknown>, <unknown>)#<unknown>.set(<unknown>, <unknown>)#javax.net.ssl.SSLContext.init(null, javax.net.ssl.TrustManager[], null)#android.database.sqlite.SQLiteDatabase.endTransaction()#java.lang.String.equals(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, java.lang.String)#android.util.Log.d(java.lang.String, java.lang.String)#<unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>)#<unknown>.next()#<unknown>.close()#<unknown>.insert(android.database.sqlite.SQLiteDatabase)#org.json.JSONObject.put(java.lang.String, java.lang.String)#java.lang.Throwable.getMessage()#java.lang.String.equals(<unknown>)#java.lang.String.equals(<unknown>)#<unknown>.set(<unknown>, <unknown>)#com.inovex.zabbixmobile.api.ZabbixService._endTransaction()#javax.net.ssl.SSLContext.getSocketFactory()#org.json.JSONObject.JSONObject()#android.content.Context.getResources()#org.json.JSONObject.put(java.lang.String, int)#com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, null)#com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, java.lang.String, int)#java.lang.String.matches(java.lang.String)#<unknown>.set(<unknown>, <unknown>)#org.json.JSONArray.put(java.lang.String)#<unknown>.set(<unknown>, <unknown>)#android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null)#android.content.Context.sendBroadcast(android.content.Intent)#org.json.JSONObject.getJSONObject(java.lang.String)#<unknown>.get(<unknown>)#android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null)#java.lang.String.equals(<unknown>)#android.content.SharedPreferences.getBoolean(java.lang.String, boolean)#java.lang.Throwable.printStackTrace()#android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null)#org.json.JSONObject.put(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService._startTransaction()#android.content.Intent.putExtra(java.lang.String, int)#org.json.JSONObject.JSONObject()#<unknown>.getText()#com.inovex.zabbixmobile.api.ZabbixService._endTransaction()#org.apache.http.client.methods.HttpPost.HttpPost(java.lang.String)#android.content.SharedPreferences.getString(java.lang.String, java.lang.String)#<unknown>.GraphItemData()#com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, java.lang.String, int)#<unknown>.nextValueToken()#org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager.ThreadSafeClientConnManager(org.apache.http.params.HttpParams, org.apache.http.conn.scheme.SchemeRegistry)#<unknown>.ApplicationItemRelationData()#java.lang.Object.toString()#android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null)#org.json.JSONArray.JSONArray()#java.lang.String.equals(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService._startTransaction()#org.json.JSONObject.put(java.lang.String, org.json.JSONArray)#com.inovex.zabbixmobile.api.ZabbixService.importApplications(int, int, <unknown>)#<unknown>.set(<unknown>, int)#org.json.JSONObject.put(java.lang.String, int)#com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, java.lang.String, int)#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.json.JSONObject.JSONObject()#java.lang.Math.min(int, int)#com.inovex.zabbixmobile.api.ZabbixService.showProgress(<unknown>)#java.lang.String.equals(java.lang.String)#android.content.Intent.Intent(<unknown>)#java.lang.String.equals(<unknown>)#org.json.JSONObject.put(java.lang.String, int)#javax.net.ssl.SSLContext.getInstance(java.lang.String)#android.content.res.Resources.getString(<unknown>)#org.json.JSONObject.JSONObject()#android.content.Intent.Intent(<unknown>)#java.lang.String.equals(<unknown>)#<unknown>.nextProperty()#javax.net.ssl.SSLSocketFactory.createSocket(java.net.Socket, java.lang.String, int, boolean)#org.json.JSONObject.put(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject)#<unknown>.get(<unknown>)#java.io.IOException.IOException(java.lang.String)#java.lang.String.trim()#java.lang.String.contains(java.lang.String)#org.apache.http.entity.StringEntity.StringEntity(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService._endTransaction()#.X509TrustManager()#com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject)#android.graphics.Color.parseColor(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, null)#org.json.JSONObject.getJSONArray(java.lang.String)#org.apache.http.client.params.HttpClientParams.setRedirecting(org.apache.http.params.HttpParams, boolean)#com.inovex.zabbixmobile.api.ZabbixService._startTransaction()#<unknown>.getCurrentName()#java.lang.String.equals(<unknown>)#java.lang.Long.parseLong(<unknown>)#android.util.Log.d(java.lang.String, java.lang.String)#org.codehaus.jackson.JsonParser.getCurrentToken()#org.codehaus.jackson.JsonParser.nextValue()#java.lang.Long.parseLong(<unknown>)#<unknown>.getText()#java.util.Date.getTime()#android.content.Intent.putExtra(java.lang.String, <unknown>)#android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null)#<unknown>.get(<unknown>)#android.database.Cursor.moveToFirst()#org.apache.http.client.methods.HttpEntityEnclosingRequestBase.setEntity(org.apache.http.entity.StringEntity)#com.inovex.zabbixmobile.api.ZabbixService._commitTransactionIfRecommended()#com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, null)#android.database.sqlite.SQLiteQueryBuilder.appendWhere(<unknown>)#org.apache.http.auth.UsernamePasswordCredentials.UsernamePasswordCredentials(java.lang.String, java.lang.String)#java.util.Date.getTime()#java.lang.String.equals(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService._endTransaction()#org.json.JSONObject.put(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService.authenticate()#java.lang.String.equals(<unknown>)#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.json.JSONObject.put(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService.NoAPIAccessException.NoAPIAccessException()#org.json.JSONArray.put(long)#com.inovex.zabbixmobile.api.ZabbixService._endTransaction()#android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null)#<unknown>.getJsonArray()#<unknown>.ScreenData()#java.util.Date.Date()#java.util.Date.Date()#<unknown>.set(<unknown>, long)#<unknown>.getCurrentName()#org.json.JSONObject.put(java.lang.String, org.json.JSONArray)#<unknown>.set(<unknown>, long)#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.apache.http.params.HttpConnectionParams.setConnectionTimeout(org.apache.http.params.HttpParams, int)#org.json.JSONArray.length()#<unknown>.set(<unknown>, java.lang.String)#<unknown>.set(<unknown>, long)#java.util.Date.getTime()#<unknown>.set(<unknown>, <unknown>)#<unknown>.set(<unknown>, <unknown>)#org.json.JSONArray.put(java.lang.String)#java.lang.String.equals(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService.importScreenItems(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService.HttpAuthorizationRequiredException.HttpAuthorizationRequiredException()#<unknown>.getText()#org.json.JSONObject.put(java.lang.String, org.json.JSONArray)#com.inovex.zabbixmobile.api.ZabbixService.importEvents(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader, null)#org.json.JSONObject.JSONObject()#<unknown>.set(<unknown>, <unknown>)#com.inovex.zabbixmobile.api.ZabbixService.importHostGroups(<unknown>)#org.json.JSONObject.toString()#java.lang.Integer.parseInt(<unknown>)#java.lang.String.equals(java.lang.String)#org.apache.http.params.HttpProtocolParams.setContentCharset(org.apache.http.params.HttpParams, java.lang.String)#<unknown>.get(<unknown>)#android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null)#java.lang.String.equals(<unknown>)#<unknown>.set(<unknown>, <unknown>)#<unknown>.nextValueToken()#<unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>)#org.json.JSONObject.put(java.lang.String, org.json.JSONArray)#org.json.JSONObject.put(java.lang.String, java.lang.Integer)#<unknown>.getText()#<unknown>.set(<unknown>, <unknown>)#org.apache.http.message.AbstractHttpMessage.addHeader(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject)#org.json.JSONObject.getJSONArray(java.lang.String)#java.security.KeyStore.load(null, null)#java.lang.String.replace(java.lang.String, java.lang.String)#java.lang.Long.parseLong(<unknown>)#org.json.JSONObject.toString()#com.inovex.zabbixmobile.api.ZabbixService.importTriggers(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader)#android.util.Log.d(java.lang.String, java.lang.String)#android.content.SharedPreferences.getString(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, java.lang.String)#<unknown>.TriggerData()#android.content.SharedPreferences.getString(java.lang.String, java.lang.String)#android.content.Intent.Intent(<unknown>)#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.apache.http.impl.client.AbstractHttpClient.getCredentialsProvider()#<unknown>.set(<unknown>, <unknown>)#java.io.IOException.IOException(java.lang.String)#java.lang.String.trim()#org.json.JSONObject.put(java.lang.String, org.json.JSONArray)#java.lang.String.split(java.lang.String)#java.lang.String.equals(java.lang.String)#java.lang.String.endsWith(java.lang.String)#<unknown>.set(<unknown>, int)#com.inovex.zabbixmobile.api.ZabbixService.showProgress(int)#<unknown>.ItemData()#org.json.JSONObject.put(java.lang.String, int)#<unknown>.set(<unknown>, <unknown>)#org.codehaus.jackson.JsonParser.getText()#android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null)#org.apache.http.impl.client.DefaultHttpClient.DefaultHttpClient(org.apache.http.conn.ClientConnectionManager, org.apache.http.params.HttpParams)#<unknown>.close()#java.lang.IllegalStateException.IllegalStateException(java.lang.String)#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.codehaus.jackson.JsonParser.nextToken()#android.database.Cursor.getColumnIndex(<unknown>)#org.json.JSONObject.put(java.lang.String, org.json.JSONArray)#<unknown>.nextValueToken()#com.inovex.zabbixmobile.api.ZabbixService._startTransaction()#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.set(<unknown>, java.lang.String)#java.lang.String.substring(int, int)#java.lang.Long.parseLong(<unknown>)#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.json.JSONObject.getInt(java.lang.String)#java.lang.String.equals(java.lang.String)#<unknown>.set(<unknown>, <unknown>)#<unknown>.set(<unknown>, <unknown>)#java.security.KeyStore.getInstance(java.lang.String)#java.lang.Integer.parseInt(<unknown>)#java.lang.String.equals(java.lang.String)#<unknown>.nextProperty()#android.content.Intent.putExtra(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, null)#<unknown>.set(<unknown>, int)#java.io.BufferedReader.BufferedReader(java.io.InputStreamReader)#com.inovex.zabbixmobile.api.ZabbixService.importEvents(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader, int)#java.security.KeyStore.getDefaultType()#java.lang.String.equals(<unknown>)#<unknown>.getText()#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.set(<unknown>, java.lang.Object)#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.insert(android.database.sqlite.SQLiteDatabase)#<unknown>.nextProperty()#com.inovex.zabbixmobile.api.ZabbixService._startTransaction()#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.close()#<unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>)#org.json.JSONObject.put(java.lang.String, long)#com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, null, int)#<unknown>.getJsonArray()#<unknown>.set(<unknown>, <unknown>)#java.lang.String.equals(<unknown>)#org.apache.http.conn.scheme.Scheme.Scheme(java.lang.String, org.apache.http.conn.scheme.PlainSocketFactory, int)#org.json.JSONObject.put(java.lang.String, java.lang.String)#java.lang.String.equals(<unknown>)",
      "p_body_t": ["<empty>"],
      "c_patch_t": [" \t * @throws HttpAuthorizationRequiredException\n \t * @throws NoAPIAccessException\n \t */\n-\tprivate JsonArrayReader _queryStream(String method, JSONObject params) throws JSONException, IOException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n+\tprivate JsonArrayOrObjectReader _queryStream(String method, JSONObject params) throws JSONException, IOException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n \t\t// http request\n \t\tHttpPost post = new HttpPost(url);\n \t\tpost.addHeader(\"Content-Type\", \"application/json; charset=utf-8\");\n@@ -355,6 +355,9 @@ public class ZabbixService {\n \t\t\t.put(\"auth\", token)\n \t\t\t.put(\"id\", 0);\n \n+\t\tLog.d(\"ZabbixService\", \"_queryStream: \"+url);\n+\t\tLog.d(\"ZabbixService\", \"_queryStream: \"+json.toString());\n+\n \t\tpost.setEntity(new StringEntity(json.toString(), \"UTF-8\"));\n \t\ttry {\n \t\t\tHttpResponse resp = httpClient.execute(post);\n@@ -384,7 +387,7 @@ public class ZabbixService {\n \t\t\t\t\t\t// first do a new auth and then try the same api call again\n \t\t\t\t\t\tif (authenticate() && !_notAuthorizedRetry) {\n \t\t\t\t\t\t\t_notAuthorizedRetry = true;\n-\t\t\t\t\t\t\tJsonArrayReader r = _queryStream(method, params);\n+\t\t\t\t\t\t\tJsonArrayOrObjectReader r = _queryStream(method, params);\n \t\t\t\t\t\t\t_notAuthorizedRetry = false;\n \t\t\t\t\t\t\treturn r;\n \t\t\t\t\t\t} else throw new IllegalStateException(errortxt);\n@@ -393,10 +396,20 @@ public class ZabbixService {\n \t\t\t} while (!jp.getCurrentName().equals(\"result\"));\n \n \t\t\t// result array found\n-\t\t\tif (jp.nextToken() != JsonToken.START_ARRAY) { // go inside the array\n+\t\t\tif (jp.nextToken() != JsonToken.START_ARRAY && jp.getCurrentToken() != JsonToken.START_OBJECT) { // go inside the array\n+\t\t\t\ttry {\n+\t\t\t\t\tLog.d(\"ZabbixService\", \"current token: \"+jp.getCurrentToken());\n+\t\t\t\t\tLog.d(\"ZabbixService\", \"current name: \"+jp.getCurrentName());\n+\t\t\t\t\tLog.d(\"ZabbixService\", \"get text: \"+jp.getText());\n+\t\t\t\t\tLog.d(\"ZabbixService\", \"next value: \"+jp.nextValue());\n+\t\t\t\t\tLog.d(\"ZabbixService\", \"next token: \"+jp.nextToken());\n+\t\t\t\t\tLog.d(\"ZabbixService\", \"current token: \"+jp.getCurrentToken());\n+\t\t\t\t\tLog.d(\"ZabbixService\", \"current name: \"+jp.getCurrentName());\n+\t\t\t\t\tLog.d(\"ZabbixService\", \"get text: \"+jp.getText());\n+\t\t\t\t} catch (Exception e) {}\n \t\t\t\tthrow new IOException(\"Expected data to start with an Array\");\n \t\t\t}\n-\t\t\treturn new JsonArrayReader(jp);\n+\t\t\treturn new JsonArrayOrObjectReader(jp);\n \t\t} catch (SSLPeerUnverifiedException e) {\n \t\t\tthrow e;\n \t\t} catch (IOException e) {\n@@ -487,6 +500,7 @@ public class ZabbixService {\n \t\t\t\t\t, new JSONObject()\n \t\t\t);\n \t\t\tisVersion2 = result.getString(\"result\").equals(\"1.4\");\n+\t\t\tLog.i(\"ZabbixService\", \"Zabbix Server Version: isVersion2=\"+isVersion2);\n \t\t}\n \t\treturn token != null;\n \t}\n@@ -504,7 +518,7 @@ public class ZabbixService {\n \t\t}\n \t}\n \n-\tprivate void importApplications(long hostid, long itemid, JsonArrayReader jsonArray) throws JsonParseException, NumberFormatException, IOException {\n+\tprivate void importApplications(long hostid, long itemid, JsonArrayOrObjectReader jsonArray) throws JsonParseException, NumberFormatException, IOException {\n \t\tint num = 0;\n \t\tJsonObjectReader application;\n \t\twhile ((application = jsonArray.next()) != null) {\n@@ -576,7 +590,7 @@ public class ZabbixService {\n \t\t\t\t\t.put(\"sortorder\", \"DESC\");\n \t\t\t}\n \n-\t\t\tJsonArrayReader events = _queryStream(\n+\t\t\tJsonArrayOrObjectReader events = _queryStream(\n \t\t\t\t\t\"event.get\"\n \t\t\t\t\t, params\n \t\t\t);\n@@ -618,7 +632,7 @@ public class ZabbixService {\n \t\t\t\tparams.put(\"sortfield\", \"clock\")\n \t\t\t\t\t.put(\"sortorder\", \"DESC\");\n \t\t\t}\n-\t\t\tJsonArrayReader events = _queryStream(\n+\t\t\tJsonArrayOrObjectReader events = _queryStream(\n \t\t\t\t\t\"event.get\"\n \t\t\t\t\t, params\n \t\t\t);\n@@ -636,7 +650,7 @@ public class ZabbixService {\n \t * @throws JsonParseException\n \t * @throws IOException\n \t */\n-\tprivate void importEvents(JsonArrayReader events, Integer numEvents) throws JsonParseException, IOException {\n+\tprivate void importEvents(JsonArrayOrObjectReader events, Integer numEvents) throws JsonParseException, IOException {\n \t\tint i=0;\n \t\tJsonObjectReader eventReader;\n \t\twhile ((eventReader = events.next()) != null) {\n@@ -688,7 +702,7 @@ public class ZabbixService {\n \t * @throws NumberFormatException\n \t * @throws IOException\n \t */\n-\tprivate boolean importGraphItems(JsonArrayReader graphItems) throws JsonParseException, NumberFormatException, IOException {\n+\tprivate boolean importGraphItems(JsonArrayOrObjectReader graphItems) throws JsonParseException, NumberFormatException, IOException {\n \t\tboolean mustSetGraphid = false;\n \t\tJsonObjectReader graphItemReader;\n \t\twhile ((graphItemReader = graphItems.next()) != null) {\n@@ -737,7 +751,7 @@ public class ZabbixService {\n \t\t\t}\n \t\t\tzabbixLocalDB.delete(CacheData.TABLE_NAME, CacheData.COLUMN_KIND+\"='\"+GraphData.TABLE_NAME+\"' AND \"+CacheData.COLUMN_FILTER+\"='screenid=\"+screenid+'\\'', null);\n \n-\t\t\tJsonArrayReader graphs = _queryStream(\n+\t\t\tJsonArrayOrObjectReader graphs = _queryStream(\n \t\t\t\t\t\"graph.get\"\n \t\t\t\t\t, new JSONObject()\n \t\t\t\t\t\t.put(isVersion2?\"selectGraphItems\":\"select_graph_items\", \"extend\")\n@@ -826,7 +840,7 @@ public class ZabbixService {\n \t\t\t\t// so we use a fiction\n \t\t\t\tint numDetails = 400;\n \t\t\t\tint curI=0;\n-\t\t\t\tJsonArrayReader historydetails = _queryStream(\n+\t\t\t\tJsonArrayOrObjectReader historydetails = _queryStream(\n \t\t\t\t\t\t\"history.get\"\n \t\t\t\t\t\t, new JSONObject()\n \t\t\t\t\t\t\t.put(\"output\", \"extend\")\n@@ -878,7 +892,7 @@ public class ZabbixService {\n \t\t}\n \t}\n \n-\tprivate long importHostGroups(JsonArrayReader jsonArray) throws JsonParseException, IOException {\n+\tprivate long importHostGroups(JsonArrayOrObjectReader jsonArray) throws JsonParseException, IOException {\n \t\tlong firstHostGroupId = -1;\n \t\tJsonObjectReader hostReader;\n \t\twhile ((hostReader = jsonArray.next()) != null) {\n@@ -910,7 +924,7 @@ public class ZabbixService {\n \t * @throws JsonParseException\n \t * @throws IOException\n \t */\n-\tprivate Object[] importHosts(JsonArrayReader jsonArray, Integer numHosts) throws JsonParseException, IOException {\n+\tprivate Object[] importHosts(JsonArrayOrObjectReader jsonArray, Integer numHosts) throws JsonParseException, IOException {\n \t\tList<String> hostnames = new ArrayList<String>();\n \t\tlong firstHostId = -1;\n \t\tJsonObjectReader hostReader;\n@@ -971,7 +985,7 @@ public class ZabbixService {\n \t\t\t\t\t\t.put(isVersion2?\"selectGroups\":\"select_groups\", \"extend\")\n \t\t\t);\n \t\t\tint numHosts = result.getInt(\"result\");\n-\t\t\tJsonArrayReader hosts = _queryStream(\n+\t\t\tJsonArrayOrObjectReader hosts = _queryStream(\n \t\t\t\t\t\"host.get\"\n \t\t\t\t\t, new JSONObject()\n \t\t\t\t\t\t.put(\"output\", \"extend\")\n@@ -995,7 +1009,7 @@ public class ZabbixService {\n \t * @throws JsonParseException\n \t * @throws IOException\n \t */\n-\tprivate long importItems(JsonArrayReader items, int numItems, boolean checkBeforeInsert) throws JsonParseException, IOException {\n+\tprivate long importItems(JsonArrayOrObjectReader items, int numItems, boolean checkBeforeInsert) throws JsonParseException, IOException {\n \t\tlong firstItemId = -1;\n \t\tint curI=0;\n \t\tJsonObjectReader itemReader;\n@@ -1090,7 +1104,7 @@ public class ZabbixService {\n \t\t\t\t\t.put(\"hostids\", new JSONArray().put(hostid))\n \t\t\t);\n \t\t\tint numItems = result.getInt(\"result\");\n-\t\t\tJsonArrayReader items = _queryStream(\n+\t\t\tJsonArrayOrObjectReader items = _queryStream(\n \t\t\t\t\t\"item.get\"\n \t\t\t\t\t, new JSONObject()\n \t\t\t\t\t\t.put(\"output\", \"extend\")\n@@ -1106,7 +1120,7 @@ public class ZabbixService {\n \t\t}\n \t}\n \n-\tprivate void importScreenItems(JsonArrayReader screenItems) throws JsonParseException, NumberFormatException, IOException {\n+\tprivate void importScreenItems(JsonArrayOrObjectReader screenItems) throws JsonParseException, NumberFormatException, IOException {\n \t\tJsonObjectReader screenItemReader;\n \t\twhile ((screenItemReader = screenItems.next()) != null) {\n \t\t\tScreenItemData si = new ScreenItemData();\n@@ -1140,7 +1154,7 @@ public class ZabbixService {\n \t\t\tzabbixLocalDB.delete(ScreenItemData.TABLE_NAME, null, null);\n \t\t\tzabbixLocalDB.delete(CacheData.TABLE_NAME, CacheData.COLUMN_KIND+\"='\"+ScreenData.TABLE_NAME+\"'\", null);\n \n-\t\t\tJsonArrayReader screens = _queryStream(\n+\t\t\tJsonArrayOrObjectReader screens = _queryStream(\n \t\t\t\t\t(isVersion2?\"s\":\"S\")+\"creen.get\"\n \t\t\t\t\t, new JSONObject()\n \t\t\t\t\t\t.put(\"output\", \"extend\")\n@@ -1174,7 +1188,7 @@ public class ZabbixService {\n \t\tif (!isCached(TriggerData.TABLE_NAME, \"triggerid=\"+triggerid)) {\n \t\t\t_startTransaction();\n \n-\t\t\tJsonArrayReader trigger = _queryStream(\n+\t\t\tJsonArrayOrObjectReader trigger = _queryStream(\n \t\t\t\t\t\"trigger.get\"\n \t\t\t\t\t, new JSONObject()\n \t\t\t\t\t\t.put(\"output\", \"extend\")\n@@ -1216,7 +1230,7 @@ public class ZabbixService {\n \t\tif (mustImport) {\n \t\t\t_startTransaction();\n \t\t\tzabbixLocalDB.delete(TriggerData.TABLE_NAME, TriggerData.COLUMN_TRIGGERID+\"=\"+triggerid, null);\n-\t\t\tJsonArrayReader triggers = _queryStream(\n+\t\t\tJsonArrayOrObjectReader triggers = _queryStream(\n \t\t\t\t\t\"trigger.get\"\n \t\t\t\t\t, new JSONObject()\n \t\t\t\t\t\t.put(\"output\", \"extend\")\n@@ -1243,7 +1257,7 @@ public class ZabbixService {\n \t\t\t_startTransaction();\n \n \t\t\tlong min = (new Date().getTime()/1000)-ZabbixConfig.STATUS_SHOW_TRIGGER_TIME;\n-\t\t\tJsonArrayReader triggers = _queryStream(\n+\t\t\tJsonArrayOrObjectReader triggers = _queryStream(\n \t\t\t\t\t\"trigger.get\"\n \t\t\t\t\t, new JSONObject()\n \t\t\t\t\t\t.put(\"output\", \"extend\")\n@@ -1265,7 +1279,7 @@ public class ZabbixService {\n \t\t}\n \t}\n \n-\tprivate void importTriggers(JsonArrayReader jsonArray) throws JsonParseException, IOException {\n+\tprivate void importTriggers(JsonArrayOrObjectReader jsonArray) throws JsonParseException, IOException {\n \t\tJsonObjectReader triggerReader;\n \t\twhile ((triggerReader = jsonArray.next()) != null) {\n \t\t\tTriggerData t = new TriggerData();\n@@ -1311,7 +1325,7 @@ public class ZabbixService {\n \t\tif (!isCached(TriggerData.TABLE_NAME, \"itemid=\"+itemid)) {\n \t\t\t_startTransaction();\n \t\t\tzabbixLocalDB.delete(TriggerData.TABLE_NAME, TriggerData.COLUMN_ITEMID+\"=\"+itemid, null);\n-\t\t\tJsonArrayReader triggers = _queryStream(\n+\t\t\tJsonArrayOrObjectReader triggers = _queryStream(\n \t\t\t\t\t\"trigger.get\"\n \t\t\t\t\t, new JSONObject()\n \t\t\t\t\t\t.put(\"output\", \"extend\")"],
      "c_body_t": ["<empty>"],
      "c_email_sni": "jonas.gehring@inovex.de",
      "p_patch_t": ["+package com.inovex.zabbixmobile.api;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.net.Socket;\n+import java.net.UnknownHostException;\n+import java.security.KeyManagementException;\n+import java.security.KeyStore;\n+import java.security.KeyStoreException;\n+import java.security.NoSuchAlgorithmException;\n+import java.security.UnrecoverableKeyException;\n+import java.security.cert.CertificateException;\n+import java.security.cert.X509Certificate;\n+import java.util.ArrayList;\n+import java.util.Date;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+\n+import javax.net.ssl.SSLContext;\n+import javax.net.ssl.SSLPeerUnverifiedException;\n+import javax.net.ssl.TrustManager;\n+import javax.net.ssl.X509TrustManager;\n+\n+import org.apache.http.HttpResponse;\n+import org.apache.http.HttpVersion;\n+import org.apache.http.auth.AuthScope;\n+import org.apache.http.auth.UsernamePasswordCredentials;\n+import org.apache.http.client.ClientProtocolException;\n+import org.apache.http.client.methods.HttpPost;\n+import org.apache.http.client.params.HttpClientParams;\n+import org.apache.http.conn.ClientConnectionManager;\n+import org.apache.http.conn.scheme.PlainSocketFactory;\n+import org.apache.http.conn.scheme.Scheme;\n+import org.apache.http.conn.scheme.SchemeRegistry;\n+import org.apache.http.conn.ssl.SSLSocketFactory;\n+import org.apache.http.entity.StringEntity;\n+import org.apache.http.impl.client.DefaultHttpClient;\n+import org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager;\n+import org.apache.http.params.BasicHttpParams;\n+import org.apache.http.params.HttpConnectionParams;\n+import org.apache.http.params.HttpParams;\n+import org.apache.http.params.HttpProtocolParams;\n+import org.apache.http.protocol.HTTP;\n+import org.codehaus.jackson.JsonFactory;\n+import org.codehaus.jackson.JsonParseException;\n+import org.codehaus.jackson.JsonParser;\n+import org.codehaus.jackson.JsonToken;\n+import org.json.JSONArray;\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+\n+import android.content.ContentValues;\n+import android.content.Context;\n+import android.content.Intent;\n+import android.content.SharedPreferences;\n+import android.database.Cursor;\n+import android.database.sqlite.SQLiteDatabase;\n+import android.database.sqlite.SQLiteQueryBuilder;\n+import android.graphics.Color;\n+import android.preference.PreferenceManager;\n+import android.util.Log;\n+\n+import com.inovex.zabbixmobile.R;\n+import com.inovex.zabbixmobile.ZabbixContentProvider;\n+import com.inovex.zabbixmobile.model.ApplicationData;\n+import com.inovex.zabbixmobile.model.ApplicationItemRelationData;\n+import com.inovex.zabbixmobile.model.CacheData;\n+import com.inovex.zabbixmobile.model.EventData;\n+import com.inovex.zabbixmobile.model.GraphData;\n+import com.inovex.zabbixmobile.model.GraphItemData;\n+import com.inovex.zabbixmobile.model.HistoryDetailData;\n+import com.inovex.zabbixmobile.model.HostData;\n+import com.inovex.zabbixmobile.model.HostGroupData;\n+import com.inovex.zabbixmobile.model.ItemData;\n+import com.inovex.zabbixmobile.model.ScreenData;\n+import com.inovex.zabbixmobile.model.ScreenItemData;\n+import com.inovex.zabbixmobile.model.TriggerData;\n+\n+/**\n+ * interface to connect to the zabbix server\n+ */\n+public class ZabbixService {\n+\tclass CustomSSLSocketFactory extends SSLSocketFactory {\n+\t\tSSLContext sslContext = SSLContext.getInstance(\"TLS\");\n+\n+\t\tpublic CustomSSLSocketFactory(KeyStore truststore) throws NoSuchAlgorithmException, KeyManagementException, KeyStoreException, UnrecoverableKeyException {\n+\t\t\tsuper(truststore);\n+\t\t\tTrustManager tm = new X509TrustManager() {\n+\t\t\t\t@Override\n+\t\t\t\tpublic void checkClientTrusted(X509Certificate[] chain,\n+\t\t\t\t\t\tString authType) throws CertificateException {\n+\t\t\t\t}\n+\t\t\t\t@Override\n+\t\t\t\tpublic void checkServerTrusted(X509Certificate[] chain,\n+\t\t\t\t\t\tString authType) throws CertificateException {\n+\t\t\t\t}\n+\t\t\t\t@Override\n+\t\t\t\tpublic X509Certificate[] getAcceptedIssuers() {\n+\t\t\t\t\treturn null;\n+\t\t\t\t}\n+\t\t\t};\n+\t\t\tsslContext.init(null, new TrustManager[] { tm }, null);\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic Socket createSocket() throws IOException {\n+\t\t\treturn sslContext.getSocketFactory().createSocket();\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic Socket createSocket(Socket socket, String host, int port, boolean autoClose) throws IOException, UnknownHostException {\n+\t\t\treturn sslContext.getSocketFactory().createSocket(socket, host, port, autoClose);\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * http auth is needed\n+\t */\n+\tpublic class HttpAuthorizationRequiredException extends Exception {\n+\t\tprivate static final long serialVersionUID = 6632422081858878147L;\n+\t}\n+\n+\t/**\n+\t * zabbix error: no api access\n+\t */\n+\tpublic class NoAPIAccessException extends Exception {\n+\t\tprivate static final long serialVersionUID = 6381395987443456382L;\n+\t}\n+\n+\t/**\n+\t * probably too old zabbix <= 1.8.2\n+\t */\n+\tpublic class PreconditionFailedException extends Exception {\n+\t\tprivate static final long serialVersionUID = -2529885710860745023L;\n+\t}\n+\n+\t/**\n+\t * global constants\n+\t */\n+\tpublic class ZabbixConfig {\n+\t\tpublic static final int APPLICATION_GET_LIMIT = 1000;\n+\t\tpublic static final int EVENTS_GET_LIMIT = 60;\n+\t\tpublic static final int HISTORY_GET_TIME_FROM_SHIFT = 8*60*60; // -8h\n+\t\tpublic static final int HISTORY_GET_LIMIT = 8000;\n+\t\tpublic static final int HOSTGROUP_GET_LIMIT = 200;\n+\t\tpublic static final int HOST_GET_LIMIT = 300;\n+\t\tpublic static final int ITEM_GET_LIMIT = 200;\n+\t\tpublic static final int TRIGGER_GET_LIMIT = 100;\n+\t\tpublic static final int EVENT_GET_TIME_FROM_SHIFT = 7*24*60*60; // -7 days\n+\t\tpublic static final int CACHE_LIFETIME_APPLICATIONS = 2*24*60*60; // 2 days\n+\t\tpublic static final int CACHE_LIFETIME_EVENTS = 120;\n+\t\tpublic static final int CACHE_LIFETIME_HISTORY_DETAILS = 4*60;\n+\t\tpublic static final int CACHE_LIFETIME_HOST_GROUPS = 7*24*60*60;\n+\t\tpublic static final int CACHE_LIFETIME_HOSTS = 2*24*60*60;\n+\t\tpublic static final int CACHE_LIFETIME_SCREENS = 2*24*60*60;\n+\t\tpublic static final int CACHE_LIFETIME_ITEMS = 4*60;\n+\t\tpublic static final int CACHE_LIFETIME_TRIGGERS = 2*60;\n+\t\tpublic static final long STATUS_SHOW_TRIGGER_TIME = 14*24*60*60;\n+\t\tpublic static final int HTTP_CONNECTION_TIMEOUT = 30000;\n+\t}\n+\n+\tprivate final DefaultHttpClient httpClient;\n+\tprivate final SQLiteDatabase zabbixLocalDB;\n+\tprivate String url;\n+\tprivate String token;\n+\tprivate final Context context;\n+\tprivate int _transactionStack;\n+\tprivate JsonParser lastStream;\n+\tprivate int transformProgressStart;\n+\tprivate int transformProgressEnd;\n+\tprivate boolean _notAuthorizedRetry;\n+\tprivate boolean isVersion2 = true;\n+\n+\t/**\n+\t * init\n+\t * @param context android context\n+\t * @param zabbixLocalDB sqlite\n+\t */\n+\tpublic ZabbixService(Context context, SQLiteDatabase zabbixLocalDB) {\n+\t\tClientConnectionManager ccm = null;\n+\t\tHttpParams params = null;\n+\n+\t\ttry {\n+\t\t\tSharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(context);\n+\t\t\tif (prefs.getBoolean(\"zabbix_trust_all_ssl_ca\", false)) {\n+\t\t\t\tKeyStore trustStore = KeyStore.getInstance(KeyStore.getDefaultType());\n+\t\t\t\ttrustStore.load(null, null);\n+\n+\t\t\t\tSSLSocketFactory sf = new CustomSSLSocketFactory(trustStore);\n+\t\t\t\tsf.setHostnameVerifier(SSLSocketFactory.ALLOW_ALL_HOSTNAME_VERIFIER);\n+\n+\t\t\t\tparams = new BasicHttpParams();\n+\t\t\t\tHttpProtocolParams.setVersion(params, HttpVersion.HTTP_1_1);\n+\t\t\t\tHttpProtocolParams.setContentCharset(params, HTTP.UTF_8);\n+\n+\t\t\t\tSchemeRegistry registry = new SchemeRegistry();\n+\t\t\t\tregistry.register(new Scheme(\"http\", PlainSocketFactory.getSocketFactory(), 80));\n+\t\t\t\tregistry.register(new Scheme(\"https\", sf, 443));\n+\n+\t\t\t\tccm = new ThreadSafeClientConnManager(params, registry);\n+\t\t\t}\n+\t\t} catch (Exception e) {\n+\t\t\t// ignore for unit test\n+\t\t}\n+\n+\t\tif (ccm == null || params == null) {\n+\t\t\thttpClient = new DefaultHttpClient();\n+\t\t} else {\n+\t\t\thttpClient = new DefaultHttpClient(ccm, params);\n+\t\t}\n+\n+\t\t// if applicable http auth\n+\t\ttry {\n+\t\t\tSharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(context);\n+\t\t\tif (prefs.getBoolean(\"http_auth_enabled\", false)) {\n+\t\t\t\tString user = prefs.getString(\"http_auth_username\", \"\");\n+\t\t\t\tString pwd = prefs.getString(\"http_auth_password\", \"\");\n+\t\t\t\thttpClient.getCredentialsProvider().setCredentials(AuthScope.ANY, new UsernamePasswordCredentials(user, pwd));\n+\t\t\t}\n+\t\t} catch (java.lang.UnsupportedOperationException e1) {\n+\t\t\t// for unit test\n+\t\t}\n+\n+\t\tparams = httpClient.getParams();\n+\t\tHttpClientParams.setRedirecting(params, true); // redirecting\n+\t\tHttpConnectionParams.setConnectionTimeout(params, ZabbixConfig.HTTP_CONNECTION_TIMEOUT);\n+\t\tthis.context = context;\n+\t\tthis.zabbixLocalDB = zabbixLocalDB;\n+\t}\n+\n+\t/**\n+\t * counts the sql inserts/updates and do a transaction commit to save the memory\n+\t */\n+\tprivate void _commitTransactionIfRecommended() {\n+\t\tif (_transactionStack++ > 50) {\n+\t\t\t_endTransaction();\n+\t\t\t_startTransaction();\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * commit sql transaction\n+\t */\n+\tpublic void _endTransaction() {\n+\t\tif (zabbixLocalDB.inTransaction()) {\n+\t\t\tzabbixLocalDB.setTransactionSuccessful();\n+\t\t\tzabbixLocalDB.endTransaction();\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * zabbix api call. data will be parsed as json object on-the-fly.\n+\t * Caution: use this only for api calls with a small return data.\n+\t * @param method\n+\t * @param params\n+\t * @return\n+\t * @throws ClientProtocolException\n+\t * @throws IOException\n+\t * @throws JSONException\n+\t * @throws HttpAuthorizationRequiredException\n+\t * @throws NoAPIAccessException\n+\t */\n+\tprivate JSONObject _queryBuffer(String method, JSONObject params) throws ClientProtocolException, IOException, JSONException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n+\t\tHttpPost post = new HttpPost(url);\n+\t\tpost.addHeader(\"Content-Type\", \"application/json; charset=utf-8\");\n+\n+\t\tString json =\n+\t\t\t\"{\" +\n+\t\t\t\"\t\\\"jsonrpc\\\" : \\\"2.0\\\",\" +\n+\t\t\t\"\t\\\"method\\\" : \\\"\"+method+\"\\\",\" +\n+\t\t\t\"\t\\\"params\\\" : \"+params.toString()+\",\" +\n+\t\t\t\"\t\\\"auth\\\" : \"+(token==null?\"null\":'\"'+token+'\"')+\",\" +\n+\t\t\t\"\t\\\"id\\\" : 0\" +\n+\t\t\t\"}\";\n+\n+\t\tpost.setEntity(new StringEntity(json, \"UTF-8\"));\n+\t\ttry {\n+\t\t\tHttpResponse resp = httpClient.execute(post);\n+\t\t\tif (resp.getStatusLine().getStatusCode() == 401) {\n+\t\t\t\t// http auth failed\n+\t\t\t\tthrow new HttpAuthorizationRequiredException();\n+\t\t\t} else if (resp.getStatusLine().getStatusCode() == 412) {\n+\t\t\t\t\t// Precondition failed / Looks like Zabbix 1.8.2\n+\t\t\t\tthrow new PreconditionFailedException();\n+\t\t\t} else if (resp.getStatusLine().getStatusCode() == 404) {\n+\t\t\t\t// file not found\n+\t\t\t\tthrow new IOException(resp.getStatusLine().getStatusCode()+\" \"+resp.getStatusLine().getReasonPhrase());\n+\t\t\t} else {\n+\t\t\t\tLog.d(\"ZabbixService\", resp.getStatusLine().getStatusCode()+\" \"+resp.getStatusLine().getReasonPhrase());\n+\t\t\t}\n+\t\t\tStringBuilder total = new StringBuilder();\n+\t\t\tBufferedReader rd = new BufferedReader(new InputStreamReader(resp.getEntity().getContent()));\n+\t\t\tint chr;\n+\t\t\twhile ((chr = rd.read()) != -1) {\n+\t\t\t\ttotal.append((char) chr);\n+\t\t\t}\n+\t\t\tJSONObject result = new JSONObject(total.toString());\n+\t\t\ttry {\n+\t\t\t\tif (result.getJSONObject(\"error\") != null) {\n+\t\t\t\t\tif (result.getJSONObject(\"error\").getString(\"data\").equals(\"No API access\")) {\n+\t\t\t\t\t\tthrow new NoAPIAccessException();\n+\t\t\t\t\t} else throw new RuntimeException(result.getJSONObject(\"error\").toString());\n+\t\t\t\t}\n+\t\t\t\tif (result.getString(\"data\").equals(\"Not authorized\")) {\n+\t\t\t\t\t// first do a new auth and then try the same api call again\n+\t\t\t\t\tif (authenticate() && !_notAuthorizedRetry) {\n+\t\t\t\t\t\t_notAuthorizedRetry = true;\n+\t\t\t\t\t\tJSONObject r = _queryBuffer(method, params);\n+\t\t\t\t\t\t_notAuthorizedRetry = false;\n+\t\t\t\t\t\treturn r;\n+\t\t\t\t\t} throw new IllegalStateException(result.toString());\n+\t\t\t\t}\n+\t\t\t} catch (JSONException e) {\n+\t\t\t\t// ignore\n+\t\t\t}\n+\t\t\treturn result;\n+\t\t} catch (SSLPeerUnverifiedException e) {\n+\t\t\t// SSL not trusted\n+\t\t\tIntent intent = new Intent(ZabbixContentProvider.CONTENT_PROVIDER_INTENT_ACTION);\n+\t\t\tintent.putExtra(\"flag\", ZabbixContentProvider.INTENT_FLAG_SSL_NOT_TRUSTED);\n+\t\t\tcontext.sendBroadcast(intent);\n+\t\t\tthrow e;\n+\t\t} catch (IOException e) {\n+\t\t\t// internet problem\n+\t\t\t// send intent to GUI\n+\t\t\tIntent intent = new Intent(ZabbixContentProvider.CONTENT_PROVIDER_INTENT_ACTION);\n+\t\t\tintent.putExtra(\"flag\", ZabbixContentProvider.INTENT_FLAG_CONNECTION_FAILED);\n+\t\t\tintent.putExtra(\"value\", e.getMessage());\n+\t\t\tcontext.sendBroadcast(intent);\n+\t\t\tthrow e;\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * zabbix api call as stream.\n+\t * @param method\n+\t * @param params\n+\t * @return stream im json array wrapper\n+\t * @throws JSONException\n+\t * @throws IOException\n+\t * @throws HttpAuthorizationRequiredException\n+\t * @throws NoAPIAccessException\n+\t */\n+\tprivate JsonArrayReader _queryStream(String method, JSONObject params) throws JSONException, IOException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n+\t\t// http request\n+\t\tHttpPost post = new HttpPost(url);\n+\t\tpost.addHeader(\"Content-Type\", \"application/json; charset=utf-8\");\n+\n+\t\tJSONObject json = new JSONObject()\n+\t\t\t.put(\"jsonrpc\", \"2.0\")\n+\t\t\t.put(\"method\", method)\n+\t\t\t.put(\"params\", params)\n+\t\t\t.put(\"auth\", token)\n+\t\t\t.put(\"id\", 0);\n+\n+\t\tpost.setEntity(new StringEntity(json.toString(), \"UTF-8\"));\n+\t\ttry {\n+\t\t\tHttpResponse resp = httpClient.execute(post);\n+\t\t\tif (resp.getStatusLine().getStatusCode() == 401) {\n+\t\t\t\t// http auth failed\n+\t\t\t\tthrow new HttpAuthorizationRequiredException();\n+\t\t\t}\n+\n+\t\t\tJsonFactory jsonFac = new JsonFactory();\n+\t\t\tJsonParser jp = jsonFac.createJsonParser(resp.getEntity().getContent());\n+\t\t\t// store the last stream to close it if an exception will be thrown\n+\t\t\tlastStream = jp;\n+\t\t\tif (jp.nextToken() != JsonToken.START_OBJECT) {\n+\t\t\t\tthrow new IOException(\"Expected data to start with an Object\");\n+\t\t\t}\n+\t\t\tdo {\n+\t\t\t\tjp.nextToken();\n+\t\t\t\tif (jp.getCurrentName().equals(\"error\")) {\n+\t\t\t\t\tjp.nextToken();\n+\t\t\t\t\tString errortxt = \"\";\n+\t\t\t\t\twhile (jp.nextToken() != JsonToken.END_OBJECT) {\n+\t\t\t\t\t\terrortxt += jp.getText();\n+\t\t\t\t\t}\n+\t\t\t\t\tif (errortxt.contains(\"No API access\")) {\n+\t\t\t\t\t\tthrow new NoAPIAccessException();\n+\t\t\t\t\t} else if (errortxt.contains(\"Not authorized\")) {\n+\t\t\t\t\t\t// first do a new auth and then try the same api call again\n+\t\t\t\t\t\tif (authenticate() && !_notAuthorizedRetry) {\n+\t\t\t\t\t\t\t_notAuthorizedRetry = true;\n+\t\t\t\t\t\t\tJsonArrayReader r = _queryStream(method, params);\n+\t\t\t\t\t\t\t_notAuthorizedRetry = false;\n+\t\t\t\t\t\t\treturn r;\n+\t\t\t\t\t\t} else throw new IllegalStateException(errortxt);\n+\t\t\t\t\t} else throw new IllegalStateException(\"JSON API Error: \"+errortxt);\n+\t\t\t\t}\n+\t\t\t} while (!jp.getCurrentName().equals(\"result\"));\n+\n+\t\t\t// result array found\n+\t\t\tif (jp.nextToken() != JsonToken.START_ARRAY) { // go inside the array\n+\t\t\t\tthrow new IOException(\"Expected data to start with an Array\");\n+\t\t\t}\n+\t\t\treturn new JsonArrayReader(jp);\n+\t\t} catch (SSLPeerUnverifiedException e) {\n+\t\t\tthrow e;\n+\t\t} catch (IOException e) {\n+\t\t\t// internet problem\n+\t\t\t// send intent to GUI\n+\t\t\tIntent intent = new Intent(ZabbixContentProvider.CONTENT_PROVIDER_INTENT_ACTION);\n+\t\t\tintent.putExtra(\"flag\", ZabbixContentProvider.INTENT_FLAG_CONNECTION_FAILED);\n+\t\t\tcontext.sendBroadcast(intent);\n+\t\t\tthrow e;\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * begin sql transaction\n+\t */\n+\tprivate void _startTransaction() {\n+\t\tzabbixLocalDB.beginTransaction();\n+\t\t_transactionStack = 0;\n+\t}\n+\n+\t/**\n+\t * acknowledge zabbix event. Sets ack-flag with comment.\n+\t * Caution: This is supported only for Zabbix version >= 1.8.4\n+\t * @param eventid\n+\t * @param comment\n+\t * @return true, success.\n+\t * @throws ClientProtocolException\n+\t * @throws IOException\n+\t * @throws JSONException\n+\t * @throws HttpAuthorizationRequiredException\n+\t * @throws NoAPIAccessException\n+\t */\n+\tpublic boolean acknowledgeEvent(String eventid, String comment) throws ClientProtocolException, IOException, JSONException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n+\t\t// for GUI unit test, just return true\n+\t\tif (comment != null && comment.equals(\"__UNIT_TEST__RETURN_TRUE__\")) return true;\n+\n+\t\tJSONObject result = _queryBuffer(\n+\t\t\t\t\"event.acknowledge\"\n+\t\t\t\t, new JSONObject()\n+\t\t\t\t\t.put(\"eventids\", new JSONArray().put(eventid))\n+\t\t);\n+\t\t// it can be an (empty) array\n+\t\ttry {\n+\t\t\treturn result.getJSONObject(\"result\").getJSONArray(\"eventids\").length() == 1;\n+\t\t} catch (JSONException e) {\n+\t\t\t// or a json object\n+\t\t\treturn result.getJSONObject(\"result\").getJSONObject(\"eventids\").length() == 1;\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * zabbix auth. user and pwd from app preferences\n+\t * @return true success\n+\t * @throws ClientProtocolException\n+\t * @throws IOException\n+\t * @throws JSONException\n+\t * @throws HttpAuthorizationRequiredException\n+\t * @throws NoAPIAccessException\n+\t */\n+\tpublic boolean authenticate() throws ClientProtocolException, IOException, JSONException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n+\t\tSharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(context);\n+\t\tString url = prefs.getString(\"zabbix_url\", \"\").trim();\n+\t\tString user = prefs.getString(\"zabbix_username\", \"\").trim();\n+\t\tString password = prefs.getString(\"zabbix_password\", \"\");\n+\n+\t\tthis.url = url+(url.endsWith(\"/\")?\"\":'/')+\"api_jsonrpc.php\";\n+\t\tLog.d(\"ZabbixContentProvider\", url+\"//\"+user);\n+\n+\t\ttry {\n+\t\t\tJSONObject result = _queryBuffer(\n+\t\t\t\t\t\"user.authenticate\"\n+\t\t\t\t\t, new JSONObject()\n+\t\t\t\t\t\t.put(\"user\", user)\n+\t\t\t\t\t\t.put(\"password\", password)\n+\t\t\t);\n+\t\t\ttoken = result.getString(\"result\");\n+\t\t} catch (JSONException e) {\n+\t\t\t// there's no result\n+\t\t\te.printStackTrace();\n+\t\t} catch (RuntimeException e) {\n+\t\t\t// wrong password. token remains null\n+\t\t\te.printStackTrace();\n+\t\t}\n+\t\tif (token != null) {\n+\t\t\t// get API version\n+\t\t\tJSONObject result = _queryBuffer(\n+\t\t\t\t\t\"apiinfo.version\"\n+\t\t\t\t\t, new JSONObject()\n+\t\t\t);\n+\t\t\tisVersion2 = result.getString(\"result\").equals(\"1.4\");\n+\t\t}\n+\t\treturn token != null;\n+\t}\n+\n+\t/**\n+\t * close the last http stream\n+\t */\n+\tpublic void closeLastStream() {\n+\t\tif (lastStream != null && !lastStream.isClosed()) {\n+\t\t\ttry {\n+\t\t\t\tlastStream.close();\n+\t\t\t} catch (IOException e) {\n+\t\t\t\te.printStackTrace();\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\tprivate void importApplications(long hostid, long itemid, JsonArrayReader jsonArray) throws JsonParseException, NumberFormatException, IOException {\n+\t\tint num = 0;\n+\t\tJsonObjectReader application;\n+\t\twhile ((application = jsonArray.next()) != null) {\n+\t\t\tApplicationData app = new ApplicationData();\n+\t\t\twhile (application.nextValueToken()) {\n+\t\t\t\tString propName = application.getCurrentName();\n+\t\t\t\tif (propName.equals(ApplicationData.COLUMN_APPLICATIONID)) {\n+\t\t\t\t\tapp.set(ApplicationData.COLUMN_APPLICATIONID, Long.parseLong(application.getText()));\n+\t\t\t\t} else if (propName.equals(ApplicationData.COLUMN_NAME)) {\n+\t\t\t\t\tapp.set(ApplicationData.COLUMN_NAME, application.getText());\n+\t\t\t\t} else if (propName.equals(ApplicationData.COLUMN_HOSTID)) {\n+\t\t\t\t\tapp.set(ApplicationData.COLUMN_HOSTID, Long.parseLong(application.getText()));\n+\t\t\t\t} else {\n+\t\t\t\t\tapplication.nextProperty();\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\t// create applications that does not exist\n+\t\t\tapp.insert(zabbixLocalDB, ApplicationData.COLUMN_APPLICATIONID);\n+\t\t\t_commitTransactionIfRecommended();\n+\n+\t\t\t// create ApplicationItemRelation\n+\t\t\tlong appid = (Long) app.get(ApplicationData.COLUMN_APPLICATIONID);\n+\t\t\tApplicationItemRelationData rel = new ApplicationItemRelationData();\n+\t\t\trel.set(ApplicationItemRelationData.COLUMN_APPLICATIONID, appid);\n+\t\t\trel.set(ApplicationItemRelationData.COLUMN_ITEMID, itemid);\n+\t\t\trel.set(ApplicationItemRelationData.COLUMN_HOSTID, hostid);\n+\t\t\trel.insert(zabbixLocalDB);\n+\t\t\t_commitTransactionIfRecommended();\n+\n+\t\t\tnum++;\n+\t\t}\n+\t\tif (num == 0) {\n+\t\t\t// if there's no application, the ID #0 must be added (for other)\n+\t\t\tApplicationItemRelationData rel = new ApplicationItemRelationData();\n+\t\t\trel.set(ApplicationItemRelationData.COLUMN_APPLICATIONID, 0);\n+\t\t\trel.set(ApplicationItemRelationData.COLUMN_ITEMID, itemid);\n+\t\t\trel.set(ApplicationItemRelationData.COLUMN_HOSTID, hostid);\n+\t\t\trel.insert(zabbixLocalDB);\n+\n+\t\t\t// if #0 \"other\" does not exist yet, it has to be created\n+\t\t\tApplicationData app = new ApplicationData();\n+\t\t\tapp.set(ApplicationData.COLUMN_APPLICATIONID, 0);\n+\t\t\tapp.set(ApplicationData.COLUMN_NAME, \"- \"+context.getResources().getString(R.string.other)+\" -\");\n+\t\t\tapp.insert(zabbixLocalDB, ApplicationData.COLUMN_APPLICATIONID);\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * import the newest event of a trigger\n+\t * @param triggerid\n+\t * @throws JSONException\n+\t * @throws IOException\n+\t * @throws HttpAuthorizationRequiredException\n+\t * @throws NoAPIAccessException\n+\t */\n+\tpublic void importEventByTriggerId(String triggerid) throws JSONException, IOException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n+\t\tif (!isCached(EventData.TABLE_NAME, \"triggerid=\"+triggerid)) {\n+\t\t\t_startTransaction();\n+\t\t\tzabbixLocalDB.delete(EventData.TABLE_NAME, EventData.COLUMN_OBJECTID+\"=\"+triggerid, null);\n+\n+\t\t\tJSONObject params = new JSONObject()\n+\t\t\t\t.put(\"output\", \"extend\")\n+\t\t\t\t.put(isVersion2?\"selectHosts\":\"select_hosts\", \"extend\")\n+\t\t\t\t.put(\"triggerids\", new JSONArray().put(triggerid))\n+\t\t\t\t.put(\"limit\", 1)\n+\t\t\t\t.put(\"source\", 0);\n+\t\t\tif (!isVersion2) {\n+\t\t\t\tparams.put(\"sortfield\", \"clock\")\n+\t\t\t\t\t.put(\"sortorder\", \"DESC\");\n+\t\t\t}\n+\n+\t\t\tJsonArrayReader events = _queryStream(\n+\t\t\t\t\t\"event.get\"\n+\t\t\t\t\t, params\n+\t\t\t);\n+\t\t\timportEvents(events, null);\n+\t\t\tevents.close();\n+\n+\t\t\tsetCached(EventData.TABLE_NAME, \"triggerid=\"+triggerid, ZabbixConfig.CACHE_LIFETIME_EVENTS);\n+\t\t\t_endTransaction();\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * import the newest events\n+\t * @throws ClientProtocolException\n+\t * @throws IOException\n+\t * @throws JSONException\n+\t * @throws HttpAuthorizationRequiredException\n+\t * @throws NoAPIAccessException\n+\t */\n+\tpublic void importEvents() throws ClientProtocolException, IOException, JSONException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n+\t\tif (!isCached(EventData.TABLE_NAME, null)) {\n+\t\t\t_startTransaction();\n+\t\t\tzabbixLocalDB.delete(EventData.TABLE_NAME, null, null);\n+\t\t\tzabbixLocalDB.delete(TriggerData.TABLE_NAME, null, null);\n+\t\t\tzabbixLocalDB.delete(CacheData.TABLE_NAME, CacheData.COLUMN_KIND+\"='\"+EventData.TABLE_NAME+\"'\", null);\n+\t\t\tzabbixLocalDB.delete(CacheData.TABLE_NAME, CacheData.COLUMN_KIND+\"='\"+TriggerData.TABLE_NAME+\"'\", null);\n+\n+\t\t\tint numEvents = ZabbixConfig.EVENTS_GET_LIMIT;\n+\n+\t\t\tJSONObject params = new JSONObject()\n+\t\t\t\t.put(\"output\", \"extend\")\n+\t\t\t\t.put(\"limit\", ZabbixConfig.EVENTS_GET_LIMIT)\n+\t\t\t\t.put(isVersion2?\"selectHosts\":\"select_hosts\", \"extend\")\n+\t\t\t\t.put(isVersion2?\"selectTriggers\":\"select_triggers\", \"extend\")\n+\t\t\t\t.put(\"source\", 0)\n+\t\t\t\t.put(\"time_from\", (new Date().getTime()/1000) - ZabbixConfig.EVENT_GET_TIME_FROM_SHIFT);\n+\t\t\tif (!isVersion2) {\n+\t\t\t\t// in Zabbix version <2.0, this is not default\n+\t\t\t\tparams.put(\"sortfield\", \"clock\")\n+\t\t\t\t\t.put(\"sortorder\", \"DESC\");\n+\t\t\t}\n+\t\t\tJsonArrayReader events = _queryStream(\n+\t\t\t\t\t\"event.get\"\n+\t\t\t\t\t, params\n+\t\t\t);\n+\t\t\timportEvents(events, numEvents);\n+\t\t\tevents.close();\n+\n+\t\t\tsetCached(EventData.TABLE_NAME, null, ZabbixConfig.CACHE_LIFETIME_EVENTS);\n+\t\t\t_endTransaction();\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * @param events stream\n+\t * @param numEvents if null, no progressbar-update AND only isert, if it does not exist. If !null, progressbar-update AND always insert without checking\n+\t * @throws JsonParseException\n+\t * @throws IOException\n+\t */\n+\tprivate void importEvents(JsonArrayReader events, Integer numEvents) throws JsonParseException, IOException {\n+\t\tint i=0;\n+\t\tJsonObjectReader eventReader;\n+\t\twhile ((eventReader = events.next()) != null) {\n+\t\t\tEventData e = new EventData();\n+\t\t\twhile (eventReader.nextValueToken()) {\n+\t\t\t\tString propName = eventReader.getCurrentName();\n+\t\t\t\tif (propName.equals(\"hosts\")) {\n+\t\t\t\t\t// import hosts\n+\t\t\t\t\tString hostnames = (String) importHosts(eventReader.getJsonArray(), null)[0];\n+\t\t\t\t\t// store hosts namen\n+\t\t\t\t\te.set(EventData.COLUMN_HOSTS, hostnames);\n+\t\t\t\t} else if (propName.equals(\"triggers\")) {\n+\t\t\t\t\t// import triggers\n+\t\t\t\t\timportTriggers(eventReader.getJsonArray());\n+\t\t\t\t} else if (propName.equals(EventData.COLUMN_EVENTID)) {\n+\t\t\t\t\te.set(EventData.COLUMN_EVENTID, Long.parseLong(eventReader.getText()));\n+\t\t\t\t} else if (propName.equals(EventData.COLUMN_CLOCK)) {\n+\t\t\t\t\te.set(EventData.COLUMN_CLOCK, Integer.parseInt(eventReader.getText()));\n+\t\t\t\t} else if (propName.equals(EventData.COLUMN_OBJECTID)) {\n+\t\t\t\t\te.set(EventData.COLUMN_OBJECTID, Long.parseLong(eventReader.getText()));\n+\t\t\t\t} else if (propName.equals(EventData.COLUMN_ACK)) {\n+\t\t\t\t\te.set(EventData.COLUMN_ACK, Integer.parseInt(eventReader.getText()) == 1);\n+\t\t\t\t} else if (propName.equals(EventData.COLUMN_VALUE)) {\n+\t\t\t\t\te.set(EventData.COLUMN_VALUE, Integer.parseInt(eventReader.getText()));\n+\t\t\t\t} else {\n+\t\t\t\t\teventReader.nextProperty();\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\t// event is parsed and can be inserted into the db\n+\t\t\tif (numEvents == null) {\n+\t\t\t\te.insert(zabbixLocalDB, EventData.COLUMN_EVENTID);\n+\t\t\t} else {\n+\t\t\t\te.insert(zabbixLocalDB);\n+\t\t\t\tif (++i % 10 == 0) {\n+\t\t\t\t\tshowProgress(i*100/numEvents);\n+\t\t\t\t}\n+\t\t\t}\n+\n+\t\t\t_commitTransactionIfRecommended();\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * import graph items\n+\t *\n+\t * @param graphItems\n+\t * @return true, if graphid column has to be updated from -1 to the correct graphid later.\n+\t * @throws JsonParseException\n+\t * @throws NumberFormatException\n+\t * @throws IOException\n+\t */\n+\tprivate boolean importGraphItems(JsonArrayReader graphItems) throws JsonParseException, NumberFormatException, IOException {\n+\t\tboolean mustSetGraphid = false;\n+\t\tJsonObjectReader graphItemReader;\n+\t\twhile ((graphItemReader = graphItems.next()) != null) {\n+\t\t\tGraphItemData gi = new GraphItemData();\n+\t\t\twhile (graphItemReader.nextValueToken()) {\n+\t\t\t\tString propName = graphItemReader.getCurrentName();\n+\t\t\t\tif (propName.equals(\"gitemid\")) {\n+\t\t\t\t\tgi.set(GraphItemData.COLUMN_GRAPHITEMID, Long.parseLong(graphItemReader.getText()));\n+\t\t\t\t} else if (propName.equals(GraphItemData.COLUMN_GRAPHID)) {\n+\t\t\t\t\tgi.set(GraphItemData.COLUMN_GRAPHID, Long.parseLong(graphItemReader.getText()));\n+\t\t\t\t} else if (propName.equals(GraphItemData.COLUMN_ITEMID)) {\n+\t\t\t\t\tgi.set(GraphItemData.COLUMN_ITEMID, Long.parseLong(graphItemReader.getText()));\n+\t\t\t\t} else if (propName.equals(GraphItemData.COLUMN_COLOR)) {\n+\t\t\t\t\t// hex string => color int\n+\t\t\t\t\tgi.set(GraphItemData.COLUMN_COLOR, Color.parseColor(\"#\"+graphItemReader.getText()));\n+\t\t\t\t} else {\n+\t\t\t\t\tgraphItemReader.nextProperty();\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\t// if graphid-column was not set, this must be done later. temporary graphid=-1\n+\t\t\tif (gi.get(GraphItemData.COLUMN_GRAPHID) == null) {\n+\t\t\t\tgi.set(GraphItemData.COLUMN_GRAPHID, -1);\n+\t\t\t\tmustSetGraphid = true;\n+\t\t\t}\n+\t\t\tgi.insert(zabbixLocalDB);\n+\t\t}\n+\t\treturn mustSetGraphid;\n+\t}\n+\n+\tpublic void importGraphsForScreen(long screenid) throws ClientProtocolException, IOException, JSONException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n+\t\tif (!isCached(GraphData.TABLE_NAME, \"screenid=\"+screenid)) {\n+\t\t\t_startTransaction();\n+\n+\t\t\t// collect all graphids\n+\t\t\tSet<Long> graphids = new HashSet<Long>();\n+\t\t\tCursor cur = zabbixLocalDB.query(ScreenItemData.TABLE_NAME, null, ScreenItemData.COLUMN_SCREENID+\"=\"+screenid, null, null, null, null);\n+\t\t\twhile (cur.moveToNext()) {\n+\t\t\t\tgraphids.add(cur.getLong(cur.getColumnIndex(ScreenItemData.COLUMN_RESOURCEID)));\n+\t\t\t}\n+\n+\t\t\t// delete old graphs\n+\t\t\tString str_graphids = graphids.toString().replace(\"[\", \"\").replace(\"]\", \"\");\n+\t\t\tif (str_graphids.length()>0) {\n+\t\t\t\tzabbixLocalDB.delete(GraphData.TABLE_NAME, GraphData.COLUMN_GRAPHID+\" IN (\"+str_graphids+\")\", null);\n+\t\t\t\tzabbixLocalDB.delete(GraphItemData.TABLE_NAME, GraphItemData.COLUMN_GRAPHID+\" IN (\"+str_graphids+\")\", null);\n+\t\t\t}\n+\t\t\tzabbixLocalDB.delete(CacheData.TABLE_NAME, CacheData.COLUMN_KIND+\"='\"+GraphData.TABLE_NAME+\"' AND \"+CacheData.COLUMN_FILTER+\"='screenid=\"+screenid+'\\'', null);\n+\n+\t\t\tJsonArrayReader graphs = _queryStream(\n+\t\t\t\t\t\"graph.get\"\n+\t\t\t\t\t, new JSONObject()\n+\t\t\t\t\t\t.put(isVersion2?\"selectGraphItems\":\"select_graph_items\", \"extend\")\n+\t\t\t\t\t\t.put(isVersion2?\"selectItems\":\"select_items\", \"extend\")\n+\t\t\t\t\t\t.put(\"output\", \"extend\")\n+\t\t\t\t\t\t.put(\"graphids\", new JSONArray(graphids))\n+\t\t\t);\n+\t\t\tJsonObjectReader graphReader;\n+\t\t\twhile ((graphReader = graphs.next()) != null) {\n+\t\t\t\tboolean mustSetGraphid = false;\n+\t\t\t\tGraphData scr = new GraphData();\n+\t\t\t\twhile (graphReader.nextValueToken()) {\n+\t\t\t\t\tString propName = graphReader.getCurrentName();\n+\t\t\t\t\tif (propName.equals(GraphData.COLUMN_GRAPHID)) {\n+\t\t\t\t\t\tscr.set(GraphData.COLUMN_GRAPHID, Long.parseLong(graphReader.getText()));\n+\t\t\t\t\t} else if (propName.equals(GraphData.COLUMN_NAME)) {\n+\t\t\t\t\t\tscr.set(GraphData.COLUMN_NAME, graphReader.getText());\n+\t\t\t\t\t} else if (propName.equals(\"gitems\")) {\n+\t\t\t\t\t\tmustSetGraphid = importGraphItems(graphReader.getJsonArray());\n+\t\t\t\t\t} else if (propName.equals(\"items\")) {\n+\t\t\t\t\t\timportItems(graphReader.getJsonArray(), 0, true);\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tgraphReader.nextProperty();\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\tscr.insert(zabbixLocalDB);\n+\t\t\t\tif (mustSetGraphid) {\n+\t\t\t\t\tContentValues values = new ContentValues(1);\n+\t\t\t\t\tvalues.put(GraphItemData.COLUMN_GRAPHID, (Long) scr.get(GraphData.COLUMN_GRAPHID));\n+\t\t\t\t\tzabbixLocalDB.update(\n+\t\t\t\t\t\t\tGraphItemData.TABLE_NAME\n+\t\t\t\t\t\t\t, values\n+\t\t\t\t\t\t\t, GraphItemData.COLUMN_GRAPHID+\"=-1\"\n+\t\t\t\t\t\t\t, null);\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\tgraphs.close();\n+\n+\t\t\tsetCached(GraphData.TABLE_NAME, \"screenid=\"+screenid, ZabbixConfig.CACHE_LIFETIME_SCREENS);\n+\t\t\t_endTransaction();\n+\t\t}\n+\t}\n+\n+\tpublic void importHistoryDetails(String itemid) throws ClientProtocolException, IOException, JSONException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n+\t\tif (!isCached(HistoryDetailData.TABLE_NAME, itemid)) {\n+\t\t\t_startTransaction();\n+\t\t\tzabbixLocalDB.delete(HistoryDetailData.TABLE_NAME, HistoryDetailData.COLUMN_ITEMID+\"=\"+itemid, null);\n+\n+\t\t\t// the past 2 hours\n+\t\t\tlong time_till = new Date().getTime() / 1000;\n+\t\t\tlong time_from = time_till - ZabbixConfig.HISTORY_GET_TIME_FROM_SHIFT; // jetzt-2h\n+\n+\t\t\t// Workaround: historydetails only comes if you use the correct \"history\"-parameter.\n+\t\t\t// this parameter can be \"null\" or a number 0-4. Because we don't know when to use which,\n+\t\t\t// we try them all, until we get results.\n+\t\t\tInteger historytype = null;\n+\t\t\tJSONObject result = _queryBuffer(\n+\t\t\t\t\t\"history.get\"\n+\t\t\t\t\t, new JSONObject()\n+\t\t\t\t\t\t.put(\"limit\", 1)\n+\t\t\t\t\t\t.put(\"history\", historytype) // for integer ?\n+\t\t\t\t\t\t.put(\"itemids\", new JSONArray().put(itemid))\n+\t\t\t\t\t\t.put(\"time_from\", time_from)\n+\t\t\t);\n+\n+\t\t\tJSONArray testHistorydetails = result.getJSONArray(\"result\");\n+\t\t\tif (testHistorydetails.length() == 0) {\n+\t\t\t\thistorytype = -1;\n+\t\t\t\twhile (testHistorydetails.length() == 0 && ++historytype <= 4) {\n+\t\t\t\t\t// if we get an empty array, we try another history parameter\n+\t\t\t\t\tresult = _queryBuffer(\n+\t\t\t\t\t\t\t\"history.get\"\n+\t\t\t\t\t\t\t, new JSONObject()\n+\t\t\t\t\t\t\t\t.put(\"output\", \"extend\")\n+\t\t\t\t\t\t\t\t.put(\"limit\", 1)\n+\t\t\t\t\t\t\t\t.put(\"history\", historytype)\n+\t\t\t\t\t\t\t\t.put(\"itemids\", new JSONArray().put(itemid))\n+\t\t\t\t\t\t\t\t.put(\"time_from\", time_from)\n+\t\t\t\t\t);\n+\t\t\t\t\ttestHistorydetails = result.getJSONArray(\"result\");\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\t// correct historytype found and there are data\n+\t\t\tif (testHistorydetails.length() > 0) {\n+\t\t\t\t// count of the entries cannot be detected (zabbix bug),\n+\t\t\t\t// so we use a fiction\n+\t\t\t\tint numDetails = 400;\n+\t\t\t\tint curI=0;\n+\t\t\t\tJsonArrayReader historydetails = _queryStream(\n+\t\t\t\t\t\t\"history.get\"\n+\t\t\t\t\t\t, new JSONObject()\n+\t\t\t\t\t\t\t.put(\"output\", \"extend\")\n+\t\t\t\t\t\t\t.put(\"limit\", ZabbixConfig.HISTORY_GET_LIMIT)\n+\t\t\t\t\t\t\t.put(\"history\", historytype)\n+\t\t\t\t\t\t\t.put(\"itemids\", new JSONArray().put(itemid))\n+\t\t\t\t\t\t\t.put(\"time_from\", time_from)\n+\t\t\t\t\t\t\t.put(\"sortfield\", \"clock\")\n+\t\t\t\t\t\t\t.put(\"sortorder\", \"DESC\")\n+\t\t\t\t);\n+\t\t\t\tJsonObjectReader historydetail;\n+\t\t\t\ttry {\n+\t\t\t\t\tint selI = 0;\n+\t\t\t\t\twhile ((historydetail = historydetails.next()) != null) {\n+\t\t\t\t\t\t// save only every 20th\n+\t\t\t\t\t\tif (selI++ % 20 != 0) {\n+\t\t\t\t\t\t\twhile (historydetail.nextValueToken()) {\n+\t\t\t\t\t\t\t\thistorydetail.nextProperty();\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\tcontinue;\n+\t\t\t\t\t\t}\n+\n+\t\t\t\t\t\tHistoryDetailData h = new HistoryDetailData();\n+\t\t\t\t\t\twhile (historydetail.nextValueToken()) {\n+\t\t\t\t\t\t\tString propName = historydetail.getCurrentName();\n+\t\t\t\t\t\t\tif (propName.equals(HistoryDetailData.COLUMN_CLOCK)) {\n+\t\t\t\t\t\t\t\th.set(HistoryDetailData.COLUMN_CLOCK, Integer.parseInt(historydetail.getText()));\n+\t\t\t\t\t\t\t} else if (propName.equals(HistoryDetailData.COLUMN_ITEMID)) {\n+\t\t\t\t\t\t\t\th.set(HistoryDetailData.COLUMN_ITEMID, Long.parseLong(historydetail.getText()));\n+\t\t\t\t\t\t\t} else if (propName.equals(HistoryDetailData.COLUMN_VALUE)) {\n+\t\t\t\t\t\t\t\th.set(HistoryDetailData.COLUMN_VALUE, Double.parseDouble(historydetail.getText()));\n+\t\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\t\thistorydetail.nextProperty();\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\th.insert(zabbixLocalDB);\n+\t\t\t\t\t\tif (++curI % 10 == 0) {\n+\t\t\t\t\t\t\tshowProgress(Math.min(curI*100/numDetails, 84));\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\t_commitTransactionIfRecommended();\n+\t\t\t\t\t}\n+\t\t\t\t} catch (NumberFormatException e) {\n+\t\t\t\t\t// data are unuseable, e.g. because it's a string\n+\t\t\t\t}\n+\t\t\t\thistorydetails.close();\n+\t\t\t}\n+\t\t\tsetCached(HistoryDetailData.TABLE_NAME, itemid, ZabbixConfig.CACHE_LIFETIME_HISTORY_DETAILS);\n+\t\t\t_endTransaction();\n+\t\t}\n+\t}\n+\n+\tprivate long importHostGroups(JsonArrayReader jsonArray) throws JsonParseException, IOException {\n+\t\tlong firstHostGroupId = -1;\n+\t\tJsonObjectReader hostReader;\n+\t\twhile ((hostReader = jsonArray.next()) != null) {\n+\t\t\tHostGroupData h = new HostGroupData();\n+\t\t\twhile (hostReader.nextValueToken()) {\n+\t\t\t\tString propName = hostReader.getCurrentName();\n+\t\t\t\tif (propName.equals(HostGroupData.COLUMN_GROUPID)) {\n+\t\t\t\t\tlong id = Long.parseLong(hostReader.getText());\n+\t\t\t\t\tif (firstHostGroupId == -1) firstHostGroupId = id;\n+\t\t\t\t\th.set(HostGroupData.COLUMN_GROUPID, id);\n+\t\t\t\t} else if (propName.equals(HostGroupData.COLUMN_NAME)) {\n+\t\t\t\t\th.set(HostGroupData.COLUMN_NAME, hostReader.getText());\n+\t\t\t\t} else {\n+\t\t\t\t\thostReader.nextProperty();\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\th.insert(zabbixLocalDB, HostGroupData.COLUMN_GROUPID);\n+\t\t\t_commitTransactionIfRecommended();\n+\t\t}\n+\n+\t\treturn firstHostGroupId;\n+\t}\n+\n+\t/**\n+\t * import the hosts from stream\n+\t * @param jsonArray stream\n+\t * @param numHosts count of hosts for progressbar. null if unknown.\n+\t * @return Object[] {(String) comma-separated all Hostnames, (Long) 1. host id}\n+\t * @throws JsonParseException\n+\t * @throws IOException\n+\t */\n+\tprivate Object[] importHosts(JsonArrayReader jsonArray, Integer numHosts) throws JsonParseException, IOException {\n+\t\tList<String> hostnames = new ArrayList<String>();\n+\t\tlong firstHostId = -1;\n+\t\tJsonObjectReader hostReader;\n+\t\tint i=0;\n+\t\twhile ((hostReader = jsonArray.next()) != null) {\n+\t\t\tHostData h = new HostData();\n+\t\t\twhile (hostReader.nextValueToken()) {\n+\t\t\t\tString propName = hostReader.getCurrentName();\n+\t\t\t\tif (propName.equals(HostData.COLUMN_HOSTID)) {\n+\t\t\t\t\th.set(HostData.COLUMN_HOSTID, Long.parseLong(hostReader.getText()));\n+\t\t\t\t\tif (firstHostId == -1) {\n+\t\t\t\t\t\tfirstHostId = (Long) h.get(HostData.COLUMN_HOSTID);\n+\t\t\t\t\t}\n+\t\t\t\t} else if (propName.equals(HostData.COLUMN_HOST)) {\n+\t\t\t\t\tString host = hostReader.getText();\n+\t\t\t\t\thostnames.add(host);\n+\t\t\t\t\th.set(HostData.COLUMN_HOST, host);\n+\t\t\t\t} else if (propName.equals(\"groups\")) {\n+\t\t\t\t\tlong groupid = importHostGroups(hostReader.getJsonArray());\n+\t\t\t\t\tif (groupid != -1) {\n+\t\t\t\t\t\th.set(HostData.COLUMN_GROUPID, groupid);\n+\t\t\t\t\t}\n+\t\t\t\t} else {\n+\t\t\t\t\thostReader.nextProperty();\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\t// host without group will get group #0 (other)\n+\t\t\tif (h.get(HostData.COLUMN_GROUPID) == null) {\n+\t\t\t\th.set(HostData.COLUMN_GROUPID, 0);\n+\t\t\t\t// create \"other\" hostgroup #1\n+\t\t\t\tHostGroupData hg = new HostGroupData();\n+\t\t\t\thg.set(HostGroupData.COLUMN_GROUPID, 0);\n+\t\t\t\thg.set(HostGroupData.COLUMN_NAME, \"- \"+context.getResources().getString(R.string.other)+\" -\");\n+\t\t\t\thg.insert(zabbixLocalDB, HostGroupData.COLUMN_GROUPID);\n+\t\t\t}\n+\t\t\th.insert(zabbixLocalDB, HostData.COLUMN_HOSTID);\n+\t\t\tif (numHosts != null && ++i % 10 == 0) {\n+\t\t\t\tshowProgress(i*100/numHosts);\n+\t\t\t}\n+\t\t\t_commitTransactionIfRecommended();\n+\t\t}\n+\n+\t\treturn new Object[] {hostnames.toString().replaceAll(\"[\\\\[\\\\]]\", \"\"), firstHostId};\n+\t}\n+\n+\tpublic void importHostsAndGroups() throws JSONException, IOException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n+\t\tif (!isCached(HostData.TABLE_NAME, null)) {\n+\t\t\t_startTransaction();\n+\t\t\tzabbixLocalDB.delete(HostData.TABLE_NAME, null, null);\n+\t\t\tzabbixLocalDB.delete(HostGroupData.TABLE_NAME, null, null);\n+\n+\t\t\t// get count of hosts\n+\t\t\tJSONObject result = _queryBuffer(\n+\t\t\t\t\t\"host.get\"\n+\t\t\t\t\t, new JSONObject()\n+\t\t\t\t\t\t.put(\"countOutput\", 1)\n+\t\t\t\t\t\t.put(\"limit\", ZabbixConfig.HOST_GET_LIMIT)\n+\t\t\t\t\t\t.put(isVersion2?\"selectGroups\":\"select_groups\", \"extend\")\n+\t\t\t);\n+\t\t\tint numHosts = result.getInt(\"result\");\n+\t\t\tJsonArrayReader hosts = _queryStream(\n+\t\t\t\t\t\"host.get\"\n+\t\t\t\t\t, new JSONObject()\n+\t\t\t\t\t\t.put(\"output\", \"extend\")\n+\t\t\t\t\t\t.put(\"limit\", ZabbixConfig.HOST_GET_LIMIT)\n+\t\t\t\t\t\t.put(isVersion2?\"selectGroups\":\"select_groups\", \"extend\")\n+\t\t\t);\n+\t\t\timportHosts(hosts, numHosts);\n+\t\t\thosts.close();\n+\n+\t\t\tsetCached(HostData.TABLE_NAME, null, ZabbixConfig.CACHE_LIFETIME_HOSTS);\n+\t\t\t_endTransaction();\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * import items from stream.\n+\t * @param items stream\n+\t * @param numItems count for progressbar, if 0 no progressbarupdate\n+\t * @param checkBeforeInsert if true, only make an insert if item does not exist\n+\t * @return the first item id\n+\t * @throws JsonParseException\n+\t * @throws IOException\n+\t */\n+\tprivate long importItems(JsonArrayReader items, int numItems, boolean checkBeforeInsert) throws JsonParseException, IOException {\n+\t\tlong firstItemId = -1;\n+\t\tint curI=0;\n+\t\tJsonObjectReader itemReader;\n+\t\twhile ((itemReader = items.next()) != null) {\n+\t\t\tItemData i = new ItemData();\n+\t\t\tString key_ = null;\n+\t\t\twhile (itemReader.nextValueToken()) {\n+\t\t\t\tString propName = itemReader.getCurrentName();\n+\t\t\t\tif (propName.equals(ItemData.COLUMN_ITEMID)) {\n+\t\t\t\t\ti.set(ItemData.COLUMN_ITEMID, Long.parseLong(itemReader.getText()));\n+\t\t\t\t\tif (firstItemId == -1) {\n+\t\t\t\t\t\tfirstItemId = (Long) i.get(ItemData.COLUMN_ITEMID);\n+\t\t\t\t\t}\n+\t\t\t\t} else if (propName.equals(ItemData.COLUMN_HOSTID)) {\n+\t\t\t\t\ti.set(ItemData.COLUMN_HOSTID, Long.parseLong(itemReader.getText()));\n+\t\t\t\t} else if (propName.equals(ItemData.COLUMN_DESCRIPTION) || propName.equals(\"name\")) {\n+\t\t\t\t\t// since zabbix 2.x is the name of the item \"name\"\n+\t\t\t\t\t// before zabbix 2.x the name field was \"description\"\n+\t\t\t\t\tif (isVersion2 && propName.equals(\"name\")) {\n+\t\t\t\t\t\ti.set(ItemData.COLUMN_DESCRIPTION, itemReader.getText());\n+\t\t\t\t\t} else if (!isVersion2) {\n+\t\t\t\t\t\ti.set(ItemData.COLUMN_DESCRIPTION, itemReader.getText());\n+\t\t\t\t\t}\n+\t\t\t\t} else if (propName.equals(ItemData.COLUMN_LASTCLOCK)) {\n+\t\t\t\t\ttry {\n+\t\t\t\t\t\ti.set(ItemData.COLUMN_LASTCLOCK, Integer.parseInt(itemReader.getText()));\n+\t\t\t\t\t} catch (NumberFormatException e) {\n+\t\t\t\t\t\t// ignore\n+\t\t\t\t\t}\n+\t\t\t\t} else if (propName.equals(ItemData.COLUMN_LASTVALUE)) {\n+\t\t\t\t\ti.set(ItemData.COLUMN_LASTVALUE, itemReader.getText());\n+\t\t\t\t} else if (propName.equals(ItemData.COLUMN_UNITS)) {\n+\t\t\t\t\ti.set(ItemData.COLUMN_UNITS, itemReader.getText());\n+\t\t\t\t} else if (propName.equals(\"key_\")) {\n+\t\t\t\t\tkey_ = itemReader.getText();\n+\t\t\t\t} else if (propName.equals(\"applications\")) {\n+\t\t\t\t\t// at this point itemid and hostid is unknown\n+\t\t\t\t\t// because of this, all applicationrelations will be saved with itemid and hostid \"-1\".\n+\t\t\t\t\t// later the IDs will be replaced with the correct\n+\t\t\t\t\timportApplications(-1, -1, itemReader.getJsonArray());\n+\t\t\t\t} else {\n+\t\t\t\t\titemReader.nextProperty();\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\t// if applicable replace placeholder\n+\t\t\tString description = (String) i.get(ItemData.COLUMN_DESCRIPTION);\n+\t\t\tif (description.matches(\".*\\\\$[0-9].*\")) {\n+\t\t\t\tif (key_ != null && key_.indexOf('[') != -1) {\n+\t\t\t\t\tString[] keys = key_.substring(key_.indexOf('[')+1, key_.indexOf(']')).split(\",\");\n+\t\t\t\t\tfor (int ix=0; ix<keys.length; ix++) {\n+\t\t\t\t\t\tdescription = description.replace(\"$\"+(ix+1), keys[ix]);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\ti.set(ItemData.COLUMN_DESCRIPTION, description);\n+\t\t\tif (checkBeforeInsert) {\n+\t\t\t\ti.insert(zabbixLocalDB, ItemData.COLUMN_ITEMID);\n+\t\t\t} else {\n+\t\t\t\ti.insert(zabbixLocalDB);\n+\t\t\t}\n+\t\t\tif (numItems > 0 && ++curI % 10 == 0) {\n+\t\t\t\tshowProgress(curI*100/numItems);\n+\t\t\t}\n+\n+\t\t\t// now the \"-1\" IDs of applicationsrelation will be replaced with the correct itemID\n+\t\t\tContentValues values = new ContentValues(2);\n+\t\t\tvalues.put(ApplicationItemRelationData.COLUMN_ITEMID, (Long) i.get(ItemData.COLUMN_ITEMID));\n+\t\t\tvalues.put(ApplicationItemRelationData.COLUMN_HOSTID, (Long) i.get(ItemData.COLUMN_HOSTID));\n+\t\t\tzabbixLocalDB.update(\n+\t\t\t\t\tApplicationItemRelationData.TABLE_NAME\n+\t\t\t\t\t, values\n+\t\t\t\t\t, ApplicationItemRelationData.COLUMN_ITEMID+\"=-1\"\n+\t\t\t\t\t, null\n+\t\t\t);\n+\t\t}\n+\t\treturn firstItemId;\n+\t}\n+\n+\tpublic void importItems(long hostid) throws JSONException, IOException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n+\t\tif (!isCached(ItemData.TABLE_NAME, \"hostid=\"+hostid)) {\n+\t\t\t_startTransaction();\n+\t\t\tzabbixLocalDB.delete(ItemData.TABLE_NAME, ItemData.COLUMN_HOSTID+\"=\"+hostid, null);\n+\t\t\tzabbixLocalDB.delete(ApplicationItemRelationData.TABLE_NAME, ApplicationItemRelationData.COLUMN_HOSTID+\"=\"+hostid, null);\n+\n+\t\t\t// count of items\n+\t\t\tJSONObject result = _queryBuffer(\n+\t\t\t\t\t\"item.get\"\n+\t\t\t\t\t, new JSONObject()\n+\t\t\t\t\t.put(\"output\", \"extend\")\n+\t\t\t\t\t.put(\"countOutput\", 1)\n+\t\t\t\t\t.put(\"limit\", ZabbixConfig.ITEM_GET_LIMIT)\n+\t\t\t\t\t.put(\"hostids\", new JSONArray().put(hostid))\n+\t\t\t);\n+\t\t\tint numItems = result.getInt(\"result\");\n+\t\t\tJsonArrayReader items = _queryStream(\n+\t\t\t\t\t\"item.get\"\n+\t\t\t\t\t, new JSONObject()\n+\t\t\t\t\t\t.put(\"output\", \"extend\")\n+\t\t\t\t\t\t.put(\"limit\", ZabbixConfig.ITEM_GET_LIMIT)\n+\t\t\t\t\t\t.put(isVersion2?\"selectApplications\":\"select_applications\", \"extend\")\n+\t\t\t\t\t\t.put(\"hostids\", new JSONArray().put(hostid))\n+\t\t\t);\n+\t\t\timportItems(items, numItems, false);\n+\t\t\titems.close();\n+\n+\t\t\tsetCached(ItemData.TABLE_NAME, \"hostid=\"+hostid, ZabbixConfig.CACHE_LIFETIME_ITEMS);\n+\t\t\t_endTransaction();\n+\t\t}\n+\t}\n+\n+\tprivate void importScreenItems(JsonArrayReader screenItems) throws JsonParseException, NumberFormatException, IOException {\n+\t\tJsonObjectReader screenItemReader;\n+\t\twhile ((screenItemReader = screenItems.next()) != null) {\n+\t\t\tScreenItemData si = new ScreenItemData();\n+\t\t\tint resourcetype = -1;\n+\t\t\twhile (screenItemReader.nextValueToken()) {\n+\t\t\t\tString propName = screenItemReader.getCurrentName();\n+\t\t\t\tif (propName.equals(ScreenItemData.COLUMN_SCREENITEMID)) {\n+\t\t\t\t\tsi.set(ScreenItemData.COLUMN_SCREENITEMID, Long.parseLong(screenItemReader.getText()));\n+\t\t\t\t} else if (propName.equals(ScreenItemData.COLUMN_SCREENID)) {\n+\t\t\t\t\tsi.set(ScreenItemData.COLUMN_SCREENID, Long.parseLong(screenItemReader.getText()));\n+\t\t\t\t} else if (propName.equals(ScreenItemData.COLUMN_RESOURCEID)) {\n+\t\t\t\t\tsi.set(ScreenItemData.COLUMN_RESOURCEID, Long.parseLong(screenItemReader.getText()));\n+\t\t\t\t} else if (propName.equals(\"resourcetype\")) {\n+\t\t\t\t\tresourcetype = Integer.parseInt(screenItemReader.getText());\n+\t\t\t\t} else {\n+\t\t\t\t\tscreenItemReader.nextProperty();\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\t// only resouretype == 0\n+\t\t\tif (resourcetype == 0) {\n+\t\t\t\tsi.insert(zabbixLocalDB);\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\tpublic void importScreens() throws ClientProtocolException, IOException, JSONException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n+\t\tif (!isCached(ScreenData.TABLE_NAME, null)) {\n+\t\t\t_startTransaction();\n+\n+\t\t\tzabbixLocalDB.delete(ScreenData.TABLE_NAME, null, null);\n+\t\t\tzabbixLocalDB.delete(ScreenItemData.TABLE_NAME, null, null);\n+\t\t\tzabbixLocalDB.delete(CacheData.TABLE_NAME, CacheData.COLUMN_KIND+\"='\"+ScreenData.TABLE_NAME+\"'\", null);\n+\n+\t\t\tJsonArrayReader screens = _queryStream(\n+\t\t\t\t\t(isVersion2?\"s\":\"S\")+\"creen.get\"\n+\t\t\t\t\t, new JSONObject()\n+\t\t\t\t\t\t.put(\"output\", \"extend\")\n+\t\t\t\t\t\t.put(isVersion2?\"selectScreenItems\":\"select_screenitems\", \"extend\")\n+\t\t\t);\n+\t\t\tJsonObjectReader screenReader;\n+\t\t\twhile ((screenReader = screens.next()) != null) {\n+\t\t\t\tScreenData scr = new ScreenData();\n+\t\t\t\twhile (screenReader.nextValueToken()) {\n+\t\t\t\t\tString propName = screenReader.getCurrentName();\n+\t\t\t\t\tif (propName.equals(ScreenData.COLUMN_SCREENID)) {\n+\t\t\t\t\t\tscr.set(ScreenData.COLUMN_SCREENID, Long.parseLong(screenReader.getText()));\n+\t\t\t\t\t} else if (propName.equals(ScreenData.COLUMN_NAME)) {\n+\t\t\t\t\t\tscr.set(ScreenData.COLUMN_NAME, screenReader.getText());\n+\t\t\t\t\t} else if (propName.equals(\"screenitems\")) {\n+\t\t\t\t\t\timportScreenItems(screenReader.getJsonArray());\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tscreenReader.nextProperty();\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\tscr.insert(zabbixLocalDB);\n+\t\t\t}\n+\t\t\tscreens.close();\n+\n+\t\t\tsetCached(ScreenData.TABLE_NAME, null, ZabbixConfig.CACHE_LIFETIME_SCREENS);\n+\t\t\t_endTransaction();\n+\t\t}\n+\t}\n+\n+\tpublic void importTrigger(String triggerid) throws JSONException, IOException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n+\t\tif (!isCached(TriggerData.TABLE_NAME, \"triggerid=\"+triggerid)) {\n+\t\t\t_startTransaction();\n+\n+\t\t\tJsonArrayReader trigger = _queryStream(\n+\t\t\t\t\t\"trigger.get\"\n+\t\t\t\t\t, new JSONObject()\n+\t\t\t\t\t\t.put(\"output\", \"extend\")\n+\t\t\t\t\t\t.put(isVersion2?\"selectHosts\":\"select_hosts\", \"extend\")\n+\t\t\t\t\t\t.put(\"triggerids\", new JSONArray().put(triggerid))\n+\t\t\t);\n+\t\t\timportTriggers(trigger);\n+\t\t\ttrigger.close();\n+\n+\t\t\tsetCached(TriggerData.TABLE_NAME, \"triggerid=\"+triggerid, ZabbixConfig.CACHE_LIFETIME_TRIGGERS);\n+\t\t\t_endTransaction();\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * importiert ein trigger mit dem attribute itemid. ggf. wird der trigger zuerst gelöscht und neu angelegt.\n+\t * imports a trigger with the attribute itemid. if trigger already exists, it will be removed first.\n+\t * @param triggerid\n+\t * @throws JSONException\n+\t * @throws IOException\n+\t * @throws HttpAuthorizationRequiredException\n+\t * @throws NoAPIAccessException\n+\t */\n+\tpublic void importTriggerColumnItemId(String triggerid) throws JSONException, IOException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n+\t\t// check if the trigger exists and if the itemid was set\n+\t\tboolean mustImport = true;\n+\t\tCursor cur = zabbixLocalDB.query(TriggerData.TABLE_NAME, null, TriggerData.COLUMN_TRIGGERID+\"=\"+triggerid, null, null, null, null);\n+\t\tif (cur.moveToFirst()) {\n+\t\t\tlong itemid = 0;\n+\t\t\ttry {\n+\t\t\t\titemid = cur.getLong(cur.getColumnIndex(TriggerData.COLUMN_ITEMID));\n+\t\t\t} catch (Exception e) {\n+\t\t\t\t// no itemid\n+\t\t\t}\n+\t\t\tif (itemid > 0) {\n+\t\t\t\tmustImport = false;\n+\t\t\t}\n+\t\t}\n+\t\tif (mustImport) {\n+\t\t\t_startTransaction();\n+\t\t\tzabbixLocalDB.delete(TriggerData.TABLE_NAME, TriggerData.COLUMN_TRIGGERID+\"=\"+triggerid, null);\n+\t\t\tJsonArrayReader triggers = _queryStream(\n+\t\t\t\t\t\"trigger.get\"\n+\t\t\t\t\t, new JSONObject()\n+\t\t\t\t\t\t.put(\"output\", \"extend\")\n+\t\t\t\t\t\t.put(isVersion2?\"selectHosts\":\"select_hosts\", \"extend\")\n+\t\t\t\t\t\t.put(isVersion2?\"selectGroups\":\"select_groups\", \"extend\")\n+\t\t\t\t\t\t.put(isVersion2?\"selectItems\":\"select_items\", \"extend\")\n+\t\t\t\t\t\t.put(\"triggerids\", new JSONArray().put(triggerid))\n+\t\t\t\t\t\t.put(\"limit\", 1)\n+\t\t\t);\n+\t\t\timportTriggers(triggers);\n+\t\t\t_endTransaction();\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * imports the \"warning\"-triggers\n+\t * @throws JSONException\n+\t * @throws IOException\n+\t * @throws HttpAuthorizationRequiredException\n+\t * @throws NoAPIAccessException\n+\t */\n+\tpublic void importTriggers() throws JSONException, IOException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n+\t\tif (!isCached(TriggerData.TABLE_NAME, null)) {\n+\t\t\t_startTransaction();\n+\n+\t\t\tlong min = (new Date().getTime()/1000)-ZabbixConfig.STATUS_SHOW_TRIGGER_TIME;\n+\t\t\tJsonArrayReader triggers = _queryStream(\n+\t\t\t\t\t\"trigger.get\"\n+\t\t\t\t\t, new JSONObject()\n+\t\t\t\t\t\t.put(\"output\", \"extend\")\n+\t\t\t\t\t\t.put(\"sortfield\", \"lastchange\")\n+\t\t\t\t\t\t.put(\"sortorder\", \"desc\")\n+\t\t\t\t\t\t.put(isVersion2?\"selectHosts\":\"select_hosts\", \"extend\")\n+\t\t\t\t\t\t.put(isVersion2?\"selectGroups\":\"select_groups\", \"extend\")\n+\t\t\t\t\t\t.put(isVersion2?\"selectItems\":\"select_items\", \"extend\")\n+\t\t\t\t\t\t.put(\"lastChangeSince\", min)\n+\t\t\t\t\t\t.put(\"only_true\", \"1\")\n+\t\t\t\t\t\t.put(\"limit\", ZabbixConfig.TRIGGER_GET_LIMIT)\n+\t\t\t\t\t\t.put(\"expandDescription\", true)\n+\t\t\t);\n+\t\t\timportTriggers(triggers);\n+\t\t\ttriggers.close();\n+\n+\t\t\tsetCached(TriggerData.TABLE_NAME, null, ZabbixConfig.CACHE_LIFETIME_TRIGGERS);\n+\t\t\t_endTransaction();\n+\t\t}\n+\t}\n+\n+\tprivate void importTriggers(JsonArrayReader jsonArray) throws JsonParseException, IOException {\n+\t\tJsonObjectReader triggerReader;\n+\t\twhile ((triggerReader = jsonArray.next()) != null) {\n+\t\t\tTriggerData t = new TriggerData();\n+\t\t\twhile (triggerReader.nextValueToken()) {\n+\t\t\t\tString propName = triggerReader.getCurrentName();\n+\t\t\t\tif (propName.equals(TriggerData.COLUMN_TRIGGERID)) {\n+\t\t\t\t\tt.set(TriggerData.COLUMN_TRIGGERID, Long.parseLong(triggerReader.getText()));\n+\t\t\t\t} else if (propName.equals(TriggerData.COLUMN_COMMENTS)) {\n+\t\t\t\t\tt.set(TriggerData.COLUMN_COMMENTS, triggerReader.getText());\n+\t\t\t\t} else if (propName.equals(TriggerData.COLUMN_DESCRIPTION)) {\n+\t\t\t\t\tt.set(TriggerData.COLUMN_DESCRIPTION, triggerReader.getText());\n+\t\t\t\t} else if (propName.equals(TriggerData.COLUMN_EXPRESSION)) {\n+\t\t\t\t\tt.set(TriggerData.COLUMN_EXPRESSION, triggerReader.getText());\n+\t\t\t\t} else if (propName.equals(TriggerData.COLUMN_LASTCHANGE)) {\n+\t\t\t\t\tt.set(TriggerData.COLUMN_LASTCHANGE, Integer.parseInt(triggerReader.getText()));\n+\t\t\t\t} else if (propName.equals(TriggerData.COLUMN_PRIORITY)) {\n+\t\t\t\t\tt.set(TriggerData.COLUMN_PRIORITY, Integer.parseInt(triggerReader.getText()));\n+\t\t\t\t} else if (propName.equals(TriggerData.COLUMN_STATUS)) {\n+\t\t\t\t\tt.set(TriggerData.COLUMN_STATUS, Integer.parseInt(triggerReader.getText()));\n+\t\t\t\t} else if (propName.equals(TriggerData.COLUMN_VALUE)) {\n+\t\t\t\t\tt.set(TriggerData.COLUMN_VALUE, Integer.parseInt(triggerReader.getText()));\n+\t\t\t\t} else if (propName.equals(TriggerData.COLUMN_URL)) {\n+\t\t\t\t\tt.set(TriggerData.COLUMN_URL, triggerReader.getText());\n+\t\t\t\t} else if (propName.equals(\"hosts\")) {\n+\t\t\t\t\tObject[] hostsCache = importHosts(triggerReader.getJsonArray(), null);\n+\t\t\t\t\tt.set(TriggerData.COLUMN_HOSTS, hostsCache[0]);\n+\t\t\t\t\tt.set(TriggerData.COLUMN_HOSTID, hostsCache[1]);\n+\t\t\t\t} else if (propName.equals(\"groups\")) {\n+\t\t\t\t\timportHostGroups(triggerReader.getJsonArray());\n+\t\t\t\t} else if (propName.equals(\"items\")) {\n+\t\t\t\t\t// store the first item id\n+\t\t\t\t\tt.set(TriggerData.COLUMN_ITEMID, importItems(triggerReader.getJsonArray(), 1, true));\n+\t\t\t\t} else {\n+\t\t\t\t\ttriggerReader.nextProperty();\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\tt.insert(zabbixLocalDB, TriggerData.COLUMN_TRIGGERID);\n+\t\t\t_commitTransactionIfRecommended();\n+\t\t}\n+\t}\n+\n+\tpublic void importTriggersByItemId(String itemid) throws JSONException, IOException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n+\t\tif (!isCached(TriggerData.TABLE_NAME, \"itemid=\"+itemid)) {\n+\t\t\t_startTransaction();\n+\t\t\tzabbixLocalDB.delete(TriggerData.TABLE_NAME, TriggerData.COLUMN_ITEMID+\"=\"+itemid, null);\n+\t\t\tJsonArrayReader triggers = _queryStream(\n+\t\t\t\t\t\"trigger.get\"\n+\t\t\t\t\t, new JSONObject()\n+\t\t\t\t\t\t.put(\"output\", \"extend\")\n+\t\t\t\t\t\t.put(isVersion2?\"selectHosts\":\"select_hosts\", \"extend\")\n+\t\t\t\t\t\t.put(isVersion2?\"selectGroups\":\"select_groups\", \"extend\")\n+\t\t\t\t\t\t.put(isVersion2?\"selectItems\":\"select_items\", \"extend\")\n+\t\t\t\t\t\t.put(\"itemids\", new JSONArray().put(itemid))\n+\t\t\t\t\t\t.put(\"limit\", 1)\n+\t\t\t\t\t\t.put(\"sortfield\", \"lastchange\")\n+\t\t\t\t\t\t.put(\"sortorder\", \"DESC\")\n+\t\t\t);\n+\t\t\timportTriggers(triggers);\n+\t\t\tsetCached(TriggerData.TABLE_NAME, \"itemid=\"+itemid, ZabbixConfig.CACHE_LIFETIME_TRIGGERS);\n+\t\t\t_endTransaction();\n+\t\t}\n+\t}\n+\n+\tpublic boolean isCached(String kind, String filter) {\n+\t\tSQLiteQueryBuilder sqlBuilder = new SQLiteQueryBuilder();\n+\t\tsqlBuilder.setTables(CacheData.TABLE_NAME);\n+\t\tsqlBuilder.appendWhere(CacheData.COLUMN_KIND+\"='\"+kind+\"' AND \");\n+\t\tsqlBuilder.appendWhere(CacheData.COLUMN_FILTER+\n+\t\t\t\t(filter==null?\" IS NULL\":\"='\"+filter+\"'\")\n+\t\t);\n+\t\tsqlBuilder.appendWhere(\" AND \"+CacheData.COLUMN_EXPIRE_DATE+\">\"+new Date().getTime()/1000);\n+\t\tCursor cur = sqlBuilder.query(\n+\t\t\tzabbixLocalDB,\n+\t\t\tnull,\n+\t\t\tnull,\n+\t\t\tnull,\n+\t\t\tnull,\n+\t\t\tnull,\n+\t\t\tnull\n+\t\t);\n+\t\tLog.i(\"ZabbixContentProvider\", \"isCached \"+kind+\"//\"+filter+\"//\"+cur.moveToFirst());\n+\t\treturn cur.moveToFirst();\n+\t}\n+\n+\t/**\n+\t * public, for the unit test\n+\t */\n+\tpublic void setCached(String kind, String filter, int lifetime) {\n+\t\tCacheData cache = new CacheData();\n+\t\tcache.set(CacheData.COLUMN_EXPIRE_DATE, new Date().getTime()/1000 + lifetime);\n+\t\tcache.set(CacheData.COLUMN_KIND, kind);\n+\t\tif (filter != null) {\n+\t\t\tcache.set(CacheData.COLUMN_FILTER, filter);\n+\t\t}\n+\t\tcache.insert(zabbixLocalDB);\n+\t}\n+\n+\t/**\n+\t * updates the progressbar in the gui\n+\t * @param i 0..100\n+\t */\n+\tpublic void showProgress(int i) {\n+\t\t// if applicable, transform the progress\n+\t\tif (transformProgressStart != 0 && transformProgressEnd != 0) {\n+\t\t\ti = (int) (transformProgressStart + (transformProgressEnd-transformProgressStart)*(double)i/100);\n+\t\t}\n+\n+\t\tIntent intent = new Intent(ZabbixContentProvider.CONTENT_PROVIDER_INTENT_ACTION);\n+\t\tintent.putExtra(\"flag\", ZabbixContentProvider.INTENT_FLAG_SHOW_PROGRESS);\n+\t\tintent.putExtra(\"value\", i);\n+\t\tcontext.sendBroadcast(intent);\n+\t}\n+\n+\t/**\n+\t * transforms the progress\n+\t * @param start 0% => start%\n+\t * @param end 100% => end%\n+\t */\n+\tpublic void transformProgress(int start, int end) {\n+\t\ttransformProgressStart = start;\n+\t\ttransformProgressEnd = end;\n+\t}\n+}"],
      "repo_sni": "inovex/zax",
      "_version_": 1526823823532359680,
      "c_user_sni": "Jonas Gehring",
      "c_callsites_added_cs": "android.util.Log.d(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService.importItems(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader, int, boolean)#android.util.Log.d(java.lang.String, java.lang.String)#android.util.Log.d(java.lang.String, java.lang.String)#android.util.Log.i(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService.importTriggers(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader)#<unknown>.JsonArrayOrObjectReader(org.codehaus.jackson.JsonParser)#android.util.Log.d(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService.importTriggers(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader)#com.inovex.zabbixmobile.api.ZabbixService.importHosts(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader, int)#com.inovex.zabbixmobile.api.ZabbixService.importTriggers(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader)#android.util.Log.d(java.lang.String, java.lang.String)#android.util.Log.d(java.lang.String, java.lang.String)#org.codehaus.jackson.JsonParser.getCurrentToken()#org.codehaus.jackson.JsonParser.nextValue()#com.inovex.zabbixmobile.api.ZabbixService.importEvents(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader, null)#com.inovex.zabbixmobile.api.ZabbixService.importTriggers(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader)#android.util.Log.d(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService.importEvents(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader, int)",
      "p_user_sni": "Jonas Gehring",
      "c_subject_t": ["filter by severity, API can parse Object AND Array results"],
      "c_imports_added_cs": "<empty>",
      "c_callsites_removed_cs": "com.inovex.zabbixmobile.api.ZabbixService.importTriggers(com.inovex.zabbixmobile.api.JsonArrayReader)#<unknown>.JsonArrayReader(org.codehaus.jackson.JsonParser)#com.inovex.zabbixmobile.api.ZabbixService.importTriggers(com.inovex.zabbixmobile.api.JsonArrayReader)#com.inovex.zabbixmobile.api.ZabbixService.importEvents(com.inovex.zabbixmobile.api.JsonArrayReader, int)#com.inovex.zabbixmobile.api.ZabbixService.importTriggers(com.inovex.zabbixmobile.api.JsonArrayReader)#com.inovex.zabbixmobile.api.ZabbixService.importItems(com.inovex.zabbixmobile.api.JsonArrayReader, int, boolean)#com.inovex.zabbixmobile.api.ZabbixService.importHosts(com.inovex.zabbixmobile.api.JsonArrayReader, int)#com.inovex.zabbixmobile.api.ZabbixService.importTriggers(com.inovex.zabbixmobile.api.JsonArrayReader)#com.inovex.zabbixmobile.api.ZabbixService.importEvents(com.inovex.zabbixmobile.api.JsonArrayReader, null)"
    }, {
      "c_patch_no_context_t": ["-\t\t\t\t\tString hostnames = (String) importHosts(eventReader.getJsonArray(), null)[0];\n+\t\t\t\t\tString hostnames = (String) importHosts(eventReader.getJsonArrayOrObjectReader(), null)[0];\n-\t\t\t\t\timportTriggers(eventReader.getJsonArray());\n+\t\t\t\t\timportTriggers(eventReader.getJsonArrayOrObjectReader());\n-\t\t\t\t\t\tmustSetGraphid = importGraphItems(graphReader.getJsonArray());\n+\t\t\t\t\t\tmustSetGraphid = importGraphItems(graphReader.getJsonArrayOrObjectReader());\n-\t\t\t\t\t\timportItems(graphReader.getJsonArray(), 0, true);\n+\t\t\t\t\t\timportItems(graphReader.getJsonArrayOrObjectReader(), 0, true);\n-\t\t\t\t\tlong groupid = importHostGroups(hostReader.getJsonArray());\n+\t\t\t\t\tlong groupid = importHostGroups(hostReader.getJsonArrayOrObjectReader());\n-\t\t\t\t\timportApplications(-1, -1, itemReader.getJsonArray());\n+\t\t\t\t\timportApplications(-1, -1, itemReader.getJsonArrayOrObjectReader());\n-\t\t\t\t\t\timportScreenItems(screenReader.getJsonArray());\n+\t\t\t\t\t\timportScreenItems(screenReader.getJsonArrayOrObjectReader());\n-\t\t\t\t\tObject[] hostsCache = importHosts(triggerReader.getJsonArray(), null);\n+\t\t\t\t\tObject[] hostsCache = importHosts(triggerReader.getJsonArrayOrObjectReader(), null);\n-\t\t\t\t\timportHostGroups(triggerReader.getJsonArray());\n+\t\t\t\t\timportHostGroups(triggerReader.getJsonArrayOrObjectReader());\n-\t\t\t\t\tt.set(TriggerData.COLUMN_ITEMID, importItems(triggerReader.getJsonArray(), 1, true));\n+\t\t\t\t\tt.set(TriggerData.COLUMN_ITEMID, importItems(triggerReader.getJsonArrayOrObjectReader(), 1, true));"],
      "p_patch_no_context_t": ["-\t\tpublic static final int HISTORY_GET_TIME_FROM_SHIFT = 8*60*60; // -8h\n+\t\tpublic static final int HISTORY_GET_TIME_FROM_SHIFT = 24*60*60; // -24h\n+\t/**\n+\t * The API version. From 1.8.3 (maybe earlier) to 2.0 (excluded), this was 1.3. With 2.0, it changed to 1.4. \n+\t * Finally, since 2.0.4, the API version matches the program version.\n+\t */\n+\tprivate String apiVersion = \"\";\n-\t\t\tisVersion2 = result.getString(\"result\").equals(\"1.4\");\n-\t\t\tLog.i(\"ZabbixService\", \"Zabbix Server Version: isVersion2=\"+isVersion2);\n+\t\t\tapiVersion = result.getString(\"result\");\n+\t\t\tisVersion2 = (apiVersion.equals(\"1.4\") || apiVersion.startsWith(\"2\"));\n+\t\t\tLog.i(\"ZabbixService\", \"Zabbix API Version: \" + apiVersion);\n-\t\t\tlong time_from = time_till - ZabbixConfig.HISTORY_GET_TIME_FROM_SHIFT; // jetzt-2h\n+\t\t\tlong time_from = time_till - ZabbixConfig.HISTORY_GET_TIME_FROM_SHIFT;"],
      "c_date_tdt": "May 10, 2013 7:38:47 AM",
      "c_imports_t": ["android.database.sqlite.SQLiteQueryBuilder org.apache.http.conn.scheme.SchemeRegistry java.util.HashSet org.apache.http.params.BasicHttpParams android.content.Context org.apache.http.params.HttpParams org.apache.http.conn.scheme.PlainSocketFactory java.util.ArrayList com.inovex.zabbixmobile.model.ItemData com.inovex.zabbixmobile.model.HostData com.inovex.zabbixmobile.model.GraphData com.inovex.zabbixmobile.model.EventData org.apache.http.auth.UsernamePasswordCredentials org.apache.http.params.HttpConnectionParams android.content.SharedPreferences java.security.KeyManagementException org.apache.http.conn.ClientConnectionManager org.codehaus.jackson.JsonFactory org.apache.http.entity.StringEntity java.util.Set org.apache.http.params.HttpProtocolParams com.inovex.zabbixmobile.model.ApplicationItemRelationData com.inovex.zabbixmobile.model.TriggerData org.codehaus.jackson.JsonToken android.database.Cursor java.net.Socket android.content.Intent org.apache.http.protocol.HTTP org.json.JSONException java.net.UnknownHostException com.inovex.zabbixmobile.model.HistoryDetailData org.apache.http.HttpResponse java.security.KeyStore com.inovex.zabbixmobile.ZabbixContentProvider android.preference.PreferenceManager android.util.Log org.json.JSONObject java.security.NoSuchAlgorithmException org.apache.http.client.params.HttpClientParams java.io.IOException org.apache.http.conn.scheme.Scheme org.apache.http.client.methods.HttpPost javax.net.ssl.SSLContext org.apache.http.auth.AuthScope org.apache.http.conn.ssl.SSLSocketFactory java.security.KeyStoreException android.content.ContentValues java.io.InputStreamReader java.util.Date java.security.UnrecoverableKeyException android.graphics.Color org.apache.http.client.ClientProtocolException com.inovex.zabbixmobile.model.GraphItemData org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager org.json.JSONArray com.inovex.zabbixmobile.model.CacheData javax.net.ssl.SSLPeerUnverifiedException com.inovex.zabbixmobile.model.HostGroupData org.codehaus.jackson.JsonParseException java.security.cert.X509Certificate org.apache.http.HttpVersion android.database.sqlite.SQLiteDatabase java.util.List java.security.cert.CertificateException java.io.BufferedReader com.inovex.zabbixmobile.model.ApplicationData com.inovex.zabbixmobile.model.ScreenItemData javax.net.ssl.TrustManager com.inovex.zabbixmobile.model.ScreenData com.inovex.zabbixmobile.R org.codehaus.jackson.JsonParser org.apache.http.impl.client.DefaultHttpClient javax.net.ssl.X509TrustManager"],
      "c_contents_t": ["package com.inovex.zabbixmobile.api;\n\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.net.Socket;\nimport java.net.UnknownHostException;\nimport java.security.KeyManagementException;\nimport java.security.KeyStore;\nimport java.security.KeyStoreException;\nimport java.security.NoSuchAlgorithmException;\nimport java.security.UnrecoverableKeyException;\nimport java.security.cert.CertificateException;\nimport java.security.cert.X509Certificate;\nimport java.util.ArrayList;\nimport java.util.Date;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Set;\n\nimport javax.net.ssl.SSLContext;\nimport javax.net.ssl.SSLPeerUnverifiedException;\nimport javax.net.ssl.TrustManager;\nimport javax.net.ssl.X509TrustManager;\n\nimport org.apache.http.HttpResponse;\nimport org.apache.http.HttpVersion;\nimport org.apache.http.auth.AuthScope;\nimport org.apache.http.auth.UsernamePasswordCredentials;\nimport org.apache.http.client.ClientProtocolException;\nimport org.apache.http.client.methods.HttpPost;\nimport org.apache.http.client.params.HttpClientParams;\nimport org.apache.http.conn.ClientConnectionManager;\nimport org.apache.http.conn.scheme.PlainSocketFactory;\nimport org.apache.http.conn.scheme.Scheme;\nimport org.apache.http.conn.scheme.SchemeRegistry;\nimport org.apache.http.conn.ssl.SSLSocketFactory;\nimport org.apache.http.entity.StringEntity;\nimport org.apache.http.impl.client.DefaultHttpClient;\nimport org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager;\nimport org.apache.http.params.BasicHttpParams;\nimport org.apache.http.params.HttpConnectionParams;\nimport org.apache.http.params.HttpParams;\nimport org.apache.http.params.HttpProtocolParams;\nimport org.apache.http.protocol.HTTP;\nimport org.codehaus.jackson.JsonFactory;\nimport org.codehaus.jackson.JsonParseException;\nimport org.codehaus.jackson.JsonParser;\nimport org.codehaus.jackson.JsonToken;\nimport org.json.JSONArray;\nimport org.json.JSONException;\nimport org.json.JSONObject;\n\nimport android.content.ContentValues;\nimport android.content.Context;\nimport android.content.Intent;\nimport android.content.SharedPreferences;\nimport android.database.Cursor;\nimport android.database.sqlite.SQLiteDatabase;\nimport android.database.sqlite.SQLiteQueryBuilder;\nimport android.graphics.Color;\nimport android.preference.PreferenceManager;\nimport android.util.Log;\n\nimport com.inovex.zabbixmobile.R;\nimport com.inovex.zabbixmobile.ZabbixContentProvider;\nimport com.inovex.zabbixmobile.model.ApplicationData;\nimport com.inovex.zabbixmobile.model.ApplicationItemRelationData;\nimport com.inovex.zabbixmobile.model.CacheData;\nimport com.inovex.zabbixmobile.model.EventData;\nimport com.inovex.zabbixmobile.model.GraphData;\nimport com.inovex.zabbixmobile.model.GraphItemData;\nimport com.inovex.zabbixmobile.model.HistoryDetailData;\nimport com.inovex.zabbixmobile.model.HostData;\nimport com.inovex.zabbixmobile.model.HostGroupData;\nimport com.inovex.zabbixmobile.model.ItemData;\nimport com.inovex.zabbixmobile.model.ScreenData;\nimport com.inovex.zabbixmobile.model.ScreenItemData;\nimport com.inovex.zabbixmobile.model.TriggerData;\n\n/**\n * interface to connect to the zabbix server\n */\npublic class ZabbixService {\n\tclass CustomSSLSocketFactory extends SSLSocketFactory {\n\t\tSSLContext sslContext = SSLContext.getInstance(\"TLS\");\n\n\t\tpublic CustomSSLSocketFactory(KeyStore truststore) throws NoSuchAlgorithmException, KeyManagementException, KeyStoreException, UnrecoverableKeyException {\n\t\t\tsuper(truststore);\n\t\t\tTrustManager tm = new X509TrustManager() {\n\t\t\t\t@Override\n\t\t\t\tpublic void checkClientTrusted(X509Certificate[] chain,\n\t\t\t\t\t\tString authType) throws CertificateException {\n\t\t\t\t}\n\t\t\t\t@Override\n\t\t\t\tpublic void checkServerTrusted(X509Certificate[] chain,\n\t\t\t\t\t\tString authType) throws CertificateException {\n\t\t\t\t}\n\t\t\t\t@Override\n\t\t\t\tpublic X509Certificate[] getAcceptedIssuers() {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t};\n\t\t\tsslContext.init(null, new TrustManager[] { tm }, null);\n\t\t}\n\n\t\t@Override\n\t\tpublic Socket createSocket() throws IOException {\n\t\t\treturn sslContext.getSocketFactory().createSocket();\n\t\t}\n\n\t\t@Override\n\t\tpublic Socket createSocket(Socket socket, String host, int port, boolean autoClose) throws IOException, UnknownHostException {\n\t\t\treturn sslContext.getSocketFactory().createSocket(socket, host, port, autoClose);\n\t\t}\n\t}\n\n\t/**\n\t * http auth is needed\n\t */\n\tpublic class HttpAuthorizationRequiredException extends Exception {\n\t\tprivate static final long serialVersionUID = 6632422081858878147L;\n\t}\n\n\t/**\n\t * zabbix error: no api access\n\t */\n\tpublic class NoAPIAccessException extends Exception {\n\t\tprivate static final long serialVersionUID = 6381395987443456382L;\n\t}\n\n\t/**\n\t * probably too old zabbix <= 1.8.2\n\t */\n\tpublic class PreconditionFailedException extends Exception {\n\t\tprivate static final long serialVersionUID = -2529885710860745023L;\n\t}\n\n\t/**\n\t * global constants\n\t */\n\tpublic class ZabbixConfig {\n\t\tpublic static final int APPLICATION_GET_LIMIT = 1000;\n\t\tpublic static final int EVENTS_GET_LIMIT = 60;\n\t\tpublic static final int HISTORY_GET_TIME_FROM_SHIFT = 24*60*60; // -24h\n\t\tpublic static final int HISTORY_GET_LIMIT = 8000;\n\t\tpublic static final int HOSTGROUP_GET_LIMIT = 200;\n\t\tpublic static final int HOST_GET_LIMIT = 300;\n\t\tpublic static final int ITEM_GET_LIMIT = 200;\n\t\tpublic static final int TRIGGER_GET_LIMIT = 100;\n\t\tpublic static final int EVENT_GET_TIME_FROM_SHIFT = 7*24*60*60; // -7 days\n\t\tpublic static final int CACHE_LIFETIME_APPLICATIONS = 2*24*60*60; // 2 days\n\t\tpublic static final int CACHE_LIFETIME_EVENTS = 120;\n\t\tpublic static final int CACHE_LIFETIME_HISTORY_DETAILS = 4*60;\n\t\tpublic static final int CACHE_LIFETIME_HOST_GROUPS = 7*24*60*60;\n\t\tpublic static final int CACHE_LIFETIME_HOSTS = 2*24*60*60;\n\t\tpublic static final int CACHE_LIFETIME_SCREENS = 2*24*60*60;\n\t\tpublic static final int CACHE_LIFETIME_ITEMS = 4*60;\n\t\tpublic static final int CACHE_LIFETIME_TRIGGERS = 2*60;\n\t\tpublic static final long STATUS_SHOW_TRIGGER_TIME = 14*24*60*60;\n\t\tpublic static final int HTTP_CONNECTION_TIMEOUT = 30000;\n\t}\n\n\tprivate final DefaultHttpClient httpClient;\n\tprivate final SQLiteDatabase zabbixLocalDB;\n\tprivate String url;\n\tprivate String token;\n\tprivate final Context context;\n\tprivate int _transactionStack;\n\tprivate JsonParser lastStream;\n\tprivate int transformProgressStart;\n\tprivate int transformProgressEnd;\n\tprivate boolean _notAuthorizedRetry;\n\tprivate boolean isVersion2 = true;\n\t/**\n\t * The API version. From 1.8.3 (maybe earlier) to 2.0 (excluded), this was 1.3. With 2.0, it changed to 1.4. \n\t * Finally, since 2.0.4, the API version matches the program version.\n\t */\n\tprivate String apiVersion = \"\";\n\n\t/**\n\t * init\n\t * @param context android context\n\t * @param zabbixLocalDB sqlite\n\t */\n\tpublic ZabbixService(Context context, SQLiteDatabase zabbixLocalDB) {\n\t\tClientConnectionManager ccm = null;\n\t\tHttpParams params = null;\n\n\t\ttry {\n\t\t\tSharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(context);\n\t\t\tif (prefs.getBoolean(\"zabbix_trust_all_ssl_ca\", false)) {\n\t\t\t\tKeyStore trustStore = KeyStore.getInstance(KeyStore.getDefaultType());\n\t\t\t\ttrustStore.load(null, null);\n\n\t\t\t\tSSLSocketFactory sf = new CustomSSLSocketFactory(trustStore);\n\t\t\t\tsf.setHostnameVerifier(SSLSocketFactory.ALLOW_ALL_HOSTNAME_VERIFIER);\n\n\t\t\t\tparams = new BasicHttpParams();\n\t\t\t\tHttpProtocolParams.setVersion(params, HttpVersion.HTTP_1_1);\n\t\t\t\tHttpProtocolParams.setContentCharset(params, HTTP.UTF_8);\n\n\t\t\t\tSchemeRegistry registry = new SchemeRegistry();\n\t\t\t\tregistry.register(new Scheme(\"http\", PlainSocketFactory.getSocketFactory(), 80));\n\t\t\t\tregistry.register(new Scheme(\"https\", sf, 443));\n\n\t\t\t\tccm = new ThreadSafeClientConnManager(params, registry);\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\t// ignore for unit test\n\t\t}\n\n\t\tif (ccm == null || params == null) {\n\t\t\thttpClient = new DefaultHttpClient();\n\t\t} else {\n\t\t\thttpClient = new DefaultHttpClient(ccm, params);\n\t\t}\n\n\t\t// if applicable http auth\n\t\ttry {\n\t\t\tSharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(context);\n\t\t\tif (prefs.getBoolean(\"http_auth_enabled\", false)) {\n\t\t\t\tString user = prefs.getString(\"http_auth_username\", \"\");\n\t\t\t\tString pwd = prefs.getString(\"http_auth_password\", \"\");\n\t\t\t\thttpClient.getCredentialsProvider().setCredentials(AuthScope.ANY, new UsernamePasswordCredentials(user, pwd));\n\t\t\t}\n\t\t} catch (java.lang.UnsupportedOperationException e1) {\n\t\t\t// for unit test\n\t\t}\n\n\t\tparams = httpClient.getParams();\n\t\tHttpClientParams.setRedirecting(params, true); // redirecting\n\t\tHttpConnectionParams.setConnectionTimeout(params, ZabbixConfig.HTTP_CONNECTION_TIMEOUT);\n\t\tthis.context = context;\n\t\tthis.zabbixLocalDB = zabbixLocalDB;\n\t}\n\n\t/**\n\t * counts the sql inserts/updates and do a transaction commit to save the memory\n\t */\n\tprivate void _commitTransactionIfRecommended() {\n\t\tif (_transactionStack++ > 50) {\n\t\t\t_endTransaction();\n\t\t\t_startTransaction();\n\t\t}\n\t}\n\n\t/**\n\t * commit sql transaction\n\t */\n\tpublic void _endTransaction() {\n\t\tif (zabbixLocalDB.inTransaction()) {\n\t\t\tzabbixLocalDB.setTransactionSuccessful();\n\t\t\tzabbixLocalDB.endTransaction();\n\t\t}\n\t}\n\n\t/**\n\t * zabbix api call. data will be parsed as json object on-the-fly.\n\t * Caution: use this only for api calls with a small return data.\n\t * @param method\n\t * @param params\n\t * @return\n\t * @throws ClientProtocolException\n\t * @throws IOException\n\t * @throws JSONException\n\t * @throws HttpAuthorizationRequiredException\n\t * @throws NoAPIAccessException\n\t */\n\tprivate JSONObject _queryBuffer(String method, JSONObject params) throws ClientProtocolException, IOException, JSONException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\tHttpPost post = new HttpPost(url);\n\t\tpost.addHeader(\"Content-Type\", \"application/json; charset=utf-8\");\n\n\t\tString json =\n\t\t\t\"{\" +\n\t\t\t\"\t\\\"jsonrpc\\\" : \\\"2.0\\\",\" +\n\t\t\t\"\t\\\"method\\\" : \\\"\"+method+\"\\\",\" +\n\t\t\t\"\t\\\"params\\\" : \"+params.toString()+\",\" +\n\t\t\t\"\t\\\"auth\\\" : \"+(token==null?\"null\":'\"'+token+'\"')+\",\" +\n\t\t\t\"\t\\\"id\\\" : 0\" +\n\t\t\t\"}\";\n\n\t\tpost.setEntity(new StringEntity(json, \"UTF-8\"));\n\t\ttry {\n\t\t\tHttpResponse resp = httpClient.execute(post);\n\t\t\tif (resp.getStatusLine().getStatusCode() == 401) {\n\t\t\t\t// http auth failed\n\t\t\t\tthrow new HttpAuthorizationRequiredException();\n\t\t\t} else if (resp.getStatusLine().getStatusCode() == 412) {\n\t\t\t\t\t// Precondition failed / Looks like Zabbix 1.8.2\n\t\t\t\tthrow new PreconditionFailedException();\n\t\t\t} else if (resp.getStatusLine().getStatusCode() == 404) {\n\t\t\t\t// file not found\n\t\t\t\tthrow new IOException(resp.getStatusLine().getStatusCode()+\" \"+resp.getStatusLine().getReasonPhrase());\n\t\t\t} else {\n\t\t\t\tLog.d(\"ZabbixService\", resp.getStatusLine().getStatusCode()+\" \"+resp.getStatusLine().getReasonPhrase());\n\t\t\t}\n\t\t\tStringBuilder total = new StringBuilder();\n\t\t\tBufferedReader rd = new BufferedReader(new InputStreamReader(resp.getEntity().getContent()));\n\t\t\tint chr;\n\t\t\twhile ((chr = rd.read()) != -1) {\n\t\t\t\ttotal.append((char) chr);\n\t\t\t}\n\t\t\tJSONObject result = new JSONObject(total.toString());\n\t\t\ttry {\n\t\t\t\tif (result.getJSONObject(\"error\") != null) {\n\t\t\t\t\tif (result.getJSONObject(\"error\").getString(\"data\").equals(\"No API access\")) {\n\t\t\t\t\t\tthrow new NoAPIAccessException();\n\t\t\t\t\t} else throw new RuntimeException(result.getJSONObject(\"error\").toString());\n\t\t\t\t}\n\t\t\t\tif (result.getString(\"data\").equals(\"Not authorized\")) {\n\t\t\t\t\t// first do a new auth and then try the same api call again\n\t\t\t\t\tif (authenticate() && !_notAuthorizedRetry) {\n\t\t\t\t\t\t_notAuthorizedRetry = true;\n\t\t\t\t\t\tJSONObject r = _queryBuffer(method, params);\n\t\t\t\t\t\t_notAuthorizedRetry = false;\n\t\t\t\t\t\treturn r;\n\t\t\t\t\t} throw new IllegalStateException(result.toString());\n\t\t\t\t}\n\t\t\t} catch (JSONException e) {\n\t\t\t\t// ignore\n\t\t\t}\n\t\t\treturn result;\n\t\t} catch (SSLPeerUnverifiedException e) {\n\t\t\t// SSL not trusted\n\t\t\tIntent intent = new Intent(ZabbixContentProvider.CONTENT_PROVIDER_INTENT_ACTION);\n\t\t\tintent.putExtra(\"flag\", ZabbixContentProvider.INTENT_FLAG_SSL_NOT_TRUSTED);\n\t\t\tcontext.sendBroadcast(intent);\n\t\t\tthrow e;\n\t\t} catch (IOException e) {\n\t\t\t// internet problem\n\t\t\t// send intent to GUI\n\t\t\tIntent intent = new Intent(ZabbixContentProvider.CONTENT_PROVIDER_INTENT_ACTION);\n\t\t\tintent.putExtra(\"flag\", ZabbixContentProvider.INTENT_FLAG_CONNECTION_FAILED);\n\t\t\tintent.putExtra(\"value\", e.getMessage());\n\t\t\tcontext.sendBroadcast(intent);\n\t\t\tthrow e;\n\t\t}\n\t}\n\n\t/**\n\t * zabbix api call as stream.\n\t * @param method\n\t * @param params\n\t * @return stream im json array wrapper\n\t * @throws JSONException\n\t * @throws IOException\n\t * @throws HttpAuthorizationRequiredException\n\t * @throws NoAPIAccessException\n\t */\n\tprivate JsonArrayOrObjectReader _queryStream(String method, JSONObject params) throws JSONException, IOException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\t// http request\n\t\tHttpPost post = new HttpPost(url);\n\t\tpost.addHeader(\"Content-Type\", \"application/json; charset=utf-8\");\n\n\t\tJSONObject json = new JSONObject()\n\t\t\t.put(\"jsonrpc\", \"2.0\")\n\t\t\t.put(\"method\", method)\n\t\t\t.put(\"params\", params)\n\t\t\t.put(\"auth\", token)\n\t\t\t.put(\"id\", 0);\n\n\t\tLog.d(\"ZabbixService\", \"_queryStream: \"+url);\n\t\tLog.d(\"ZabbixService\", \"_queryStream: \"+json.toString());\n\n\t\tpost.setEntity(new StringEntity(json.toString(), \"UTF-8\"));\n\t\ttry {\n\t\t\tHttpResponse resp = httpClient.execute(post);\n\t\t\tif (resp.getStatusLine().getStatusCode() == 401) {\n\t\t\t\t// http auth failed\n\t\t\t\tthrow new HttpAuthorizationRequiredException();\n\t\t\t}\n\n\t\t\tJsonFactory jsonFac = new JsonFactory();\n\t\t\tJsonParser jp = jsonFac.createJsonParser(resp.getEntity().getContent());\n\t\t\t// store the last stream to close it if an exception will be thrown\n\t\t\tlastStream = jp;\n\t\t\tif (jp.nextToken() != JsonToken.START_OBJECT) {\n\t\t\t\tthrow new IOException(\"Expected data to start with an Object\");\n\t\t\t}\n\t\t\tdo {\n\t\t\t\tjp.nextToken();\n\t\t\t\tif (jp.getCurrentName().equals(\"error\")) {\n\t\t\t\t\tjp.nextToken();\n\t\t\t\t\tString errortxt = \"\";\n\t\t\t\t\twhile (jp.nextToken() != JsonToken.END_OBJECT) {\n\t\t\t\t\t\terrortxt += jp.getText();\n\t\t\t\t\t}\n\t\t\t\t\tif (errortxt.contains(\"No API access\")) {\n\t\t\t\t\t\tthrow new NoAPIAccessException();\n\t\t\t\t\t} else if (errortxt.contains(\"Not authorized\")) {\n\t\t\t\t\t\t// first do a new auth and then try the same api call again\n\t\t\t\t\t\tif (authenticate() && !_notAuthorizedRetry) {\n\t\t\t\t\t\t\t_notAuthorizedRetry = true;\n\t\t\t\t\t\t\tJsonArrayOrObjectReader r = _queryStream(method, params);\n\t\t\t\t\t\t\t_notAuthorizedRetry = false;\n\t\t\t\t\t\t\treturn r;\n\t\t\t\t\t\t} else throw new IllegalStateException(errortxt);\n\t\t\t\t\t} else throw new IllegalStateException(\"JSON API Error: \"+errortxt);\n\t\t\t\t}\n\t\t\t} while (!jp.getCurrentName().equals(\"result\"));\n\n\t\t\t// result array found\n\t\t\tif (jp.nextToken() != JsonToken.START_ARRAY && jp.getCurrentToken() != JsonToken.START_OBJECT) { // go inside the array\n\t\t\t\ttry {\n\t\t\t\t\tLog.d(\"ZabbixService\", \"current token: \"+jp.getCurrentToken());\n\t\t\t\t\tLog.d(\"ZabbixService\", \"current name: \"+jp.getCurrentName());\n\t\t\t\t\tLog.d(\"ZabbixService\", \"get text: \"+jp.getText());\n\t\t\t\t\tLog.d(\"ZabbixService\", \"next value: \"+jp.nextValue());\n\t\t\t\t\tLog.d(\"ZabbixService\", \"next token: \"+jp.nextToken());\n\t\t\t\t\tLog.d(\"ZabbixService\", \"current token: \"+jp.getCurrentToken());\n\t\t\t\t\tLog.d(\"ZabbixService\", \"current name: \"+jp.getCurrentName());\n\t\t\t\t\tLog.d(\"ZabbixService\", \"get text: \"+jp.getText());\n\t\t\t\t} catch (Exception e) {}\n\t\t\t\tthrow new IOException(\"Expected data to start with an Array\");\n\t\t\t}\n\t\t\treturn new JsonArrayOrObjectReader(jp);\n\t\t} catch (SSLPeerUnverifiedException e) {\n\t\t\tthrow e;\n\t\t} catch (IOException e) {\n\t\t\t// internet problem\n\t\t\t// send intent to GUI\n\t\t\tIntent intent = new Intent(ZabbixContentProvider.CONTENT_PROVIDER_INTENT_ACTION);\n\t\t\tintent.putExtra(\"flag\", ZabbixContentProvider.INTENT_FLAG_CONNECTION_FAILED);\n\t\t\tcontext.sendBroadcast(intent);\n\t\t\tthrow e;\n\t\t}\n\t}\n\n\t/**\n\t * begin sql transaction\n\t */\n\tprivate void _startTransaction() {\n\t\tzabbixLocalDB.beginTransaction();\n\t\t_transactionStack = 0;\n\t}\n\n\t/**\n\t * acknowledge zabbix event. Sets ack-flag with comment.\n\t * Caution: This is supported only for Zabbix version >= 1.8.4\n\t * @param eventid\n\t * @param comment\n\t * @return true, success.\n\t * @throws ClientProtocolException\n\t * @throws IOException\n\t * @throws JSONException\n\t * @throws HttpAuthorizationRequiredException\n\t * @throws NoAPIAccessException\n\t */\n\tpublic boolean acknowledgeEvent(String eventid, String comment) throws ClientProtocolException, IOException, JSONException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\t// for GUI unit test, just return true\n\t\tif (comment != null && comment.equals(\"__UNIT_TEST__RETURN_TRUE__\")) return true;\n\n\t\tJSONObject result = _queryBuffer(\n\t\t\t\t\"event.acknowledge\"\n\t\t\t\t, new JSONObject()\n\t\t\t\t\t.put(\"eventids\", new JSONArray().put(eventid))\n\t\t);\n\t\t// it can be an (empty) array\n\t\ttry {\n\t\t\treturn result.getJSONObject(\"result\").getJSONArray(\"eventids\").length() == 1;\n\t\t} catch (JSONException e) {\n\t\t\t// or a json object\n\t\t\treturn result.getJSONObject(\"result\").getJSONObject(\"eventids\").length() == 1;\n\t\t}\n\t}\n\n\t/**\n\t * zabbix auth. user and pwd from app preferences\n\t * @return true success\n\t * @throws ClientProtocolException\n\t * @throws IOException\n\t * @throws JSONException\n\t * @throws HttpAuthorizationRequiredException\n\t * @throws NoAPIAccessException\n\t */\n\tpublic boolean authenticate() throws ClientProtocolException, IOException, JSONException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\tSharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(context);\n\t\tString url = prefs.getString(\"zabbix_url\", \"\").trim();\n\t\tString user = prefs.getString(\"zabbix_username\", \"\").trim();\n\t\tString password = prefs.getString(\"zabbix_password\", \"\");\n\n\t\tthis.url = url+(url.endsWith(\"/\")?\"\":'/')+\"api_jsonrpc.php\";\n\t\tLog.d(\"ZabbixContentProvider\", url+\"//\"+user);\n\n\t\ttry {\n\t\t\tJSONObject result = _queryBuffer(\n\t\t\t\t\t\"user.authenticate\"\n\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t\t.put(\"user\", user)\n\t\t\t\t\t\t.put(\"password\", password)\n\t\t\t);\n\t\t\ttoken = result.getString(\"result\");\n\t\t} catch (JSONException e) {\n\t\t\t// there's no result\n\t\t\te.printStackTrace();\n\t\t} catch (RuntimeException e) {\n\t\t\t// wrong password. token remains null\n\t\t\te.printStackTrace();\n\t\t}\n\t\tif (token != null) {\n\t\t\t// get API version\n\t\t\tJSONObject result = _queryBuffer(\n\t\t\t\t\t\"apiinfo.version\"\n\t\t\t\t\t, new JSONObject()\n\t\t\t);\n\t\t\tapiVersion = result.getString(\"result\");\n\t\t\tisVersion2 = (apiVersion.equals(\"1.4\") || apiVersion.startsWith(\"2\"));\n\t\t\tLog.i(\"ZabbixService\", \"Zabbix API Version: \" + apiVersion);\n\t\t}\n\t\treturn token != null;\n\t}\n\n\t/**\n\t * close the last http stream\n\t */\n\tpublic void closeLastStream() {\n\t\tif (lastStream != null && !lastStream.isClosed()) {\n\t\t\ttry {\n\t\t\t\tlastStream.close();\n\t\t\t} catch (IOException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate void importApplications(long hostid, long itemid, JsonArrayOrObjectReader jsonArray) throws JsonParseException, NumberFormatException, IOException {\n\t\tint num = 0;\n\t\tJsonObjectReader application;\n\t\twhile ((application = jsonArray.next()) != null) {\n\t\t\tApplicationData app = new ApplicationData();\n\t\t\twhile (application.nextValueToken()) {\n\t\t\t\tString propName = application.getCurrentName();\n\t\t\t\tif (propName.equals(ApplicationData.COLUMN_APPLICATIONID)) {\n\t\t\t\t\tapp.set(ApplicationData.COLUMN_APPLICATIONID, Long.parseLong(application.getText()));\n\t\t\t\t} else if (propName.equals(ApplicationData.COLUMN_NAME)) {\n\t\t\t\t\tapp.set(ApplicationData.COLUMN_NAME, application.getText());\n\t\t\t\t} else if (propName.equals(ApplicationData.COLUMN_HOSTID)) {\n\t\t\t\t\tapp.set(ApplicationData.COLUMN_HOSTID, Long.parseLong(application.getText()));\n\t\t\t\t} else {\n\t\t\t\t\tapplication.nextProperty();\n\t\t\t\t}\n\t\t\t}\n\t\t\t// create applications that does not exist\n\t\t\tapp.insert(zabbixLocalDB, ApplicationData.COLUMN_APPLICATIONID);\n\t\t\t_commitTransactionIfRecommended();\n\n\t\t\t// create ApplicationItemRelation\n\t\t\tlong appid = (Long) app.get(ApplicationData.COLUMN_APPLICATIONID);\n\t\t\tApplicationItemRelationData rel = new ApplicationItemRelationData();\n\t\t\trel.set(ApplicationItemRelationData.COLUMN_APPLICATIONID, appid);\n\t\t\trel.set(ApplicationItemRelationData.COLUMN_ITEMID, itemid);\n\t\t\trel.set(ApplicationItemRelationData.COLUMN_HOSTID, hostid);\n\t\t\trel.insert(zabbixLocalDB);\n\t\t\t_commitTransactionIfRecommended();\n\n\t\t\tnum++;\n\t\t}\n\t\tif (num == 0) {\n\t\t\t// if there's no application, the ID #0 must be added (for other)\n\t\t\tApplicationItemRelationData rel = new ApplicationItemRelationData();\n\t\t\trel.set(ApplicationItemRelationData.COLUMN_APPLICATIONID, 0);\n\t\t\trel.set(ApplicationItemRelationData.COLUMN_ITEMID, itemid);\n\t\t\trel.set(ApplicationItemRelationData.COLUMN_HOSTID, hostid);\n\t\t\trel.insert(zabbixLocalDB);\n\n\t\t\t// if #0 \"other\" does not exist yet, it has to be created\n\t\t\tApplicationData app = new ApplicationData();\n\t\t\tapp.set(ApplicationData.COLUMN_APPLICATIONID, 0);\n\t\t\tapp.set(ApplicationData.COLUMN_NAME, \"- \"+context.getResources().getString(R.string.other)+\" -\");\n\t\t\tapp.insert(zabbixLocalDB, ApplicationData.COLUMN_APPLICATIONID);\n\t\t}\n\t}\n\n\t/**\n\t * import the newest event of a trigger\n\t * @param triggerid\n\t * @throws JSONException\n\t * @throws IOException\n\t * @throws HttpAuthorizationRequiredException\n\t * @throws NoAPIAccessException\n\t */\n\tpublic void importEventByTriggerId(String triggerid) throws JSONException, IOException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\tif (!isCached(EventData.TABLE_NAME, \"triggerid=\"+triggerid)) {\n\t\t\t_startTransaction();\n\t\t\tzabbixLocalDB.delete(EventData.TABLE_NAME, EventData.COLUMN_OBJECTID+\"=\"+triggerid, null);\n\n\t\t\tJSONObject params = new JSONObject()\n\t\t\t\t.put(\"output\", \"extend\")\n\t\t\t\t.put(isVersion2?\"selectHosts\":\"select_hosts\", \"extend\")\n\t\t\t\t.put(\"triggerids\", new JSONArray().put(triggerid))\n\t\t\t\t.put(\"limit\", 1)\n\t\t\t\t.put(\"source\", 0);\n\t\t\tif (!isVersion2) {\n\t\t\t\tparams.put(\"sortfield\", \"clock\")\n\t\t\t\t\t.put(\"sortorder\", \"DESC\");\n\t\t\t}\n\n\t\t\tJsonArrayOrObjectReader events = _queryStream(\n\t\t\t\t\t\"event.get\"\n\t\t\t\t\t, params\n\t\t\t);\n\t\t\timportEvents(events, null);\n\t\t\tevents.close();\n\n\t\t\tsetCached(EventData.TABLE_NAME, \"triggerid=\"+triggerid, ZabbixConfig.CACHE_LIFETIME_EVENTS);\n\t\t\t_endTransaction();\n\t\t}\n\t}\n\n\t/**\n\t * import the newest events\n\t * @throws ClientProtocolException\n\t * @throws IOException\n\t * @throws JSONException\n\t * @throws HttpAuthorizationRequiredException\n\t * @throws NoAPIAccessException\n\t */\n\tpublic void importEvents() throws ClientProtocolException, IOException, JSONException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\tif (!isCached(EventData.TABLE_NAME, null)) {\n\t\t\t_startTransaction();\n\t\t\tzabbixLocalDB.delete(EventData.TABLE_NAME, null, null);\n\t\t\tzabbixLocalDB.delete(TriggerData.TABLE_NAME, null, null);\n\t\t\tzabbixLocalDB.delete(CacheData.TABLE_NAME, CacheData.COLUMN_KIND+\"='\"+EventData.TABLE_NAME+\"'\", null);\n\t\t\tzabbixLocalDB.delete(CacheData.TABLE_NAME, CacheData.COLUMN_KIND+\"='\"+TriggerData.TABLE_NAME+\"'\", null);\n\n\t\t\tint numEvents = ZabbixConfig.EVENTS_GET_LIMIT;\n\n\t\t\tJSONObject params = new JSONObject()\n\t\t\t\t.put(\"output\", \"extend\")\n\t\t\t\t.put(\"limit\", ZabbixConfig.EVENTS_GET_LIMIT)\n\t\t\t\t.put(isVersion2?\"selectHosts\":\"select_hosts\", \"extend\")\n\t\t\t\t.put(isVersion2?\"selectTriggers\":\"select_triggers\", \"extend\")\n\t\t\t\t.put(\"source\", 0)\n\t\t\t\t.put(\"time_from\", (new Date().getTime()/1000) - ZabbixConfig.EVENT_GET_TIME_FROM_SHIFT);\n\t\t\tif (!isVersion2) {\n\t\t\t\t// in Zabbix version <2.0, this is not default\n\t\t\t\tparams.put(\"sortfield\", \"clock\")\n\t\t\t\t\t.put(\"sortorder\", \"DESC\");\n\t\t\t}\n\t\t\tJsonArrayOrObjectReader events = _queryStream(\n\t\t\t\t\t\"event.get\"\n\t\t\t\t\t, params\n\t\t\t);\n\t\t\timportEvents(events, numEvents);\n\t\t\tevents.close();\n\n\t\t\tsetCached(EventData.TABLE_NAME, null, ZabbixConfig.CACHE_LIFETIME_EVENTS);\n\t\t\t_endTransaction();\n\t\t}\n\t}\n\n\t/**\n\t * @param events stream\n\t * @param numEvents if null, no progressbar-update AND only isert, if it does not exist. If !null, progressbar-update AND always insert without checking\n\t * @throws JsonParseException\n\t * @throws IOException\n\t */\n\tprivate void importEvents(JsonArrayOrObjectReader events, Integer numEvents) throws JsonParseException, IOException {\n\t\tint i=0;\n\t\tJsonObjectReader eventReader;\n\t\twhile ((eventReader = events.next()) != null) {\n\t\t\tEventData e = new EventData();\n\t\t\twhile (eventReader.nextValueToken()) {\n\t\t\t\tString propName = eventReader.getCurrentName();\n\t\t\t\tif (propName.equals(\"hosts\")) {\n\t\t\t\t\t// import hosts\n\t\t\t\t\tString hostnames = (String) importHosts(eventReader.getJsonArrayOrObjectReader(), null)[0];\n\t\t\t\t\t// store hosts namen\n\t\t\t\t\te.set(EventData.COLUMN_HOSTS, hostnames);\n\t\t\t\t} else if (propName.equals(\"triggers\")) {\n\t\t\t\t\t// import triggers\n\t\t\t\t\timportTriggers(eventReader.getJsonArrayOrObjectReader());\n\t\t\t\t} else if (propName.equals(EventData.COLUMN_EVENTID)) {\n\t\t\t\t\te.set(EventData.COLUMN_EVENTID, Long.parseLong(eventReader.getText()));\n\t\t\t\t} else if (propName.equals(EventData.COLUMN_CLOCK)) {\n\t\t\t\t\te.set(EventData.COLUMN_CLOCK, Integer.parseInt(eventReader.getText()));\n\t\t\t\t} else if (propName.equals(EventData.COLUMN_OBJECTID)) {\n\t\t\t\t\te.set(EventData.COLUMN_OBJECTID, Long.parseLong(eventReader.getText()));\n\t\t\t\t} else if (propName.equals(EventData.COLUMN_ACK)) {\n\t\t\t\t\te.set(EventData.COLUMN_ACK, Integer.parseInt(eventReader.getText()) == 1);\n\t\t\t\t} else if (propName.equals(EventData.COLUMN_VALUE)) {\n\t\t\t\t\te.set(EventData.COLUMN_VALUE, Integer.parseInt(eventReader.getText()));\n\t\t\t\t} else {\n\t\t\t\t\teventReader.nextProperty();\n\t\t\t\t}\n\t\t\t}\n\t\t\t// event is parsed and can be inserted into the db\n\t\t\tif (numEvents == null) {\n\t\t\t\te.insert(zabbixLocalDB, EventData.COLUMN_EVENTID);\n\t\t\t} else {\n\t\t\t\te.insert(zabbixLocalDB);\n\t\t\t\tif (++i % 10 == 0) {\n\t\t\t\t\tshowProgress(i*100/numEvents);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t_commitTransactionIfRecommended();\n\t\t}\n\t}\n\n\t/**\n\t * import graph items\n\t *\n\t * @param graphItems\n\t * @return true, if graphid column has to be updated from -1 to the correct graphid later.\n\t * @throws JsonParseException\n\t * @throws NumberFormatException\n\t * @throws IOException\n\t */\n\tprivate boolean importGraphItems(JsonArrayOrObjectReader graphItems) throws JsonParseException, NumberFormatException, IOException {\n\t\tboolean mustSetGraphid = false;\n\t\tJsonObjectReader graphItemReader;\n\t\twhile ((graphItemReader = graphItems.next()) != null) {\n\t\t\tGraphItemData gi = new GraphItemData();\n\t\t\twhile (graphItemReader.nextValueToken()) {\n\t\t\t\tString propName = graphItemReader.getCurrentName();\n\t\t\t\tif (propName.equals(\"gitemid\")) {\n\t\t\t\t\tgi.set(GraphItemData.COLUMN_GRAPHITEMID, Long.parseLong(graphItemReader.getText()));\n\t\t\t\t} else if (propName.equals(GraphItemData.COLUMN_GRAPHID)) {\n\t\t\t\t\tgi.set(GraphItemData.COLUMN_GRAPHID, Long.parseLong(graphItemReader.getText()));\n\t\t\t\t} else if (propName.equals(GraphItemData.COLUMN_ITEMID)) {\n\t\t\t\t\tgi.set(GraphItemData.COLUMN_ITEMID, Long.parseLong(graphItemReader.getText()));\n\t\t\t\t} else if (propName.equals(GraphItemData.COLUMN_COLOR)) {\n\t\t\t\t\t// hex string => color int\n\t\t\t\t\tgi.set(GraphItemData.COLUMN_COLOR, Color.parseColor(\"#\"+graphItemReader.getText()));\n\t\t\t\t} else {\n\t\t\t\t\tgraphItemReader.nextProperty();\n\t\t\t\t}\n\t\t\t}\n\t\t\t// if graphid-column was not set, this must be done later. temporary graphid=-1\n\t\t\tif (gi.get(GraphItemData.COLUMN_GRAPHID) == null) {\n\t\t\t\tgi.set(GraphItemData.COLUMN_GRAPHID, -1);\n\t\t\t\tmustSetGraphid = true;\n\t\t\t}\n\t\t\tgi.insert(zabbixLocalDB);\n\t\t}\n\t\treturn mustSetGraphid;\n\t}\n\n\tpublic void importGraphsForScreen(long screenid) throws ClientProtocolException, IOException, JSONException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\tif (!isCached(GraphData.TABLE_NAME, \"screenid=\"+screenid)) {\n\t\t\t_startTransaction();\n\n\t\t\t// collect all graphids\n\t\t\tSet<Long> graphids = new HashSet<Long>();\n\t\t\tCursor cur = zabbixLocalDB.query(ScreenItemData.TABLE_NAME, null, ScreenItemData.COLUMN_SCREENID+\"=\"+screenid, null, null, null, null);\n\t\t\twhile (cur.moveToNext()) {\n\t\t\t\tgraphids.add(cur.getLong(cur.getColumnIndex(ScreenItemData.COLUMN_RESOURCEID)));\n\t\t\t}\n\n\t\t\t// delete old graphs\n\t\t\tString str_graphids = graphids.toString().replace(\"[\", \"\").replace(\"]\", \"\");\n\t\t\tif (str_graphids.length()>0) {\n\t\t\t\tzabbixLocalDB.delete(GraphData.TABLE_NAME, GraphData.COLUMN_GRAPHID+\" IN (\"+str_graphids+\")\", null);\n\t\t\t\tzabbixLocalDB.delete(GraphItemData.TABLE_NAME, GraphItemData.COLUMN_GRAPHID+\" IN (\"+str_graphids+\")\", null);\n\t\t\t}\n\t\t\tzabbixLocalDB.delete(CacheData.TABLE_NAME, CacheData.COLUMN_KIND+\"='\"+GraphData.TABLE_NAME+\"' AND \"+CacheData.COLUMN_FILTER+\"='screenid=\"+screenid+'\\'', null);\n\n\t\t\tJsonArrayOrObjectReader graphs = _queryStream(\n\t\t\t\t\t\"graph.get\"\n\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t\t.put(isVersion2?\"selectGraphItems\":\"select_graph_items\", \"extend\")\n\t\t\t\t\t\t.put(isVersion2?\"selectItems\":\"select_items\", \"extend\")\n\t\t\t\t\t\t.put(\"output\", \"extend\")\n\t\t\t\t\t\t.put(\"graphids\", new JSONArray(graphids))\n\t\t\t);\n\t\t\tJsonObjectReader graphReader;\n\t\t\twhile ((graphReader = graphs.next()) != null) {\n\t\t\t\tboolean mustSetGraphid = false;\n\t\t\t\tGraphData scr = new GraphData();\n\t\t\t\twhile (graphReader.nextValueToken()) {\n\t\t\t\t\tString propName = graphReader.getCurrentName();\n\t\t\t\t\tif (propName.equals(GraphData.COLUMN_GRAPHID)) {\n\t\t\t\t\t\tscr.set(GraphData.COLUMN_GRAPHID, Long.parseLong(graphReader.getText()));\n\t\t\t\t\t} else if (propName.equals(GraphData.COLUMN_NAME)) {\n\t\t\t\t\t\tscr.set(GraphData.COLUMN_NAME, graphReader.getText());\n\t\t\t\t\t} else if (propName.equals(\"gitems\")) {\n\t\t\t\t\t\tmustSetGraphid = importGraphItems(graphReader.getJsonArrayOrObjectReader());\n\t\t\t\t\t} else if (propName.equals(\"items\")) {\n\t\t\t\t\t\timportItems(graphReader.getJsonArrayOrObjectReader(), 0, true);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tgraphReader.nextProperty();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tscr.insert(zabbixLocalDB);\n\t\t\t\tif (mustSetGraphid) {\n\t\t\t\t\tContentValues values = new ContentValues(1);\n\t\t\t\t\tvalues.put(GraphItemData.COLUMN_GRAPHID, (Long) scr.get(GraphData.COLUMN_GRAPHID));\n\t\t\t\t\tzabbixLocalDB.update(\n\t\t\t\t\t\t\tGraphItemData.TABLE_NAME\n\t\t\t\t\t\t\t, values\n\t\t\t\t\t\t\t, GraphItemData.COLUMN_GRAPHID+\"=-1\"\n\t\t\t\t\t\t\t, null);\n\t\t\t\t}\n\t\t\t}\n\t\t\tgraphs.close();\n\n\t\t\tsetCached(GraphData.TABLE_NAME, \"screenid=\"+screenid, ZabbixConfig.CACHE_LIFETIME_SCREENS);\n\t\t\t_endTransaction();\n\t\t}\n\t}\n\n\tpublic void importHistoryDetails(String itemid) throws ClientProtocolException, IOException, JSONException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\tif (!isCached(HistoryDetailData.TABLE_NAME, itemid)) {\n\t\t\t_startTransaction();\n\t\t\tzabbixLocalDB.delete(HistoryDetailData.TABLE_NAME, HistoryDetailData.COLUMN_ITEMID+\"=\"+itemid, null);\n\n\t\t\t// the past 2 hours\n\t\t\tlong time_till = new Date().getTime() / 1000;\n\t\t\tlong time_from = time_till - ZabbixConfig.HISTORY_GET_TIME_FROM_SHIFT;\n\n\t\t\t// Workaround: historydetails only comes if you use the correct \"history\"-parameter.\n\t\t\t// this parameter can be \"null\" or a number 0-4. Because we don't know when to use which,\n\t\t\t// we try them all, until we get results.\n\t\t\tInteger historytype = null;\n\t\t\tJSONObject result = _queryBuffer(\n\t\t\t\t\t\"history.get\"\n\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t\t.put(\"limit\", 1)\n\t\t\t\t\t\t.put(\"history\", historytype) // for integer ?\n\t\t\t\t\t\t.put(\"itemids\", new JSONArray().put(itemid))\n\t\t\t\t\t\t.put(\"time_from\", time_from)\n\t\t\t);\n\n\t\t\tJSONArray testHistorydetails = result.getJSONArray(\"result\");\n\t\t\tif (testHistorydetails.length() == 0) {\n\t\t\t\thistorytype = -1;\n\t\t\t\twhile (testHistorydetails.length() == 0 && ++historytype <= 4) {\n\t\t\t\t\t// if we get an empty array, we try another history parameter\n\t\t\t\t\tresult = _queryBuffer(\n\t\t\t\t\t\t\t\"history.get\"\n\t\t\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t\t\t\t.put(\"output\", \"extend\")\n\t\t\t\t\t\t\t\t.put(\"limit\", 1)\n\t\t\t\t\t\t\t\t.put(\"history\", historytype)\n\t\t\t\t\t\t\t\t.put(\"itemids\", new JSONArray().put(itemid))\n\t\t\t\t\t\t\t\t.put(\"time_from\", time_from)\n\t\t\t\t\t);\n\t\t\t\t\ttestHistorydetails = result.getJSONArray(\"result\");\n\t\t\t\t}\n\t\t\t}\n\t\t\t// correct historytype found and there are data\n\t\t\tif (testHistorydetails.length() > 0) {\n\t\t\t\t// count of the entries cannot be detected (zabbix bug),\n\t\t\t\t// so we use a fiction\n\t\t\t\tint numDetails = 400;\n\t\t\t\tint curI=0;\n\t\t\t\tJsonArrayOrObjectReader historydetails = _queryStream(\n\t\t\t\t\t\t\"history.get\"\n\t\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t\t\t.put(\"output\", \"extend\")\n\t\t\t\t\t\t\t.put(\"limit\", ZabbixConfig.HISTORY_GET_LIMIT)\n\t\t\t\t\t\t\t.put(\"history\", historytype)\n\t\t\t\t\t\t\t.put(\"itemids\", new JSONArray().put(itemid))\n\t\t\t\t\t\t\t.put(\"time_from\", time_from)\n\t\t\t\t\t\t\t.put(\"sortfield\", \"clock\")\n\t\t\t\t\t\t\t.put(\"sortorder\", \"DESC\")\n\t\t\t\t);\n\t\t\t\tJsonObjectReader historydetail;\n\t\t\t\ttry {\n\t\t\t\t\tint selI = 0;\n\t\t\t\t\twhile ((historydetail = historydetails.next()) != null) {\n\t\t\t\t\t\t// save only every 20th\n\t\t\t\t\t\tif (selI++ % 20 != 0) {\n\t\t\t\t\t\t\twhile (historydetail.nextValueToken()) {\n\t\t\t\t\t\t\t\thistorydetail.nextProperty();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tHistoryDetailData h = new HistoryDetailData();\n\t\t\t\t\t\twhile (historydetail.nextValueToken()) {\n\t\t\t\t\t\t\tString propName = historydetail.getCurrentName();\n\t\t\t\t\t\t\tif (propName.equals(HistoryDetailData.COLUMN_CLOCK)) {\n\t\t\t\t\t\t\t\th.set(HistoryDetailData.COLUMN_CLOCK, Integer.parseInt(historydetail.getText()));\n\t\t\t\t\t\t\t} else if (propName.equals(HistoryDetailData.COLUMN_ITEMID)) {\n\t\t\t\t\t\t\t\th.set(HistoryDetailData.COLUMN_ITEMID, Long.parseLong(historydetail.getText()));\n\t\t\t\t\t\t\t} else if (propName.equals(HistoryDetailData.COLUMN_VALUE)) {\n\t\t\t\t\t\t\t\th.set(HistoryDetailData.COLUMN_VALUE, Double.parseDouble(historydetail.getText()));\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\thistorydetail.nextProperty();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\th.insert(zabbixLocalDB);\n\t\t\t\t\t\tif (++curI % 10 == 0) {\n\t\t\t\t\t\t\tshowProgress(Math.min(curI*100/numDetails, 84));\n\t\t\t\t\t\t}\n\t\t\t\t\t\t_commitTransactionIfRecommended();\n\t\t\t\t\t}\n\t\t\t\t} catch (NumberFormatException e) {\n\t\t\t\t\t// data are unuseable, e.g. because it's a string\n\t\t\t\t}\n\t\t\t\thistorydetails.close();\n\t\t\t}\n\t\t\tsetCached(HistoryDetailData.TABLE_NAME, itemid, ZabbixConfig.CACHE_LIFETIME_HISTORY_DETAILS);\n\t\t\t_endTransaction();\n\t\t}\n\t}\n\n\tprivate long importHostGroups(JsonArrayOrObjectReader jsonArray) throws JsonParseException, IOException {\n\t\tlong firstHostGroupId = -1;\n\t\tJsonObjectReader hostReader;\n\t\twhile ((hostReader = jsonArray.next()) != null) {\n\t\t\tHostGroupData h = new HostGroupData();\n\t\t\twhile (hostReader.nextValueToken()) {\n\t\t\t\tString propName = hostReader.getCurrentName();\n\t\t\t\tif (propName.equals(HostGroupData.COLUMN_GROUPID)) {\n\t\t\t\t\tlong id = Long.parseLong(hostReader.getText());\n\t\t\t\t\tif (firstHostGroupId == -1) firstHostGroupId = id;\n\t\t\t\t\th.set(HostGroupData.COLUMN_GROUPID, id);\n\t\t\t\t} else if (propName.equals(HostGroupData.COLUMN_NAME)) {\n\t\t\t\t\th.set(HostGroupData.COLUMN_NAME, hostReader.getText());\n\t\t\t\t} else {\n\t\t\t\t\thostReader.nextProperty();\n\t\t\t\t}\n\t\t\t}\n\t\t\th.insert(zabbixLocalDB, HostGroupData.COLUMN_GROUPID);\n\t\t\t_commitTransactionIfRecommended();\n\t\t}\n\n\t\treturn firstHostGroupId;\n\t}\n\n\t/**\n\t * import the hosts from stream\n\t * @param jsonArray stream\n\t * @param numHosts count of hosts for progressbar. null if unknown.\n\t * @return Object[] {(String) comma-separated all Hostnames, (Long) 1. host id}\n\t * @throws JsonParseException\n\t * @throws IOException\n\t */\n\tprivate Object[] importHosts(JsonArrayOrObjectReader jsonArray, Integer numHosts) throws JsonParseException, IOException {\n\t\tList<String> hostnames = new ArrayList<String>();\n\t\tlong firstHostId = -1;\n\t\tJsonObjectReader hostReader;\n\t\tint i=0;\n\t\twhile ((hostReader = jsonArray.next()) != null) {\n\t\t\tHostData h = new HostData();\n\t\t\twhile (hostReader.nextValueToken()) {\n\t\t\t\tString propName = hostReader.getCurrentName();\n\t\t\t\tif (propName.equals(HostData.COLUMN_HOSTID)) {\n\t\t\t\t\th.set(HostData.COLUMN_HOSTID, Long.parseLong(hostReader.getText()));\n\t\t\t\t\tif (firstHostId == -1) {\n\t\t\t\t\t\tfirstHostId = (Long) h.get(HostData.COLUMN_HOSTID);\n\t\t\t\t\t}\n\t\t\t\t} else if (propName.equals(HostData.COLUMN_HOST)) {\n\t\t\t\t\tString host = hostReader.getText();\n\t\t\t\t\thostnames.add(host);\n\t\t\t\t\th.set(HostData.COLUMN_HOST, host);\n\t\t\t\t} else if (propName.equals(\"groups\")) {\n\t\t\t\t\tlong groupid = importHostGroups(hostReader.getJsonArrayOrObjectReader());\n\t\t\t\t\tif (groupid != -1) {\n\t\t\t\t\t\th.set(HostData.COLUMN_GROUPID, groupid);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\thostReader.nextProperty();\n\t\t\t\t}\n\t\t\t}\n\t\t\t// host without group will get group #0 (other)\n\t\t\tif (h.get(HostData.COLUMN_GROUPID) == null) {\n\t\t\t\th.set(HostData.COLUMN_GROUPID, 0);\n\t\t\t\t// create \"other\" hostgroup #1\n\t\t\t\tHostGroupData hg = new HostGroupData();\n\t\t\t\thg.set(HostGroupData.COLUMN_GROUPID, 0);\n\t\t\t\thg.set(HostGroupData.COLUMN_NAME, \"- \"+context.getResources().getString(R.string.other)+\" -\");\n\t\t\t\thg.insert(zabbixLocalDB, HostGroupData.COLUMN_GROUPID);\n\t\t\t}\n\t\t\th.insert(zabbixLocalDB, HostData.COLUMN_HOSTID);\n\t\t\tif (numHosts != null && ++i % 10 == 0) {\n\t\t\t\tshowProgress(i*100/numHosts);\n\t\t\t}\n\t\t\t_commitTransactionIfRecommended();\n\t\t}\n\n\t\treturn new Object[] {hostnames.toString().replaceAll(\"[\\\\[\\\\]]\", \"\"), firstHostId};\n\t}\n\n\tpublic void importHostsAndGroups() throws JSONException, IOException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\tif (!isCached(HostData.TABLE_NAME, null)) {\n\t\t\t_startTransaction();\n\t\t\tzabbixLocalDB.delete(HostData.TABLE_NAME, null, null);\n\t\t\tzabbixLocalDB.delete(HostGroupData.TABLE_NAME, null, null);\n\n\t\t\t// get count of hosts\n\t\t\tJSONObject result = _queryBuffer(\n\t\t\t\t\t\"host.get\"\n\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t\t.put(\"countOutput\", 1)\n\t\t\t\t\t\t.put(\"limit\", ZabbixConfig.HOST_GET_LIMIT)\n\t\t\t\t\t\t.put(isVersion2?\"selectGroups\":\"select_groups\", \"extend\")\n\t\t\t);\n\t\t\tint numHosts = result.getInt(\"result\");\n\t\t\tJsonArrayOrObjectReader hosts = _queryStream(\n\t\t\t\t\t\"host.get\"\n\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t\t.put(\"output\", \"extend\")\n\t\t\t\t\t\t.put(\"limit\", ZabbixConfig.HOST_GET_LIMIT)\n\t\t\t\t\t\t.put(isVersion2?\"selectGroups\":\"select_groups\", \"extend\")\n\t\t\t);\n\t\t\timportHosts(hosts, numHosts);\n\t\t\thosts.close();\n\n\t\t\tsetCached(HostData.TABLE_NAME, null, ZabbixConfig.CACHE_LIFETIME_HOSTS);\n\t\t\t_endTransaction();\n\t\t}\n\t}\n\n\t/**\n\t * import items from stream.\n\t * @param items stream\n\t * @param numItems count for progressbar, if 0 no progressbarupdate\n\t * @param checkBeforeInsert if true, only make an insert if item does not exist\n\t * @return the first item id\n\t * @throws JsonParseException\n\t * @throws IOException\n\t */\n\tprivate long importItems(JsonArrayOrObjectReader items, int numItems, boolean checkBeforeInsert) throws JsonParseException, IOException {\n\t\tlong firstItemId = -1;\n\t\tint curI=0;\n\t\tJsonObjectReader itemReader;\n\t\twhile ((itemReader = items.next()) != null) {\n\t\t\tItemData i = new ItemData();\n\t\t\tString key_ = null;\n\t\t\twhile (itemReader.nextValueToken()) {\n\t\t\t\tString propName = itemReader.getCurrentName();\n\t\t\t\tif (propName.equals(ItemData.COLUMN_ITEMID)) {\n\t\t\t\t\ti.set(ItemData.COLUMN_ITEMID, Long.parseLong(itemReader.getText()));\n\t\t\t\t\tif (firstItemId == -1) {\n\t\t\t\t\t\tfirstItemId = (Long) i.get(ItemData.COLUMN_ITEMID);\n\t\t\t\t\t}\n\t\t\t\t} else if (propName.equals(ItemData.COLUMN_HOSTID)) {\n\t\t\t\t\ti.set(ItemData.COLUMN_HOSTID, Long.parseLong(itemReader.getText()));\n\t\t\t\t} else if (propName.equals(ItemData.COLUMN_DESCRIPTION) || propName.equals(\"name\")) {\n\t\t\t\t\t// since zabbix 2.x is the name of the item \"name\"\n\t\t\t\t\t// before zabbix 2.x the name field was \"description\"\n\t\t\t\t\tif (isVersion2 && propName.equals(\"name\")) {\n\t\t\t\t\t\ti.set(ItemData.COLUMN_DESCRIPTION, itemReader.getText());\n\t\t\t\t\t} else if (!isVersion2) {\n\t\t\t\t\t\ti.set(ItemData.COLUMN_DESCRIPTION, itemReader.getText());\n\t\t\t\t\t}\n\t\t\t\t} else if (propName.equals(ItemData.COLUMN_LASTCLOCK)) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\ti.set(ItemData.COLUMN_LASTCLOCK, Integer.parseInt(itemReader.getText()));\n\t\t\t\t\t} catch (NumberFormatException e) {\n\t\t\t\t\t\t// ignore\n\t\t\t\t\t}\n\t\t\t\t} else if (propName.equals(ItemData.COLUMN_LASTVALUE)) {\n\t\t\t\t\ti.set(ItemData.COLUMN_LASTVALUE, itemReader.getText());\n\t\t\t\t} else if (propName.equals(ItemData.COLUMN_UNITS)) {\n\t\t\t\t\ti.set(ItemData.COLUMN_UNITS, itemReader.getText());\n\t\t\t\t} else if (propName.equals(\"key_\")) {\n\t\t\t\t\tkey_ = itemReader.getText();\n\t\t\t\t} else if (propName.equals(\"applications\")) {\n\t\t\t\t\t// at this point itemid and hostid is unknown\n\t\t\t\t\t// because of this, all applicationrelations will be saved with itemid and hostid \"-1\".\n\t\t\t\t\t// later the IDs will be replaced with the correct\n\t\t\t\t\timportApplications(-1, -1, itemReader.getJsonArrayOrObjectReader());\n\t\t\t\t} else {\n\t\t\t\t\titemReader.nextProperty();\n\t\t\t\t}\n\t\t\t}\n\t\t\t// if applicable replace placeholder\n\t\t\tString description = (String) i.get(ItemData.COLUMN_DESCRIPTION);\n\t\t\tif (description.matches(\".*\\\\$[0-9].*\")) {\n\t\t\t\tif (key_ != null && key_.indexOf('[') != -1) {\n\t\t\t\t\tString[] keys = key_.substring(key_.indexOf('[')+1, key_.indexOf(']')).split(\",\");\n\t\t\t\t\tfor (int ix=0; ix<keys.length; ix++) {\n\t\t\t\t\t\tdescription = description.replace(\"$\"+(ix+1), keys[ix]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\ti.set(ItemData.COLUMN_DESCRIPTION, description);\n\t\t\tif (checkBeforeInsert) {\n\t\t\t\ti.insert(zabbixLocalDB, ItemData.COLUMN_ITEMID);\n\t\t\t} else {\n\t\t\t\ti.insert(zabbixLocalDB);\n\t\t\t}\n\t\t\tif (numItems > 0 && ++curI % 10 == 0) {\n\t\t\t\tshowProgress(curI*100/numItems);\n\t\t\t}\n\n\t\t\t// now the \"-1\" IDs of applicationsrelation will be replaced with the correct itemID\n\t\t\tContentValues values = new ContentValues(2);\n\t\t\tvalues.put(ApplicationItemRelationData.COLUMN_ITEMID, (Long) i.get(ItemData.COLUMN_ITEMID));\n\t\t\tvalues.put(ApplicationItemRelationData.COLUMN_HOSTID, (Long) i.get(ItemData.COLUMN_HOSTID));\n\t\t\tzabbixLocalDB.update(\n\t\t\t\t\tApplicationItemRelationData.TABLE_NAME\n\t\t\t\t\t, values\n\t\t\t\t\t, ApplicationItemRelationData.COLUMN_ITEMID+\"=-1\"\n\t\t\t\t\t, null\n\t\t\t);\n\t\t}\n\t\treturn firstItemId;\n\t}\n\n\tpublic void importItems(long hostid) throws JSONException, IOException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\tif (!isCached(ItemData.TABLE_NAME, \"hostid=\"+hostid)) {\n\t\t\t_startTransaction();\n\t\t\tzabbixLocalDB.delete(ItemData.TABLE_NAME, ItemData.COLUMN_HOSTID+\"=\"+hostid, null);\n\t\t\tzabbixLocalDB.delete(ApplicationItemRelationData.TABLE_NAME, ApplicationItemRelationData.COLUMN_HOSTID+\"=\"+hostid, null);\n\n\t\t\t// count of items\n\t\t\tJSONObject result = _queryBuffer(\n\t\t\t\t\t\"item.get\"\n\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t.put(\"output\", \"extend\")\n\t\t\t\t\t.put(\"countOutput\", 1)\n\t\t\t\t\t.put(\"limit\", ZabbixConfig.ITEM_GET_LIMIT)\n\t\t\t\t\t.put(\"hostids\", new JSONArray().put(hostid))\n\t\t\t);\n\t\t\tint numItems = result.getInt(\"result\");\n\t\t\tJsonArrayOrObjectReader items = _queryStream(\n\t\t\t\t\t\"item.get\"\n\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t\t.put(\"output\", \"extend\")\n\t\t\t\t\t\t.put(\"limit\", ZabbixConfig.ITEM_GET_LIMIT)\n\t\t\t\t\t\t.put(isVersion2?\"selectApplications\":\"select_applications\", \"extend\")\n\t\t\t\t\t\t.put(\"hostids\", new JSONArray().put(hostid))\n\t\t\t);\n\t\t\timportItems(items, numItems, false);\n\t\t\titems.close();\n\n\t\t\tsetCached(ItemData.TABLE_NAME, \"hostid=\"+hostid, ZabbixConfig.CACHE_LIFETIME_ITEMS);\n\t\t\t_endTransaction();\n\t\t}\n\t}\n\n\tprivate void importScreenItems(JsonArrayOrObjectReader screenItems) throws JsonParseException, NumberFormatException, IOException {\n\t\tJsonObjectReader screenItemReader;\n\t\twhile ((screenItemReader = screenItems.next()) != null) {\n\t\t\tScreenItemData si = new ScreenItemData();\n\t\t\tint resourcetype = -1;\n\t\t\twhile (screenItemReader.nextValueToken()) {\n\t\t\t\tString propName = screenItemReader.getCurrentName();\n\t\t\t\tif (propName.equals(ScreenItemData.COLUMN_SCREENITEMID)) {\n\t\t\t\t\tsi.set(ScreenItemData.COLUMN_SCREENITEMID, Long.parseLong(screenItemReader.getText()));\n\t\t\t\t} else if (propName.equals(ScreenItemData.COLUMN_SCREENID)) {\n\t\t\t\t\tsi.set(ScreenItemData.COLUMN_SCREENID, Long.parseLong(screenItemReader.getText()));\n\t\t\t\t} else if (propName.equals(ScreenItemData.COLUMN_RESOURCEID)) {\n\t\t\t\t\tsi.set(ScreenItemData.COLUMN_RESOURCEID, Long.parseLong(screenItemReader.getText()));\n\t\t\t\t} else if (propName.equals(\"resourcetype\")) {\n\t\t\t\t\tresourcetype = Integer.parseInt(screenItemReader.getText());\n\t\t\t\t} else {\n\t\t\t\t\tscreenItemReader.nextProperty();\n\t\t\t\t}\n\t\t\t}\n\t\t\t// only resouretype == 0\n\t\t\tif (resourcetype == 0) {\n\t\t\t\tsi.insert(zabbixLocalDB);\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic void importScreens() throws ClientProtocolException, IOException, JSONException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\tif (!isCached(ScreenData.TABLE_NAME, null)) {\n\t\t\t_startTransaction();\n\n\t\t\tzabbixLocalDB.delete(ScreenData.TABLE_NAME, null, null);\n\t\t\tzabbixLocalDB.delete(ScreenItemData.TABLE_NAME, null, null);\n\t\t\tzabbixLocalDB.delete(CacheData.TABLE_NAME, CacheData.COLUMN_KIND+\"='\"+ScreenData.TABLE_NAME+\"'\", null);\n\n\t\t\tJsonArrayOrObjectReader screens = _queryStream(\n\t\t\t\t\t(isVersion2?\"s\":\"S\")+\"creen.get\"\n\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t\t.put(\"output\", \"extend\")\n\t\t\t\t\t\t.put(isVersion2?\"selectScreenItems\":\"select_screenitems\", \"extend\")\n\t\t\t);\n\t\t\tJsonObjectReader screenReader;\n\t\t\twhile ((screenReader = screens.next()) != null) {\n\t\t\t\tScreenData scr = new ScreenData();\n\t\t\t\twhile (screenReader.nextValueToken()) {\n\t\t\t\t\tString propName = screenReader.getCurrentName();\n\t\t\t\t\tif (propName.equals(ScreenData.COLUMN_SCREENID)) {\n\t\t\t\t\t\tscr.set(ScreenData.COLUMN_SCREENID, Long.parseLong(screenReader.getText()));\n\t\t\t\t\t} else if (propName.equals(ScreenData.COLUMN_NAME)) {\n\t\t\t\t\t\tscr.set(ScreenData.COLUMN_NAME, screenReader.getText());\n\t\t\t\t\t} else if (propName.equals(\"screenitems\")) {\n\t\t\t\t\t\timportScreenItems(screenReader.getJsonArrayOrObjectReader());\n\t\t\t\t\t} else {\n\t\t\t\t\t\tscreenReader.nextProperty();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tscr.insert(zabbixLocalDB);\n\t\t\t}\n\t\t\tscreens.close();\n\n\t\t\tsetCached(ScreenData.TABLE_NAME, null, ZabbixConfig.CACHE_LIFETIME_SCREENS);\n\t\t\t_endTransaction();\n\t\t}\n\t}\n\n\tpublic void importTrigger(String triggerid) throws JSONException, IOException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\tif (!isCached(TriggerData.TABLE_NAME, \"triggerid=\"+triggerid)) {\n\t\t\t_startTransaction();\n\n\t\t\tJsonArrayOrObjectReader trigger = _queryStream(\n\t\t\t\t\t\"trigger.get\"\n\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t\t.put(\"output\", \"extend\")\n\t\t\t\t\t\t.put(isVersion2?\"selectHosts\":\"select_hosts\", \"extend\")\n\t\t\t\t\t\t.put(\"triggerids\", new JSONArray().put(triggerid))\n\t\t\t);\n\t\t\timportTriggers(trigger);\n\t\t\ttrigger.close();\n\n\t\t\tsetCached(TriggerData.TABLE_NAME, \"triggerid=\"+triggerid, ZabbixConfig.CACHE_LIFETIME_TRIGGERS);\n\t\t\t_endTransaction();\n\t\t}\n\t}\n\n\t/**\n\t * importiert ein trigger mit dem attribute itemid. ggf. wird der trigger zuerst gelöscht und neu angelegt.\n\t * imports a trigger with the attribute itemid. if trigger already exists, it will be removed first.\n\t * @param triggerid\n\t * @throws JSONException\n\t * @throws IOException\n\t * @throws HttpAuthorizationRequiredException\n\t * @throws NoAPIAccessException\n\t */\n\tpublic void importTriggerColumnItemId(String triggerid) throws JSONException, IOException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\t// check if the trigger exists and if the itemid was set\n\t\tboolean mustImport = true;\n\t\tCursor cur = zabbixLocalDB.query(TriggerData.TABLE_NAME, null, TriggerData.COLUMN_TRIGGERID+\"=\"+triggerid, null, null, null, null);\n\t\tif (cur.moveToFirst()) {\n\t\t\tlong itemid = 0;\n\t\t\ttry {\n\t\t\t\titemid = cur.getLong(cur.getColumnIndex(TriggerData.COLUMN_ITEMID));\n\t\t\t} catch (Exception e) {\n\t\t\t\t// no itemid\n\t\t\t}\n\t\t\tif (itemid > 0) {\n\t\t\t\tmustImport = false;\n\t\t\t}\n\t\t}\n\t\tif (mustImport) {\n\t\t\t_startTransaction();\n\t\t\tzabbixLocalDB.delete(TriggerData.TABLE_NAME, TriggerData.COLUMN_TRIGGERID+\"=\"+triggerid, null);\n\t\t\tJsonArrayOrObjectReader triggers = _queryStream(\n\t\t\t\t\t\"trigger.get\"\n\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t\t.put(\"output\", \"extend\")\n\t\t\t\t\t\t.put(isVersion2?\"selectHosts\":\"select_hosts\", \"extend\")\n\t\t\t\t\t\t.put(isVersion2?\"selectGroups\":\"select_groups\", \"extend\")\n\t\t\t\t\t\t.put(isVersion2?\"selectItems\":\"select_items\", \"extend\")\n\t\t\t\t\t\t.put(\"triggerids\", new JSONArray().put(triggerid))\n\t\t\t\t\t\t.put(\"limit\", 1)\n\t\t\t);\n\t\t\timportTriggers(triggers);\n\t\t\t_endTransaction();\n\t\t}\n\t}\n\n\t/**\n\t * imports the \"warning\"-triggers\n\t * @throws JSONException\n\t * @throws IOException\n\t * @throws HttpAuthorizationRequiredException\n\t * @throws NoAPIAccessException\n\t */\n\tpublic void importTriggers() throws JSONException, IOException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\tif (!isCached(TriggerData.TABLE_NAME, null)) {\n\t\t\t// clear triggers\n\t\t\tzabbixLocalDB.delete(TriggerData.TABLE_NAME, null, null);\n\n\t\t\t_startTransaction();\n\n\t\t\tlong min = (new Date().getTime()/1000)-ZabbixConfig.STATUS_SHOW_TRIGGER_TIME;\n\t\t\tJsonArrayOrObjectReader triggers = _queryStream(\n\t\t\t\t\t\"trigger.get\"\n\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t\t.put(\"output\", \"extend\")\n\t\t\t\t\t\t.put(\"sortfield\", \"lastchange\")\n\t\t\t\t\t\t.put(\"sortorder\", \"desc\")\n\t\t\t\t\t\t.put(isVersion2?\"selectHosts\":\"select_hosts\", \"extend\")\n\t\t\t\t\t\t.put(isVersion2?\"selectGroups\":\"select_groups\", \"extend\")\n\t\t\t\t\t\t.put(isVersion2?\"selectItems\":\"select_items\", \"extend\")\n\t\t\t\t\t\t.put(\"lastChangeSince\", min)\n\t\t\t\t\t\t.put(\"only_true\", \"1\")\n\t\t\t\t\t\t.put(\"limit\", ZabbixConfig.TRIGGER_GET_LIMIT)\n\t\t\t\t\t\t.put(\"expandDescription\", true)\n\t\t\t);\n\t\t\timportTriggers(triggers);\n\t\t\ttriggers.close();\n\n\t\t\tsetCached(TriggerData.TABLE_NAME, null, ZabbixConfig.CACHE_LIFETIME_TRIGGERS);\n\t\t\t_endTransaction();\n\t\t}\n\t}\n\n\tprivate void importTriggers(JsonArrayOrObjectReader jsonArray) throws JsonParseException, IOException {\n\t\tJsonObjectReader triggerReader;\n\t\twhile ((triggerReader = jsonArray.next()) != null) {\n\t\t\tTriggerData t = new TriggerData();\n\t\t\twhile (triggerReader.nextValueToken()) {\n\t\t\t\tString propName = triggerReader.getCurrentName();\n\t\t\t\tif (propName.equals(TriggerData.COLUMN_TRIGGERID)) {\n\t\t\t\t\tt.set(TriggerData.COLUMN_TRIGGERID, Long.parseLong(triggerReader.getText()));\n\t\t\t\t} else if (propName.equals(TriggerData.COLUMN_COMMENTS)) {\n\t\t\t\t\tt.set(TriggerData.COLUMN_COMMENTS, triggerReader.getText());\n\t\t\t\t} else if (propName.equals(TriggerData.COLUMN_DESCRIPTION)) {\n\t\t\t\t\tt.set(TriggerData.COLUMN_DESCRIPTION, triggerReader.getText());\n\t\t\t\t} else if (propName.equals(TriggerData.COLUMN_EXPRESSION)) {\n\t\t\t\t\tt.set(TriggerData.COLUMN_EXPRESSION, triggerReader.getText());\n\t\t\t\t} else if (propName.equals(TriggerData.COLUMN_LASTCHANGE)) {\n\t\t\t\t\tt.set(TriggerData.COLUMN_LASTCHANGE, Integer.parseInt(triggerReader.getText()));\n\t\t\t\t} else if (propName.equals(TriggerData.COLUMN_PRIORITY)) {\n\t\t\t\t\tt.set(TriggerData.COLUMN_PRIORITY, Integer.parseInt(triggerReader.getText()));\n\t\t\t\t} else if (propName.equals(TriggerData.COLUMN_STATUS)) {\n\t\t\t\t\tt.set(TriggerData.COLUMN_STATUS, Integer.parseInt(triggerReader.getText()));\n\t\t\t\t} else if (propName.equals(TriggerData.COLUMN_VALUE)) {\n\t\t\t\t\tt.set(TriggerData.COLUMN_VALUE, Integer.parseInt(triggerReader.getText()));\n\t\t\t\t} else if (propName.equals(TriggerData.COLUMN_URL)) {\n\t\t\t\t\tt.set(TriggerData.COLUMN_URL, triggerReader.getText());\n\t\t\t\t} else if (propName.equals(\"hosts\")) {\n\t\t\t\t\tObject[] hostsCache = importHosts(triggerReader.getJsonArrayOrObjectReader(), null);\n\t\t\t\t\tt.set(TriggerData.COLUMN_HOSTS, hostsCache[0]);\n\t\t\t\t\tt.set(TriggerData.COLUMN_HOSTID, hostsCache[1]);\n\t\t\t\t} else if (propName.equals(\"groups\")) {\n\t\t\t\t\timportHostGroups(triggerReader.getJsonArrayOrObjectReader());\n\t\t\t\t} else if (propName.equals(\"items\")) {\n\t\t\t\t\t// store the first item id\n\t\t\t\t\tt.set(TriggerData.COLUMN_ITEMID, importItems(triggerReader.getJsonArrayOrObjectReader(), 1, true));\n\t\t\t\t} else {\n\t\t\t\t\ttriggerReader.nextProperty();\n\t\t\t\t}\n\t\t\t}\n\t\t\tt.insert(zabbixLocalDB, TriggerData.COLUMN_TRIGGERID);\n\t\t\t_commitTransactionIfRecommended();\n\t\t}\n\t}\n\n\tpublic void importTriggersByItemId(String itemid) throws JSONException, IOException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\tif (!isCached(TriggerData.TABLE_NAME, \"itemid=\"+itemid)) {\n\t\t\t_startTransaction();\n\t\t\tzabbixLocalDB.delete(TriggerData.TABLE_NAME, TriggerData.COLUMN_ITEMID+\"=\"+itemid, null);\n\t\t\tJsonArrayOrObjectReader triggers = _queryStream(\n\t\t\t\t\t\"trigger.get\"\n\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t\t.put(\"output\", \"extend\")\n\t\t\t\t\t\t.put(isVersion2?\"selectHosts\":\"select_hosts\", \"extend\")\n\t\t\t\t\t\t.put(isVersion2?\"selectGroups\":\"select_groups\", \"extend\")\n\t\t\t\t\t\t.put(isVersion2?\"selectItems\":\"select_items\", \"extend\")\n\t\t\t\t\t\t.put(\"itemids\", new JSONArray().put(itemid))\n\t\t\t\t\t\t.put(\"limit\", 1)\n\t\t\t\t\t\t.put(\"sortfield\", \"lastchange\")\n\t\t\t\t\t\t.put(\"sortorder\", \"DESC\")\n\t\t\t);\n\t\t\timportTriggers(triggers);\n\t\t\tsetCached(TriggerData.TABLE_NAME, \"itemid=\"+itemid, ZabbixConfig.CACHE_LIFETIME_TRIGGERS);\n\t\t\t_endTransaction();\n\t\t}\n\t}\n\n\tpublic boolean isCached(String kind, String filter) {\n\t\tSQLiteQueryBuilder sqlBuilder = new SQLiteQueryBuilder();\n\t\tsqlBuilder.setTables(CacheData.TABLE_NAME);\n\t\tsqlBuilder.appendWhere(CacheData.COLUMN_KIND+\"='\"+kind+\"' AND \");\n\t\tsqlBuilder.appendWhere(CacheData.COLUMN_FILTER+\n\t\t\t\t(filter==null?\" IS NULL\":\"='\"+filter+\"'\")\n\t\t);\n\t\tsqlBuilder.appendWhere(\" AND \"+CacheData.COLUMN_EXPIRE_DATE+\">\"+new Date().getTime()/1000);\n\t\tCursor cur = sqlBuilder.query(\n\t\t\tzabbixLocalDB,\n\t\t\tnull,\n\t\t\tnull,\n\t\t\tnull,\n\t\t\tnull,\n\t\t\tnull,\n\t\t\tnull\n\t\t);\n\t\tLog.i(\"ZabbixContentProvider\", \"isCached \"+kind+\"//\"+filter+\"//\"+cur.moveToFirst());\n\t\treturn cur.moveToFirst();\n\t}\n\n\t/**\n\t * public, for the unit test\n\t */\n\tpublic void setCached(String kind, String filter, int lifetime) {\n\t\tCacheData cache = new CacheData();\n\t\tcache.set(CacheData.COLUMN_EXPIRE_DATE, new Date().getTime()/1000 + lifetime);\n\t\tcache.set(CacheData.COLUMN_KIND, kind);\n\t\tif (filter != null) {\n\t\t\tcache.set(CacheData.COLUMN_FILTER, filter);\n\t\t}\n\t\tcache.insert(zabbixLocalDB);\n\t}\n\n\t/**\n\t * updates the progressbar in the gui\n\t * @param i 0..100\n\t */\n\tpublic void showProgress(int i) {\n\t\t// if applicable, transform the progress\n\t\tif (transformProgressStart != 0 && transformProgressEnd != 0) {\n\t\t\ti = (int) (transformProgressStart + (transformProgressEnd-transformProgressStart)*(double)i/100);\n\t\t}\n\n\t\tIntent intent = new Intent(ZabbixContentProvider.CONTENT_PROVIDER_INTENT_ACTION);\n\t\tintent.putExtra(\"flag\", ZabbixContentProvider.INTENT_FLAG_SHOW_PROGRESS);\n\t\tintent.putExtra(\"value\", i);\n\t\tcontext.sendBroadcast(intent);\n\t}\n\n\t/**\n\t * transforms the progress\n\t * @param start 0% => start%\n\t * @param end 100% => end%\n\t */\n\tpublic void transformProgress(int start, int end) {\n\t\ttransformProgressStart = start;\n\t\ttransformProgressEnd = end;\n\t}\n}\n"],
      "p_date_tdt": "May 10, 2013 7:32:46 AM",
      "c_comments_t": ["\t\t\t// create ApplicationItemRelation /** \n * public, for the unit test\n */\n /** \n * import the hosts from stream\n * @param jsonArray stream\n * @param numHosts count of hosts for progressbar. null if unknown.\n * @return Object[] {(String) comma-separated all Hostnames, (Long) 1. host id}\n * @throws JsonParseException\n * @throws IOException\n */\n \t\t\t// result array found /** \n * import graph items\n * @param graphItems\n * @return true, if graphid column has to be updated from -1 to the correct graphid later.\n * @throws JsonParseException\n * @throws NumberFormatException\n * @throws IOException\n */\n \t\t\t\t\t\t// save only every 20th \t\t\t// wrong password. token remains null \t\t\t// the past 2 hours \t\t\t\t\t// data are unuseable, e.g. because it's a string /** \n * @param events stream\n * @param numEvents if null, no progressbar-update AND only isert, if it does not exist. If !null, progressbar-update AND always insert without checking\n * @throws JsonParseException\n * @throws IOException\n */\n \t\t\t\t\t// Precondition failed / Looks like Zabbix 1.8.2 \t\t\t// get API version \t\t\t// if #0 \"other\" does not exist yet, it has to be created \t\t\t\t\t// later the IDs will be replaced with the correct /** \n * zabbix api call. data will be parsed as json object on-the-fly. Caution: use this only for api calls with a small return data.\n * @param method\n * @param params\n * @return\n * @throws ClientProtocolException\n * @throws IOException\n * @throws JSONException\n * @throws HttpAuthorizationRequiredException\n * @throws NoAPIAccessException\n */\n /** \n * begin sql transaction\n */\n \t\t\t\t\t\t// first do a new auth and then try the same api call again \t\t\t\t// no itemid \t\t\t// count of items /** \n * init\n * @param context android context\n * @param zabbixLocalDB sqlite\n */\n \t\t\t// create applications that does not exist \t\t\t\t// so we use a fiction \t\t\t// only resouretype == 0 /** \n * probably too old zabbix <= 1.8.2\n */\n /** \n * zabbix auth. user and pwd from app preferences\n * @return true success\n * @throws ClientProtocolException\n * @throws IOException\n * @throws JSONException\n * @throws HttpAuthorizationRequiredException\n * @throws NoAPIAccessException\n */\n /** \n * close the last http stream\n */\n \t\t\t// Workaround: historydetails only comes if you use the correct \"history\"-parameter. /** \n * transforms the progress\n * @param start 0% => start%\n * @param end 100% => end%\n */\n \t\t\t\t// in Zabbix version <2.0, this is not default \t\t\t\t// file not found \t\t\t\t\t// hex string => color int \t\tHttpClientParams.setRedirecting(params, true); // redirecting /** \n * The API version. From 1.8.3 (maybe earlier) to 2.0 (excluded), this was 1.3. With 2.0, it changed to 1.4.  Finally, since 2.0.4, the API version matches the program version.\n */\n \t\t\t// if applicable replace placeholder \t\t\t// if graphid-column was not set, this must be done later. temporary graphid=-1 \t\t// for GUI unit test, just return true /** \n * imports the \"warning\"-triggers\n * @throws JSONException\n * @throws IOException\n * @throws HttpAuthorizationRequiredException\n * @throws NoAPIAccessException\n */\n \t\t\t// event is parsed and can be inserted into the db \t\tpublic static final int EVENT_GET_TIME_FROM_SHIFT = 7*24*60*60; // -7 days \t\t// http request \t\t\t\t\t// store hosts namen \t\t\t\t// http auth failed \t\t\t\t\t// at this point itemid and hostid is unknown \t\t\t\t\t// import triggers \t\t\t// we try them all, until we get results. /** \n * importiert ein trigger mit dem attribute itemid. ggf. wird der trigger zuerst gelöscht und neu angelegt. imports a trigger with the attribute itemid. if trigger already exists, it will be removed first.\n * @param triggerid\n * @throws JSONException\n * @throws IOException\n * @throws HttpAuthorizationRequiredException\n * @throws NoAPIAccessException\n */\n \t\t\t\t\t// import hosts \t\t\t// for unit test \t\t\t\t// ignore \t\t\t// or a json object /** \n * zabbix error: no api access\n */\n /** \n * counts the sql inserts/updates and do a transaction commit to save the memory\n */\n \t\t\t// send intent to GUI \t\t\t\t\t// before zabbix 2.x the name field was \"description\" \t\t\t\t\t// if we get an empty array, we try another history parameter \t\t\t\t\t// store the first item id \t\t// check if the trigger exists and if the itemid was set /** \n * global constants\n */\n \t\t\t\t// create \"other\" hostgroup #1 \t\t\t// if there's no application, the ID #0 must be added (for other) \t\t\t\t\t// because of this, all applicationrelations will be saved with itemid and hostid \"-1\". \t\t\t\t\t\t.put(\"history\", historytype) // for integer ? /** \n * interface to connect to the zabbix server\n */\n /** \n * acknowledge zabbix event. Sets ack-flag with comment. Caution: This is supported only for Zabbix version >= 1.8.4\n * @param eventid\n * @param comment\n * @return true, success.\n * @throws ClientProtocolException\n * @throws IOException\n * @throws JSONException\n * @throws HttpAuthorizationRequiredException\n * @throws NoAPIAccessException\n */\n \t\t\t// store the last stream to close it if an exception will be thrown /** \n * zabbix api call as stream.\n * @param method\n * @param params\n * @return stream im json array wrapper\n * @throws JSONException\n * @throws IOException\n * @throws HttpAuthorizationRequiredException\n * @throws NoAPIAccessException\n */\n \t\t// if applicable http auth \t\t\t// correct historytype found and there are data \t\t\t\t// count of the entries cannot be detected (zabbix bug), /** \n * import items from stream.\n * @param items stream\n * @param numItems count for progressbar, if 0 no progressbarupdate\n * @param checkBeforeInsert if true, only make an insert if item does not exist\n * @return the first item id\n * @throws JsonParseException\n * @throws IOException\n */\n \t\t\t// collect all graphids /** \n * http auth is needed\n */\n \t\t\t// ignore for unit test /** \n * commit sql transaction\n */\n \t\t\t// delete old graphs \t\t\t// host without group will get group #0 (other) \t\t\t// there's no result \t\tpublic static final int HISTORY_GET_TIME_FROM_SHIFT = 24*60*60; // -24h \t\t// if applicable, transform the progress \t\t\t// SSL not trusted \t\t\t// internet problem \t\t\tif (jp.nextToken() != JsonToken.START_ARRAY && jp.getCurrentToken() != JsonToken.START_OBJECT) { // go inside the array \t\tpublic static final int CACHE_LIFETIME_APPLICATIONS = 2*24*60*60; // 2 days \t\t\t\t\t// since zabbix 2.x is the name of the item \"name\" \t\t\t// now the \"-1\" IDs of applicationsrelation will be replaced with the correct itemID \t\t\t// get count of hosts /** \n * import the newest events\n * @throws ClientProtocolException\n * @throws IOException\n * @throws JSONException\n * @throws HttpAuthorizationRequiredException\n * @throws NoAPIAccessException\n */\n /** \n * updates the progressbar in the gui\n * @param i 0..100\n */\n \t\t\t\t\t\t// ignore \t\t\t\t\t// first do a new auth and then try the same api call again /** \n * import the newest event of a trigger\n * @param triggerid\n * @throws JSONException\n * @throws IOException\n * @throws HttpAuthorizationRequiredException\n * @throws NoAPIAccessException\n */\n \t\t// it can be an (empty) array \t\t\t// this parameter can be \"null\" or a number 0-4. Because we don't know when to use which, \t\t\t// clear triggers"],
      "p_contents_t": ["package com.inovex.zabbixmobile.api;\n\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.net.Socket;\nimport java.net.UnknownHostException;\nimport java.security.KeyManagementException;\nimport java.security.KeyStore;\nimport java.security.KeyStoreException;\nimport java.security.NoSuchAlgorithmException;\nimport java.security.UnrecoverableKeyException;\nimport java.security.cert.CertificateException;\nimport java.security.cert.X509Certificate;\nimport java.util.ArrayList;\nimport java.util.Date;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Set;\n\nimport javax.net.ssl.SSLContext;\nimport javax.net.ssl.SSLPeerUnverifiedException;\nimport javax.net.ssl.TrustManager;\nimport javax.net.ssl.X509TrustManager;\n\nimport org.apache.http.HttpResponse;\nimport org.apache.http.HttpVersion;\nimport org.apache.http.auth.AuthScope;\nimport org.apache.http.auth.UsernamePasswordCredentials;\nimport org.apache.http.client.ClientProtocolException;\nimport org.apache.http.client.methods.HttpPost;\nimport org.apache.http.client.params.HttpClientParams;\nimport org.apache.http.conn.ClientConnectionManager;\nimport org.apache.http.conn.scheme.PlainSocketFactory;\nimport org.apache.http.conn.scheme.Scheme;\nimport org.apache.http.conn.scheme.SchemeRegistry;\nimport org.apache.http.conn.ssl.SSLSocketFactory;\nimport org.apache.http.entity.StringEntity;\nimport org.apache.http.impl.client.DefaultHttpClient;\nimport org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager;\nimport org.apache.http.params.BasicHttpParams;\nimport org.apache.http.params.HttpConnectionParams;\nimport org.apache.http.params.HttpParams;\nimport org.apache.http.params.HttpProtocolParams;\nimport org.apache.http.protocol.HTTP;\nimport org.codehaus.jackson.JsonFactory;\nimport org.codehaus.jackson.JsonParseException;\nimport org.codehaus.jackson.JsonParser;\nimport org.codehaus.jackson.JsonToken;\nimport org.json.JSONArray;\nimport org.json.JSONException;\nimport org.json.JSONObject;\n\nimport android.content.ContentValues;\nimport android.content.Context;\nimport android.content.Intent;\nimport android.content.SharedPreferences;\nimport android.database.Cursor;\nimport android.database.sqlite.SQLiteDatabase;\nimport android.database.sqlite.SQLiteQueryBuilder;\nimport android.graphics.Color;\nimport android.preference.PreferenceManager;\nimport android.util.Log;\n\nimport com.inovex.zabbixmobile.R;\nimport com.inovex.zabbixmobile.ZabbixContentProvider;\nimport com.inovex.zabbixmobile.model.ApplicationData;\nimport com.inovex.zabbixmobile.model.ApplicationItemRelationData;\nimport com.inovex.zabbixmobile.model.CacheData;\nimport com.inovex.zabbixmobile.model.EventData;\nimport com.inovex.zabbixmobile.model.GraphData;\nimport com.inovex.zabbixmobile.model.GraphItemData;\nimport com.inovex.zabbixmobile.model.HistoryDetailData;\nimport com.inovex.zabbixmobile.model.HostData;\nimport com.inovex.zabbixmobile.model.HostGroupData;\nimport com.inovex.zabbixmobile.model.ItemData;\nimport com.inovex.zabbixmobile.model.ScreenData;\nimport com.inovex.zabbixmobile.model.ScreenItemData;\nimport com.inovex.zabbixmobile.model.TriggerData;\n\n/**\n * interface to connect to the zabbix server\n */\npublic class ZabbixService {\n\tclass CustomSSLSocketFactory extends SSLSocketFactory {\n\t\tSSLContext sslContext = SSLContext.getInstance(\"TLS\");\n\n\t\tpublic CustomSSLSocketFactory(KeyStore truststore) throws NoSuchAlgorithmException, KeyManagementException, KeyStoreException, UnrecoverableKeyException {\n\t\t\tsuper(truststore);\n\t\t\tTrustManager tm = new X509TrustManager() {\n\t\t\t\t@Override\n\t\t\t\tpublic void checkClientTrusted(X509Certificate[] chain,\n\t\t\t\t\t\tString authType) throws CertificateException {\n\t\t\t\t}\n\t\t\t\t@Override\n\t\t\t\tpublic void checkServerTrusted(X509Certificate[] chain,\n\t\t\t\t\t\tString authType) throws CertificateException {\n\t\t\t\t}\n\t\t\t\t@Override\n\t\t\t\tpublic X509Certificate[] getAcceptedIssuers() {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t};\n\t\t\tsslContext.init(null, new TrustManager[] { tm }, null);\n\t\t}\n\n\t\t@Override\n\t\tpublic Socket createSocket() throws IOException {\n\t\t\treturn sslContext.getSocketFactory().createSocket();\n\t\t}\n\n\t\t@Override\n\t\tpublic Socket createSocket(Socket socket, String host, int port, boolean autoClose) throws IOException, UnknownHostException {\n\t\t\treturn sslContext.getSocketFactory().createSocket(socket, host, port, autoClose);\n\t\t}\n\t}\n\n\t/**\n\t * http auth is needed\n\t */\n\tpublic class HttpAuthorizationRequiredException extends Exception {\n\t\tprivate static final long serialVersionUID = 6632422081858878147L;\n\t}\n\n\t/**\n\t * zabbix error: no api access\n\t */\n\tpublic class NoAPIAccessException extends Exception {\n\t\tprivate static final long serialVersionUID = 6381395987443456382L;\n\t}\n\n\t/**\n\t * probably too old zabbix <= 1.8.2\n\t */\n\tpublic class PreconditionFailedException extends Exception {\n\t\tprivate static final long serialVersionUID = -2529885710860745023L;\n\t}\n\n\t/**\n\t * global constants\n\t */\n\tpublic class ZabbixConfig {\n\t\tpublic static final int APPLICATION_GET_LIMIT = 1000;\n\t\tpublic static final int EVENTS_GET_LIMIT = 60;\n\t\tpublic static final int HISTORY_GET_TIME_FROM_SHIFT = 24*60*60; // -24h\n\t\tpublic static final int HISTORY_GET_LIMIT = 8000;\n\t\tpublic static final int HOSTGROUP_GET_LIMIT = 200;\n\t\tpublic static final int HOST_GET_LIMIT = 300;\n\t\tpublic static final int ITEM_GET_LIMIT = 200;\n\t\tpublic static final int TRIGGER_GET_LIMIT = 100;\n\t\tpublic static final int EVENT_GET_TIME_FROM_SHIFT = 7*24*60*60; // -7 days\n\t\tpublic static final int CACHE_LIFETIME_APPLICATIONS = 2*24*60*60; // 2 days\n\t\tpublic static final int CACHE_LIFETIME_EVENTS = 120;\n\t\tpublic static final int CACHE_LIFETIME_HISTORY_DETAILS = 4*60;\n\t\tpublic static final int CACHE_LIFETIME_HOST_GROUPS = 7*24*60*60;\n\t\tpublic static final int CACHE_LIFETIME_HOSTS = 2*24*60*60;\n\t\tpublic static final int CACHE_LIFETIME_SCREENS = 2*24*60*60;\n\t\tpublic static final int CACHE_LIFETIME_ITEMS = 4*60;\n\t\tpublic static final int CACHE_LIFETIME_TRIGGERS = 2*60;\n\t\tpublic static final long STATUS_SHOW_TRIGGER_TIME = 14*24*60*60;\n\t\tpublic static final int HTTP_CONNECTION_TIMEOUT = 30000;\n\t}\n\n\tprivate final DefaultHttpClient httpClient;\n\tprivate final SQLiteDatabase zabbixLocalDB;\n\tprivate String url;\n\tprivate String token;\n\tprivate final Context context;\n\tprivate int _transactionStack;\n\tprivate JsonParser lastStream;\n\tprivate int transformProgressStart;\n\tprivate int transformProgressEnd;\n\tprivate boolean _notAuthorizedRetry;\n\tprivate boolean isVersion2 = true;\n\t/**\n\t * The API version. From 1.8.3 (maybe earlier) to 2.0 (excluded), this was 1.3. With 2.0, it changed to 1.4. \n\t * Finally, since 2.0.4, the API version matches the program version.\n\t */\n\tprivate String apiVersion = \"\";\n\n\t/**\n\t * init\n\t * @param context android context\n\t * @param zabbixLocalDB sqlite\n\t */\n\tpublic ZabbixService(Context context, SQLiteDatabase zabbixLocalDB) {\n\t\tClientConnectionManager ccm = null;\n\t\tHttpParams params = null;\n\n\t\ttry {\n\t\t\tSharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(context);\n\t\t\tif (prefs.getBoolean(\"zabbix_trust_all_ssl_ca\", false)) {\n\t\t\t\tKeyStore trustStore = KeyStore.getInstance(KeyStore.getDefaultType());\n\t\t\t\ttrustStore.load(null, null);\n\n\t\t\t\tSSLSocketFactory sf = new CustomSSLSocketFactory(trustStore);\n\t\t\t\tsf.setHostnameVerifier(SSLSocketFactory.ALLOW_ALL_HOSTNAME_VERIFIER);\n\n\t\t\t\tparams = new BasicHttpParams();\n\t\t\t\tHttpProtocolParams.setVersion(params, HttpVersion.HTTP_1_1);\n\t\t\t\tHttpProtocolParams.setContentCharset(params, HTTP.UTF_8);\n\n\t\t\t\tSchemeRegistry registry = new SchemeRegistry();\n\t\t\t\tregistry.register(new Scheme(\"http\", PlainSocketFactory.getSocketFactory(), 80));\n\t\t\t\tregistry.register(new Scheme(\"https\", sf, 443));\n\n\t\t\t\tccm = new ThreadSafeClientConnManager(params, registry);\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\t// ignore for unit test\n\t\t}\n\n\t\tif (ccm == null || params == null) {\n\t\t\thttpClient = new DefaultHttpClient();\n\t\t} else {\n\t\t\thttpClient = new DefaultHttpClient(ccm, params);\n\t\t}\n\n\t\t// if applicable http auth\n\t\ttry {\n\t\t\tSharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(context);\n\t\t\tif (prefs.getBoolean(\"http_auth_enabled\", false)) {\n\t\t\t\tString user = prefs.getString(\"http_auth_username\", \"\");\n\t\t\t\tString pwd = prefs.getString(\"http_auth_password\", \"\");\n\t\t\t\thttpClient.getCredentialsProvider().setCredentials(AuthScope.ANY, new UsernamePasswordCredentials(user, pwd));\n\t\t\t}\n\t\t} catch (java.lang.UnsupportedOperationException e1) {\n\t\t\t// for unit test\n\t\t}\n\n\t\tparams = httpClient.getParams();\n\t\tHttpClientParams.setRedirecting(params, true); // redirecting\n\t\tHttpConnectionParams.setConnectionTimeout(params, ZabbixConfig.HTTP_CONNECTION_TIMEOUT);\n\t\tthis.context = context;\n\t\tthis.zabbixLocalDB = zabbixLocalDB;\n\t}\n\n\t/**\n\t * counts the sql inserts/updates and do a transaction commit to save the memory\n\t */\n\tprivate void _commitTransactionIfRecommended() {\n\t\tif (_transactionStack++ > 50) {\n\t\t\t_endTransaction();\n\t\t\t_startTransaction();\n\t\t}\n\t}\n\n\t/**\n\t * commit sql transaction\n\t */\n\tpublic void _endTransaction() {\n\t\tif (zabbixLocalDB.inTransaction()) {\n\t\t\tzabbixLocalDB.setTransactionSuccessful();\n\t\t\tzabbixLocalDB.endTransaction();\n\t\t}\n\t}\n\n\t/**\n\t * zabbix api call. data will be parsed as json object on-the-fly.\n\t * Caution: use this only for api calls with a small return data.\n\t * @param method\n\t * @param params\n\t * @return\n\t * @throws ClientProtocolException\n\t * @throws IOException\n\t * @throws JSONException\n\t * @throws HttpAuthorizationRequiredException\n\t * @throws NoAPIAccessException\n\t */\n\tprivate JSONObject _queryBuffer(String method, JSONObject params) throws ClientProtocolException, IOException, JSONException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\tHttpPost post = new HttpPost(url);\n\t\tpost.addHeader(\"Content-Type\", \"application/json; charset=utf-8\");\n\n\t\tString json =\n\t\t\t\"{\" +\n\t\t\t\"\t\\\"jsonrpc\\\" : \\\"2.0\\\",\" +\n\t\t\t\"\t\\\"method\\\" : \\\"\"+method+\"\\\",\" +\n\t\t\t\"\t\\\"params\\\" : \"+params.toString()+\",\" +\n\t\t\t\"\t\\\"auth\\\" : \"+(token==null?\"null\":'\"'+token+'\"')+\",\" +\n\t\t\t\"\t\\\"id\\\" : 0\" +\n\t\t\t\"}\";\n\n\t\tpost.setEntity(new StringEntity(json, \"UTF-8\"));\n\t\ttry {\n\t\t\tHttpResponse resp = httpClient.execute(post);\n\t\t\tif (resp.getStatusLine().getStatusCode() == 401) {\n\t\t\t\t// http auth failed\n\t\t\t\tthrow new HttpAuthorizationRequiredException();\n\t\t\t} else if (resp.getStatusLine().getStatusCode() == 412) {\n\t\t\t\t\t// Precondition failed / Looks like Zabbix 1.8.2\n\t\t\t\tthrow new PreconditionFailedException();\n\t\t\t} else if (resp.getStatusLine().getStatusCode() == 404) {\n\t\t\t\t// file not found\n\t\t\t\tthrow new IOException(resp.getStatusLine().getStatusCode()+\" \"+resp.getStatusLine().getReasonPhrase());\n\t\t\t} else {\n\t\t\t\tLog.d(\"ZabbixService\", resp.getStatusLine().getStatusCode()+\" \"+resp.getStatusLine().getReasonPhrase());\n\t\t\t}\n\t\t\tStringBuilder total = new StringBuilder();\n\t\t\tBufferedReader rd = new BufferedReader(new InputStreamReader(resp.getEntity().getContent()));\n\t\t\tint chr;\n\t\t\twhile ((chr = rd.read()) != -1) {\n\t\t\t\ttotal.append((char) chr);\n\t\t\t}\n\t\t\tJSONObject result = new JSONObject(total.toString());\n\t\t\ttry {\n\t\t\t\tif (result.getJSONObject(\"error\") != null) {\n\t\t\t\t\tif (result.getJSONObject(\"error\").getString(\"data\").equals(\"No API access\")) {\n\t\t\t\t\t\tthrow new NoAPIAccessException();\n\t\t\t\t\t} else throw new RuntimeException(result.getJSONObject(\"error\").toString());\n\t\t\t\t}\n\t\t\t\tif (result.getString(\"data\").equals(\"Not authorized\")) {\n\t\t\t\t\t// first do a new auth and then try the same api call again\n\t\t\t\t\tif (authenticate() && !_notAuthorizedRetry) {\n\t\t\t\t\t\t_notAuthorizedRetry = true;\n\t\t\t\t\t\tJSONObject r = _queryBuffer(method, params);\n\t\t\t\t\t\t_notAuthorizedRetry = false;\n\t\t\t\t\t\treturn r;\n\t\t\t\t\t} throw new IllegalStateException(result.toString());\n\t\t\t\t}\n\t\t\t} catch (JSONException e) {\n\t\t\t\t// ignore\n\t\t\t}\n\t\t\treturn result;\n\t\t} catch (SSLPeerUnverifiedException e) {\n\t\t\t// SSL not trusted\n\t\t\tIntent intent = new Intent(ZabbixContentProvider.CONTENT_PROVIDER_INTENT_ACTION);\n\t\t\tintent.putExtra(\"flag\", ZabbixContentProvider.INTENT_FLAG_SSL_NOT_TRUSTED);\n\t\t\tcontext.sendBroadcast(intent);\n\t\t\tthrow e;\n\t\t} catch (IOException e) {\n\t\t\t// internet problem\n\t\t\t// send intent to GUI\n\t\t\tIntent intent = new Intent(ZabbixContentProvider.CONTENT_PROVIDER_INTENT_ACTION);\n\t\t\tintent.putExtra(\"flag\", ZabbixContentProvider.INTENT_FLAG_CONNECTION_FAILED);\n\t\t\tintent.putExtra(\"value\", e.getMessage());\n\t\t\tcontext.sendBroadcast(intent);\n\t\t\tthrow e;\n\t\t}\n\t}\n\n\t/**\n\t * zabbix api call as stream.\n\t * @param method\n\t * @param params\n\t * @return stream im json array wrapper\n\t * @throws JSONException\n\t * @throws IOException\n\t * @throws HttpAuthorizationRequiredException\n\t * @throws NoAPIAccessException\n\t */\n\tprivate JsonArrayOrObjectReader _queryStream(String method, JSONObject params) throws JSONException, IOException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\t// http request\n\t\tHttpPost post = new HttpPost(url);\n\t\tpost.addHeader(\"Content-Type\", \"application/json; charset=utf-8\");\n\n\t\tJSONObject json = new JSONObject()\n\t\t\t.put(\"jsonrpc\", \"2.0\")\n\t\t\t.put(\"method\", method)\n\t\t\t.put(\"params\", params)\n\t\t\t.put(\"auth\", token)\n\t\t\t.put(\"id\", 0);\n\n\t\tLog.d(\"ZabbixService\", \"_queryStream: \"+url);\n\t\tLog.d(\"ZabbixService\", \"_queryStream: \"+json.toString());\n\n\t\tpost.setEntity(new StringEntity(json.toString(), \"UTF-8\"));\n\t\ttry {\n\t\t\tHttpResponse resp = httpClient.execute(post);\n\t\t\tif (resp.getStatusLine().getStatusCode() == 401) {\n\t\t\t\t// http auth failed\n\t\t\t\tthrow new HttpAuthorizationRequiredException();\n\t\t\t}\n\n\t\t\tJsonFactory jsonFac = new JsonFactory();\n\t\t\tJsonParser jp = jsonFac.createJsonParser(resp.getEntity().getContent());\n\t\t\t// store the last stream to close it if an exception will be thrown\n\t\t\tlastStream = jp;\n\t\t\tif (jp.nextToken() != JsonToken.START_OBJECT) {\n\t\t\t\tthrow new IOException(\"Expected data to start with an Object\");\n\t\t\t}\n\t\t\tdo {\n\t\t\t\tjp.nextToken();\n\t\t\t\tif (jp.getCurrentName().equals(\"error\")) {\n\t\t\t\t\tjp.nextToken();\n\t\t\t\t\tString errortxt = \"\";\n\t\t\t\t\twhile (jp.nextToken() != JsonToken.END_OBJECT) {\n\t\t\t\t\t\terrortxt += jp.getText();\n\t\t\t\t\t}\n\t\t\t\t\tif (errortxt.contains(\"No API access\")) {\n\t\t\t\t\t\tthrow new NoAPIAccessException();\n\t\t\t\t\t} else if (errortxt.contains(\"Not authorized\")) {\n\t\t\t\t\t\t// first do a new auth and then try the same api call again\n\t\t\t\t\t\tif (authenticate() && !_notAuthorizedRetry) {\n\t\t\t\t\t\t\t_notAuthorizedRetry = true;\n\t\t\t\t\t\t\tJsonArrayOrObjectReader r = _queryStream(method, params);\n\t\t\t\t\t\t\t_notAuthorizedRetry = false;\n\t\t\t\t\t\t\treturn r;\n\t\t\t\t\t\t} else throw new IllegalStateException(errortxt);\n\t\t\t\t\t} else throw new IllegalStateException(\"JSON API Error: \"+errortxt);\n\t\t\t\t}\n\t\t\t} while (!jp.getCurrentName().equals(\"result\"));\n\n\t\t\t// result array found\n\t\t\tif (jp.nextToken() != JsonToken.START_ARRAY && jp.getCurrentToken() != JsonToken.START_OBJECT) { // go inside the array\n\t\t\t\ttry {\n\t\t\t\t\tLog.d(\"ZabbixService\", \"current token: \"+jp.getCurrentToken());\n\t\t\t\t\tLog.d(\"ZabbixService\", \"current name: \"+jp.getCurrentName());\n\t\t\t\t\tLog.d(\"ZabbixService\", \"get text: \"+jp.getText());\n\t\t\t\t\tLog.d(\"ZabbixService\", \"next value: \"+jp.nextValue());\n\t\t\t\t\tLog.d(\"ZabbixService\", \"next token: \"+jp.nextToken());\n\t\t\t\t\tLog.d(\"ZabbixService\", \"current token: \"+jp.getCurrentToken());\n\t\t\t\t\tLog.d(\"ZabbixService\", \"current name: \"+jp.getCurrentName());\n\t\t\t\t\tLog.d(\"ZabbixService\", \"get text: \"+jp.getText());\n\t\t\t\t} catch (Exception e) {}\n\t\t\t\tthrow new IOException(\"Expected data to start with an Array\");\n\t\t\t}\n\t\t\treturn new JsonArrayOrObjectReader(jp);\n\t\t} catch (SSLPeerUnverifiedException e) {\n\t\t\tthrow e;\n\t\t} catch (IOException e) {\n\t\t\t// internet problem\n\t\t\t// send intent to GUI\n\t\t\tIntent intent = new Intent(ZabbixContentProvider.CONTENT_PROVIDER_INTENT_ACTION);\n\t\t\tintent.putExtra(\"flag\", ZabbixContentProvider.INTENT_FLAG_CONNECTION_FAILED);\n\t\t\tcontext.sendBroadcast(intent);\n\t\t\tthrow e;\n\t\t}\n\t}\n\n\t/**\n\t * begin sql transaction\n\t */\n\tprivate void _startTransaction() {\n\t\tzabbixLocalDB.beginTransaction();\n\t\t_transactionStack = 0;\n\t}\n\n\t/**\n\t * acknowledge zabbix event. Sets ack-flag with comment.\n\t * Caution: This is supported only for Zabbix version >= 1.8.4\n\t * @param eventid\n\t * @param comment\n\t * @return true, success.\n\t * @throws ClientProtocolException\n\t * @throws IOException\n\t * @throws JSONException\n\t * @throws HttpAuthorizationRequiredException\n\t * @throws NoAPIAccessException\n\t */\n\tpublic boolean acknowledgeEvent(String eventid, String comment) throws ClientProtocolException, IOException, JSONException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\t// for GUI unit test, just return true\n\t\tif (comment != null && comment.equals(\"__UNIT_TEST__RETURN_TRUE__\")) return true;\n\n\t\tJSONObject result = _queryBuffer(\n\t\t\t\t\"event.acknowledge\"\n\t\t\t\t, new JSONObject()\n\t\t\t\t\t.put(\"eventids\", new JSONArray().put(eventid))\n\t\t);\n\t\t// it can be an (empty) array\n\t\ttry {\n\t\t\treturn result.getJSONObject(\"result\").getJSONArray(\"eventids\").length() == 1;\n\t\t} catch (JSONException e) {\n\t\t\t// or a json object\n\t\t\treturn result.getJSONObject(\"result\").getJSONObject(\"eventids\").length() == 1;\n\t\t}\n\t}\n\n\t/**\n\t * zabbix auth. user and pwd from app preferences\n\t * @return true success\n\t * @throws ClientProtocolException\n\t * @throws IOException\n\t * @throws JSONException\n\t * @throws HttpAuthorizationRequiredException\n\t * @throws NoAPIAccessException\n\t */\n\tpublic boolean authenticate() throws ClientProtocolException, IOException, JSONException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\tSharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(context);\n\t\tString url = prefs.getString(\"zabbix_url\", \"\").trim();\n\t\tString user = prefs.getString(\"zabbix_username\", \"\").trim();\n\t\tString password = prefs.getString(\"zabbix_password\", \"\");\n\n\t\tthis.url = url+(url.endsWith(\"/\")?\"\":'/')+\"api_jsonrpc.php\";\n\t\tLog.d(\"ZabbixContentProvider\", url+\"//\"+user);\n\n\t\ttry {\n\t\t\tJSONObject result = _queryBuffer(\n\t\t\t\t\t\"user.authenticate\"\n\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t\t.put(\"user\", user)\n\t\t\t\t\t\t.put(\"password\", password)\n\t\t\t);\n\t\t\ttoken = result.getString(\"result\");\n\t\t} catch (JSONException e) {\n\t\t\t// there's no result\n\t\t\te.printStackTrace();\n\t\t} catch (RuntimeException e) {\n\t\t\t// wrong password. token remains null\n\t\t\te.printStackTrace();\n\t\t}\n\t\tif (token != null) {\n\t\t\t// get API version\n\t\t\tJSONObject result = _queryBuffer(\n\t\t\t\t\t\"apiinfo.version\"\n\t\t\t\t\t, new JSONObject()\n\t\t\t);\n\t\t\tapiVersion = result.getString(\"result\");\n\t\t\tisVersion2 = (apiVersion.equals(\"1.4\") || apiVersion.startsWith(\"2\"));\n\t\t\tLog.i(\"ZabbixService\", \"Zabbix API Version: \" + apiVersion);\n\t\t}\n\t\treturn token != null;\n\t}\n\n\t/**\n\t * close the last http stream\n\t */\n\tpublic void closeLastStream() {\n\t\tif (lastStream != null && !lastStream.isClosed()) {\n\t\t\ttry {\n\t\t\t\tlastStream.close();\n\t\t\t} catch (IOException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate void importApplications(long hostid, long itemid, JsonArrayOrObjectReader jsonArray) throws JsonParseException, NumberFormatException, IOException {\n\t\tint num = 0;\n\t\tJsonObjectReader application;\n\t\twhile ((application = jsonArray.next()) != null) {\n\t\t\tApplicationData app = new ApplicationData();\n\t\t\twhile (application.nextValueToken()) {\n\t\t\t\tString propName = application.getCurrentName();\n\t\t\t\tif (propName.equals(ApplicationData.COLUMN_APPLICATIONID)) {\n\t\t\t\t\tapp.set(ApplicationData.COLUMN_APPLICATIONID, Long.parseLong(application.getText()));\n\t\t\t\t} else if (propName.equals(ApplicationData.COLUMN_NAME)) {\n\t\t\t\t\tapp.set(ApplicationData.COLUMN_NAME, application.getText());\n\t\t\t\t} else if (propName.equals(ApplicationData.COLUMN_HOSTID)) {\n\t\t\t\t\tapp.set(ApplicationData.COLUMN_HOSTID, Long.parseLong(application.getText()));\n\t\t\t\t} else {\n\t\t\t\t\tapplication.nextProperty();\n\t\t\t\t}\n\t\t\t}\n\t\t\t// create applications that does not exist\n\t\t\tapp.insert(zabbixLocalDB, ApplicationData.COLUMN_APPLICATIONID);\n\t\t\t_commitTransactionIfRecommended();\n\n\t\t\t// create ApplicationItemRelation\n\t\t\tlong appid = (Long) app.get(ApplicationData.COLUMN_APPLICATIONID);\n\t\t\tApplicationItemRelationData rel = new ApplicationItemRelationData();\n\t\t\trel.set(ApplicationItemRelationData.COLUMN_APPLICATIONID, appid);\n\t\t\trel.set(ApplicationItemRelationData.COLUMN_ITEMID, itemid);\n\t\t\trel.set(ApplicationItemRelationData.COLUMN_HOSTID, hostid);\n\t\t\trel.insert(zabbixLocalDB);\n\t\t\t_commitTransactionIfRecommended();\n\n\t\t\tnum++;\n\t\t}\n\t\tif (num == 0) {\n\t\t\t// if there's no application, the ID #0 must be added (for other)\n\t\t\tApplicationItemRelationData rel = new ApplicationItemRelationData();\n\t\t\trel.set(ApplicationItemRelationData.COLUMN_APPLICATIONID, 0);\n\t\t\trel.set(ApplicationItemRelationData.COLUMN_ITEMID, itemid);\n\t\t\trel.set(ApplicationItemRelationData.COLUMN_HOSTID, hostid);\n\t\t\trel.insert(zabbixLocalDB);\n\n\t\t\t// if #0 \"other\" does not exist yet, it has to be created\n\t\t\tApplicationData app = new ApplicationData();\n\t\t\tapp.set(ApplicationData.COLUMN_APPLICATIONID, 0);\n\t\t\tapp.set(ApplicationData.COLUMN_NAME, \"- \"+context.getResources().getString(R.string.other)+\" -\");\n\t\t\tapp.insert(zabbixLocalDB, ApplicationData.COLUMN_APPLICATIONID);\n\t\t}\n\t}\n\n\t/**\n\t * import the newest event of a trigger\n\t * @param triggerid\n\t * @throws JSONException\n\t * @throws IOException\n\t * @throws HttpAuthorizationRequiredException\n\t * @throws NoAPIAccessException\n\t */\n\tpublic void importEventByTriggerId(String triggerid) throws JSONException, IOException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\tif (!isCached(EventData.TABLE_NAME, \"triggerid=\"+triggerid)) {\n\t\t\t_startTransaction();\n\t\t\tzabbixLocalDB.delete(EventData.TABLE_NAME, EventData.COLUMN_OBJECTID+\"=\"+triggerid, null);\n\n\t\t\tJSONObject params = new JSONObject()\n\t\t\t\t.put(\"output\", \"extend\")\n\t\t\t\t.put(isVersion2?\"selectHosts\":\"select_hosts\", \"extend\")\n\t\t\t\t.put(\"triggerids\", new JSONArray().put(triggerid))\n\t\t\t\t.put(\"limit\", 1)\n\t\t\t\t.put(\"source\", 0);\n\t\t\tif (!isVersion2) {\n\t\t\t\tparams.put(\"sortfield\", \"clock\")\n\t\t\t\t\t.put(\"sortorder\", \"DESC\");\n\t\t\t}\n\n\t\t\tJsonArrayOrObjectReader events = _queryStream(\n\t\t\t\t\t\"event.get\"\n\t\t\t\t\t, params\n\t\t\t);\n\t\t\timportEvents(events, null);\n\t\t\tevents.close();\n\n\t\t\tsetCached(EventData.TABLE_NAME, \"triggerid=\"+triggerid, ZabbixConfig.CACHE_LIFETIME_EVENTS);\n\t\t\t_endTransaction();\n\t\t}\n\t}\n\n\t/**\n\t * import the newest events\n\t * @throws ClientProtocolException\n\t * @throws IOException\n\t * @throws JSONException\n\t * @throws HttpAuthorizationRequiredException\n\t * @throws NoAPIAccessException\n\t */\n\tpublic void importEvents() throws ClientProtocolException, IOException, JSONException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\tif (!isCached(EventData.TABLE_NAME, null)) {\n\t\t\t_startTransaction();\n\t\t\tzabbixLocalDB.delete(EventData.TABLE_NAME, null, null);\n\t\t\tzabbixLocalDB.delete(TriggerData.TABLE_NAME, null, null);\n\t\t\tzabbixLocalDB.delete(CacheData.TABLE_NAME, CacheData.COLUMN_KIND+\"='\"+EventData.TABLE_NAME+\"'\", null);\n\t\t\tzabbixLocalDB.delete(CacheData.TABLE_NAME, CacheData.COLUMN_KIND+\"='\"+TriggerData.TABLE_NAME+\"'\", null);\n\n\t\t\tint numEvents = ZabbixConfig.EVENTS_GET_LIMIT;\n\n\t\t\tJSONObject params = new JSONObject()\n\t\t\t\t.put(\"output\", \"extend\")\n\t\t\t\t.put(\"limit\", ZabbixConfig.EVENTS_GET_LIMIT)\n\t\t\t\t.put(isVersion2?\"selectHosts\":\"select_hosts\", \"extend\")\n\t\t\t\t.put(isVersion2?\"selectTriggers\":\"select_triggers\", \"extend\")\n\t\t\t\t.put(\"source\", 0)\n\t\t\t\t.put(\"time_from\", (new Date().getTime()/1000) - ZabbixConfig.EVENT_GET_TIME_FROM_SHIFT);\n\t\t\tif (!isVersion2) {\n\t\t\t\t// in Zabbix version <2.0, this is not default\n\t\t\t\tparams.put(\"sortfield\", \"clock\")\n\t\t\t\t\t.put(\"sortorder\", \"DESC\");\n\t\t\t}\n\t\t\tJsonArrayOrObjectReader events = _queryStream(\n\t\t\t\t\t\"event.get\"\n\t\t\t\t\t, params\n\t\t\t);\n\t\t\timportEvents(events, numEvents);\n\t\t\tevents.close();\n\n\t\t\tsetCached(EventData.TABLE_NAME, null, ZabbixConfig.CACHE_LIFETIME_EVENTS);\n\t\t\t_endTransaction();\n\t\t}\n\t}\n\n\t/**\n\t * @param events stream\n\t * @param numEvents if null, no progressbar-update AND only isert, if it does not exist. If !null, progressbar-update AND always insert without checking\n\t * @throws JsonParseException\n\t * @throws IOException\n\t */\n\tprivate void importEvents(JsonArrayOrObjectReader events, Integer numEvents) throws JsonParseException, IOException {\n\t\tint i=0;\n\t\tJsonObjectReader eventReader;\n\t\twhile ((eventReader = events.next()) != null) {\n\t\t\tEventData e = new EventData();\n\t\t\twhile (eventReader.nextValueToken()) {\n\t\t\t\tString propName = eventReader.getCurrentName();\n\t\t\t\tif (propName.equals(\"hosts\")) {\n\t\t\t\t\t// import hosts\n\t\t\t\t\tString hostnames = (String) importHosts(eventReader.getJsonArray(), null)[0];\n\t\t\t\t\t// store hosts namen\n\t\t\t\t\te.set(EventData.COLUMN_HOSTS, hostnames);\n\t\t\t\t} else if (propName.equals(\"triggers\")) {\n\t\t\t\t\t// import triggers\n\t\t\t\t\timportTriggers(eventReader.getJsonArray());\n\t\t\t\t} else if (propName.equals(EventData.COLUMN_EVENTID)) {\n\t\t\t\t\te.set(EventData.COLUMN_EVENTID, Long.parseLong(eventReader.getText()));\n\t\t\t\t} else if (propName.equals(EventData.COLUMN_CLOCK)) {\n\t\t\t\t\te.set(EventData.COLUMN_CLOCK, Integer.parseInt(eventReader.getText()));\n\t\t\t\t} else if (propName.equals(EventData.COLUMN_OBJECTID)) {\n\t\t\t\t\te.set(EventData.COLUMN_OBJECTID, Long.parseLong(eventReader.getText()));\n\t\t\t\t} else if (propName.equals(EventData.COLUMN_ACK)) {\n\t\t\t\t\te.set(EventData.COLUMN_ACK, Integer.parseInt(eventReader.getText()) == 1);\n\t\t\t\t} else if (propName.equals(EventData.COLUMN_VALUE)) {\n\t\t\t\t\te.set(EventData.COLUMN_VALUE, Integer.parseInt(eventReader.getText()));\n\t\t\t\t} else {\n\t\t\t\t\teventReader.nextProperty();\n\t\t\t\t}\n\t\t\t}\n\t\t\t// event is parsed and can be inserted into the db\n\t\t\tif (numEvents == null) {\n\t\t\t\te.insert(zabbixLocalDB, EventData.COLUMN_EVENTID);\n\t\t\t} else {\n\t\t\t\te.insert(zabbixLocalDB);\n\t\t\t\tif (++i % 10 == 0) {\n\t\t\t\t\tshowProgress(i*100/numEvents);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t_commitTransactionIfRecommended();\n\t\t}\n\t}\n\n\t/**\n\t * import graph items\n\t *\n\t * @param graphItems\n\t * @return true, if graphid column has to be updated from -1 to the correct graphid later.\n\t * @throws JsonParseException\n\t * @throws NumberFormatException\n\t * @throws IOException\n\t */\n\tprivate boolean importGraphItems(JsonArrayOrObjectReader graphItems) throws JsonParseException, NumberFormatException, IOException {\n\t\tboolean mustSetGraphid = false;\n\t\tJsonObjectReader graphItemReader;\n\t\twhile ((graphItemReader = graphItems.next()) != null) {\n\t\t\tGraphItemData gi = new GraphItemData();\n\t\t\twhile (graphItemReader.nextValueToken()) {\n\t\t\t\tString propName = graphItemReader.getCurrentName();\n\t\t\t\tif (propName.equals(\"gitemid\")) {\n\t\t\t\t\tgi.set(GraphItemData.COLUMN_GRAPHITEMID, Long.parseLong(graphItemReader.getText()));\n\t\t\t\t} else if (propName.equals(GraphItemData.COLUMN_GRAPHID)) {\n\t\t\t\t\tgi.set(GraphItemData.COLUMN_GRAPHID, Long.parseLong(graphItemReader.getText()));\n\t\t\t\t} else if (propName.equals(GraphItemData.COLUMN_ITEMID)) {\n\t\t\t\t\tgi.set(GraphItemData.COLUMN_ITEMID, Long.parseLong(graphItemReader.getText()));\n\t\t\t\t} else if (propName.equals(GraphItemData.COLUMN_COLOR)) {\n\t\t\t\t\t// hex string => color int\n\t\t\t\t\tgi.set(GraphItemData.COLUMN_COLOR, Color.parseColor(\"#\"+graphItemReader.getText()));\n\t\t\t\t} else {\n\t\t\t\t\tgraphItemReader.nextProperty();\n\t\t\t\t}\n\t\t\t}\n\t\t\t// if graphid-column was not set, this must be done later. temporary graphid=-1\n\t\t\tif (gi.get(GraphItemData.COLUMN_GRAPHID) == null) {\n\t\t\t\tgi.set(GraphItemData.COLUMN_GRAPHID, -1);\n\t\t\t\tmustSetGraphid = true;\n\t\t\t}\n\t\t\tgi.insert(zabbixLocalDB);\n\t\t}\n\t\treturn mustSetGraphid;\n\t}\n\n\tpublic void importGraphsForScreen(long screenid) throws ClientProtocolException, IOException, JSONException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\tif (!isCached(GraphData.TABLE_NAME, \"screenid=\"+screenid)) {\n\t\t\t_startTransaction();\n\n\t\t\t// collect all graphids\n\t\t\tSet<Long> graphids = new HashSet<Long>();\n\t\t\tCursor cur = zabbixLocalDB.query(ScreenItemData.TABLE_NAME, null, ScreenItemData.COLUMN_SCREENID+\"=\"+screenid, null, null, null, null);\n\t\t\twhile (cur.moveToNext()) {\n\t\t\t\tgraphids.add(cur.getLong(cur.getColumnIndex(ScreenItemData.COLUMN_RESOURCEID)));\n\t\t\t}\n\n\t\t\t// delete old graphs\n\t\t\tString str_graphids = graphids.toString().replace(\"[\", \"\").replace(\"]\", \"\");\n\t\t\tif (str_graphids.length()>0) {\n\t\t\t\tzabbixLocalDB.delete(GraphData.TABLE_NAME, GraphData.COLUMN_GRAPHID+\" IN (\"+str_graphids+\")\", null);\n\t\t\t\tzabbixLocalDB.delete(GraphItemData.TABLE_NAME, GraphItemData.COLUMN_GRAPHID+\" IN (\"+str_graphids+\")\", null);\n\t\t\t}\n\t\t\tzabbixLocalDB.delete(CacheData.TABLE_NAME, CacheData.COLUMN_KIND+\"='\"+GraphData.TABLE_NAME+\"' AND \"+CacheData.COLUMN_FILTER+\"='screenid=\"+screenid+'\\'', null);\n\n\t\t\tJsonArrayOrObjectReader graphs = _queryStream(\n\t\t\t\t\t\"graph.get\"\n\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t\t.put(isVersion2?\"selectGraphItems\":\"select_graph_items\", \"extend\")\n\t\t\t\t\t\t.put(isVersion2?\"selectItems\":\"select_items\", \"extend\")\n\t\t\t\t\t\t.put(\"output\", \"extend\")\n\t\t\t\t\t\t.put(\"graphids\", new JSONArray(graphids))\n\t\t\t);\n\t\t\tJsonObjectReader graphReader;\n\t\t\twhile ((graphReader = graphs.next()) != null) {\n\t\t\t\tboolean mustSetGraphid = false;\n\t\t\t\tGraphData scr = new GraphData();\n\t\t\t\twhile (graphReader.nextValueToken()) {\n\t\t\t\t\tString propName = graphReader.getCurrentName();\n\t\t\t\t\tif (propName.equals(GraphData.COLUMN_GRAPHID)) {\n\t\t\t\t\t\tscr.set(GraphData.COLUMN_GRAPHID, Long.parseLong(graphReader.getText()));\n\t\t\t\t\t} else if (propName.equals(GraphData.COLUMN_NAME)) {\n\t\t\t\t\t\tscr.set(GraphData.COLUMN_NAME, graphReader.getText());\n\t\t\t\t\t} else if (propName.equals(\"gitems\")) {\n\t\t\t\t\t\tmustSetGraphid = importGraphItems(graphReader.getJsonArray());\n\t\t\t\t\t} else if (propName.equals(\"items\")) {\n\t\t\t\t\t\timportItems(graphReader.getJsonArray(), 0, true);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tgraphReader.nextProperty();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tscr.insert(zabbixLocalDB);\n\t\t\t\tif (mustSetGraphid) {\n\t\t\t\t\tContentValues values = new ContentValues(1);\n\t\t\t\t\tvalues.put(GraphItemData.COLUMN_GRAPHID, (Long) scr.get(GraphData.COLUMN_GRAPHID));\n\t\t\t\t\tzabbixLocalDB.update(\n\t\t\t\t\t\t\tGraphItemData.TABLE_NAME\n\t\t\t\t\t\t\t, values\n\t\t\t\t\t\t\t, GraphItemData.COLUMN_GRAPHID+\"=-1\"\n\t\t\t\t\t\t\t, null);\n\t\t\t\t}\n\t\t\t}\n\t\t\tgraphs.close();\n\n\t\t\tsetCached(GraphData.TABLE_NAME, \"screenid=\"+screenid, ZabbixConfig.CACHE_LIFETIME_SCREENS);\n\t\t\t_endTransaction();\n\t\t}\n\t}\n\n\tpublic void importHistoryDetails(String itemid) throws ClientProtocolException, IOException, JSONException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\tif (!isCached(HistoryDetailData.TABLE_NAME, itemid)) {\n\t\t\t_startTransaction();\n\t\t\tzabbixLocalDB.delete(HistoryDetailData.TABLE_NAME, HistoryDetailData.COLUMN_ITEMID+\"=\"+itemid, null);\n\n\t\t\t// the past 2 hours\n\t\t\tlong time_till = new Date().getTime() / 1000;\n\t\t\tlong time_from = time_till - ZabbixConfig.HISTORY_GET_TIME_FROM_SHIFT;\n\n\t\t\t// Workaround: historydetails only comes if you use the correct \"history\"-parameter.\n\t\t\t// this parameter can be \"null\" or a number 0-4. Because we don't know when to use which,\n\t\t\t// we try them all, until we get results.\n\t\t\tInteger historytype = null;\n\t\t\tJSONObject result = _queryBuffer(\n\t\t\t\t\t\"history.get\"\n\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t\t.put(\"limit\", 1)\n\t\t\t\t\t\t.put(\"history\", historytype) // for integer ?\n\t\t\t\t\t\t.put(\"itemids\", new JSONArray().put(itemid))\n\t\t\t\t\t\t.put(\"time_from\", time_from)\n\t\t\t);\n\n\t\t\tJSONArray testHistorydetails = result.getJSONArray(\"result\");\n\t\t\tif (testHistorydetails.length() == 0) {\n\t\t\t\thistorytype = -1;\n\t\t\t\twhile (testHistorydetails.length() == 0 && ++historytype <= 4) {\n\t\t\t\t\t// if we get an empty array, we try another history parameter\n\t\t\t\t\tresult = _queryBuffer(\n\t\t\t\t\t\t\t\"history.get\"\n\t\t\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t\t\t\t.put(\"output\", \"extend\")\n\t\t\t\t\t\t\t\t.put(\"limit\", 1)\n\t\t\t\t\t\t\t\t.put(\"history\", historytype)\n\t\t\t\t\t\t\t\t.put(\"itemids\", new JSONArray().put(itemid))\n\t\t\t\t\t\t\t\t.put(\"time_from\", time_from)\n\t\t\t\t\t);\n\t\t\t\t\ttestHistorydetails = result.getJSONArray(\"result\");\n\t\t\t\t}\n\t\t\t}\n\t\t\t// correct historytype found and there are data\n\t\t\tif (testHistorydetails.length() > 0) {\n\t\t\t\t// count of the entries cannot be detected (zabbix bug),\n\t\t\t\t// so we use a fiction\n\t\t\t\tint numDetails = 400;\n\t\t\t\tint curI=0;\n\t\t\t\tJsonArrayOrObjectReader historydetails = _queryStream(\n\t\t\t\t\t\t\"history.get\"\n\t\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t\t\t.put(\"output\", \"extend\")\n\t\t\t\t\t\t\t.put(\"limit\", ZabbixConfig.HISTORY_GET_LIMIT)\n\t\t\t\t\t\t\t.put(\"history\", historytype)\n\t\t\t\t\t\t\t.put(\"itemids\", new JSONArray().put(itemid))\n\t\t\t\t\t\t\t.put(\"time_from\", time_from)\n\t\t\t\t\t\t\t.put(\"sortfield\", \"clock\")\n\t\t\t\t\t\t\t.put(\"sortorder\", \"DESC\")\n\t\t\t\t);\n\t\t\t\tJsonObjectReader historydetail;\n\t\t\t\ttry {\n\t\t\t\t\tint selI = 0;\n\t\t\t\t\twhile ((historydetail = historydetails.next()) != null) {\n\t\t\t\t\t\t// save only every 20th\n\t\t\t\t\t\tif (selI++ % 20 != 0) {\n\t\t\t\t\t\t\twhile (historydetail.nextValueToken()) {\n\t\t\t\t\t\t\t\thistorydetail.nextProperty();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tHistoryDetailData h = new HistoryDetailData();\n\t\t\t\t\t\twhile (historydetail.nextValueToken()) {\n\t\t\t\t\t\t\tString propName = historydetail.getCurrentName();\n\t\t\t\t\t\t\tif (propName.equals(HistoryDetailData.COLUMN_CLOCK)) {\n\t\t\t\t\t\t\t\th.set(HistoryDetailData.COLUMN_CLOCK, Integer.parseInt(historydetail.getText()));\n\t\t\t\t\t\t\t} else if (propName.equals(HistoryDetailData.COLUMN_ITEMID)) {\n\t\t\t\t\t\t\t\th.set(HistoryDetailData.COLUMN_ITEMID, Long.parseLong(historydetail.getText()));\n\t\t\t\t\t\t\t} else if (propName.equals(HistoryDetailData.COLUMN_VALUE)) {\n\t\t\t\t\t\t\t\th.set(HistoryDetailData.COLUMN_VALUE, Double.parseDouble(historydetail.getText()));\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\thistorydetail.nextProperty();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\th.insert(zabbixLocalDB);\n\t\t\t\t\t\tif (++curI % 10 == 0) {\n\t\t\t\t\t\t\tshowProgress(Math.min(curI*100/numDetails, 84));\n\t\t\t\t\t\t}\n\t\t\t\t\t\t_commitTransactionIfRecommended();\n\t\t\t\t\t}\n\t\t\t\t} catch (NumberFormatException e) {\n\t\t\t\t\t// data are unuseable, e.g. because it's a string\n\t\t\t\t}\n\t\t\t\thistorydetails.close();\n\t\t\t}\n\t\t\tsetCached(HistoryDetailData.TABLE_NAME, itemid, ZabbixConfig.CACHE_LIFETIME_HISTORY_DETAILS);\n\t\t\t_endTransaction();\n\t\t}\n\t}\n\n\tprivate long importHostGroups(JsonArrayOrObjectReader jsonArray) throws JsonParseException, IOException {\n\t\tlong firstHostGroupId = -1;\n\t\tJsonObjectReader hostReader;\n\t\twhile ((hostReader = jsonArray.next()) != null) {\n\t\t\tHostGroupData h = new HostGroupData();\n\t\t\twhile (hostReader.nextValueToken()) {\n\t\t\t\tString propName = hostReader.getCurrentName();\n\t\t\t\tif (propName.equals(HostGroupData.COLUMN_GROUPID)) {\n\t\t\t\t\tlong id = Long.parseLong(hostReader.getText());\n\t\t\t\t\tif (firstHostGroupId == -1) firstHostGroupId = id;\n\t\t\t\t\th.set(HostGroupData.COLUMN_GROUPID, id);\n\t\t\t\t} else if (propName.equals(HostGroupData.COLUMN_NAME)) {\n\t\t\t\t\th.set(HostGroupData.COLUMN_NAME, hostReader.getText());\n\t\t\t\t} else {\n\t\t\t\t\thostReader.nextProperty();\n\t\t\t\t}\n\t\t\t}\n\t\t\th.insert(zabbixLocalDB, HostGroupData.COLUMN_GROUPID);\n\t\t\t_commitTransactionIfRecommended();\n\t\t}\n\n\t\treturn firstHostGroupId;\n\t}\n\n\t/**\n\t * import the hosts from stream\n\t * @param jsonArray stream\n\t * @param numHosts count of hosts for progressbar. null if unknown.\n\t * @return Object[] {(String) comma-separated all Hostnames, (Long) 1. host id}\n\t * @throws JsonParseException\n\t * @throws IOException\n\t */\n\tprivate Object[] importHosts(JsonArrayOrObjectReader jsonArray, Integer numHosts) throws JsonParseException, IOException {\n\t\tList<String> hostnames = new ArrayList<String>();\n\t\tlong firstHostId = -1;\n\t\tJsonObjectReader hostReader;\n\t\tint i=0;\n\t\twhile ((hostReader = jsonArray.next()) != null) {\n\t\t\tHostData h = new HostData();\n\t\t\twhile (hostReader.nextValueToken()) {\n\t\t\t\tString propName = hostReader.getCurrentName();\n\t\t\t\tif (propName.equals(HostData.COLUMN_HOSTID)) {\n\t\t\t\t\th.set(HostData.COLUMN_HOSTID, Long.parseLong(hostReader.getText()));\n\t\t\t\t\tif (firstHostId == -1) {\n\t\t\t\t\t\tfirstHostId = (Long) h.get(HostData.COLUMN_HOSTID);\n\t\t\t\t\t}\n\t\t\t\t} else if (propName.equals(HostData.COLUMN_HOST)) {\n\t\t\t\t\tString host = hostReader.getText();\n\t\t\t\t\thostnames.add(host);\n\t\t\t\t\th.set(HostData.COLUMN_HOST, host);\n\t\t\t\t} else if (propName.equals(\"groups\")) {\n\t\t\t\t\tlong groupid = importHostGroups(hostReader.getJsonArray());\n\t\t\t\t\tif (groupid != -1) {\n\t\t\t\t\t\th.set(HostData.COLUMN_GROUPID, groupid);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\thostReader.nextProperty();\n\t\t\t\t}\n\t\t\t}\n\t\t\t// host without group will get group #0 (other)\n\t\t\tif (h.get(HostData.COLUMN_GROUPID) == null) {\n\t\t\t\th.set(HostData.COLUMN_GROUPID, 0);\n\t\t\t\t// create \"other\" hostgroup #1\n\t\t\t\tHostGroupData hg = new HostGroupData();\n\t\t\t\thg.set(HostGroupData.COLUMN_GROUPID, 0);\n\t\t\t\thg.set(HostGroupData.COLUMN_NAME, \"- \"+context.getResources().getString(R.string.other)+\" -\");\n\t\t\t\thg.insert(zabbixLocalDB, HostGroupData.COLUMN_GROUPID);\n\t\t\t}\n\t\t\th.insert(zabbixLocalDB, HostData.COLUMN_HOSTID);\n\t\t\tif (numHosts != null && ++i % 10 == 0) {\n\t\t\t\tshowProgress(i*100/numHosts);\n\t\t\t}\n\t\t\t_commitTransactionIfRecommended();\n\t\t}\n\n\t\treturn new Object[] {hostnames.toString().replaceAll(\"[\\\\[\\\\]]\", \"\"), firstHostId};\n\t}\n\n\tpublic void importHostsAndGroups() throws JSONException, IOException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\tif (!isCached(HostData.TABLE_NAME, null)) {\n\t\t\t_startTransaction();\n\t\t\tzabbixLocalDB.delete(HostData.TABLE_NAME, null, null);\n\t\t\tzabbixLocalDB.delete(HostGroupData.TABLE_NAME, null, null);\n\n\t\t\t// get count of hosts\n\t\t\tJSONObject result = _queryBuffer(\n\t\t\t\t\t\"host.get\"\n\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t\t.put(\"countOutput\", 1)\n\t\t\t\t\t\t.put(\"limit\", ZabbixConfig.HOST_GET_LIMIT)\n\t\t\t\t\t\t.put(isVersion2?\"selectGroups\":\"select_groups\", \"extend\")\n\t\t\t);\n\t\t\tint numHosts = result.getInt(\"result\");\n\t\t\tJsonArrayOrObjectReader hosts = _queryStream(\n\t\t\t\t\t\"host.get\"\n\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t\t.put(\"output\", \"extend\")\n\t\t\t\t\t\t.put(\"limit\", ZabbixConfig.HOST_GET_LIMIT)\n\t\t\t\t\t\t.put(isVersion2?\"selectGroups\":\"select_groups\", \"extend\")\n\t\t\t);\n\t\t\timportHosts(hosts, numHosts);\n\t\t\thosts.close();\n\n\t\t\tsetCached(HostData.TABLE_NAME, null, ZabbixConfig.CACHE_LIFETIME_HOSTS);\n\t\t\t_endTransaction();\n\t\t}\n\t}\n\n\t/**\n\t * import items from stream.\n\t * @param items stream\n\t * @param numItems count for progressbar, if 0 no progressbarupdate\n\t * @param checkBeforeInsert if true, only make an insert if item does not exist\n\t * @return the first item id\n\t * @throws JsonParseException\n\t * @throws IOException\n\t */\n\tprivate long importItems(JsonArrayOrObjectReader items, int numItems, boolean checkBeforeInsert) throws JsonParseException, IOException {\n\t\tlong firstItemId = -1;\n\t\tint curI=0;\n\t\tJsonObjectReader itemReader;\n\t\twhile ((itemReader = items.next()) != null) {\n\t\t\tItemData i = new ItemData();\n\t\t\tString key_ = null;\n\t\t\twhile (itemReader.nextValueToken()) {\n\t\t\t\tString propName = itemReader.getCurrentName();\n\t\t\t\tif (propName.equals(ItemData.COLUMN_ITEMID)) {\n\t\t\t\t\ti.set(ItemData.COLUMN_ITEMID, Long.parseLong(itemReader.getText()));\n\t\t\t\t\tif (firstItemId == -1) {\n\t\t\t\t\t\tfirstItemId = (Long) i.get(ItemData.COLUMN_ITEMID);\n\t\t\t\t\t}\n\t\t\t\t} else if (propName.equals(ItemData.COLUMN_HOSTID)) {\n\t\t\t\t\ti.set(ItemData.COLUMN_HOSTID, Long.parseLong(itemReader.getText()));\n\t\t\t\t} else if (propName.equals(ItemData.COLUMN_DESCRIPTION) || propName.equals(\"name\")) {\n\t\t\t\t\t// since zabbix 2.x is the name of the item \"name\"\n\t\t\t\t\t// before zabbix 2.x the name field was \"description\"\n\t\t\t\t\tif (isVersion2 && propName.equals(\"name\")) {\n\t\t\t\t\t\ti.set(ItemData.COLUMN_DESCRIPTION, itemReader.getText());\n\t\t\t\t\t} else if (!isVersion2) {\n\t\t\t\t\t\ti.set(ItemData.COLUMN_DESCRIPTION, itemReader.getText());\n\t\t\t\t\t}\n\t\t\t\t} else if (propName.equals(ItemData.COLUMN_LASTCLOCK)) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\ti.set(ItemData.COLUMN_LASTCLOCK, Integer.parseInt(itemReader.getText()));\n\t\t\t\t\t} catch (NumberFormatException e) {\n\t\t\t\t\t\t// ignore\n\t\t\t\t\t}\n\t\t\t\t} else if (propName.equals(ItemData.COLUMN_LASTVALUE)) {\n\t\t\t\t\ti.set(ItemData.COLUMN_LASTVALUE, itemReader.getText());\n\t\t\t\t} else if (propName.equals(ItemData.COLUMN_UNITS)) {\n\t\t\t\t\ti.set(ItemData.COLUMN_UNITS, itemReader.getText());\n\t\t\t\t} else if (propName.equals(\"key_\")) {\n\t\t\t\t\tkey_ = itemReader.getText();\n\t\t\t\t} else if (propName.equals(\"applications\")) {\n\t\t\t\t\t// at this point itemid and hostid is unknown\n\t\t\t\t\t// because of this, all applicationrelations will be saved with itemid and hostid \"-1\".\n\t\t\t\t\t// later the IDs will be replaced with the correct\n\t\t\t\t\timportApplications(-1, -1, itemReader.getJsonArray());\n\t\t\t\t} else {\n\t\t\t\t\titemReader.nextProperty();\n\t\t\t\t}\n\t\t\t}\n\t\t\t// if applicable replace placeholder\n\t\t\tString description = (String) i.get(ItemData.COLUMN_DESCRIPTION);\n\t\t\tif (description.matches(\".*\\\\$[0-9].*\")) {\n\t\t\t\tif (key_ != null && key_.indexOf('[') != -1) {\n\t\t\t\t\tString[] keys = key_.substring(key_.indexOf('[')+1, key_.indexOf(']')).split(\",\");\n\t\t\t\t\tfor (int ix=0; ix<keys.length; ix++) {\n\t\t\t\t\t\tdescription = description.replace(\"$\"+(ix+1), keys[ix]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\ti.set(ItemData.COLUMN_DESCRIPTION, description);\n\t\t\tif (checkBeforeInsert) {\n\t\t\t\ti.insert(zabbixLocalDB, ItemData.COLUMN_ITEMID);\n\t\t\t} else {\n\t\t\t\ti.insert(zabbixLocalDB);\n\t\t\t}\n\t\t\tif (numItems > 0 && ++curI % 10 == 0) {\n\t\t\t\tshowProgress(curI*100/numItems);\n\t\t\t}\n\n\t\t\t// now the \"-1\" IDs of applicationsrelation will be replaced with the correct itemID\n\t\t\tContentValues values = new ContentValues(2);\n\t\t\tvalues.put(ApplicationItemRelationData.COLUMN_ITEMID, (Long) i.get(ItemData.COLUMN_ITEMID));\n\t\t\tvalues.put(ApplicationItemRelationData.COLUMN_HOSTID, (Long) i.get(ItemData.COLUMN_HOSTID));\n\t\t\tzabbixLocalDB.update(\n\t\t\t\t\tApplicationItemRelationData.TABLE_NAME\n\t\t\t\t\t, values\n\t\t\t\t\t, ApplicationItemRelationData.COLUMN_ITEMID+\"=-1\"\n\t\t\t\t\t, null\n\t\t\t);\n\t\t}\n\t\treturn firstItemId;\n\t}\n\n\tpublic void importItems(long hostid) throws JSONException, IOException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\tif (!isCached(ItemData.TABLE_NAME, \"hostid=\"+hostid)) {\n\t\t\t_startTransaction();\n\t\t\tzabbixLocalDB.delete(ItemData.TABLE_NAME, ItemData.COLUMN_HOSTID+\"=\"+hostid, null);\n\t\t\tzabbixLocalDB.delete(ApplicationItemRelationData.TABLE_NAME, ApplicationItemRelationData.COLUMN_HOSTID+\"=\"+hostid, null);\n\n\t\t\t// count of items\n\t\t\tJSONObject result = _queryBuffer(\n\t\t\t\t\t\"item.get\"\n\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t.put(\"output\", \"extend\")\n\t\t\t\t\t.put(\"countOutput\", 1)\n\t\t\t\t\t.put(\"limit\", ZabbixConfig.ITEM_GET_LIMIT)\n\t\t\t\t\t.put(\"hostids\", new JSONArray().put(hostid))\n\t\t\t);\n\t\t\tint numItems = result.getInt(\"result\");\n\t\t\tJsonArrayOrObjectReader items = _queryStream(\n\t\t\t\t\t\"item.get\"\n\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t\t.put(\"output\", \"extend\")\n\t\t\t\t\t\t.put(\"limit\", ZabbixConfig.ITEM_GET_LIMIT)\n\t\t\t\t\t\t.put(isVersion2?\"selectApplications\":\"select_applications\", \"extend\")\n\t\t\t\t\t\t.put(\"hostids\", new JSONArray().put(hostid))\n\t\t\t);\n\t\t\timportItems(items, numItems, false);\n\t\t\titems.close();\n\n\t\t\tsetCached(ItemData.TABLE_NAME, \"hostid=\"+hostid, ZabbixConfig.CACHE_LIFETIME_ITEMS);\n\t\t\t_endTransaction();\n\t\t}\n\t}\n\n\tprivate void importScreenItems(JsonArrayOrObjectReader screenItems) throws JsonParseException, NumberFormatException, IOException {\n\t\tJsonObjectReader screenItemReader;\n\t\twhile ((screenItemReader = screenItems.next()) != null) {\n\t\t\tScreenItemData si = new ScreenItemData();\n\t\t\tint resourcetype = -1;\n\t\t\twhile (screenItemReader.nextValueToken()) {\n\t\t\t\tString propName = screenItemReader.getCurrentName();\n\t\t\t\tif (propName.equals(ScreenItemData.COLUMN_SCREENITEMID)) {\n\t\t\t\t\tsi.set(ScreenItemData.COLUMN_SCREENITEMID, Long.parseLong(screenItemReader.getText()));\n\t\t\t\t} else if (propName.equals(ScreenItemData.COLUMN_SCREENID)) {\n\t\t\t\t\tsi.set(ScreenItemData.COLUMN_SCREENID, Long.parseLong(screenItemReader.getText()));\n\t\t\t\t} else if (propName.equals(ScreenItemData.COLUMN_RESOURCEID)) {\n\t\t\t\t\tsi.set(ScreenItemData.COLUMN_RESOURCEID, Long.parseLong(screenItemReader.getText()));\n\t\t\t\t} else if (propName.equals(\"resourcetype\")) {\n\t\t\t\t\tresourcetype = Integer.parseInt(screenItemReader.getText());\n\t\t\t\t} else {\n\t\t\t\t\tscreenItemReader.nextProperty();\n\t\t\t\t}\n\t\t\t}\n\t\t\t// only resouretype == 0\n\t\t\tif (resourcetype == 0) {\n\t\t\t\tsi.insert(zabbixLocalDB);\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic void importScreens() throws ClientProtocolException, IOException, JSONException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\tif (!isCached(ScreenData.TABLE_NAME, null)) {\n\t\t\t_startTransaction();\n\n\t\t\tzabbixLocalDB.delete(ScreenData.TABLE_NAME, null, null);\n\t\t\tzabbixLocalDB.delete(ScreenItemData.TABLE_NAME, null, null);\n\t\t\tzabbixLocalDB.delete(CacheData.TABLE_NAME, CacheData.COLUMN_KIND+\"='\"+ScreenData.TABLE_NAME+\"'\", null);\n\n\t\t\tJsonArrayOrObjectReader screens = _queryStream(\n\t\t\t\t\t(isVersion2?\"s\":\"S\")+\"creen.get\"\n\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t\t.put(\"output\", \"extend\")\n\t\t\t\t\t\t.put(isVersion2?\"selectScreenItems\":\"select_screenitems\", \"extend\")\n\t\t\t);\n\t\t\tJsonObjectReader screenReader;\n\t\t\twhile ((screenReader = screens.next()) != null) {\n\t\t\t\tScreenData scr = new ScreenData();\n\t\t\t\twhile (screenReader.nextValueToken()) {\n\t\t\t\t\tString propName = screenReader.getCurrentName();\n\t\t\t\t\tif (propName.equals(ScreenData.COLUMN_SCREENID)) {\n\t\t\t\t\t\tscr.set(ScreenData.COLUMN_SCREENID, Long.parseLong(screenReader.getText()));\n\t\t\t\t\t} else if (propName.equals(ScreenData.COLUMN_NAME)) {\n\t\t\t\t\t\tscr.set(ScreenData.COLUMN_NAME, screenReader.getText());\n\t\t\t\t\t} else if (propName.equals(\"screenitems\")) {\n\t\t\t\t\t\timportScreenItems(screenReader.getJsonArray());\n\t\t\t\t\t} else {\n\t\t\t\t\t\tscreenReader.nextProperty();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tscr.insert(zabbixLocalDB);\n\t\t\t}\n\t\t\tscreens.close();\n\n\t\t\tsetCached(ScreenData.TABLE_NAME, null, ZabbixConfig.CACHE_LIFETIME_SCREENS);\n\t\t\t_endTransaction();\n\t\t}\n\t}\n\n\tpublic void importTrigger(String triggerid) throws JSONException, IOException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\tif (!isCached(TriggerData.TABLE_NAME, \"triggerid=\"+triggerid)) {\n\t\t\t_startTransaction();\n\n\t\t\tJsonArrayOrObjectReader trigger = _queryStream(\n\t\t\t\t\t\"trigger.get\"\n\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t\t.put(\"output\", \"extend\")\n\t\t\t\t\t\t.put(isVersion2?\"selectHosts\":\"select_hosts\", \"extend\")\n\t\t\t\t\t\t.put(\"triggerids\", new JSONArray().put(triggerid))\n\t\t\t);\n\t\t\timportTriggers(trigger);\n\t\t\ttrigger.close();\n\n\t\t\tsetCached(TriggerData.TABLE_NAME, \"triggerid=\"+triggerid, ZabbixConfig.CACHE_LIFETIME_TRIGGERS);\n\t\t\t_endTransaction();\n\t\t}\n\t}\n\n\t/**\n\t * importiert ein trigger mit dem attribute itemid. ggf. wird der trigger zuerst gelöscht und neu angelegt.\n\t * imports a trigger with the attribute itemid. if trigger already exists, it will be removed first.\n\t * @param triggerid\n\t * @throws JSONException\n\t * @throws IOException\n\t * @throws HttpAuthorizationRequiredException\n\t * @throws NoAPIAccessException\n\t */\n\tpublic void importTriggerColumnItemId(String triggerid) throws JSONException, IOException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\t// check if the trigger exists and if the itemid was set\n\t\tboolean mustImport = true;\n\t\tCursor cur = zabbixLocalDB.query(TriggerData.TABLE_NAME, null, TriggerData.COLUMN_TRIGGERID+\"=\"+triggerid, null, null, null, null);\n\t\tif (cur.moveToFirst()) {\n\t\t\tlong itemid = 0;\n\t\t\ttry {\n\t\t\t\titemid = cur.getLong(cur.getColumnIndex(TriggerData.COLUMN_ITEMID));\n\t\t\t} catch (Exception e) {\n\t\t\t\t// no itemid\n\t\t\t}\n\t\t\tif (itemid > 0) {\n\t\t\t\tmustImport = false;\n\t\t\t}\n\t\t}\n\t\tif (mustImport) {\n\t\t\t_startTransaction();\n\t\t\tzabbixLocalDB.delete(TriggerData.TABLE_NAME, TriggerData.COLUMN_TRIGGERID+\"=\"+triggerid, null);\n\t\t\tJsonArrayOrObjectReader triggers = _queryStream(\n\t\t\t\t\t\"trigger.get\"\n\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t\t.put(\"output\", \"extend\")\n\t\t\t\t\t\t.put(isVersion2?\"selectHosts\":\"select_hosts\", \"extend\")\n\t\t\t\t\t\t.put(isVersion2?\"selectGroups\":\"select_groups\", \"extend\")\n\t\t\t\t\t\t.put(isVersion2?\"selectItems\":\"select_items\", \"extend\")\n\t\t\t\t\t\t.put(\"triggerids\", new JSONArray().put(triggerid))\n\t\t\t\t\t\t.put(\"limit\", 1)\n\t\t\t);\n\t\t\timportTriggers(triggers);\n\t\t\t_endTransaction();\n\t\t}\n\t}\n\n\t/**\n\t * imports the \"warning\"-triggers\n\t * @throws JSONException\n\t * @throws IOException\n\t * @throws HttpAuthorizationRequiredException\n\t * @throws NoAPIAccessException\n\t */\n\tpublic void importTriggers() throws JSONException, IOException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\tif (!isCached(TriggerData.TABLE_NAME, null)) {\n\t\t\t// clear triggers\n\t\t\tzabbixLocalDB.delete(TriggerData.TABLE_NAME, null, null);\n\n\t\t\t_startTransaction();\n\n\t\t\tlong min = (new Date().getTime()/1000)-ZabbixConfig.STATUS_SHOW_TRIGGER_TIME;\n\t\t\tJsonArrayOrObjectReader triggers = _queryStream(\n\t\t\t\t\t\"trigger.get\"\n\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t\t.put(\"output\", \"extend\")\n\t\t\t\t\t\t.put(\"sortfield\", \"lastchange\")\n\t\t\t\t\t\t.put(\"sortorder\", \"desc\")\n\t\t\t\t\t\t.put(isVersion2?\"selectHosts\":\"select_hosts\", \"extend\")\n\t\t\t\t\t\t.put(isVersion2?\"selectGroups\":\"select_groups\", \"extend\")\n\t\t\t\t\t\t.put(isVersion2?\"selectItems\":\"select_items\", \"extend\")\n\t\t\t\t\t\t.put(\"lastChangeSince\", min)\n\t\t\t\t\t\t.put(\"only_true\", \"1\")\n\t\t\t\t\t\t.put(\"limit\", ZabbixConfig.TRIGGER_GET_LIMIT)\n\t\t\t\t\t\t.put(\"expandDescription\", true)\n\t\t\t);\n\t\t\timportTriggers(triggers);\n\t\t\ttriggers.close();\n\n\t\t\tsetCached(TriggerData.TABLE_NAME, null, ZabbixConfig.CACHE_LIFETIME_TRIGGERS);\n\t\t\t_endTransaction();\n\t\t}\n\t}\n\n\tprivate void importTriggers(JsonArrayOrObjectReader jsonArray) throws JsonParseException, IOException {\n\t\tJsonObjectReader triggerReader;\n\t\twhile ((triggerReader = jsonArray.next()) != null) {\n\t\t\tTriggerData t = new TriggerData();\n\t\t\twhile (triggerReader.nextValueToken()) {\n\t\t\t\tString propName = triggerReader.getCurrentName();\n\t\t\t\tif (propName.equals(TriggerData.COLUMN_TRIGGERID)) {\n\t\t\t\t\tt.set(TriggerData.COLUMN_TRIGGERID, Long.parseLong(triggerReader.getText()));\n\t\t\t\t} else if (propName.equals(TriggerData.COLUMN_COMMENTS)) {\n\t\t\t\t\tt.set(TriggerData.COLUMN_COMMENTS, triggerReader.getText());\n\t\t\t\t} else if (propName.equals(TriggerData.COLUMN_DESCRIPTION)) {\n\t\t\t\t\tt.set(TriggerData.COLUMN_DESCRIPTION, triggerReader.getText());\n\t\t\t\t} else if (propName.equals(TriggerData.COLUMN_EXPRESSION)) {\n\t\t\t\t\tt.set(TriggerData.COLUMN_EXPRESSION, triggerReader.getText());\n\t\t\t\t} else if (propName.equals(TriggerData.COLUMN_LASTCHANGE)) {\n\t\t\t\t\tt.set(TriggerData.COLUMN_LASTCHANGE, Integer.parseInt(triggerReader.getText()));\n\t\t\t\t} else if (propName.equals(TriggerData.COLUMN_PRIORITY)) {\n\t\t\t\t\tt.set(TriggerData.COLUMN_PRIORITY, Integer.parseInt(triggerReader.getText()));\n\t\t\t\t} else if (propName.equals(TriggerData.COLUMN_STATUS)) {\n\t\t\t\t\tt.set(TriggerData.COLUMN_STATUS, Integer.parseInt(triggerReader.getText()));\n\t\t\t\t} else if (propName.equals(TriggerData.COLUMN_VALUE)) {\n\t\t\t\t\tt.set(TriggerData.COLUMN_VALUE, Integer.parseInt(triggerReader.getText()));\n\t\t\t\t} else if (propName.equals(TriggerData.COLUMN_URL)) {\n\t\t\t\t\tt.set(TriggerData.COLUMN_URL, triggerReader.getText());\n\t\t\t\t} else if (propName.equals(\"hosts\")) {\n\t\t\t\t\tObject[] hostsCache = importHosts(triggerReader.getJsonArray(), null);\n\t\t\t\t\tt.set(TriggerData.COLUMN_HOSTS, hostsCache[0]);\n\t\t\t\t\tt.set(TriggerData.COLUMN_HOSTID, hostsCache[1]);\n\t\t\t\t} else if (propName.equals(\"groups\")) {\n\t\t\t\t\timportHostGroups(triggerReader.getJsonArray());\n\t\t\t\t} else if (propName.equals(\"items\")) {\n\t\t\t\t\t// store the first item id\n\t\t\t\t\tt.set(TriggerData.COLUMN_ITEMID, importItems(triggerReader.getJsonArray(), 1, true));\n\t\t\t\t} else {\n\t\t\t\t\ttriggerReader.nextProperty();\n\t\t\t\t}\n\t\t\t}\n\t\t\tt.insert(zabbixLocalDB, TriggerData.COLUMN_TRIGGERID);\n\t\t\t_commitTransactionIfRecommended();\n\t\t}\n\t}\n\n\tpublic void importTriggersByItemId(String itemid) throws JSONException, IOException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\tif (!isCached(TriggerData.TABLE_NAME, \"itemid=\"+itemid)) {\n\t\t\t_startTransaction();\n\t\t\tzabbixLocalDB.delete(TriggerData.TABLE_NAME, TriggerData.COLUMN_ITEMID+\"=\"+itemid, null);\n\t\t\tJsonArrayOrObjectReader triggers = _queryStream(\n\t\t\t\t\t\"trigger.get\"\n\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t\t.put(\"output\", \"extend\")\n\t\t\t\t\t\t.put(isVersion2?\"selectHosts\":\"select_hosts\", \"extend\")\n\t\t\t\t\t\t.put(isVersion2?\"selectGroups\":\"select_groups\", \"extend\")\n\t\t\t\t\t\t.put(isVersion2?\"selectItems\":\"select_items\", \"extend\")\n\t\t\t\t\t\t.put(\"itemids\", new JSONArray().put(itemid))\n\t\t\t\t\t\t.put(\"limit\", 1)\n\t\t\t\t\t\t.put(\"sortfield\", \"lastchange\")\n\t\t\t\t\t\t.put(\"sortorder\", \"DESC\")\n\t\t\t);\n\t\t\timportTriggers(triggers);\n\t\t\tsetCached(TriggerData.TABLE_NAME, \"itemid=\"+itemid, ZabbixConfig.CACHE_LIFETIME_TRIGGERS);\n\t\t\t_endTransaction();\n\t\t}\n\t}\n\n\tpublic boolean isCached(String kind, String filter) {\n\t\tSQLiteQueryBuilder sqlBuilder = new SQLiteQueryBuilder();\n\t\tsqlBuilder.setTables(CacheData.TABLE_NAME);\n\t\tsqlBuilder.appendWhere(CacheData.COLUMN_KIND+\"='\"+kind+\"' AND \");\n\t\tsqlBuilder.appendWhere(CacheData.COLUMN_FILTER+\n\t\t\t\t(filter==null?\" IS NULL\":\"='\"+filter+\"'\")\n\t\t);\n\t\tsqlBuilder.appendWhere(\" AND \"+CacheData.COLUMN_EXPIRE_DATE+\">\"+new Date().getTime()/1000);\n\t\tCursor cur = sqlBuilder.query(\n\t\t\tzabbixLocalDB,\n\t\t\tnull,\n\t\t\tnull,\n\t\t\tnull,\n\t\t\tnull,\n\t\t\tnull,\n\t\t\tnull\n\t\t);\n\t\tLog.i(\"ZabbixContentProvider\", \"isCached \"+kind+\"//\"+filter+\"//\"+cur.moveToFirst());\n\t\treturn cur.moveToFirst();\n\t}\n\n\t/**\n\t * public, for the unit test\n\t */\n\tpublic void setCached(String kind, String filter, int lifetime) {\n\t\tCacheData cache = new CacheData();\n\t\tcache.set(CacheData.COLUMN_EXPIRE_DATE, new Date().getTime()/1000 + lifetime);\n\t\tcache.set(CacheData.COLUMN_KIND, kind);\n\t\tif (filter != null) {\n\t\t\tcache.set(CacheData.COLUMN_FILTER, filter);\n\t\t}\n\t\tcache.insert(zabbixLocalDB);\n\t}\n\n\t/**\n\t * updates the progressbar in the gui\n\t * @param i 0..100\n\t */\n\tpublic void showProgress(int i) {\n\t\t// if applicable, transform the progress\n\t\tif (transformProgressStart != 0 && transformProgressEnd != 0) {\n\t\t\ti = (int) (transformProgressStart + (transformProgressEnd-transformProgressStart)*(double)i/100);\n\t\t}\n\n\t\tIntent intent = new Intent(ZabbixContentProvider.CONTENT_PROVIDER_INTENT_ACTION);\n\t\tintent.putExtra(\"flag\", ZabbixContentProvider.INTENT_FLAG_SHOW_PROGRESS);\n\t\tintent.putExtra(\"value\", i);\n\t\tcontext.sendBroadcast(intent);\n\t}\n\n\t/**\n\t * transforms the progress\n\t * @param start 0% => start%\n\t * @param end 100% => end%\n\t */\n\tpublic void transformProgress(int start, int end) {\n\t\ttransformProgressStart = start;\n\t\ttransformProgressEnd = end;\n\t}\n}\n"],
      "c_hash_sni": "3820d9533b270822d05ab19af8a9c14f585e1749",
      "name_sni": "src/com/inovex/zabbixmobile/api/ZabbixService.java",
      "c_parents_ss": ["976f9d4001cf9c49a39f3b93acb53607ea8c0bfd"],
      "c_imports_removed_t": ["<empty>"],
      "p_hash_sni": "976f9d4001cf9c49a39f3b93acb53607ea8c0bfd",
      "c_imports_added_t": ["<empty>"],
      "p_methods_t": ["ApplicationData ApplicationItemRelationData ArrayList, String BasicHttpParams BufferedReader CacheData ContentValues CustomSSLSocketFactory Date DefaultHttpClient EventData GraphData GraphItemData HashSet, Long HistoryDetailData HostData HostGroupData HttpAuthorizationRequiredException HttpPost IOException IllegalStateException InputStreamReader Intent ItemData JSONArray JSONObject JsonArrayOrObjectReader JsonFactory NoAPIAccessException PreconditionFailedException RuntimeException SQLiteQueryBuilder Scheme SchemeRegistry ScreenData ScreenItemData StringBuilder StringEntity ThreadSafeClientConnManager TriggerData UsernamePasswordCredentials X509TrustManager _commitTransactionIfRecommended _endTransaction _queryBuffer _queryStream _startTransaction add addHeader append appendWhere authenticate beginTransaction close contains createJsonParser createSocket d delete endTransaction endsWith equals execute get getBoolean getColumnIndex getContent getCredentialsProvider getCurrentName getCurrentToken getDefaultSharedPreferences getDefaultType getEntity getInstance getInt getJSONArray getJSONObject getJsonArray getLong getMessage getParams getReasonPhrase getResources getSocketFactory getStatusCode getStatusLine getString getText getTime i importApplications importEvents importGraphItems importHostGroups importHosts importItems importScreenItems importTriggers inTransaction indexOf init insert isCached isClosed length load matches min moveToFirst moveToNext next nextProperty nextToken nextValue nextValueToken parseColor parseDouble parseInt parseLong printStackTrace put putExtra query read register replace replaceAll sendBroadcast set setCached setConnectionTimeout setContentCharset setCredentials setEntity setHostnameVerifier setRedirecting setTables setTransactionSuccessful setVersion showProgress split startsWith substring toString trim update"],
      "c_imports_removed_cs": "<empty>",
      "p_imports_t": ["android.database.sqlite.SQLiteQueryBuilder org.apache.http.conn.scheme.SchemeRegistry java.util.HashSet org.apache.http.params.BasicHttpParams android.content.Context org.apache.http.params.HttpParams org.apache.http.conn.scheme.PlainSocketFactory java.util.ArrayList com.inovex.zabbixmobile.model.ItemData com.inovex.zabbixmobile.model.HostData com.inovex.zabbixmobile.model.GraphData com.inovex.zabbixmobile.model.EventData org.apache.http.auth.UsernamePasswordCredentials org.apache.http.params.HttpConnectionParams android.content.SharedPreferences java.security.KeyManagementException org.apache.http.conn.ClientConnectionManager org.codehaus.jackson.JsonFactory org.apache.http.entity.StringEntity java.util.Set org.apache.http.params.HttpProtocolParams com.inovex.zabbixmobile.model.ApplicationItemRelationData com.inovex.zabbixmobile.model.TriggerData org.codehaus.jackson.JsonToken android.database.Cursor java.net.Socket android.content.Intent org.apache.http.protocol.HTTP org.json.JSONException java.net.UnknownHostException com.inovex.zabbixmobile.model.HistoryDetailData org.apache.http.HttpResponse java.security.KeyStore com.inovex.zabbixmobile.ZabbixContentProvider android.preference.PreferenceManager android.util.Log org.json.JSONObject java.security.NoSuchAlgorithmException org.apache.http.client.params.HttpClientParams java.io.IOException org.apache.http.conn.scheme.Scheme org.apache.http.client.methods.HttpPost javax.net.ssl.SSLContext org.apache.http.auth.AuthScope org.apache.http.conn.ssl.SSLSocketFactory java.security.KeyStoreException android.content.ContentValues java.io.InputStreamReader java.util.Date java.security.UnrecoverableKeyException android.graphics.Color org.apache.http.client.ClientProtocolException com.inovex.zabbixmobile.model.GraphItemData org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager org.json.JSONArray com.inovex.zabbixmobile.model.CacheData javax.net.ssl.SSLPeerUnverifiedException com.inovex.zabbixmobile.model.HostGroupData org.codehaus.jackson.JsonParseException java.security.cert.X509Certificate org.apache.http.HttpVersion android.database.sqlite.SQLiteDatabase java.util.List java.security.cert.CertificateException java.io.BufferedReader com.inovex.zabbixmobile.model.ApplicationData com.inovex.zabbixmobile.model.ScreenItemData javax.net.ssl.TrustManager com.inovex.zabbixmobile.model.ScreenData com.inovex.zabbixmobile.R org.codehaus.jackson.JsonParser org.apache.http.impl.client.DefaultHttpClient javax.net.ssl.X509TrustManager"],
      "p_subject_t": ["- libraries are now in libs folder (as suggested by the Android documentation) - removed references to the source code of other projects - corrected distinction between API version 1.3, 1.4 and 2.x - enlarged time range of item history details - small bugfixes in main.xml and main_tablet.xml - compatibility with latest GraphView library"],
      "p_callsites_cs": "<unknown>.set(<unknown>, <unknown>)#org.apache.http.HttpEntity.getContent()#java.lang.String.equals(java.lang.String)#org.json.JSONArray.JSONArray()#<unknown>.set(<unknown>, java.lang.Object)#org.json.JSONObject.put(java.lang.String, java.lang.Integer)#org.json.JSONArray.put(java.lang.String)#org.json.JSONObject.JSONObject()#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.codehaus.jackson.JsonFactory.createJsonParser(java.io.InputStream)#java.lang.String.equals(<unknown>)#org.apache.http.StatusLine.getStatusCode()#<unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>)#org.json.JSONObject.put(java.lang.String, java.lang.String)#android.database.sqlite.SQLiteDatabase.inTransaction()#android.util.Log.d(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService._startTransaction()#java.lang.String.equals(java.lang.String)#org.codehaus.jackson.JsonFactory.JsonFactory()#com.inovex.zabbixmobile.api.ZabbixService._endTransaction()#org.json.JSONObject.put(java.lang.String, int)#android.content.ContentValues.ContentValues(int)#org.apache.http.conn.scheme.SchemeRegistry.SchemeRegistry()#<unknown>.insert(android.database.sqlite.SQLiteDatabase)#<unknown>.insert(android.database.sqlite.SQLiteDatabase)#com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject)#com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject)#com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject)#org.json.JSONObject.getJSONObject(java.lang.String)#java.io.InputStreamReader.InputStreamReader(java.io.InputStream)#android.content.Intent.putExtra(java.lang.String, <unknown>)#org.json.JSONArray.length()#java.lang.String.equals(java.lang.String)#<unknown>.set(<unknown>, <unknown>)#java.lang.String.equals(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService.PreconditionFailedException.PreconditionFailedException()#java.lang.StringBuilder.StringBuilder()#android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null)#<unknown>.nextValueToken()#org.json.JSONObject.JSONObject()#org.json.JSONObject.put(java.lang.String, int)#org.json.JSONObject.put(java.lang.String, org.json.JSONArray)#java.lang.String.equals(<unknown>)#<unknown>.get(<unknown>)#<unknown>.insert(android.database.sqlite.SQLiteDatabase)#android.content.Intent.putExtra(java.lang.String, <unknown>)#java.lang.String.equals(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService.importItems(<unknown>, int, boolean)#com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, java.lang.String, int)#android.util.Log.d(java.lang.String, java.lang.String)#org.json.JSONObject.put(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject)#org.apache.http.conn.scheme.Scheme.Scheme(java.lang.String, org.apache.http.conn.ssl.SSLSocketFactory, int)#org.apache.http.HttpEntity.getContent()#org.codehaus.jackson.JsonParser.close()#java.lang.String.equals(<unknown>)#<unknown>.nextValueToken()#<unknown>.getCurrentName()#org.json.JSONArray.JSONArray(java.util.Set<java.lang.Long>)#<unknown>.nextValueToken()#android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null)#<unknown>.getJsonArray()#com.inovex.zabbixmobile.api.ZabbixService._startTransaction()#org.json.JSONArray.JSONArray()#<unknown>.nextProperty()#java.lang.String.equals(java.lang.String)#android.database.sqlite.SQLiteDatabase.update(<unknown>, android.content.ContentValues, <unknown>, null)#java.util.Set<java.lang.Long>.add(<unknown>)#<unknown>.get(<unknown>)#<unknown>.get(<unknown>)#android.content.ContentValues.put(<unknown>, java.lang.Long)#java.lang.String.equals(java.lang.String)#org.apache.http.StatusLine.getReasonPhrase()#java.lang.RuntimeException.RuntimeException(java.lang.String)#<unknown>.nextProperty()#java.lang.Throwable.printStackTrace()#java.lang.String.equals(<unknown>)#java.lang.Long.parseLong(<unknown>)#org.json.JSONObject.put(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject)#<unknown>.getCurrentName()#android.content.ContentValues.put(<unknown>, java.lang.Long)#org.apache.http.entity.StringEntity.StringEntity(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject)#java.lang.String.equals(<unknown>)#<unknown>.EventData()#<unknown>.next()#<unknown>.set(<unknown>, <unknown>)#com.inovex.zabbixmobile.api.ZabbixService.CustomSSLSocketFactory.CustomSSLSocketFactory(java.security.KeyStore)#com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject)#<unknown>.getCurrentName()#java.util.List<java.lang.String>.add(java.lang.String)#org.json.JSONObject.put(java.lang.String, int)#<unknown>.getText()#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.apache.http.conn.ssl.SSLSocketFactory.setHostnameVerifier(org.apache.http.conn.ssl.X509HostnameVerifier)#<unknown>.set(<unknown>, <unknown>)#<unknown>.getText()#org.json.JSONObject.put(java.lang.String, long)#java.util.Date.Date()#org.json.JSONObject.put(java.lang.String, int)#org.json.JSONObject.put(java.lang.String, int)#<unknown>.set(<unknown>, <unknown>)#com.inovex.zabbixmobile.api.ZabbixService.authenticate()#android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null)#android.util.Log.d(java.lang.String, java.lang.String)#java.lang.String.equals(java.lang.String)#org.apache.http.HttpResponse.getEntity()#org.json.JSONObject.JSONObject()#com.inovex.zabbixmobile.api.ZabbixService.importItems(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader, int, boolean)#com.inovex.zabbixmobile.api.ZabbixService._startTransaction()#com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, null, int)#java.io.BufferedReader.read()#org.json.JSONObject.put(java.lang.String, long)#<unknown>.set(<unknown>, <unknown>)#android.database.Cursor.getLong(<unknown>)#java.lang.IllegalStateException.IllegalStateException(java.lang.String)#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.getCurrentName()#android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null)#android.util.Log.d(java.lang.String, java.lang.String)#<unknown>.set(<unknown>, <unknown>)#java.lang.String.equals(<unknown>)#org.json.JSONObject.put(java.lang.String, java.lang.String)#android.database.Cursor.moveToFirst()#com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, java.lang.String)#android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null)#java.lang.String.equals(java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, java.lang.String)#<unknown>.getText()#org.json.JSONObject.put(java.lang.String, java.lang.String)#android.content.Intent.putExtra(java.lang.String, <unknown>)#<unknown>.getCurrentName()#android.content.res.Resources.getString(<unknown>)#android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null)#android.database.sqlite.SQLiteDatabase.setTransactionSuccessful()#<unknown>.next()#<unknown>.getText()#<unknown>.nextValueToken()#com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject)#com.inovex.zabbixmobile.api.ZabbixService.showProgress(<unknown>)#java.io.IOException.IOException(java.lang.String)#<unknown>.getCurrentName()#android.util.Log.d(java.lang.String, java.lang.String)#java.lang.Object.toString()#org.json.JSONObject.toString()#<unknown>.set(<unknown>, <unknown>)#org.json.JSONArray.JSONArray()#org.apache.http.HttpResponse.getStatusLine()#org.json.JSONArray.JSONArray()#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.apache.http.impl.client.DefaultHttpClient.DefaultHttpClient()#org.json.JSONObject.put(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject)#org.apache.http.HttpResponse.getStatusLine()#java.lang.String.equals(<unknown>)#java.util.Date.Date()#android.util.Log.i(java.lang.String, java.lang.String)#android.content.Context.getResources()#org.apache.http.impl.client.CloseableHttpClient.execute(org.apache.http.client.methods.HttpPost)#com.inovex.zabbixmobile.api.ZabbixService._commitTransactionIfRecommended()#com.inovex.zabbixmobile.api.ZabbixService.importHostGroups(<unknown>)#android.content.Context.sendBroadcast(android.content.Intent)#android.content.Context.sendBroadcast(android.content.Intent)#com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, null, int)#java.lang.Integer.parseInt(<unknown>)#<unknown>.ApplicationData()#com.inovex.zabbixmobile.api.ZabbixService.NoAPIAccessException.NoAPIAccessException()#com.inovex.zabbixmobile.api.ZabbixService._commitTransactionIfRecommended()#<unknown>.getJsonArray()#org.apache.http.message.AbstractHttpMessage.addHeader(java.lang.String, java.lang.String)#org.json.JSONObject.put(java.lang.String, int)#java.lang.String.replace(java.lang.String, java.lang.String)#org.json.JSONArray.JSONArray()#<unknown>.set(<unknown>, <unknown>)#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.set(<unknown>, <unknown>)#org.json.JSONArray.JSONArray()#java.lang.String.equals(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, java.lang.String, int)#<unknown>.nextProperty()#<unknown>.set(<unknown>, java.lang.String)#org.json.JSONObject.JSONObject()#java.lang.String.contains(java.lang.String)#org.apache.http.client.methods.HttpEntityEnclosingRequestBase.setEntity(org.apache.http.entity.StringEntity)#com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject)#com.inovex.zabbixmobile.api.ZabbixService.importTriggers(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader)#org.json.JSONObject.put(java.lang.String, int)#<unknown>.HostGroupData()#<unknown>.JsonArrayOrObjectReader(org.codehaus.jackson.JsonParser)#<unknown>.HostGroupData()#<unknown>.nextProperty()#java.lang.Long.parseLong(<unknown>)#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.json.JSONObject.put(java.lang.String, org.json.JSONArray)#org.json.JSONObject.put(java.lang.String, java.lang.Integer)#<unknown>.set(<unknown>, <unknown>)#<unknown>.close()#org.json.JSONObject.put(java.lang.String, org.json.JSONArray)#<unknown>.set(<unknown>, <unknown>)#java.lang.String.equals(java.lang.String)#android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null)#<unknown>.next()#org.json.JSONObject.toString()#java.lang.String.equals(<unknown>)#java.lang.String.equals(<unknown>)#android.database.sqlite.SQLiteDatabase.query(<unknown>, null, <unknown>, null, null, null, null)#<unknown>.set(<unknown>, <unknown>)#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.CacheData()#<unknown>.getText()#com.inovex.zabbixmobile.api.ZabbixService._startTransaction()#<unknown>.set(<unknown>, <unknown>)#com.inovex.zabbixmobile.api.ZabbixService._endTransaction()#<unknown>.set(<unknown>, int)#<unknown>.getJsonArray()#java.lang.String.equals(<unknown>)#java.util.Date.getTime()#java.lang.String.equals(java.lang.String)#org.json.JSONObject.put(java.lang.String, int)#<unknown>.set(<unknown>, <unknown>)#java.lang.Integer.parseInt(<unknown>)#org.codehaus.jackson.JsonParser.getCurrentName()#<unknown>.nextProperty()#com.inovex.zabbixmobile.api.ZabbixService._endTransaction()#java.lang.String.equals(<unknown>)#org.json.JSONObject.put(java.lang.String, int)#android.database.sqlite.SQLiteDatabase.update(<unknown>, android.content.ContentValues, <unknown>, null)#com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject)#com.inovex.zabbixmobile.api.ZabbixService._endTransaction()#java.lang.StringBuilder.append(char)#<unknown>.set(<unknown>, <unknown>)#<unknown>.get(<unknown>)#<unknown>.set(<unknown>, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject)#org.json.JSONObject.put(java.lang.String, java.lang.String)#android.database.Cursor.getLong(<unknown>)#java.lang.String.equals(<unknown>)#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.json.JSONObject.JSONObject()#org.apache.http.params.HttpProtocolParams.setVersion(org.apache.http.params.HttpParams, org.apache.http.HttpVersion)#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.HistoryDetailData()#android.util.Log.d(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService._startTransaction()#<unknown>.next()#<unknown>.set(<unknown>, <unknown>)#<unknown>.nextValueToken()#org.json.JSONObject.JSONObject()#java.lang.String.equals(<unknown>)#java.lang.Long.parseLong(<unknown>)#java.lang.Integer.parseInt(<unknown>)#org.apache.http.client.methods.HttpPost.HttpPost(java.lang.String)#org.apache.http.StatusLine.getStatusCode()#<unknown>.set(<unknown>, int)#java.lang.String.equals(java.lang.String)#java.lang.String.equals(<unknown>)#java.lang.String.equals(<unknown>)#<unknown>.getCurrentName()#java.util.ArrayList<java.lang.String>.ArrayList, String()#com.inovex.zabbixmobile.api.ZabbixService._startTransaction()#com.inovex.zabbixmobile.api.ZabbixService.importTriggers(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader)#org.json.JSONArray.put(java.lang.String)#<unknown>.nextValueToken()#org.json.JSONArray.put(java.lang.String)#<unknown>.set(<unknown>, <unknown>)#org.json.JSONObject.put(java.lang.String, int)#com.inovex.zabbixmobile.api.ZabbixService.importItems(<unknown>, int, boolean)#org.json.JSONObject.JSONObject()#com.inovex.zabbixmobile.api.ZabbixService.importTriggers(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService.importGraphItems(<unknown>)#<unknown>.ScreenItemData()#<unknown>.set(<unknown>, <unknown>)#<unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>)#android.preference.PreferenceManager.getDefaultSharedPreferences(android.content.Context)#org.json.JSONObject.length()#<unknown>.nextValueToken()#java.util.HashSet<java.lang.Long>.HashSet, Long()#java.lang.String.equals(java.lang.String)#android.content.SharedPreferences.getBoolean(java.lang.String, boolean)#<unknown>.insert(android.database.sqlite.SQLiteDatabase)#org.json.JSONObject.put(java.lang.String, org.json.JSONArray)#<unknown>.close()#com.inovex.zabbixmobile.api.ZabbixService.importHosts(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader, int)#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.next()#android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null)#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.json.JSONObject.getString(java.lang.String)#<unknown>.set(<unknown>, <unknown>)#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.close()#org.json.JSONObject.getString(java.lang.String)#java.lang.String.equals(java.lang.String)#java.lang.Long.parseLong(<unknown>)#org.codehaus.jackson.JsonParser.isClosed()#org.json.JSONObject.put(java.lang.String, int)#org.json.JSONObject.put(java.lang.String, org.json.JSONArray)#java.lang.String.startsWith(java.lang.String)#org.json.JSONObject.put(java.lang.String, long)#<unknown>.close()#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.set(<unknown>, long)#org.json.JSONObject.put(java.lang.String, org.json.JSONObject)#<unknown>.set(<unknown>, <unknown>)#com.inovex.zabbixmobile.api.ZabbixService._endTransaction()#java.lang.String.replaceAll(java.lang.String, java.lang.String)#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.nextValueToken()#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.apache.http.params.BasicHttpParams.BasicHttpParams()#android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null)#android.database.sqlite.SQLiteDatabase.beginTransaction()#com.inovex.zabbixmobile.api.ZabbixService._commitTransactionIfRecommended()#com.inovex.zabbixmobile.api.ZabbixService._endTransaction()#java.lang.String.equals(<unknown>)#<unknown>.insert(android.database.sqlite.SQLiteDatabase)#<unknown>.insert(android.database.sqlite.SQLiteDatabase)#org.json.JSONObject.put(java.lang.String, int)#<unknown>.next()#com.inovex.zabbixmobile.api.ZabbixService._startTransaction()#<unknown>.getJsonArray()#android.content.SharedPreferences.getString(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, null, int)#javax.net.SocketFactory.createSocket()#java.lang.Long.parseLong(<unknown>)#org.apache.http.client.CredentialsProvider.setCredentials(org.apache.http.auth.AuthScope, org.apache.http.auth.UsernamePasswordCredentials)#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.next()#com.inovex.zabbixmobile.api.ZabbixService.HttpAuthorizationRequiredException.HttpAuthorizationRequiredException()#android.database.sqlite.SQLiteQueryBuilder.query(android.database.sqlite.SQLiteDatabase, null, null, null, null, null, null)#java.util.Date.Date()#com.inovex.zabbixmobile.api.ZabbixService._commitTransactionIfRecommended()#<unknown>.set(<unknown>, java.lang.String)#org.json.JSONObject.JSONObject()#<unknown>.next()#<unknown>.set(<unknown>, <unknown>)#<unknown>.set(<unknown>, <unknown>)#com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject)#java.lang.String.equals(java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, java.lang.String)#java.lang.String.indexOf(char)#android.database.sqlite.SQLiteDatabase.query(<unknown>, null, <unknown>, null, null, null, null)#android.preference.PreferenceManager.getDefaultSharedPreferences(android.content.Context)#<unknown>.nextProperty()#org.apache.http.impl.client.CloseableHttpClient.execute(org.apache.http.client.methods.HttpPost)#<unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>)#com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, java.lang.String)#org.json.JSONObject.JSONObject()#<unknown>.close()#android.database.Cursor.getColumnIndex(<unknown>)#android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null)#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.nextProperty()#org.apache.http.conn.scheme.PlainSocketFactory.getSocketFactory()#com.inovex.zabbixmobile.api.ZabbixService._commitTransactionIfRecommended()#com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject)#java.lang.StringBuilder.toString()#org.json.JSONObject.put(java.lang.String, java.lang.String)#android.database.sqlite.SQLiteQueryBuilder.SQLiteQueryBuilder()#<unknown>.insert(android.database.sqlite.SQLiteDatabase)#org.apache.http.conn.scheme.SchemeRegistry.register(org.apache.http.conn.scheme.Scheme)#<unknown>.set(<unknown>, <unknown>)#org.json.JSONObject.JSONObject(java.lang.String)#java.lang.String.equals(<unknown>)#<unknown>.set(<unknown>, <unknown>)#<unknown>.set(<unknown>, <unknown>)#java.lang.IllegalStateException.IllegalStateException(java.lang.String)#java.lang.Double.parseDouble(<unknown>)#android.content.ContentValues.put(<unknown>, java.lang.Long)#android.util.Log.i(java.lang.String, java.lang.String)#android.database.sqlite.SQLiteQueryBuilder.appendWhere(<unknown>)#org.apache.http.conn.scheme.SchemeRegistry.register(org.apache.http.conn.scheme.Scheme)#org.json.JSONObject.getInt(java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService.importHosts(<unknown>, null)#org.json.JSONObject.put(java.lang.String, boolean)#java.lang.Long.parseLong(<unknown>)#java.lang.String.indexOf(char)#java.lang.String.equals(java.lang.String)#android.database.sqlite.SQLiteQueryBuilder.appendWhere(<unknown>)#java.lang.String.length()#java.lang.String.equals(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject)#<unknown>.nextProperty()#<unknown>.next()#android.content.SharedPreferences.getString(java.lang.String, java.lang.String)#<unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>)#com.inovex.zabbixmobile.api.ZabbixService.importTriggers(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader)#<unknown>.GraphData()#org.json.JSONArray.put(java.lang.String)#org.apache.http.impl.client.AbstractHttpClient.getParams()#<unknown>.set(<unknown>, long)#<unknown>.set(<unknown>, <unknown>)#org.json.JSONObject.getJSONObject(java.lang.String)#org.json.JSONObject.put(java.lang.String, java.lang.String)#java.lang.String.equals(java.lang.String)#org.json.JSONObject.getString(java.lang.String)#java.lang.String.equals(<unknown>)#java.lang.String.equals(<unknown>)#<unknown>.getCurrentName()#java.lang.String.equals(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService.showProgress(int)#<unknown>.getCurrentName()#com.inovex.zabbixmobile.api.ZabbixService.importHosts(<unknown>, null)#com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, java.lang.String, int)#org.json.JSONObject.put(java.lang.String, int)#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.close()#java.lang.String.replace(java.lang.String, java.lang.String)#java.lang.String.equals(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject)#com.inovex.zabbixmobile.api.ZabbixService._endTransaction()#android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null)#android.database.Cursor.moveToNext()#<unknown>.HostData()#<unknown>.set(<unknown>, long)#<unknown>.next()#com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject)#android.database.sqlite.SQLiteQueryBuilder.setTables(<unknown>)#java.util.Date.getTime()#org.json.JSONObject.put(java.lang.String, long)#android.content.ContentValues.ContentValues(int)#java.lang.Long.parseLong(<unknown>)#org.apache.http.HttpResponse.getEntity()#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.getText()#java.lang.String.equals(java.lang.String)#<unknown>.set(<unknown>, <unknown>)#<unknown>.set(<unknown>, <unknown>)#javax.net.ssl.SSLContext.init(null, javax.net.ssl.TrustManager[], null)#android.database.sqlite.SQLiteDatabase.endTransaction()#java.lang.String.equals(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, java.lang.String)#android.util.Log.d(java.lang.String, java.lang.String)#<unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>)#<unknown>.next()#<unknown>.close()#<unknown>.insert(android.database.sqlite.SQLiteDatabase)#org.json.JSONObject.put(java.lang.String, java.lang.String)#java.lang.Throwable.getMessage()#java.lang.String.equals(<unknown>)#java.lang.String.equals(<unknown>)#<unknown>.set(<unknown>, <unknown>)#com.inovex.zabbixmobile.api.ZabbixService._endTransaction()#javax.net.ssl.SSLContext.getSocketFactory()#org.json.JSONObject.JSONObject()#android.content.Context.getResources()#org.json.JSONObject.put(java.lang.String, int)#com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, null)#com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, java.lang.String, int)#java.lang.String.matches(java.lang.String)#<unknown>.set(<unknown>, <unknown>)#org.json.JSONArray.put(java.lang.String)#<unknown>.set(<unknown>, <unknown>)#android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null)#android.content.Context.sendBroadcast(android.content.Intent)#org.json.JSONObject.getJSONObject(java.lang.String)#<unknown>.get(<unknown>)#android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null)#java.lang.String.equals(<unknown>)#android.content.SharedPreferences.getBoolean(java.lang.String, boolean)#java.lang.Throwable.printStackTrace()#android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null)#org.json.JSONObject.put(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService._startTransaction()#android.content.Intent.putExtra(java.lang.String, int)#org.json.JSONObject.JSONObject()#<unknown>.getText()#com.inovex.zabbixmobile.api.ZabbixService._endTransaction()#org.apache.http.client.methods.HttpPost.HttpPost(java.lang.String)#android.content.SharedPreferences.getString(java.lang.String, java.lang.String)#<unknown>.GraphItemData()#com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, java.lang.String, int)#<unknown>.nextValueToken()#org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager.ThreadSafeClientConnManager(org.apache.http.params.HttpParams, org.apache.http.conn.scheme.SchemeRegistry)#<unknown>.ApplicationItemRelationData()#java.lang.Object.toString()#android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null)#org.json.JSONArray.JSONArray()#java.lang.String.equals(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService._startTransaction()#org.json.JSONObject.put(java.lang.String, org.json.JSONArray)#com.inovex.zabbixmobile.api.ZabbixService.importApplications(int, int, <unknown>)#<unknown>.set(<unknown>, int)#org.json.JSONObject.put(java.lang.String, int)#com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, java.lang.String, int)#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.json.JSONObject.JSONObject()#java.lang.Math.min(int, int)#com.inovex.zabbixmobile.api.ZabbixService.showProgress(<unknown>)#java.lang.String.equals(java.lang.String)#android.content.Intent.Intent(<unknown>)#java.lang.String.equals(<unknown>)#org.json.JSONObject.put(java.lang.String, int)#javax.net.ssl.SSLContext.getInstance(java.lang.String)#android.content.res.Resources.getString(<unknown>)#org.json.JSONObject.JSONObject()#android.content.Intent.Intent(<unknown>)#java.lang.String.equals(<unknown>)#<unknown>.nextProperty()#javax.net.ssl.SSLSocketFactory.createSocket(java.net.Socket, java.lang.String, int, boolean)#org.json.JSONObject.put(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject)#<unknown>.get(<unknown>)#java.io.IOException.IOException(java.lang.String)#java.lang.String.trim()#java.lang.String.contains(java.lang.String)#org.apache.http.entity.StringEntity.StringEntity(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService._endTransaction()#.X509TrustManager()#com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject)#android.graphics.Color.parseColor(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, null)#org.json.JSONObject.getJSONArray(java.lang.String)#org.apache.http.client.params.HttpClientParams.setRedirecting(org.apache.http.params.HttpParams, boolean)#com.inovex.zabbixmobile.api.ZabbixService._startTransaction()#<unknown>.getCurrentName()#java.lang.String.equals(<unknown>)#java.lang.Long.parseLong(<unknown>)#android.util.Log.d(java.lang.String, java.lang.String)#org.codehaus.jackson.JsonParser.getCurrentToken()#org.codehaus.jackson.JsonParser.nextValue()#java.lang.Long.parseLong(<unknown>)#<unknown>.getText()#java.util.Date.getTime()#android.content.Intent.putExtra(java.lang.String, <unknown>)#android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null)#<unknown>.get(<unknown>)#android.database.Cursor.moveToFirst()#org.apache.http.client.methods.HttpEntityEnclosingRequestBase.setEntity(org.apache.http.entity.StringEntity)#com.inovex.zabbixmobile.api.ZabbixService._commitTransactionIfRecommended()#com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, null)#android.database.sqlite.SQLiteQueryBuilder.appendWhere(<unknown>)#org.apache.http.auth.UsernamePasswordCredentials.UsernamePasswordCredentials(java.lang.String, java.lang.String)#java.util.Date.getTime()#java.lang.String.equals(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService._endTransaction()#org.json.JSONObject.put(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService.authenticate()#java.lang.String.equals(<unknown>)#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.json.JSONObject.put(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService.NoAPIAccessException.NoAPIAccessException()#org.json.JSONArray.put(long)#com.inovex.zabbixmobile.api.ZabbixService._endTransaction()#android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null)#<unknown>.getJsonArray()#<unknown>.ScreenData()#java.util.Date.Date()#java.util.Date.Date()#<unknown>.set(<unknown>, long)#<unknown>.getCurrentName()#org.json.JSONObject.put(java.lang.String, org.json.JSONArray)#<unknown>.set(<unknown>, long)#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.apache.http.params.HttpConnectionParams.setConnectionTimeout(org.apache.http.params.HttpParams, int)#org.json.JSONArray.length()#<unknown>.set(<unknown>, java.lang.String)#<unknown>.set(<unknown>, long)#java.util.Date.getTime()#<unknown>.set(<unknown>, <unknown>)#<unknown>.set(<unknown>, <unknown>)#org.json.JSONArray.put(java.lang.String)#java.lang.String.equals(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService.importScreenItems(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService.HttpAuthorizationRequiredException.HttpAuthorizationRequiredException()#<unknown>.getText()#org.json.JSONObject.put(java.lang.String, org.json.JSONArray)#com.inovex.zabbixmobile.api.ZabbixService.importEvents(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader, null)#org.json.JSONObject.JSONObject()#<unknown>.set(<unknown>, <unknown>)#com.inovex.zabbixmobile.api.ZabbixService.importHostGroups(<unknown>)#org.json.JSONObject.toString()#java.lang.Integer.parseInt(<unknown>)#android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null)#org.apache.http.params.HttpProtocolParams.setContentCharset(org.apache.http.params.HttpParams, java.lang.String)#<unknown>.get(<unknown>)#java.lang.String.equals(<unknown>)#<unknown>.set(<unknown>, <unknown>)#<unknown>.nextValueToken()#<unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>)#org.json.JSONObject.put(java.lang.String, org.json.JSONArray)#org.json.JSONObject.put(java.lang.String, java.lang.Integer)#<unknown>.getText()#<unknown>.set(<unknown>, <unknown>)#org.apache.http.message.AbstractHttpMessage.addHeader(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject)#org.json.JSONObject.getJSONArray(java.lang.String)#java.security.KeyStore.load(null, null)#java.lang.String.replace(java.lang.String, java.lang.String)#java.lang.Long.parseLong(<unknown>)#org.json.JSONObject.toString()#com.inovex.zabbixmobile.api.ZabbixService.importTriggers(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader)#android.util.Log.d(java.lang.String, java.lang.String)#android.content.SharedPreferences.getString(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, java.lang.String)#<unknown>.TriggerData()#android.content.SharedPreferences.getString(java.lang.String, java.lang.String)#android.content.Intent.Intent(<unknown>)#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.apache.http.impl.client.AbstractHttpClient.getCredentialsProvider()#<unknown>.set(<unknown>, <unknown>)#java.io.IOException.IOException(java.lang.String)#java.lang.String.trim()#org.json.JSONObject.put(java.lang.String, org.json.JSONArray)#java.lang.String.split(java.lang.String)#java.lang.String.equals(java.lang.String)#java.lang.String.endsWith(java.lang.String)#<unknown>.set(<unknown>, int)#com.inovex.zabbixmobile.api.ZabbixService.showProgress(int)#<unknown>.ItemData()#org.json.JSONObject.put(java.lang.String, int)#<unknown>.set(<unknown>, <unknown>)#org.codehaus.jackson.JsonParser.getText()#android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null)#org.apache.http.impl.client.DefaultHttpClient.DefaultHttpClient(org.apache.http.conn.ClientConnectionManager, org.apache.http.params.HttpParams)#<unknown>.close()#java.lang.IllegalStateException.IllegalStateException(java.lang.String)#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.codehaus.jackson.JsonParser.nextToken()#android.database.Cursor.getColumnIndex(<unknown>)#org.json.JSONObject.put(java.lang.String, org.json.JSONArray)#<unknown>.nextValueToken()#com.inovex.zabbixmobile.api.ZabbixService._startTransaction()#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.set(<unknown>, java.lang.String)#java.lang.String.substring(int, int)#java.lang.Long.parseLong(<unknown>)#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.json.JSONObject.getInt(java.lang.String)#java.lang.String.equals(java.lang.String)#<unknown>.set(<unknown>, <unknown>)#<unknown>.set(<unknown>, <unknown>)#java.security.KeyStore.getInstance(java.lang.String)#java.lang.Integer.parseInt(<unknown>)#java.lang.String.equals(java.lang.String)#<unknown>.nextProperty()#android.content.Intent.putExtra(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, null)#<unknown>.set(<unknown>, int)#java.io.BufferedReader.BufferedReader(java.io.InputStreamReader)#com.inovex.zabbixmobile.api.ZabbixService.importEvents(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader, int)#java.security.KeyStore.getDefaultType()#java.lang.String.equals(<unknown>)#<unknown>.getText()#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.set(<unknown>, java.lang.Object)#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.insert(android.database.sqlite.SQLiteDatabase)#<unknown>.nextProperty()#com.inovex.zabbixmobile.api.ZabbixService._startTransaction()#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.close()#<unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>)#org.json.JSONObject.put(java.lang.String, long)#com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, null, int)#<unknown>.getJsonArray()#<unknown>.set(<unknown>, <unknown>)#java.lang.String.equals(<unknown>)#org.apache.http.conn.scheme.Scheme.Scheme(java.lang.String, org.apache.http.conn.scheme.PlainSocketFactory, int)#org.json.JSONObject.put(java.lang.String, java.lang.String)#java.lang.String.equals(<unknown>)",
      "p_callsites_t": ["<unknown>.set(<unknown>, <unknown>) org.apache.http.HttpEntity.getContent() java.lang.String.equals(java.lang.String) org.json.JSONArray.JSONArray() <unknown>.set(<unknown>, java.lang.Object) org.json.JSONObject.put(java.lang.String, java.lang.Integer) org.json.JSONArray.put(java.lang.String) org.json.JSONObject.JSONObject() org.json.JSONObject.put(java.lang.String, java.lang.String) org.codehaus.jackson.JsonFactory.createJsonParser(java.io.InputStream) java.lang.String.equals(<unknown>) org.apache.http.StatusLine.getStatusCode() <unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>) org.json.JSONObject.put(java.lang.String, java.lang.String) android.database.sqlite.SQLiteDatabase.inTransaction() android.util.Log.d(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService._startTransaction() java.lang.String.equals(java.lang.String) org.codehaus.jackson.JsonFactory.JsonFactory() com.inovex.zabbixmobile.api.ZabbixService._endTransaction() org.json.JSONObject.put(java.lang.String, int) android.content.ContentValues.ContentValues(int) org.apache.http.conn.scheme.SchemeRegistry.SchemeRegistry() <unknown>.insert(android.database.sqlite.SQLiteDatabase) <unknown>.insert(android.database.sqlite.SQLiteDatabase) com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject) com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject) com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject) org.json.JSONObject.getJSONObject(java.lang.String) java.io.InputStreamReader.InputStreamReader(java.io.InputStream) android.content.Intent.putExtra(java.lang.String, <unknown>) org.json.JSONArray.length() java.lang.String.equals(java.lang.String) <unknown>.set(<unknown>, <unknown>) java.lang.String.equals(<unknown>) com.inovex.zabbixmobile.api.ZabbixService.PreconditionFailedException.PreconditionFailedException() java.lang.StringBuilder.StringBuilder() android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null) <unknown>.nextValueToken() org.json.JSONObject.JSONObject() org.json.JSONObject.put(java.lang.String, int) org.json.JSONObject.put(java.lang.String, org.json.JSONArray) java.lang.String.equals(<unknown>) <unknown>.get(<unknown>) <unknown>.insert(android.database.sqlite.SQLiteDatabase) android.content.Intent.putExtra(java.lang.String, <unknown>) java.lang.String.equals(<unknown>) com.inovex.zabbixmobile.api.ZabbixService.importItems(<unknown>, int, boolean) com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, java.lang.String, int) android.util.Log.d(java.lang.String, java.lang.String) org.json.JSONObject.put(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject) org.apache.http.conn.scheme.Scheme.Scheme(java.lang.String, org.apache.http.conn.ssl.SSLSocketFactory, int) org.apache.http.HttpEntity.getContent() org.codehaus.jackson.JsonParser.close() java.lang.String.equals(<unknown>) <unknown>.nextValueToken() <unknown>.getCurrentName() org.json.JSONArray.JSONArray(java.util.Set<java.lang.Long>) <unknown>.nextValueToken() android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null) <unknown>.getJsonArray() com.inovex.zabbixmobile.api.ZabbixService._startTransaction() org.json.JSONArray.JSONArray() <unknown>.nextProperty() java.lang.String.equals(java.lang.String) android.database.sqlite.SQLiteDatabase.update(<unknown>, android.content.ContentValues, <unknown>, null) java.util.Set<java.lang.Long>.add(<unknown>) <unknown>.get(<unknown>) <unknown>.get(<unknown>) android.content.ContentValues.put(<unknown>, java.lang.Long) java.lang.String.equals(java.lang.String) org.apache.http.StatusLine.getReasonPhrase() java.lang.RuntimeException.RuntimeException(java.lang.String) <unknown>.nextProperty() java.lang.Throwable.printStackTrace() java.lang.String.equals(<unknown>) java.lang.Long.parseLong(<unknown>) org.json.JSONObject.put(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject) <unknown>.getCurrentName() android.content.ContentValues.put(<unknown>, java.lang.Long) org.apache.http.entity.StringEntity.StringEntity(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject) java.lang.String.equals(<unknown>) <unknown>.EventData() <unknown>.next() <unknown>.set(<unknown>, <unknown>) com.inovex.zabbixmobile.api.ZabbixService.CustomSSLSocketFactory.CustomSSLSocketFactory(java.security.KeyStore) com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject) <unknown>.getCurrentName() java.util.List<java.lang.String>.add(java.lang.String) org.json.JSONObject.put(java.lang.String, int) <unknown>.getText() org.json.JSONObject.put(java.lang.String, java.lang.String) org.apache.http.conn.ssl.SSLSocketFactory.setHostnameVerifier(org.apache.http.conn.ssl.X509HostnameVerifier) <unknown>.set(<unknown>, <unknown>) <unknown>.getText() org.json.JSONObject.put(java.lang.String, long) java.util.Date.Date() org.json.JSONObject.put(java.lang.String, int) org.json.JSONObject.put(java.lang.String, int) <unknown>.set(<unknown>, <unknown>) com.inovex.zabbixmobile.api.ZabbixService.authenticate() android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null) android.util.Log.d(java.lang.String, java.lang.String) java.lang.String.equals(java.lang.String) org.apache.http.HttpResponse.getEntity() org.json.JSONObject.JSONObject() com.inovex.zabbixmobile.api.ZabbixService.importItems(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader, int, boolean) com.inovex.zabbixmobile.api.ZabbixService._startTransaction() com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, null, int) java.io.BufferedReader.read() org.json.JSONObject.put(java.lang.String, long) <unknown>.set(<unknown>, <unknown>) android.database.Cursor.getLong(<unknown>) java.lang.IllegalStateException.IllegalStateException(java.lang.String) org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.getCurrentName() android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null) android.util.Log.d(java.lang.String, java.lang.String) <unknown>.set(<unknown>, <unknown>) java.lang.String.equals(<unknown>) org.json.JSONObject.put(java.lang.String, java.lang.String) android.database.Cursor.moveToFirst() com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, java.lang.String) android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null) java.lang.String.equals(java.lang.String) com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, java.lang.String) <unknown>.getText() org.json.JSONObject.put(java.lang.String, java.lang.String) android.content.Intent.putExtra(java.lang.String, <unknown>) <unknown>.getCurrentName() android.content.res.Resources.getString(<unknown>) android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null) android.database.sqlite.SQLiteDatabase.setTransactionSuccessful() <unknown>.next() <unknown>.getText() <unknown>.nextValueToken() com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject) com.inovex.zabbixmobile.api.ZabbixService.showProgress(<unknown>) java.io.IOException.IOException(java.lang.String) <unknown>.getCurrentName() android.util.Log.d(java.lang.String, java.lang.String) java.lang.Object.toString() org.json.JSONObject.toString() <unknown>.set(<unknown>, <unknown>) org.json.JSONArray.JSONArray() org.apache.http.HttpResponse.getStatusLine() org.json.JSONArray.JSONArray() org.json.JSONObject.put(java.lang.String, java.lang.String) org.apache.http.impl.client.DefaultHttpClient.DefaultHttpClient() org.json.JSONObject.put(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject) org.apache.http.HttpResponse.getStatusLine() java.lang.String.equals(<unknown>) java.util.Date.Date() android.util.Log.i(java.lang.String, java.lang.String) android.content.Context.getResources() org.apache.http.impl.client.CloseableHttpClient.execute(org.apache.http.client.methods.HttpPost) com.inovex.zabbixmobile.api.ZabbixService._commitTransactionIfRecommended() com.inovex.zabbixmobile.api.ZabbixService.importHostGroups(<unknown>) android.content.Context.sendBroadcast(android.content.Intent) android.content.Context.sendBroadcast(android.content.Intent) com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, null, int) java.lang.Integer.parseInt(<unknown>) <unknown>.ApplicationData() com.inovex.zabbixmobile.api.ZabbixService.NoAPIAccessException.NoAPIAccessException() com.inovex.zabbixmobile.api.ZabbixService._commitTransactionIfRecommended() <unknown>.getJsonArray() org.apache.http.message.AbstractHttpMessage.addHeader(java.lang.String, java.lang.String) org.json.JSONObject.put(java.lang.String, int) java.lang.String.replace(java.lang.String, java.lang.String) org.json.JSONArray.JSONArray() <unknown>.set(<unknown>, <unknown>) org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.set(<unknown>, <unknown>) org.json.JSONArray.JSONArray() java.lang.String.equals(<unknown>) com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, java.lang.String, int) <unknown>.nextProperty() <unknown>.set(<unknown>, java.lang.String) org.json.JSONObject.JSONObject() java.lang.String.contains(java.lang.String) org.apache.http.client.methods.HttpEntityEnclosingRequestBase.setEntity(org.apache.http.entity.StringEntity) com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject) com.inovex.zabbixmobile.api.ZabbixService.importTriggers(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader) org.json.JSONObject.put(java.lang.String, int) <unknown>.HostGroupData() <unknown>.JsonArrayOrObjectReader(org.codehaus.jackson.JsonParser) <unknown>.HostGroupData() <unknown>.nextProperty() java.lang.Long.parseLong(<unknown>) org.json.JSONObject.put(java.lang.String, java.lang.String) org.json.JSONObject.put(java.lang.String, org.json.JSONArray) org.json.JSONObject.put(java.lang.String, java.lang.Integer) <unknown>.set(<unknown>, <unknown>) <unknown>.close() org.json.JSONObject.put(java.lang.String, org.json.JSONArray) <unknown>.set(<unknown>, <unknown>) java.lang.String.equals(java.lang.String) android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null) <unknown>.next() org.json.JSONObject.toString() java.lang.String.equals(<unknown>) java.lang.String.equals(<unknown>) android.database.sqlite.SQLiteDatabase.query(<unknown>, null, <unknown>, null, null, null, null) <unknown>.set(<unknown>, <unknown>) org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.CacheData() <unknown>.getText() com.inovex.zabbixmobile.api.ZabbixService._startTransaction() <unknown>.set(<unknown>, <unknown>) com.inovex.zabbixmobile.api.ZabbixService._endTransaction() <unknown>.set(<unknown>, int) <unknown>.getJsonArray() java.lang.String.equals(<unknown>) java.util.Date.getTime() java.lang.String.equals(java.lang.String) org.json.JSONObject.put(java.lang.String, int) <unknown>.set(<unknown>, <unknown>) java.lang.Integer.parseInt(<unknown>) org.codehaus.jackson.JsonParser.getCurrentName() <unknown>.nextProperty() com.inovex.zabbixmobile.api.ZabbixService._endTransaction() java.lang.String.equals(<unknown>) org.json.JSONObject.put(java.lang.String, int) android.database.sqlite.SQLiteDatabase.update(<unknown>, android.content.ContentValues, <unknown>, null) com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject) com.inovex.zabbixmobile.api.ZabbixService._endTransaction() java.lang.StringBuilder.append(char) <unknown>.set(<unknown>, <unknown>) <unknown>.get(<unknown>) <unknown>.set(<unknown>, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject) org.json.JSONObject.put(java.lang.String, java.lang.String) android.database.Cursor.getLong(<unknown>) java.lang.String.equals(<unknown>) org.json.JSONObject.put(java.lang.String, java.lang.String) org.json.JSONObject.JSONObject() org.apache.http.params.HttpProtocolParams.setVersion(org.apache.http.params.HttpParams, org.apache.http.HttpVersion) org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.HistoryDetailData() android.util.Log.d(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService._startTransaction() <unknown>.next() <unknown>.set(<unknown>, <unknown>) <unknown>.nextValueToken() org.json.JSONObject.JSONObject() java.lang.String.equals(<unknown>) java.lang.Long.parseLong(<unknown>) java.lang.Integer.parseInt(<unknown>) org.apache.http.client.methods.HttpPost.HttpPost(java.lang.String) org.apache.http.StatusLine.getStatusCode() <unknown>.set(<unknown>, int) java.lang.String.equals(java.lang.String) java.lang.String.equals(<unknown>) java.lang.String.equals(<unknown>) <unknown>.getCurrentName() java.util.ArrayList<java.lang.String>.ArrayList, String() com.inovex.zabbixmobile.api.ZabbixService._startTransaction() com.inovex.zabbixmobile.api.ZabbixService.importTriggers(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader) org.json.JSONArray.put(java.lang.String) <unknown>.nextValueToken() org.json.JSONArray.put(java.lang.String) <unknown>.set(<unknown>, <unknown>) org.json.JSONObject.put(java.lang.String, int) com.inovex.zabbixmobile.api.ZabbixService.importItems(<unknown>, int, boolean) org.json.JSONObject.JSONObject() com.inovex.zabbixmobile.api.ZabbixService.importTriggers(<unknown>) com.inovex.zabbixmobile.api.ZabbixService.importGraphItems(<unknown>) <unknown>.ScreenItemData() <unknown>.set(<unknown>, <unknown>) <unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>) android.preference.PreferenceManager.getDefaultSharedPreferences(android.content.Context) org.json.JSONObject.length() <unknown>.nextValueToken() java.util.HashSet<java.lang.Long>.HashSet, Long() java.lang.String.equals(java.lang.String) android.content.SharedPreferences.getBoolean(java.lang.String, boolean) <unknown>.insert(android.database.sqlite.SQLiteDatabase) org.json.JSONObject.put(java.lang.String, org.json.JSONArray) <unknown>.close() com.inovex.zabbixmobile.api.ZabbixService.importHosts(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader, int) org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.next() android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null) org.json.JSONObject.put(java.lang.String, java.lang.String) org.json.JSONObject.getString(java.lang.String) <unknown>.set(<unknown>, <unknown>) org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.close() org.json.JSONObject.getString(java.lang.String) java.lang.String.equals(java.lang.String) java.lang.Long.parseLong(<unknown>) org.codehaus.jackson.JsonParser.isClosed() org.json.JSONObject.put(java.lang.String, int) org.json.JSONObject.put(java.lang.String, org.json.JSONArray) java.lang.String.startsWith(java.lang.String) org.json.JSONObject.put(java.lang.String, long) <unknown>.close() org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.set(<unknown>, long) org.json.JSONObject.put(java.lang.String, org.json.JSONObject) <unknown>.set(<unknown>, <unknown>) com.inovex.zabbixmobile.api.ZabbixService._endTransaction() java.lang.String.replaceAll(java.lang.String, java.lang.String) org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.nextValueToken() org.json.JSONObject.put(java.lang.String, java.lang.String) org.json.JSONObject.put(java.lang.String, java.lang.String) org.apache.http.params.BasicHttpParams.BasicHttpParams() android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null) android.database.sqlite.SQLiteDatabase.beginTransaction() com.inovex.zabbixmobile.api.ZabbixService._commitTransactionIfRecommended() com.inovex.zabbixmobile.api.ZabbixService._endTransaction() java.lang.String.equals(<unknown>) <unknown>.insert(android.database.sqlite.SQLiteDatabase) <unknown>.insert(android.database.sqlite.SQLiteDatabase) org.json.JSONObject.put(java.lang.String, int) <unknown>.next() com.inovex.zabbixmobile.api.ZabbixService._startTransaction() <unknown>.getJsonArray() android.content.SharedPreferences.getString(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, null, int) javax.net.SocketFactory.createSocket() java.lang.Long.parseLong(<unknown>) org.apache.http.client.CredentialsProvider.setCredentials(org.apache.http.auth.AuthScope, org.apache.http.auth.UsernamePasswordCredentials) org.json.JSONObject.put(java.lang.String, java.lang.String) org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.next() com.inovex.zabbixmobile.api.ZabbixService.HttpAuthorizationRequiredException.HttpAuthorizationRequiredException() android.database.sqlite.SQLiteQueryBuilder.query(android.database.sqlite.SQLiteDatabase, null, null, null, null, null, null) java.util.Date.Date() com.inovex.zabbixmobile.api.ZabbixService._commitTransactionIfRecommended() <unknown>.set(<unknown>, java.lang.String) org.json.JSONObject.JSONObject() <unknown>.next() <unknown>.set(<unknown>, <unknown>) <unknown>.set(<unknown>, <unknown>) com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject) java.lang.String.equals(java.lang.String) com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, java.lang.String) java.lang.String.indexOf(char) android.database.sqlite.SQLiteDatabase.query(<unknown>, null, <unknown>, null, null, null, null) android.preference.PreferenceManager.getDefaultSharedPreferences(android.content.Context) <unknown>.nextProperty() org.apache.http.impl.client.CloseableHttpClient.execute(org.apache.http.client.methods.HttpPost) <unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>) com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, java.lang.String) org.json.JSONObject.JSONObject() <unknown>.close() android.database.Cursor.getColumnIndex(<unknown>) android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null) org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.nextProperty() org.apache.http.conn.scheme.PlainSocketFactory.getSocketFactory() com.inovex.zabbixmobile.api.ZabbixService._commitTransactionIfRecommended() com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject) java.lang.StringBuilder.toString() org.json.JSONObject.put(java.lang.String, java.lang.String) android.database.sqlite.SQLiteQueryBuilder.SQLiteQueryBuilder() <unknown>.insert(android.database.sqlite.SQLiteDatabase) org.apache.http.conn.scheme.SchemeRegistry.register(org.apache.http.conn.scheme.Scheme) <unknown>.set(<unknown>, <unknown>) org.json.JSONObject.JSONObject(java.lang.String) java.lang.String.equals(<unknown>) <unknown>.set(<unknown>, <unknown>) <unknown>.set(<unknown>, <unknown>) java.lang.IllegalStateException.IllegalStateException(java.lang.String) java.lang.Double.parseDouble(<unknown>) android.content.ContentValues.put(<unknown>, java.lang.Long) android.util.Log.i(java.lang.String, java.lang.String) android.database.sqlite.SQLiteQueryBuilder.appendWhere(<unknown>) org.apache.http.conn.scheme.SchemeRegistry.register(org.apache.http.conn.scheme.Scheme) org.json.JSONObject.getInt(java.lang.String) com.inovex.zabbixmobile.api.ZabbixService.importHosts(<unknown>, null) org.json.JSONObject.put(java.lang.String, boolean) java.lang.Long.parseLong(<unknown>) java.lang.String.indexOf(char) java.lang.String.equals(java.lang.String) android.database.sqlite.SQLiteQueryBuilder.appendWhere(<unknown>) java.lang.String.length() java.lang.String.equals(<unknown>) com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject) <unknown>.nextProperty() <unknown>.next() android.content.SharedPreferences.getString(java.lang.String, java.lang.String) <unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>) com.inovex.zabbixmobile.api.ZabbixService.importTriggers(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader) <unknown>.GraphData() org.json.JSONArray.put(java.lang.String) org.apache.http.impl.client.AbstractHttpClient.getParams() <unknown>.set(<unknown>, long) <unknown>.set(<unknown>, <unknown>) org.json.JSONObject.getJSONObject(java.lang.String) org.json.JSONObject.put(java.lang.String, java.lang.String) java.lang.String.equals(java.lang.String) org.json.JSONObject.getString(java.lang.String) java.lang.String.equals(<unknown>) java.lang.String.equals(<unknown>) <unknown>.getCurrentName() java.lang.String.equals(<unknown>) com.inovex.zabbixmobile.api.ZabbixService.showProgress(int) <unknown>.getCurrentName() com.inovex.zabbixmobile.api.ZabbixService.importHosts(<unknown>, null) com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, java.lang.String, int) org.json.JSONObject.put(java.lang.String, int) org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.close() java.lang.String.replace(java.lang.String, java.lang.String) java.lang.String.equals(<unknown>) com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject) com.inovex.zabbixmobile.api.ZabbixService._endTransaction() android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null) android.database.Cursor.moveToNext() <unknown>.HostData() <unknown>.set(<unknown>, long) <unknown>.next() com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject) android.database.sqlite.SQLiteQueryBuilder.setTables(<unknown>) java.util.Date.getTime() org.json.JSONObject.put(java.lang.String, long) android.content.ContentValues.ContentValues(int) java.lang.Long.parseLong(<unknown>) org.apache.http.HttpResponse.getEntity() org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.getText() java.lang.String.equals(java.lang.String) <unknown>.set(<unknown>, <unknown>) <unknown>.set(<unknown>, <unknown>) javax.net.ssl.SSLContext.init(null, javax.net.ssl.TrustManager[], null) android.database.sqlite.SQLiteDatabase.endTransaction() java.lang.String.equals(<unknown>) com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, java.lang.String) android.util.Log.d(java.lang.String, java.lang.String) <unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>) <unknown>.next() <unknown>.close() <unknown>.insert(android.database.sqlite.SQLiteDatabase) org.json.JSONObject.put(java.lang.String, java.lang.String) java.lang.Throwable.getMessage() java.lang.String.equals(<unknown>) java.lang.String.equals(<unknown>) <unknown>.set(<unknown>, <unknown>) com.inovex.zabbixmobile.api.ZabbixService._endTransaction() javax.net.ssl.SSLContext.getSocketFactory() org.json.JSONObject.JSONObject() android.content.Context.getResources() org.json.JSONObject.put(java.lang.String, int) com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, null) com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, java.lang.String, int) java.lang.String.matches(java.lang.String) <unknown>.set(<unknown>, <unknown>) org.json.JSONArray.put(java.lang.String) <unknown>.set(<unknown>, <unknown>) android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null) android.content.Context.sendBroadcast(android.content.Intent) org.json.JSONObject.getJSONObject(java.lang.String) <unknown>.get(<unknown>) android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null) java.lang.String.equals(<unknown>) android.content.SharedPreferences.getBoolean(java.lang.String, boolean) java.lang.Throwable.printStackTrace() android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null) org.json.JSONObject.put(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService._startTransaction() android.content.Intent.putExtra(java.lang.String, int) org.json.JSONObject.JSONObject() <unknown>.getText() com.inovex.zabbixmobile.api.ZabbixService._endTransaction() org.apache.http.client.methods.HttpPost.HttpPost(java.lang.String) android.content.SharedPreferences.getString(java.lang.String, java.lang.String) <unknown>.GraphItemData() com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, java.lang.String, int) <unknown>.nextValueToken() org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager.ThreadSafeClientConnManager(org.apache.http.params.HttpParams, org.apache.http.conn.scheme.SchemeRegistry) <unknown>.ApplicationItemRelationData() java.lang.Object.toString() android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null) org.json.JSONArray.JSONArray() java.lang.String.equals(<unknown>) com.inovex.zabbixmobile.api.ZabbixService._startTransaction() org.json.JSONObject.put(java.lang.String, org.json.JSONArray) com.inovex.zabbixmobile.api.ZabbixService.importApplications(int, int, <unknown>) <unknown>.set(<unknown>, int) org.json.JSONObject.put(java.lang.String, int) com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, java.lang.String, int) org.json.JSONObject.put(java.lang.String, java.lang.String) org.json.JSONObject.JSONObject() java.lang.Math.min(int, int) com.inovex.zabbixmobile.api.ZabbixService.showProgress(<unknown>) java.lang.String.equals(java.lang.String) android.content.Intent.Intent(<unknown>) java.lang.String.equals(<unknown>) org.json.JSONObject.put(java.lang.String, int) javax.net.ssl.SSLContext.getInstance(java.lang.String) android.content.res.Resources.getString(<unknown>) org.json.JSONObject.JSONObject() android.content.Intent.Intent(<unknown>) java.lang.String.equals(<unknown>) <unknown>.nextProperty() javax.net.ssl.SSLSocketFactory.createSocket(java.net.Socket, java.lang.String, int, boolean) org.json.JSONObject.put(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject) <unknown>.get(<unknown>) java.io.IOException.IOException(java.lang.String) java.lang.String.trim() java.lang.String.contains(java.lang.String) org.apache.http.entity.StringEntity.StringEntity(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService._endTransaction() .X509TrustManager() com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject) android.graphics.Color.parseColor(<unknown>) com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, null) org.json.JSONObject.getJSONArray(java.lang.String) org.apache.http.client.params.HttpClientParams.setRedirecting(org.apache.http.params.HttpParams, boolean) com.inovex.zabbixmobile.api.ZabbixService._startTransaction() <unknown>.getCurrentName() java.lang.String.equals(<unknown>) java.lang.Long.parseLong(<unknown>) android.util.Log.d(java.lang.String, java.lang.String) org.codehaus.jackson.JsonParser.getCurrentToken() org.codehaus.jackson.JsonParser.nextValue() java.lang.Long.parseLong(<unknown>) <unknown>.getText() java.util.Date.getTime() android.content.Intent.putExtra(java.lang.String, <unknown>) android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null) <unknown>.get(<unknown>) android.database.Cursor.moveToFirst() org.apache.http.client.methods.HttpEntityEnclosingRequestBase.setEntity(org.apache.http.entity.StringEntity) com.inovex.zabbixmobile.api.ZabbixService._commitTransactionIfRecommended() com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, null) android.database.sqlite.SQLiteQueryBuilder.appendWhere(<unknown>) org.apache.http.auth.UsernamePasswordCredentials.UsernamePasswordCredentials(java.lang.String, java.lang.String) java.util.Date.getTime() java.lang.String.equals(<unknown>) com.inovex.zabbixmobile.api.ZabbixService._endTransaction() org.json.JSONObject.put(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService.authenticate() java.lang.String.equals(<unknown>) org.json.JSONObject.put(java.lang.String, java.lang.String) org.json.JSONObject.put(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService.NoAPIAccessException.NoAPIAccessException() org.json.JSONArray.put(long) com.inovex.zabbixmobile.api.ZabbixService._endTransaction() android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null) <unknown>.getJsonArray() <unknown>.ScreenData() java.util.Date.Date() java.util.Date.Date() <unknown>.set(<unknown>, long) <unknown>.getCurrentName() org.json.JSONObject.put(java.lang.String, org.json.JSONArray) <unknown>.set(<unknown>, long) org.json.JSONObject.put(java.lang.String, java.lang.String) org.apache.http.params.HttpConnectionParams.setConnectionTimeout(org.apache.http.params.HttpParams, int) org.json.JSONArray.length() <unknown>.set(<unknown>, java.lang.String) <unknown>.set(<unknown>, long) java.util.Date.getTime() <unknown>.set(<unknown>, <unknown>) <unknown>.set(<unknown>, <unknown>) org.json.JSONArray.put(java.lang.String) java.lang.String.equals(<unknown>) com.inovex.zabbixmobile.api.ZabbixService.importScreenItems(<unknown>) com.inovex.zabbixmobile.api.ZabbixService.HttpAuthorizationRequiredException.HttpAuthorizationRequiredException() <unknown>.getText() org.json.JSONObject.put(java.lang.String, org.json.JSONArray) com.inovex.zabbixmobile.api.ZabbixService.importEvents(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader, null) org.json.JSONObject.JSONObject() <unknown>.set(<unknown>, <unknown>) com.inovex.zabbixmobile.api.ZabbixService.importHostGroups(<unknown>) org.json.JSONObject.toString() java.lang.Integer.parseInt(<unknown>) android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null) org.apache.http.params.HttpProtocolParams.setContentCharset(org.apache.http.params.HttpParams, java.lang.String) <unknown>.get(<unknown>) java.lang.String.equals(<unknown>) <unknown>.set(<unknown>, <unknown>) <unknown>.nextValueToken() <unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>) org.json.JSONObject.put(java.lang.String, org.json.JSONArray) org.json.JSONObject.put(java.lang.String, java.lang.Integer) <unknown>.getText() <unknown>.set(<unknown>, <unknown>) org.apache.http.message.AbstractHttpMessage.addHeader(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject) org.json.JSONObject.getJSONArray(java.lang.String) java.security.KeyStore.load(null, null) java.lang.String.replace(java.lang.String, java.lang.String) java.lang.Long.parseLong(<unknown>) org.json.JSONObject.toString() com.inovex.zabbixmobile.api.ZabbixService.importTriggers(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader) android.util.Log.d(java.lang.String, java.lang.String) android.content.SharedPreferences.getString(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, java.lang.String) <unknown>.TriggerData() android.content.SharedPreferences.getString(java.lang.String, java.lang.String) android.content.Intent.Intent(<unknown>) org.json.JSONObject.put(java.lang.String, java.lang.String) org.apache.http.impl.client.AbstractHttpClient.getCredentialsProvider() <unknown>.set(<unknown>, <unknown>) java.io.IOException.IOException(java.lang.String) java.lang.String.trim() org.json.JSONObject.put(java.lang.String, org.json.JSONArray) java.lang.String.split(java.lang.String) java.lang.String.equals(java.lang.String) java.lang.String.endsWith(java.lang.String) <unknown>.set(<unknown>, int) com.inovex.zabbixmobile.api.ZabbixService.showProgress(int) <unknown>.ItemData() org.json.JSONObject.put(java.lang.String, int) <unknown>.set(<unknown>, <unknown>) org.codehaus.jackson.JsonParser.getText() android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null) org.apache.http.impl.client.DefaultHttpClient.DefaultHttpClient(org.apache.http.conn.ClientConnectionManager, org.apache.http.params.HttpParams) <unknown>.close() java.lang.IllegalStateException.IllegalStateException(java.lang.String) org.json.JSONObject.put(java.lang.String, java.lang.String) org.codehaus.jackson.JsonParser.nextToken() android.database.Cursor.getColumnIndex(<unknown>) org.json.JSONObject.put(java.lang.String, org.json.JSONArray) <unknown>.nextValueToken() com.inovex.zabbixmobile.api.ZabbixService._startTransaction() org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.set(<unknown>, java.lang.String) java.lang.String.substring(int, int) java.lang.Long.parseLong(<unknown>) org.json.JSONObject.put(java.lang.String, java.lang.String) org.json.JSONObject.getInt(java.lang.String) java.lang.String.equals(java.lang.String) <unknown>.set(<unknown>, <unknown>) <unknown>.set(<unknown>, <unknown>) java.security.KeyStore.getInstance(java.lang.String) java.lang.Integer.parseInt(<unknown>) java.lang.String.equals(java.lang.String) <unknown>.nextProperty() android.content.Intent.putExtra(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, null) <unknown>.set(<unknown>, int) java.io.BufferedReader.BufferedReader(java.io.InputStreamReader) com.inovex.zabbixmobile.api.ZabbixService.importEvents(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader, int) java.security.KeyStore.getDefaultType() java.lang.String.equals(<unknown>) <unknown>.getText() org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.set(<unknown>, java.lang.Object) org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.insert(android.database.sqlite.SQLiteDatabase) <unknown>.nextProperty() com.inovex.zabbixmobile.api.ZabbixService._startTransaction() org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.close() <unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>) org.json.JSONObject.put(java.lang.String, long) com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, null, int) <unknown>.getJsonArray() <unknown>.set(<unknown>, <unknown>) java.lang.String.equals(<unknown>) org.apache.http.conn.scheme.Scheme.Scheme(java.lang.String, org.apache.http.conn.scheme.PlainSocketFactory, int) org.json.JSONObject.put(java.lang.String, java.lang.String) java.lang.String.equals(<unknown>)"],
      "c_callsites_t": ["<unknown>.set(<unknown>, <unknown>) org.apache.http.HttpEntity.getContent() java.lang.String.equals(java.lang.String) org.json.JSONArray.JSONArray() <unknown>.set(<unknown>, java.lang.Object) org.json.JSONObject.put(java.lang.String, java.lang.Integer) org.json.JSONArray.put(java.lang.String) org.json.JSONObject.JSONObject() org.json.JSONObject.put(java.lang.String, java.lang.String) org.codehaus.jackson.JsonFactory.createJsonParser(java.io.InputStream) java.lang.String.equals(<unknown>) org.apache.http.StatusLine.getStatusCode() <unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>) org.json.JSONObject.put(java.lang.String, java.lang.String) android.database.sqlite.SQLiteDatabase.inTransaction() android.util.Log.d(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService._startTransaction() java.lang.String.equals(java.lang.String) org.codehaus.jackson.JsonFactory.JsonFactory() com.inovex.zabbixmobile.api.ZabbixService._endTransaction() org.json.JSONObject.put(java.lang.String, int) android.content.ContentValues.ContentValues(int) org.apache.http.conn.scheme.SchemeRegistry.SchemeRegistry() <unknown>.insert(android.database.sqlite.SQLiteDatabase) <unknown>.insert(android.database.sqlite.SQLiteDatabase) <unknown>.getJsonArrayOrObjectReader() com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject) com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject) com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject) org.json.JSONObject.getJSONObject(java.lang.String) java.io.InputStreamReader.InputStreamReader(java.io.InputStream) android.content.Intent.putExtra(java.lang.String, <unknown>) org.json.JSONArray.length() java.lang.String.equals(java.lang.String) <unknown>.set(<unknown>, <unknown>) java.lang.String.equals(<unknown>) com.inovex.zabbixmobile.api.ZabbixService.PreconditionFailedException.PreconditionFailedException() java.lang.StringBuilder.StringBuilder() android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null) <unknown>.nextValueToken() org.json.JSONObject.JSONObject() org.json.JSONObject.put(java.lang.String, int) org.json.JSONObject.put(java.lang.String, org.json.JSONArray) java.lang.String.equals(<unknown>) <unknown>.get(<unknown>) <unknown>.insert(android.database.sqlite.SQLiteDatabase) android.content.Intent.putExtra(java.lang.String, <unknown>) java.lang.String.equals(<unknown>) com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, java.lang.String, int) android.util.Log.d(java.lang.String, java.lang.String) org.json.JSONObject.put(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject) org.apache.http.conn.scheme.Scheme.Scheme(java.lang.String, org.apache.http.conn.ssl.SSLSocketFactory, int) org.apache.http.HttpEntity.getContent() org.codehaus.jackson.JsonParser.close() java.lang.String.equals(<unknown>) <unknown>.nextValueToken() <unknown>.getCurrentName() org.json.JSONArray.JSONArray(java.util.Set<java.lang.Long>) <unknown>.nextValueToken() android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null) com.inovex.zabbixmobile.api.ZabbixService._startTransaction() org.json.JSONArray.JSONArray() <unknown>.nextProperty() java.lang.String.equals(java.lang.String) android.database.sqlite.SQLiteDatabase.update(<unknown>, android.content.ContentValues, <unknown>, null) java.util.Set<java.lang.Long>.add(<unknown>) <unknown>.get(<unknown>) <unknown>.get(<unknown>) android.content.ContentValues.put(<unknown>, java.lang.Long) java.lang.String.equals(java.lang.String) org.apache.http.StatusLine.getReasonPhrase() java.lang.RuntimeException.RuntimeException(java.lang.String) <unknown>.nextProperty() java.lang.Throwable.printStackTrace() java.lang.String.equals(<unknown>) java.lang.Long.parseLong(<unknown>) com.inovex.zabbixmobile.api.ZabbixService.importItems(<unknown>, int, boolean) org.json.JSONObject.put(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject) <unknown>.getCurrentName() android.content.ContentValues.put(<unknown>, java.lang.Long) org.apache.http.entity.StringEntity.StringEntity(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject) java.lang.String.equals(<unknown>) <unknown>.EventData() <unknown>.next() <unknown>.set(<unknown>, <unknown>) com.inovex.zabbixmobile.api.ZabbixService.CustomSSLSocketFactory.CustomSSLSocketFactory(java.security.KeyStore) com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject) <unknown>.getCurrentName() java.util.List<java.lang.String>.add(java.lang.String) org.json.JSONObject.put(java.lang.String, int) <unknown>.getText() org.json.JSONObject.put(java.lang.String, java.lang.String) org.apache.http.conn.ssl.SSLSocketFactory.setHostnameVerifier(org.apache.http.conn.ssl.X509HostnameVerifier) <unknown>.set(<unknown>, <unknown>) <unknown>.getText() org.json.JSONObject.put(java.lang.String, long) java.util.Date.Date() org.json.JSONObject.put(java.lang.String, int) org.json.JSONObject.put(java.lang.String, int) <unknown>.set(<unknown>, <unknown>) com.inovex.zabbixmobile.api.ZabbixService.authenticate() android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null) android.util.Log.d(java.lang.String, java.lang.String) java.lang.String.equals(java.lang.String) org.apache.http.HttpResponse.getEntity() org.json.JSONObject.JSONObject() com.inovex.zabbixmobile.api.ZabbixService.importItems(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader, int, boolean) <unknown>.getJsonArrayOrObjectReader() com.inovex.zabbixmobile.api.ZabbixService._startTransaction() com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, null, int) java.io.BufferedReader.read() org.json.JSONObject.put(java.lang.String, long) <unknown>.set(<unknown>, <unknown>) android.database.Cursor.getLong(<unknown>) java.lang.IllegalStateException.IllegalStateException(java.lang.String) org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.getCurrentName() android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null) android.util.Log.d(java.lang.String, java.lang.String) <unknown>.set(<unknown>, <unknown>) java.lang.String.equals(<unknown>) org.json.JSONObject.put(java.lang.String, java.lang.String) android.database.Cursor.moveToFirst() com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, java.lang.String) android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null) java.lang.String.equals(java.lang.String) com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, java.lang.String) <unknown>.getText() org.json.JSONObject.put(java.lang.String, java.lang.String) android.content.Intent.putExtra(java.lang.String, <unknown>) <unknown>.getCurrentName() android.content.res.Resources.getString(<unknown>) android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null) android.database.sqlite.SQLiteDatabase.setTransactionSuccessful() <unknown>.next() <unknown>.getText() <unknown>.nextValueToken() com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject) com.inovex.zabbixmobile.api.ZabbixService.showProgress(<unknown>) java.io.IOException.IOException(java.lang.String) <unknown>.getCurrentName() android.util.Log.d(java.lang.String, java.lang.String) java.lang.Object.toString() org.json.JSONObject.toString() <unknown>.set(<unknown>, <unknown>) org.json.JSONArray.JSONArray() org.apache.http.HttpResponse.getStatusLine() org.json.JSONArray.JSONArray() org.json.JSONObject.put(java.lang.String, java.lang.String) org.apache.http.impl.client.DefaultHttpClient.DefaultHttpClient() org.json.JSONObject.put(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject) org.apache.http.HttpResponse.getStatusLine() java.lang.String.equals(<unknown>) java.util.Date.Date() android.util.Log.i(java.lang.String, java.lang.String) android.content.Context.getResources() org.apache.http.impl.client.CloseableHttpClient.execute(org.apache.http.client.methods.HttpPost) com.inovex.zabbixmobile.api.ZabbixService._commitTransactionIfRecommended() android.content.Context.sendBroadcast(android.content.Intent) android.content.Context.sendBroadcast(android.content.Intent) com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, null, int) java.lang.Integer.parseInt(<unknown>) <unknown>.ApplicationData() com.inovex.zabbixmobile.api.ZabbixService.NoAPIAccessException.NoAPIAccessException() com.inovex.zabbixmobile.api.ZabbixService._commitTransactionIfRecommended() org.apache.http.message.AbstractHttpMessage.addHeader(java.lang.String, java.lang.String) org.json.JSONObject.put(java.lang.String, int) java.lang.String.replace(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService.importHostGroups(<unknown>) org.json.JSONArray.JSONArray() <unknown>.set(<unknown>, <unknown>) org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.set(<unknown>, <unknown>) org.json.JSONArray.JSONArray() java.lang.String.equals(<unknown>) com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, java.lang.String, int) <unknown>.nextProperty() <unknown>.set(<unknown>, java.lang.String) org.json.JSONObject.JSONObject() java.lang.String.contains(java.lang.String) org.apache.http.client.methods.HttpEntityEnclosingRequestBase.setEntity(org.apache.http.entity.StringEntity) com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject) com.inovex.zabbixmobile.api.ZabbixService.importTriggers(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader) org.json.JSONObject.put(java.lang.String, int) <unknown>.HostGroupData() <unknown>.JsonArrayOrObjectReader(org.codehaus.jackson.JsonParser) <unknown>.HostGroupData() <unknown>.nextProperty() java.lang.Long.parseLong(<unknown>) org.json.JSONObject.put(java.lang.String, java.lang.String) org.json.JSONObject.put(java.lang.String, org.json.JSONArray) org.json.JSONObject.put(java.lang.String, java.lang.Integer) <unknown>.set(<unknown>, <unknown>) <unknown>.close() org.json.JSONObject.put(java.lang.String, org.json.JSONArray) <unknown>.set(<unknown>, <unknown>) java.lang.String.equals(java.lang.String) android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null) <unknown>.next() org.json.JSONObject.toString() java.lang.String.equals(<unknown>) java.lang.String.equals(<unknown>) android.database.sqlite.SQLiteDatabase.query(<unknown>, null, <unknown>, null, null, null, null) <unknown>.set(<unknown>, <unknown>) org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.CacheData() <unknown>.getText() com.inovex.zabbixmobile.api.ZabbixService._startTransaction() <unknown>.set(<unknown>, <unknown>) com.inovex.zabbixmobile.api.ZabbixService._endTransaction() <unknown>.set(<unknown>, int) java.lang.String.equals(<unknown>) java.util.Date.getTime() java.lang.String.equals(java.lang.String) org.json.JSONObject.put(java.lang.String, int) <unknown>.set(<unknown>, <unknown>) java.lang.Integer.parseInt(<unknown>) org.codehaus.jackson.JsonParser.getCurrentName() <unknown>.nextProperty() com.inovex.zabbixmobile.api.ZabbixService._endTransaction() java.lang.String.equals(<unknown>) org.json.JSONObject.put(java.lang.String, int) android.database.sqlite.SQLiteDatabase.update(<unknown>, android.content.ContentValues, <unknown>, null) com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject) com.inovex.zabbixmobile.api.ZabbixService._endTransaction() java.lang.StringBuilder.append(char) <unknown>.set(<unknown>, <unknown>) <unknown>.get(<unknown>) <unknown>.set(<unknown>, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject) org.json.JSONObject.put(java.lang.String, java.lang.String) android.database.Cursor.getLong(<unknown>) java.lang.String.equals(<unknown>) org.json.JSONObject.put(java.lang.String, java.lang.String) org.json.JSONObject.JSONObject() org.apache.http.params.HttpProtocolParams.setVersion(org.apache.http.params.HttpParams, org.apache.http.HttpVersion) com.inovex.zabbixmobile.api.ZabbixService.importApplications(int, int, <unknown>) org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.HistoryDetailData() android.util.Log.d(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService._startTransaction() <unknown>.next() <unknown>.set(<unknown>, <unknown>) <unknown>.nextValueToken() org.json.JSONObject.JSONObject() java.lang.String.equals(<unknown>) com.inovex.zabbixmobile.api.ZabbixService.importScreenItems(<unknown>) java.lang.Long.parseLong(<unknown>) java.lang.Integer.parseInt(<unknown>) org.apache.http.client.methods.HttpPost.HttpPost(java.lang.String) org.apache.http.StatusLine.getStatusCode() <unknown>.set(<unknown>, int) java.lang.String.equals(java.lang.String) java.lang.String.equals(<unknown>) java.lang.String.equals(<unknown>) <unknown>.getCurrentName() java.util.ArrayList<java.lang.String>.ArrayList, String() com.inovex.zabbixmobile.api.ZabbixService._startTransaction() com.inovex.zabbixmobile.api.ZabbixService.importTriggers(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader) org.json.JSONArray.put(java.lang.String) <unknown>.nextValueToken() org.json.JSONArray.put(java.lang.String) <unknown>.set(<unknown>, <unknown>) org.json.JSONObject.put(java.lang.String, int) org.json.JSONObject.JSONObject() <unknown>.ScreenItemData() <unknown>.set(<unknown>, <unknown>) <unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>) android.preference.PreferenceManager.getDefaultSharedPreferences(android.content.Context) org.json.JSONObject.length() <unknown>.nextValueToken() java.util.HashSet<java.lang.Long>.HashSet, Long() java.lang.String.equals(java.lang.String) android.content.SharedPreferences.getBoolean(java.lang.String, boolean) <unknown>.insert(android.database.sqlite.SQLiteDatabase) org.json.JSONObject.put(java.lang.String, org.json.JSONArray) <unknown>.close() com.inovex.zabbixmobile.api.ZabbixService.importHosts(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader, int) org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.next() android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null) org.json.JSONObject.put(java.lang.String, java.lang.String) org.json.JSONObject.getString(java.lang.String) <unknown>.set(<unknown>, <unknown>) org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.close() org.json.JSONObject.getString(java.lang.String) java.lang.String.equals(java.lang.String) java.lang.Long.parseLong(<unknown>) org.codehaus.jackson.JsonParser.isClosed() org.json.JSONObject.put(java.lang.String, int) org.json.JSONObject.put(java.lang.String, org.json.JSONArray) java.lang.String.startsWith(java.lang.String) org.json.JSONObject.put(java.lang.String, long) <unknown>.close() org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.set(<unknown>, long) org.json.JSONObject.put(java.lang.String, org.json.JSONObject) <unknown>.set(<unknown>, <unknown>) com.inovex.zabbixmobile.api.ZabbixService._endTransaction() java.lang.String.replaceAll(java.lang.String, java.lang.String) org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.nextValueToken() org.json.JSONObject.put(java.lang.String, java.lang.String) org.json.JSONObject.put(java.lang.String, java.lang.String) org.apache.http.params.BasicHttpParams.BasicHttpParams() com.inovex.zabbixmobile.api.ZabbixService.importGraphItems(<unknown>) android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null) android.database.sqlite.SQLiteDatabase.beginTransaction() com.inovex.zabbixmobile.api.ZabbixService._commitTransactionIfRecommended() com.inovex.zabbixmobile.api.ZabbixService._endTransaction() java.lang.String.equals(<unknown>) <unknown>.insert(android.database.sqlite.SQLiteDatabase) <unknown>.insert(android.database.sqlite.SQLiteDatabase) org.json.JSONObject.put(java.lang.String, int) <unknown>.next() com.inovex.zabbixmobile.api.ZabbixService._startTransaction() android.content.SharedPreferences.getString(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, null, int) javax.net.SocketFactory.createSocket() java.lang.Long.parseLong(<unknown>) org.apache.http.client.CredentialsProvider.setCredentials(org.apache.http.auth.AuthScope, org.apache.http.auth.UsernamePasswordCredentials) org.json.JSONObject.put(java.lang.String, java.lang.String) org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.next() com.inovex.zabbixmobile.api.ZabbixService.HttpAuthorizationRequiredException.HttpAuthorizationRequiredException() android.database.sqlite.SQLiteQueryBuilder.query(android.database.sqlite.SQLiteDatabase, null, null, null, null, null, null) java.util.Date.Date() com.inovex.zabbixmobile.api.ZabbixService._commitTransactionIfRecommended() <unknown>.set(<unknown>, java.lang.String) org.json.JSONObject.JSONObject() <unknown>.next() <unknown>.set(<unknown>, <unknown>) <unknown>.set(<unknown>, <unknown>) com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject) java.lang.String.equals(java.lang.String) com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, java.lang.String) java.lang.String.indexOf(char) android.database.sqlite.SQLiteDatabase.query(<unknown>, null, <unknown>, null, null, null, null) android.preference.PreferenceManager.getDefaultSharedPreferences(android.content.Context) <unknown>.nextProperty() org.apache.http.impl.client.CloseableHttpClient.execute(org.apache.http.client.methods.HttpPost) <unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>) com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, java.lang.String) org.json.JSONObject.JSONObject() <unknown>.close() android.database.Cursor.getColumnIndex(<unknown>) android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null) org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.nextProperty() org.apache.http.conn.scheme.PlainSocketFactory.getSocketFactory() com.inovex.zabbixmobile.api.ZabbixService._commitTransactionIfRecommended() com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject) java.lang.StringBuilder.toString() org.json.JSONObject.put(java.lang.String, java.lang.String) android.database.sqlite.SQLiteQueryBuilder.SQLiteQueryBuilder() <unknown>.insert(android.database.sqlite.SQLiteDatabase) org.apache.http.conn.scheme.SchemeRegistry.register(org.apache.http.conn.scheme.Scheme) <unknown>.set(<unknown>, <unknown>) org.json.JSONObject.JSONObject(java.lang.String) com.inovex.zabbixmobile.api.ZabbixService.importHosts(<unknown>, null) java.lang.String.equals(<unknown>) <unknown>.set(<unknown>, <unknown>) <unknown>.set(<unknown>, <unknown>) java.lang.IllegalStateException.IllegalStateException(java.lang.String) java.lang.Double.parseDouble(<unknown>) android.content.ContentValues.put(<unknown>, java.lang.Long) android.util.Log.i(java.lang.String, java.lang.String) android.database.sqlite.SQLiteQueryBuilder.appendWhere(<unknown>) org.apache.http.conn.scheme.SchemeRegistry.register(org.apache.http.conn.scheme.Scheme) org.json.JSONObject.getInt(java.lang.String) org.json.JSONObject.put(java.lang.String, boolean) java.lang.Long.parseLong(<unknown>) java.lang.String.indexOf(char) java.lang.String.equals(java.lang.String) android.database.sqlite.SQLiteQueryBuilder.appendWhere(<unknown>) java.lang.String.length() java.lang.String.equals(<unknown>) com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject) <unknown>.nextProperty() <unknown>.next() android.content.SharedPreferences.getString(java.lang.String, java.lang.String) <unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>) com.inovex.zabbixmobile.api.ZabbixService.importTriggers(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader) <unknown>.GraphData() org.json.JSONArray.put(java.lang.String) org.apache.http.impl.client.AbstractHttpClient.getParams() <unknown>.set(<unknown>, long) <unknown>.set(<unknown>, <unknown>) org.json.JSONObject.getJSONObject(java.lang.String) org.json.JSONObject.put(java.lang.String, java.lang.String) java.lang.String.equals(java.lang.String) org.json.JSONObject.getString(java.lang.String) java.lang.String.equals(<unknown>) java.lang.String.equals(<unknown>) <unknown>.getCurrentName() java.lang.String.equals(<unknown>) com.inovex.zabbixmobile.api.ZabbixService.showProgress(int) <unknown>.getCurrentName() com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, java.lang.String, int) org.json.JSONObject.put(java.lang.String, int) org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.close() java.lang.String.replace(java.lang.String, java.lang.String) java.lang.String.equals(<unknown>) com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject) com.inovex.zabbixmobile.api.ZabbixService._endTransaction() android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null) android.database.Cursor.moveToNext() <unknown>.HostData() <unknown>.set(<unknown>, long) <unknown>.next() com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject) android.database.sqlite.SQLiteQueryBuilder.setTables(<unknown>) java.util.Date.getTime() org.json.JSONObject.put(java.lang.String, long) android.content.ContentValues.ContentValues(int) java.lang.Long.parseLong(<unknown>) org.apache.http.HttpResponse.getEntity() org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.getText() java.lang.String.equals(java.lang.String) <unknown>.set(<unknown>, <unknown>) <unknown>.set(<unknown>, <unknown>) <unknown>.set(<unknown>, <unknown>) javax.net.ssl.SSLContext.init(null, javax.net.ssl.TrustManager[], null) android.database.sqlite.SQLiteDatabase.endTransaction() java.lang.String.equals(<unknown>) com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, java.lang.String) android.util.Log.d(java.lang.String, java.lang.String) <unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>) <unknown>.next() <unknown>.close() <unknown>.insert(android.database.sqlite.SQLiteDatabase) org.json.JSONObject.put(java.lang.String, java.lang.String) java.lang.Throwable.getMessage() java.lang.String.equals(<unknown>) java.lang.String.equals(<unknown>) <unknown>.set(<unknown>, <unknown>) com.inovex.zabbixmobile.api.ZabbixService._endTransaction() javax.net.ssl.SSLContext.getSocketFactory() org.json.JSONObject.JSONObject() android.content.Context.getResources() org.json.JSONObject.put(java.lang.String, int) com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, null) com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, java.lang.String, int) java.lang.String.matches(java.lang.String) org.json.JSONArray.put(java.lang.String) <unknown>.set(<unknown>, <unknown>) android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null) android.content.Context.sendBroadcast(android.content.Intent) org.json.JSONObject.getJSONObject(java.lang.String) <unknown>.get(<unknown>) android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null) java.lang.String.equals(<unknown>) android.content.SharedPreferences.getBoolean(java.lang.String, boolean) java.lang.Throwable.printStackTrace() android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null) org.json.JSONObject.put(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService._startTransaction() android.content.Intent.putExtra(java.lang.String, int) org.json.JSONObject.JSONObject() <unknown>.getText() com.inovex.zabbixmobile.api.ZabbixService._endTransaction() org.apache.http.client.methods.HttpPost.HttpPost(java.lang.String) android.content.SharedPreferences.getString(java.lang.String, java.lang.String) <unknown>.GraphItemData() com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, java.lang.String, int) <unknown>.nextValueToken() org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager.ThreadSafeClientConnManager(org.apache.http.params.HttpParams, org.apache.http.conn.scheme.SchemeRegistry) <unknown>.ApplicationItemRelationData() java.lang.Object.toString() android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null) org.json.JSONArray.JSONArray() java.lang.String.equals(<unknown>) com.inovex.zabbixmobile.api.ZabbixService._startTransaction() org.json.JSONObject.put(java.lang.String, org.json.JSONArray) <unknown>.set(<unknown>, int) org.json.JSONObject.put(java.lang.String, int) com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, java.lang.String, int) org.json.JSONObject.put(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService.importItems(<unknown>, int, boolean) org.json.JSONObject.JSONObject() java.lang.Math.min(int, int) com.inovex.zabbixmobile.api.ZabbixService.showProgress(<unknown>) java.lang.String.equals(java.lang.String) android.content.Intent.Intent(<unknown>) java.lang.String.equals(<unknown>) org.json.JSONObject.put(java.lang.String, int) javax.net.ssl.SSLContext.getInstance(java.lang.String) android.content.res.Resources.getString(<unknown>) org.json.JSONObject.JSONObject() android.content.Intent.Intent(<unknown>) java.lang.String.equals(<unknown>) <unknown>.nextProperty() javax.net.ssl.SSLSocketFactory.createSocket(java.net.Socket, java.lang.String, int, boolean) org.json.JSONObject.put(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject) <unknown>.get(<unknown>) com.inovex.zabbixmobile.api.ZabbixService.importHosts(<unknown>, null) java.io.IOException.IOException(java.lang.String) java.lang.String.trim() java.lang.String.contains(java.lang.String) org.apache.http.entity.StringEntity.StringEntity(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService._endTransaction() com.inovex.zabbixmobile.api.ZabbixService.importTriggers(<unknown>) .X509TrustManager() com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject) android.graphics.Color.parseColor(<unknown>) com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, null) org.json.JSONObject.getJSONArray(java.lang.String) org.apache.http.client.params.HttpClientParams.setRedirecting(org.apache.http.params.HttpParams, boolean) com.inovex.zabbixmobile.api.ZabbixService._startTransaction() <unknown>.getCurrentName() <unknown>.getJsonArrayOrObjectReader() java.lang.String.equals(<unknown>) java.lang.Long.parseLong(<unknown>) android.util.Log.d(java.lang.String, java.lang.String) org.codehaus.jackson.JsonParser.getCurrentToken() org.codehaus.jackson.JsonParser.nextValue() java.lang.Long.parseLong(<unknown>) <unknown>.getText() java.util.Date.getTime() android.content.Intent.putExtra(java.lang.String, <unknown>) android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null) <unknown>.get(<unknown>) android.database.Cursor.moveToFirst() org.apache.http.client.methods.HttpEntityEnclosingRequestBase.setEntity(org.apache.http.entity.StringEntity) com.inovex.zabbixmobile.api.ZabbixService._commitTransactionIfRecommended() com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, null) android.database.sqlite.SQLiteQueryBuilder.appendWhere(<unknown>) org.apache.http.auth.UsernamePasswordCredentials.UsernamePasswordCredentials(java.lang.String, java.lang.String) java.util.Date.getTime() java.lang.String.equals(<unknown>) com.inovex.zabbixmobile.api.ZabbixService._endTransaction() org.json.JSONObject.put(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService.authenticate() java.lang.String.equals(<unknown>) org.json.JSONObject.put(java.lang.String, java.lang.String) org.json.JSONObject.put(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService.NoAPIAccessException.NoAPIAccessException() org.json.JSONArray.put(long) com.inovex.zabbixmobile.api.ZabbixService._endTransaction() <unknown>.getJsonArrayOrObjectReader() android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null) <unknown>.ScreenData() java.util.Date.Date() java.util.Date.Date() <unknown>.set(<unknown>, long) <unknown>.getCurrentName() org.json.JSONObject.put(java.lang.String, org.json.JSONArray) <unknown>.set(<unknown>, long) org.json.JSONObject.put(java.lang.String, java.lang.String) org.apache.http.params.HttpConnectionParams.setConnectionTimeout(org.apache.http.params.HttpParams, int) org.json.JSONArray.length() <unknown>.set(<unknown>, java.lang.String) <unknown>.set(<unknown>, long) java.util.Date.getTime() <unknown>.set(<unknown>, <unknown>) <unknown>.set(<unknown>, <unknown>) org.json.JSONArray.put(java.lang.String) java.lang.String.equals(<unknown>) com.inovex.zabbixmobile.api.ZabbixService.HttpAuthorizationRequiredException.HttpAuthorizationRequiredException() <unknown>.getText() org.json.JSONObject.put(java.lang.String, org.json.JSONArray) com.inovex.zabbixmobile.api.ZabbixService.importEvents(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader, null) org.json.JSONObject.JSONObject() com.inovex.zabbixmobile.api.ZabbixService.importHostGroups(<unknown>) <unknown>.set(<unknown>, <unknown>) org.json.JSONObject.toString() java.lang.Integer.parseInt(<unknown>) android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null) org.apache.http.params.HttpProtocolParams.setContentCharset(org.apache.http.params.HttpParams, java.lang.String) <unknown>.get(<unknown>) java.lang.String.equals(<unknown>) <unknown>.set(<unknown>, <unknown>) <unknown>.nextValueToken() <unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>) org.json.JSONObject.put(java.lang.String, org.json.JSONArray) org.json.JSONObject.put(java.lang.String, java.lang.Integer) <unknown>.getText() <unknown>.set(<unknown>, <unknown>) org.apache.http.message.AbstractHttpMessage.addHeader(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject) org.json.JSONObject.getJSONArray(java.lang.String) java.security.KeyStore.load(null, null) java.lang.String.replace(java.lang.String, java.lang.String) java.lang.Long.parseLong(<unknown>) org.json.JSONObject.toString() com.inovex.zabbixmobile.api.ZabbixService.importTriggers(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader) android.util.Log.d(java.lang.String, java.lang.String) android.content.SharedPreferences.getString(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, java.lang.String) <unknown>.getJsonArrayOrObjectReader() <unknown>.TriggerData() android.content.SharedPreferences.getString(java.lang.String, java.lang.String) android.content.Intent.Intent(<unknown>) org.json.JSONObject.put(java.lang.String, java.lang.String) org.apache.http.impl.client.AbstractHttpClient.getCredentialsProvider() <unknown>.set(<unknown>, <unknown>) java.io.IOException.IOException(java.lang.String) java.lang.String.trim() org.json.JSONObject.put(java.lang.String, org.json.JSONArray) java.lang.String.split(java.lang.String) java.lang.String.equals(java.lang.String) java.lang.String.endsWith(java.lang.String) <unknown>.set(<unknown>, int) com.inovex.zabbixmobile.api.ZabbixService.showProgress(int) <unknown>.ItemData() org.json.JSONObject.put(java.lang.String, int) <unknown>.set(<unknown>, <unknown>) org.codehaus.jackson.JsonParser.getText() android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null) org.apache.http.impl.client.DefaultHttpClient.DefaultHttpClient(org.apache.http.conn.ClientConnectionManager, org.apache.http.params.HttpParams) <unknown>.close() java.lang.IllegalStateException.IllegalStateException(java.lang.String) org.json.JSONObject.put(java.lang.String, java.lang.String) org.codehaus.jackson.JsonParser.nextToken() android.database.Cursor.getColumnIndex(<unknown>) org.json.JSONObject.put(java.lang.String, org.json.JSONArray) <unknown>.nextValueToken() com.inovex.zabbixmobile.api.ZabbixService._startTransaction() org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.set(<unknown>, java.lang.String) java.lang.String.substring(int, int) java.lang.Long.parseLong(<unknown>) org.json.JSONObject.put(java.lang.String, java.lang.String) org.json.JSONObject.getInt(java.lang.String) <unknown>.getJsonArrayOrObjectReader() java.lang.String.equals(java.lang.String) <unknown>.set(<unknown>, <unknown>) <unknown>.set(<unknown>, <unknown>) java.security.KeyStore.getInstance(java.lang.String) java.lang.Integer.parseInt(<unknown>) java.lang.String.equals(java.lang.String) <unknown>.nextProperty() android.content.Intent.putExtra(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, null) <unknown>.set(<unknown>, int) java.io.BufferedReader.BufferedReader(java.io.InputStreamReader) com.inovex.zabbixmobile.api.ZabbixService.importEvents(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader, int) java.security.KeyStore.getDefaultType() java.lang.String.equals(<unknown>) <unknown>.getText() org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.set(<unknown>, java.lang.Object) org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.insert(android.database.sqlite.SQLiteDatabase) <unknown>.nextProperty() com.inovex.zabbixmobile.api.ZabbixService._startTransaction() org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.close() <unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>) org.json.JSONObject.put(java.lang.String, long) com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, null, int) <unknown>.set(<unknown>, <unknown>) java.lang.String.equals(<unknown>) org.apache.http.conn.scheme.Scheme.Scheme(java.lang.String, org.apache.http.conn.scheme.PlainSocketFactory, int) org.json.JSONObject.put(java.lang.String, java.lang.String) java.lang.String.equals(<unknown>)"],
      "c_callsites_added_t": ["<unknown>.getJsonArrayOrObjectReader() <unknown>.getJsonArrayOrObjectReader() <unknown>.getJsonArrayOrObjectReader() <unknown>.getJsonArrayOrObjectReader() <unknown>.getJsonArrayOrObjectReader() <unknown>.getJsonArrayOrObjectReader()"],
      "c_methods_t": ["ApplicationData ApplicationItemRelationData ArrayList, String BasicHttpParams BufferedReader CacheData ContentValues CustomSSLSocketFactory Date DefaultHttpClient EventData GraphData GraphItemData HashSet, Long HistoryDetailData HostData HostGroupData HttpAuthorizationRequiredException HttpPost IOException IllegalStateException InputStreamReader Intent ItemData JSONArray JSONObject JsonArrayOrObjectReader JsonFactory NoAPIAccessException PreconditionFailedException RuntimeException SQLiteQueryBuilder Scheme SchemeRegistry ScreenData ScreenItemData StringBuilder StringEntity ThreadSafeClientConnManager TriggerData UsernamePasswordCredentials X509TrustManager _commitTransactionIfRecommended _endTransaction _queryBuffer _queryStream _startTransaction add addHeader append appendWhere authenticate beginTransaction close contains createJsonParser createSocket d delete endTransaction endsWith equals execute get getBoolean getColumnIndex getContent getCredentialsProvider getCurrentName getCurrentToken getDefaultSharedPreferences getDefaultType getEntity getInstance getInt getJSONArray getJSONObject getJsonArrayOrObjectReader getLong getMessage getParams getReasonPhrase getResources getSocketFactory getStatusCode getStatusLine getString getText getTime i importApplications importEvents importGraphItems importHostGroups importHosts importItems importScreenItems importTriggers inTransaction indexOf init insert isCached isClosed length load matches min moveToFirst moveToNext next nextProperty nextToken nextValue nextValueToken parseColor parseDouble parseInt parseLong printStackTrace put putExtra query read register replace replaceAll sendBroadcast set setCached setConnectionTimeout setContentCharset setCredentials setEntity setHostnameVerifier setRedirecting setTables setTransactionSuccessful setVersion showProgress split startsWith substring toString trim update"],
      "id": "inovex/zax\u0000src/com/inovex/zabbixmobile/api/ZabbixService.java\u0000976f9d4001cf9c49a39f3b93acb53607ea8c0bfd\u00003820d9533b270822d05ab19af8a9c14f585e1749",
      "p_comments_t": ["\t\t\t// create ApplicationItemRelation /** \n * public, for the unit test\n */\n /** \n * import the hosts from stream\n * @param jsonArray stream\n * @param numHosts count of hosts for progressbar. null if unknown.\n * @return Object[] {(String) comma-separated all Hostnames, (Long) 1. host id}\n * @throws JsonParseException\n * @throws IOException\n */\n \t\t\t// result array found /** \n * import graph items\n * @param graphItems\n * @return true, if graphid column has to be updated from -1 to the correct graphid later.\n * @throws JsonParseException\n * @throws NumberFormatException\n * @throws IOException\n */\n \t\t\t\t\t\t// save only every 20th \t\t\t// wrong password. token remains null \t\t\t// the past 2 hours \t\t\t\t\t// data are unuseable, e.g. because it's a string /** \n * @param events stream\n * @param numEvents if null, no progressbar-update AND only isert, if it does not exist. If !null, progressbar-update AND always insert without checking\n * @throws JsonParseException\n * @throws IOException\n */\n \t\t\t\t\t// Precondition failed / Looks like Zabbix 1.8.2 \t\t\t// get API version \t\t\t// if #0 \"other\" does not exist yet, it has to be created \t\t\t\t\t// later the IDs will be replaced with the correct /** \n * zabbix api call. data will be parsed as json object on-the-fly. Caution: use this only for api calls with a small return data.\n * @param method\n * @param params\n * @return\n * @throws ClientProtocolException\n * @throws IOException\n * @throws JSONException\n * @throws HttpAuthorizationRequiredException\n * @throws NoAPIAccessException\n */\n /** \n * begin sql transaction\n */\n \t\t\t\t\t\t// first do a new auth and then try the same api call again \t\t\t\t// no itemid \t\t\t// count of items /** \n * init\n * @param context android context\n * @param zabbixLocalDB sqlite\n */\n \t\t\t// create applications that does not exist \t\t\t\t// so we use a fiction \t\t\t// only resouretype == 0 /** \n * probably too old zabbix <= 1.8.2\n */\n /** \n * zabbix auth. user and pwd from app preferences\n * @return true success\n * @throws ClientProtocolException\n * @throws IOException\n * @throws JSONException\n * @throws HttpAuthorizationRequiredException\n * @throws NoAPIAccessException\n */\n /** \n * close the last http stream\n */\n \t\t\t// Workaround: historydetails only comes if you use the correct \"history\"-parameter. /** \n * transforms the progress\n * @param start 0% => start%\n * @param end 100% => end%\n */\n \t\t\t\t// in Zabbix version <2.0, this is not default \t\t\t\t// file not found \t\t\t\t\t// hex string => color int \t\tHttpClientParams.setRedirecting(params, true); // redirecting /** \n * The API version. From 1.8.3 (maybe earlier) to 2.0 (excluded), this was 1.3. With 2.0, it changed to 1.4.  Finally, since 2.0.4, the API version matches the program version.\n */\n \t\t\t// if applicable replace placeholder \t\t\t// if graphid-column was not set, this must be done later. temporary graphid=-1 \t\t// for GUI unit test, just return true /** \n * imports the \"warning\"-triggers\n * @throws JSONException\n * @throws IOException\n * @throws HttpAuthorizationRequiredException\n * @throws NoAPIAccessException\n */\n \t\t\t// event is parsed and can be inserted into the db \t\tpublic static final int EVENT_GET_TIME_FROM_SHIFT = 7*24*60*60; // -7 days \t\t// http request \t\t\t\t\t// store hosts namen \t\t\t\t// http auth failed \t\t\t\t\t// at this point itemid and hostid is unknown \t\t\t\t\t// import triggers \t\t\t// we try them all, until we get results. /** \n * importiert ein trigger mit dem attribute itemid. ggf. wird der trigger zuerst gelöscht und neu angelegt. imports a trigger with the attribute itemid. if trigger already exists, it will be removed first.\n * @param triggerid\n * @throws JSONException\n * @throws IOException\n * @throws HttpAuthorizationRequiredException\n * @throws NoAPIAccessException\n */\n \t\t\t\t\t// import hosts \t\t\t// for unit test \t\t\t\t// ignore \t\t\t// or a json object /** \n * zabbix error: no api access\n */\n /** \n * counts the sql inserts/updates and do a transaction commit to save the memory\n */\n \t\t\t// send intent to GUI \t\t\t\t\t// before zabbix 2.x the name field was \"description\" \t\t\t\t\t// if we get an empty array, we try another history parameter \t\t\t\t\t// store the first item id \t\t// check if the trigger exists and if the itemid was set /** \n * global constants\n */\n \t\t\t\t// create \"other\" hostgroup #1 \t\t\t// if there's no application, the ID #0 must be added (for other) \t\t\t\t\t// because of this, all applicationrelations will be saved with itemid and hostid \"-1\". \t\t\t\t\t\t.put(\"history\", historytype) // for integer ? /** \n * interface to connect to the zabbix server\n */\n /** \n * acknowledge zabbix event. Sets ack-flag with comment. Caution: This is supported only for Zabbix version >= 1.8.4\n * @param eventid\n * @param comment\n * @return true, success.\n * @throws ClientProtocolException\n * @throws IOException\n * @throws JSONException\n * @throws HttpAuthorizationRequiredException\n * @throws NoAPIAccessException\n */\n \t\t\t// store the last stream to close it if an exception will be thrown /** \n * zabbix api call as stream.\n * @param method\n * @param params\n * @return stream im json array wrapper\n * @throws JSONException\n * @throws IOException\n * @throws HttpAuthorizationRequiredException\n * @throws NoAPIAccessException\n */\n \t\t// if applicable http auth \t\t\t// correct historytype found and there are data \t\t\t\t// count of the entries cannot be detected (zabbix bug), /** \n * import items from stream.\n * @param items stream\n * @param numItems count for progressbar, if 0 no progressbarupdate\n * @param checkBeforeInsert if true, only make an insert if item does not exist\n * @return the first item id\n * @throws JsonParseException\n * @throws IOException\n */\n \t\t\t// collect all graphids /** \n * http auth is needed\n */\n \t\t\t// ignore for unit test /** \n * commit sql transaction\n */\n \t\t\t// delete old graphs \t\t\t// host without group will get group #0 (other) \t\t\t// there's no result \t\tpublic static final int HISTORY_GET_TIME_FROM_SHIFT = 24*60*60; // -24h \t\t// if applicable, transform the progress \t\t\t// SSL not trusted \t\t\t// internet problem \t\t\tif (jp.nextToken() != JsonToken.START_ARRAY && jp.getCurrentToken() != JsonToken.START_OBJECT) { // go inside the array \t\tpublic static final int CACHE_LIFETIME_APPLICATIONS = 2*24*60*60; // 2 days \t\t\t\t\t// since zabbix 2.x is the name of the item \"name\" \t\t\t// now the \"-1\" IDs of applicationsrelation will be replaced with the correct itemID \t\t\t// get count of hosts /** \n * import the newest events\n * @throws ClientProtocolException\n * @throws IOException\n * @throws JSONException\n * @throws HttpAuthorizationRequiredException\n * @throws NoAPIAccessException\n */\n /** \n * updates the progressbar in the gui\n * @param i 0..100\n */\n \t\t\t\t\t\t// ignore \t\t\t\t\t// first do a new auth and then try the same api call again /** \n * import the newest event of a trigger\n * @param triggerid\n * @throws JSONException\n * @throws IOException\n * @throws HttpAuthorizationRequiredException\n * @throws NoAPIAccessException\n */\n \t\t// it can be an (empty) array \t\t\t// this parameter can be \"null\" or a number 0-4. Because we don't know when to use which, \t\t\t// clear triggers"],
      "p_email_sni": "jschamburger@inovex.de",
      "c_callsites_removed_t": ["<unknown>.getJsonArray() <unknown>.getJsonArray() <unknown>.getJsonArray() <unknown>.getJsonArray() <unknown>.getJsonArray() <unknown>.getJsonArray()"],
      "c_callsites_cs": "<unknown>.set(<unknown>, <unknown>)#org.apache.http.HttpEntity.getContent()#java.lang.String.equals(java.lang.String)#org.json.JSONArray.JSONArray()#<unknown>.set(<unknown>, java.lang.Object)#org.json.JSONObject.put(java.lang.String, java.lang.Integer)#org.json.JSONArray.put(java.lang.String)#org.json.JSONObject.JSONObject()#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.codehaus.jackson.JsonFactory.createJsonParser(java.io.InputStream)#java.lang.String.equals(<unknown>)#org.apache.http.StatusLine.getStatusCode()#<unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>)#org.json.JSONObject.put(java.lang.String, java.lang.String)#android.database.sqlite.SQLiteDatabase.inTransaction()#android.util.Log.d(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService._startTransaction()#java.lang.String.equals(java.lang.String)#org.codehaus.jackson.JsonFactory.JsonFactory()#com.inovex.zabbixmobile.api.ZabbixService._endTransaction()#org.json.JSONObject.put(java.lang.String, int)#android.content.ContentValues.ContentValues(int)#org.apache.http.conn.scheme.SchemeRegistry.SchemeRegistry()#<unknown>.insert(android.database.sqlite.SQLiteDatabase)#<unknown>.insert(android.database.sqlite.SQLiteDatabase)#<unknown>.getJsonArrayOrObjectReader()#com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject)#com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject)#com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject)#org.json.JSONObject.getJSONObject(java.lang.String)#java.io.InputStreamReader.InputStreamReader(java.io.InputStream)#android.content.Intent.putExtra(java.lang.String, <unknown>)#org.json.JSONArray.length()#java.lang.String.equals(java.lang.String)#<unknown>.set(<unknown>, <unknown>)#java.lang.String.equals(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService.PreconditionFailedException.PreconditionFailedException()#java.lang.StringBuilder.StringBuilder()#android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null)#<unknown>.nextValueToken()#org.json.JSONObject.JSONObject()#org.json.JSONObject.put(java.lang.String, int)#org.json.JSONObject.put(java.lang.String, org.json.JSONArray)#java.lang.String.equals(<unknown>)#<unknown>.get(<unknown>)#<unknown>.insert(android.database.sqlite.SQLiteDatabase)#android.content.Intent.putExtra(java.lang.String, <unknown>)#java.lang.String.equals(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, java.lang.String, int)#android.util.Log.d(java.lang.String, java.lang.String)#org.json.JSONObject.put(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject)#org.apache.http.conn.scheme.Scheme.Scheme(java.lang.String, org.apache.http.conn.ssl.SSLSocketFactory, int)#org.apache.http.HttpEntity.getContent()#org.codehaus.jackson.JsonParser.close()#java.lang.String.equals(<unknown>)#<unknown>.nextValueToken()#<unknown>.getCurrentName()#org.json.JSONArray.JSONArray(java.util.Set<java.lang.Long>)#<unknown>.nextValueToken()#android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null)#com.inovex.zabbixmobile.api.ZabbixService._startTransaction()#org.json.JSONArray.JSONArray()#<unknown>.nextProperty()#java.lang.String.equals(java.lang.String)#android.database.sqlite.SQLiteDatabase.update(<unknown>, android.content.ContentValues, <unknown>, null)#java.util.Set<java.lang.Long>.add(<unknown>)#<unknown>.get(<unknown>)#<unknown>.get(<unknown>)#android.content.ContentValues.put(<unknown>, java.lang.Long)#java.lang.String.equals(java.lang.String)#org.apache.http.StatusLine.getReasonPhrase()#java.lang.RuntimeException.RuntimeException(java.lang.String)#<unknown>.nextProperty()#java.lang.Throwable.printStackTrace()#java.lang.String.equals(<unknown>)#java.lang.Long.parseLong(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService.importItems(<unknown>, int, boolean)#org.json.JSONObject.put(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject)#<unknown>.getCurrentName()#android.content.ContentValues.put(<unknown>, java.lang.Long)#org.apache.http.entity.StringEntity.StringEntity(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject)#java.lang.String.equals(<unknown>)#<unknown>.EventData()#<unknown>.next()#<unknown>.set(<unknown>, <unknown>)#com.inovex.zabbixmobile.api.ZabbixService.CustomSSLSocketFactory.CustomSSLSocketFactory(java.security.KeyStore)#com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject)#<unknown>.getCurrentName()#java.util.List<java.lang.String>.add(java.lang.String)#org.json.JSONObject.put(java.lang.String, int)#<unknown>.getText()#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.apache.http.conn.ssl.SSLSocketFactory.setHostnameVerifier(org.apache.http.conn.ssl.X509HostnameVerifier)#<unknown>.set(<unknown>, <unknown>)#<unknown>.getText()#org.json.JSONObject.put(java.lang.String, long)#java.util.Date.Date()#org.json.JSONObject.put(java.lang.String, int)#org.json.JSONObject.put(java.lang.String, int)#<unknown>.set(<unknown>, <unknown>)#com.inovex.zabbixmobile.api.ZabbixService.authenticate()#android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null)#android.util.Log.d(java.lang.String, java.lang.String)#java.lang.String.equals(java.lang.String)#org.apache.http.HttpResponse.getEntity()#org.json.JSONObject.JSONObject()#com.inovex.zabbixmobile.api.ZabbixService.importItems(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader, int, boolean)#<unknown>.getJsonArrayOrObjectReader()#com.inovex.zabbixmobile.api.ZabbixService._startTransaction()#com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, null, int)#java.io.BufferedReader.read()#org.json.JSONObject.put(java.lang.String, long)#<unknown>.set(<unknown>, <unknown>)#android.database.Cursor.getLong(<unknown>)#java.lang.IllegalStateException.IllegalStateException(java.lang.String)#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.getCurrentName()#android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null)#android.util.Log.d(java.lang.String, java.lang.String)#<unknown>.set(<unknown>, <unknown>)#java.lang.String.equals(<unknown>)#org.json.JSONObject.put(java.lang.String, java.lang.String)#android.database.Cursor.moveToFirst()#com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, java.lang.String)#android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null)#java.lang.String.equals(java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, java.lang.String)#<unknown>.getText()#org.json.JSONObject.put(java.lang.String, java.lang.String)#android.content.Intent.putExtra(java.lang.String, <unknown>)#<unknown>.getCurrentName()#android.content.res.Resources.getString(<unknown>)#android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null)#android.database.sqlite.SQLiteDatabase.setTransactionSuccessful()#<unknown>.next()#<unknown>.getText()#<unknown>.nextValueToken()#com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject)#com.inovex.zabbixmobile.api.ZabbixService.showProgress(<unknown>)#java.io.IOException.IOException(java.lang.String)#<unknown>.getCurrentName()#android.util.Log.d(java.lang.String, java.lang.String)#java.lang.Object.toString()#org.json.JSONObject.toString()#<unknown>.set(<unknown>, <unknown>)#org.json.JSONArray.JSONArray()#org.apache.http.HttpResponse.getStatusLine()#org.json.JSONArray.JSONArray()#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.apache.http.impl.client.DefaultHttpClient.DefaultHttpClient()#org.json.JSONObject.put(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject)#org.apache.http.HttpResponse.getStatusLine()#java.lang.String.equals(<unknown>)#java.util.Date.Date()#android.util.Log.i(java.lang.String, java.lang.String)#android.content.Context.getResources()#org.apache.http.impl.client.CloseableHttpClient.execute(org.apache.http.client.methods.HttpPost)#com.inovex.zabbixmobile.api.ZabbixService._commitTransactionIfRecommended()#android.content.Context.sendBroadcast(android.content.Intent)#android.content.Context.sendBroadcast(android.content.Intent)#com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, null, int)#java.lang.Integer.parseInt(<unknown>)#<unknown>.ApplicationData()#com.inovex.zabbixmobile.api.ZabbixService.NoAPIAccessException.NoAPIAccessException()#com.inovex.zabbixmobile.api.ZabbixService._commitTransactionIfRecommended()#org.apache.http.message.AbstractHttpMessage.addHeader(java.lang.String, java.lang.String)#org.json.JSONObject.put(java.lang.String, int)#java.lang.String.replace(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService.importHostGroups(<unknown>)#org.json.JSONArray.JSONArray()#<unknown>.set(<unknown>, <unknown>)#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.set(<unknown>, <unknown>)#org.json.JSONArray.JSONArray()#java.lang.String.equals(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, java.lang.String, int)#<unknown>.nextProperty()#<unknown>.set(<unknown>, java.lang.String)#org.json.JSONObject.JSONObject()#java.lang.String.contains(java.lang.String)#org.apache.http.client.methods.HttpEntityEnclosingRequestBase.setEntity(org.apache.http.entity.StringEntity)#com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject)#com.inovex.zabbixmobile.api.ZabbixService.importTriggers(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader)#org.json.JSONObject.put(java.lang.String, int)#<unknown>.HostGroupData()#<unknown>.JsonArrayOrObjectReader(org.codehaus.jackson.JsonParser)#<unknown>.HostGroupData()#<unknown>.nextProperty()#java.lang.Long.parseLong(<unknown>)#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.json.JSONObject.put(java.lang.String, org.json.JSONArray)#org.json.JSONObject.put(java.lang.String, java.lang.Integer)#<unknown>.set(<unknown>, <unknown>)#<unknown>.close()#org.json.JSONObject.put(java.lang.String, org.json.JSONArray)#<unknown>.set(<unknown>, <unknown>)#java.lang.String.equals(java.lang.String)#android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null)#<unknown>.next()#org.json.JSONObject.toString()#java.lang.String.equals(<unknown>)#java.lang.String.equals(<unknown>)#android.database.sqlite.SQLiteDatabase.query(<unknown>, null, <unknown>, null, null, null, null)#<unknown>.set(<unknown>, <unknown>)#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.CacheData()#<unknown>.getText()#com.inovex.zabbixmobile.api.ZabbixService._startTransaction()#<unknown>.set(<unknown>, <unknown>)#com.inovex.zabbixmobile.api.ZabbixService._endTransaction()#<unknown>.set(<unknown>, int)#java.lang.String.equals(<unknown>)#java.util.Date.getTime()#java.lang.String.equals(java.lang.String)#org.json.JSONObject.put(java.lang.String, int)#<unknown>.set(<unknown>, <unknown>)#java.lang.Integer.parseInt(<unknown>)#org.codehaus.jackson.JsonParser.getCurrentName()#<unknown>.nextProperty()#com.inovex.zabbixmobile.api.ZabbixService._endTransaction()#java.lang.String.equals(<unknown>)#org.json.JSONObject.put(java.lang.String, int)#android.database.sqlite.SQLiteDatabase.update(<unknown>, android.content.ContentValues, <unknown>, null)#com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject)#com.inovex.zabbixmobile.api.ZabbixService._endTransaction()#java.lang.StringBuilder.append(char)#<unknown>.set(<unknown>, <unknown>)#<unknown>.get(<unknown>)#<unknown>.set(<unknown>, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject)#org.json.JSONObject.put(java.lang.String, java.lang.String)#android.database.Cursor.getLong(<unknown>)#java.lang.String.equals(<unknown>)#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.json.JSONObject.JSONObject()#org.apache.http.params.HttpProtocolParams.setVersion(org.apache.http.params.HttpParams, org.apache.http.HttpVersion)#com.inovex.zabbixmobile.api.ZabbixService.importApplications(int, int, <unknown>)#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.HistoryDetailData()#android.util.Log.d(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService._startTransaction()#<unknown>.next()#<unknown>.set(<unknown>, <unknown>)#<unknown>.nextValueToken()#org.json.JSONObject.JSONObject()#java.lang.String.equals(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService.importScreenItems(<unknown>)#java.lang.Long.parseLong(<unknown>)#java.lang.Integer.parseInt(<unknown>)#org.apache.http.client.methods.HttpPost.HttpPost(java.lang.String)#org.apache.http.StatusLine.getStatusCode()#<unknown>.set(<unknown>, int)#java.lang.String.equals(java.lang.String)#java.lang.String.equals(<unknown>)#java.lang.String.equals(<unknown>)#<unknown>.getCurrentName()#java.util.ArrayList<java.lang.String>.ArrayList, String()#com.inovex.zabbixmobile.api.ZabbixService._startTransaction()#com.inovex.zabbixmobile.api.ZabbixService.importTriggers(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader)#org.json.JSONArray.put(java.lang.String)#<unknown>.nextValueToken()#org.json.JSONArray.put(java.lang.String)#<unknown>.set(<unknown>, <unknown>)#org.json.JSONObject.put(java.lang.String, int)#org.json.JSONObject.JSONObject()#<unknown>.ScreenItemData()#<unknown>.set(<unknown>, <unknown>)#<unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>)#android.preference.PreferenceManager.getDefaultSharedPreferences(android.content.Context)#org.json.JSONObject.length()#<unknown>.nextValueToken()#java.util.HashSet<java.lang.Long>.HashSet, Long()#java.lang.String.equals(java.lang.String)#android.content.SharedPreferences.getBoolean(java.lang.String, boolean)#<unknown>.insert(android.database.sqlite.SQLiteDatabase)#org.json.JSONObject.put(java.lang.String, org.json.JSONArray)#<unknown>.close()#com.inovex.zabbixmobile.api.ZabbixService.importHosts(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader, int)#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.next()#android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null)#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.json.JSONObject.getString(java.lang.String)#<unknown>.set(<unknown>, <unknown>)#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.close()#org.json.JSONObject.getString(java.lang.String)#java.lang.String.equals(java.lang.String)#java.lang.Long.parseLong(<unknown>)#org.codehaus.jackson.JsonParser.isClosed()#org.json.JSONObject.put(java.lang.String, int)#org.json.JSONObject.put(java.lang.String, org.json.JSONArray)#java.lang.String.startsWith(java.lang.String)#org.json.JSONObject.put(java.lang.String, long)#<unknown>.close()#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.set(<unknown>, long)#org.json.JSONObject.put(java.lang.String, org.json.JSONObject)#<unknown>.set(<unknown>, <unknown>)#com.inovex.zabbixmobile.api.ZabbixService._endTransaction()#java.lang.String.replaceAll(java.lang.String, java.lang.String)#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.nextValueToken()#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.apache.http.params.BasicHttpParams.BasicHttpParams()#com.inovex.zabbixmobile.api.ZabbixService.importGraphItems(<unknown>)#android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null)#android.database.sqlite.SQLiteDatabase.beginTransaction()#com.inovex.zabbixmobile.api.ZabbixService._commitTransactionIfRecommended()#com.inovex.zabbixmobile.api.ZabbixService._endTransaction()#java.lang.String.equals(<unknown>)#<unknown>.insert(android.database.sqlite.SQLiteDatabase)#<unknown>.insert(android.database.sqlite.SQLiteDatabase)#org.json.JSONObject.put(java.lang.String, int)#<unknown>.next()#com.inovex.zabbixmobile.api.ZabbixService._startTransaction()#android.content.SharedPreferences.getString(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, null, int)#javax.net.SocketFactory.createSocket()#java.lang.Long.parseLong(<unknown>)#org.apache.http.client.CredentialsProvider.setCredentials(org.apache.http.auth.AuthScope, org.apache.http.auth.UsernamePasswordCredentials)#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.next()#com.inovex.zabbixmobile.api.ZabbixService.HttpAuthorizationRequiredException.HttpAuthorizationRequiredException()#android.database.sqlite.SQLiteQueryBuilder.query(android.database.sqlite.SQLiteDatabase, null, null, null, null, null, null)#java.util.Date.Date()#com.inovex.zabbixmobile.api.ZabbixService._commitTransactionIfRecommended()#<unknown>.set(<unknown>, java.lang.String)#org.json.JSONObject.JSONObject()#<unknown>.next()#<unknown>.set(<unknown>, <unknown>)#<unknown>.set(<unknown>, <unknown>)#com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject)#java.lang.String.equals(java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, java.lang.String)#java.lang.String.indexOf(char)#android.database.sqlite.SQLiteDatabase.query(<unknown>, null, <unknown>, null, null, null, null)#android.preference.PreferenceManager.getDefaultSharedPreferences(android.content.Context)#<unknown>.nextProperty()#org.apache.http.impl.client.CloseableHttpClient.execute(org.apache.http.client.methods.HttpPost)#<unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>)#com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, java.lang.String)#org.json.JSONObject.JSONObject()#<unknown>.close()#android.database.Cursor.getColumnIndex(<unknown>)#android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null)#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.nextProperty()#org.apache.http.conn.scheme.PlainSocketFactory.getSocketFactory()#com.inovex.zabbixmobile.api.ZabbixService._commitTransactionIfRecommended()#com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject)#java.lang.StringBuilder.toString()#org.json.JSONObject.put(java.lang.String, java.lang.String)#android.database.sqlite.SQLiteQueryBuilder.SQLiteQueryBuilder()#<unknown>.insert(android.database.sqlite.SQLiteDatabase)#org.apache.http.conn.scheme.SchemeRegistry.register(org.apache.http.conn.scheme.Scheme)#<unknown>.set(<unknown>, <unknown>)#org.json.JSONObject.JSONObject(java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService.importHosts(<unknown>, null)#java.lang.String.equals(<unknown>)#<unknown>.set(<unknown>, <unknown>)#<unknown>.set(<unknown>, <unknown>)#java.lang.IllegalStateException.IllegalStateException(java.lang.String)#java.lang.Double.parseDouble(<unknown>)#android.content.ContentValues.put(<unknown>, java.lang.Long)#android.util.Log.i(java.lang.String, java.lang.String)#android.database.sqlite.SQLiteQueryBuilder.appendWhere(<unknown>)#org.apache.http.conn.scheme.SchemeRegistry.register(org.apache.http.conn.scheme.Scheme)#org.json.JSONObject.getInt(java.lang.String)#org.json.JSONObject.put(java.lang.String, boolean)#java.lang.Long.parseLong(<unknown>)#java.lang.String.indexOf(char)#java.lang.String.equals(java.lang.String)#android.database.sqlite.SQLiteQueryBuilder.appendWhere(<unknown>)#java.lang.String.length()#java.lang.String.equals(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject)#<unknown>.nextProperty()#<unknown>.next()#android.content.SharedPreferences.getString(java.lang.String, java.lang.String)#<unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>)#com.inovex.zabbixmobile.api.ZabbixService.importTriggers(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader)#<unknown>.GraphData()#org.json.JSONArray.put(java.lang.String)#org.apache.http.impl.client.AbstractHttpClient.getParams()#<unknown>.set(<unknown>, long)#<unknown>.set(<unknown>, <unknown>)#org.json.JSONObject.getJSONObject(java.lang.String)#org.json.JSONObject.put(java.lang.String, java.lang.String)#java.lang.String.equals(java.lang.String)#org.json.JSONObject.getString(java.lang.String)#java.lang.String.equals(<unknown>)#java.lang.String.equals(<unknown>)#<unknown>.getCurrentName()#java.lang.String.equals(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService.showProgress(int)#<unknown>.getCurrentName()#com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, java.lang.String, int)#org.json.JSONObject.put(java.lang.String, int)#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.close()#java.lang.String.replace(java.lang.String, java.lang.String)#java.lang.String.equals(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject)#com.inovex.zabbixmobile.api.ZabbixService._endTransaction()#android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null)#android.database.Cursor.moveToNext()#<unknown>.HostData()#<unknown>.set(<unknown>, long)#<unknown>.next()#com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject)#android.database.sqlite.SQLiteQueryBuilder.setTables(<unknown>)#java.util.Date.getTime()#org.json.JSONObject.put(java.lang.String, long)#android.content.ContentValues.ContentValues(int)#java.lang.Long.parseLong(<unknown>)#org.apache.http.HttpResponse.getEntity()#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.getText()#java.lang.String.equals(java.lang.String)#<unknown>.set(<unknown>, <unknown>)#<unknown>.set(<unknown>, <unknown>)#<unknown>.set(<unknown>, <unknown>)#javax.net.ssl.SSLContext.init(null, javax.net.ssl.TrustManager[], null)#android.database.sqlite.SQLiteDatabase.endTransaction()#java.lang.String.equals(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, java.lang.String)#android.util.Log.d(java.lang.String, java.lang.String)#<unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>)#<unknown>.next()#<unknown>.close()#<unknown>.insert(android.database.sqlite.SQLiteDatabase)#org.json.JSONObject.put(java.lang.String, java.lang.String)#java.lang.Throwable.getMessage()#java.lang.String.equals(<unknown>)#java.lang.String.equals(<unknown>)#<unknown>.set(<unknown>, <unknown>)#com.inovex.zabbixmobile.api.ZabbixService._endTransaction()#javax.net.ssl.SSLContext.getSocketFactory()#org.json.JSONObject.JSONObject()#android.content.Context.getResources()#org.json.JSONObject.put(java.lang.String, int)#com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, null)#com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, java.lang.String, int)#java.lang.String.matches(java.lang.String)#org.json.JSONArray.put(java.lang.String)#<unknown>.set(<unknown>, <unknown>)#android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null)#android.content.Context.sendBroadcast(android.content.Intent)#org.json.JSONObject.getJSONObject(java.lang.String)#<unknown>.get(<unknown>)#android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null)#java.lang.String.equals(<unknown>)#android.content.SharedPreferences.getBoolean(java.lang.String, boolean)#java.lang.Throwable.printStackTrace()#android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null)#org.json.JSONObject.put(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService._startTransaction()#android.content.Intent.putExtra(java.lang.String, int)#org.json.JSONObject.JSONObject()#<unknown>.getText()#com.inovex.zabbixmobile.api.ZabbixService._endTransaction()#org.apache.http.client.methods.HttpPost.HttpPost(java.lang.String)#android.content.SharedPreferences.getString(java.lang.String, java.lang.String)#<unknown>.GraphItemData()#com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, java.lang.String, int)#<unknown>.nextValueToken()#org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager.ThreadSafeClientConnManager(org.apache.http.params.HttpParams, org.apache.http.conn.scheme.SchemeRegistry)#<unknown>.ApplicationItemRelationData()#java.lang.Object.toString()#android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null)#org.json.JSONArray.JSONArray()#java.lang.String.equals(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService._startTransaction()#org.json.JSONObject.put(java.lang.String, org.json.JSONArray)#<unknown>.set(<unknown>, int)#org.json.JSONObject.put(java.lang.String, int)#com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, java.lang.String, int)#org.json.JSONObject.put(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService.importItems(<unknown>, int, boolean)#org.json.JSONObject.JSONObject()#java.lang.Math.min(int, int)#com.inovex.zabbixmobile.api.ZabbixService.showProgress(<unknown>)#java.lang.String.equals(java.lang.String)#android.content.Intent.Intent(<unknown>)#java.lang.String.equals(<unknown>)#org.json.JSONObject.put(java.lang.String, int)#javax.net.ssl.SSLContext.getInstance(java.lang.String)#android.content.res.Resources.getString(<unknown>)#org.json.JSONObject.JSONObject()#android.content.Intent.Intent(<unknown>)#java.lang.String.equals(<unknown>)#<unknown>.nextProperty()#javax.net.ssl.SSLSocketFactory.createSocket(java.net.Socket, java.lang.String, int, boolean)#org.json.JSONObject.put(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject)#<unknown>.get(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService.importHosts(<unknown>, null)#java.io.IOException.IOException(java.lang.String)#java.lang.String.trim()#java.lang.String.contains(java.lang.String)#org.apache.http.entity.StringEntity.StringEntity(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService._endTransaction()#com.inovex.zabbixmobile.api.ZabbixService.importTriggers(<unknown>)#.X509TrustManager()#com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject)#android.graphics.Color.parseColor(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, null)#org.json.JSONObject.getJSONArray(java.lang.String)#org.apache.http.client.params.HttpClientParams.setRedirecting(org.apache.http.params.HttpParams, boolean)#com.inovex.zabbixmobile.api.ZabbixService._startTransaction()#<unknown>.getCurrentName()#<unknown>.getJsonArrayOrObjectReader()#java.lang.String.equals(<unknown>)#java.lang.Long.parseLong(<unknown>)#android.util.Log.d(java.lang.String, java.lang.String)#org.codehaus.jackson.JsonParser.getCurrentToken()#org.codehaus.jackson.JsonParser.nextValue()#java.lang.Long.parseLong(<unknown>)#<unknown>.getText()#java.util.Date.getTime()#android.content.Intent.putExtra(java.lang.String, <unknown>)#android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null)#<unknown>.get(<unknown>)#android.database.Cursor.moveToFirst()#org.apache.http.client.methods.HttpEntityEnclosingRequestBase.setEntity(org.apache.http.entity.StringEntity)#com.inovex.zabbixmobile.api.ZabbixService._commitTransactionIfRecommended()#com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, null)#android.database.sqlite.SQLiteQueryBuilder.appendWhere(<unknown>)#org.apache.http.auth.UsernamePasswordCredentials.UsernamePasswordCredentials(java.lang.String, java.lang.String)#java.util.Date.getTime()#java.lang.String.equals(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService._endTransaction()#org.json.JSONObject.put(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService.authenticate()#java.lang.String.equals(<unknown>)#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.json.JSONObject.put(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService.NoAPIAccessException.NoAPIAccessException()#org.json.JSONArray.put(long)#com.inovex.zabbixmobile.api.ZabbixService._endTransaction()#<unknown>.getJsonArrayOrObjectReader()#android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null)#<unknown>.ScreenData()#java.util.Date.Date()#java.util.Date.Date()#<unknown>.set(<unknown>, long)#<unknown>.getCurrentName()#org.json.JSONObject.put(java.lang.String, org.json.JSONArray)#<unknown>.set(<unknown>, long)#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.apache.http.params.HttpConnectionParams.setConnectionTimeout(org.apache.http.params.HttpParams, int)#org.json.JSONArray.length()#<unknown>.set(<unknown>, java.lang.String)#<unknown>.set(<unknown>, long)#java.util.Date.getTime()#<unknown>.set(<unknown>, <unknown>)#<unknown>.set(<unknown>, <unknown>)#org.json.JSONArray.put(java.lang.String)#java.lang.String.equals(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService.HttpAuthorizationRequiredException.HttpAuthorizationRequiredException()#<unknown>.getText()#org.json.JSONObject.put(java.lang.String, org.json.JSONArray)#com.inovex.zabbixmobile.api.ZabbixService.importEvents(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader, null)#org.json.JSONObject.JSONObject()#com.inovex.zabbixmobile.api.ZabbixService.importHostGroups(<unknown>)#<unknown>.set(<unknown>, <unknown>)#org.json.JSONObject.toString()#java.lang.Integer.parseInt(<unknown>)#android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null)#org.apache.http.params.HttpProtocolParams.setContentCharset(org.apache.http.params.HttpParams, java.lang.String)#<unknown>.get(<unknown>)#java.lang.String.equals(<unknown>)#<unknown>.set(<unknown>, <unknown>)#<unknown>.nextValueToken()#<unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>)#org.json.JSONObject.put(java.lang.String, org.json.JSONArray)#org.json.JSONObject.put(java.lang.String, java.lang.Integer)#<unknown>.getText()#<unknown>.set(<unknown>, <unknown>)#org.apache.http.message.AbstractHttpMessage.addHeader(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject)#org.json.JSONObject.getJSONArray(java.lang.String)#java.security.KeyStore.load(null, null)#java.lang.String.replace(java.lang.String, java.lang.String)#java.lang.Long.parseLong(<unknown>)#org.json.JSONObject.toString()#com.inovex.zabbixmobile.api.ZabbixService.importTriggers(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader)#android.util.Log.d(java.lang.String, java.lang.String)#android.content.SharedPreferences.getString(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, java.lang.String)#<unknown>.getJsonArrayOrObjectReader()#<unknown>.TriggerData()#android.content.SharedPreferences.getString(java.lang.String, java.lang.String)#android.content.Intent.Intent(<unknown>)#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.apache.http.impl.client.AbstractHttpClient.getCredentialsProvider()#<unknown>.set(<unknown>, <unknown>)#java.io.IOException.IOException(java.lang.String)#java.lang.String.trim()#org.json.JSONObject.put(java.lang.String, org.json.JSONArray)#java.lang.String.split(java.lang.String)#java.lang.String.equals(java.lang.String)#java.lang.String.endsWith(java.lang.String)#<unknown>.set(<unknown>, int)#com.inovex.zabbixmobile.api.ZabbixService.showProgress(int)#<unknown>.ItemData()#org.json.JSONObject.put(java.lang.String, int)#<unknown>.set(<unknown>, <unknown>)#org.codehaus.jackson.JsonParser.getText()#android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null)#org.apache.http.impl.client.DefaultHttpClient.DefaultHttpClient(org.apache.http.conn.ClientConnectionManager, org.apache.http.params.HttpParams)#<unknown>.close()#java.lang.IllegalStateException.IllegalStateException(java.lang.String)#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.codehaus.jackson.JsonParser.nextToken()#android.database.Cursor.getColumnIndex(<unknown>)#org.json.JSONObject.put(java.lang.String, org.json.JSONArray)#<unknown>.nextValueToken()#com.inovex.zabbixmobile.api.ZabbixService._startTransaction()#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.set(<unknown>, java.lang.String)#java.lang.String.substring(int, int)#java.lang.Long.parseLong(<unknown>)#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.json.JSONObject.getInt(java.lang.String)#<unknown>.getJsonArrayOrObjectReader()#java.lang.String.equals(java.lang.String)#<unknown>.set(<unknown>, <unknown>)#<unknown>.set(<unknown>, <unknown>)#java.security.KeyStore.getInstance(java.lang.String)#java.lang.Integer.parseInt(<unknown>)#java.lang.String.equals(java.lang.String)#<unknown>.nextProperty()#android.content.Intent.putExtra(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, null)#<unknown>.set(<unknown>, int)#java.io.BufferedReader.BufferedReader(java.io.InputStreamReader)#com.inovex.zabbixmobile.api.ZabbixService.importEvents(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader, int)#java.security.KeyStore.getDefaultType()#java.lang.String.equals(<unknown>)#<unknown>.getText()#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.set(<unknown>, java.lang.Object)#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.insert(android.database.sqlite.SQLiteDatabase)#<unknown>.nextProperty()#com.inovex.zabbixmobile.api.ZabbixService._startTransaction()#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.close()#<unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>)#org.json.JSONObject.put(java.lang.String, long)#com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, null, int)#<unknown>.set(<unknown>, <unknown>)#java.lang.String.equals(<unknown>)#org.apache.http.conn.scheme.Scheme.Scheme(java.lang.String, org.apache.http.conn.scheme.PlainSocketFactory, int)#org.json.JSONObject.put(java.lang.String, java.lang.String)#java.lang.String.equals(<unknown>)",
      "p_body_t": ["<empty>"],
      "c_patch_t": [" \t\t\t\tString propName = eventReader.getCurrentName();\n \t\t\t\tif (propName.equals(\"hosts\")) {\n \t\t\t\t\t// import hosts\n-\t\t\t\t\tString hostnames = (String) importHosts(eventReader.getJsonArray(), null)[0];\n+\t\t\t\t\tString hostnames = (String) importHosts(eventReader.getJsonArrayOrObjectReader(), null)[0];\n \t\t\t\t\t// store hosts namen\n \t\t\t\t\te.set(EventData.COLUMN_HOSTS, hostnames);\n \t\t\t\t} else if (propName.equals(\"triggers\")) {\n \t\t\t\t\t// import triggers\n-\t\t\t\t\timportTriggers(eventReader.getJsonArray());\n+\t\t\t\t\timportTriggers(eventReader.getJsonArrayOrObjectReader());\n \t\t\t\t} else if (propName.equals(EventData.COLUMN_EVENTID)) {\n \t\t\t\t\te.set(EventData.COLUMN_EVENTID, Long.parseLong(eventReader.getText()));\n \t\t\t\t} else if (propName.equals(EventData.COLUMN_CLOCK)) {\n@@ -776,9 +776,9 @@ public class ZabbixService {\n \t\t\t\t\t} else if (propName.equals(GraphData.COLUMN_NAME)) {\n \t\t\t\t\t\tscr.set(GraphData.COLUMN_NAME, graphReader.getText());\n \t\t\t\t\t} else if (propName.equals(\"gitems\")) {\n-\t\t\t\t\t\tmustSetGraphid = importGraphItems(graphReader.getJsonArray());\n+\t\t\t\t\t\tmustSetGraphid = importGraphItems(graphReader.getJsonArrayOrObjectReader());\n \t\t\t\t\t} else if (propName.equals(\"items\")) {\n-\t\t\t\t\t\timportItems(graphReader.getJsonArray(), 0, true);\n+\t\t\t\t\t\timportItems(graphReader.getJsonArrayOrObjectReader(), 0, true);\n \t\t\t\t\t} else {\n \t\t\t\t\t\tgraphReader.nextProperty();\n \t\t\t\t\t}\n@@ -949,7 +949,7 @@ public class ZabbixService {\n \t\t\t\t\thostnames.add(host);\n \t\t\t\t\th.set(HostData.COLUMN_HOST, host);\n \t\t\t\t} else if (propName.equals(\"groups\")) {\n-\t\t\t\t\tlong groupid = importHostGroups(hostReader.getJsonArray());\n+\t\t\t\t\tlong groupid = importHostGroups(hostReader.getJsonArrayOrObjectReader());\n \t\t\t\t\tif (groupid != -1) {\n \t\t\t\t\t\th.set(HostData.COLUMN_GROUPID, groupid);\n \t\t\t\t\t}\n@@ -1055,7 +1055,7 @@ public class ZabbixService {\n \t\t\t\t\t// at this point itemid and hostid is unknown\n \t\t\t\t\t// because of this, all applicationrelations will be saved with itemid and hostid \"-1\".\n \t\t\t\t\t// later the IDs will be replaced with the correct\n-\t\t\t\t\timportApplications(-1, -1, itemReader.getJsonArray());\n+\t\t\t\t\timportApplications(-1, -1, itemReader.getJsonArrayOrObjectReader());\n \t\t\t\t} else {\n \t\t\t\t\titemReader.nextProperty();\n \t\t\t\t}\n@@ -1176,7 +1176,7 @@ public class ZabbixService {\n \t\t\t\t\t} else if (propName.equals(ScreenData.COLUMN_NAME)) {\n \t\t\t\t\t\tscr.set(ScreenData.COLUMN_NAME, screenReader.getText());\n \t\t\t\t\t} else if (propName.equals(\"screenitems\")) {\n-\t\t\t\t\t\timportScreenItems(screenReader.getJsonArray());\n+\t\t\t\t\t\timportScreenItems(screenReader.getJsonArrayOrObjectReader());\n \t\t\t\t\t} else {\n \t\t\t\t\t\tscreenReader.nextProperty();\n \t\t\t\t\t}\n@@ -1313,14 +1313,14 @@ public class ZabbixService {\n \t\t\t\t} else if (propName.equals(TriggerData.COLUMN_URL)) {\n \t\t\t\t\tt.set(TriggerData.COLUMN_URL, triggerReader.getText());\n \t\t\t\t} else if (propName.equals(\"hosts\")) {\n-\t\t\t\t\tObject[] hostsCache = importHosts(triggerReader.getJsonArray(), null);\n+\t\t\t\t\tObject[] hostsCache = importHosts(triggerReader.getJsonArrayOrObjectReader(), null);\n \t\t\t\t\tt.set(TriggerData.COLUMN_HOSTS, hostsCache[0]);\n \t\t\t\t\tt.set(TriggerData.COLUMN_HOSTID, hostsCache[1]);\n \t\t\t\t} else if (propName.equals(\"groups\")) {\n-\t\t\t\t\timportHostGroups(triggerReader.getJsonArray());\n+\t\t\t\t\timportHostGroups(triggerReader.getJsonArrayOrObjectReader());\n \t\t\t\t} else if (propName.equals(\"items\")) {\n \t\t\t\t\t// store the first item id\n-\t\t\t\t\tt.set(TriggerData.COLUMN_ITEMID, importItems(triggerReader.getJsonArray(), 1, true));\n+\t\t\t\t\tt.set(TriggerData.COLUMN_ITEMID, importItems(triggerReader.getJsonArrayOrObjectReader(), 1, true));\n \t\t\t\t} else {\n \t\t\t\t\ttriggerReader.nextProperty();\n \t\t\t\t}"],
      "c_body_t": ["<empty>"],
      "c_email_sni": "jschamburger@inovex.de",
      "p_patch_t": [" \tpublic class ZabbixConfig {\n \t\tpublic static final int APPLICATION_GET_LIMIT = 1000;\n \t\tpublic static final int EVENTS_GET_LIMIT = 60;\n-\t\tpublic static final int HISTORY_GET_TIME_FROM_SHIFT = 8*60*60; // -8h\n+\t\tpublic static final int HISTORY_GET_TIME_FROM_SHIFT = 24*60*60; // -24h\n \t\tpublic static final int HISTORY_GET_LIMIT = 8000;\n \t\tpublic static final int HOSTGROUP_GET_LIMIT = 200;\n \t\tpublic static final int HOST_GET_LIMIT = 300;\n@@ -172,6 +172,11 @@ public class ZabbixService {\n \tprivate int transformProgressEnd;\n \tprivate boolean _notAuthorizedRetry;\n \tprivate boolean isVersion2 = true;\n+\t/**\n+\t * The API version. From 1.8.3 (maybe earlier) to 2.0 (excluded), this was 1.3. With 2.0, it changed to 1.4. \n+\t * Finally, since 2.0.4, the API version matches the program version.\n+\t */\n+\tprivate String apiVersion = \"\";\n \n \t/**\n \t * init\n@@ -499,8 +504,9 @@ public class ZabbixService {\n \t\t\t\t\t\"apiinfo.version\"\n \t\t\t\t\t, new JSONObject()\n \t\t\t);\n-\t\t\tisVersion2 = result.getString(\"result\").equals(\"1.4\");\n-\t\t\tLog.i(\"ZabbixService\", \"Zabbix Server Version: isVersion2=\"+isVersion2);\n+\t\t\tapiVersion = result.getString(\"result\");\n+\t\t\tisVersion2 = (apiVersion.equals(\"1.4\") || apiVersion.startsWith(\"2\"));\n+\t\t\tLog.i(\"ZabbixService\", \"Zabbix API Version: \" + apiVersion);\n \t\t}\n \t\treturn token != null;\n \t}\n@@ -802,7 +808,7 @@ public class ZabbixService {\n \n \t\t\t// the past 2 hours\n \t\t\tlong time_till = new Date().getTime() / 1000;\n-\t\t\tlong time_from = time_till - ZabbixConfig.HISTORY_GET_TIME_FROM_SHIFT; // jetzt-2h\n+\t\t\tlong time_from = time_till - ZabbixConfig.HISTORY_GET_TIME_FROM_SHIFT;\n \n \t\t\t// Workaround: historydetails only comes if you use the correct \"history\"-parameter.\n \t\t\t// this parameter can be \"null\" or a number 0-4. Because we don't know when to use which,"],
      "repo_sni": "inovex/zax",
      "_version_": 1526823823588982784,
      "c_user_sni": "Johannes Schamburger",
      "c_callsites_added_cs": "<unknown>.getJsonArrayOrObjectReader()#<unknown>.getJsonArrayOrObjectReader()#<unknown>.getJsonArrayOrObjectReader()#<unknown>.getJsonArrayOrObjectReader()#<unknown>.getJsonArrayOrObjectReader()#<unknown>.getJsonArrayOrObjectReader()",
      "p_parents_ss": ["bae0223e3d008ee05a94f9b7db30eec6844110b6"],
      "p_user_sni": "Johannes Schamburger",
      "c_subject_t": ["- DetailsItemFragmentSupport: removed debug output - JsonObjectReader: changed method getJsonArrayOrObjectReader() to handle objects or arrays (necessary because graph items are encapsulated in objects in API version 1.4+) - added eclipse preferences for building with Java 1.6"],
      "c_imports_added_cs": "<empty>",
      "c_callsites_removed_cs": "<unknown>.getJsonArray()#<unknown>.getJsonArray()#<unknown>.getJsonArray()#<unknown>.getJsonArray()#<unknown>.getJsonArray()#<unknown>.getJsonArray()"
    }, {
      "c_patch_no_context_t": ["+\t\t\t\t\t.put(\"message\", comment)"],
      "p_patch_no_context_t": ["-\t\t\t\t\tString hostnames = (String) importHosts(eventReader.getJsonArray(), null)[0];\n+\t\t\t\t\tString hostnames = (String) importHosts(eventReader.getJsonArrayOrObjectReader(), null)[0];\n-\t\t\t\t\timportTriggers(eventReader.getJsonArray());\n+\t\t\t\t\timportTriggers(eventReader.getJsonArrayOrObjectReader());\n-\t\t\t\t\t\tmustSetGraphid = importGraphItems(graphReader.getJsonArray());\n+\t\t\t\t\t\tmustSetGraphid = importGraphItems(graphReader.getJsonArrayOrObjectReader());\n-\t\t\t\t\t\timportItems(graphReader.getJsonArray(), 0, true);\n+\t\t\t\t\t\timportItems(graphReader.getJsonArrayOrObjectReader(), 0, true);\n-\t\t\t\t\tlong groupid = importHostGroups(hostReader.getJsonArray());\n+\t\t\t\t\tlong groupid = importHostGroups(hostReader.getJsonArrayOrObjectReader());\n-\t\t\t\t\timportApplications(-1, -1, itemReader.getJsonArray());\n+\t\t\t\t\timportApplications(-1, -1, itemReader.getJsonArrayOrObjectReader());\n-\t\t\t\t\t\timportScreenItems(screenReader.getJsonArray());\n+\t\t\t\t\t\timportScreenItems(screenReader.getJsonArrayOrObjectReader());\n-\t\t\t\t\tObject[] hostsCache = importHosts(triggerReader.getJsonArray(), null);\n+\t\t\t\t\tObject[] hostsCache = importHosts(triggerReader.getJsonArrayOrObjectReader(), null);\n-\t\t\t\t\timportHostGroups(triggerReader.getJsonArray());\n+\t\t\t\t\timportHostGroups(triggerReader.getJsonArrayOrObjectReader());\n-\t\t\t\t\tt.set(TriggerData.COLUMN_ITEMID, importItems(triggerReader.getJsonArray(), 1, true));\n+\t\t\t\t\tt.set(TriggerData.COLUMN_ITEMID, importItems(triggerReader.getJsonArrayOrObjectReader(), 1, true));"],
      "c_date_tdt": "May 13, 2013 6:36:17 AM",
      "c_imports_t": ["android.database.sqlite.SQLiteQueryBuilder org.apache.http.conn.scheme.SchemeRegistry java.util.HashSet org.apache.http.params.BasicHttpParams android.content.Context org.apache.http.params.HttpParams org.apache.http.conn.scheme.PlainSocketFactory java.util.ArrayList com.inovex.zabbixmobile.model.ItemData com.inovex.zabbixmobile.model.HostData com.inovex.zabbixmobile.model.GraphData com.inovex.zabbixmobile.model.EventData org.apache.http.auth.UsernamePasswordCredentials org.apache.http.params.HttpConnectionParams android.content.SharedPreferences java.security.KeyManagementException org.apache.http.conn.ClientConnectionManager org.codehaus.jackson.JsonFactory org.apache.http.entity.StringEntity java.util.Set org.apache.http.params.HttpProtocolParams com.inovex.zabbixmobile.model.ApplicationItemRelationData com.inovex.zabbixmobile.model.TriggerData org.codehaus.jackson.JsonToken android.database.Cursor java.net.Socket android.content.Intent org.apache.http.protocol.HTTP org.json.JSONException java.net.UnknownHostException com.inovex.zabbixmobile.model.HistoryDetailData org.apache.http.HttpResponse java.security.KeyStore com.inovex.zabbixmobile.ZabbixContentProvider android.preference.PreferenceManager android.util.Log org.json.JSONObject java.security.NoSuchAlgorithmException org.apache.http.client.params.HttpClientParams java.io.IOException org.apache.http.conn.scheme.Scheme org.apache.http.client.methods.HttpPost javax.net.ssl.SSLContext org.apache.http.auth.AuthScope org.apache.http.conn.ssl.SSLSocketFactory java.security.KeyStoreException android.content.ContentValues java.io.InputStreamReader java.util.Date java.security.UnrecoverableKeyException android.graphics.Color org.apache.http.client.ClientProtocolException com.inovex.zabbixmobile.model.GraphItemData org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager org.json.JSONArray com.inovex.zabbixmobile.model.CacheData javax.net.ssl.SSLPeerUnverifiedException com.inovex.zabbixmobile.model.HostGroupData org.codehaus.jackson.JsonParseException java.security.cert.X509Certificate org.apache.http.HttpVersion android.database.sqlite.SQLiteDatabase java.util.List java.security.cert.CertificateException java.io.BufferedReader com.inovex.zabbixmobile.model.ApplicationData com.inovex.zabbixmobile.model.ScreenItemData javax.net.ssl.TrustManager com.inovex.zabbixmobile.model.ScreenData com.inovex.zabbixmobile.R org.codehaus.jackson.JsonParser org.apache.http.impl.client.DefaultHttpClient javax.net.ssl.X509TrustManager"],
      "c_contents_t": ["package com.inovex.zabbixmobile.api;\n\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.net.Socket;\nimport java.net.UnknownHostException;\nimport java.security.KeyManagementException;\nimport java.security.KeyStore;\nimport java.security.KeyStoreException;\nimport java.security.NoSuchAlgorithmException;\nimport java.security.UnrecoverableKeyException;\nimport java.security.cert.CertificateException;\nimport java.security.cert.X509Certificate;\nimport java.util.ArrayList;\nimport java.util.Date;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Set;\n\nimport javax.net.ssl.SSLContext;\nimport javax.net.ssl.SSLPeerUnverifiedException;\nimport javax.net.ssl.TrustManager;\nimport javax.net.ssl.X509TrustManager;\n\nimport org.apache.http.HttpResponse;\nimport org.apache.http.HttpVersion;\nimport org.apache.http.auth.AuthScope;\nimport org.apache.http.auth.UsernamePasswordCredentials;\nimport org.apache.http.client.ClientProtocolException;\nimport org.apache.http.client.methods.HttpPost;\nimport org.apache.http.client.params.HttpClientParams;\nimport org.apache.http.conn.ClientConnectionManager;\nimport org.apache.http.conn.scheme.PlainSocketFactory;\nimport org.apache.http.conn.scheme.Scheme;\nimport org.apache.http.conn.scheme.SchemeRegistry;\nimport org.apache.http.conn.ssl.SSLSocketFactory;\nimport org.apache.http.entity.StringEntity;\nimport org.apache.http.impl.client.DefaultHttpClient;\nimport org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager;\nimport org.apache.http.params.BasicHttpParams;\nimport org.apache.http.params.HttpConnectionParams;\nimport org.apache.http.params.HttpParams;\nimport org.apache.http.params.HttpProtocolParams;\nimport org.apache.http.protocol.HTTP;\nimport org.codehaus.jackson.JsonFactory;\nimport org.codehaus.jackson.JsonParseException;\nimport org.codehaus.jackson.JsonParser;\nimport org.codehaus.jackson.JsonToken;\nimport org.json.JSONArray;\nimport org.json.JSONException;\nimport org.json.JSONObject;\n\nimport android.content.ContentValues;\nimport android.content.Context;\nimport android.content.Intent;\nimport android.content.SharedPreferences;\nimport android.database.Cursor;\nimport android.database.sqlite.SQLiteDatabase;\nimport android.database.sqlite.SQLiteQueryBuilder;\nimport android.graphics.Color;\nimport android.preference.PreferenceManager;\nimport android.util.Log;\n\nimport com.inovex.zabbixmobile.R;\nimport com.inovex.zabbixmobile.ZabbixContentProvider;\nimport com.inovex.zabbixmobile.model.ApplicationData;\nimport com.inovex.zabbixmobile.model.ApplicationItemRelationData;\nimport com.inovex.zabbixmobile.model.CacheData;\nimport com.inovex.zabbixmobile.model.EventData;\nimport com.inovex.zabbixmobile.model.GraphData;\nimport com.inovex.zabbixmobile.model.GraphItemData;\nimport com.inovex.zabbixmobile.model.HistoryDetailData;\nimport com.inovex.zabbixmobile.model.HostData;\nimport com.inovex.zabbixmobile.model.HostGroupData;\nimport com.inovex.zabbixmobile.model.ItemData;\nimport com.inovex.zabbixmobile.model.ScreenData;\nimport com.inovex.zabbixmobile.model.ScreenItemData;\nimport com.inovex.zabbixmobile.model.TriggerData;\n\n/**\n * interface to connect to the zabbix server\n */\npublic class ZabbixService {\n\tclass CustomSSLSocketFactory extends SSLSocketFactory {\n\t\tSSLContext sslContext = SSLContext.getInstance(\"TLS\");\n\n\t\tpublic CustomSSLSocketFactory(KeyStore truststore) throws NoSuchAlgorithmException, KeyManagementException, KeyStoreException, UnrecoverableKeyException {\n\t\t\tsuper(truststore);\n\t\t\tTrustManager tm = new X509TrustManager() {\n\t\t\t\t@Override\n\t\t\t\tpublic void checkClientTrusted(X509Certificate[] chain,\n\t\t\t\t\t\tString authType) throws CertificateException {\n\t\t\t\t}\n\t\t\t\t@Override\n\t\t\t\tpublic void checkServerTrusted(X509Certificate[] chain,\n\t\t\t\t\t\tString authType) throws CertificateException {\n\t\t\t\t}\n\t\t\t\t@Override\n\t\t\t\tpublic X509Certificate[] getAcceptedIssuers() {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t};\n\t\t\tsslContext.init(null, new TrustManager[] { tm }, null);\n\t\t}\n\n\t\t@Override\n\t\tpublic Socket createSocket() throws IOException {\n\t\t\treturn sslContext.getSocketFactory().createSocket();\n\t\t}\n\n\t\t@Override\n\t\tpublic Socket createSocket(Socket socket, String host, int port, boolean autoClose) throws IOException, UnknownHostException {\n\t\t\treturn sslContext.getSocketFactory().createSocket(socket, host, port, autoClose);\n\t\t}\n\t}\n\n\t/**\n\t * http auth is needed\n\t */\n\tpublic class HttpAuthorizationRequiredException extends Exception {\n\t\tprivate static final long serialVersionUID = 6632422081858878147L;\n\t}\n\n\t/**\n\t * zabbix error: no api access\n\t */\n\tpublic class NoAPIAccessException extends Exception {\n\t\tprivate static final long serialVersionUID = 6381395987443456382L;\n\t}\n\n\t/**\n\t * probably too old zabbix <= 1.8.2\n\t */\n\tpublic class PreconditionFailedException extends Exception {\n\t\tprivate static final long serialVersionUID = -2529885710860745023L;\n\t}\n\n\t/**\n\t * global constants\n\t */\n\tpublic class ZabbixConfig {\n\t\tpublic static final int APPLICATION_GET_LIMIT = 1000;\n\t\tpublic static final int EVENTS_GET_LIMIT = 60;\n\t\tpublic static final int HISTORY_GET_TIME_FROM_SHIFT = 24*60*60; // -24h\n\t\tpublic static final int HISTORY_GET_LIMIT = 8000;\n\t\tpublic static final int HOSTGROUP_GET_LIMIT = 200;\n\t\tpublic static final int HOST_GET_LIMIT = 300;\n\t\tpublic static final int ITEM_GET_LIMIT = 200;\n\t\tpublic static final int TRIGGER_GET_LIMIT = 100;\n\t\tpublic static final int EVENT_GET_TIME_FROM_SHIFT = 7*24*60*60; // -7 days\n\t\tpublic static final int CACHE_LIFETIME_APPLICATIONS = 2*24*60*60; // 2 days\n\t\tpublic static final int CACHE_LIFETIME_EVENTS = 120;\n\t\tpublic static final int CACHE_LIFETIME_HISTORY_DETAILS = 4*60;\n\t\tpublic static final int CACHE_LIFETIME_HOST_GROUPS = 7*24*60*60;\n\t\tpublic static final int CACHE_LIFETIME_HOSTS = 2*24*60*60;\n\t\tpublic static final int CACHE_LIFETIME_SCREENS = 2*24*60*60;\n\t\tpublic static final int CACHE_LIFETIME_ITEMS = 4*60;\n\t\tpublic static final int CACHE_LIFETIME_TRIGGERS = 2*60;\n\t\tpublic static final long STATUS_SHOW_TRIGGER_TIME = 14*24*60*60;\n\t\tpublic static final int HTTP_CONNECTION_TIMEOUT = 30000;\n\t}\n\n\tprivate final DefaultHttpClient httpClient;\n\tprivate final SQLiteDatabase zabbixLocalDB;\n\tprivate String url;\n\tprivate String token;\n\tprivate final Context context;\n\tprivate int _transactionStack;\n\tprivate JsonParser lastStream;\n\tprivate int transformProgressStart;\n\tprivate int transformProgressEnd;\n\tprivate boolean _notAuthorizedRetry;\n\tprivate boolean isVersion2 = true;\n\t/**\n\t * The API version. From 1.8.3 (maybe earlier) to 2.0 (excluded), this was 1.3. With 2.0, it changed to 1.4. \n\t * Finally, since 2.0.4, the API version matches the program version.\n\t */\n\tprivate String apiVersion = \"\";\n\n\t/**\n\t * init\n\t * @param context android context\n\t * @param zabbixLocalDB sqlite\n\t */\n\tpublic ZabbixService(Context context, SQLiteDatabase zabbixLocalDB) {\n\t\tClientConnectionManager ccm = null;\n\t\tHttpParams params = null;\n\n\t\ttry {\n\t\t\tSharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(context);\n\t\t\tif (prefs.getBoolean(\"zabbix_trust_all_ssl_ca\", false)) {\n\t\t\t\tKeyStore trustStore = KeyStore.getInstance(KeyStore.getDefaultType());\n\t\t\t\ttrustStore.load(null, null);\n\n\t\t\t\tSSLSocketFactory sf = new CustomSSLSocketFactory(trustStore);\n\t\t\t\tsf.setHostnameVerifier(SSLSocketFactory.ALLOW_ALL_HOSTNAME_VERIFIER);\n\n\t\t\t\tparams = new BasicHttpParams();\n\t\t\t\tHttpProtocolParams.setVersion(params, HttpVersion.HTTP_1_1);\n\t\t\t\tHttpProtocolParams.setContentCharset(params, HTTP.UTF_8);\n\n\t\t\t\tSchemeRegistry registry = new SchemeRegistry();\n\t\t\t\tregistry.register(new Scheme(\"http\", PlainSocketFactory.getSocketFactory(), 80));\n\t\t\t\tregistry.register(new Scheme(\"https\", sf, 443));\n\n\t\t\t\tccm = new ThreadSafeClientConnManager(params, registry);\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\t// ignore for unit test\n\t\t}\n\n\t\tif (ccm == null || params == null) {\n\t\t\thttpClient = new DefaultHttpClient();\n\t\t} else {\n\t\t\thttpClient = new DefaultHttpClient(ccm, params);\n\t\t}\n\n\t\t// if applicable http auth\n\t\ttry {\n\t\t\tSharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(context);\n\t\t\tif (prefs.getBoolean(\"http_auth_enabled\", false)) {\n\t\t\t\tString user = prefs.getString(\"http_auth_username\", \"\");\n\t\t\t\tString pwd = prefs.getString(\"http_auth_password\", \"\");\n\t\t\t\thttpClient.getCredentialsProvider().setCredentials(AuthScope.ANY, new UsernamePasswordCredentials(user, pwd));\n\t\t\t}\n\t\t} catch (java.lang.UnsupportedOperationException e1) {\n\t\t\t// for unit test\n\t\t}\n\n\t\tparams = httpClient.getParams();\n\t\tHttpClientParams.setRedirecting(params, true); // redirecting\n\t\tHttpConnectionParams.setConnectionTimeout(params, ZabbixConfig.HTTP_CONNECTION_TIMEOUT);\n\t\tthis.context = context;\n\t\tthis.zabbixLocalDB = zabbixLocalDB;\n\t}\n\n\t/**\n\t * counts the sql inserts/updates and do a transaction commit to save the memory\n\t */\n\tprivate void _commitTransactionIfRecommended() {\n\t\tif (_transactionStack++ > 50) {\n\t\t\t_endTransaction();\n\t\t\t_startTransaction();\n\t\t}\n\t}\n\n\t/**\n\t * commit sql transaction\n\t */\n\tpublic void _endTransaction() {\n\t\tif (zabbixLocalDB.inTransaction()) {\n\t\t\tzabbixLocalDB.setTransactionSuccessful();\n\t\t\tzabbixLocalDB.endTransaction();\n\t\t}\n\t}\n\n\t/**\n\t * zabbix api call. data will be parsed as json object on-the-fly.\n\t * Caution: use this only for api calls with a small return data.\n\t * @param method\n\t * @param params\n\t * @return\n\t * @throws ClientProtocolException\n\t * @throws IOException\n\t * @throws JSONException\n\t * @throws HttpAuthorizationRequiredException\n\t * @throws NoAPIAccessException\n\t */\n\tprivate JSONObject _queryBuffer(String method, JSONObject params) throws ClientProtocolException, IOException, JSONException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\tHttpPost post = new HttpPost(url);\n\t\tpost.addHeader(\"Content-Type\", \"application/json; charset=utf-8\");\n\n\t\tString json =\n\t\t\t\"{\" +\n\t\t\t\"\t\\\"jsonrpc\\\" : \\\"2.0\\\",\" +\n\t\t\t\"\t\\\"method\\\" : \\\"\"+method+\"\\\",\" +\n\t\t\t\"\t\\\"params\\\" : \"+params.toString()+\",\" +\n\t\t\t\"\t\\\"auth\\\" : \"+(token==null?\"null\":'\"'+token+'\"')+\",\" +\n\t\t\t\"\t\\\"id\\\" : 0\" +\n\t\t\t\"}\";\n\n\t\tpost.setEntity(new StringEntity(json, \"UTF-8\"));\n\t\ttry {\n\t\t\tHttpResponse resp = httpClient.execute(post);\n\t\t\tif (resp.getStatusLine().getStatusCode() == 401) {\n\t\t\t\t// http auth failed\n\t\t\t\tthrow new HttpAuthorizationRequiredException();\n\t\t\t} else if (resp.getStatusLine().getStatusCode() == 412) {\n\t\t\t\t\t// Precondition failed / Looks like Zabbix 1.8.2\n\t\t\t\tthrow new PreconditionFailedException();\n\t\t\t} else if (resp.getStatusLine().getStatusCode() == 404) {\n\t\t\t\t// file not found\n\t\t\t\tthrow new IOException(resp.getStatusLine().getStatusCode()+\" \"+resp.getStatusLine().getReasonPhrase());\n\t\t\t} else {\n\t\t\t\tLog.d(\"ZabbixService\", resp.getStatusLine().getStatusCode()+\" \"+resp.getStatusLine().getReasonPhrase());\n\t\t\t}\n\t\t\tStringBuilder total = new StringBuilder();\n\t\t\tBufferedReader rd = new BufferedReader(new InputStreamReader(resp.getEntity().getContent()));\n\t\t\tint chr;\n\t\t\twhile ((chr = rd.read()) != -1) {\n\t\t\t\ttotal.append((char) chr);\n\t\t\t}\n\t\t\tJSONObject result = new JSONObject(total.toString());\n\t\t\ttry {\n\t\t\t\tif (result.getJSONObject(\"error\") != null) {\n\t\t\t\t\tif (result.getJSONObject(\"error\").getString(\"data\").equals(\"No API access\")) {\n\t\t\t\t\t\tthrow new NoAPIAccessException();\n\t\t\t\t\t} else throw new RuntimeException(result.getJSONObject(\"error\").toString());\n\t\t\t\t}\n\t\t\t\tif (result.getString(\"data\").equals(\"Not authorized\")) {\n\t\t\t\t\t// first do a new auth and then try the same api call again\n\t\t\t\t\tif (authenticate() && !_notAuthorizedRetry) {\n\t\t\t\t\t\t_notAuthorizedRetry = true;\n\t\t\t\t\t\tJSONObject r = _queryBuffer(method, params);\n\t\t\t\t\t\t_notAuthorizedRetry = false;\n\t\t\t\t\t\treturn r;\n\t\t\t\t\t} throw new IllegalStateException(result.toString());\n\t\t\t\t}\n\t\t\t} catch (JSONException e) {\n\t\t\t\t// ignore\n\t\t\t}\n\t\t\treturn result;\n\t\t} catch (SSLPeerUnverifiedException e) {\n\t\t\t// SSL not trusted\n\t\t\tIntent intent = new Intent(ZabbixContentProvider.CONTENT_PROVIDER_INTENT_ACTION);\n\t\t\tintent.putExtra(\"flag\", ZabbixContentProvider.INTENT_FLAG_SSL_NOT_TRUSTED);\n\t\t\tcontext.sendBroadcast(intent);\n\t\t\tthrow e;\n\t\t} catch (IOException e) {\n\t\t\t// internet problem\n\t\t\t// send intent to GUI\n\t\t\tIntent intent = new Intent(ZabbixContentProvider.CONTENT_PROVIDER_INTENT_ACTION);\n\t\t\tintent.putExtra(\"flag\", ZabbixContentProvider.INTENT_FLAG_CONNECTION_FAILED);\n\t\t\tintent.putExtra(\"value\", e.getMessage());\n\t\t\tcontext.sendBroadcast(intent);\n\t\t\tthrow e;\n\t\t}\n\t}\n\n\t/**\n\t * zabbix api call as stream.\n\t * @param method\n\t * @param params\n\t * @return stream im json array wrapper\n\t * @throws JSONException\n\t * @throws IOException\n\t * @throws HttpAuthorizationRequiredException\n\t * @throws NoAPIAccessException\n\t */\n\tprivate JsonArrayOrObjectReader _queryStream(String method, JSONObject params) throws JSONException, IOException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\t// http request\n\t\tHttpPost post = new HttpPost(url);\n\t\tpost.addHeader(\"Content-Type\", \"application/json; charset=utf-8\");\n\n\t\tJSONObject json = new JSONObject()\n\t\t\t.put(\"jsonrpc\", \"2.0\")\n\t\t\t.put(\"method\", method)\n\t\t\t.put(\"params\", params)\n\t\t\t.put(\"auth\", token)\n\t\t\t.put(\"id\", 0);\n\n\t\tLog.d(\"ZabbixService\", \"_queryStream: \"+url);\n\t\tLog.d(\"ZabbixService\", \"_queryStream: \"+json.toString());\n\n\t\tpost.setEntity(new StringEntity(json.toString(), \"UTF-8\"));\n\t\ttry {\n\t\t\tHttpResponse resp = httpClient.execute(post);\n\t\t\tif (resp.getStatusLine().getStatusCode() == 401) {\n\t\t\t\t// http auth failed\n\t\t\t\tthrow new HttpAuthorizationRequiredException();\n\t\t\t}\n\n\t\t\tJsonFactory jsonFac = new JsonFactory();\n\t\t\tJsonParser jp = jsonFac.createJsonParser(resp.getEntity().getContent());\n\t\t\t// store the last stream to close it if an exception will be thrown\n\t\t\tlastStream = jp;\n\t\t\tif (jp.nextToken() != JsonToken.START_OBJECT) {\n\t\t\t\tthrow new IOException(\"Expected data to start with an Object\");\n\t\t\t}\n\t\t\tdo {\n\t\t\t\tjp.nextToken();\n\t\t\t\tif (jp.getCurrentName().equals(\"error\")) {\n\t\t\t\t\tjp.nextToken();\n\t\t\t\t\tString errortxt = \"\";\n\t\t\t\t\twhile (jp.nextToken() != JsonToken.END_OBJECT) {\n\t\t\t\t\t\terrortxt += jp.getText();\n\t\t\t\t\t}\n\t\t\t\t\tif (errortxt.contains(\"No API access\")) {\n\t\t\t\t\t\tthrow new NoAPIAccessException();\n\t\t\t\t\t} else if (errortxt.contains(\"Not authorized\")) {\n\t\t\t\t\t\t// first do a new auth and then try the same api call again\n\t\t\t\t\t\tif (authenticate() && !_notAuthorizedRetry) {\n\t\t\t\t\t\t\t_notAuthorizedRetry = true;\n\t\t\t\t\t\t\tJsonArrayOrObjectReader r = _queryStream(method, params);\n\t\t\t\t\t\t\t_notAuthorizedRetry = false;\n\t\t\t\t\t\t\treturn r;\n\t\t\t\t\t\t} else throw new IllegalStateException(errortxt);\n\t\t\t\t\t} else throw new IllegalStateException(\"JSON API Error: \"+errortxt);\n\t\t\t\t}\n\t\t\t} while (!jp.getCurrentName().equals(\"result\"));\n\n\t\t\t// result array found\n\t\t\tif (jp.nextToken() != JsonToken.START_ARRAY && jp.getCurrentToken() != JsonToken.START_OBJECT) { // go inside the array\n\t\t\t\ttry {\n\t\t\t\t\tLog.d(\"ZabbixService\", \"current token: \"+jp.getCurrentToken());\n\t\t\t\t\tLog.d(\"ZabbixService\", \"current name: \"+jp.getCurrentName());\n\t\t\t\t\tLog.d(\"ZabbixService\", \"get text: \"+jp.getText());\n\t\t\t\t\tLog.d(\"ZabbixService\", \"next value: \"+jp.nextValue());\n\t\t\t\t\tLog.d(\"ZabbixService\", \"next token: \"+jp.nextToken());\n\t\t\t\t\tLog.d(\"ZabbixService\", \"current token: \"+jp.getCurrentToken());\n\t\t\t\t\tLog.d(\"ZabbixService\", \"current name: \"+jp.getCurrentName());\n\t\t\t\t\tLog.d(\"ZabbixService\", \"get text: \"+jp.getText());\n\t\t\t\t} catch (Exception e) {}\n\t\t\t\tthrow new IOException(\"Expected data to start with an Array\");\n\t\t\t}\n\t\t\treturn new JsonArrayOrObjectReader(jp);\n\t\t} catch (SSLPeerUnverifiedException e) {\n\t\t\tthrow e;\n\t\t} catch (IOException e) {\n\t\t\t// internet problem\n\t\t\t// send intent to GUI\n\t\t\tIntent intent = new Intent(ZabbixContentProvider.CONTENT_PROVIDER_INTENT_ACTION);\n\t\t\tintent.putExtra(\"flag\", ZabbixContentProvider.INTENT_FLAG_CONNECTION_FAILED);\n\t\t\tcontext.sendBroadcast(intent);\n\t\t\tthrow e;\n\t\t}\n\t}\n\n\t/**\n\t * begin sql transaction\n\t */\n\tprivate void _startTransaction() {\n\t\tzabbixLocalDB.beginTransaction();\n\t\t_transactionStack = 0;\n\t}\n\n\t/**\n\t * acknowledge zabbix event. Sets ack-flag with comment.\n\t * Caution: This is supported only for Zabbix version >= 1.8.4\n\t * @param eventid\n\t * @param comment\n\t * @return true, success.\n\t * @throws ClientProtocolException\n\t * @throws IOException\n\t * @throws JSONException\n\t * @throws HttpAuthorizationRequiredException\n\t * @throws NoAPIAccessException\n\t */\n\tpublic boolean acknowledgeEvent(String eventid, String comment) throws ClientProtocolException, IOException, JSONException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\t// for GUI unit test, just return true\n\t\tif (comment != null && comment.equals(\"__UNIT_TEST__RETURN_TRUE__\")) return true;\n\n\t\tJSONObject result = _queryBuffer(\n\t\t\t\t\"event.acknowledge\"\n\t\t\t\t, new JSONObject()\n\t\t\t\t\t.put(\"eventids\", new JSONArray().put(eventid))\n\t\t\t\t\t.put(\"message\", comment)\n\t\t);\n\t\t// it can be an (empty) array\n\t\ttry {\n\t\t\treturn result.getJSONObject(\"result\").getJSONArray(\"eventids\").length() == 1;\n\t\t} catch (JSONException e) {\n\t\t\t// or a json object\n\t\t\treturn result.getJSONObject(\"result\").getJSONObject(\"eventids\").length() == 1;\n\t\t}\n\t}\n\n\t/**\n\t * zabbix auth. user and pwd from app preferences\n\t * @return true success\n\t * @throws ClientProtocolException\n\t * @throws IOException\n\t * @throws JSONException\n\t * @throws HttpAuthorizationRequiredException\n\t * @throws NoAPIAccessException\n\t */\n\tpublic boolean authenticate() throws ClientProtocolException, IOException, JSONException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\tSharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(context);\n\t\tString url = prefs.getString(\"zabbix_url\", \"\").trim();\n\t\tString user = prefs.getString(\"zabbix_username\", \"\").trim();\n\t\tString password = prefs.getString(\"zabbix_password\", \"\");\n\n\t\tthis.url = url+(url.endsWith(\"/\")?\"\":'/')+\"api_jsonrpc.php\";\n\t\tLog.d(\"ZabbixContentProvider\", url+\"//\"+user);\n\n\t\ttry {\n\t\t\tJSONObject result = _queryBuffer(\n\t\t\t\t\t\"user.authenticate\"\n\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t\t.put(\"user\", user)\n\t\t\t\t\t\t.put(\"password\", password)\n\t\t\t);\n\t\t\ttoken = result.getString(\"result\");\n\t\t} catch (JSONException e) {\n\t\t\t// there's no result\n\t\t\te.printStackTrace();\n\t\t} catch (RuntimeException e) {\n\t\t\t// wrong password. token remains null\n\t\t\te.printStackTrace();\n\t\t}\n\t\tif (token != null) {\n\t\t\t// get API version\n\t\t\tJSONObject result = _queryBuffer(\n\t\t\t\t\t\"apiinfo.version\"\n\t\t\t\t\t, new JSONObject()\n\t\t\t);\n\t\t\tapiVersion = result.getString(\"result\");\n\t\t\tisVersion2 = (apiVersion.equals(\"1.4\") || apiVersion.startsWith(\"2\"));\n\t\t\tLog.i(\"ZabbixService\", \"Zabbix API Version: \" + apiVersion);\n\t\t}\n\t\treturn token != null;\n\t}\n\n\t/**\n\t * close the last http stream\n\t */\n\tpublic void closeLastStream() {\n\t\tif (lastStream != null && !lastStream.isClosed()) {\n\t\t\ttry {\n\t\t\t\tlastStream.close();\n\t\t\t} catch (IOException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate void importApplications(long hostid, long itemid, JsonArrayOrObjectReader jsonArray) throws JsonParseException, NumberFormatException, IOException {\n\t\tint num = 0;\n\t\tJsonObjectReader application;\n\t\twhile ((application = jsonArray.next()) != null) {\n\t\t\tApplicationData app = new ApplicationData();\n\t\t\twhile (application.nextValueToken()) {\n\t\t\t\tString propName = application.getCurrentName();\n\t\t\t\tif (propName.equals(ApplicationData.COLUMN_APPLICATIONID)) {\n\t\t\t\t\tapp.set(ApplicationData.COLUMN_APPLICATIONID, Long.parseLong(application.getText()));\n\t\t\t\t} else if (propName.equals(ApplicationData.COLUMN_NAME)) {\n\t\t\t\t\tapp.set(ApplicationData.COLUMN_NAME, application.getText());\n\t\t\t\t} else if (propName.equals(ApplicationData.COLUMN_HOSTID)) {\n\t\t\t\t\tapp.set(ApplicationData.COLUMN_HOSTID, Long.parseLong(application.getText()));\n\t\t\t\t} else {\n\t\t\t\t\tapplication.nextProperty();\n\t\t\t\t}\n\t\t\t}\n\t\t\t// create applications that does not exist\n\t\t\tapp.insert(zabbixLocalDB, ApplicationData.COLUMN_APPLICATIONID);\n\t\t\t_commitTransactionIfRecommended();\n\n\t\t\t// create ApplicationItemRelation\n\t\t\tlong appid = (Long) app.get(ApplicationData.COLUMN_APPLICATIONID);\n\t\t\tApplicationItemRelationData rel = new ApplicationItemRelationData();\n\t\t\trel.set(ApplicationItemRelationData.COLUMN_APPLICATIONID, appid);\n\t\t\trel.set(ApplicationItemRelationData.COLUMN_ITEMID, itemid);\n\t\t\trel.set(ApplicationItemRelationData.COLUMN_HOSTID, hostid);\n\t\t\trel.insert(zabbixLocalDB);\n\t\t\t_commitTransactionIfRecommended();\n\n\t\t\tnum++;\n\t\t}\n\t\tif (num == 0) {\n\t\t\t// if there's no application, the ID #0 must be added (for other)\n\t\t\tApplicationItemRelationData rel = new ApplicationItemRelationData();\n\t\t\trel.set(ApplicationItemRelationData.COLUMN_APPLICATIONID, 0);\n\t\t\trel.set(ApplicationItemRelationData.COLUMN_ITEMID, itemid);\n\t\t\trel.set(ApplicationItemRelationData.COLUMN_HOSTID, hostid);\n\t\t\trel.insert(zabbixLocalDB);\n\n\t\t\t// if #0 \"other\" does not exist yet, it has to be created\n\t\t\tApplicationData app = new ApplicationData();\n\t\t\tapp.set(ApplicationData.COLUMN_APPLICATIONID, 0);\n\t\t\tapp.set(ApplicationData.COLUMN_NAME, \"- \"+context.getResources().getString(R.string.other)+\" -\");\n\t\t\tapp.insert(zabbixLocalDB, ApplicationData.COLUMN_APPLICATIONID);\n\t\t}\n\t}\n\n\t/**\n\t * import the newest event of a trigger\n\t * @param triggerid\n\t * @throws JSONException\n\t * @throws IOException\n\t * @throws HttpAuthorizationRequiredException\n\t * @throws NoAPIAccessException\n\t */\n\tpublic void importEventByTriggerId(String triggerid) throws JSONException, IOException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\tif (!isCached(EventData.TABLE_NAME, \"triggerid=\"+triggerid)) {\n\t\t\t_startTransaction();\n\t\t\tzabbixLocalDB.delete(EventData.TABLE_NAME, EventData.COLUMN_OBJECTID+\"=\"+triggerid, null);\n\n\t\t\tJSONObject params = new JSONObject()\n\t\t\t\t.put(\"output\", \"extend\")\n\t\t\t\t.put(isVersion2?\"selectHosts\":\"select_hosts\", \"extend\")\n\t\t\t\t.put(\"triggerids\", new JSONArray().put(triggerid))\n\t\t\t\t.put(\"limit\", 1)\n\t\t\t\t.put(\"source\", 0);\n\t\t\tif (!isVersion2) {\n\t\t\t\tparams.put(\"sortfield\", \"clock\")\n\t\t\t\t\t.put(\"sortorder\", \"DESC\");\n\t\t\t}\n\n\t\t\tJsonArrayOrObjectReader events = _queryStream(\n\t\t\t\t\t\"event.get\"\n\t\t\t\t\t, params\n\t\t\t);\n\t\t\timportEvents(events, null);\n\t\t\tevents.close();\n\n\t\t\tsetCached(EventData.TABLE_NAME, \"triggerid=\"+triggerid, ZabbixConfig.CACHE_LIFETIME_EVENTS);\n\t\t\t_endTransaction();\n\t\t}\n\t}\n\n\t/**\n\t * import the newest events\n\t * @throws ClientProtocolException\n\t * @throws IOException\n\t * @throws JSONException\n\t * @throws HttpAuthorizationRequiredException\n\t * @throws NoAPIAccessException\n\t */\n\tpublic void importEvents() throws ClientProtocolException, IOException, JSONException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\tif (!isCached(EventData.TABLE_NAME, null)) {\n\t\t\t_startTransaction();\n\t\t\tzabbixLocalDB.delete(EventData.TABLE_NAME, null, null);\n\t\t\tzabbixLocalDB.delete(TriggerData.TABLE_NAME, null, null);\n\t\t\tzabbixLocalDB.delete(CacheData.TABLE_NAME, CacheData.COLUMN_KIND+\"='\"+EventData.TABLE_NAME+\"'\", null);\n\t\t\tzabbixLocalDB.delete(CacheData.TABLE_NAME, CacheData.COLUMN_KIND+\"='\"+TriggerData.TABLE_NAME+\"'\", null);\n\n\t\t\tint numEvents = ZabbixConfig.EVENTS_GET_LIMIT;\n\n\t\t\tJSONObject params = new JSONObject()\n\t\t\t\t.put(\"output\", \"extend\")\n\t\t\t\t.put(\"limit\", ZabbixConfig.EVENTS_GET_LIMIT)\n\t\t\t\t.put(isVersion2?\"selectHosts\":\"select_hosts\", \"extend\")\n\t\t\t\t.put(isVersion2?\"selectTriggers\":\"select_triggers\", \"extend\")\n\t\t\t\t.put(\"source\", 0)\n\t\t\t\t.put(\"time_from\", (new Date().getTime()/1000) - ZabbixConfig.EVENT_GET_TIME_FROM_SHIFT);\n\t\t\tif (!isVersion2) {\n\t\t\t\t// in Zabbix version <2.0, this is not default\n\t\t\t\tparams.put(\"sortfield\", \"clock\")\n\t\t\t\t\t.put(\"sortorder\", \"DESC\");\n\t\t\t}\n\t\t\tJsonArrayOrObjectReader events = _queryStream(\n\t\t\t\t\t\"event.get\"\n\t\t\t\t\t, params\n\t\t\t);\n\t\t\timportEvents(events, numEvents);\n\t\t\tevents.close();\n\n\t\t\tsetCached(EventData.TABLE_NAME, null, ZabbixConfig.CACHE_LIFETIME_EVENTS);\n\t\t\t_endTransaction();\n\t\t}\n\t}\n\n\t/**\n\t * @param events stream\n\t * @param numEvents if null, no progressbar-update AND only isert, if it does not exist. If !null, progressbar-update AND always insert without checking\n\t * @throws JsonParseException\n\t * @throws IOException\n\t */\n\tprivate void importEvents(JsonArrayOrObjectReader events, Integer numEvents) throws JsonParseException, IOException {\n\t\tint i=0;\n\t\tJsonObjectReader eventReader;\n\t\twhile ((eventReader = events.next()) != null) {\n\t\t\tEventData e = new EventData();\n\t\t\twhile (eventReader.nextValueToken()) {\n\t\t\t\tString propName = eventReader.getCurrentName();\n\t\t\t\tif (propName.equals(\"hosts\")) {\n\t\t\t\t\t// import hosts\n\t\t\t\t\tString hostnames = (String) importHosts(eventReader.getJsonArrayOrObjectReader(), null)[0];\n\t\t\t\t\t// store hosts namen\n\t\t\t\t\te.set(EventData.COLUMN_HOSTS, hostnames);\n\t\t\t\t} else if (propName.equals(\"triggers\")) {\n\t\t\t\t\t// import triggers\n\t\t\t\t\timportTriggers(eventReader.getJsonArrayOrObjectReader());\n\t\t\t\t} else if (propName.equals(EventData.COLUMN_EVENTID)) {\n\t\t\t\t\te.set(EventData.COLUMN_EVENTID, Long.parseLong(eventReader.getText()));\n\t\t\t\t} else if (propName.equals(EventData.COLUMN_CLOCK)) {\n\t\t\t\t\te.set(EventData.COLUMN_CLOCK, Integer.parseInt(eventReader.getText()));\n\t\t\t\t} else if (propName.equals(EventData.COLUMN_OBJECTID)) {\n\t\t\t\t\te.set(EventData.COLUMN_OBJECTID, Long.parseLong(eventReader.getText()));\n\t\t\t\t} else if (propName.equals(EventData.COLUMN_ACK)) {\n\t\t\t\t\te.set(EventData.COLUMN_ACK, Integer.parseInt(eventReader.getText()) == 1);\n\t\t\t\t} else if (propName.equals(EventData.COLUMN_VALUE)) {\n\t\t\t\t\te.set(EventData.COLUMN_VALUE, Integer.parseInt(eventReader.getText()));\n\t\t\t\t} else {\n\t\t\t\t\teventReader.nextProperty();\n\t\t\t\t}\n\t\t\t}\n\t\t\t// event is parsed and can be inserted into the db\n\t\t\tif (numEvents == null) {\n\t\t\t\te.insert(zabbixLocalDB, EventData.COLUMN_EVENTID);\n\t\t\t} else {\n\t\t\t\te.insert(zabbixLocalDB);\n\t\t\t\tif (++i % 10 == 0) {\n\t\t\t\t\tshowProgress(i*100/numEvents);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t_commitTransactionIfRecommended();\n\t\t}\n\t}\n\n\t/**\n\t * import graph items\n\t *\n\t * @param graphItems\n\t * @return true, if graphid column has to be updated from -1 to the correct graphid later.\n\t * @throws JsonParseException\n\t * @throws NumberFormatException\n\t * @throws IOException\n\t */\n\tprivate boolean importGraphItems(JsonArrayOrObjectReader graphItems) throws JsonParseException, NumberFormatException, IOException {\n\t\tboolean mustSetGraphid = false;\n\t\tJsonObjectReader graphItemReader;\n\t\twhile ((graphItemReader = graphItems.next()) != null) {\n\t\t\tGraphItemData gi = new GraphItemData();\n\t\t\twhile (graphItemReader.nextValueToken()) {\n\t\t\t\tString propName = graphItemReader.getCurrentName();\n\t\t\t\tif (propName.equals(\"gitemid\")) {\n\t\t\t\t\tgi.set(GraphItemData.COLUMN_GRAPHITEMID, Long.parseLong(graphItemReader.getText()));\n\t\t\t\t} else if (propName.equals(GraphItemData.COLUMN_GRAPHID)) {\n\t\t\t\t\tgi.set(GraphItemData.COLUMN_GRAPHID, Long.parseLong(graphItemReader.getText()));\n\t\t\t\t} else if (propName.equals(GraphItemData.COLUMN_ITEMID)) {\n\t\t\t\t\tgi.set(GraphItemData.COLUMN_ITEMID, Long.parseLong(graphItemReader.getText()));\n\t\t\t\t} else if (propName.equals(GraphItemData.COLUMN_COLOR)) {\n\t\t\t\t\t// hex string => color int\n\t\t\t\t\tgi.set(GraphItemData.COLUMN_COLOR, Color.parseColor(\"#\"+graphItemReader.getText()));\n\t\t\t\t} else {\n\t\t\t\t\tgraphItemReader.nextProperty();\n\t\t\t\t}\n\t\t\t}\n\t\t\t// if graphid-column was not set, this must be done later. temporary graphid=-1\n\t\t\tif (gi.get(GraphItemData.COLUMN_GRAPHID) == null) {\n\t\t\t\tgi.set(GraphItemData.COLUMN_GRAPHID, -1);\n\t\t\t\tmustSetGraphid = true;\n\t\t\t}\n\t\t\tgi.insert(zabbixLocalDB);\n\t\t}\n\t\treturn mustSetGraphid;\n\t}\n\n\tpublic void importGraphsForScreen(long screenid) throws ClientProtocolException, IOException, JSONException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\tif (!isCached(GraphData.TABLE_NAME, \"screenid=\"+screenid)) {\n\t\t\t_startTransaction();\n\n\t\t\t// collect all graphids\n\t\t\tSet<Long> graphids = new HashSet<Long>();\n\t\t\tCursor cur = zabbixLocalDB.query(ScreenItemData.TABLE_NAME, null, ScreenItemData.COLUMN_SCREENID+\"=\"+screenid, null, null, null, null);\n\t\t\twhile (cur.moveToNext()) {\n\t\t\t\tgraphids.add(cur.getLong(cur.getColumnIndex(ScreenItemData.COLUMN_RESOURCEID)));\n\t\t\t}\n\n\t\t\t// delete old graphs\n\t\t\tString str_graphids = graphids.toString().replace(\"[\", \"\").replace(\"]\", \"\");\n\t\t\tif (str_graphids.length()>0) {\n\t\t\t\tzabbixLocalDB.delete(GraphData.TABLE_NAME, GraphData.COLUMN_GRAPHID+\" IN (\"+str_graphids+\")\", null);\n\t\t\t\tzabbixLocalDB.delete(GraphItemData.TABLE_NAME, GraphItemData.COLUMN_GRAPHID+\" IN (\"+str_graphids+\")\", null);\n\t\t\t}\n\t\t\tzabbixLocalDB.delete(CacheData.TABLE_NAME, CacheData.COLUMN_KIND+\"='\"+GraphData.TABLE_NAME+\"' AND \"+CacheData.COLUMN_FILTER+\"='screenid=\"+screenid+'\\'', null);\n\n\t\t\tJsonArrayOrObjectReader graphs = _queryStream(\n\t\t\t\t\t\"graph.get\"\n\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t\t.put(isVersion2?\"selectGraphItems\":\"select_graph_items\", \"extend\")\n\t\t\t\t\t\t.put(isVersion2?\"selectItems\":\"select_items\", \"extend\")\n\t\t\t\t\t\t.put(\"output\", \"extend\")\n\t\t\t\t\t\t.put(\"graphids\", new JSONArray(graphids))\n\t\t\t);\n\t\t\tJsonObjectReader graphReader;\n\t\t\twhile ((graphReader = graphs.next()) != null) {\n\t\t\t\tboolean mustSetGraphid = false;\n\t\t\t\tGraphData scr = new GraphData();\n\t\t\t\twhile (graphReader.nextValueToken()) {\n\t\t\t\t\tString propName = graphReader.getCurrentName();\n\t\t\t\t\tif (propName.equals(GraphData.COLUMN_GRAPHID)) {\n\t\t\t\t\t\tscr.set(GraphData.COLUMN_GRAPHID, Long.parseLong(graphReader.getText()));\n\t\t\t\t\t} else if (propName.equals(GraphData.COLUMN_NAME)) {\n\t\t\t\t\t\tscr.set(GraphData.COLUMN_NAME, graphReader.getText());\n\t\t\t\t\t} else if (propName.equals(\"gitems\")) {\n\t\t\t\t\t\tmustSetGraphid = importGraphItems(graphReader.getJsonArrayOrObjectReader());\n\t\t\t\t\t} else if (propName.equals(\"items\")) {\n\t\t\t\t\t\timportItems(graphReader.getJsonArrayOrObjectReader(), 0, true);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tgraphReader.nextProperty();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tscr.insert(zabbixLocalDB);\n\t\t\t\tif (mustSetGraphid) {\n\t\t\t\t\tContentValues values = new ContentValues(1);\n\t\t\t\t\tvalues.put(GraphItemData.COLUMN_GRAPHID, (Long) scr.get(GraphData.COLUMN_GRAPHID));\n\t\t\t\t\tzabbixLocalDB.update(\n\t\t\t\t\t\t\tGraphItemData.TABLE_NAME\n\t\t\t\t\t\t\t, values\n\t\t\t\t\t\t\t, GraphItemData.COLUMN_GRAPHID+\"=-1\"\n\t\t\t\t\t\t\t, null);\n\t\t\t\t}\n\t\t\t}\n\t\t\tgraphs.close();\n\n\t\t\tsetCached(GraphData.TABLE_NAME, \"screenid=\"+screenid, ZabbixConfig.CACHE_LIFETIME_SCREENS);\n\t\t\t_endTransaction();\n\t\t}\n\t}\n\n\tpublic void importHistoryDetails(String itemid) throws ClientProtocolException, IOException, JSONException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\tif (!isCached(HistoryDetailData.TABLE_NAME, itemid)) {\n\t\t\t_startTransaction();\n\t\t\tzabbixLocalDB.delete(HistoryDetailData.TABLE_NAME, HistoryDetailData.COLUMN_ITEMID+\"=\"+itemid, null);\n\n\t\t\t// the past 2 hours\n\t\t\tlong time_till = new Date().getTime() / 1000;\n\t\t\tlong time_from = time_till - ZabbixConfig.HISTORY_GET_TIME_FROM_SHIFT;\n\n\t\t\t// Workaround: historydetails only comes if you use the correct \"history\"-parameter.\n\t\t\t// this parameter can be \"null\" or a number 0-4. Because we don't know when to use which,\n\t\t\t// we try them all, until we get results.\n\t\t\tInteger historytype = null;\n\t\t\tJSONObject result = _queryBuffer(\n\t\t\t\t\t\"history.get\"\n\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t\t.put(\"limit\", 1)\n\t\t\t\t\t\t.put(\"history\", historytype) // for integer ?\n\t\t\t\t\t\t.put(\"itemids\", new JSONArray().put(itemid))\n\t\t\t\t\t\t.put(\"time_from\", time_from)\n\t\t\t);\n\n\t\t\tJSONArray testHistorydetails = result.getJSONArray(\"result\");\n\t\t\tif (testHistorydetails.length() == 0) {\n\t\t\t\thistorytype = -1;\n\t\t\t\twhile (testHistorydetails.length() == 0 && ++historytype <= 4) {\n\t\t\t\t\t// if we get an empty array, we try another history parameter\n\t\t\t\t\tresult = _queryBuffer(\n\t\t\t\t\t\t\t\"history.get\"\n\t\t\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t\t\t\t.put(\"output\", \"extend\")\n\t\t\t\t\t\t\t\t.put(\"limit\", 1)\n\t\t\t\t\t\t\t\t.put(\"history\", historytype)\n\t\t\t\t\t\t\t\t.put(\"itemids\", new JSONArray().put(itemid))\n\t\t\t\t\t\t\t\t.put(\"time_from\", time_from)\n\t\t\t\t\t);\n\t\t\t\t\ttestHistorydetails = result.getJSONArray(\"result\");\n\t\t\t\t}\n\t\t\t}\n\t\t\t// correct historytype found and there are data\n\t\t\tif (testHistorydetails.length() > 0) {\n\t\t\t\t// count of the entries cannot be detected (zabbix bug),\n\t\t\t\t// so we use a fiction\n\t\t\t\tint numDetails = 400;\n\t\t\t\tint curI=0;\n\t\t\t\tJsonArrayOrObjectReader historydetails = _queryStream(\n\t\t\t\t\t\t\"history.get\"\n\t\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t\t\t.put(\"output\", \"extend\")\n\t\t\t\t\t\t\t.put(\"limit\", ZabbixConfig.HISTORY_GET_LIMIT)\n\t\t\t\t\t\t\t.put(\"history\", historytype)\n\t\t\t\t\t\t\t.put(\"itemids\", new JSONArray().put(itemid))\n\t\t\t\t\t\t\t.put(\"time_from\", time_from)\n\t\t\t\t\t\t\t.put(\"sortfield\", \"clock\")\n\t\t\t\t\t\t\t.put(\"sortorder\", \"DESC\")\n\t\t\t\t);\n\t\t\t\tJsonObjectReader historydetail;\n\t\t\t\ttry {\n\t\t\t\t\tint selI = 0;\n\t\t\t\t\twhile ((historydetail = historydetails.next()) != null) {\n\t\t\t\t\t\t// save only every 20th\n\t\t\t\t\t\tif (selI++ % 20 != 0) {\n\t\t\t\t\t\t\twhile (historydetail.nextValueToken()) {\n\t\t\t\t\t\t\t\thistorydetail.nextProperty();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tHistoryDetailData h = new HistoryDetailData();\n\t\t\t\t\t\twhile (historydetail.nextValueToken()) {\n\t\t\t\t\t\t\tString propName = historydetail.getCurrentName();\n\t\t\t\t\t\t\tif (propName.equals(HistoryDetailData.COLUMN_CLOCK)) {\n\t\t\t\t\t\t\t\th.set(HistoryDetailData.COLUMN_CLOCK, Integer.parseInt(historydetail.getText()));\n\t\t\t\t\t\t\t} else if (propName.equals(HistoryDetailData.COLUMN_ITEMID)) {\n\t\t\t\t\t\t\t\th.set(HistoryDetailData.COLUMN_ITEMID, Long.parseLong(historydetail.getText()));\n\t\t\t\t\t\t\t} else if (propName.equals(HistoryDetailData.COLUMN_VALUE)) {\n\t\t\t\t\t\t\t\th.set(HistoryDetailData.COLUMN_VALUE, Double.parseDouble(historydetail.getText()));\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\thistorydetail.nextProperty();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\th.insert(zabbixLocalDB);\n\t\t\t\t\t\tif (++curI % 10 == 0) {\n\t\t\t\t\t\t\tshowProgress(Math.min(curI*100/numDetails, 84));\n\t\t\t\t\t\t}\n\t\t\t\t\t\t_commitTransactionIfRecommended();\n\t\t\t\t\t}\n\t\t\t\t} catch (NumberFormatException e) {\n\t\t\t\t\t// data are unuseable, e.g. because it's a string\n\t\t\t\t}\n\t\t\t\thistorydetails.close();\n\t\t\t}\n\t\t\tsetCached(HistoryDetailData.TABLE_NAME, itemid, ZabbixConfig.CACHE_LIFETIME_HISTORY_DETAILS);\n\t\t\t_endTransaction();\n\t\t}\n\t}\n\n\tprivate long importHostGroups(JsonArrayOrObjectReader jsonArray) throws JsonParseException, IOException {\n\t\tlong firstHostGroupId = -1;\n\t\tJsonObjectReader hostReader;\n\t\twhile ((hostReader = jsonArray.next()) != null) {\n\t\t\tHostGroupData h = new HostGroupData();\n\t\t\twhile (hostReader.nextValueToken()) {\n\t\t\t\tString propName = hostReader.getCurrentName();\n\t\t\t\tif (propName.equals(HostGroupData.COLUMN_GROUPID)) {\n\t\t\t\t\tlong id = Long.parseLong(hostReader.getText());\n\t\t\t\t\tif (firstHostGroupId == -1) firstHostGroupId = id;\n\t\t\t\t\th.set(HostGroupData.COLUMN_GROUPID, id);\n\t\t\t\t} else if (propName.equals(HostGroupData.COLUMN_NAME)) {\n\t\t\t\t\th.set(HostGroupData.COLUMN_NAME, hostReader.getText());\n\t\t\t\t} else {\n\t\t\t\t\thostReader.nextProperty();\n\t\t\t\t}\n\t\t\t}\n\t\t\th.insert(zabbixLocalDB, HostGroupData.COLUMN_GROUPID);\n\t\t\t_commitTransactionIfRecommended();\n\t\t}\n\n\t\treturn firstHostGroupId;\n\t}\n\n\t/**\n\t * import the hosts from stream\n\t * @param jsonArray stream\n\t * @param numHosts count of hosts for progressbar. null if unknown.\n\t * @return Object[] {(String) comma-separated all Hostnames, (Long) 1. host id}\n\t * @throws JsonParseException\n\t * @throws IOException\n\t */\n\tprivate Object[] importHosts(JsonArrayOrObjectReader jsonArray, Integer numHosts) throws JsonParseException, IOException {\n\t\tList<String> hostnames = new ArrayList<String>();\n\t\tlong firstHostId = -1;\n\t\tJsonObjectReader hostReader;\n\t\tint i=0;\n\t\twhile ((hostReader = jsonArray.next()) != null) {\n\t\t\tHostData h = new HostData();\n\t\t\twhile (hostReader.nextValueToken()) {\n\t\t\t\tString propName = hostReader.getCurrentName();\n\t\t\t\tif (propName.equals(HostData.COLUMN_HOSTID)) {\n\t\t\t\t\th.set(HostData.COLUMN_HOSTID, Long.parseLong(hostReader.getText()));\n\t\t\t\t\tif (firstHostId == -1) {\n\t\t\t\t\t\tfirstHostId = (Long) h.get(HostData.COLUMN_HOSTID);\n\t\t\t\t\t}\n\t\t\t\t} else if (propName.equals(HostData.COLUMN_HOST)) {\n\t\t\t\t\tString host = hostReader.getText();\n\t\t\t\t\thostnames.add(host);\n\t\t\t\t\th.set(HostData.COLUMN_HOST, host);\n\t\t\t\t} else if (propName.equals(\"groups\")) {\n\t\t\t\t\tlong groupid = importHostGroups(hostReader.getJsonArrayOrObjectReader());\n\t\t\t\t\tif (groupid != -1) {\n\t\t\t\t\t\th.set(HostData.COLUMN_GROUPID, groupid);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\thostReader.nextProperty();\n\t\t\t\t}\n\t\t\t}\n\t\t\t// host without group will get group #0 (other)\n\t\t\tif (h.get(HostData.COLUMN_GROUPID) == null) {\n\t\t\t\th.set(HostData.COLUMN_GROUPID, 0);\n\t\t\t\t// create \"other\" hostgroup #1\n\t\t\t\tHostGroupData hg = new HostGroupData();\n\t\t\t\thg.set(HostGroupData.COLUMN_GROUPID, 0);\n\t\t\t\thg.set(HostGroupData.COLUMN_NAME, \"- \"+context.getResources().getString(R.string.other)+\" -\");\n\t\t\t\thg.insert(zabbixLocalDB, HostGroupData.COLUMN_GROUPID);\n\t\t\t}\n\t\t\th.insert(zabbixLocalDB, HostData.COLUMN_HOSTID);\n\t\t\tif (numHosts != null && ++i % 10 == 0) {\n\t\t\t\tshowProgress(i*100/numHosts);\n\t\t\t}\n\t\t\t_commitTransactionIfRecommended();\n\t\t}\n\n\t\treturn new Object[] {hostnames.toString().replaceAll(\"[\\\\[\\\\]]\", \"\"), firstHostId};\n\t}\n\n\tpublic void importHostsAndGroups() throws JSONException, IOException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\tif (!isCached(HostData.TABLE_NAME, null)) {\n\t\t\t_startTransaction();\n\t\t\tzabbixLocalDB.delete(HostData.TABLE_NAME, null, null);\n\t\t\tzabbixLocalDB.delete(HostGroupData.TABLE_NAME, null, null);\n\n\t\t\t// get count of hosts\n\t\t\tJSONObject result = _queryBuffer(\n\t\t\t\t\t\"host.get\"\n\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t\t.put(\"countOutput\", 1)\n\t\t\t\t\t\t.put(\"limit\", ZabbixConfig.HOST_GET_LIMIT)\n\t\t\t\t\t\t.put(isVersion2?\"selectGroups\":\"select_groups\", \"extend\")\n\t\t\t);\n\t\t\tint numHosts = result.getInt(\"result\");\n\t\t\tJsonArrayOrObjectReader hosts = _queryStream(\n\t\t\t\t\t\"host.get\"\n\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t\t.put(\"output\", \"extend\")\n\t\t\t\t\t\t.put(\"limit\", ZabbixConfig.HOST_GET_LIMIT)\n\t\t\t\t\t\t.put(isVersion2?\"selectGroups\":\"select_groups\", \"extend\")\n\t\t\t);\n\t\t\timportHosts(hosts, numHosts);\n\t\t\thosts.close();\n\n\t\t\tsetCached(HostData.TABLE_NAME, null, ZabbixConfig.CACHE_LIFETIME_HOSTS);\n\t\t\t_endTransaction();\n\t\t}\n\t}\n\n\t/**\n\t * import items from stream.\n\t * @param items stream\n\t * @param numItems count for progressbar, if 0 no progressbarupdate\n\t * @param checkBeforeInsert if true, only make an insert if item does not exist\n\t * @return the first item id\n\t * @throws JsonParseException\n\t * @throws IOException\n\t */\n\tprivate long importItems(JsonArrayOrObjectReader items, int numItems, boolean checkBeforeInsert) throws JsonParseException, IOException {\n\t\tlong firstItemId = -1;\n\t\tint curI=0;\n\t\tJsonObjectReader itemReader;\n\t\twhile ((itemReader = items.next()) != null) {\n\t\t\tItemData i = new ItemData();\n\t\t\tString key_ = null;\n\t\t\twhile (itemReader.nextValueToken()) {\n\t\t\t\tString propName = itemReader.getCurrentName();\n\t\t\t\tif (propName.equals(ItemData.COLUMN_ITEMID)) {\n\t\t\t\t\ti.set(ItemData.COLUMN_ITEMID, Long.parseLong(itemReader.getText()));\n\t\t\t\t\tif (firstItemId == -1) {\n\t\t\t\t\t\tfirstItemId = (Long) i.get(ItemData.COLUMN_ITEMID);\n\t\t\t\t\t}\n\t\t\t\t} else if (propName.equals(ItemData.COLUMN_HOSTID)) {\n\t\t\t\t\ti.set(ItemData.COLUMN_HOSTID, Long.parseLong(itemReader.getText()));\n\t\t\t\t} else if (propName.equals(ItemData.COLUMN_DESCRIPTION) || propName.equals(\"name\")) {\n\t\t\t\t\t// since zabbix 2.x is the name of the item \"name\"\n\t\t\t\t\t// before zabbix 2.x the name field was \"description\"\n\t\t\t\t\tif (isVersion2 && propName.equals(\"name\")) {\n\t\t\t\t\t\ti.set(ItemData.COLUMN_DESCRIPTION, itemReader.getText());\n\t\t\t\t\t} else if (!isVersion2) {\n\t\t\t\t\t\ti.set(ItemData.COLUMN_DESCRIPTION, itemReader.getText());\n\t\t\t\t\t}\n\t\t\t\t} else if (propName.equals(ItemData.COLUMN_LASTCLOCK)) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\ti.set(ItemData.COLUMN_LASTCLOCK, Integer.parseInt(itemReader.getText()));\n\t\t\t\t\t} catch (NumberFormatException e) {\n\t\t\t\t\t\t// ignore\n\t\t\t\t\t}\n\t\t\t\t} else if (propName.equals(ItemData.COLUMN_LASTVALUE)) {\n\t\t\t\t\ti.set(ItemData.COLUMN_LASTVALUE, itemReader.getText());\n\t\t\t\t} else if (propName.equals(ItemData.COLUMN_UNITS)) {\n\t\t\t\t\ti.set(ItemData.COLUMN_UNITS, itemReader.getText());\n\t\t\t\t} else if (propName.equals(\"key_\")) {\n\t\t\t\t\tkey_ = itemReader.getText();\n\t\t\t\t} else if (propName.equals(\"applications\")) {\n\t\t\t\t\t// at this point itemid and hostid is unknown\n\t\t\t\t\t// because of this, all applicationrelations will be saved with itemid and hostid \"-1\".\n\t\t\t\t\t// later the IDs will be replaced with the correct\n\t\t\t\t\timportApplications(-1, -1, itemReader.getJsonArrayOrObjectReader());\n\t\t\t\t} else {\n\t\t\t\t\titemReader.nextProperty();\n\t\t\t\t}\n\t\t\t}\n\t\t\t// if applicable replace placeholder\n\t\t\tString description = (String) i.get(ItemData.COLUMN_DESCRIPTION);\n\t\t\tif (description.matches(\".*\\\\$[0-9].*\")) {\n\t\t\t\tif (key_ != null && key_.indexOf('[') != -1) {\n\t\t\t\t\tString[] keys = key_.substring(key_.indexOf('[')+1, key_.indexOf(']')).split(\",\");\n\t\t\t\t\tfor (int ix=0; ix<keys.length; ix++) {\n\t\t\t\t\t\tdescription = description.replace(\"$\"+(ix+1), keys[ix]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\ti.set(ItemData.COLUMN_DESCRIPTION, description);\n\t\t\tif (checkBeforeInsert) {\n\t\t\t\ti.insert(zabbixLocalDB, ItemData.COLUMN_ITEMID);\n\t\t\t} else {\n\t\t\t\ti.insert(zabbixLocalDB);\n\t\t\t}\n\t\t\tif (numItems > 0 && ++curI % 10 == 0) {\n\t\t\t\tshowProgress(curI*100/numItems);\n\t\t\t}\n\n\t\t\t// now the \"-1\" IDs of applicationsrelation will be replaced with the correct itemID\n\t\t\tContentValues values = new ContentValues(2);\n\t\t\tvalues.put(ApplicationItemRelationData.COLUMN_ITEMID, (Long) i.get(ItemData.COLUMN_ITEMID));\n\t\t\tvalues.put(ApplicationItemRelationData.COLUMN_HOSTID, (Long) i.get(ItemData.COLUMN_HOSTID));\n\t\t\tzabbixLocalDB.update(\n\t\t\t\t\tApplicationItemRelationData.TABLE_NAME\n\t\t\t\t\t, values\n\t\t\t\t\t, ApplicationItemRelationData.COLUMN_ITEMID+\"=-1\"\n\t\t\t\t\t, null\n\t\t\t);\n\t\t}\n\t\treturn firstItemId;\n\t}\n\n\tpublic void importItems(long hostid) throws JSONException, IOException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\tif (!isCached(ItemData.TABLE_NAME, \"hostid=\"+hostid)) {\n\t\t\t_startTransaction();\n\t\t\tzabbixLocalDB.delete(ItemData.TABLE_NAME, ItemData.COLUMN_HOSTID+\"=\"+hostid, null);\n\t\t\tzabbixLocalDB.delete(ApplicationItemRelationData.TABLE_NAME, ApplicationItemRelationData.COLUMN_HOSTID+\"=\"+hostid, null);\n\n\t\t\t// count of items\n\t\t\tJSONObject result = _queryBuffer(\n\t\t\t\t\t\"item.get\"\n\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t.put(\"output\", \"extend\")\n\t\t\t\t\t.put(\"countOutput\", 1)\n\t\t\t\t\t.put(\"limit\", ZabbixConfig.ITEM_GET_LIMIT)\n\t\t\t\t\t.put(\"hostids\", new JSONArray().put(hostid))\n\t\t\t);\n\t\t\tint numItems = result.getInt(\"result\");\n\t\t\tJsonArrayOrObjectReader items = _queryStream(\n\t\t\t\t\t\"item.get\"\n\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t\t.put(\"output\", \"extend\")\n\t\t\t\t\t\t.put(\"limit\", ZabbixConfig.ITEM_GET_LIMIT)\n\t\t\t\t\t\t.put(isVersion2?\"selectApplications\":\"select_applications\", \"extend\")\n\t\t\t\t\t\t.put(\"hostids\", new JSONArray().put(hostid))\n\t\t\t);\n\t\t\timportItems(items, numItems, false);\n\t\t\titems.close();\n\n\t\t\tsetCached(ItemData.TABLE_NAME, \"hostid=\"+hostid, ZabbixConfig.CACHE_LIFETIME_ITEMS);\n\t\t\t_endTransaction();\n\t\t}\n\t}\n\n\tprivate void importScreenItems(JsonArrayOrObjectReader screenItems) throws JsonParseException, NumberFormatException, IOException {\n\t\tJsonObjectReader screenItemReader;\n\t\twhile ((screenItemReader = screenItems.next()) != null) {\n\t\t\tScreenItemData si = new ScreenItemData();\n\t\t\tint resourcetype = -1;\n\t\t\twhile (screenItemReader.nextValueToken()) {\n\t\t\t\tString propName = screenItemReader.getCurrentName();\n\t\t\t\tif (propName.equals(ScreenItemData.COLUMN_SCREENITEMID)) {\n\t\t\t\t\tsi.set(ScreenItemData.COLUMN_SCREENITEMID, Long.parseLong(screenItemReader.getText()));\n\t\t\t\t} else if (propName.equals(ScreenItemData.COLUMN_SCREENID)) {\n\t\t\t\t\tsi.set(ScreenItemData.COLUMN_SCREENID, Long.parseLong(screenItemReader.getText()));\n\t\t\t\t} else if (propName.equals(ScreenItemData.COLUMN_RESOURCEID)) {\n\t\t\t\t\tsi.set(ScreenItemData.COLUMN_RESOURCEID, Long.parseLong(screenItemReader.getText()));\n\t\t\t\t} else if (propName.equals(\"resourcetype\")) {\n\t\t\t\t\tresourcetype = Integer.parseInt(screenItemReader.getText());\n\t\t\t\t} else {\n\t\t\t\t\tscreenItemReader.nextProperty();\n\t\t\t\t}\n\t\t\t}\n\t\t\t// only resouretype == 0\n\t\t\tif (resourcetype == 0) {\n\t\t\t\tsi.insert(zabbixLocalDB);\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic void importScreens() throws ClientProtocolException, IOException, JSONException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\tif (!isCached(ScreenData.TABLE_NAME, null)) {\n\t\t\t_startTransaction();\n\n\t\t\tzabbixLocalDB.delete(ScreenData.TABLE_NAME, null, null);\n\t\t\tzabbixLocalDB.delete(ScreenItemData.TABLE_NAME, null, null);\n\t\t\tzabbixLocalDB.delete(CacheData.TABLE_NAME, CacheData.COLUMN_KIND+\"='\"+ScreenData.TABLE_NAME+\"'\", null);\n\n\t\t\tJsonArrayOrObjectReader screens = _queryStream(\n\t\t\t\t\t(isVersion2?\"s\":\"S\")+\"creen.get\"\n\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t\t.put(\"output\", \"extend\")\n\t\t\t\t\t\t.put(isVersion2?\"selectScreenItems\":\"select_screenitems\", \"extend\")\n\t\t\t);\n\t\t\tJsonObjectReader screenReader;\n\t\t\twhile ((screenReader = screens.next()) != null) {\n\t\t\t\tScreenData scr = new ScreenData();\n\t\t\t\twhile (screenReader.nextValueToken()) {\n\t\t\t\t\tString propName = screenReader.getCurrentName();\n\t\t\t\t\tif (propName.equals(ScreenData.COLUMN_SCREENID)) {\n\t\t\t\t\t\tscr.set(ScreenData.COLUMN_SCREENID, Long.parseLong(screenReader.getText()));\n\t\t\t\t\t} else if (propName.equals(ScreenData.COLUMN_NAME)) {\n\t\t\t\t\t\tscr.set(ScreenData.COLUMN_NAME, screenReader.getText());\n\t\t\t\t\t} else if (propName.equals(\"screenitems\")) {\n\t\t\t\t\t\timportScreenItems(screenReader.getJsonArrayOrObjectReader());\n\t\t\t\t\t} else {\n\t\t\t\t\t\tscreenReader.nextProperty();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tscr.insert(zabbixLocalDB);\n\t\t\t}\n\t\t\tscreens.close();\n\n\t\t\tsetCached(ScreenData.TABLE_NAME, null, ZabbixConfig.CACHE_LIFETIME_SCREENS);\n\t\t\t_endTransaction();\n\t\t}\n\t}\n\n\tpublic void importTrigger(String triggerid) throws JSONException, IOException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\tif (!isCached(TriggerData.TABLE_NAME, \"triggerid=\"+triggerid)) {\n\t\t\t_startTransaction();\n\n\t\t\tJsonArrayOrObjectReader trigger = _queryStream(\n\t\t\t\t\t\"trigger.get\"\n\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t\t.put(\"output\", \"extend\")\n\t\t\t\t\t\t.put(isVersion2?\"selectHosts\":\"select_hosts\", \"extend\")\n\t\t\t\t\t\t.put(\"triggerids\", new JSONArray().put(triggerid))\n\t\t\t);\n\t\t\timportTriggers(trigger);\n\t\t\ttrigger.close();\n\n\t\t\tsetCached(TriggerData.TABLE_NAME, \"triggerid=\"+triggerid, ZabbixConfig.CACHE_LIFETIME_TRIGGERS);\n\t\t\t_endTransaction();\n\t\t}\n\t}\n\n\t/**\n\t * importiert ein trigger mit dem attribute itemid. ggf. wird der trigger zuerst gelöscht und neu angelegt.\n\t * imports a trigger with the attribute itemid. if trigger already exists, it will be removed first.\n\t * @param triggerid\n\t * @throws JSONException\n\t * @throws IOException\n\t * @throws HttpAuthorizationRequiredException\n\t * @throws NoAPIAccessException\n\t */\n\tpublic void importTriggerColumnItemId(String triggerid) throws JSONException, IOException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\t// check if the trigger exists and if the itemid was set\n\t\tboolean mustImport = true;\n\t\tCursor cur = zabbixLocalDB.query(TriggerData.TABLE_NAME, null, TriggerData.COLUMN_TRIGGERID+\"=\"+triggerid, null, null, null, null);\n\t\tif (cur.moveToFirst()) {\n\t\t\tlong itemid = 0;\n\t\t\ttry {\n\t\t\t\titemid = cur.getLong(cur.getColumnIndex(TriggerData.COLUMN_ITEMID));\n\t\t\t} catch (Exception e) {\n\t\t\t\t// no itemid\n\t\t\t}\n\t\t\tif (itemid > 0) {\n\t\t\t\tmustImport = false;\n\t\t\t}\n\t\t}\n\t\tif (mustImport) {\n\t\t\t_startTransaction();\n\t\t\tzabbixLocalDB.delete(TriggerData.TABLE_NAME, TriggerData.COLUMN_TRIGGERID+\"=\"+triggerid, null);\n\t\t\tJsonArrayOrObjectReader triggers = _queryStream(\n\t\t\t\t\t\"trigger.get\"\n\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t\t.put(\"output\", \"extend\")\n\t\t\t\t\t\t.put(isVersion2?\"selectHosts\":\"select_hosts\", \"extend\")\n\t\t\t\t\t\t.put(isVersion2?\"selectGroups\":\"select_groups\", \"extend\")\n\t\t\t\t\t\t.put(isVersion2?\"selectItems\":\"select_items\", \"extend\")\n\t\t\t\t\t\t.put(\"triggerids\", new JSONArray().put(triggerid))\n\t\t\t\t\t\t.put(\"limit\", 1)\n\t\t\t);\n\t\t\timportTriggers(triggers);\n\t\t\t_endTransaction();\n\t\t}\n\t}\n\n\t/**\n\t * imports the \"warning\"-triggers\n\t * @throws JSONException\n\t * @throws IOException\n\t * @throws HttpAuthorizationRequiredException\n\t * @throws NoAPIAccessException\n\t */\n\tpublic void importTriggers() throws JSONException, IOException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\tif (!isCached(TriggerData.TABLE_NAME, null)) {\n\t\t\t// clear triggers\n\t\t\tzabbixLocalDB.delete(TriggerData.TABLE_NAME, null, null);\n\n\t\t\t_startTransaction();\n\n\t\t\tlong min = (new Date().getTime()/1000)-ZabbixConfig.STATUS_SHOW_TRIGGER_TIME;\n\t\t\tJsonArrayOrObjectReader triggers = _queryStream(\n\t\t\t\t\t\"trigger.get\"\n\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t\t.put(\"output\", \"extend\")\n\t\t\t\t\t\t.put(\"sortfield\", \"lastchange\")\n\t\t\t\t\t\t.put(\"sortorder\", \"desc\")\n\t\t\t\t\t\t.put(isVersion2?\"selectHosts\":\"select_hosts\", \"extend\")\n\t\t\t\t\t\t.put(isVersion2?\"selectGroups\":\"select_groups\", \"extend\")\n\t\t\t\t\t\t.put(isVersion2?\"selectItems\":\"select_items\", \"extend\")\n\t\t\t\t\t\t.put(\"lastChangeSince\", min)\n\t\t\t\t\t\t.put(\"only_true\", \"1\")\n\t\t\t\t\t\t.put(\"limit\", ZabbixConfig.TRIGGER_GET_LIMIT)\n\t\t\t\t\t\t.put(\"expandDescription\", true)\n\t\t\t);\n\t\t\timportTriggers(triggers);\n\t\t\ttriggers.close();\n\n\t\t\tsetCached(TriggerData.TABLE_NAME, null, ZabbixConfig.CACHE_LIFETIME_TRIGGERS);\n\t\t\t_endTransaction();\n\t\t}\n\t}\n\n\tprivate void importTriggers(JsonArrayOrObjectReader jsonArray) throws JsonParseException, IOException {\n\t\tJsonObjectReader triggerReader;\n\t\twhile ((triggerReader = jsonArray.next()) != null) {\n\t\t\tTriggerData t = new TriggerData();\n\t\t\twhile (triggerReader.nextValueToken()) {\n\t\t\t\tString propName = triggerReader.getCurrentName();\n\t\t\t\tif (propName.equals(TriggerData.COLUMN_TRIGGERID)) {\n\t\t\t\t\tt.set(TriggerData.COLUMN_TRIGGERID, Long.parseLong(triggerReader.getText()));\n\t\t\t\t} else if (propName.equals(TriggerData.COLUMN_COMMENTS)) {\n\t\t\t\t\tt.set(TriggerData.COLUMN_COMMENTS, triggerReader.getText());\n\t\t\t\t} else if (propName.equals(TriggerData.COLUMN_DESCRIPTION)) {\n\t\t\t\t\tt.set(TriggerData.COLUMN_DESCRIPTION, triggerReader.getText());\n\t\t\t\t} else if (propName.equals(TriggerData.COLUMN_EXPRESSION)) {\n\t\t\t\t\tt.set(TriggerData.COLUMN_EXPRESSION, triggerReader.getText());\n\t\t\t\t} else if (propName.equals(TriggerData.COLUMN_LASTCHANGE)) {\n\t\t\t\t\tt.set(TriggerData.COLUMN_LASTCHANGE, Integer.parseInt(triggerReader.getText()));\n\t\t\t\t} else if (propName.equals(TriggerData.COLUMN_PRIORITY)) {\n\t\t\t\t\tt.set(TriggerData.COLUMN_PRIORITY, Integer.parseInt(triggerReader.getText()));\n\t\t\t\t} else if (propName.equals(TriggerData.COLUMN_STATUS)) {\n\t\t\t\t\tt.set(TriggerData.COLUMN_STATUS, Integer.parseInt(triggerReader.getText()));\n\t\t\t\t} else if (propName.equals(TriggerData.COLUMN_VALUE)) {\n\t\t\t\t\tt.set(TriggerData.COLUMN_VALUE, Integer.parseInt(triggerReader.getText()));\n\t\t\t\t} else if (propName.equals(TriggerData.COLUMN_URL)) {\n\t\t\t\t\tt.set(TriggerData.COLUMN_URL, triggerReader.getText());\n\t\t\t\t} else if (propName.equals(\"hosts\")) {\n\t\t\t\t\tObject[] hostsCache = importHosts(triggerReader.getJsonArrayOrObjectReader(), null);\n\t\t\t\t\tt.set(TriggerData.COLUMN_HOSTS, hostsCache[0]);\n\t\t\t\t\tt.set(TriggerData.COLUMN_HOSTID, hostsCache[1]);\n\t\t\t\t} else if (propName.equals(\"groups\")) {\n\t\t\t\t\timportHostGroups(triggerReader.getJsonArrayOrObjectReader());\n\t\t\t\t} else if (propName.equals(\"items\")) {\n\t\t\t\t\t// store the first item id\n\t\t\t\t\tt.set(TriggerData.COLUMN_ITEMID, importItems(triggerReader.getJsonArrayOrObjectReader(), 1, true));\n\t\t\t\t} else {\n\t\t\t\t\ttriggerReader.nextProperty();\n\t\t\t\t}\n\t\t\t}\n\t\t\tt.insert(zabbixLocalDB, TriggerData.COLUMN_TRIGGERID);\n\t\t\t_commitTransactionIfRecommended();\n\t\t}\n\t}\n\n\tpublic void importTriggersByItemId(String itemid) throws JSONException, IOException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\tif (!isCached(TriggerData.TABLE_NAME, \"itemid=\"+itemid)) {\n\t\t\t_startTransaction();\n\t\t\tzabbixLocalDB.delete(TriggerData.TABLE_NAME, TriggerData.COLUMN_ITEMID+\"=\"+itemid, null);\n\t\t\tJsonArrayOrObjectReader triggers = _queryStream(\n\t\t\t\t\t\"trigger.get\"\n\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t\t.put(\"output\", \"extend\")\n\t\t\t\t\t\t.put(isVersion2?\"selectHosts\":\"select_hosts\", \"extend\")\n\t\t\t\t\t\t.put(isVersion2?\"selectGroups\":\"select_groups\", \"extend\")\n\t\t\t\t\t\t.put(isVersion2?\"selectItems\":\"select_items\", \"extend\")\n\t\t\t\t\t\t.put(\"itemids\", new JSONArray().put(itemid))\n\t\t\t\t\t\t.put(\"limit\", 1)\n\t\t\t\t\t\t.put(\"sortfield\", \"lastchange\")\n\t\t\t\t\t\t.put(\"sortorder\", \"DESC\")\n\t\t\t);\n\t\t\timportTriggers(triggers);\n\t\t\tsetCached(TriggerData.TABLE_NAME, \"itemid=\"+itemid, ZabbixConfig.CACHE_LIFETIME_TRIGGERS);\n\t\t\t_endTransaction();\n\t\t}\n\t}\n\n\tpublic boolean isCached(String kind, String filter) {\n\t\tSQLiteQueryBuilder sqlBuilder = new SQLiteQueryBuilder();\n\t\tsqlBuilder.setTables(CacheData.TABLE_NAME);\n\t\tsqlBuilder.appendWhere(CacheData.COLUMN_KIND+\"='\"+kind+\"' AND \");\n\t\tsqlBuilder.appendWhere(CacheData.COLUMN_FILTER+\n\t\t\t\t(filter==null?\" IS NULL\":\"='\"+filter+\"'\")\n\t\t);\n\t\tsqlBuilder.appendWhere(\" AND \"+CacheData.COLUMN_EXPIRE_DATE+\">\"+new Date().getTime()/1000);\n\t\tCursor cur = sqlBuilder.query(\n\t\t\tzabbixLocalDB,\n\t\t\tnull,\n\t\t\tnull,\n\t\t\tnull,\n\t\t\tnull,\n\t\t\tnull,\n\t\t\tnull\n\t\t);\n\t\tLog.i(\"ZabbixContentProvider\", \"isCached \"+kind+\"//\"+filter+\"//\"+cur.moveToFirst());\n\t\treturn cur.moveToFirst();\n\t}\n\n\t/**\n\t * public, for the unit test\n\t */\n\tpublic void setCached(String kind, String filter, int lifetime) {\n\t\tCacheData cache = new CacheData();\n\t\tcache.set(CacheData.COLUMN_EXPIRE_DATE, new Date().getTime()/1000 + lifetime);\n\t\tcache.set(CacheData.COLUMN_KIND, kind);\n\t\tif (filter != null) {\n\t\t\tcache.set(CacheData.COLUMN_FILTER, filter);\n\t\t}\n\t\tcache.insert(zabbixLocalDB);\n\t}\n\n\t/**\n\t * updates the progressbar in the gui\n\t * @param i 0..100\n\t */\n\tpublic void showProgress(int i) {\n\t\t// if applicable, transform the progress\n\t\tif (transformProgressStart != 0 && transformProgressEnd != 0) {\n\t\t\ti = (int) (transformProgressStart + (transformProgressEnd-transformProgressStart)*(double)i/100);\n\t\t}\n\n\t\tIntent intent = new Intent(ZabbixContentProvider.CONTENT_PROVIDER_INTENT_ACTION);\n\t\tintent.putExtra(\"flag\", ZabbixContentProvider.INTENT_FLAG_SHOW_PROGRESS);\n\t\tintent.putExtra(\"value\", i);\n\t\tcontext.sendBroadcast(intent);\n\t}\n\n\t/**\n\t * transforms the progress\n\t * @param start 0% => start%\n\t * @param end 100% => end%\n\t */\n\tpublic void transformProgress(int start, int end) {\n\t\ttransformProgressStart = start;\n\t\ttransformProgressEnd = end;\n\t}\n}\n"],
      "p_date_tdt": "May 10, 2013 7:38:47 AM",
      "c_comments_t": ["\t\t\t// create ApplicationItemRelation /** \n * public, for the unit test\n */\n /** \n * import the hosts from stream\n * @param jsonArray stream\n * @param numHosts count of hosts for progressbar. null if unknown.\n * @return Object[] {(String) comma-separated all Hostnames, (Long) 1. host id}\n * @throws JsonParseException\n * @throws IOException\n */\n \t\t\t// result array found /** \n * import graph items\n * @param graphItems\n * @return true, if graphid column has to be updated from -1 to the correct graphid later.\n * @throws JsonParseException\n * @throws NumberFormatException\n * @throws IOException\n */\n \t\t\t\t\t\t// save only every 20th \t\t\t// wrong password. token remains null \t\t\t// the past 2 hours \t\t\t\t\t// data are unuseable, e.g. because it's a string /** \n * @param events stream\n * @param numEvents if null, no progressbar-update AND only isert, if it does not exist. If !null, progressbar-update AND always insert without checking\n * @throws JsonParseException\n * @throws IOException\n */\n \t\t\t\t\t// Precondition failed / Looks like Zabbix 1.8.2 \t\t\t// get API version \t\t\t// if #0 \"other\" does not exist yet, it has to be created \t\t\t\t\t// later the IDs will be replaced with the correct /** \n * zabbix api call. data will be parsed as json object on-the-fly. Caution: use this only for api calls with a small return data.\n * @param method\n * @param params\n * @return\n * @throws ClientProtocolException\n * @throws IOException\n * @throws JSONException\n * @throws HttpAuthorizationRequiredException\n * @throws NoAPIAccessException\n */\n /** \n * begin sql transaction\n */\n \t\t\t\t\t\t// first do a new auth and then try the same api call again \t\t\t\t// no itemid \t\t\t// count of items /** \n * init\n * @param context android context\n * @param zabbixLocalDB sqlite\n */\n \t\t\t// create applications that does not exist \t\t\t\t// so we use a fiction \t\t\t// only resouretype == 0 /** \n * probably too old zabbix <= 1.8.2\n */\n /** \n * zabbix auth. user and pwd from app preferences\n * @return true success\n * @throws ClientProtocolException\n * @throws IOException\n * @throws JSONException\n * @throws HttpAuthorizationRequiredException\n * @throws NoAPIAccessException\n */\n /** \n * close the last http stream\n */\n \t\t\t// Workaround: historydetails only comes if you use the correct \"history\"-parameter. /** \n * transforms the progress\n * @param start 0% => start%\n * @param end 100% => end%\n */\n \t\t\t\t// in Zabbix version <2.0, this is not default \t\t\t\t// file not found \t\t\t\t\t// hex string => color int \t\tHttpClientParams.setRedirecting(params, true); // redirecting /** \n * The API version. From 1.8.3 (maybe earlier) to 2.0 (excluded), this was 1.3. With 2.0, it changed to 1.4.  Finally, since 2.0.4, the API version matches the program version.\n */\n \t\t\t// if applicable replace placeholder \t\t\t// if graphid-column was not set, this must be done later. temporary graphid=-1 \t\t// for GUI unit test, just return true /** \n * imports the \"warning\"-triggers\n * @throws JSONException\n * @throws IOException\n * @throws HttpAuthorizationRequiredException\n * @throws NoAPIAccessException\n */\n \t\t\t// event is parsed and can be inserted into the db \t\tpublic static final int EVENT_GET_TIME_FROM_SHIFT = 7*24*60*60; // -7 days \t\t// http request \t\t\t\t\t// store hosts namen \t\t\t\t// http auth failed \t\t\t\t\t// at this point itemid and hostid is unknown \t\t\t\t\t// import triggers \t\t\t// we try them all, until we get results. /** \n * importiert ein trigger mit dem attribute itemid. ggf. wird der trigger zuerst gelöscht und neu angelegt. imports a trigger with the attribute itemid. if trigger already exists, it will be removed first.\n * @param triggerid\n * @throws JSONException\n * @throws IOException\n * @throws HttpAuthorizationRequiredException\n * @throws NoAPIAccessException\n */\n \t\t\t\t\t// import hosts \t\t\t// for unit test \t\t\t\t// ignore \t\t\t// or a json object /** \n * zabbix error: no api access\n */\n /** \n * counts the sql inserts/updates and do a transaction commit to save the memory\n */\n \t\t\t// send intent to GUI \t\t\t\t\t// before zabbix 2.x the name field was \"description\" \t\t\t\t\t// if we get an empty array, we try another history parameter \t\t\t\t\t// store the first item id \t\t// check if the trigger exists and if the itemid was set /** \n * global constants\n */\n \t\t\t\t// create \"other\" hostgroup #1 \t\t\t// if there's no application, the ID #0 must be added (for other) \t\t\t\t\t// because of this, all applicationrelations will be saved with itemid and hostid \"-1\". \t\t\t\t\t\t.put(\"history\", historytype) // for integer ? /** \n * interface to connect to the zabbix server\n */\n /** \n * acknowledge zabbix event. Sets ack-flag with comment. Caution: This is supported only for Zabbix version >= 1.8.4\n * @param eventid\n * @param comment\n * @return true, success.\n * @throws ClientProtocolException\n * @throws IOException\n * @throws JSONException\n * @throws HttpAuthorizationRequiredException\n * @throws NoAPIAccessException\n */\n \t\t\t// store the last stream to close it if an exception will be thrown /** \n * zabbix api call as stream.\n * @param method\n * @param params\n * @return stream im json array wrapper\n * @throws JSONException\n * @throws IOException\n * @throws HttpAuthorizationRequiredException\n * @throws NoAPIAccessException\n */\n \t\t// if applicable http auth \t\t\t// correct historytype found and there are data \t\t\t\t// count of the entries cannot be detected (zabbix bug), /** \n * import items from stream.\n * @param items stream\n * @param numItems count for progressbar, if 0 no progressbarupdate\n * @param checkBeforeInsert if true, only make an insert if item does not exist\n * @return the first item id\n * @throws JsonParseException\n * @throws IOException\n */\n \t\t\t// collect all graphids /** \n * http auth is needed\n */\n \t\t\t// ignore for unit test /** \n * commit sql transaction\n */\n \t\t\t// delete old graphs \t\t\t// host without group will get group #0 (other) \t\t\t// there's no result \t\tpublic static final int HISTORY_GET_TIME_FROM_SHIFT = 24*60*60; // -24h \t\t// if applicable, transform the progress \t\t\t// SSL not trusted \t\t\t// internet problem \t\t\tif (jp.nextToken() != JsonToken.START_ARRAY && jp.getCurrentToken() != JsonToken.START_OBJECT) { // go inside the array \t\tpublic static final int CACHE_LIFETIME_APPLICATIONS = 2*24*60*60; // 2 days \t\t\t\t\t// since zabbix 2.x is the name of the item \"name\" \t\t\t// now the \"-1\" IDs of applicationsrelation will be replaced with the correct itemID \t\t\t// get count of hosts /** \n * import the newest events\n * @throws ClientProtocolException\n * @throws IOException\n * @throws JSONException\n * @throws HttpAuthorizationRequiredException\n * @throws NoAPIAccessException\n */\n /** \n * updates the progressbar in the gui\n * @param i 0..100\n */\n \t\t\t\t\t\t// ignore \t\t\t\t\t// first do a new auth and then try the same api call again /** \n * import the newest event of a trigger\n * @param triggerid\n * @throws JSONException\n * @throws IOException\n * @throws HttpAuthorizationRequiredException\n * @throws NoAPIAccessException\n */\n \t\t// it can be an (empty) array \t\t\t// this parameter can be \"null\" or a number 0-4. Because we don't know when to use which, \t\t\t// clear triggers"],
      "p_contents_t": ["package com.inovex.zabbixmobile.api;\n\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.net.Socket;\nimport java.net.UnknownHostException;\nimport java.security.KeyManagementException;\nimport java.security.KeyStore;\nimport java.security.KeyStoreException;\nimport java.security.NoSuchAlgorithmException;\nimport java.security.UnrecoverableKeyException;\nimport java.security.cert.CertificateException;\nimport java.security.cert.X509Certificate;\nimport java.util.ArrayList;\nimport java.util.Date;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Set;\n\nimport javax.net.ssl.SSLContext;\nimport javax.net.ssl.SSLPeerUnverifiedException;\nimport javax.net.ssl.TrustManager;\nimport javax.net.ssl.X509TrustManager;\n\nimport org.apache.http.HttpResponse;\nimport org.apache.http.HttpVersion;\nimport org.apache.http.auth.AuthScope;\nimport org.apache.http.auth.UsernamePasswordCredentials;\nimport org.apache.http.client.ClientProtocolException;\nimport org.apache.http.client.methods.HttpPost;\nimport org.apache.http.client.params.HttpClientParams;\nimport org.apache.http.conn.ClientConnectionManager;\nimport org.apache.http.conn.scheme.PlainSocketFactory;\nimport org.apache.http.conn.scheme.Scheme;\nimport org.apache.http.conn.scheme.SchemeRegistry;\nimport org.apache.http.conn.ssl.SSLSocketFactory;\nimport org.apache.http.entity.StringEntity;\nimport org.apache.http.impl.client.DefaultHttpClient;\nimport org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager;\nimport org.apache.http.params.BasicHttpParams;\nimport org.apache.http.params.HttpConnectionParams;\nimport org.apache.http.params.HttpParams;\nimport org.apache.http.params.HttpProtocolParams;\nimport org.apache.http.protocol.HTTP;\nimport org.codehaus.jackson.JsonFactory;\nimport org.codehaus.jackson.JsonParseException;\nimport org.codehaus.jackson.JsonParser;\nimport org.codehaus.jackson.JsonToken;\nimport org.json.JSONArray;\nimport org.json.JSONException;\nimport org.json.JSONObject;\n\nimport android.content.ContentValues;\nimport android.content.Context;\nimport android.content.Intent;\nimport android.content.SharedPreferences;\nimport android.database.Cursor;\nimport android.database.sqlite.SQLiteDatabase;\nimport android.database.sqlite.SQLiteQueryBuilder;\nimport android.graphics.Color;\nimport android.preference.PreferenceManager;\nimport android.util.Log;\n\nimport com.inovex.zabbixmobile.R;\nimport com.inovex.zabbixmobile.ZabbixContentProvider;\nimport com.inovex.zabbixmobile.model.ApplicationData;\nimport com.inovex.zabbixmobile.model.ApplicationItemRelationData;\nimport com.inovex.zabbixmobile.model.CacheData;\nimport com.inovex.zabbixmobile.model.EventData;\nimport com.inovex.zabbixmobile.model.GraphData;\nimport com.inovex.zabbixmobile.model.GraphItemData;\nimport com.inovex.zabbixmobile.model.HistoryDetailData;\nimport com.inovex.zabbixmobile.model.HostData;\nimport com.inovex.zabbixmobile.model.HostGroupData;\nimport com.inovex.zabbixmobile.model.ItemData;\nimport com.inovex.zabbixmobile.model.ScreenData;\nimport com.inovex.zabbixmobile.model.ScreenItemData;\nimport com.inovex.zabbixmobile.model.TriggerData;\n\n/**\n * interface to connect to the zabbix server\n */\npublic class ZabbixService {\n\tclass CustomSSLSocketFactory extends SSLSocketFactory {\n\t\tSSLContext sslContext = SSLContext.getInstance(\"TLS\");\n\n\t\tpublic CustomSSLSocketFactory(KeyStore truststore) throws NoSuchAlgorithmException, KeyManagementException, KeyStoreException, UnrecoverableKeyException {\n\t\t\tsuper(truststore);\n\t\t\tTrustManager tm = new X509TrustManager() {\n\t\t\t\t@Override\n\t\t\t\tpublic void checkClientTrusted(X509Certificate[] chain,\n\t\t\t\t\t\tString authType) throws CertificateException {\n\t\t\t\t}\n\t\t\t\t@Override\n\t\t\t\tpublic void checkServerTrusted(X509Certificate[] chain,\n\t\t\t\t\t\tString authType) throws CertificateException {\n\t\t\t\t}\n\t\t\t\t@Override\n\t\t\t\tpublic X509Certificate[] getAcceptedIssuers() {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t};\n\t\t\tsslContext.init(null, new TrustManager[] { tm }, null);\n\t\t}\n\n\t\t@Override\n\t\tpublic Socket createSocket() throws IOException {\n\t\t\treturn sslContext.getSocketFactory().createSocket();\n\t\t}\n\n\t\t@Override\n\t\tpublic Socket createSocket(Socket socket, String host, int port, boolean autoClose) throws IOException, UnknownHostException {\n\t\t\treturn sslContext.getSocketFactory().createSocket(socket, host, port, autoClose);\n\t\t}\n\t}\n\n\t/**\n\t * http auth is needed\n\t */\n\tpublic class HttpAuthorizationRequiredException extends Exception {\n\t\tprivate static final long serialVersionUID = 6632422081858878147L;\n\t}\n\n\t/**\n\t * zabbix error: no api access\n\t */\n\tpublic class NoAPIAccessException extends Exception {\n\t\tprivate static final long serialVersionUID = 6381395987443456382L;\n\t}\n\n\t/**\n\t * probably too old zabbix <= 1.8.2\n\t */\n\tpublic class PreconditionFailedException extends Exception {\n\t\tprivate static final long serialVersionUID = -2529885710860745023L;\n\t}\n\n\t/**\n\t * global constants\n\t */\n\tpublic class ZabbixConfig {\n\t\tpublic static final int APPLICATION_GET_LIMIT = 1000;\n\t\tpublic static final int EVENTS_GET_LIMIT = 60;\n\t\tpublic static final int HISTORY_GET_TIME_FROM_SHIFT = 24*60*60; // -24h\n\t\tpublic static final int HISTORY_GET_LIMIT = 8000;\n\t\tpublic static final int HOSTGROUP_GET_LIMIT = 200;\n\t\tpublic static final int HOST_GET_LIMIT = 300;\n\t\tpublic static final int ITEM_GET_LIMIT = 200;\n\t\tpublic static final int TRIGGER_GET_LIMIT = 100;\n\t\tpublic static final int EVENT_GET_TIME_FROM_SHIFT = 7*24*60*60; // -7 days\n\t\tpublic static final int CACHE_LIFETIME_APPLICATIONS = 2*24*60*60; // 2 days\n\t\tpublic static final int CACHE_LIFETIME_EVENTS = 120;\n\t\tpublic static final int CACHE_LIFETIME_HISTORY_DETAILS = 4*60;\n\t\tpublic static final int CACHE_LIFETIME_HOST_GROUPS = 7*24*60*60;\n\t\tpublic static final int CACHE_LIFETIME_HOSTS = 2*24*60*60;\n\t\tpublic static final int CACHE_LIFETIME_SCREENS = 2*24*60*60;\n\t\tpublic static final int CACHE_LIFETIME_ITEMS = 4*60;\n\t\tpublic static final int CACHE_LIFETIME_TRIGGERS = 2*60;\n\t\tpublic static final long STATUS_SHOW_TRIGGER_TIME = 14*24*60*60;\n\t\tpublic static final int HTTP_CONNECTION_TIMEOUT = 30000;\n\t}\n\n\tprivate final DefaultHttpClient httpClient;\n\tprivate final SQLiteDatabase zabbixLocalDB;\n\tprivate String url;\n\tprivate String token;\n\tprivate final Context context;\n\tprivate int _transactionStack;\n\tprivate JsonParser lastStream;\n\tprivate int transformProgressStart;\n\tprivate int transformProgressEnd;\n\tprivate boolean _notAuthorizedRetry;\n\tprivate boolean isVersion2 = true;\n\t/**\n\t * The API version. From 1.8.3 (maybe earlier) to 2.0 (excluded), this was 1.3. With 2.0, it changed to 1.4. \n\t * Finally, since 2.0.4, the API version matches the program version.\n\t */\n\tprivate String apiVersion = \"\";\n\n\t/**\n\t * init\n\t * @param context android context\n\t * @param zabbixLocalDB sqlite\n\t */\n\tpublic ZabbixService(Context context, SQLiteDatabase zabbixLocalDB) {\n\t\tClientConnectionManager ccm = null;\n\t\tHttpParams params = null;\n\n\t\ttry {\n\t\t\tSharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(context);\n\t\t\tif (prefs.getBoolean(\"zabbix_trust_all_ssl_ca\", false)) {\n\t\t\t\tKeyStore trustStore = KeyStore.getInstance(KeyStore.getDefaultType());\n\t\t\t\ttrustStore.load(null, null);\n\n\t\t\t\tSSLSocketFactory sf = new CustomSSLSocketFactory(trustStore);\n\t\t\t\tsf.setHostnameVerifier(SSLSocketFactory.ALLOW_ALL_HOSTNAME_VERIFIER);\n\n\t\t\t\tparams = new BasicHttpParams();\n\t\t\t\tHttpProtocolParams.setVersion(params, HttpVersion.HTTP_1_1);\n\t\t\t\tHttpProtocolParams.setContentCharset(params, HTTP.UTF_8);\n\n\t\t\t\tSchemeRegistry registry = new SchemeRegistry();\n\t\t\t\tregistry.register(new Scheme(\"http\", PlainSocketFactory.getSocketFactory(), 80));\n\t\t\t\tregistry.register(new Scheme(\"https\", sf, 443));\n\n\t\t\t\tccm = new ThreadSafeClientConnManager(params, registry);\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\t// ignore for unit test\n\t\t}\n\n\t\tif (ccm == null || params == null) {\n\t\t\thttpClient = new DefaultHttpClient();\n\t\t} else {\n\t\t\thttpClient = new DefaultHttpClient(ccm, params);\n\t\t}\n\n\t\t// if applicable http auth\n\t\ttry {\n\t\t\tSharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(context);\n\t\t\tif (prefs.getBoolean(\"http_auth_enabled\", false)) {\n\t\t\t\tString user = prefs.getString(\"http_auth_username\", \"\");\n\t\t\t\tString pwd = prefs.getString(\"http_auth_password\", \"\");\n\t\t\t\thttpClient.getCredentialsProvider().setCredentials(AuthScope.ANY, new UsernamePasswordCredentials(user, pwd));\n\t\t\t}\n\t\t} catch (java.lang.UnsupportedOperationException e1) {\n\t\t\t// for unit test\n\t\t}\n\n\t\tparams = httpClient.getParams();\n\t\tHttpClientParams.setRedirecting(params, true); // redirecting\n\t\tHttpConnectionParams.setConnectionTimeout(params, ZabbixConfig.HTTP_CONNECTION_TIMEOUT);\n\t\tthis.context = context;\n\t\tthis.zabbixLocalDB = zabbixLocalDB;\n\t}\n\n\t/**\n\t * counts the sql inserts/updates and do a transaction commit to save the memory\n\t */\n\tprivate void _commitTransactionIfRecommended() {\n\t\tif (_transactionStack++ > 50) {\n\t\t\t_endTransaction();\n\t\t\t_startTransaction();\n\t\t}\n\t}\n\n\t/**\n\t * commit sql transaction\n\t */\n\tpublic void _endTransaction() {\n\t\tif (zabbixLocalDB.inTransaction()) {\n\t\t\tzabbixLocalDB.setTransactionSuccessful();\n\t\t\tzabbixLocalDB.endTransaction();\n\t\t}\n\t}\n\n\t/**\n\t * zabbix api call. data will be parsed as json object on-the-fly.\n\t * Caution: use this only for api calls with a small return data.\n\t * @param method\n\t * @param params\n\t * @return\n\t * @throws ClientProtocolException\n\t * @throws IOException\n\t * @throws JSONException\n\t * @throws HttpAuthorizationRequiredException\n\t * @throws NoAPIAccessException\n\t */\n\tprivate JSONObject _queryBuffer(String method, JSONObject params) throws ClientProtocolException, IOException, JSONException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\tHttpPost post = new HttpPost(url);\n\t\tpost.addHeader(\"Content-Type\", \"application/json; charset=utf-8\");\n\n\t\tString json =\n\t\t\t\"{\" +\n\t\t\t\"\t\\\"jsonrpc\\\" : \\\"2.0\\\",\" +\n\t\t\t\"\t\\\"method\\\" : \\\"\"+method+\"\\\",\" +\n\t\t\t\"\t\\\"params\\\" : \"+params.toString()+\",\" +\n\t\t\t\"\t\\\"auth\\\" : \"+(token==null?\"null\":'\"'+token+'\"')+\",\" +\n\t\t\t\"\t\\\"id\\\" : 0\" +\n\t\t\t\"}\";\n\n\t\tpost.setEntity(new StringEntity(json, \"UTF-8\"));\n\t\ttry {\n\t\t\tHttpResponse resp = httpClient.execute(post);\n\t\t\tif (resp.getStatusLine().getStatusCode() == 401) {\n\t\t\t\t// http auth failed\n\t\t\t\tthrow new HttpAuthorizationRequiredException();\n\t\t\t} else if (resp.getStatusLine().getStatusCode() == 412) {\n\t\t\t\t\t// Precondition failed / Looks like Zabbix 1.8.2\n\t\t\t\tthrow new PreconditionFailedException();\n\t\t\t} else if (resp.getStatusLine().getStatusCode() == 404) {\n\t\t\t\t// file not found\n\t\t\t\tthrow new IOException(resp.getStatusLine().getStatusCode()+\" \"+resp.getStatusLine().getReasonPhrase());\n\t\t\t} else {\n\t\t\t\tLog.d(\"ZabbixService\", resp.getStatusLine().getStatusCode()+\" \"+resp.getStatusLine().getReasonPhrase());\n\t\t\t}\n\t\t\tStringBuilder total = new StringBuilder();\n\t\t\tBufferedReader rd = new BufferedReader(new InputStreamReader(resp.getEntity().getContent()));\n\t\t\tint chr;\n\t\t\twhile ((chr = rd.read()) != -1) {\n\t\t\t\ttotal.append((char) chr);\n\t\t\t}\n\t\t\tJSONObject result = new JSONObject(total.toString());\n\t\t\ttry {\n\t\t\t\tif (result.getJSONObject(\"error\") != null) {\n\t\t\t\t\tif (result.getJSONObject(\"error\").getString(\"data\").equals(\"No API access\")) {\n\t\t\t\t\t\tthrow new NoAPIAccessException();\n\t\t\t\t\t} else throw new RuntimeException(result.getJSONObject(\"error\").toString());\n\t\t\t\t}\n\t\t\t\tif (result.getString(\"data\").equals(\"Not authorized\")) {\n\t\t\t\t\t// first do a new auth and then try the same api call again\n\t\t\t\t\tif (authenticate() && !_notAuthorizedRetry) {\n\t\t\t\t\t\t_notAuthorizedRetry = true;\n\t\t\t\t\t\tJSONObject r = _queryBuffer(method, params);\n\t\t\t\t\t\t_notAuthorizedRetry = false;\n\t\t\t\t\t\treturn r;\n\t\t\t\t\t} throw new IllegalStateException(result.toString());\n\t\t\t\t}\n\t\t\t} catch (JSONException e) {\n\t\t\t\t// ignore\n\t\t\t}\n\t\t\treturn result;\n\t\t} catch (SSLPeerUnverifiedException e) {\n\t\t\t// SSL not trusted\n\t\t\tIntent intent = new Intent(ZabbixContentProvider.CONTENT_PROVIDER_INTENT_ACTION);\n\t\t\tintent.putExtra(\"flag\", ZabbixContentProvider.INTENT_FLAG_SSL_NOT_TRUSTED);\n\t\t\tcontext.sendBroadcast(intent);\n\t\t\tthrow e;\n\t\t} catch (IOException e) {\n\t\t\t// internet problem\n\t\t\t// send intent to GUI\n\t\t\tIntent intent = new Intent(ZabbixContentProvider.CONTENT_PROVIDER_INTENT_ACTION);\n\t\t\tintent.putExtra(\"flag\", ZabbixContentProvider.INTENT_FLAG_CONNECTION_FAILED);\n\t\t\tintent.putExtra(\"value\", e.getMessage());\n\t\t\tcontext.sendBroadcast(intent);\n\t\t\tthrow e;\n\t\t}\n\t}\n\n\t/**\n\t * zabbix api call as stream.\n\t * @param method\n\t * @param params\n\t * @return stream im json array wrapper\n\t * @throws JSONException\n\t * @throws IOException\n\t * @throws HttpAuthorizationRequiredException\n\t * @throws NoAPIAccessException\n\t */\n\tprivate JsonArrayOrObjectReader _queryStream(String method, JSONObject params) throws JSONException, IOException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\t// http request\n\t\tHttpPost post = new HttpPost(url);\n\t\tpost.addHeader(\"Content-Type\", \"application/json; charset=utf-8\");\n\n\t\tJSONObject json = new JSONObject()\n\t\t\t.put(\"jsonrpc\", \"2.0\")\n\t\t\t.put(\"method\", method)\n\t\t\t.put(\"params\", params)\n\t\t\t.put(\"auth\", token)\n\t\t\t.put(\"id\", 0);\n\n\t\tLog.d(\"ZabbixService\", \"_queryStream: \"+url);\n\t\tLog.d(\"ZabbixService\", \"_queryStream: \"+json.toString());\n\n\t\tpost.setEntity(new StringEntity(json.toString(), \"UTF-8\"));\n\t\ttry {\n\t\t\tHttpResponse resp = httpClient.execute(post);\n\t\t\tif (resp.getStatusLine().getStatusCode() == 401) {\n\t\t\t\t// http auth failed\n\t\t\t\tthrow new HttpAuthorizationRequiredException();\n\t\t\t}\n\n\t\t\tJsonFactory jsonFac = new JsonFactory();\n\t\t\tJsonParser jp = jsonFac.createJsonParser(resp.getEntity().getContent());\n\t\t\t// store the last stream to close it if an exception will be thrown\n\t\t\tlastStream = jp;\n\t\t\tif (jp.nextToken() != JsonToken.START_OBJECT) {\n\t\t\t\tthrow new IOException(\"Expected data to start with an Object\");\n\t\t\t}\n\t\t\tdo {\n\t\t\t\tjp.nextToken();\n\t\t\t\tif (jp.getCurrentName().equals(\"error\")) {\n\t\t\t\t\tjp.nextToken();\n\t\t\t\t\tString errortxt = \"\";\n\t\t\t\t\twhile (jp.nextToken() != JsonToken.END_OBJECT) {\n\t\t\t\t\t\terrortxt += jp.getText();\n\t\t\t\t\t}\n\t\t\t\t\tif (errortxt.contains(\"No API access\")) {\n\t\t\t\t\t\tthrow new NoAPIAccessException();\n\t\t\t\t\t} else if (errortxt.contains(\"Not authorized\")) {\n\t\t\t\t\t\t// first do a new auth and then try the same api call again\n\t\t\t\t\t\tif (authenticate() && !_notAuthorizedRetry) {\n\t\t\t\t\t\t\t_notAuthorizedRetry = true;\n\t\t\t\t\t\t\tJsonArrayOrObjectReader r = _queryStream(method, params);\n\t\t\t\t\t\t\t_notAuthorizedRetry = false;\n\t\t\t\t\t\t\treturn r;\n\t\t\t\t\t\t} else throw new IllegalStateException(errortxt);\n\t\t\t\t\t} else throw new IllegalStateException(\"JSON API Error: \"+errortxt);\n\t\t\t\t}\n\t\t\t} while (!jp.getCurrentName().equals(\"result\"));\n\n\t\t\t// result array found\n\t\t\tif (jp.nextToken() != JsonToken.START_ARRAY && jp.getCurrentToken() != JsonToken.START_OBJECT) { // go inside the array\n\t\t\t\ttry {\n\t\t\t\t\tLog.d(\"ZabbixService\", \"current token: \"+jp.getCurrentToken());\n\t\t\t\t\tLog.d(\"ZabbixService\", \"current name: \"+jp.getCurrentName());\n\t\t\t\t\tLog.d(\"ZabbixService\", \"get text: \"+jp.getText());\n\t\t\t\t\tLog.d(\"ZabbixService\", \"next value: \"+jp.nextValue());\n\t\t\t\t\tLog.d(\"ZabbixService\", \"next token: \"+jp.nextToken());\n\t\t\t\t\tLog.d(\"ZabbixService\", \"current token: \"+jp.getCurrentToken());\n\t\t\t\t\tLog.d(\"ZabbixService\", \"current name: \"+jp.getCurrentName());\n\t\t\t\t\tLog.d(\"ZabbixService\", \"get text: \"+jp.getText());\n\t\t\t\t} catch (Exception e) {}\n\t\t\t\tthrow new IOException(\"Expected data to start with an Array\");\n\t\t\t}\n\t\t\treturn new JsonArrayOrObjectReader(jp);\n\t\t} catch (SSLPeerUnverifiedException e) {\n\t\t\tthrow e;\n\t\t} catch (IOException e) {\n\t\t\t// internet problem\n\t\t\t// send intent to GUI\n\t\t\tIntent intent = new Intent(ZabbixContentProvider.CONTENT_PROVIDER_INTENT_ACTION);\n\t\t\tintent.putExtra(\"flag\", ZabbixContentProvider.INTENT_FLAG_CONNECTION_FAILED);\n\t\t\tcontext.sendBroadcast(intent);\n\t\t\tthrow e;\n\t\t}\n\t}\n\n\t/**\n\t * begin sql transaction\n\t */\n\tprivate void _startTransaction() {\n\t\tzabbixLocalDB.beginTransaction();\n\t\t_transactionStack = 0;\n\t}\n\n\t/**\n\t * acknowledge zabbix event. Sets ack-flag with comment.\n\t * Caution: This is supported only for Zabbix version >= 1.8.4\n\t * @param eventid\n\t * @param comment\n\t * @return true, success.\n\t * @throws ClientProtocolException\n\t * @throws IOException\n\t * @throws JSONException\n\t * @throws HttpAuthorizationRequiredException\n\t * @throws NoAPIAccessException\n\t */\n\tpublic boolean acknowledgeEvent(String eventid, String comment) throws ClientProtocolException, IOException, JSONException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\t// for GUI unit test, just return true\n\t\tif (comment != null && comment.equals(\"__UNIT_TEST__RETURN_TRUE__\")) return true;\n\n\t\tJSONObject result = _queryBuffer(\n\t\t\t\t\"event.acknowledge\"\n\t\t\t\t, new JSONObject()\n\t\t\t\t\t.put(\"eventids\", new JSONArray().put(eventid))\n\t\t);\n\t\t// it can be an (empty) array\n\t\ttry {\n\t\t\treturn result.getJSONObject(\"result\").getJSONArray(\"eventids\").length() == 1;\n\t\t} catch (JSONException e) {\n\t\t\t// or a json object\n\t\t\treturn result.getJSONObject(\"result\").getJSONObject(\"eventids\").length() == 1;\n\t\t}\n\t}\n\n\t/**\n\t * zabbix auth. user and pwd from app preferences\n\t * @return true success\n\t * @throws ClientProtocolException\n\t * @throws IOException\n\t * @throws JSONException\n\t * @throws HttpAuthorizationRequiredException\n\t * @throws NoAPIAccessException\n\t */\n\tpublic boolean authenticate() throws ClientProtocolException, IOException, JSONException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\tSharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(context);\n\t\tString url = prefs.getString(\"zabbix_url\", \"\").trim();\n\t\tString user = prefs.getString(\"zabbix_username\", \"\").trim();\n\t\tString password = prefs.getString(\"zabbix_password\", \"\");\n\n\t\tthis.url = url+(url.endsWith(\"/\")?\"\":'/')+\"api_jsonrpc.php\";\n\t\tLog.d(\"ZabbixContentProvider\", url+\"//\"+user);\n\n\t\ttry {\n\t\t\tJSONObject result = _queryBuffer(\n\t\t\t\t\t\"user.authenticate\"\n\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t\t.put(\"user\", user)\n\t\t\t\t\t\t.put(\"password\", password)\n\t\t\t);\n\t\t\ttoken = result.getString(\"result\");\n\t\t} catch (JSONException e) {\n\t\t\t// there's no result\n\t\t\te.printStackTrace();\n\t\t} catch (RuntimeException e) {\n\t\t\t// wrong password. token remains null\n\t\t\te.printStackTrace();\n\t\t}\n\t\tif (token != null) {\n\t\t\t// get API version\n\t\t\tJSONObject result = _queryBuffer(\n\t\t\t\t\t\"apiinfo.version\"\n\t\t\t\t\t, new JSONObject()\n\t\t\t);\n\t\t\tapiVersion = result.getString(\"result\");\n\t\t\tisVersion2 = (apiVersion.equals(\"1.4\") || apiVersion.startsWith(\"2\"));\n\t\t\tLog.i(\"ZabbixService\", \"Zabbix API Version: \" + apiVersion);\n\t\t}\n\t\treturn token != null;\n\t}\n\n\t/**\n\t * close the last http stream\n\t */\n\tpublic void closeLastStream() {\n\t\tif (lastStream != null && !lastStream.isClosed()) {\n\t\t\ttry {\n\t\t\t\tlastStream.close();\n\t\t\t} catch (IOException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate void importApplications(long hostid, long itemid, JsonArrayOrObjectReader jsonArray) throws JsonParseException, NumberFormatException, IOException {\n\t\tint num = 0;\n\t\tJsonObjectReader application;\n\t\twhile ((application = jsonArray.next()) != null) {\n\t\t\tApplicationData app = new ApplicationData();\n\t\t\twhile (application.nextValueToken()) {\n\t\t\t\tString propName = application.getCurrentName();\n\t\t\t\tif (propName.equals(ApplicationData.COLUMN_APPLICATIONID)) {\n\t\t\t\t\tapp.set(ApplicationData.COLUMN_APPLICATIONID, Long.parseLong(application.getText()));\n\t\t\t\t} else if (propName.equals(ApplicationData.COLUMN_NAME)) {\n\t\t\t\t\tapp.set(ApplicationData.COLUMN_NAME, application.getText());\n\t\t\t\t} else if (propName.equals(ApplicationData.COLUMN_HOSTID)) {\n\t\t\t\t\tapp.set(ApplicationData.COLUMN_HOSTID, Long.parseLong(application.getText()));\n\t\t\t\t} else {\n\t\t\t\t\tapplication.nextProperty();\n\t\t\t\t}\n\t\t\t}\n\t\t\t// create applications that does not exist\n\t\t\tapp.insert(zabbixLocalDB, ApplicationData.COLUMN_APPLICATIONID);\n\t\t\t_commitTransactionIfRecommended();\n\n\t\t\t// create ApplicationItemRelation\n\t\t\tlong appid = (Long) app.get(ApplicationData.COLUMN_APPLICATIONID);\n\t\t\tApplicationItemRelationData rel = new ApplicationItemRelationData();\n\t\t\trel.set(ApplicationItemRelationData.COLUMN_APPLICATIONID, appid);\n\t\t\trel.set(ApplicationItemRelationData.COLUMN_ITEMID, itemid);\n\t\t\trel.set(ApplicationItemRelationData.COLUMN_HOSTID, hostid);\n\t\t\trel.insert(zabbixLocalDB);\n\t\t\t_commitTransactionIfRecommended();\n\n\t\t\tnum++;\n\t\t}\n\t\tif (num == 0) {\n\t\t\t// if there's no application, the ID #0 must be added (for other)\n\t\t\tApplicationItemRelationData rel = new ApplicationItemRelationData();\n\t\t\trel.set(ApplicationItemRelationData.COLUMN_APPLICATIONID, 0);\n\t\t\trel.set(ApplicationItemRelationData.COLUMN_ITEMID, itemid);\n\t\t\trel.set(ApplicationItemRelationData.COLUMN_HOSTID, hostid);\n\t\t\trel.insert(zabbixLocalDB);\n\n\t\t\t// if #0 \"other\" does not exist yet, it has to be created\n\t\t\tApplicationData app = new ApplicationData();\n\t\t\tapp.set(ApplicationData.COLUMN_APPLICATIONID, 0);\n\t\t\tapp.set(ApplicationData.COLUMN_NAME, \"- \"+context.getResources().getString(R.string.other)+\" -\");\n\t\t\tapp.insert(zabbixLocalDB, ApplicationData.COLUMN_APPLICATIONID);\n\t\t}\n\t}\n\n\t/**\n\t * import the newest event of a trigger\n\t * @param triggerid\n\t * @throws JSONException\n\t * @throws IOException\n\t * @throws HttpAuthorizationRequiredException\n\t * @throws NoAPIAccessException\n\t */\n\tpublic void importEventByTriggerId(String triggerid) throws JSONException, IOException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\tif (!isCached(EventData.TABLE_NAME, \"triggerid=\"+triggerid)) {\n\t\t\t_startTransaction();\n\t\t\tzabbixLocalDB.delete(EventData.TABLE_NAME, EventData.COLUMN_OBJECTID+\"=\"+triggerid, null);\n\n\t\t\tJSONObject params = new JSONObject()\n\t\t\t\t.put(\"output\", \"extend\")\n\t\t\t\t.put(isVersion2?\"selectHosts\":\"select_hosts\", \"extend\")\n\t\t\t\t.put(\"triggerids\", new JSONArray().put(triggerid))\n\t\t\t\t.put(\"limit\", 1)\n\t\t\t\t.put(\"source\", 0);\n\t\t\tif (!isVersion2) {\n\t\t\t\tparams.put(\"sortfield\", \"clock\")\n\t\t\t\t\t.put(\"sortorder\", \"DESC\");\n\t\t\t}\n\n\t\t\tJsonArrayOrObjectReader events = _queryStream(\n\t\t\t\t\t\"event.get\"\n\t\t\t\t\t, params\n\t\t\t);\n\t\t\timportEvents(events, null);\n\t\t\tevents.close();\n\n\t\t\tsetCached(EventData.TABLE_NAME, \"triggerid=\"+triggerid, ZabbixConfig.CACHE_LIFETIME_EVENTS);\n\t\t\t_endTransaction();\n\t\t}\n\t}\n\n\t/**\n\t * import the newest events\n\t * @throws ClientProtocolException\n\t * @throws IOException\n\t * @throws JSONException\n\t * @throws HttpAuthorizationRequiredException\n\t * @throws NoAPIAccessException\n\t */\n\tpublic void importEvents() throws ClientProtocolException, IOException, JSONException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\tif (!isCached(EventData.TABLE_NAME, null)) {\n\t\t\t_startTransaction();\n\t\t\tzabbixLocalDB.delete(EventData.TABLE_NAME, null, null);\n\t\t\tzabbixLocalDB.delete(TriggerData.TABLE_NAME, null, null);\n\t\t\tzabbixLocalDB.delete(CacheData.TABLE_NAME, CacheData.COLUMN_KIND+\"='\"+EventData.TABLE_NAME+\"'\", null);\n\t\t\tzabbixLocalDB.delete(CacheData.TABLE_NAME, CacheData.COLUMN_KIND+\"='\"+TriggerData.TABLE_NAME+\"'\", null);\n\n\t\t\tint numEvents = ZabbixConfig.EVENTS_GET_LIMIT;\n\n\t\t\tJSONObject params = new JSONObject()\n\t\t\t\t.put(\"output\", \"extend\")\n\t\t\t\t.put(\"limit\", ZabbixConfig.EVENTS_GET_LIMIT)\n\t\t\t\t.put(isVersion2?\"selectHosts\":\"select_hosts\", \"extend\")\n\t\t\t\t.put(isVersion2?\"selectTriggers\":\"select_triggers\", \"extend\")\n\t\t\t\t.put(\"source\", 0)\n\t\t\t\t.put(\"time_from\", (new Date().getTime()/1000) - ZabbixConfig.EVENT_GET_TIME_FROM_SHIFT);\n\t\t\tif (!isVersion2) {\n\t\t\t\t// in Zabbix version <2.0, this is not default\n\t\t\t\tparams.put(\"sortfield\", \"clock\")\n\t\t\t\t\t.put(\"sortorder\", \"DESC\");\n\t\t\t}\n\t\t\tJsonArrayOrObjectReader events = _queryStream(\n\t\t\t\t\t\"event.get\"\n\t\t\t\t\t, params\n\t\t\t);\n\t\t\timportEvents(events, numEvents);\n\t\t\tevents.close();\n\n\t\t\tsetCached(EventData.TABLE_NAME, null, ZabbixConfig.CACHE_LIFETIME_EVENTS);\n\t\t\t_endTransaction();\n\t\t}\n\t}\n\n\t/**\n\t * @param events stream\n\t * @param numEvents if null, no progressbar-update AND only isert, if it does not exist. If !null, progressbar-update AND always insert without checking\n\t * @throws JsonParseException\n\t * @throws IOException\n\t */\n\tprivate void importEvents(JsonArrayOrObjectReader events, Integer numEvents) throws JsonParseException, IOException {\n\t\tint i=0;\n\t\tJsonObjectReader eventReader;\n\t\twhile ((eventReader = events.next()) != null) {\n\t\t\tEventData e = new EventData();\n\t\t\twhile (eventReader.nextValueToken()) {\n\t\t\t\tString propName = eventReader.getCurrentName();\n\t\t\t\tif (propName.equals(\"hosts\")) {\n\t\t\t\t\t// import hosts\n\t\t\t\t\tString hostnames = (String) importHosts(eventReader.getJsonArrayOrObjectReader(), null)[0];\n\t\t\t\t\t// store hosts namen\n\t\t\t\t\te.set(EventData.COLUMN_HOSTS, hostnames);\n\t\t\t\t} else if (propName.equals(\"triggers\")) {\n\t\t\t\t\t// import triggers\n\t\t\t\t\timportTriggers(eventReader.getJsonArrayOrObjectReader());\n\t\t\t\t} else if (propName.equals(EventData.COLUMN_EVENTID)) {\n\t\t\t\t\te.set(EventData.COLUMN_EVENTID, Long.parseLong(eventReader.getText()));\n\t\t\t\t} else if (propName.equals(EventData.COLUMN_CLOCK)) {\n\t\t\t\t\te.set(EventData.COLUMN_CLOCK, Integer.parseInt(eventReader.getText()));\n\t\t\t\t} else if (propName.equals(EventData.COLUMN_OBJECTID)) {\n\t\t\t\t\te.set(EventData.COLUMN_OBJECTID, Long.parseLong(eventReader.getText()));\n\t\t\t\t} else if (propName.equals(EventData.COLUMN_ACK)) {\n\t\t\t\t\te.set(EventData.COLUMN_ACK, Integer.parseInt(eventReader.getText()) == 1);\n\t\t\t\t} else if (propName.equals(EventData.COLUMN_VALUE)) {\n\t\t\t\t\te.set(EventData.COLUMN_VALUE, Integer.parseInt(eventReader.getText()));\n\t\t\t\t} else {\n\t\t\t\t\teventReader.nextProperty();\n\t\t\t\t}\n\t\t\t}\n\t\t\t// event is parsed and can be inserted into the db\n\t\t\tif (numEvents == null) {\n\t\t\t\te.insert(zabbixLocalDB, EventData.COLUMN_EVENTID);\n\t\t\t} else {\n\t\t\t\te.insert(zabbixLocalDB);\n\t\t\t\tif (++i % 10 == 0) {\n\t\t\t\t\tshowProgress(i*100/numEvents);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t_commitTransactionIfRecommended();\n\t\t}\n\t}\n\n\t/**\n\t * import graph items\n\t *\n\t * @param graphItems\n\t * @return true, if graphid column has to be updated from -1 to the correct graphid later.\n\t * @throws JsonParseException\n\t * @throws NumberFormatException\n\t * @throws IOException\n\t */\n\tprivate boolean importGraphItems(JsonArrayOrObjectReader graphItems) throws JsonParseException, NumberFormatException, IOException {\n\t\tboolean mustSetGraphid = false;\n\t\tJsonObjectReader graphItemReader;\n\t\twhile ((graphItemReader = graphItems.next()) != null) {\n\t\t\tGraphItemData gi = new GraphItemData();\n\t\t\twhile (graphItemReader.nextValueToken()) {\n\t\t\t\tString propName = graphItemReader.getCurrentName();\n\t\t\t\tif (propName.equals(\"gitemid\")) {\n\t\t\t\t\tgi.set(GraphItemData.COLUMN_GRAPHITEMID, Long.parseLong(graphItemReader.getText()));\n\t\t\t\t} else if (propName.equals(GraphItemData.COLUMN_GRAPHID)) {\n\t\t\t\t\tgi.set(GraphItemData.COLUMN_GRAPHID, Long.parseLong(graphItemReader.getText()));\n\t\t\t\t} else if (propName.equals(GraphItemData.COLUMN_ITEMID)) {\n\t\t\t\t\tgi.set(GraphItemData.COLUMN_ITEMID, Long.parseLong(graphItemReader.getText()));\n\t\t\t\t} else if (propName.equals(GraphItemData.COLUMN_COLOR)) {\n\t\t\t\t\t// hex string => color int\n\t\t\t\t\tgi.set(GraphItemData.COLUMN_COLOR, Color.parseColor(\"#\"+graphItemReader.getText()));\n\t\t\t\t} else {\n\t\t\t\t\tgraphItemReader.nextProperty();\n\t\t\t\t}\n\t\t\t}\n\t\t\t// if graphid-column was not set, this must be done later. temporary graphid=-1\n\t\t\tif (gi.get(GraphItemData.COLUMN_GRAPHID) == null) {\n\t\t\t\tgi.set(GraphItemData.COLUMN_GRAPHID, -1);\n\t\t\t\tmustSetGraphid = true;\n\t\t\t}\n\t\t\tgi.insert(zabbixLocalDB);\n\t\t}\n\t\treturn mustSetGraphid;\n\t}\n\n\tpublic void importGraphsForScreen(long screenid) throws ClientProtocolException, IOException, JSONException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\tif (!isCached(GraphData.TABLE_NAME, \"screenid=\"+screenid)) {\n\t\t\t_startTransaction();\n\n\t\t\t// collect all graphids\n\t\t\tSet<Long> graphids = new HashSet<Long>();\n\t\t\tCursor cur = zabbixLocalDB.query(ScreenItemData.TABLE_NAME, null, ScreenItemData.COLUMN_SCREENID+\"=\"+screenid, null, null, null, null);\n\t\t\twhile (cur.moveToNext()) {\n\t\t\t\tgraphids.add(cur.getLong(cur.getColumnIndex(ScreenItemData.COLUMN_RESOURCEID)));\n\t\t\t}\n\n\t\t\t// delete old graphs\n\t\t\tString str_graphids = graphids.toString().replace(\"[\", \"\").replace(\"]\", \"\");\n\t\t\tif (str_graphids.length()>0) {\n\t\t\t\tzabbixLocalDB.delete(GraphData.TABLE_NAME, GraphData.COLUMN_GRAPHID+\" IN (\"+str_graphids+\")\", null);\n\t\t\t\tzabbixLocalDB.delete(GraphItemData.TABLE_NAME, GraphItemData.COLUMN_GRAPHID+\" IN (\"+str_graphids+\")\", null);\n\t\t\t}\n\t\t\tzabbixLocalDB.delete(CacheData.TABLE_NAME, CacheData.COLUMN_KIND+\"='\"+GraphData.TABLE_NAME+\"' AND \"+CacheData.COLUMN_FILTER+\"='screenid=\"+screenid+'\\'', null);\n\n\t\t\tJsonArrayOrObjectReader graphs = _queryStream(\n\t\t\t\t\t\"graph.get\"\n\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t\t.put(isVersion2?\"selectGraphItems\":\"select_graph_items\", \"extend\")\n\t\t\t\t\t\t.put(isVersion2?\"selectItems\":\"select_items\", \"extend\")\n\t\t\t\t\t\t.put(\"output\", \"extend\")\n\t\t\t\t\t\t.put(\"graphids\", new JSONArray(graphids))\n\t\t\t);\n\t\t\tJsonObjectReader graphReader;\n\t\t\twhile ((graphReader = graphs.next()) != null) {\n\t\t\t\tboolean mustSetGraphid = false;\n\t\t\t\tGraphData scr = new GraphData();\n\t\t\t\twhile (graphReader.nextValueToken()) {\n\t\t\t\t\tString propName = graphReader.getCurrentName();\n\t\t\t\t\tif (propName.equals(GraphData.COLUMN_GRAPHID)) {\n\t\t\t\t\t\tscr.set(GraphData.COLUMN_GRAPHID, Long.parseLong(graphReader.getText()));\n\t\t\t\t\t} else if (propName.equals(GraphData.COLUMN_NAME)) {\n\t\t\t\t\t\tscr.set(GraphData.COLUMN_NAME, graphReader.getText());\n\t\t\t\t\t} else if (propName.equals(\"gitems\")) {\n\t\t\t\t\t\tmustSetGraphid = importGraphItems(graphReader.getJsonArrayOrObjectReader());\n\t\t\t\t\t} else if (propName.equals(\"items\")) {\n\t\t\t\t\t\timportItems(graphReader.getJsonArrayOrObjectReader(), 0, true);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tgraphReader.nextProperty();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tscr.insert(zabbixLocalDB);\n\t\t\t\tif (mustSetGraphid) {\n\t\t\t\t\tContentValues values = new ContentValues(1);\n\t\t\t\t\tvalues.put(GraphItemData.COLUMN_GRAPHID, (Long) scr.get(GraphData.COLUMN_GRAPHID));\n\t\t\t\t\tzabbixLocalDB.update(\n\t\t\t\t\t\t\tGraphItemData.TABLE_NAME\n\t\t\t\t\t\t\t, values\n\t\t\t\t\t\t\t, GraphItemData.COLUMN_GRAPHID+\"=-1\"\n\t\t\t\t\t\t\t, null);\n\t\t\t\t}\n\t\t\t}\n\t\t\tgraphs.close();\n\n\t\t\tsetCached(GraphData.TABLE_NAME, \"screenid=\"+screenid, ZabbixConfig.CACHE_LIFETIME_SCREENS);\n\t\t\t_endTransaction();\n\t\t}\n\t}\n\n\tpublic void importHistoryDetails(String itemid) throws ClientProtocolException, IOException, JSONException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\tif (!isCached(HistoryDetailData.TABLE_NAME, itemid)) {\n\t\t\t_startTransaction();\n\t\t\tzabbixLocalDB.delete(HistoryDetailData.TABLE_NAME, HistoryDetailData.COLUMN_ITEMID+\"=\"+itemid, null);\n\n\t\t\t// the past 2 hours\n\t\t\tlong time_till = new Date().getTime() / 1000;\n\t\t\tlong time_from = time_till - ZabbixConfig.HISTORY_GET_TIME_FROM_SHIFT;\n\n\t\t\t// Workaround: historydetails only comes if you use the correct \"history\"-parameter.\n\t\t\t// this parameter can be \"null\" or a number 0-4. Because we don't know when to use which,\n\t\t\t// we try them all, until we get results.\n\t\t\tInteger historytype = null;\n\t\t\tJSONObject result = _queryBuffer(\n\t\t\t\t\t\"history.get\"\n\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t\t.put(\"limit\", 1)\n\t\t\t\t\t\t.put(\"history\", historytype) // for integer ?\n\t\t\t\t\t\t.put(\"itemids\", new JSONArray().put(itemid))\n\t\t\t\t\t\t.put(\"time_from\", time_from)\n\t\t\t);\n\n\t\t\tJSONArray testHistorydetails = result.getJSONArray(\"result\");\n\t\t\tif (testHistorydetails.length() == 0) {\n\t\t\t\thistorytype = -1;\n\t\t\t\twhile (testHistorydetails.length() == 0 && ++historytype <= 4) {\n\t\t\t\t\t// if we get an empty array, we try another history parameter\n\t\t\t\t\tresult = _queryBuffer(\n\t\t\t\t\t\t\t\"history.get\"\n\t\t\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t\t\t\t.put(\"output\", \"extend\")\n\t\t\t\t\t\t\t\t.put(\"limit\", 1)\n\t\t\t\t\t\t\t\t.put(\"history\", historytype)\n\t\t\t\t\t\t\t\t.put(\"itemids\", new JSONArray().put(itemid))\n\t\t\t\t\t\t\t\t.put(\"time_from\", time_from)\n\t\t\t\t\t);\n\t\t\t\t\ttestHistorydetails = result.getJSONArray(\"result\");\n\t\t\t\t}\n\t\t\t}\n\t\t\t// correct historytype found and there are data\n\t\t\tif (testHistorydetails.length() > 0) {\n\t\t\t\t// count of the entries cannot be detected (zabbix bug),\n\t\t\t\t// so we use a fiction\n\t\t\t\tint numDetails = 400;\n\t\t\t\tint curI=0;\n\t\t\t\tJsonArrayOrObjectReader historydetails = _queryStream(\n\t\t\t\t\t\t\"history.get\"\n\t\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t\t\t.put(\"output\", \"extend\")\n\t\t\t\t\t\t\t.put(\"limit\", ZabbixConfig.HISTORY_GET_LIMIT)\n\t\t\t\t\t\t\t.put(\"history\", historytype)\n\t\t\t\t\t\t\t.put(\"itemids\", new JSONArray().put(itemid))\n\t\t\t\t\t\t\t.put(\"time_from\", time_from)\n\t\t\t\t\t\t\t.put(\"sortfield\", \"clock\")\n\t\t\t\t\t\t\t.put(\"sortorder\", \"DESC\")\n\t\t\t\t);\n\t\t\t\tJsonObjectReader historydetail;\n\t\t\t\ttry {\n\t\t\t\t\tint selI = 0;\n\t\t\t\t\twhile ((historydetail = historydetails.next()) != null) {\n\t\t\t\t\t\t// save only every 20th\n\t\t\t\t\t\tif (selI++ % 20 != 0) {\n\t\t\t\t\t\t\twhile (historydetail.nextValueToken()) {\n\t\t\t\t\t\t\t\thistorydetail.nextProperty();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tHistoryDetailData h = new HistoryDetailData();\n\t\t\t\t\t\twhile (historydetail.nextValueToken()) {\n\t\t\t\t\t\t\tString propName = historydetail.getCurrentName();\n\t\t\t\t\t\t\tif (propName.equals(HistoryDetailData.COLUMN_CLOCK)) {\n\t\t\t\t\t\t\t\th.set(HistoryDetailData.COLUMN_CLOCK, Integer.parseInt(historydetail.getText()));\n\t\t\t\t\t\t\t} else if (propName.equals(HistoryDetailData.COLUMN_ITEMID)) {\n\t\t\t\t\t\t\t\th.set(HistoryDetailData.COLUMN_ITEMID, Long.parseLong(historydetail.getText()));\n\t\t\t\t\t\t\t} else if (propName.equals(HistoryDetailData.COLUMN_VALUE)) {\n\t\t\t\t\t\t\t\th.set(HistoryDetailData.COLUMN_VALUE, Double.parseDouble(historydetail.getText()));\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\thistorydetail.nextProperty();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\th.insert(zabbixLocalDB);\n\t\t\t\t\t\tif (++curI % 10 == 0) {\n\t\t\t\t\t\t\tshowProgress(Math.min(curI*100/numDetails, 84));\n\t\t\t\t\t\t}\n\t\t\t\t\t\t_commitTransactionIfRecommended();\n\t\t\t\t\t}\n\t\t\t\t} catch (NumberFormatException e) {\n\t\t\t\t\t// data are unuseable, e.g. because it's a string\n\t\t\t\t}\n\t\t\t\thistorydetails.close();\n\t\t\t}\n\t\t\tsetCached(HistoryDetailData.TABLE_NAME, itemid, ZabbixConfig.CACHE_LIFETIME_HISTORY_DETAILS);\n\t\t\t_endTransaction();\n\t\t}\n\t}\n\n\tprivate long importHostGroups(JsonArrayOrObjectReader jsonArray) throws JsonParseException, IOException {\n\t\tlong firstHostGroupId = -1;\n\t\tJsonObjectReader hostReader;\n\t\twhile ((hostReader = jsonArray.next()) != null) {\n\t\t\tHostGroupData h = new HostGroupData();\n\t\t\twhile (hostReader.nextValueToken()) {\n\t\t\t\tString propName = hostReader.getCurrentName();\n\t\t\t\tif (propName.equals(HostGroupData.COLUMN_GROUPID)) {\n\t\t\t\t\tlong id = Long.parseLong(hostReader.getText());\n\t\t\t\t\tif (firstHostGroupId == -1) firstHostGroupId = id;\n\t\t\t\t\th.set(HostGroupData.COLUMN_GROUPID, id);\n\t\t\t\t} else if (propName.equals(HostGroupData.COLUMN_NAME)) {\n\t\t\t\t\th.set(HostGroupData.COLUMN_NAME, hostReader.getText());\n\t\t\t\t} else {\n\t\t\t\t\thostReader.nextProperty();\n\t\t\t\t}\n\t\t\t}\n\t\t\th.insert(zabbixLocalDB, HostGroupData.COLUMN_GROUPID);\n\t\t\t_commitTransactionIfRecommended();\n\t\t}\n\n\t\treturn firstHostGroupId;\n\t}\n\n\t/**\n\t * import the hosts from stream\n\t * @param jsonArray stream\n\t * @param numHosts count of hosts for progressbar. null if unknown.\n\t * @return Object[] {(String) comma-separated all Hostnames, (Long) 1. host id}\n\t * @throws JsonParseException\n\t * @throws IOException\n\t */\n\tprivate Object[] importHosts(JsonArrayOrObjectReader jsonArray, Integer numHosts) throws JsonParseException, IOException {\n\t\tList<String> hostnames = new ArrayList<String>();\n\t\tlong firstHostId = -1;\n\t\tJsonObjectReader hostReader;\n\t\tint i=0;\n\t\twhile ((hostReader = jsonArray.next()) != null) {\n\t\t\tHostData h = new HostData();\n\t\t\twhile (hostReader.nextValueToken()) {\n\t\t\t\tString propName = hostReader.getCurrentName();\n\t\t\t\tif (propName.equals(HostData.COLUMN_HOSTID)) {\n\t\t\t\t\th.set(HostData.COLUMN_HOSTID, Long.parseLong(hostReader.getText()));\n\t\t\t\t\tif (firstHostId == -1) {\n\t\t\t\t\t\tfirstHostId = (Long) h.get(HostData.COLUMN_HOSTID);\n\t\t\t\t\t}\n\t\t\t\t} else if (propName.equals(HostData.COLUMN_HOST)) {\n\t\t\t\t\tString host = hostReader.getText();\n\t\t\t\t\thostnames.add(host);\n\t\t\t\t\th.set(HostData.COLUMN_HOST, host);\n\t\t\t\t} else if (propName.equals(\"groups\")) {\n\t\t\t\t\tlong groupid = importHostGroups(hostReader.getJsonArrayOrObjectReader());\n\t\t\t\t\tif (groupid != -1) {\n\t\t\t\t\t\th.set(HostData.COLUMN_GROUPID, groupid);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\thostReader.nextProperty();\n\t\t\t\t}\n\t\t\t}\n\t\t\t// host without group will get group #0 (other)\n\t\t\tif (h.get(HostData.COLUMN_GROUPID) == null) {\n\t\t\t\th.set(HostData.COLUMN_GROUPID, 0);\n\t\t\t\t// create \"other\" hostgroup #1\n\t\t\t\tHostGroupData hg = new HostGroupData();\n\t\t\t\thg.set(HostGroupData.COLUMN_GROUPID, 0);\n\t\t\t\thg.set(HostGroupData.COLUMN_NAME, \"- \"+context.getResources().getString(R.string.other)+\" -\");\n\t\t\t\thg.insert(zabbixLocalDB, HostGroupData.COLUMN_GROUPID);\n\t\t\t}\n\t\t\th.insert(zabbixLocalDB, HostData.COLUMN_HOSTID);\n\t\t\tif (numHosts != null && ++i % 10 == 0) {\n\t\t\t\tshowProgress(i*100/numHosts);\n\t\t\t}\n\t\t\t_commitTransactionIfRecommended();\n\t\t}\n\n\t\treturn new Object[] {hostnames.toString().replaceAll(\"[\\\\[\\\\]]\", \"\"), firstHostId};\n\t}\n\n\tpublic void importHostsAndGroups() throws JSONException, IOException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\tif (!isCached(HostData.TABLE_NAME, null)) {\n\t\t\t_startTransaction();\n\t\t\tzabbixLocalDB.delete(HostData.TABLE_NAME, null, null);\n\t\t\tzabbixLocalDB.delete(HostGroupData.TABLE_NAME, null, null);\n\n\t\t\t// get count of hosts\n\t\t\tJSONObject result = _queryBuffer(\n\t\t\t\t\t\"host.get\"\n\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t\t.put(\"countOutput\", 1)\n\t\t\t\t\t\t.put(\"limit\", ZabbixConfig.HOST_GET_LIMIT)\n\t\t\t\t\t\t.put(isVersion2?\"selectGroups\":\"select_groups\", \"extend\")\n\t\t\t);\n\t\t\tint numHosts = result.getInt(\"result\");\n\t\t\tJsonArrayOrObjectReader hosts = _queryStream(\n\t\t\t\t\t\"host.get\"\n\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t\t.put(\"output\", \"extend\")\n\t\t\t\t\t\t.put(\"limit\", ZabbixConfig.HOST_GET_LIMIT)\n\t\t\t\t\t\t.put(isVersion2?\"selectGroups\":\"select_groups\", \"extend\")\n\t\t\t);\n\t\t\timportHosts(hosts, numHosts);\n\t\t\thosts.close();\n\n\t\t\tsetCached(HostData.TABLE_NAME, null, ZabbixConfig.CACHE_LIFETIME_HOSTS);\n\t\t\t_endTransaction();\n\t\t}\n\t}\n\n\t/**\n\t * import items from stream.\n\t * @param items stream\n\t * @param numItems count for progressbar, if 0 no progressbarupdate\n\t * @param checkBeforeInsert if true, only make an insert if item does not exist\n\t * @return the first item id\n\t * @throws JsonParseException\n\t * @throws IOException\n\t */\n\tprivate long importItems(JsonArrayOrObjectReader items, int numItems, boolean checkBeforeInsert) throws JsonParseException, IOException {\n\t\tlong firstItemId = -1;\n\t\tint curI=0;\n\t\tJsonObjectReader itemReader;\n\t\twhile ((itemReader = items.next()) != null) {\n\t\t\tItemData i = new ItemData();\n\t\t\tString key_ = null;\n\t\t\twhile (itemReader.nextValueToken()) {\n\t\t\t\tString propName = itemReader.getCurrentName();\n\t\t\t\tif (propName.equals(ItemData.COLUMN_ITEMID)) {\n\t\t\t\t\ti.set(ItemData.COLUMN_ITEMID, Long.parseLong(itemReader.getText()));\n\t\t\t\t\tif (firstItemId == -1) {\n\t\t\t\t\t\tfirstItemId = (Long) i.get(ItemData.COLUMN_ITEMID);\n\t\t\t\t\t}\n\t\t\t\t} else if (propName.equals(ItemData.COLUMN_HOSTID)) {\n\t\t\t\t\ti.set(ItemData.COLUMN_HOSTID, Long.parseLong(itemReader.getText()));\n\t\t\t\t} else if (propName.equals(ItemData.COLUMN_DESCRIPTION) || propName.equals(\"name\")) {\n\t\t\t\t\t// since zabbix 2.x is the name of the item \"name\"\n\t\t\t\t\t// before zabbix 2.x the name field was \"description\"\n\t\t\t\t\tif (isVersion2 && propName.equals(\"name\")) {\n\t\t\t\t\t\ti.set(ItemData.COLUMN_DESCRIPTION, itemReader.getText());\n\t\t\t\t\t} else if (!isVersion2) {\n\t\t\t\t\t\ti.set(ItemData.COLUMN_DESCRIPTION, itemReader.getText());\n\t\t\t\t\t}\n\t\t\t\t} else if (propName.equals(ItemData.COLUMN_LASTCLOCK)) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\ti.set(ItemData.COLUMN_LASTCLOCK, Integer.parseInt(itemReader.getText()));\n\t\t\t\t\t} catch (NumberFormatException e) {\n\t\t\t\t\t\t// ignore\n\t\t\t\t\t}\n\t\t\t\t} else if (propName.equals(ItemData.COLUMN_LASTVALUE)) {\n\t\t\t\t\ti.set(ItemData.COLUMN_LASTVALUE, itemReader.getText());\n\t\t\t\t} else if (propName.equals(ItemData.COLUMN_UNITS)) {\n\t\t\t\t\ti.set(ItemData.COLUMN_UNITS, itemReader.getText());\n\t\t\t\t} else if (propName.equals(\"key_\")) {\n\t\t\t\t\tkey_ = itemReader.getText();\n\t\t\t\t} else if (propName.equals(\"applications\")) {\n\t\t\t\t\t// at this point itemid and hostid is unknown\n\t\t\t\t\t// because of this, all applicationrelations will be saved with itemid and hostid \"-1\".\n\t\t\t\t\t// later the IDs will be replaced with the correct\n\t\t\t\t\timportApplications(-1, -1, itemReader.getJsonArrayOrObjectReader());\n\t\t\t\t} else {\n\t\t\t\t\titemReader.nextProperty();\n\t\t\t\t}\n\t\t\t}\n\t\t\t// if applicable replace placeholder\n\t\t\tString description = (String) i.get(ItemData.COLUMN_DESCRIPTION);\n\t\t\tif (description.matches(\".*\\\\$[0-9].*\")) {\n\t\t\t\tif (key_ != null && key_.indexOf('[') != -1) {\n\t\t\t\t\tString[] keys = key_.substring(key_.indexOf('[')+1, key_.indexOf(']')).split(\",\");\n\t\t\t\t\tfor (int ix=0; ix<keys.length; ix++) {\n\t\t\t\t\t\tdescription = description.replace(\"$\"+(ix+1), keys[ix]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\ti.set(ItemData.COLUMN_DESCRIPTION, description);\n\t\t\tif (checkBeforeInsert) {\n\t\t\t\ti.insert(zabbixLocalDB, ItemData.COLUMN_ITEMID);\n\t\t\t} else {\n\t\t\t\ti.insert(zabbixLocalDB);\n\t\t\t}\n\t\t\tif (numItems > 0 && ++curI % 10 == 0) {\n\t\t\t\tshowProgress(curI*100/numItems);\n\t\t\t}\n\n\t\t\t// now the \"-1\" IDs of applicationsrelation will be replaced with the correct itemID\n\t\t\tContentValues values = new ContentValues(2);\n\t\t\tvalues.put(ApplicationItemRelationData.COLUMN_ITEMID, (Long) i.get(ItemData.COLUMN_ITEMID));\n\t\t\tvalues.put(ApplicationItemRelationData.COLUMN_HOSTID, (Long) i.get(ItemData.COLUMN_HOSTID));\n\t\t\tzabbixLocalDB.update(\n\t\t\t\t\tApplicationItemRelationData.TABLE_NAME\n\t\t\t\t\t, values\n\t\t\t\t\t, ApplicationItemRelationData.COLUMN_ITEMID+\"=-1\"\n\t\t\t\t\t, null\n\t\t\t);\n\t\t}\n\t\treturn firstItemId;\n\t}\n\n\tpublic void importItems(long hostid) throws JSONException, IOException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\tif (!isCached(ItemData.TABLE_NAME, \"hostid=\"+hostid)) {\n\t\t\t_startTransaction();\n\t\t\tzabbixLocalDB.delete(ItemData.TABLE_NAME, ItemData.COLUMN_HOSTID+\"=\"+hostid, null);\n\t\t\tzabbixLocalDB.delete(ApplicationItemRelationData.TABLE_NAME, ApplicationItemRelationData.COLUMN_HOSTID+\"=\"+hostid, null);\n\n\t\t\t// count of items\n\t\t\tJSONObject result = _queryBuffer(\n\t\t\t\t\t\"item.get\"\n\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t.put(\"output\", \"extend\")\n\t\t\t\t\t.put(\"countOutput\", 1)\n\t\t\t\t\t.put(\"limit\", ZabbixConfig.ITEM_GET_LIMIT)\n\t\t\t\t\t.put(\"hostids\", new JSONArray().put(hostid))\n\t\t\t);\n\t\t\tint numItems = result.getInt(\"result\");\n\t\t\tJsonArrayOrObjectReader items = _queryStream(\n\t\t\t\t\t\"item.get\"\n\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t\t.put(\"output\", \"extend\")\n\t\t\t\t\t\t.put(\"limit\", ZabbixConfig.ITEM_GET_LIMIT)\n\t\t\t\t\t\t.put(isVersion2?\"selectApplications\":\"select_applications\", \"extend\")\n\t\t\t\t\t\t.put(\"hostids\", new JSONArray().put(hostid))\n\t\t\t);\n\t\t\timportItems(items, numItems, false);\n\t\t\titems.close();\n\n\t\t\tsetCached(ItemData.TABLE_NAME, \"hostid=\"+hostid, ZabbixConfig.CACHE_LIFETIME_ITEMS);\n\t\t\t_endTransaction();\n\t\t}\n\t}\n\n\tprivate void importScreenItems(JsonArrayOrObjectReader screenItems) throws JsonParseException, NumberFormatException, IOException {\n\t\tJsonObjectReader screenItemReader;\n\t\twhile ((screenItemReader = screenItems.next()) != null) {\n\t\t\tScreenItemData si = new ScreenItemData();\n\t\t\tint resourcetype = -1;\n\t\t\twhile (screenItemReader.nextValueToken()) {\n\t\t\t\tString propName = screenItemReader.getCurrentName();\n\t\t\t\tif (propName.equals(ScreenItemData.COLUMN_SCREENITEMID)) {\n\t\t\t\t\tsi.set(ScreenItemData.COLUMN_SCREENITEMID, Long.parseLong(screenItemReader.getText()));\n\t\t\t\t} else if (propName.equals(ScreenItemData.COLUMN_SCREENID)) {\n\t\t\t\t\tsi.set(ScreenItemData.COLUMN_SCREENID, Long.parseLong(screenItemReader.getText()));\n\t\t\t\t} else if (propName.equals(ScreenItemData.COLUMN_RESOURCEID)) {\n\t\t\t\t\tsi.set(ScreenItemData.COLUMN_RESOURCEID, Long.parseLong(screenItemReader.getText()));\n\t\t\t\t} else if (propName.equals(\"resourcetype\")) {\n\t\t\t\t\tresourcetype = Integer.parseInt(screenItemReader.getText());\n\t\t\t\t} else {\n\t\t\t\t\tscreenItemReader.nextProperty();\n\t\t\t\t}\n\t\t\t}\n\t\t\t// only resouretype == 0\n\t\t\tif (resourcetype == 0) {\n\t\t\t\tsi.insert(zabbixLocalDB);\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic void importScreens() throws ClientProtocolException, IOException, JSONException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\tif (!isCached(ScreenData.TABLE_NAME, null)) {\n\t\t\t_startTransaction();\n\n\t\t\tzabbixLocalDB.delete(ScreenData.TABLE_NAME, null, null);\n\t\t\tzabbixLocalDB.delete(ScreenItemData.TABLE_NAME, null, null);\n\t\t\tzabbixLocalDB.delete(CacheData.TABLE_NAME, CacheData.COLUMN_KIND+\"='\"+ScreenData.TABLE_NAME+\"'\", null);\n\n\t\t\tJsonArrayOrObjectReader screens = _queryStream(\n\t\t\t\t\t(isVersion2?\"s\":\"S\")+\"creen.get\"\n\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t\t.put(\"output\", \"extend\")\n\t\t\t\t\t\t.put(isVersion2?\"selectScreenItems\":\"select_screenitems\", \"extend\")\n\t\t\t);\n\t\t\tJsonObjectReader screenReader;\n\t\t\twhile ((screenReader = screens.next()) != null) {\n\t\t\t\tScreenData scr = new ScreenData();\n\t\t\t\twhile (screenReader.nextValueToken()) {\n\t\t\t\t\tString propName = screenReader.getCurrentName();\n\t\t\t\t\tif (propName.equals(ScreenData.COLUMN_SCREENID)) {\n\t\t\t\t\t\tscr.set(ScreenData.COLUMN_SCREENID, Long.parseLong(screenReader.getText()));\n\t\t\t\t\t} else if (propName.equals(ScreenData.COLUMN_NAME)) {\n\t\t\t\t\t\tscr.set(ScreenData.COLUMN_NAME, screenReader.getText());\n\t\t\t\t\t} else if (propName.equals(\"screenitems\")) {\n\t\t\t\t\t\timportScreenItems(screenReader.getJsonArrayOrObjectReader());\n\t\t\t\t\t} else {\n\t\t\t\t\t\tscreenReader.nextProperty();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tscr.insert(zabbixLocalDB);\n\t\t\t}\n\t\t\tscreens.close();\n\n\t\t\tsetCached(ScreenData.TABLE_NAME, null, ZabbixConfig.CACHE_LIFETIME_SCREENS);\n\t\t\t_endTransaction();\n\t\t}\n\t}\n\n\tpublic void importTrigger(String triggerid) throws JSONException, IOException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\tif (!isCached(TriggerData.TABLE_NAME, \"triggerid=\"+triggerid)) {\n\t\t\t_startTransaction();\n\n\t\t\tJsonArrayOrObjectReader trigger = _queryStream(\n\t\t\t\t\t\"trigger.get\"\n\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t\t.put(\"output\", \"extend\")\n\t\t\t\t\t\t.put(isVersion2?\"selectHosts\":\"select_hosts\", \"extend\")\n\t\t\t\t\t\t.put(\"triggerids\", new JSONArray().put(triggerid))\n\t\t\t);\n\t\t\timportTriggers(trigger);\n\t\t\ttrigger.close();\n\n\t\t\tsetCached(TriggerData.TABLE_NAME, \"triggerid=\"+triggerid, ZabbixConfig.CACHE_LIFETIME_TRIGGERS);\n\t\t\t_endTransaction();\n\t\t}\n\t}\n\n\t/**\n\t * importiert ein trigger mit dem attribute itemid. ggf. wird der trigger zuerst gelöscht und neu angelegt.\n\t * imports a trigger with the attribute itemid. if trigger already exists, it will be removed first.\n\t * @param triggerid\n\t * @throws JSONException\n\t * @throws IOException\n\t * @throws HttpAuthorizationRequiredException\n\t * @throws NoAPIAccessException\n\t */\n\tpublic void importTriggerColumnItemId(String triggerid) throws JSONException, IOException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\t// check if the trigger exists and if the itemid was set\n\t\tboolean mustImport = true;\n\t\tCursor cur = zabbixLocalDB.query(TriggerData.TABLE_NAME, null, TriggerData.COLUMN_TRIGGERID+\"=\"+triggerid, null, null, null, null);\n\t\tif (cur.moveToFirst()) {\n\t\t\tlong itemid = 0;\n\t\t\ttry {\n\t\t\t\titemid = cur.getLong(cur.getColumnIndex(TriggerData.COLUMN_ITEMID));\n\t\t\t} catch (Exception e) {\n\t\t\t\t// no itemid\n\t\t\t}\n\t\t\tif (itemid > 0) {\n\t\t\t\tmustImport = false;\n\t\t\t}\n\t\t}\n\t\tif (mustImport) {\n\t\t\t_startTransaction();\n\t\t\tzabbixLocalDB.delete(TriggerData.TABLE_NAME, TriggerData.COLUMN_TRIGGERID+\"=\"+triggerid, null);\n\t\t\tJsonArrayOrObjectReader triggers = _queryStream(\n\t\t\t\t\t\"trigger.get\"\n\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t\t.put(\"output\", \"extend\")\n\t\t\t\t\t\t.put(isVersion2?\"selectHosts\":\"select_hosts\", \"extend\")\n\t\t\t\t\t\t.put(isVersion2?\"selectGroups\":\"select_groups\", \"extend\")\n\t\t\t\t\t\t.put(isVersion2?\"selectItems\":\"select_items\", \"extend\")\n\t\t\t\t\t\t.put(\"triggerids\", new JSONArray().put(triggerid))\n\t\t\t\t\t\t.put(\"limit\", 1)\n\t\t\t);\n\t\t\timportTriggers(triggers);\n\t\t\t_endTransaction();\n\t\t}\n\t}\n\n\t/**\n\t * imports the \"warning\"-triggers\n\t * @throws JSONException\n\t * @throws IOException\n\t * @throws HttpAuthorizationRequiredException\n\t * @throws NoAPIAccessException\n\t */\n\tpublic void importTriggers() throws JSONException, IOException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\tif (!isCached(TriggerData.TABLE_NAME, null)) {\n\t\t\t// clear triggers\n\t\t\tzabbixLocalDB.delete(TriggerData.TABLE_NAME, null, null);\n\n\t\t\t_startTransaction();\n\n\t\t\tlong min = (new Date().getTime()/1000)-ZabbixConfig.STATUS_SHOW_TRIGGER_TIME;\n\t\t\tJsonArrayOrObjectReader triggers = _queryStream(\n\t\t\t\t\t\"trigger.get\"\n\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t\t.put(\"output\", \"extend\")\n\t\t\t\t\t\t.put(\"sortfield\", \"lastchange\")\n\t\t\t\t\t\t.put(\"sortorder\", \"desc\")\n\t\t\t\t\t\t.put(isVersion2?\"selectHosts\":\"select_hosts\", \"extend\")\n\t\t\t\t\t\t.put(isVersion2?\"selectGroups\":\"select_groups\", \"extend\")\n\t\t\t\t\t\t.put(isVersion2?\"selectItems\":\"select_items\", \"extend\")\n\t\t\t\t\t\t.put(\"lastChangeSince\", min)\n\t\t\t\t\t\t.put(\"only_true\", \"1\")\n\t\t\t\t\t\t.put(\"limit\", ZabbixConfig.TRIGGER_GET_LIMIT)\n\t\t\t\t\t\t.put(\"expandDescription\", true)\n\t\t\t);\n\t\t\timportTriggers(triggers);\n\t\t\ttriggers.close();\n\n\t\t\tsetCached(TriggerData.TABLE_NAME, null, ZabbixConfig.CACHE_LIFETIME_TRIGGERS);\n\t\t\t_endTransaction();\n\t\t}\n\t}\n\n\tprivate void importTriggers(JsonArrayOrObjectReader jsonArray) throws JsonParseException, IOException {\n\t\tJsonObjectReader triggerReader;\n\t\twhile ((triggerReader = jsonArray.next()) != null) {\n\t\t\tTriggerData t = new TriggerData();\n\t\t\twhile (triggerReader.nextValueToken()) {\n\t\t\t\tString propName = triggerReader.getCurrentName();\n\t\t\t\tif (propName.equals(TriggerData.COLUMN_TRIGGERID)) {\n\t\t\t\t\tt.set(TriggerData.COLUMN_TRIGGERID, Long.parseLong(triggerReader.getText()));\n\t\t\t\t} else if (propName.equals(TriggerData.COLUMN_COMMENTS)) {\n\t\t\t\t\tt.set(TriggerData.COLUMN_COMMENTS, triggerReader.getText());\n\t\t\t\t} else if (propName.equals(TriggerData.COLUMN_DESCRIPTION)) {\n\t\t\t\t\tt.set(TriggerData.COLUMN_DESCRIPTION, triggerReader.getText());\n\t\t\t\t} else if (propName.equals(TriggerData.COLUMN_EXPRESSION)) {\n\t\t\t\t\tt.set(TriggerData.COLUMN_EXPRESSION, triggerReader.getText());\n\t\t\t\t} else if (propName.equals(TriggerData.COLUMN_LASTCHANGE)) {\n\t\t\t\t\tt.set(TriggerData.COLUMN_LASTCHANGE, Integer.parseInt(triggerReader.getText()));\n\t\t\t\t} else if (propName.equals(TriggerData.COLUMN_PRIORITY)) {\n\t\t\t\t\tt.set(TriggerData.COLUMN_PRIORITY, Integer.parseInt(triggerReader.getText()));\n\t\t\t\t} else if (propName.equals(TriggerData.COLUMN_STATUS)) {\n\t\t\t\t\tt.set(TriggerData.COLUMN_STATUS, Integer.parseInt(triggerReader.getText()));\n\t\t\t\t} else if (propName.equals(TriggerData.COLUMN_VALUE)) {\n\t\t\t\t\tt.set(TriggerData.COLUMN_VALUE, Integer.parseInt(triggerReader.getText()));\n\t\t\t\t} else if (propName.equals(TriggerData.COLUMN_URL)) {\n\t\t\t\t\tt.set(TriggerData.COLUMN_URL, triggerReader.getText());\n\t\t\t\t} else if (propName.equals(\"hosts\")) {\n\t\t\t\t\tObject[] hostsCache = importHosts(triggerReader.getJsonArrayOrObjectReader(), null);\n\t\t\t\t\tt.set(TriggerData.COLUMN_HOSTS, hostsCache[0]);\n\t\t\t\t\tt.set(TriggerData.COLUMN_HOSTID, hostsCache[1]);\n\t\t\t\t} else if (propName.equals(\"groups\")) {\n\t\t\t\t\timportHostGroups(triggerReader.getJsonArrayOrObjectReader());\n\t\t\t\t} else if (propName.equals(\"items\")) {\n\t\t\t\t\t// store the first item id\n\t\t\t\t\tt.set(TriggerData.COLUMN_ITEMID, importItems(triggerReader.getJsonArrayOrObjectReader(), 1, true));\n\t\t\t\t} else {\n\t\t\t\t\ttriggerReader.nextProperty();\n\t\t\t\t}\n\t\t\t}\n\t\t\tt.insert(zabbixLocalDB, TriggerData.COLUMN_TRIGGERID);\n\t\t\t_commitTransactionIfRecommended();\n\t\t}\n\t}\n\n\tpublic void importTriggersByItemId(String itemid) throws JSONException, IOException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\tif (!isCached(TriggerData.TABLE_NAME, \"itemid=\"+itemid)) {\n\t\t\t_startTransaction();\n\t\t\tzabbixLocalDB.delete(TriggerData.TABLE_NAME, TriggerData.COLUMN_ITEMID+\"=\"+itemid, null);\n\t\t\tJsonArrayOrObjectReader triggers = _queryStream(\n\t\t\t\t\t\"trigger.get\"\n\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t\t.put(\"output\", \"extend\")\n\t\t\t\t\t\t.put(isVersion2?\"selectHosts\":\"select_hosts\", \"extend\")\n\t\t\t\t\t\t.put(isVersion2?\"selectGroups\":\"select_groups\", \"extend\")\n\t\t\t\t\t\t.put(isVersion2?\"selectItems\":\"select_items\", \"extend\")\n\t\t\t\t\t\t.put(\"itemids\", new JSONArray().put(itemid))\n\t\t\t\t\t\t.put(\"limit\", 1)\n\t\t\t\t\t\t.put(\"sortfield\", \"lastchange\")\n\t\t\t\t\t\t.put(\"sortorder\", \"DESC\")\n\t\t\t);\n\t\t\timportTriggers(triggers);\n\t\t\tsetCached(TriggerData.TABLE_NAME, \"itemid=\"+itemid, ZabbixConfig.CACHE_LIFETIME_TRIGGERS);\n\t\t\t_endTransaction();\n\t\t}\n\t}\n\n\tpublic boolean isCached(String kind, String filter) {\n\t\tSQLiteQueryBuilder sqlBuilder = new SQLiteQueryBuilder();\n\t\tsqlBuilder.setTables(CacheData.TABLE_NAME);\n\t\tsqlBuilder.appendWhere(CacheData.COLUMN_KIND+\"='\"+kind+\"' AND \");\n\t\tsqlBuilder.appendWhere(CacheData.COLUMN_FILTER+\n\t\t\t\t(filter==null?\" IS NULL\":\"='\"+filter+\"'\")\n\t\t);\n\t\tsqlBuilder.appendWhere(\" AND \"+CacheData.COLUMN_EXPIRE_DATE+\">\"+new Date().getTime()/1000);\n\t\tCursor cur = sqlBuilder.query(\n\t\t\tzabbixLocalDB,\n\t\t\tnull,\n\t\t\tnull,\n\t\t\tnull,\n\t\t\tnull,\n\t\t\tnull,\n\t\t\tnull\n\t\t);\n\t\tLog.i(\"ZabbixContentProvider\", \"isCached \"+kind+\"//\"+filter+\"//\"+cur.moveToFirst());\n\t\treturn cur.moveToFirst();\n\t}\n\n\t/**\n\t * public, for the unit test\n\t */\n\tpublic void setCached(String kind, String filter, int lifetime) {\n\t\tCacheData cache = new CacheData();\n\t\tcache.set(CacheData.COLUMN_EXPIRE_DATE, new Date().getTime()/1000 + lifetime);\n\t\tcache.set(CacheData.COLUMN_KIND, kind);\n\t\tif (filter != null) {\n\t\t\tcache.set(CacheData.COLUMN_FILTER, filter);\n\t\t}\n\t\tcache.insert(zabbixLocalDB);\n\t}\n\n\t/**\n\t * updates the progressbar in the gui\n\t * @param i 0..100\n\t */\n\tpublic void showProgress(int i) {\n\t\t// if applicable, transform the progress\n\t\tif (transformProgressStart != 0 && transformProgressEnd != 0) {\n\t\t\ti = (int) (transformProgressStart + (transformProgressEnd-transformProgressStart)*(double)i/100);\n\t\t}\n\n\t\tIntent intent = new Intent(ZabbixContentProvider.CONTENT_PROVIDER_INTENT_ACTION);\n\t\tintent.putExtra(\"flag\", ZabbixContentProvider.INTENT_FLAG_SHOW_PROGRESS);\n\t\tintent.putExtra(\"value\", i);\n\t\tcontext.sendBroadcast(intent);\n\t}\n\n\t/**\n\t * transforms the progress\n\t * @param start 0% => start%\n\t * @param end 100% => end%\n\t */\n\tpublic void transformProgress(int start, int end) {\n\t\ttransformProgressStart = start;\n\t\ttransformProgressEnd = end;\n\t}\n}\n"],
      "c_hash_sni": "5d91d0066c3f1f3f2fe253a9c316513d370faa5f",
      "name_sni": "src/com/inovex/zabbixmobile/api/ZabbixService.java",
      "c_parents_ss": ["3820d9533b270822d05ab19af8a9c14f585e1749"],
      "c_imports_removed_t": ["<empty>"],
      "p_hash_sni": "3820d9533b270822d05ab19af8a9c14f585e1749",
      "c_imports_added_t": ["<empty>"],
      "p_methods_t": ["ApplicationData ApplicationItemRelationData ArrayList, String BasicHttpParams BufferedReader CacheData ContentValues CustomSSLSocketFactory Date DefaultHttpClient EventData GraphData GraphItemData HashSet, Long HistoryDetailData HostData HostGroupData HttpAuthorizationRequiredException HttpPost IOException IllegalStateException InputStreamReader Intent ItemData JSONArray JSONObject JsonArrayOrObjectReader JsonFactory NoAPIAccessException PreconditionFailedException RuntimeException SQLiteQueryBuilder Scheme SchemeRegistry ScreenData ScreenItemData StringBuilder StringEntity ThreadSafeClientConnManager TriggerData UsernamePasswordCredentials X509TrustManager _commitTransactionIfRecommended _endTransaction _queryBuffer _queryStream _startTransaction add addHeader append appendWhere authenticate beginTransaction close contains createJsonParser createSocket d delete endTransaction endsWith equals execute get getBoolean getColumnIndex getContent getCredentialsProvider getCurrentName getCurrentToken getDefaultSharedPreferences getDefaultType getEntity getInstance getInt getJSONArray getJSONObject getJsonArrayOrObjectReader getLong getMessage getParams getReasonPhrase getResources getSocketFactory getStatusCode getStatusLine getString getText getTime i importApplications importEvents importGraphItems importHostGroups importHosts importItems importScreenItems importTriggers inTransaction indexOf init insert isCached isClosed length load matches min moveToFirst moveToNext next nextProperty nextToken nextValue nextValueToken parseColor parseDouble parseInt parseLong printStackTrace put putExtra query read register replace replaceAll sendBroadcast set setCached setConnectionTimeout setContentCharset setCredentials setEntity setHostnameVerifier setRedirecting setTables setTransactionSuccessful setVersion showProgress split startsWith substring toString trim update"],
      "c_imports_removed_cs": "<empty>",
      "p_imports_t": ["android.database.sqlite.SQLiteQueryBuilder org.apache.http.conn.scheme.SchemeRegistry java.util.HashSet org.apache.http.params.BasicHttpParams android.content.Context org.apache.http.params.HttpParams org.apache.http.conn.scheme.PlainSocketFactory java.util.ArrayList com.inovex.zabbixmobile.model.ItemData com.inovex.zabbixmobile.model.HostData com.inovex.zabbixmobile.model.GraphData com.inovex.zabbixmobile.model.EventData org.apache.http.auth.UsernamePasswordCredentials org.apache.http.params.HttpConnectionParams android.content.SharedPreferences java.security.KeyManagementException org.apache.http.conn.ClientConnectionManager org.codehaus.jackson.JsonFactory org.apache.http.entity.StringEntity java.util.Set org.apache.http.params.HttpProtocolParams com.inovex.zabbixmobile.model.ApplicationItemRelationData com.inovex.zabbixmobile.model.TriggerData org.codehaus.jackson.JsonToken android.database.Cursor java.net.Socket android.content.Intent org.apache.http.protocol.HTTP org.json.JSONException java.net.UnknownHostException com.inovex.zabbixmobile.model.HistoryDetailData org.apache.http.HttpResponse java.security.KeyStore com.inovex.zabbixmobile.ZabbixContentProvider android.preference.PreferenceManager android.util.Log org.json.JSONObject java.security.NoSuchAlgorithmException org.apache.http.client.params.HttpClientParams java.io.IOException org.apache.http.conn.scheme.Scheme org.apache.http.client.methods.HttpPost javax.net.ssl.SSLContext org.apache.http.auth.AuthScope org.apache.http.conn.ssl.SSLSocketFactory java.security.KeyStoreException android.content.ContentValues java.io.InputStreamReader java.util.Date java.security.UnrecoverableKeyException android.graphics.Color org.apache.http.client.ClientProtocolException com.inovex.zabbixmobile.model.GraphItemData org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager org.json.JSONArray com.inovex.zabbixmobile.model.CacheData javax.net.ssl.SSLPeerUnverifiedException com.inovex.zabbixmobile.model.HostGroupData org.codehaus.jackson.JsonParseException java.security.cert.X509Certificate org.apache.http.HttpVersion android.database.sqlite.SQLiteDatabase java.util.List java.security.cert.CertificateException java.io.BufferedReader com.inovex.zabbixmobile.model.ApplicationData com.inovex.zabbixmobile.model.ScreenItemData javax.net.ssl.TrustManager com.inovex.zabbixmobile.model.ScreenData com.inovex.zabbixmobile.R org.codehaus.jackson.JsonParser org.apache.http.impl.client.DefaultHttpClient javax.net.ssl.X509TrustManager"],
      "p_subject_t": ["- DetailsItemFragmentSupport: removed debug output - JsonObjectReader: changed method getJsonArrayOrObjectReader() to handle objects or arrays (necessary because graph items are encapsulated in objects in API version 1.4+) - added eclipse preferences for building with Java 1.6"],
      "p_callsites_cs": "<unknown>.set(<unknown>, <unknown>)#org.apache.http.HttpEntity.getContent()#java.lang.String.equals(java.lang.String)#org.json.JSONArray.JSONArray()#<unknown>.set(<unknown>, java.lang.Object)#org.json.JSONObject.put(java.lang.String, java.lang.Integer)#org.json.JSONArray.put(java.lang.String)#org.json.JSONObject.JSONObject()#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.codehaus.jackson.JsonFactory.createJsonParser(java.io.InputStream)#java.lang.String.equals(<unknown>)#org.apache.http.StatusLine.getStatusCode()#<unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>)#org.json.JSONObject.put(java.lang.String, java.lang.String)#android.database.sqlite.SQLiteDatabase.inTransaction()#android.util.Log.d(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService._startTransaction()#java.lang.String.equals(java.lang.String)#org.codehaus.jackson.JsonFactory.JsonFactory()#com.inovex.zabbixmobile.api.ZabbixService._endTransaction()#org.json.JSONObject.put(java.lang.String, int)#android.content.ContentValues.ContentValues(int)#org.apache.http.conn.scheme.SchemeRegistry.SchemeRegistry()#<unknown>.insert(android.database.sqlite.SQLiteDatabase)#<unknown>.insert(android.database.sqlite.SQLiteDatabase)#<unknown>.getJsonArrayOrObjectReader()#com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject)#com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject)#com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject)#org.json.JSONObject.getJSONObject(java.lang.String)#java.io.InputStreamReader.InputStreamReader(java.io.InputStream)#android.content.Intent.putExtra(java.lang.String, <unknown>)#org.json.JSONArray.length()#java.lang.String.equals(java.lang.String)#<unknown>.set(<unknown>, <unknown>)#java.lang.String.equals(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService.PreconditionFailedException.PreconditionFailedException()#java.lang.StringBuilder.StringBuilder()#android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null)#<unknown>.nextValueToken()#org.json.JSONObject.JSONObject()#org.json.JSONObject.put(java.lang.String, int)#org.json.JSONObject.put(java.lang.String, org.json.JSONArray)#java.lang.String.equals(<unknown>)#<unknown>.get(<unknown>)#<unknown>.insert(android.database.sqlite.SQLiteDatabase)#android.content.Intent.putExtra(java.lang.String, <unknown>)#java.lang.String.equals(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, java.lang.String, int)#android.util.Log.d(java.lang.String, java.lang.String)#org.json.JSONObject.put(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject)#org.apache.http.conn.scheme.Scheme.Scheme(java.lang.String, org.apache.http.conn.ssl.SSLSocketFactory, int)#org.apache.http.HttpEntity.getContent()#org.codehaus.jackson.JsonParser.close()#java.lang.String.equals(<unknown>)#<unknown>.nextValueToken()#<unknown>.getCurrentName()#org.json.JSONArray.JSONArray(java.util.Set<java.lang.Long>)#<unknown>.nextValueToken()#android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null)#com.inovex.zabbixmobile.api.ZabbixService._startTransaction()#org.json.JSONArray.JSONArray()#<unknown>.nextProperty()#java.lang.String.equals(java.lang.String)#android.database.sqlite.SQLiteDatabase.update(<unknown>, android.content.ContentValues, <unknown>, null)#java.util.Set<java.lang.Long>.add(<unknown>)#<unknown>.get(<unknown>)#<unknown>.get(<unknown>)#android.content.ContentValues.put(<unknown>, java.lang.Long)#java.lang.String.equals(java.lang.String)#org.apache.http.StatusLine.getReasonPhrase()#java.lang.RuntimeException.RuntimeException(java.lang.String)#<unknown>.nextProperty()#java.lang.Throwable.printStackTrace()#java.lang.String.equals(<unknown>)#java.lang.Long.parseLong(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService.importItems(<unknown>, int, boolean)#org.json.JSONObject.put(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject)#<unknown>.getCurrentName()#android.content.ContentValues.put(<unknown>, java.lang.Long)#org.apache.http.entity.StringEntity.StringEntity(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject)#java.lang.String.equals(<unknown>)#<unknown>.EventData()#<unknown>.next()#<unknown>.set(<unknown>, <unknown>)#com.inovex.zabbixmobile.api.ZabbixService.CustomSSLSocketFactory.CustomSSLSocketFactory(java.security.KeyStore)#com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject)#<unknown>.getCurrentName()#java.util.List<java.lang.String>.add(java.lang.String)#org.json.JSONObject.put(java.lang.String, int)#<unknown>.getText()#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.apache.http.conn.ssl.SSLSocketFactory.setHostnameVerifier(org.apache.http.conn.ssl.X509HostnameVerifier)#<unknown>.set(<unknown>, <unknown>)#<unknown>.getText()#org.json.JSONObject.put(java.lang.String, long)#java.util.Date.Date()#org.json.JSONObject.put(java.lang.String, int)#org.json.JSONObject.put(java.lang.String, int)#<unknown>.set(<unknown>, <unknown>)#com.inovex.zabbixmobile.api.ZabbixService.authenticate()#android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null)#android.util.Log.d(java.lang.String, java.lang.String)#java.lang.String.equals(java.lang.String)#org.apache.http.HttpResponse.getEntity()#org.json.JSONObject.JSONObject()#com.inovex.zabbixmobile.api.ZabbixService.importItems(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader, int, boolean)#<unknown>.getJsonArrayOrObjectReader()#com.inovex.zabbixmobile.api.ZabbixService._startTransaction()#com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, null, int)#java.io.BufferedReader.read()#org.json.JSONObject.put(java.lang.String, long)#<unknown>.set(<unknown>, <unknown>)#android.database.Cursor.getLong(<unknown>)#java.lang.IllegalStateException.IllegalStateException(java.lang.String)#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.getCurrentName()#android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null)#android.util.Log.d(java.lang.String, java.lang.String)#<unknown>.set(<unknown>, <unknown>)#java.lang.String.equals(<unknown>)#org.json.JSONObject.put(java.lang.String, java.lang.String)#android.database.Cursor.moveToFirst()#com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, java.lang.String)#android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null)#java.lang.String.equals(java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, java.lang.String)#<unknown>.getText()#org.json.JSONObject.put(java.lang.String, java.lang.String)#android.content.Intent.putExtra(java.lang.String, <unknown>)#<unknown>.getCurrentName()#android.content.res.Resources.getString(<unknown>)#android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null)#android.database.sqlite.SQLiteDatabase.setTransactionSuccessful()#<unknown>.next()#<unknown>.getText()#<unknown>.nextValueToken()#com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject)#com.inovex.zabbixmobile.api.ZabbixService.showProgress(<unknown>)#java.io.IOException.IOException(java.lang.String)#<unknown>.getCurrentName()#android.util.Log.d(java.lang.String, java.lang.String)#java.lang.Object.toString()#org.json.JSONObject.toString()#<unknown>.set(<unknown>, <unknown>)#org.json.JSONArray.JSONArray()#org.apache.http.HttpResponse.getStatusLine()#org.json.JSONArray.JSONArray()#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.apache.http.impl.client.DefaultHttpClient.DefaultHttpClient()#org.json.JSONObject.put(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject)#org.apache.http.HttpResponse.getStatusLine()#java.lang.String.equals(<unknown>)#java.util.Date.Date()#android.util.Log.i(java.lang.String, java.lang.String)#android.content.Context.getResources()#org.apache.http.impl.client.CloseableHttpClient.execute(org.apache.http.client.methods.HttpPost)#com.inovex.zabbixmobile.api.ZabbixService._commitTransactionIfRecommended()#android.content.Context.sendBroadcast(android.content.Intent)#android.content.Context.sendBroadcast(android.content.Intent)#com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, null, int)#java.lang.Integer.parseInt(<unknown>)#<unknown>.ApplicationData()#com.inovex.zabbixmobile.api.ZabbixService.NoAPIAccessException.NoAPIAccessException()#com.inovex.zabbixmobile.api.ZabbixService._commitTransactionIfRecommended()#org.apache.http.message.AbstractHttpMessage.addHeader(java.lang.String, java.lang.String)#org.json.JSONObject.put(java.lang.String, int)#java.lang.String.replace(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService.importHostGroups(<unknown>)#org.json.JSONArray.JSONArray()#<unknown>.set(<unknown>, <unknown>)#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.set(<unknown>, <unknown>)#org.json.JSONArray.JSONArray()#java.lang.String.equals(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, java.lang.String, int)#<unknown>.nextProperty()#<unknown>.set(<unknown>, java.lang.String)#org.json.JSONObject.JSONObject()#java.lang.String.contains(java.lang.String)#org.apache.http.client.methods.HttpEntityEnclosingRequestBase.setEntity(org.apache.http.entity.StringEntity)#com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject)#com.inovex.zabbixmobile.api.ZabbixService.importTriggers(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader)#org.json.JSONObject.put(java.lang.String, int)#<unknown>.HostGroupData()#<unknown>.JsonArrayOrObjectReader(org.codehaus.jackson.JsonParser)#<unknown>.HostGroupData()#<unknown>.nextProperty()#java.lang.Long.parseLong(<unknown>)#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.json.JSONObject.put(java.lang.String, org.json.JSONArray)#org.json.JSONObject.put(java.lang.String, java.lang.Integer)#<unknown>.set(<unknown>, <unknown>)#<unknown>.close()#org.json.JSONObject.put(java.lang.String, org.json.JSONArray)#<unknown>.set(<unknown>, <unknown>)#java.lang.String.equals(java.lang.String)#android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null)#<unknown>.next()#org.json.JSONObject.toString()#java.lang.String.equals(<unknown>)#java.lang.String.equals(<unknown>)#android.database.sqlite.SQLiteDatabase.query(<unknown>, null, <unknown>, null, null, null, null)#<unknown>.set(<unknown>, <unknown>)#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.CacheData()#<unknown>.getText()#com.inovex.zabbixmobile.api.ZabbixService._startTransaction()#<unknown>.set(<unknown>, <unknown>)#com.inovex.zabbixmobile.api.ZabbixService._endTransaction()#<unknown>.set(<unknown>, int)#java.lang.String.equals(<unknown>)#java.util.Date.getTime()#java.lang.String.equals(java.lang.String)#org.json.JSONObject.put(java.lang.String, int)#<unknown>.set(<unknown>, <unknown>)#java.lang.Integer.parseInt(<unknown>)#org.codehaus.jackson.JsonParser.getCurrentName()#<unknown>.nextProperty()#com.inovex.zabbixmobile.api.ZabbixService._endTransaction()#java.lang.String.equals(<unknown>)#org.json.JSONObject.put(java.lang.String, int)#android.database.sqlite.SQLiteDatabase.update(<unknown>, android.content.ContentValues, <unknown>, null)#com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject)#com.inovex.zabbixmobile.api.ZabbixService._endTransaction()#java.lang.StringBuilder.append(char)#<unknown>.set(<unknown>, <unknown>)#<unknown>.get(<unknown>)#<unknown>.set(<unknown>, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject)#org.json.JSONObject.put(java.lang.String, java.lang.String)#android.database.Cursor.getLong(<unknown>)#java.lang.String.equals(<unknown>)#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.json.JSONObject.JSONObject()#org.apache.http.params.HttpProtocolParams.setVersion(org.apache.http.params.HttpParams, org.apache.http.HttpVersion)#com.inovex.zabbixmobile.api.ZabbixService.importApplications(int, int, <unknown>)#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.HistoryDetailData()#android.util.Log.d(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService._startTransaction()#<unknown>.next()#<unknown>.set(<unknown>, <unknown>)#<unknown>.nextValueToken()#org.json.JSONObject.JSONObject()#java.lang.String.equals(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService.importScreenItems(<unknown>)#java.lang.Long.parseLong(<unknown>)#java.lang.Integer.parseInt(<unknown>)#org.apache.http.client.methods.HttpPost.HttpPost(java.lang.String)#org.apache.http.StatusLine.getStatusCode()#<unknown>.set(<unknown>, int)#java.lang.String.equals(java.lang.String)#java.lang.String.equals(<unknown>)#java.lang.String.equals(<unknown>)#<unknown>.getCurrentName()#java.util.ArrayList<java.lang.String>.ArrayList, String()#com.inovex.zabbixmobile.api.ZabbixService._startTransaction()#com.inovex.zabbixmobile.api.ZabbixService.importTriggers(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader)#org.json.JSONArray.put(java.lang.String)#<unknown>.nextValueToken()#org.json.JSONArray.put(java.lang.String)#<unknown>.set(<unknown>, <unknown>)#org.json.JSONObject.put(java.lang.String, int)#org.json.JSONObject.JSONObject()#<unknown>.ScreenItemData()#<unknown>.set(<unknown>, <unknown>)#<unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>)#android.preference.PreferenceManager.getDefaultSharedPreferences(android.content.Context)#org.json.JSONObject.length()#<unknown>.nextValueToken()#java.util.HashSet<java.lang.Long>.HashSet, Long()#java.lang.String.equals(java.lang.String)#android.content.SharedPreferences.getBoolean(java.lang.String, boolean)#<unknown>.insert(android.database.sqlite.SQLiteDatabase)#org.json.JSONObject.put(java.lang.String, org.json.JSONArray)#<unknown>.close()#com.inovex.zabbixmobile.api.ZabbixService.importHosts(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader, int)#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.next()#android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null)#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.json.JSONObject.getString(java.lang.String)#<unknown>.set(<unknown>, <unknown>)#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.close()#org.json.JSONObject.getString(java.lang.String)#java.lang.String.equals(java.lang.String)#java.lang.Long.parseLong(<unknown>)#org.codehaus.jackson.JsonParser.isClosed()#org.json.JSONObject.put(java.lang.String, int)#org.json.JSONObject.put(java.lang.String, org.json.JSONArray)#java.lang.String.startsWith(java.lang.String)#org.json.JSONObject.put(java.lang.String, long)#<unknown>.close()#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.set(<unknown>, long)#org.json.JSONObject.put(java.lang.String, org.json.JSONObject)#<unknown>.set(<unknown>, <unknown>)#com.inovex.zabbixmobile.api.ZabbixService._endTransaction()#java.lang.String.replaceAll(java.lang.String, java.lang.String)#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.nextValueToken()#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.apache.http.params.BasicHttpParams.BasicHttpParams()#com.inovex.zabbixmobile.api.ZabbixService.importGraphItems(<unknown>)#android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null)#android.database.sqlite.SQLiteDatabase.beginTransaction()#com.inovex.zabbixmobile.api.ZabbixService._commitTransactionIfRecommended()#com.inovex.zabbixmobile.api.ZabbixService._endTransaction()#java.lang.String.equals(<unknown>)#<unknown>.insert(android.database.sqlite.SQLiteDatabase)#<unknown>.insert(android.database.sqlite.SQLiteDatabase)#org.json.JSONObject.put(java.lang.String, int)#<unknown>.next()#com.inovex.zabbixmobile.api.ZabbixService._startTransaction()#android.content.SharedPreferences.getString(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, null, int)#javax.net.SocketFactory.createSocket()#java.lang.Long.parseLong(<unknown>)#org.apache.http.client.CredentialsProvider.setCredentials(org.apache.http.auth.AuthScope, org.apache.http.auth.UsernamePasswordCredentials)#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.next()#com.inovex.zabbixmobile.api.ZabbixService.HttpAuthorizationRequiredException.HttpAuthorizationRequiredException()#android.database.sqlite.SQLiteQueryBuilder.query(android.database.sqlite.SQLiteDatabase, null, null, null, null, null, null)#java.util.Date.Date()#com.inovex.zabbixmobile.api.ZabbixService._commitTransactionIfRecommended()#<unknown>.set(<unknown>, java.lang.String)#org.json.JSONObject.JSONObject()#<unknown>.next()#<unknown>.set(<unknown>, <unknown>)#<unknown>.set(<unknown>, <unknown>)#com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject)#java.lang.String.equals(java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, java.lang.String)#java.lang.String.indexOf(char)#android.database.sqlite.SQLiteDatabase.query(<unknown>, null, <unknown>, null, null, null, null)#android.preference.PreferenceManager.getDefaultSharedPreferences(android.content.Context)#<unknown>.nextProperty()#org.apache.http.impl.client.CloseableHttpClient.execute(org.apache.http.client.methods.HttpPost)#<unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>)#com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, java.lang.String)#org.json.JSONObject.JSONObject()#<unknown>.close()#android.database.Cursor.getColumnIndex(<unknown>)#android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null)#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.nextProperty()#org.apache.http.conn.scheme.PlainSocketFactory.getSocketFactory()#com.inovex.zabbixmobile.api.ZabbixService._commitTransactionIfRecommended()#com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject)#java.lang.StringBuilder.toString()#org.json.JSONObject.put(java.lang.String, java.lang.String)#android.database.sqlite.SQLiteQueryBuilder.SQLiteQueryBuilder()#<unknown>.insert(android.database.sqlite.SQLiteDatabase)#org.apache.http.conn.scheme.SchemeRegistry.register(org.apache.http.conn.scheme.Scheme)#<unknown>.set(<unknown>, <unknown>)#org.json.JSONObject.JSONObject(java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService.importHosts(<unknown>, null)#java.lang.String.equals(<unknown>)#<unknown>.set(<unknown>, <unknown>)#<unknown>.set(<unknown>, <unknown>)#java.lang.IllegalStateException.IllegalStateException(java.lang.String)#java.lang.Double.parseDouble(<unknown>)#android.content.ContentValues.put(<unknown>, java.lang.Long)#android.util.Log.i(java.lang.String, java.lang.String)#android.database.sqlite.SQLiteQueryBuilder.appendWhere(<unknown>)#org.apache.http.conn.scheme.SchemeRegistry.register(org.apache.http.conn.scheme.Scheme)#org.json.JSONObject.getInt(java.lang.String)#org.json.JSONObject.put(java.lang.String, boolean)#java.lang.Long.parseLong(<unknown>)#java.lang.String.indexOf(char)#java.lang.String.equals(java.lang.String)#android.database.sqlite.SQLiteQueryBuilder.appendWhere(<unknown>)#java.lang.String.length()#java.lang.String.equals(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject)#<unknown>.nextProperty()#<unknown>.next()#android.content.SharedPreferences.getString(java.lang.String, java.lang.String)#<unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>)#com.inovex.zabbixmobile.api.ZabbixService.importTriggers(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader)#<unknown>.GraphData()#org.json.JSONArray.put(java.lang.String)#org.apache.http.impl.client.AbstractHttpClient.getParams()#<unknown>.set(<unknown>, long)#<unknown>.set(<unknown>, <unknown>)#org.json.JSONObject.getJSONObject(java.lang.String)#org.json.JSONObject.put(java.lang.String, java.lang.String)#java.lang.String.equals(java.lang.String)#org.json.JSONObject.getString(java.lang.String)#java.lang.String.equals(<unknown>)#java.lang.String.equals(<unknown>)#<unknown>.getCurrentName()#java.lang.String.equals(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService.showProgress(int)#<unknown>.getCurrentName()#com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, java.lang.String, int)#org.json.JSONObject.put(java.lang.String, int)#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.close()#java.lang.String.replace(java.lang.String, java.lang.String)#java.lang.String.equals(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject)#com.inovex.zabbixmobile.api.ZabbixService._endTransaction()#android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null)#android.database.Cursor.moveToNext()#<unknown>.HostData()#<unknown>.set(<unknown>, long)#<unknown>.next()#com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject)#android.database.sqlite.SQLiteQueryBuilder.setTables(<unknown>)#java.util.Date.getTime()#org.json.JSONObject.put(java.lang.String, long)#android.content.ContentValues.ContentValues(int)#java.lang.Long.parseLong(<unknown>)#org.apache.http.HttpResponse.getEntity()#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.getText()#java.lang.String.equals(java.lang.String)#<unknown>.set(<unknown>, <unknown>)#<unknown>.set(<unknown>, <unknown>)#<unknown>.set(<unknown>, <unknown>)#javax.net.ssl.SSLContext.init(null, javax.net.ssl.TrustManager[], null)#android.database.sqlite.SQLiteDatabase.endTransaction()#java.lang.String.equals(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, java.lang.String)#android.util.Log.d(java.lang.String, java.lang.String)#<unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>)#<unknown>.next()#<unknown>.close()#<unknown>.insert(android.database.sqlite.SQLiteDatabase)#org.json.JSONObject.put(java.lang.String, java.lang.String)#java.lang.Throwable.getMessage()#java.lang.String.equals(<unknown>)#java.lang.String.equals(<unknown>)#<unknown>.set(<unknown>, <unknown>)#com.inovex.zabbixmobile.api.ZabbixService._endTransaction()#javax.net.ssl.SSLContext.getSocketFactory()#org.json.JSONObject.JSONObject()#android.content.Context.getResources()#org.json.JSONObject.put(java.lang.String, int)#com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, null)#com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, java.lang.String, int)#java.lang.String.matches(java.lang.String)#org.json.JSONArray.put(java.lang.String)#<unknown>.set(<unknown>, <unknown>)#android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null)#android.content.Context.sendBroadcast(android.content.Intent)#org.json.JSONObject.getJSONObject(java.lang.String)#<unknown>.get(<unknown>)#android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null)#java.lang.String.equals(<unknown>)#android.content.SharedPreferences.getBoolean(java.lang.String, boolean)#java.lang.Throwable.printStackTrace()#android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null)#org.json.JSONObject.put(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService._startTransaction()#android.content.Intent.putExtra(java.lang.String, int)#org.json.JSONObject.JSONObject()#<unknown>.getText()#com.inovex.zabbixmobile.api.ZabbixService._endTransaction()#org.apache.http.client.methods.HttpPost.HttpPost(java.lang.String)#android.content.SharedPreferences.getString(java.lang.String, java.lang.String)#<unknown>.GraphItemData()#com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, java.lang.String, int)#<unknown>.nextValueToken()#org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager.ThreadSafeClientConnManager(org.apache.http.params.HttpParams, org.apache.http.conn.scheme.SchemeRegistry)#<unknown>.ApplicationItemRelationData()#java.lang.Object.toString()#android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null)#org.json.JSONArray.JSONArray()#java.lang.String.equals(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService._startTransaction()#org.json.JSONObject.put(java.lang.String, org.json.JSONArray)#<unknown>.set(<unknown>, int)#org.json.JSONObject.put(java.lang.String, int)#com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, java.lang.String, int)#org.json.JSONObject.put(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService.importItems(<unknown>, int, boolean)#org.json.JSONObject.JSONObject()#java.lang.Math.min(int, int)#com.inovex.zabbixmobile.api.ZabbixService.showProgress(<unknown>)#java.lang.String.equals(java.lang.String)#android.content.Intent.Intent(<unknown>)#java.lang.String.equals(<unknown>)#org.json.JSONObject.put(java.lang.String, int)#javax.net.ssl.SSLContext.getInstance(java.lang.String)#android.content.res.Resources.getString(<unknown>)#org.json.JSONObject.JSONObject()#android.content.Intent.Intent(<unknown>)#java.lang.String.equals(<unknown>)#<unknown>.nextProperty()#javax.net.ssl.SSLSocketFactory.createSocket(java.net.Socket, java.lang.String, int, boolean)#org.json.JSONObject.put(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject)#<unknown>.get(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService.importHosts(<unknown>, null)#java.io.IOException.IOException(java.lang.String)#java.lang.String.trim()#java.lang.String.contains(java.lang.String)#org.apache.http.entity.StringEntity.StringEntity(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService._endTransaction()#com.inovex.zabbixmobile.api.ZabbixService.importTriggers(<unknown>)#.X509TrustManager()#com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject)#android.graphics.Color.parseColor(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, null)#org.json.JSONObject.getJSONArray(java.lang.String)#org.apache.http.client.params.HttpClientParams.setRedirecting(org.apache.http.params.HttpParams, boolean)#com.inovex.zabbixmobile.api.ZabbixService._startTransaction()#<unknown>.getCurrentName()#<unknown>.getJsonArrayOrObjectReader()#java.lang.String.equals(<unknown>)#java.lang.Long.parseLong(<unknown>)#android.util.Log.d(java.lang.String, java.lang.String)#org.codehaus.jackson.JsonParser.getCurrentToken()#org.codehaus.jackson.JsonParser.nextValue()#java.lang.Long.parseLong(<unknown>)#<unknown>.getText()#java.util.Date.getTime()#android.content.Intent.putExtra(java.lang.String, <unknown>)#android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null)#<unknown>.get(<unknown>)#android.database.Cursor.moveToFirst()#org.apache.http.client.methods.HttpEntityEnclosingRequestBase.setEntity(org.apache.http.entity.StringEntity)#com.inovex.zabbixmobile.api.ZabbixService._commitTransactionIfRecommended()#com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, null)#android.database.sqlite.SQLiteQueryBuilder.appendWhere(<unknown>)#org.apache.http.auth.UsernamePasswordCredentials.UsernamePasswordCredentials(java.lang.String, java.lang.String)#java.util.Date.getTime()#java.lang.String.equals(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService._endTransaction()#org.json.JSONObject.put(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService.authenticate()#java.lang.String.equals(<unknown>)#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.json.JSONObject.put(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService.NoAPIAccessException.NoAPIAccessException()#org.json.JSONArray.put(long)#com.inovex.zabbixmobile.api.ZabbixService._endTransaction()#<unknown>.getJsonArrayOrObjectReader()#android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null)#<unknown>.ScreenData()#java.util.Date.Date()#java.util.Date.Date()#<unknown>.set(<unknown>, long)#<unknown>.getCurrentName()#org.json.JSONObject.put(java.lang.String, org.json.JSONArray)#<unknown>.set(<unknown>, long)#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.apache.http.params.HttpConnectionParams.setConnectionTimeout(org.apache.http.params.HttpParams, int)#org.json.JSONArray.length()#<unknown>.set(<unknown>, java.lang.String)#<unknown>.set(<unknown>, long)#java.util.Date.getTime()#<unknown>.set(<unknown>, <unknown>)#<unknown>.set(<unknown>, <unknown>)#org.json.JSONArray.put(java.lang.String)#java.lang.String.equals(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService.HttpAuthorizationRequiredException.HttpAuthorizationRequiredException()#<unknown>.getText()#org.json.JSONObject.put(java.lang.String, org.json.JSONArray)#com.inovex.zabbixmobile.api.ZabbixService.importEvents(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader, null)#org.json.JSONObject.JSONObject()#com.inovex.zabbixmobile.api.ZabbixService.importHostGroups(<unknown>)#<unknown>.set(<unknown>, <unknown>)#org.json.JSONObject.toString()#java.lang.Integer.parseInt(<unknown>)#android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null)#org.apache.http.params.HttpProtocolParams.setContentCharset(org.apache.http.params.HttpParams, java.lang.String)#<unknown>.get(<unknown>)#java.lang.String.equals(<unknown>)#<unknown>.set(<unknown>, <unknown>)#<unknown>.nextValueToken()#<unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>)#org.json.JSONObject.put(java.lang.String, org.json.JSONArray)#org.json.JSONObject.put(java.lang.String, java.lang.Integer)#<unknown>.getText()#<unknown>.set(<unknown>, <unknown>)#org.apache.http.message.AbstractHttpMessage.addHeader(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject)#org.json.JSONObject.getJSONArray(java.lang.String)#java.security.KeyStore.load(null, null)#java.lang.String.replace(java.lang.String, java.lang.String)#java.lang.Long.parseLong(<unknown>)#org.json.JSONObject.toString()#com.inovex.zabbixmobile.api.ZabbixService.importTriggers(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader)#android.util.Log.d(java.lang.String, java.lang.String)#android.content.SharedPreferences.getString(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, java.lang.String)#<unknown>.getJsonArrayOrObjectReader()#<unknown>.TriggerData()#android.content.SharedPreferences.getString(java.lang.String, java.lang.String)#android.content.Intent.Intent(<unknown>)#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.apache.http.impl.client.AbstractHttpClient.getCredentialsProvider()#<unknown>.set(<unknown>, <unknown>)#java.io.IOException.IOException(java.lang.String)#java.lang.String.trim()#org.json.JSONObject.put(java.lang.String, org.json.JSONArray)#java.lang.String.split(java.lang.String)#java.lang.String.equals(java.lang.String)#java.lang.String.endsWith(java.lang.String)#<unknown>.set(<unknown>, int)#com.inovex.zabbixmobile.api.ZabbixService.showProgress(int)#<unknown>.ItemData()#org.json.JSONObject.put(java.lang.String, int)#<unknown>.set(<unknown>, <unknown>)#org.codehaus.jackson.JsonParser.getText()#android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null)#org.apache.http.impl.client.DefaultHttpClient.DefaultHttpClient(org.apache.http.conn.ClientConnectionManager, org.apache.http.params.HttpParams)#<unknown>.close()#java.lang.IllegalStateException.IllegalStateException(java.lang.String)#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.codehaus.jackson.JsonParser.nextToken()#android.database.Cursor.getColumnIndex(<unknown>)#org.json.JSONObject.put(java.lang.String, org.json.JSONArray)#<unknown>.nextValueToken()#com.inovex.zabbixmobile.api.ZabbixService._startTransaction()#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.set(<unknown>, java.lang.String)#java.lang.String.substring(int, int)#java.lang.Long.parseLong(<unknown>)#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.json.JSONObject.getInt(java.lang.String)#<unknown>.getJsonArrayOrObjectReader()#java.lang.String.equals(java.lang.String)#<unknown>.set(<unknown>, <unknown>)#<unknown>.set(<unknown>, <unknown>)#java.security.KeyStore.getInstance(java.lang.String)#java.lang.Integer.parseInt(<unknown>)#java.lang.String.equals(java.lang.String)#<unknown>.nextProperty()#android.content.Intent.putExtra(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, null)#<unknown>.set(<unknown>, int)#java.io.BufferedReader.BufferedReader(java.io.InputStreamReader)#com.inovex.zabbixmobile.api.ZabbixService.importEvents(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader, int)#java.security.KeyStore.getDefaultType()#java.lang.String.equals(<unknown>)#<unknown>.getText()#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.set(<unknown>, java.lang.Object)#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.insert(android.database.sqlite.SQLiteDatabase)#<unknown>.nextProperty()#com.inovex.zabbixmobile.api.ZabbixService._startTransaction()#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.close()#<unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>)#org.json.JSONObject.put(java.lang.String, long)#com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, null, int)#<unknown>.set(<unknown>, <unknown>)#java.lang.String.equals(<unknown>)#org.apache.http.conn.scheme.Scheme.Scheme(java.lang.String, org.apache.http.conn.scheme.PlainSocketFactory, int)#org.json.JSONObject.put(java.lang.String, java.lang.String)#java.lang.String.equals(<unknown>)",
      "p_callsites_t": ["<unknown>.set(<unknown>, <unknown>) org.apache.http.HttpEntity.getContent() java.lang.String.equals(java.lang.String) org.json.JSONArray.JSONArray() <unknown>.set(<unknown>, java.lang.Object) org.json.JSONObject.put(java.lang.String, java.lang.Integer) org.json.JSONArray.put(java.lang.String) org.json.JSONObject.JSONObject() org.json.JSONObject.put(java.lang.String, java.lang.String) org.codehaus.jackson.JsonFactory.createJsonParser(java.io.InputStream) java.lang.String.equals(<unknown>) org.apache.http.StatusLine.getStatusCode() <unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>) org.json.JSONObject.put(java.lang.String, java.lang.String) android.database.sqlite.SQLiteDatabase.inTransaction() android.util.Log.d(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService._startTransaction() java.lang.String.equals(java.lang.String) org.codehaus.jackson.JsonFactory.JsonFactory() com.inovex.zabbixmobile.api.ZabbixService._endTransaction() org.json.JSONObject.put(java.lang.String, int) android.content.ContentValues.ContentValues(int) org.apache.http.conn.scheme.SchemeRegistry.SchemeRegistry() <unknown>.insert(android.database.sqlite.SQLiteDatabase) <unknown>.insert(android.database.sqlite.SQLiteDatabase) <unknown>.getJsonArrayOrObjectReader() com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject) com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject) com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject) org.json.JSONObject.getJSONObject(java.lang.String) java.io.InputStreamReader.InputStreamReader(java.io.InputStream) android.content.Intent.putExtra(java.lang.String, <unknown>) org.json.JSONArray.length() java.lang.String.equals(java.lang.String) <unknown>.set(<unknown>, <unknown>) java.lang.String.equals(<unknown>) com.inovex.zabbixmobile.api.ZabbixService.PreconditionFailedException.PreconditionFailedException() java.lang.StringBuilder.StringBuilder() android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null) <unknown>.nextValueToken() org.json.JSONObject.JSONObject() org.json.JSONObject.put(java.lang.String, int) org.json.JSONObject.put(java.lang.String, org.json.JSONArray) java.lang.String.equals(<unknown>) <unknown>.get(<unknown>) <unknown>.insert(android.database.sqlite.SQLiteDatabase) android.content.Intent.putExtra(java.lang.String, <unknown>) java.lang.String.equals(<unknown>) com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, java.lang.String, int) android.util.Log.d(java.lang.String, java.lang.String) org.json.JSONObject.put(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject) org.apache.http.conn.scheme.Scheme.Scheme(java.lang.String, org.apache.http.conn.ssl.SSLSocketFactory, int) org.apache.http.HttpEntity.getContent() org.codehaus.jackson.JsonParser.close() java.lang.String.equals(<unknown>) <unknown>.nextValueToken() <unknown>.getCurrentName() org.json.JSONArray.JSONArray(java.util.Set<java.lang.Long>) <unknown>.nextValueToken() android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null) com.inovex.zabbixmobile.api.ZabbixService._startTransaction() org.json.JSONArray.JSONArray() <unknown>.nextProperty() java.lang.String.equals(java.lang.String) android.database.sqlite.SQLiteDatabase.update(<unknown>, android.content.ContentValues, <unknown>, null) java.util.Set<java.lang.Long>.add(<unknown>) <unknown>.get(<unknown>) <unknown>.get(<unknown>) android.content.ContentValues.put(<unknown>, java.lang.Long) java.lang.String.equals(java.lang.String) org.apache.http.StatusLine.getReasonPhrase() java.lang.RuntimeException.RuntimeException(java.lang.String) <unknown>.nextProperty() java.lang.Throwable.printStackTrace() java.lang.String.equals(<unknown>) java.lang.Long.parseLong(<unknown>) com.inovex.zabbixmobile.api.ZabbixService.importItems(<unknown>, int, boolean) org.json.JSONObject.put(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject) <unknown>.getCurrentName() android.content.ContentValues.put(<unknown>, java.lang.Long) org.apache.http.entity.StringEntity.StringEntity(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject) java.lang.String.equals(<unknown>) <unknown>.EventData() <unknown>.next() <unknown>.set(<unknown>, <unknown>) com.inovex.zabbixmobile.api.ZabbixService.CustomSSLSocketFactory.CustomSSLSocketFactory(java.security.KeyStore) com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject) <unknown>.getCurrentName() java.util.List<java.lang.String>.add(java.lang.String) org.json.JSONObject.put(java.lang.String, int) <unknown>.getText() org.json.JSONObject.put(java.lang.String, java.lang.String) org.apache.http.conn.ssl.SSLSocketFactory.setHostnameVerifier(org.apache.http.conn.ssl.X509HostnameVerifier) <unknown>.set(<unknown>, <unknown>) <unknown>.getText() org.json.JSONObject.put(java.lang.String, long) java.util.Date.Date() org.json.JSONObject.put(java.lang.String, int) org.json.JSONObject.put(java.lang.String, int) <unknown>.set(<unknown>, <unknown>) com.inovex.zabbixmobile.api.ZabbixService.authenticate() android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null) android.util.Log.d(java.lang.String, java.lang.String) java.lang.String.equals(java.lang.String) org.apache.http.HttpResponse.getEntity() org.json.JSONObject.JSONObject() com.inovex.zabbixmobile.api.ZabbixService.importItems(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader, int, boolean) <unknown>.getJsonArrayOrObjectReader() com.inovex.zabbixmobile.api.ZabbixService._startTransaction() com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, null, int) java.io.BufferedReader.read() org.json.JSONObject.put(java.lang.String, long) <unknown>.set(<unknown>, <unknown>) android.database.Cursor.getLong(<unknown>) java.lang.IllegalStateException.IllegalStateException(java.lang.String) org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.getCurrentName() android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null) android.util.Log.d(java.lang.String, java.lang.String) <unknown>.set(<unknown>, <unknown>) java.lang.String.equals(<unknown>) org.json.JSONObject.put(java.lang.String, java.lang.String) android.database.Cursor.moveToFirst() com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, java.lang.String) android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null) java.lang.String.equals(java.lang.String) com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, java.lang.String) <unknown>.getText() org.json.JSONObject.put(java.lang.String, java.lang.String) android.content.Intent.putExtra(java.lang.String, <unknown>) <unknown>.getCurrentName() android.content.res.Resources.getString(<unknown>) android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null) android.database.sqlite.SQLiteDatabase.setTransactionSuccessful() <unknown>.next() <unknown>.getText() <unknown>.nextValueToken() com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject) com.inovex.zabbixmobile.api.ZabbixService.showProgress(<unknown>) java.io.IOException.IOException(java.lang.String) <unknown>.getCurrentName() android.util.Log.d(java.lang.String, java.lang.String) java.lang.Object.toString() org.json.JSONObject.toString() <unknown>.set(<unknown>, <unknown>) org.json.JSONArray.JSONArray() org.apache.http.HttpResponse.getStatusLine() org.json.JSONArray.JSONArray() org.json.JSONObject.put(java.lang.String, java.lang.String) org.apache.http.impl.client.DefaultHttpClient.DefaultHttpClient() org.json.JSONObject.put(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject) org.apache.http.HttpResponse.getStatusLine() java.lang.String.equals(<unknown>) java.util.Date.Date() android.util.Log.i(java.lang.String, java.lang.String) android.content.Context.getResources() org.apache.http.impl.client.CloseableHttpClient.execute(org.apache.http.client.methods.HttpPost) com.inovex.zabbixmobile.api.ZabbixService._commitTransactionIfRecommended() android.content.Context.sendBroadcast(android.content.Intent) android.content.Context.sendBroadcast(android.content.Intent) com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, null, int) java.lang.Integer.parseInt(<unknown>) <unknown>.ApplicationData() com.inovex.zabbixmobile.api.ZabbixService.NoAPIAccessException.NoAPIAccessException() com.inovex.zabbixmobile.api.ZabbixService._commitTransactionIfRecommended() org.apache.http.message.AbstractHttpMessage.addHeader(java.lang.String, java.lang.String) org.json.JSONObject.put(java.lang.String, int) java.lang.String.replace(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService.importHostGroups(<unknown>) org.json.JSONArray.JSONArray() <unknown>.set(<unknown>, <unknown>) org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.set(<unknown>, <unknown>) org.json.JSONArray.JSONArray() java.lang.String.equals(<unknown>) com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, java.lang.String, int) <unknown>.nextProperty() <unknown>.set(<unknown>, java.lang.String) org.json.JSONObject.JSONObject() java.lang.String.contains(java.lang.String) org.apache.http.client.methods.HttpEntityEnclosingRequestBase.setEntity(org.apache.http.entity.StringEntity) com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject) com.inovex.zabbixmobile.api.ZabbixService.importTriggers(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader) org.json.JSONObject.put(java.lang.String, int) <unknown>.HostGroupData() <unknown>.JsonArrayOrObjectReader(org.codehaus.jackson.JsonParser) <unknown>.HostGroupData() <unknown>.nextProperty() java.lang.Long.parseLong(<unknown>) org.json.JSONObject.put(java.lang.String, java.lang.String) org.json.JSONObject.put(java.lang.String, org.json.JSONArray) org.json.JSONObject.put(java.lang.String, java.lang.Integer) <unknown>.set(<unknown>, <unknown>) <unknown>.close() org.json.JSONObject.put(java.lang.String, org.json.JSONArray) <unknown>.set(<unknown>, <unknown>) java.lang.String.equals(java.lang.String) android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null) <unknown>.next() org.json.JSONObject.toString() java.lang.String.equals(<unknown>) java.lang.String.equals(<unknown>) android.database.sqlite.SQLiteDatabase.query(<unknown>, null, <unknown>, null, null, null, null) <unknown>.set(<unknown>, <unknown>) org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.CacheData() <unknown>.getText() com.inovex.zabbixmobile.api.ZabbixService._startTransaction() <unknown>.set(<unknown>, <unknown>) com.inovex.zabbixmobile.api.ZabbixService._endTransaction() <unknown>.set(<unknown>, int) java.lang.String.equals(<unknown>) java.util.Date.getTime() java.lang.String.equals(java.lang.String) org.json.JSONObject.put(java.lang.String, int) <unknown>.set(<unknown>, <unknown>) java.lang.Integer.parseInt(<unknown>) org.codehaus.jackson.JsonParser.getCurrentName() <unknown>.nextProperty() com.inovex.zabbixmobile.api.ZabbixService._endTransaction() java.lang.String.equals(<unknown>) org.json.JSONObject.put(java.lang.String, int) android.database.sqlite.SQLiteDatabase.update(<unknown>, android.content.ContentValues, <unknown>, null) com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject) com.inovex.zabbixmobile.api.ZabbixService._endTransaction() java.lang.StringBuilder.append(char) <unknown>.set(<unknown>, <unknown>) <unknown>.get(<unknown>) <unknown>.set(<unknown>, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject) org.json.JSONObject.put(java.lang.String, java.lang.String) android.database.Cursor.getLong(<unknown>) java.lang.String.equals(<unknown>) org.json.JSONObject.put(java.lang.String, java.lang.String) org.json.JSONObject.JSONObject() org.apache.http.params.HttpProtocolParams.setVersion(org.apache.http.params.HttpParams, org.apache.http.HttpVersion) com.inovex.zabbixmobile.api.ZabbixService.importApplications(int, int, <unknown>) org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.HistoryDetailData() android.util.Log.d(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService._startTransaction() <unknown>.next() <unknown>.set(<unknown>, <unknown>) <unknown>.nextValueToken() org.json.JSONObject.JSONObject() java.lang.String.equals(<unknown>) com.inovex.zabbixmobile.api.ZabbixService.importScreenItems(<unknown>) java.lang.Long.parseLong(<unknown>) java.lang.Integer.parseInt(<unknown>) org.apache.http.client.methods.HttpPost.HttpPost(java.lang.String) org.apache.http.StatusLine.getStatusCode() <unknown>.set(<unknown>, int) java.lang.String.equals(java.lang.String) java.lang.String.equals(<unknown>) java.lang.String.equals(<unknown>) <unknown>.getCurrentName() java.util.ArrayList<java.lang.String>.ArrayList, String() com.inovex.zabbixmobile.api.ZabbixService._startTransaction() com.inovex.zabbixmobile.api.ZabbixService.importTriggers(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader) org.json.JSONArray.put(java.lang.String) <unknown>.nextValueToken() org.json.JSONArray.put(java.lang.String) <unknown>.set(<unknown>, <unknown>) org.json.JSONObject.put(java.lang.String, int) org.json.JSONObject.JSONObject() <unknown>.ScreenItemData() <unknown>.set(<unknown>, <unknown>) <unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>) android.preference.PreferenceManager.getDefaultSharedPreferences(android.content.Context) org.json.JSONObject.length() <unknown>.nextValueToken() java.util.HashSet<java.lang.Long>.HashSet, Long() java.lang.String.equals(java.lang.String) android.content.SharedPreferences.getBoolean(java.lang.String, boolean) <unknown>.insert(android.database.sqlite.SQLiteDatabase) org.json.JSONObject.put(java.lang.String, org.json.JSONArray) <unknown>.close() com.inovex.zabbixmobile.api.ZabbixService.importHosts(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader, int) org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.next() android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null) org.json.JSONObject.put(java.lang.String, java.lang.String) org.json.JSONObject.getString(java.lang.String) <unknown>.set(<unknown>, <unknown>) org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.close() org.json.JSONObject.getString(java.lang.String) java.lang.String.equals(java.lang.String) java.lang.Long.parseLong(<unknown>) org.codehaus.jackson.JsonParser.isClosed() org.json.JSONObject.put(java.lang.String, int) org.json.JSONObject.put(java.lang.String, org.json.JSONArray) java.lang.String.startsWith(java.lang.String) org.json.JSONObject.put(java.lang.String, long) <unknown>.close() org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.set(<unknown>, long) org.json.JSONObject.put(java.lang.String, org.json.JSONObject) <unknown>.set(<unknown>, <unknown>) com.inovex.zabbixmobile.api.ZabbixService._endTransaction() java.lang.String.replaceAll(java.lang.String, java.lang.String) org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.nextValueToken() org.json.JSONObject.put(java.lang.String, java.lang.String) org.json.JSONObject.put(java.lang.String, java.lang.String) org.apache.http.params.BasicHttpParams.BasicHttpParams() com.inovex.zabbixmobile.api.ZabbixService.importGraphItems(<unknown>) android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null) android.database.sqlite.SQLiteDatabase.beginTransaction() com.inovex.zabbixmobile.api.ZabbixService._commitTransactionIfRecommended() com.inovex.zabbixmobile.api.ZabbixService._endTransaction() java.lang.String.equals(<unknown>) <unknown>.insert(android.database.sqlite.SQLiteDatabase) <unknown>.insert(android.database.sqlite.SQLiteDatabase) org.json.JSONObject.put(java.lang.String, int) <unknown>.next() com.inovex.zabbixmobile.api.ZabbixService._startTransaction() android.content.SharedPreferences.getString(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, null, int) javax.net.SocketFactory.createSocket() java.lang.Long.parseLong(<unknown>) org.apache.http.client.CredentialsProvider.setCredentials(org.apache.http.auth.AuthScope, org.apache.http.auth.UsernamePasswordCredentials) org.json.JSONObject.put(java.lang.String, java.lang.String) org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.next() com.inovex.zabbixmobile.api.ZabbixService.HttpAuthorizationRequiredException.HttpAuthorizationRequiredException() android.database.sqlite.SQLiteQueryBuilder.query(android.database.sqlite.SQLiteDatabase, null, null, null, null, null, null) java.util.Date.Date() com.inovex.zabbixmobile.api.ZabbixService._commitTransactionIfRecommended() <unknown>.set(<unknown>, java.lang.String) org.json.JSONObject.JSONObject() <unknown>.next() <unknown>.set(<unknown>, <unknown>) <unknown>.set(<unknown>, <unknown>) com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject) java.lang.String.equals(java.lang.String) com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, java.lang.String) java.lang.String.indexOf(char) android.database.sqlite.SQLiteDatabase.query(<unknown>, null, <unknown>, null, null, null, null) android.preference.PreferenceManager.getDefaultSharedPreferences(android.content.Context) <unknown>.nextProperty() org.apache.http.impl.client.CloseableHttpClient.execute(org.apache.http.client.methods.HttpPost) <unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>) com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, java.lang.String) org.json.JSONObject.JSONObject() <unknown>.close() android.database.Cursor.getColumnIndex(<unknown>) android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null) org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.nextProperty() org.apache.http.conn.scheme.PlainSocketFactory.getSocketFactory() com.inovex.zabbixmobile.api.ZabbixService._commitTransactionIfRecommended() com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject) java.lang.StringBuilder.toString() org.json.JSONObject.put(java.lang.String, java.lang.String) android.database.sqlite.SQLiteQueryBuilder.SQLiteQueryBuilder() <unknown>.insert(android.database.sqlite.SQLiteDatabase) org.apache.http.conn.scheme.SchemeRegistry.register(org.apache.http.conn.scheme.Scheme) <unknown>.set(<unknown>, <unknown>) org.json.JSONObject.JSONObject(java.lang.String) com.inovex.zabbixmobile.api.ZabbixService.importHosts(<unknown>, null) java.lang.String.equals(<unknown>) <unknown>.set(<unknown>, <unknown>) <unknown>.set(<unknown>, <unknown>) java.lang.IllegalStateException.IllegalStateException(java.lang.String) java.lang.Double.parseDouble(<unknown>) android.content.ContentValues.put(<unknown>, java.lang.Long) android.util.Log.i(java.lang.String, java.lang.String) android.database.sqlite.SQLiteQueryBuilder.appendWhere(<unknown>) org.apache.http.conn.scheme.SchemeRegistry.register(org.apache.http.conn.scheme.Scheme) org.json.JSONObject.getInt(java.lang.String) org.json.JSONObject.put(java.lang.String, boolean) java.lang.Long.parseLong(<unknown>) java.lang.String.indexOf(char) java.lang.String.equals(java.lang.String) android.database.sqlite.SQLiteQueryBuilder.appendWhere(<unknown>) java.lang.String.length() java.lang.String.equals(<unknown>) com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject) <unknown>.nextProperty() <unknown>.next() android.content.SharedPreferences.getString(java.lang.String, java.lang.String) <unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>) com.inovex.zabbixmobile.api.ZabbixService.importTriggers(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader) <unknown>.GraphData() org.json.JSONArray.put(java.lang.String) org.apache.http.impl.client.AbstractHttpClient.getParams() <unknown>.set(<unknown>, long) <unknown>.set(<unknown>, <unknown>) org.json.JSONObject.getJSONObject(java.lang.String) org.json.JSONObject.put(java.lang.String, java.lang.String) java.lang.String.equals(java.lang.String) org.json.JSONObject.getString(java.lang.String) java.lang.String.equals(<unknown>) java.lang.String.equals(<unknown>) <unknown>.getCurrentName() java.lang.String.equals(<unknown>) com.inovex.zabbixmobile.api.ZabbixService.showProgress(int) <unknown>.getCurrentName() com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, java.lang.String, int) org.json.JSONObject.put(java.lang.String, int) org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.close() java.lang.String.replace(java.lang.String, java.lang.String) java.lang.String.equals(<unknown>) com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject) com.inovex.zabbixmobile.api.ZabbixService._endTransaction() android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null) android.database.Cursor.moveToNext() <unknown>.HostData() <unknown>.set(<unknown>, long) <unknown>.next() com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject) android.database.sqlite.SQLiteQueryBuilder.setTables(<unknown>) java.util.Date.getTime() org.json.JSONObject.put(java.lang.String, long) android.content.ContentValues.ContentValues(int) java.lang.Long.parseLong(<unknown>) org.apache.http.HttpResponse.getEntity() org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.getText() java.lang.String.equals(java.lang.String) <unknown>.set(<unknown>, <unknown>) <unknown>.set(<unknown>, <unknown>) <unknown>.set(<unknown>, <unknown>) javax.net.ssl.SSLContext.init(null, javax.net.ssl.TrustManager[], null) android.database.sqlite.SQLiteDatabase.endTransaction() java.lang.String.equals(<unknown>) com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, java.lang.String) android.util.Log.d(java.lang.String, java.lang.String) <unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>) <unknown>.next() <unknown>.close() <unknown>.insert(android.database.sqlite.SQLiteDatabase) org.json.JSONObject.put(java.lang.String, java.lang.String) java.lang.Throwable.getMessage() java.lang.String.equals(<unknown>) java.lang.String.equals(<unknown>) <unknown>.set(<unknown>, <unknown>) com.inovex.zabbixmobile.api.ZabbixService._endTransaction() javax.net.ssl.SSLContext.getSocketFactory() org.json.JSONObject.JSONObject() android.content.Context.getResources() org.json.JSONObject.put(java.lang.String, int) com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, null) com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, java.lang.String, int) java.lang.String.matches(java.lang.String) org.json.JSONArray.put(java.lang.String) <unknown>.set(<unknown>, <unknown>) android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null) android.content.Context.sendBroadcast(android.content.Intent) org.json.JSONObject.getJSONObject(java.lang.String) <unknown>.get(<unknown>) android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null) java.lang.String.equals(<unknown>) android.content.SharedPreferences.getBoolean(java.lang.String, boolean) java.lang.Throwable.printStackTrace() android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null) org.json.JSONObject.put(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService._startTransaction() android.content.Intent.putExtra(java.lang.String, int) org.json.JSONObject.JSONObject() <unknown>.getText() com.inovex.zabbixmobile.api.ZabbixService._endTransaction() org.apache.http.client.methods.HttpPost.HttpPost(java.lang.String) android.content.SharedPreferences.getString(java.lang.String, java.lang.String) <unknown>.GraphItemData() com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, java.lang.String, int) <unknown>.nextValueToken() org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager.ThreadSafeClientConnManager(org.apache.http.params.HttpParams, org.apache.http.conn.scheme.SchemeRegistry) <unknown>.ApplicationItemRelationData() java.lang.Object.toString() android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null) org.json.JSONArray.JSONArray() java.lang.String.equals(<unknown>) com.inovex.zabbixmobile.api.ZabbixService._startTransaction() org.json.JSONObject.put(java.lang.String, org.json.JSONArray) <unknown>.set(<unknown>, int) org.json.JSONObject.put(java.lang.String, int) com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, java.lang.String, int) org.json.JSONObject.put(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService.importItems(<unknown>, int, boolean) org.json.JSONObject.JSONObject() java.lang.Math.min(int, int) com.inovex.zabbixmobile.api.ZabbixService.showProgress(<unknown>) java.lang.String.equals(java.lang.String) android.content.Intent.Intent(<unknown>) java.lang.String.equals(<unknown>) org.json.JSONObject.put(java.lang.String, int) javax.net.ssl.SSLContext.getInstance(java.lang.String) android.content.res.Resources.getString(<unknown>) org.json.JSONObject.JSONObject() android.content.Intent.Intent(<unknown>) java.lang.String.equals(<unknown>) <unknown>.nextProperty() javax.net.ssl.SSLSocketFactory.createSocket(java.net.Socket, java.lang.String, int, boolean) org.json.JSONObject.put(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject) <unknown>.get(<unknown>) com.inovex.zabbixmobile.api.ZabbixService.importHosts(<unknown>, null) java.io.IOException.IOException(java.lang.String) java.lang.String.trim() java.lang.String.contains(java.lang.String) org.apache.http.entity.StringEntity.StringEntity(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService._endTransaction() com.inovex.zabbixmobile.api.ZabbixService.importTriggers(<unknown>) .X509TrustManager() com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject) android.graphics.Color.parseColor(<unknown>) com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, null) org.json.JSONObject.getJSONArray(java.lang.String) org.apache.http.client.params.HttpClientParams.setRedirecting(org.apache.http.params.HttpParams, boolean) com.inovex.zabbixmobile.api.ZabbixService._startTransaction() <unknown>.getCurrentName() <unknown>.getJsonArrayOrObjectReader() java.lang.String.equals(<unknown>) java.lang.Long.parseLong(<unknown>) android.util.Log.d(java.lang.String, java.lang.String) org.codehaus.jackson.JsonParser.getCurrentToken() org.codehaus.jackson.JsonParser.nextValue() java.lang.Long.parseLong(<unknown>) <unknown>.getText() java.util.Date.getTime() android.content.Intent.putExtra(java.lang.String, <unknown>) android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null) <unknown>.get(<unknown>) android.database.Cursor.moveToFirst() org.apache.http.client.methods.HttpEntityEnclosingRequestBase.setEntity(org.apache.http.entity.StringEntity) com.inovex.zabbixmobile.api.ZabbixService._commitTransactionIfRecommended() com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, null) android.database.sqlite.SQLiteQueryBuilder.appendWhere(<unknown>) org.apache.http.auth.UsernamePasswordCredentials.UsernamePasswordCredentials(java.lang.String, java.lang.String) java.util.Date.getTime() java.lang.String.equals(<unknown>) com.inovex.zabbixmobile.api.ZabbixService._endTransaction() org.json.JSONObject.put(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService.authenticate() java.lang.String.equals(<unknown>) org.json.JSONObject.put(java.lang.String, java.lang.String) org.json.JSONObject.put(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService.NoAPIAccessException.NoAPIAccessException() org.json.JSONArray.put(long) com.inovex.zabbixmobile.api.ZabbixService._endTransaction() <unknown>.getJsonArrayOrObjectReader() android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null) <unknown>.ScreenData() java.util.Date.Date() java.util.Date.Date() <unknown>.set(<unknown>, long) <unknown>.getCurrentName() org.json.JSONObject.put(java.lang.String, org.json.JSONArray) <unknown>.set(<unknown>, long) org.json.JSONObject.put(java.lang.String, java.lang.String) org.apache.http.params.HttpConnectionParams.setConnectionTimeout(org.apache.http.params.HttpParams, int) org.json.JSONArray.length() <unknown>.set(<unknown>, java.lang.String) <unknown>.set(<unknown>, long) java.util.Date.getTime() <unknown>.set(<unknown>, <unknown>) <unknown>.set(<unknown>, <unknown>) org.json.JSONArray.put(java.lang.String) java.lang.String.equals(<unknown>) com.inovex.zabbixmobile.api.ZabbixService.HttpAuthorizationRequiredException.HttpAuthorizationRequiredException() <unknown>.getText() org.json.JSONObject.put(java.lang.String, org.json.JSONArray) com.inovex.zabbixmobile.api.ZabbixService.importEvents(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader, null) org.json.JSONObject.JSONObject() com.inovex.zabbixmobile.api.ZabbixService.importHostGroups(<unknown>) <unknown>.set(<unknown>, <unknown>) org.json.JSONObject.toString() java.lang.Integer.parseInt(<unknown>) android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null) org.apache.http.params.HttpProtocolParams.setContentCharset(org.apache.http.params.HttpParams, java.lang.String) <unknown>.get(<unknown>) java.lang.String.equals(<unknown>) <unknown>.set(<unknown>, <unknown>) <unknown>.nextValueToken() <unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>) org.json.JSONObject.put(java.lang.String, org.json.JSONArray) org.json.JSONObject.put(java.lang.String, java.lang.Integer) <unknown>.getText() <unknown>.set(<unknown>, <unknown>) org.apache.http.message.AbstractHttpMessage.addHeader(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject) org.json.JSONObject.getJSONArray(java.lang.String) java.security.KeyStore.load(null, null) java.lang.String.replace(java.lang.String, java.lang.String) java.lang.Long.parseLong(<unknown>) org.json.JSONObject.toString() com.inovex.zabbixmobile.api.ZabbixService.importTriggers(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader) android.util.Log.d(java.lang.String, java.lang.String) android.content.SharedPreferences.getString(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, java.lang.String) <unknown>.getJsonArrayOrObjectReader() <unknown>.TriggerData() android.content.SharedPreferences.getString(java.lang.String, java.lang.String) android.content.Intent.Intent(<unknown>) org.json.JSONObject.put(java.lang.String, java.lang.String) org.apache.http.impl.client.AbstractHttpClient.getCredentialsProvider() <unknown>.set(<unknown>, <unknown>) java.io.IOException.IOException(java.lang.String) java.lang.String.trim() org.json.JSONObject.put(java.lang.String, org.json.JSONArray) java.lang.String.split(java.lang.String) java.lang.String.equals(java.lang.String) java.lang.String.endsWith(java.lang.String) <unknown>.set(<unknown>, int) com.inovex.zabbixmobile.api.ZabbixService.showProgress(int) <unknown>.ItemData() org.json.JSONObject.put(java.lang.String, int) <unknown>.set(<unknown>, <unknown>) org.codehaus.jackson.JsonParser.getText() android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null) org.apache.http.impl.client.DefaultHttpClient.DefaultHttpClient(org.apache.http.conn.ClientConnectionManager, org.apache.http.params.HttpParams) <unknown>.close() java.lang.IllegalStateException.IllegalStateException(java.lang.String) org.json.JSONObject.put(java.lang.String, java.lang.String) org.codehaus.jackson.JsonParser.nextToken() android.database.Cursor.getColumnIndex(<unknown>) org.json.JSONObject.put(java.lang.String, org.json.JSONArray) <unknown>.nextValueToken() com.inovex.zabbixmobile.api.ZabbixService._startTransaction() org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.set(<unknown>, java.lang.String) java.lang.String.substring(int, int) java.lang.Long.parseLong(<unknown>) org.json.JSONObject.put(java.lang.String, java.lang.String) org.json.JSONObject.getInt(java.lang.String) <unknown>.getJsonArrayOrObjectReader() java.lang.String.equals(java.lang.String) <unknown>.set(<unknown>, <unknown>) <unknown>.set(<unknown>, <unknown>) java.security.KeyStore.getInstance(java.lang.String) java.lang.Integer.parseInt(<unknown>) java.lang.String.equals(java.lang.String) <unknown>.nextProperty() android.content.Intent.putExtra(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, null) <unknown>.set(<unknown>, int) java.io.BufferedReader.BufferedReader(java.io.InputStreamReader) com.inovex.zabbixmobile.api.ZabbixService.importEvents(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader, int) java.security.KeyStore.getDefaultType() java.lang.String.equals(<unknown>) <unknown>.getText() org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.set(<unknown>, java.lang.Object) org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.insert(android.database.sqlite.SQLiteDatabase) <unknown>.nextProperty() com.inovex.zabbixmobile.api.ZabbixService._startTransaction() org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.close() <unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>) org.json.JSONObject.put(java.lang.String, long) com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, null, int) <unknown>.set(<unknown>, <unknown>) java.lang.String.equals(<unknown>) org.apache.http.conn.scheme.Scheme.Scheme(java.lang.String, org.apache.http.conn.scheme.PlainSocketFactory, int) org.json.JSONObject.put(java.lang.String, java.lang.String) java.lang.String.equals(<unknown>)"],
      "c_callsites_t": ["<unknown>.set(<unknown>, <unknown>) org.apache.http.HttpEntity.getContent() java.lang.String.equals(java.lang.String) org.json.JSONArray.JSONArray() <unknown>.set(<unknown>, java.lang.Object) org.json.JSONObject.put(java.lang.String, java.lang.Integer) org.json.JSONArray.put(java.lang.String) org.json.JSONObject.JSONObject() org.json.JSONObject.put(java.lang.String, java.lang.String) org.codehaus.jackson.JsonFactory.createJsonParser(java.io.InputStream) java.lang.String.equals(<unknown>) org.apache.http.StatusLine.getStatusCode() <unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>) org.json.JSONObject.put(java.lang.String, java.lang.String) android.database.sqlite.SQLiteDatabase.inTransaction() android.util.Log.d(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService._startTransaction() java.lang.String.equals(java.lang.String) org.codehaus.jackson.JsonFactory.JsonFactory() com.inovex.zabbixmobile.api.ZabbixService._endTransaction() org.json.JSONObject.put(java.lang.String, int) android.content.ContentValues.ContentValues(int) org.apache.http.conn.scheme.SchemeRegistry.SchemeRegistry() <unknown>.insert(android.database.sqlite.SQLiteDatabase) <unknown>.insert(android.database.sqlite.SQLiteDatabase) <unknown>.getJsonArrayOrObjectReader() com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject) com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject) com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject) org.json.JSONObject.getJSONObject(java.lang.String) java.io.InputStreamReader.InputStreamReader(java.io.InputStream) android.content.Intent.putExtra(java.lang.String, <unknown>) org.json.JSONArray.length() java.lang.String.equals(java.lang.String) <unknown>.set(<unknown>, <unknown>) java.lang.String.equals(<unknown>) com.inovex.zabbixmobile.api.ZabbixService.PreconditionFailedException.PreconditionFailedException() java.lang.StringBuilder.StringBuilder() android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null) <unknown>.nextValueToken() org.json.JSONObject.JSONObject() org.json.JSONObject.put(java.lang.String, int) org.json.JSONObject.put(java.lang.String, org.json.JSONArray) java.lang.String.equals(<unknown>) <unknown>.get(<unknown>) <unknown>.insert(android.database.sqlite.SQLiteDatabase) android.content.Intent.putExtra(java.lang.String, <unknown>) java.lang.String.equals(<unknown>) com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, java.lang.String, int) com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject) android.util.Log.d(java.lang.String, java.lang.String) org.json.JSONObject.put(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject) org.apache.http.conn.scheme.Scheme.Scheme(java.lang.String, org.apache.http.conn.ssl.SSLSocketFactory, int) org.apache.http.HttpEntity.getContent() org.codehaus.jackson.JsonParser.close() java.lang.String.equals(<unknown>) <unknown>.nextValueToken() <unknown>.getCurrentName() org.json.JSONArray.JSONArray(java.util.Set<java.lang.Long>) <unknown>.nextValueToken() android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null) com.inovex.zabbixmobile.api.ZabbixService._startTransaction() org.json.JSONArray.JSONArray() <unknown>.nextProperty() java.lang.String.equals(java.lang.String) android.database.sqlite.SQLiteDatabase.update(<unknown>, android.content.ContentValues, <unknown>, null) java.util.Set<java.lang.Long>.add(<unknown>) <unknown>.get(<unknown>) <unknown>.get(<unknown>) android.content.ContentValues.put(<unknown>, java.lang.Long) java.lang.String.equals(java.lang.String) org.apache.http.StatusLine.getReasonPhrase() java.lang.RuntimeException.RuntimeException(java.lang.String) <unknown>.nextProperty() java.lang.Throwable.printStackTrace() java.lang.String.equals(<unknown>) java.lang.Long.parseLong(<unknown>) com.inovex.zabbixmobile.api.ZabbixService.importItems(<unknown>, int, boolean) org.json.JSONObject.put(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject) <unknown>.getCurrentName() android.content.ContentValues.put(<unknown>, java.lang.Long) org.apache.http.entity.StringEntity.StringEntity(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject) java.lang.String.equals(<unknown>) <unknown>.EventData() <unknown>.next() <unknown>.set(<unknown>, <unknown>) com.inovex.zabbixmobile.api.ZabbixService.CustomSSLSocketFactory.CustomSSLSocketFactory(java.security.KeyStore) com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject) <unknown>.getCurrentName() java.util.List<java.lang.String>.add(java.lang.String) org.json.JSONObject.put(java.lang.String, int) <unknown>.getText() org.json.JSONObject.put(java.lang.String, java.lang.String) org.apache.http.conn.ssl.SSLSocketFactory.setHostnameVerifier(org.apache.http.conn.ssl.X509HostnameVerifier) <unknown>.set(<unknown>, <unknown>) <unknown>.getText() org.json.JSONObject.put(java.lang.String, long) java.util.Date.Date() org.json.JSONObject.put(java.lang.String, int) org.json.JSONObject.put(java.lang.String, int) <unknown>.set(<unknown>, <unknown>) com.inovex.zabbixmobile.api.ZabbixService.authenticate() android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null) android.util.Log.d(java.lang.String, java.lang.String) java.lang.String.equals(java.lang.String) org.apache.http.HttpResponse.getEntity() org.json.JSONObject.JSONObject() com.inovex.zabbixmobile.api.ZabbixService.importItems(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader, int, boolean) <unknown>.getJsonArrayOrObjectReader() com.inovex.zabbixmobile.api.ZabbixService._startTransaction() com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, null, int) java.io.BufferedReader.read() org.json.JSONObject.put(java.lang.String, long) <unknown>.set(<unknown>, <unknown>) android.database.Cursor.getLong(<unknown>) java.lang.IllegalStateException.IllegalStateException(java.lang.String) org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.getCurrentName() android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null) android.util.Log.d(java.lang.String, java.lang.String) <unknown>.set(<unknown>, <unknown>) java.lang.String.equals(<unknown>) org.json.JSONObject.put(java.lang.String, java.lang.String) android.database.Cursor.moveToFirst() com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, java.lang.String) android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null) java.lang.String.equals(java.lang.String) com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, java.lang.String) <unknown>.getText() org.json.JSONObject.put(java.lang.String, java.lang.String) android.content.Intent.putExtra(java.lang.String, <unknown>) <unknown>.getCurrentName() android.content.res.Resources.getString(<unknown>) android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null) android.database.sqlite.SQLiteDatabase.setTransactionSuccessful() <unknown>.next() <unknown>.getText() <unknown>.nextValueToken() com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject) com.inovex.zabbixmobile.api.ZabbixService.showProgress(<unknown>) java.io.IOException.IOException(java.lang.String) <unknown>.getCurrentName() android.util.Log.d(java.lang.String, java.lang.String) java.lang.Object.toString() org.json.JSONObject.toString() <unknown>.set(<unknown>, <unknown>) org.json.JSONArray.JSONArray() org.apache.http.HttpResponse.getStatusLine() org.json.JSONArray.JSONArray() org.json.JSONObject.put(java.lang.String, java.lang.String) org.apache.http.impl.client.DefaultHttpClient.DefaultHttpClient() org.json.JSONObject.put(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject) org.apache.http.HttpResponse.getStatusLine() java.lang.String.equals(<unknown>) java.util.Date.Date() android.util.Log.i(java.lang.String, java.lang.String) android.content.Context.getResources() org.apache.http.impl.client.CloseableHttpClient.execute(org.apache.http.client.methods.HttpPost) com.inovex.zabbixmobile.api.ZabbixService._commitTransactionIfRecommended() android.content.Context.sendBroadcast(android.content.Intent) android.content.Context.sendBroadcast(android.content.Intent) com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, null, int) java.lang.Integer.parseInt(<unknown>) <unknown>.ApplicationData() com.inovex.zabbixmobile.api.ZabbixService.NoAPIAccessException.NoAPIAccessException() com.inovex.zabbixmobile.api.ZabbixService._commitTransactionIfRecommended() org.apache.http.message.AbstractHttpMessage.addHeader(java.lang.String, java.lang.String) org.json.JSONObject.put(java.lang.String, int) java.lang.String.replace(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService.importHostGroups(<unknown>) org.json.JSONArray.JSONArray() <unknown>.set(<unknown>, <unknown>) org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.set(<unknown>, <unknown>) org.json.JSONArray.JSONArray() java.lang.String.equals(<unknown>) com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, java.lang.String, int) <unknown>.nextProperty() <unknown>.set(<unknown>, java.lang.String) org.json.JSONObject.JSONObject() java.lang.String.contains(java.lang.String) org.apache.http.client.methods.HttpEntityEnclosingRequestBase.setEntity(org.apache.http.entity.StringEntity) com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject) com.inovex.zabbixmobile.api.ZabbixService.importTriggers(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader) org.json.JSONObject.put(java.lang.String, int) <unknown>.HostGroupData() <unknown>.JsonArrayOrObjectReader(org.codehaus.jackson.JsonParser) <unknown>.HostGroupData() <unknown>.nextProperty() java.lang.Long.parseLong(<unknown>) org.json.JSONObject.put(java.lang.String, java.lang.String) org.json.JSONObject.put(java.lang.String, org.json.JSONArray) org.json.JSONObject.put(java.lang.String, java.lang.Integer) <unknown>.set(<unknown>, <unknown>) <unknown>.close() org.json.JSONObject.put(java.lang.String, org.json.JSONArray) <unknown>.set(<unknown>, <unknown>) java.lang.String.equals(java.lang.String) android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null) <unknown>.next() org.json.JSONObject.toString() java.lang.String.equals(<unknown>) java.lang.String.equals(<unknown>) android.database.sqlite.SQLiteDatabase.query(<unknown>, null, <unknown>, null, null, null, null) <unknown>.set(<unknown>, <unknown>) org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.CacheData() <unknown>.getText() com.inovex.zabbixmobile.api.ZabbixService._startTransaction() <unknown>.set(<unknown>, <unknown>) com.inovex.zabbixmobile.api.ZabbixService._endTransaction() <unknown>.set(<unknown>, int) java.lang.String.equals(<unknown>) java.util.Date.getTime() java.lang.String.equals(java.lang.String) org.json.JSONObject.put(java.lang.String, int) <unknown>.set(<unknown>, <unknown>) java.lang.Integer.parseInt(<unknown>) org.codehaus.jackson.JsonParser.getCurrentName() <unknown>.nextProperty() com.inovex.zabbixmobile.api.ZabbixService._endTransaction() java.lang.String.equals(<unknown>) org.json.JSONObject.put(java.lang.String, int) android.database.sqlite.SQLiteDatabase.update(<unknown>, android.content.ContentValues, <unknown>, null) com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject) com.inovex.zabbixmobile.api.ZabbixService._endTransaction() java.lang.StringBuilder.append(char) <unknown>.set(<unknown>, <unknown>) <unknown>.get(<unknown>) <unknown>.set(<unknown>, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject) org.json.JSONObject.put(java.lang.String, java.lang.String) android.database.Cursor.getLong(<unknown>) java.lang.String.equals(<unknown>) org.json.JSONObject.put(java.lang.String, java.lang.String) org.json.JSONObject.JSONObject() org.apache.http.params.HttpProtocolParams.setVersion(org.apache.http.params.HttpParams, org.apache.http.HttpVersion) com.inovex.zabbixmobile.api.ZabbixService.importApplications(int, int, <unknown>) org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.HistoryDetailData() android.util.Log.d(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService._startTransaction() <unknown>.next() <unknown>.set(<unknown>, <unknown>) <unknown>.nextValueToken() org.json.JSONObject.JSONObject() java.lang.String.equals(<unknown>) com.inovex.zabbixmobile.api.ZabbixService.importScreenItems(<unknown>) java.lang.Long.parseLong(<unknown>) java.lang.Integer.parseInt(<unknown>) org.apache.http.client.methods.HttpPost.HttpPost(java.lang.String) org.apache.http.StatusLine.getStatusCode() <unknown>.set(<unknown>, int) java.lang.String.equals(java.lang.String) java.lang.String.equals(<unknown>) java.lang.String.equals(<unknown>) <unknown>.getCurrentName() java.util.ArrayList<java.lang.String>.ArrayList, String() com.inovex.zabbixmobile.api.ZabbixService._startTransaction() com.inovex.zabbixmobile.api.ZabbixService.importTriggers(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader) org.json.JSONArray.put(java.lang.String) <unknown>.nextValueToken() org.json.JSONArray.put(java.lang.String) <unknown>.set(<unknown>, <unknown>) org.json.JSONObject.put(java.lang.String, int) org.json.JSONObject.JSONObject() <unknown>.ScreenItemData() <unknown>.set(<unknown>, <unknown>) <unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>) android.preference.PreferenceManager.getDefaultSharedPreferences(android.content.Context) org.json.JSONObject.length() <unknown>.nextValueToken() java.util.HashSet<java.lang.Long>.HashSet, Long() java.lang.String.equals(java.lang.String) android.content.SharedPreferences.getBoolean(java.lang.String, boolean) <unknown>.insert(android.database.sqlite.SQLiteDatabase) org.json.JSONObject.put(java.lang.String, org.json.JSONArray) <unknown>.close() com.inovex.zabbixmobile.api.ZabbixService.importHosts(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader, int) org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.next() android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null) org.json.JSONObject.put(java.lang.String, java.lang.String) org.json.JSONObject.getString(java.lang.String) <unknown>.set(<unknown>, <unknown>) org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.close() org.json.JSONObject.getString(java.lang.String) java.lang.String.equals(java.lang.String) java.lang.Long.parseLong(<unknown>) org.codehaus.jackson.JsonParser.isClosed() org.json.JSONObject.put(java.lang.String, int) org.json.JSONObject.put(java.lang.String, org.json.JSONArray) java.lang.String.startsWith(java.lang.String) org.json.JSONObject.put(java.lang.String, long) <unknown>.close() org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.set(<unknown>, long) org.json.JSONObject.put(java.lang.String, org.json.JSONObject) <unknown>.set(<unknown>, <unknown>) com.inovex.zabbixmobile.api.ZabbixService._endTransaction() java.lang.String.replaceAll(java.lang.String, java.lang.String) org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.nextValueToken() org.json.JSONObject.put(java.lang.String, java.lang.String) org.json.JSONObject.put(java.lang.String, java.lang.String) org.apache.http.params.BasicHttpParams.BasicHttpParams() com.inovex.zabbixmobile.api.ZabbixService.importGraphItems(<unknown>) android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null) android.database.sqlite.SQLiteDatabase.beginTransaction() com.inovex.zabbixmobile.api.ZabbixService._commitTransactionIfRecommended() com.inovex.zabbixmobile.api.ZabbixService._endTransaction() java.lang.String.equals(<unknown>) <unknown>.insert(android.database.sqlite.SQLiteDatabase) <unknown>.insert(android.database.sqlite.SQLiteDatabase) org.json.JSONObject.put(java.lang.String, int) <unknown>.next() com.inovex.zabbixmobile.api.ZabbixService._startTransaction() android.content.SharedPreferences.getString(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, null, int) javax.net.SocketFactory.createSocket() java.lang.Long.parseLong(<unknown>) org.apache.http.client.CredentialsProvider.setCredentials(org.apache.http.auth.AuthScope, org.apache.http.auth.UsernamePasswordCredentials) org.json.JSONObject.put(java.lang.String, java.lang.String) org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.next() com.inovex.zabbixmobile.api.ZabbixService.HttpAuthorizationRequiredException.HttpAuthorizationRequiredException() android.database.sqlite.SQLiteQueryBuilder.query(android.database.sqlite.SQLiteDatabase, null, null, null, null, null, null) java.util.Date.Date() com.inovex.zabbixmobile.api.ZabbixService._commitTransactionIfRecommended() <unknown>.set(<unknown>, java.lang.String) org.json.JSONObject.JSONObject() <unknown>.next() <unknown>.set(<unknown>, <unknown>) <unknown>.set(<unknown>, <unknown>) com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject) java.lang.String.equals(java.lang.String) com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, java.lang.String) java.lang.String.indexOf(char) android.database.sqlite.SQLiteDatabase.query(<unknown>, null, <unknown>, null, null, null, null) android.preference.PreferenceManager.getDefaultSharedPreferences(android.content.Context) <unknown>.nextProperty() org.apache.http.impl.client.CloseableHttpClient.execute(org.apache.http.client.methods.HttpPost) <unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>) com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, java.lang.String) org.json.JSONObject.JSONObject() <unknown>.close() android.database.Cursor.getColumnIndex(<unknown>) android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null) org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.nextProperty() org.apache.http.conn.scheme.PlainSocketFactory.getSocketFactory() com.inovex.zabbixmobile.api.ZabbixService._commitTransactionIfRecommended() com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject) java.lang.StringBuilder.toString() org.json.JSONObject.put(java.lang.String, java.lang.String) android.database.sqlite.SQLiteQueryBuilder.SQLiteQueryBuilder() <unknown>.insert(android.database.sqlite.SQLiteDatabase) org.apache.http.conn.scheme.SchemeRegistry.register(org.apache.http.conn.scheme.Scheme) <unknown>.set(<unknown>, <unknown>) org.json.JSONObject.JSONObject(java.lang.String) com.inovex.zabbixmobile.api.ZabbixService.importHosts(<unknown>, null) java.lang.String.equals(<unknown>) <unknown>.set(<unknown>, <unknown>) <unknown>.set(<unknown>, <unknown>) java.lang.IllegalStateException.IllegalStateException(java.lang.String) java.lang.Double.parseDouble(<unknown>) android.content.ContentValues.put(<unknown>, java.lang.Long) android.util.Log.i(java.lang.String, java.lang.String) android.database.sqlite.SQLiteQueryBuilder.appendWhere(<unknown>) org.apache.http.conn.scheme.SchemeRegistry.register(org.apache.http.conn.scheme.Scheme) org.json.JSONObject.getInt(java.lang.String) org.json.JSONObject.put(java.lang.String, boolean) java.lang.Long.parseLong(<unknown>) java.lang.String.indexOf(char) java.lang.String.equals(java.lang.String) android.database.sqlite.SQLiteQueryBuilder.appendWhere(<unknown>) java.lang.String.length() java.lang.String.equals(<unknown>) com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject) <unknown>.nextProperty() <unknown>.next() android.content.SharedPreferences.getString(java.lang.String, java.lang.String) <unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>) com.inovex.zabbixmobile.api.ZabbixService.importTriggers(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader) <unknown>.GraphData() org.json.JSONArray.put(java.lang.String) org.apache.http.impl.client.AbstractHttpClient.getParams() <unknown>.set(<unknown>, long) <unknown>.set(<unknown>, <unknown>) org.json.JSONObject.getJSONObject(java.lang.String) org.json.JSONObject.put(java.lang.String, java.lang.String) java.lang.String.equals(java.lang.String) org.json.JSONObject.getString(java.lang.String) java.lang.String.equals(<unknown>) java.lang.String.equals(<unknown>) <unknown>.getCurrentName() java.lang.String.equals(<unknown>) com.inovex.zabbixmobile.api.ZabbixService.showProgress(int) <unknown>.getCurrentName() com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, java.lang.String, int) org.json.JSONObject.put(java.lang.String, int) org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.close() java.lang.String.replace(java.lang.String, java.lang.String) java.lang.String.equals(<unknown>) com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject) com.inovex.zabbixmobile.api.ZabbixService._endTransaction() android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null) android.database.Cursor.moveToNext() <unknown>.HostData() <unknown>.set(<unknown>, long) <unknown>.next() android.database.sqlite.SQLiteQueryBuilder.setTables(<unknown>) java.util.Date.getTime() org.json.JSONObject.put(java.lang.String, long) android.content.ContentValues.ContentValues(int) java.lang.Long.parseLong(<unknown>) org.apache.http.HttpResponse.getEntity() org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.getText() java.lang.String.equals(java.lang.String) <unknown>.set(<unknown>, <unknown>) <unknown>.set(<unknown>, <unknown>) <unknown>.set(<unknown>, <unknown>) javax.net.ssl.SSLContext.init(null, javax.net.ssl.TrustManager[], null) android.database.sqlite.SQLiteDatabase.endTransaction() java.lang.String.equals(<unknown>) com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, java.lang.String) android.util.Log.d(java.lang.String, java.lang.String) <unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>) <unknown>.next() <unknown>.close() <unknown>.insert(android.database.sqlite.SQLiteDatabase) org.json.JSONObject.put(java.lang.String, java.lang.String) java.lang.Throwable.getMessage() java.lang.String.equals(<unknown>) java.lang.String.equals(<unknown>) <unknown>.set(<unknown>, <unknown>) com.inovex.zabbixmobile.api.ZabbixService._endTransaction() javax.net.ssl.SSLContext.getSocketFactory() org.json.JSONObject.JSONObject() android.content.Context.getResources() org.json.JSONObject.put(java.lang.String, int) com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, null) com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, java.lang.String, int) org.json.JSONObject.put(java.lang.String, java.lang.String) java.lang.String.matches(java.lang.String) org.json.JSONArray.put(java.lang.String) <unknown>.set(<unknown>, <unknown>) android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null) android.content.Context.sendBroadcast(android.content.Intent) org.json.JSONObject.getJSONObject(java.lang.String) <unknown>.get(<unknown>) android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null) java.lang.String.equals(<unknown>) android.content.SharedPreferences.getBoolean(java.lang.String, boolean) java.lang.Throwable.printStackTrace() android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null) org.json.JSONObject.put(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService._startTransaction() android.content.Intent.putExtra(java.lang.String, int) org.json.JSONObject.JSONObject() <unknown>.getText() com.inovex.zabbixmobile.api.ZabbixService._endTransaction() org.apache.http.client.methods.HttpPost.HttpPost(java.lang.String) android.content.SharedPreferences.getString(java.lang.String, java.lang.String) <unknown>.GraphItemData() com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, java.lang.String, int) <unknown>.nextValueToken() org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager.ThreadSafeClientConnManager(org.apache.http.params.HttpParams, org.apache.http.conn.scheme.SchemeRegistry) <unknown>.ApplicationItemRelationData() java.lang.Object.toString() android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null) org.json.JSONArray.JSONArray() java.lang.String.equals(<unknown>) com.inovex.zabbixmobile.api.ZabbixService._startTransaction() org.json.JSONObject.put(java.lang.String, org.json.JSONArray) <unknown>.set(<unknown>, int) org.json.JSONObject.put(java.lang.String, int) com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, java.lang.String, int) org.json.JSONObject.put(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService.importItems(<unknown>, int, boolean) org.json.JSONObject.JSONObject() java.lang.Math.min(int, int) com.inovex.zabbixmobile.api.ZabbixService.showProgress(<unknown>) java.lang.String.equals(java.lang.String) android.content.Intent.Intent(<unknown>) java.lang.String.equals(<unknown>) org.json.JSONObject.put(java.lang.String, int) javax.net.ssl.SSLContext.getInstance(java.lang.String) android.content.res.Resources.getString(<unknown>) org.json.JSONObject.JSONObject() android.content.Intent.Intent(<unknown>) java.lang.String.equals(<unknown>) <unknown>.nextProperty() javax.net.ssl.SSLSocketFactory.createSocket(java.net.Socket, java.lang.String, int, boolean) org.json.JSONObject.put(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject) <unknown>.get(<unknown>) com.inovex.zabbixmobile.api.ZabbixService.importHosts(<unknown>, null) java.io.IOException.IOException(java.lang.String) java.lang.String.trim() java.lang.String.contains(java.lang.String) org.apache.http.entity.StringEntity.StringEntity(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService._endTransaction() com.inovex.zabbixmobile.api.ZabbixService.importTriggers(<unknown>) .X509TrustManager() com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject) android.graphics.Color.parseColor(<unknown>) com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, null) org.json.JSONObject.getJSONArray(java.lang.String) org.apache.http.client.params.HttpClientParams.setRedirecting(org.apache.http.params.HttpParams, boolean) com.inovex.zabbixmobile.api.ZabbixService._startTransaction() <unknown>.getCurrentName() <unknown>.getJsonArrayOrObjectReader() java.lang.String.equals(<unknown>) java.lang.Long.parseLong(<unknown>) android.util.Log.d(java.lang.String, java.lang.String) org.codehaus.jackson.JsonParser.getCurrentToken() org.codehaus.jackson.JsonParser.nextValue() java.lang.Long.parseLong(<unknown>) <unknown>.getText() java.util.Date.getTime() android.content.Intent.putExtra(java.lang.String, <unknown>) android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null) <unknown>.get(<unknown>) android.database.Cursor.moveToFirst() org.apache.http.client.methods.HttpEntityEnclosingRequestBase.setEntity(org.apache.http.entity.StringEntity) com.inovex.zabbixmobile.api.ZabbixService._commitTransactionIfRecommended() com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, null) android.database.sqlite.SQLiteQueryBuilder.appendWhere(<unknown>) org.apache.http.auth.UsernamePasswordCredentials.UsernamePasswordCredentials(java.lang.String, java.lang.String) java.util.Date.getTime() java.lang.String.equals(<unknown>) com.inovex.zabbixmobile.api.ZabbixService._endTransaction() org.json.JSONObject.put(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService.authenticate() java.lang.String.equals(<unknown>) org.json.JSONObject.put(java.lang.String, java.lang.String) org.json.JSONObject.put(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService.NoAPIAccessException.NoAPIAccessException() org.json.JSONArray.put(long) com.inovex.zabbixmobile.api.ZabbixService._endTransaction() <unknown>.getJsonArrayOrObjectReader() android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null) <unknown>.ScreenData() java.util.Date.Date() java.util.Date.Date() <unknown>.set(<unknown>, long) <unknown>.getCurrentName() org.json.JSONObject.put(java.lang.String, org.json.JSONArray) <unknown>.set(<unknown>, long) org.json.JSONObject.put(java.lang.String, java.lang.String) org.apache.http.params.HttpConnectionParams.setConnectionTimeout(org.apache.http.params.HttpParams, int) org.json.JSONArray.length() <unknown>.set(<unknown>, java.lang.String) <unknown>.set(<unknown>, long) java.util.Date.getTime() <unknown>.set(<unknown>, <unknown>) <unknown>.set(<unknown>, <unknown>) org.json.JSONArray.put(java.lang.String) java.lang.String.equals(<unknown>) com.inovex.zabbixmobile.api.ZabbixService.HttpAuthorizationRequiredException.HttpAuthorizationRequiredException() <unknown>.getText() org.json.JSONObject.put(java.lang.String, org.json.JSONArray) com.inovex.zabbixmobile.api.ZabbixService.importEvents(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader, null) org.json.JSONObject.JSONObject() com.inovex.zabbixmobile.api.ZabbixService.importHostGroups(<unknown>) <unknown>.set(<unknown>, <unknown>) org.json.JSONObject.toString() java.lang.Integer.parseInt(<unknown>) android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null) org.apache.http.params.HttpProtocolParams.setContentCharset(org.apache.http.params.HttpParams, java.lang.String) <unknown>.get(<unknown>) java.lang.String.equals(<unknown>) <unknown>.set(<unknown>, <unknown>) <unknown>.nextValueToken() <unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>) org.json.JSONObject.put(java.lang.String, org.json.JSONArray) org.json.JSONObject.put(java.lang.String, java.lang.Integer) <unknown>.getText() <unknown>.set(<unknown>, <unknown>) org.apache.http.message.AbstractHttpMessage.addHeader(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject) org.json.JSONObject.getJSONArray(java.lang.String) java.security.KeyStore.load(null, null) java.lang.String.replace(java.lang.String, java.lang.String) java.lang.Long.parseLong(<unknown>) org.json.JSONObject.toString() com.inovex.zabbixmobile.api.ZabbixService.importTriggers(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader) android.util.Log.d(java.lang.String, java.lang.String) android.content.SharedPreferences.getString(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, java.lang.String) <unknown>.getJsonArrayOrObjectReader() <unknown>.TriggerData() android.content.SharedPreferences.getString(java.lang.String, java.lang.String) android.content.Intent.Intent(<unknown>) org.json.JSONObject.put(java.lang.String, java.lang.String) org.apache.http.impl.client.AbstractHttpClient.getCredentialsProvider() <unknown>.set(<unknown>, <unknown>) java.io.IOException.IOException(java.lang.String) java.lang.String.trim() org.json.JSONObject.put(java.lang.String, org.json.JSONArray) java.lang.String.split(java.lang.String) java.lang.String.equals(java.lang.String) java.lang.String.endsWith(java.lang.String) <unknown>.set(<unknown>, int) com.inovex.zabbixmobile.api.ZabbixService.showProgress(int) <unknown>.ItemData() org.json.JSONObject.put(java.lang.String, int) <unknown>.set(<unknown>, <unknown>) org.codehaus.jackson.JsonParser.getText() android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null) org.apache.http.impl.client.DefaultHttpClient.DefaultHttpClient(org.apache.http.conn.ClientConnectionManager, org.apache.http.params.HttpParams) <unknown>.close() java.lang.IllegalStateException.IllegalStateException(java.lang.String) org.json.JSONObject.put(java.lang.String, java.lang.String) org.codehaus.jackson.JsonParser.nextToken() android.database.Cursor.getColumnIndex(<unknown>) org.json.JSONObject.put(java.lang.String, org.json.JSONArray) <unknown>.nextValueToken() com.inovex.zabbixmobile.api.ZabbixService._startTransaction() org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.set(<unknown>, java.lang.String) java.lang.String.substring(int, int) java.lang.Long.parseLong(<unknown>) org.json.JSONObject.put(java.lang.String, java.lang.String) org.json.JSONObject.getInt(java.lang.String) <unknown>.getJsonArrayOrObjectReader() java.lang.String.equals(java.lang.String) <unknown>.set(<unknown>, <unknown>) <unknown>.set(<unknown>, <unknown>) java.security.KeyStore.getInstance(java.lang.String) java.lang.Integer.parseInt(<unknown>) java.lang.String.equals(java.lang.String) <unknown>.nextProperty() android.content.Intent.putExtra(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, null) <unknown>.set(<unknown>, int) java.io.BufferedReader.BufferedReader(java.io.InputStreamReader) com.inovex.zabbixmobile.api.ZabbixService.importEvents(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader, int) java.security.KeyStore.getDefaultType() java.lang.String.equals(<unknown>) <unknown>.getText() org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.set(<unknown>, java.lang.Object) org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.insert(android.database.sqlite.SQLiteDatabase) <unknown>.nextProperty() com.inovex.zabbixmobile.api.ZabbixService._startTransaction() org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.close() <unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>) org.json.JSONObject.put(java.lang.String, long) com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, null, int) <unknown>.set(<unknown>, <unknown>) java.lang.String.equals(<unknown>) org.apache.http.conn.scheme.Scheme.Scheme(java.lang.String, org.apache.http.conn.scheme.PlainSocketFactory, int) org.json.JSONObject.put(java.lang.String, java.lang.String) java.lang.String.equals(<unknown>)"],
      "c_callsites_added_t": ["org.json.JSONObject.put(java.lang.String, java.lang.String)"],
      "c_methods_t": ["ApplicationData ApplicationItemRelationData ArrayList, String BasicHttpParams BufferedReader CacheData ContentValues CustomSSLSocketFactory Date DefaultHttpClient EventData GraphData GraphItemData HashSet, Long HistoryDetailData HostData HostGroupData HttpAuthorizationRequiredException HttpPost IOException IllegalStateException InputStreamReader Intent ItemData JSONArray JSONObject JsonArrayOrObjectReader JsonFactory NoAPIAccessException PreconditionFailedException RuntimeException SQLiteQueryBuilder Scheme SchemeRegistry ScreenData ScreenItemData StringBuilder StringEntity ThreadSafeClientConnManager TriggerData UsernamePasswordCredentials X509TrustManager _commitTransactionIfRecommended _endTransaction _queryBuffer _queryStream _startTransaction add addHeader append appendWhere authenticate beginTransaction close contains createJsonParser createSocket d delete endTransaction endsWith equals execute get getBoolean getColumnIndex getContent getCredentialsProvider getCurrentName getCurrentToken getDefaultSharedPreferences getDefaultType getEntity getInstance getInt getJSONArray getJSONObject getJsonArrayOrObjectReader getLong getMessage getParams getReasonPhrase getResources getSocketFactory getStatusCode getStatusLine getString getText getTime i importApplications importEvents importGraphItems importHostGroups importHosts importItems importScreenItems importTriggers inTransaction indexOf init insert isCached isClosed length load matches min moveToFirst moveToNext next nextProperty nextToken nextValue nextValueToken parseColor parseDouble parseInt parseLong printStackTrace put putExtra query read register replace replaceAll sendBroadcast set setCached setConnectionTimeout setContentCharset setCredentials setEntity setHostnameVerifier setRedirecting setTables setTransactionSuccessful setVersion showProgress split startsWith substring toString trim update"],
      "id": "inovex/zax\u0000src/com/inovex/zabbixmobile/api/ZabbixService.java\u00003820d9533b270822d05ab19af8a9c14f585e1749\u00005d91d0066c3f1f3f2fe253a9c316513d370faa5f",
      "p_comments_t": ["\t\t\t// create ApplicationItemRelation /** \n * public, for the unit test\n */\n /** \n * import the hosts from stream\n * @param jsonArray stream\n * @param numHosts count of hosts for progressbar. null if unknown.\n * @return Object[] {(String) comma-separated all Hostnames, (Long) 1. host id}\n * @throws JsonParseException\n * @throws IOException\n */\n \t\t\t// result array found /** \n * import graph items\n * @param graphItems\n * @return true, if graphid column has to be updated from -1 to the correct graphid later.\n * @throws JsonParseException\n * @throws NumberFormatException\n * @throws IOException\n */\n \t\t\t\t\t\t// save only every 20th \t\t\t// wrong password. token remains null \t\t\t// the past 2 hours \t\t\t\t\t// data are unuseable, e.g. because it's a string /** \n * @param events stream\n * @param numEvents if null, no progressbar-update AND only isert, if it does not exist. If !null, progressbar-update AND always insert without checking\n * @throws JsonParseException\n * @throws IOException\n */\n \t\t\t\t\t// Precondition failed / Looks like Zabbix 1.8.2 \t\t\t// get API version \t\t\t// if #0 \"other\" does not exist yet, it has to be created \t\t\t\t\t// later the IDs will be replaced with the correct /** \n * zabbix api call. data will be parsed as json object on-the-fly. Caution: use this only for api calls with a small return data.\n * @param method\n * @param params\n * @return\n * @throws ClientProtocolException\n * @throws IOException\n * @throws JSONException\n * @throws HttpAuthorizationRequiredException\n * @throws NoAPIAccessException\n */\n /** \n * begin sql transaction\n */\n \t\t\t\t\t\t// first do a new auth and then try the same api call again \t\t\t\t// no itemid \t\t\t// count of items /** \n * init\n * @param context android context\n * @param zabbixLocalDB sqlite\n */\n \t\t\t// create applications that does not exist \t\t\t\t// so we use a fiction \t\t\t// only resouretype == 0 /** \n * probably too old zabbix <= 1.8.2\n */\n /** \n * zabbix auth. user and pwd from app preferences\n * @return true success\n * @throws ClientProtocolException\n * @throws IOException\n * @throws JSONException\n * @throws HttpAuthorizationRequiredException\n * @throws NoAPIAccessException\n */\n /** \n * close the last http stream\n */\n \t\t\t// Workaround: historydetails only comes if you use the correct \"history\"-parameter. /** \n * transforms the progress\n * @param start 0% => start%\n * @param end 100% => end%\n */\n \t\t\t\t// in Zabbix version <2.0, this is not default \t\t\t\t// file not found \t\t\t\t\t// hex string => color int \t\tHttpClientParams.setRedirecting(params, true); // redirecting /** \n * The API version. From 1.8.3 (maybe earlier) to 2.0 (excluded), this was 1.3. With 2.0, it changed to 1.4.  Finally, since 2.0.4, the API version matches the program version.\n */\n \t\t\t// if applicable replace placeholder \t\t\t// if graphid-column was not set, this must be done later. temporary graphid=-1 \t\t// for GUI unit test, just return true /** \n * imports the \"warning\"-triggers\n * @throws JSONException\n * @throws IOException\n * @throws HttpAuthorizationRequiredException\n * @throws NoAPIAccessException\n */\n \t\t\t// event is parsed and can be inserted into the db \t\tpublic static final int EVENT_GET_TIME_FROM_SHIFT = 7*24*60*60; // -7 days \t\t// http request \t\t\t\t\t// store hosts namen \t\t\t\t// http auth failed \t\t\t\t\t// at this point itemid and hostid is unknown \t\t\t\t\t// import triggers \t\t\t// we try them all, until we get results. /** \n * importiert ein trigger mit dem attribute itemid. ggf. wird der trigger zuerst gelöscht und neu angelegt. imports a trigger with the attribute itemid. if trigger already exists, it will be removed first.\n * @param triggerid\n * @throws JSONException\n * @throws IOException\n * @throws HttpAuthorizationRequiredException\n * @throws NoAPIAccessException\n */\n \t\t\t\t\t// import hosts \t\t\t// for unit test \t\t\t\t// ignore \t\t\t// or a json object /** \n * zabbix error: no api access\n */\n /** \n * counts the sql inserts/updates and do a transaction commit to save the memory\n */\n \t\t\t// send intent to GUI \t\t\t\t\t// before zabbix 2.x the name field was \"description\" \t\t\t\t\t// if we get an empty array, we try another history parameter \t\t\t\t\t// store the first item id \t\t// check if the trigger exists and if the itemid was set /** \n * global constants\n */\n \t\t\t\t// create \"other\" hostgroup #1 \t\t\t// if there's no application, the ID #0 must be added (for other) \t\t\t\t\t// because of this, all applicationrelations will be saved with itemid and hostid \"-1\". \t\t\t\t\t\t.put(\"history\", historytype) // for integer ? /** \n * interface to connect to the zabbix server\n */\n /** \n * acknowledge zabbix event. Sets ack-flag with comment. Caution: This is supported only for Zabbix version >= 1.8.4\n * @param eventid\n * @param comment\n * @return true, success.\n * @throws ClientProtocolException\n * @throws IOException\n * @throws JSONException\n * @throws HttpAuthorizationRequiredException\n * @throws NoAPIAccessException\n */\n \t\t\t// store the last stream to close it if an exception will be thrown /** \n * zabbix api call as stream.\n * @param method\n * @param params\n * @return stream im json array wrapper\n * @throws JSONException\n * @throws IOException\n * @throws HttpAuthorizationRequiredException\n * @throws NoAPIAccessException\n */\n \t\t// if applicable http auth \t\t\t// correct historytype found and there are data \t\t\t\t// count of the entries cannot be detected (zabbix bug), /** \n * import items from stream.\n * @param items stream\n * @param numItems count for progressbar, if 0 no progressbarupdate\n * @param checkBeforeInsert if true, only make an insert if item does not exist\n * @return the first item id\n * @throws JsonParseException\n * @throws IOException\n */\n \t\t\t// collect all graphids /** \n * http auth is needed\n */\n \t\t\t// ignore for unit test /** \n * commit sql transaction\n */\n \t\t\t// delete old graphs \t\t\t// host without group will get group #0 (other) \t\t\t// there's no result \t\tpublic static final int HISTORY_GET_TIME_FROM_SHIFT = 24*60*60; // -24h \t\t// if applicable, transform the progress \t\t\t// SSL not trusted \t\t\t// internet problem \t\t\tif (jp.nextToken() != JsonToken.START_ARRAY && jp.getCurrentToken() != JsonToken.START_OBJECT) { // go inside the array \t\tpublic static final int CACHE_LIFETIME_APPLICATIONS = 2*24*60*60; // 2 days \t\t\t\t\t// since zabbix 2.x is the name of the item \"name\" \t\t\t// now the \"-1\" IDs of applicationsrelation will be replaced with the correct itemID \t\t\t// get count of hosts /** \n * import the newest events\n * @throws ClientProtocolException\n * @throws IOException\n * @throws JSONException\n * @throws HttpAuthorizationRequiredException\n * @throws NoAPIAccessException\n */\n /** \n * updates the progressbar in the gui\n * @param i 0..100\n */\n \t\t\t\t\t\t// ignore \t\t\t\t\t// first do a new auth and then try the same api call again /** \n * import the newest event of a trigger\n * @param triggerid\n * @throws JSONException\n * @throws IOException\n * @throws HttpAuthorizationRequiredException\n * @throws NoAPIAccessException\n */\n \t\t// it can be an (empty) array \t\t\t// this parameter can be \"null\" or a number 0-4. Because we don't know when to use which, \t\t\t// clear triggers"],
      "p_email_sni": "jschamburger@inovex.de",
      "c_callsites_removed_t": ["<empty>"],
      "c_callsites_cs": "<unknown>.set(<unknown>, <unknown>)#org.apache.http.HttpEntity.getContent()#java.lang.String.equals(java.lang.String)#org.json.JSONArray.JSONArray()#<unknown>.set(<unknown>, java.lang.Object)#org.json.JSONObject.put(java.lang.String, java.lang.Integer)#org.json.JSONArray.put(java.lang.String)#org.json.JSONObject.JSONObject()#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.codehaus.jackson.JsonFactory.createJsonParser(java.io.InputStream)#java.lang.String.equals(<unknown>)#org.apache.http.StatusLine.getStatusCode()#<unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>)#org.json.JSONObject.put(java.lang.String, java.lang.String)#android.database.sqlite.SQLiteDatabase.inTransaction()#android.util.Log.d(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService._startTransaction()#java.lang.String.equals(java.lang.String)#org.codehaus.jackson.JsonFactory.JsonFactory()#com.inovex.zabbixmobile.api.ZabbixService._endTransaction()#org.json.JSONObject.put(java.lang.String, int)#android.content.ContentValues.ContentValues(int)#org.apache.http.conn.scheme.SchemeRegistry.SchemeRegistry()#<unknown>.insert(android.database.sqlite.SQLiteDatabase)#<unknown>.insert(android.database.sqlite.SQLiteDatabase)#<unknown>.getJsonArrayOrObjectReader()#com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject)#com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject)#com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject)#org.json.JSONObject.getJSONObject(java.lang.String)#java.io.InputStreamReader.InputStreamReader(java.io.InputStream)#android.content.Intent.putExtra(java.lang.String, <unknown>)#org.json.JSONArray.length()#java.lang.String.equals(java.lang.String)#<unknown>.set(<unknown>, <unknown>)#java.lang.String.equals(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService.PreconditionFailedException.PreconditionFailedException()#java.lang.StringBuilder.StringBuilder()#android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null)#<unknown>.nextValueToken()#org.json.JSONObject.JSONObject()#org.json.JSONObject.put(java.lang.String, int)#org.json.JSONObject.put(java.lang.String, org.json.JSONArray)#java.lang.String.equals(<unknown>)#<unknown>.get(<unknown>)#<unknown>.insert(android.database.sqlite.SQLiteDatabase)#android.content.Intent.putExtra(java.lang.String, <unknown>)#java.lang.String.equals(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, java.lang.String, int)#com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject)#android.util.Log.d(java.lang.String, java.lang.String)#org.json.JSONObject.put(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject)#org.apache.http.conn.scheme.Scheme.Scheme(java.lang.String, org.apache.http.conn.ssl.SSLSocketFactory, int)#org.apache.http.HttpEntity.getContent()#org.codehaus.jackson.JsonParser.close()#java.lang.String.equals(<unknown>)#<unknown>.nextValueToken()#<unknown>.getCurrentName()#org.json.JSONArray.JSONArray(java.util.Set<java.lang.Long>)#<unknown>.nextValueToken()#android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null)#com.inovex.zabbixmobile.api.ZabbixService._startTransaction()#org.json.JSONArray.JSONArray()#<unknown>.nextProperty()#java.lang.String.equals(java.lang.String)#android.database.sqlite.SQLiteDatabase.update(<unknown>, android.content.ContentValues, <unknown>, null)#java.util.Set<java.lang.Long>.add(<unknown>)#<unknown>.get(<unknown>)#<unknown>.get(<unknown>)#android.content.ContentValues.put(<unknown>, java.lang.Long)#java.lang.String.equals(java.lang.String)#org.apache.http.StatusLine.getReasonPhrase()#java.lang.RuntimeException.RuntimeException(java.lang.String)#<unknown>.nextProperty()#java.lang.Throwable.printStackTrace()#java.lang.String.equals(<unknown>)#java.lang.Long.parseLong(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService.importItems(<unknown>, int, boolean)#org.json.JSONObject.put(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject)#<unknown>.getCurrentName()#android.content.ContentValues.put(<unknown>, java.lang.Long)#org.apache.http.entity.StringEntity.StringEntity(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject)#java.lang.String.equals(<unknown>)#<unknown>.EventData()#<unknown>.next()#<unknown>.set(<unknown>, <unknown>)#com.inovex.zabbixmobile.api.ZabbixService.CustomSSLSocketFactory.CustomSSLSocketFactory(java.security.KeyStore)#com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject)#<unknown>.getCurrentName()#java.util.List<java.lang.String>.add(java.lang.String)#org.json.JSONObject.put(java.lang.String, int)#<unknown>.getText()#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.apache.http.conn.ssl.SSLSocketFactory.setHostnameVerifier(org.apache.http.conn.ssl.X509HostnameVerifier)#<unknown>.set(<unknown>, <unknown>)#<unknown>.getText()#org.json.JSONObject.put(java.lang.String, long)#java.util.Date.Date()#org.json.JSONObject.put(java.lang.String, int)#org.json.JSONObject.put(java.lang.String, int)#<unknown>.set(<unknown>, <unknown>)#com.inovex.zabbixmobile.api.ZabbixService.authenticate()#android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null)#android.util.Log.d(java.lang.String, java.lang.String)#java.lang.String.equals(java.lang.String)#org.apache.http.HttpResponse.getEntity()#org.json.JSONObject.JSONObject()#com.inovex.zabbixmobile.api.ZabbixService.importItems(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader, int, boolean)#<unknown>.getJsonArrayOrObjectReader()#com.inovex.zabbixmobile.api.ZabbixService._startTransaction()#com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, null, int)#java.io.BufferedReader.read()#org.json.JSONObject.put(java.lang.String, long)#<unknown>.set(<unknown>, <unknown>)#android.database.Cursor.getLong(<unknown>)#java.lang.IllegalStateException.IllegalStateException(java.lang.String)#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.getCurrentName()#android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null)#android.util.Log.d(java.lang.String, java.lang.String)#<unknown>.set(<unknown>, <unknown>)#java.lang.String.equals(<unknown>)#org.json.JSONObject.put(java.lang.String, java.lang.String)#android.database.Cursor.moveToFirst()#com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, java.lang.String)#android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null)#java.lang.String.equals(java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, java.lang.String)#<unknown>.getText()#org.json.JSONObject.put(java.lang.String, java.lang.String)#android.content.Intent.putExtra(java.lang.String, <unknown>)#<unknown>.getCurrentName()#android.content.res.Resources.getString(<unknown>)#android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null)#android.database.sqlite.SQLiteDatabase.setTransactionSuccessful()#<unknown>.next()#<unknown>.getText()#<unknown>.nextValueToken()#com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject)#com.inovex.zabbixmobile.api.ZabbixService.showProgress(<unknown>)#java.io.IOException.IOException(java.lang.String)#<unknown>.getCurrentName()#android.util.Log.d(java.lang.String, java.lang.String)#java.lang.Object.toString()#org.json.JSONObject.toString()#<unknown>.set(<unknown>, <unknown>)#org.json.JSONArray.JSONArray()#org.apache.http.HttpResponse.getStatusLine()#org.json.JSONArray.JSONArray()#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.apache.http.impl.client.DefaultHttpClient.DefaultHttpClient()#org.json.JSONObject.put(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject)#org.apache.http.HttpResponse.getStatusLine()#java.lang.String.equals(<unknown>)#java.util.Date.Date()#android.util.Log.i(java.lang.String, java.lang.String)#android.content.Context.getResources()#org.apache.http.impl.client.CloseableHttpClient.execute(org.apache.http.client.methods.HttpPost)#com.inovex.zabbixmobile.api.ZabbixService._commitTransactionIfRecommended()#android.content.Context.sendBroadcast(android.content.Intent)#android.content.Context.sendBroadcast(android.content.Intent)#com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, null, int)#java.lang.Integer.parseInt(<unknown>)#<unknown>.ApplicationData()#com.inovex.zabbixmobile.api.ZabbixService.NoAPIAccessException.NoAPIAccessException()#com.inovex.zabbixmobile.api.ZabbixService._commitTransactionIfRecommended()#org.apache.http.message.AbstractHttpMessage.addHeader(java.lang.String, java.lang.String)#org.json.JSONObject.put(java.lang.String, int)#java.lang.String.replace(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService.importHostGroups(<unknown>)#org.json.JSONArray.JSONArray()#<unknown>.set(<unknown>, <unknown>)#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.set(<unknown>, <unknown>)#org.json.JSONArray.JSONArray()#java.lang.String.equals(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, java.lang.String, int)#<unknown>.nextProperty()#<unknown>.set(<unknown>, java.lang.String)#org.json.JSONObject.JSONObject()#java.lang.String.contains(java.lang.String)#org.apache.http.client.methods.HttpEntityEnclosingRequestBase.setEntity(org.apache.http.entity.StringEntity)#com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject)#com.inovex.zabbixmobile.api.ZabbixService.importTriggers(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader)#org.json.JSONObject.put(java.lang.String, int)#<unknown>.HostGroupData()#<unknown>.JsonArrayOrObjectReader(org.codehaus.jackson.JsonParser)#<unknown>.HostGroupData()#<unknown>.nextProperty()#java.lang.Long.parseLong(<unknown>)#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.json.JSONObject.put(java.lang.String, org.json.JSONArray)#org.json.JSONObject.put(java.lang.String, java.lang.Integer)#<unknown>.set(<unknown>, <unknown>)#<unknown>.close()#org.json.JSONObject.put(java.lang.String, org.json.JSONArray)#<unknown>.set(<unknown>, <unknown>)#java.lang.String.equals(java.lang.String)#android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null)#<unknown>.next()#org.json.JSONObject.toString()#java.lang.String.equals(<unknown>)#java.lang.String.equals(<unknown>)#android.database.sqlite.SQLiteDatabase.query(<unknown>, null, <unknown>, null, null, null, null)#<unknown>.set(<unknown>, <unknown>)#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.CacheData()#<unknown>.getText()#com.inovex.zabbixmobile.api.ZabbixService._startTransaction()#<unknown>.set(<unknown>, <unknown>)#com.inovex.zabbixmobile.api.ZabbixService._endTransaction()#<unknown>.set(<unknown>, int)#java.lang.String.equals(<unknown>)#java.util.Date.getTime()#java.lang.String.equals(java.lang.String)#org.json.JSONObject.put(java.lang.String, int)#<unknown>.set(<unknown>, <unknown>)#java.lang.Integer.parseInt(<unknown>)#org.codehaus.jackson.JsonParser.getCurrentName()#<unknown>.nextProperty()#com.inovex.zabbixmobile.api.ZabbixService._endTransaction()#java.lang.String.equals(<unknown>)#org.json.JSONObject.put(java.lang.String, int)#android.database.sqlite.SQLiteDatabase.update(<unknown>, android.content.ContentValues, <unknown>, null)#com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject)#com.inovex.zabbixmobile.api.ZabbixService._endTransaction()#java.lang.StringBuilder.append(char)#<unknown>.set(<unknown>, <unknown>)#<unknown>.get(<unknown>)#<unknown>.set(<unknown>, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject)#org.json.JSONObject.put(java.lang.String, java.lang.String)#android.database.Cursor.getLong(<unknown>)#java.lang.String.equals(<unknown>)#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.json.JSONObject.JSONObject()#org.apache.http.params.HttpProtocolParams.setVersion(org.apache.http.params.HttpParams, org.apache.http.HttpVersion)#com.inovex.zabbixmobile.api.ZabbixService.importApplications(int, int, <unknown>)#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.HistoryDetailData()#android.util.Log.d(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService._startTransaction()#<unknown>.next()#<unknown>.set(<unknown>, <unknown>)#<unknown>.nextValueToken()#org.json.JSONObject.JSONObject()#java.lang.String.equals(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService.importScreenItems(<unknown>)#java.lang.Long.parseLong(<unknown>)#java.lang.Integer.parseInt(<unknown>)#org.apache.http.client.methods.HttpPost.HttpPost(java.lang.String)#org.apache.http.StatusLine.getStatusCode()#<unknown>.set(<unknown>, int)#java.lang.String.equals(java.lang.String)#java.lang.String.equals(<unknown>)#java.lang.String.equals(<unknown>)#<unknown>.getCurrentName()#java.util.ArrayList<java.lang.String>.ArrayList, String()#com.inovex.zabbixmobile.api.ZabbixService._startTransaction()#com.inovex.zabbixmobile.api.ZabbixService.importTriggers(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader)#org.json.JSONArray.put(java.lang.String)#<unknown>.nextValueToken()#org.json.JSONArray.put(java.lang.String)#<unknown>.set(<unknown>, <unknown>)#org.json.JSONObject.put(java.lang.String, int)#org.json.JSONObject.JSONObject()#<unknown>.ScreenItemData()#<unknown>.set(<unknown>, <unknown>)#<unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>)#android.preference.PreferenceManager.getDefaultSharedPreferences(android.content.Context)#org.json.JSONObject.length()#<unknown>.nextValueToken()#java.util.HashSet<java.lang.Long>.HashSet, Long()#java.lang.String.equals(java.lang.String)#android.content.SharedPreferences.getBoolean(java.lang.String, boolean)#<unknown>.insert(android.database.sqlite.SQLiteDatabase)#org.json.JSONObject.put(java.lang.String, org.json.JSONArray)#<unknown>.close()#com.inovex.zabbixmobile.api.ZabbixService.importHosts(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader, int)#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.next()#android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null)#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.json.JSONObject.getString(java.lang.String)#<unknown>.set(<unknown>, <unknown>)#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.close()#org.json.JSONObject.getString(java.lang.String)#java.lang.String.equals(java.lang.String)#java.lang.Long.parseLong(<unknown>)#org.codehaus.jackson.JsonParser.isClosed()#org.json.JSONObject.put(java.lang.String, int)#org.json.JSONObject.put(java.lang.String, org.json.JSONArray)#java.lang.String.startsWith(java.lang.String)#org.json.JSONObject.put(java.lang.String, long)#<unknown>.close()#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.set(<unknown>, long)#org.json.JSONObject.put(java.lang.String, org.json.JSONObject)#<unknown>.set(<unknown>, <unknown>)#com.inovex.zabbixmobile.api.ZabbixService._endTransaction()#java.lang.String.replaceAll(java.lang.String, java.lang.String)#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.nextValueToken()#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.apache.http.params.BasicHttpParams.BasicHttpParams()#com.inovex.zabbixmobile.api.ZabbixService.importGraphItems(<unknown>)#android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null)#android.database.sqlite.SQLiteDatabase.beginTransaction()#com.inovex.zabbixmobile.api.ZabbixService._commitTransactionIfRecommended()#com.inovex.zabbixmobile.api.ZabbixService._endTransaction()#java.lang.String.equals(<unknown>)#<unknown>.insert(android.database.sqlite.SQLiteDatabase)#<unknown>.insert(android.database.sqlite.SQLiteDatabase)#org.json.JSONObject.put(java.lang.String, int)#<unknown>.next()#com.inovex.zabbixmobile.api.ZabbixService._startTransaction()#android.content.SharedPreferences.getString(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, null, int)#javax.net.SocketFactory.createSocket()#java.lang.Long.parseLong(<unknown>)#org.apache.http.client.CredentialsProvider.setCredentials(org.apache.http.auth.AuthScope, org.apache.http.auth.UsernamePasswordCredentials)#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.next()#com.inovex.zabbixmobile.api.ZabbixService.HttpAuthorizationRequiredException.HttpAuthorizationRequiredException()#android.database.sqlite.SQLiteQueryBuilder.query(android.database.sqlite.SQLiteDatabase, null, null, null, null, null, null)#java.util.Date.Date()#com.inovex.zabbixmobile.api.ZabbixService._commitTransactionIfRecommended()#<unknown>.set(<unknown>, java.lang.String)#org.json.JSONObject.JSONObject()#<unknown>.next()#<unknown>.set(<unknown>, <unknown>)#<unknown>.set(<unknown>, <unknown>)#com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject)#java.lang.String.equals(java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, java.lang.String)#java.lang.String.indexOf(char)#android.database.sqlite.SQLiteDatabase.query(<unknown>, null, <unknown>, null, null, null, null)#android.preference.PreferenceManager.getDefaultSharedPreferences(android.content.Context)#<unknown>.nextProperty()#org.apache.http.impl.client.CloseableHttpClient.execute(org.apache.http.client.methods.HttpPost)#<unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>)#com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, java.lang.String)#org.json.JSONObject.JSONObject()#<unknown>.close()#android.database.Cursor.getColumnIndex(<unknown>)#android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null)#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.nextProperty()#org.apache.http.conn.scheme.PlainSocketFactory.getSocketFactory()#com.inovex.zabbixmobile.api.ZabbixService._commitTransactionIfRecommended()#com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject)#java.lang.StringBuilder.toString()#org.json.JSONObject.put(java.lang.String, java.lang.String)#android.database.sqlite.SQLiteQueryBuilder.SQLiteQueryBuilder()#<unknown>.insert(android.database.sqlite.SQLiteDatabase)#org.apache.http.conn.scheme.SchemeRegistry.register(org.apache.http.conn.scheme.Scheme)#<unknown>.set(<unknown>, <unknown>)#org.json.JSONObject.JSONObject(java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService.importHosts(<unknown>, null)#java.lang.String.equals(<unknown>)#<unknown>.set(<unknown>, <unknown>)#<unknown>.set(<unknown>, <unknown>)#java.lang.IllegalStateException.IllegalStateException(java.lang.String)#java.lang.Double.parseDouble(<unknown>)#android.content.ContentValues.put(<unknown>, java.lang.Long)#android.util.Log.i(java.lang.String, java.lang.String)#android.database.sqlite.SQLiteQueryBuilder.appendWhere(<unknown>)#org.apache.http.conn.scheme.SchemeRegistry.register(org.apache.http.conn.scheme.Scheme)#org.json.JSONObject.getInt(java.lang.String)#org.json.JSONObject.put(java.lang.String, boolean)#java.lang.Long.parseLong(<unknown>)#java.lang.String.indexOf(char)#java.lang.String.equals(java.lang.String)#android.database.sqlite.SQLiteQueryBuilder.appendWhere(<unknown>)#java.lang.String.length()#java.lang.String.equals(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject)#<unknown>.nextProperty()#<unknown>.next()#android.content.SharedPreferences.getString(java.lang.String, java.lang.String)#<unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>)#com.inovex.zabbixmobile.api.ZabbixService.importTriggers(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader)#<unknown>.GraphData()#org.json.JSONArray.put(java.lang.String)#org.apache.http.impl.client.AbstractHttpClient.getParams()#<unknown>.set(<unknown>, long)#<unknown>.set(<unknown>, <unknown>)#org.json.JSONObject.getJSONObject(java.lang.String)#org.json.JSONObject.put(java.lang.String, java.lang.String)#java.lang.String.equals(java.lang.String)#org.json.JSONObject.getString(java.lang.String)#java.lang.String.equals(<unknown>)#java.lang.String.equals(<unknown>)#<unknown>.getCurrentName()#java.lang.String.equals(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService.showProgress(int)#<unknown>.getCurrentName()#com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, java.lang.String, int)#org.json.JSONObject.put(java.lang.String, int)#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.close()#java.lang.String.replace(java.lang.String, java.lang.String)#java.lang.String.equals(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject)#com.inovex.zabbixmobile.api.ZabbixService._endTransaction()#android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null)#android.database.Cursor.moveToNext()#<unknown>.HostData()#<unknown>.set(<unknown>, long)#<unknown>.next()#android.database.sqlite.SQLiteQueryBuilder.setTables(<unknown>)#java.util.Date.getTime()#org.json.JSONObject.put(java.lang.String, long)#android.content.ContentValues.ContentValues(int)#java.lang.Long.parseLong(<unknown>)#org.apache.http.HttpResponse.getEntity()#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.getText()#java.lang.String.equals(java.lang.String)#<unknown>.set(<unknown>, <unknown>)#<unknown>.set(<unknown>, <unknown>)#<unknown>.set(<unknown>, <unknown>)#javax.net.ssl.SSLContext.init(null, javax.net.ssl.TrustManager[], null)#android.database.sqlite.SQLiteDatabase.endTransaction()#java.lang.String.equals(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, java.lang.String)#android.util.Log.d(java.lang.String, java.lang.String)#<unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>)#<unknown>.next()#<unknown>.close()#<unknown>.insert(android.database.sqlite.SQLiteDatabase)#org.json.JSONObject.put(java.lang.String, java.lang.String)#java.lang.Throwable.getMessage()#java.lang.String.equals(<unknown>)#java.lang.String.equals(<unknown>)#<unknown>.set(<unknown>, <unknown>)#com.inovex.zabbixmobile.api.ZabbixService._endTransaction()#javax.net.ssl.SSLContext.getSocketFactory()#org.json.JSONObject.JSONObject()#android.content.Context.getResources()#org.json.JSONObject.put(java.lang.String, int)#com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, null)#com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, java.lang.String, int)#org.json.JSONObject.put(java.lang.String, java.lang.String)#java.lang.String.matches(java.lang.String)#org.json.JSONArray.put(java.lang.String)#<unknown>.set(<unknown>, <unknown>)#android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null)#android.content.Context.sendBroadcast(android.content.Intent)#org.json.JSONObject.getJSONObject(java.lang.String)#<unknown>.get(<unknown>)#android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null)#java.lang.String.equals(<unknown>)#android.content.SharedPreferences.getBoolean(java.lang.String, boolean)#java.lang.Throwable.printStackTrace()#android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null)#org.json.JSONObject.put(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService._startTransaction()#android.content.Intent.putExtra(java.lang.String, int)#org.json.JSONObject.JSONObject()#<unknown>.getText()#com.inovex.zabbixmobile.api.ZabbixService._endTransaction()#org.apache.http.client.methods.HttpPost.HttpPost(java.lang.String)#android.content.SharedPreferences.getString(java.lang.String, java.lang.String)#<unknown>.GraphItemData()#com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, java.lang.String, int)#<unknown>.nextValueToken()#org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager.ThreadSafeClientConnManager(org.apache.http.params.HttpParams, org.apache.http.conn.scheme.SchemeRegistry)#<unknown>.ApplicationItemRelationData()#java.lang.Object.toString()#android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null)#org.json.JSONArray.JSONArray()#java.lang.String.equals(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService._startTransaction()#org.json.JSONObject.put(java.lang.String, org.json.JSONArray)#<unknown>.set(<unknown>, int)#org.json.JSONObject.put(java.lang.String, int)#com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, java.lang.String, int)#org.json.JSONObject.put(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService.importItems(<unknown>, int, boolean)#org.json.JSONObject.JSONObject()#java.lang.Math.min(int, int)#com.inovex.zabbixmobile.api.ZabbixService.showProgress(<unknown>)#java.lang.String.equals(java.lang.String)#android.content.Intent.Intent(<unknown>)#java.lang.String.equals(<unknown>)#org.json.JSONObject.put(java.lang.String, int)#javax.net.ssl.SSLContext.getInstance(java.lang.String)#android.content.res.Resources.getString(<unknown>)#org.json.JSONObject.JSONObject()#android.content.Intent.Intent(<unknown>)#java.lang.String.equals(<unknown>)#<unknown>.nextProperty()#javax.net.ssl.SSLSocketFactory.createSocket(java.net.Socket, java.lang.String, int, boolean)#org.json.JSONObject.put(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject)#<unknown>.get(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService.importHosts(<unknown>, null)#java.io.IOException.IOException(java.lang.String)#java.lang.String.trim()#java.lang.String.contains(java.lang.String)#org.apache.http.entity.StringEntity.StringEntity(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService._endTransaction()#com.inovex.zabbixmobile.api.ZabbixService.importTriggers(<unknown>)#.X509TrustManager()#com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject)#android.graphics.Color.parseColor(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, null)#org.json.JSONObject.getJSONArray(java.lang.String)#org.apache.http.client.params.HttpClientParams.setRedirecting(org.apache.http.params.HttpParams, boolean)#com.inovex.zabbixmobile.api.ZabbixService._startTransaction()#<unknown>.getCurrentName()#<unknown>.getJsonArrayOrObjectReader()#java.lang.String.equals(<unknown>)#java.lang.Long.parseLong(<unknown>)#android.util.Log.d(java.lang.String, java.lang.String)#org.codehaus.jackson.JsonParser.getCurrentToken()#org.codehaus.jackson.JsonParser.nextValue()#java.lang.Long.parseLong(<unknown>)#<unknown>.getText()#java.util.Date.getTime()#android.content.Intent.putExtra(java.lang.String, <unknown>)#android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null)#<unknown>.get(<unknown>)#android.database.Cursor.moveToFirst()#org.apache.http.client.methods.HttpEntityEnclosingRequestBase.setEntity(org.apache.http.entity.StringEntity)#com.inovex.zabbixmobile.api.ZabbixService._commitTransactionIfRecommended()#com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, null)#android.database.sqlite.SQLiteQueryBuilder.appendWhere(<unknown>)#org.apache.http.auth.UsernamePasswordCredentials.UsernamePasswordCredentials(java.lang.String, java.lang.String)#java.util.Date.getTime()#java.lang.String.equals(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService._endTransaction()#org.json.JSONObject.put(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService.authenticate()#java.lang.String.equals(<unknown>)#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.json.JSONObject.put(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService.NoAPIAccessException.NoAPIAccessException()#org.json.JSONArray.put(long)#com.inovex.zabbixmobile.api.ZabbixService._endTransaction()#<unknown>.getJsonArrayOrObjectReader()#android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null)#<unknown>.ScreenData()#java.util.Date.Date()#java.util.Date.Date()#<unknown>.set(<unknown>, long)#<unknown>.getCurrentName()#org.json.JSONObject.put(java.lang.String, org.json.JSONArray)#<unknown>.set(<unknown>, long)#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.apache.http.params.HttpConnectionParams.setConnectionTimeout(org.apache.http.params.HttpParams, int)#org.json.JSONArray.length()#<unknown>.set(<unknown>, java.lang.String)#<unknown>.set(<unknown>, long)#java.util.Date.getTime()#<unknown>.set(<unknown>, <unknown>)#<unknown>.set(<unknown>, <unknown>)#org.json.JSONArray.put(java.lang.String)#java.lang.String.equals(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService.HttpAuthorizationRequiredException.HttpAuthorizationRequiredException()#<unknown>.getText()#org.json.JSONObject.put(java.lang.String, org.json.JSONArray)#com.inovex.zabbixmobile.api.ZabbixService.importEvents(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader, null)#org.json.JSONObject.JSONObject()#com.inovex.zabbixmobile.api.ZabbixService.importHostGroups(<unknown>)#<unknown>.set(<unknown>, <unknown>)#org.json.JSONObject.toString()#java.lang.Integer.parseInt(<unknown>)#android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null)#org.apache.http.params.HttpProtocolParams.setContentCharset(org.apache.http.params.HttpParams, java.lang.String)#<unknown>.get(<unknown>)#java.lang.String.equals(<unknown>)#<unknown>.set(<unknown>, <unknown>)#<unknown>.nextValueToken()#<unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>)#org.json.JSONObject.put(java.lang.String, org.json.JSONArray)#org.json.JSONObject.put(java.lang.String, java.lang.Integer)#<unknown>.getText()#<unknown>.set(<unknown>, <unknown>)#org.apache.http.message.AbstractHttpMessage.addHeader(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject)#org.json.JSONObject.getJSONArray(java.lang.String)#java.security.KeyStore.load(null, null)#java.lang.String.replace(java.lang.String, java.lang.String)#java.lang.Long.parseLong(<unknown>)#org.json.JSONObject.toString()#com.inovex.zabbixmobile.api.ZabbixService.importTriggers(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader)#android.util.Log.d(java.lang.String, java.lang.String)#android.content.SharedPreferences.getString(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, java.lang.String)#<unknown>.getJsonArrayOrObjectReader()#<unknown>.TriggerData()#android.content.SharedPreferences.getString(java.lang.String, java.lang.String)#android.content.Intent.Intent(<unknown>)#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.apache.http.impl.client.AbstractHttpClient.getCredentialsProvider()#<unknown>.set(<unknown>, <unknown>)#java.io.IOException.IOException(java.lang.String)#java.lang.String.trim()#org.json.JSONObject.put(java.lang.String, org.json.JSONArray)#java.lang.String.split(java.lang.String)#java.lang.String.equals(java.lang.String)#java.lang.String.endsWith(java.lang.String)#<unknown>.set(<unknown>, int)#com.inovex.zabbixmobile.api.ZabbixService.showProgress(int)#<unknown>.ItemData()#org.json.JSONObject.put(java.lang.String, int)#<unknown>.set(<unknown>, <unknown>)#org.codehaus.jackson.JsonParser.getText()#android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null)#org.apache.http.impl.client.DefaultHttpClient.DefaultHttpClient(org.apache.http.conn.ClientConnectionManager, org.apache.http.params.HttpParams)#<unknown>.close()#java.lang.IllegalStateException.IllegalStateException(java.lang.String)#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.codehaus.jackson.JsonParser.nextToken()#android.database.Cursor.getColumnIndex(<unknown>)#org.json.JSONObject.put(java.lang.String, org.json.JSONArray)#<unknown>.nextValueToken()#com.inovex.zabbixmobile.api.ZabbixService._startTransaction()#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.set(<unknown>, java.lang.String)#java.lang.String.substring(int, int)#java.lang.Long.parseLong(<unknown>)#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.json.JSONObject.getInt(java.lang.String)#<unknown>.getJsonArrayOrObjectReader()#java.lang.String.equals(java.lang.String)#<unknown>.set(<unknown>, <unknown>)#<unknown>.set(<unknown>, <unknown>)#java.security.KeyStore.getInstance(java.lang.String)#java.lang.Integer.parseInt(<unknown>)#java.lang.String.equals(java.lang.String)#<unknown>.nextProperty()#android.content.Intent.putExtra(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, null)#<unknown>.set(<unknown>, int)#java.io.BufferedReader.BufferedReader(java.io.InputStreamReader)#com.inovex.zabbixmobile.api.ZabbixService.importEvents(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader, int)#java.security.KeyStore.getDefaultType()#java.lang.String.equals(<unknown>)#<unknown>.getText()#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.set(<unknown>, java.lang.Object)#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.insert(android.database.sqlite.SQLiteDatabase)#<unknown>.nextProperty()#com.inovex.zabbixmobile.api.ZabbixService._startTransaction()#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.close()#<unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>)#org.json.JSONObject.put(java.lang.String, long)#com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, null, int)#<unknown>.set(<unknown>, <unknown>)#java.lang.String.equals(<unknown>)#org.apache.http.conn.scheme.Scheme.Scheme(java.lang.String, org.apache.http.conn.scheme.PlainSocketFactory, int)#org.json.JSONObject.put(java.lang.String, java.lang.String)#java.lang.String.equals(<unknown>)",
      "p_body_t": ["<empty>"],
      "c_patch_t": [" \t\t\t\t\"event.acknowledge\"\n \t\t\t\t, new JSONObject()\n \t\t\t\t\t.put(\"eventids\", new JSONArray().put(eventid))\n+\t\t\t\t\t.put(\"message\", comment)\n \t\t);\n \t\t// it can be an (empty) array\n \t\ttry {"],
      "c_body_t": ["<empty>"],
      "c_email_sni": "jschamburger@inovex.de",
      "p_patch_t": [" \t\t\t\tString propName = eventReader.getCurrentName();\n \t\t\t\tif (propName.equals(\"hosts\")) {\n \t\t\t\t\t// import hosts\n-\t\t\t\t\tString hostnames = (String) importHosts(eventReader.getJsonArray(), null)[0];\n+\t\t\t\t\tString hostnames = (String) importHosts(eventReader.getJsonArrayOrObjectReader(), null)[0];\n \t\t\t\t\t// store hosts namen\n \t\t\t\t\te.set(EventData.COLUMN_HOSTS, hostnames);\n \t\t\t\t} else if (propName.equals(\"triggers\")) {\n \t\t\t\t\t// import triggers\n-\t\t\t\t\timportTriggers(eventReader.getJsonArray());\n+\t\t\t\t\timportTriggers(eventReader.getJsonArrayOrObjectReader());\n \t\t\t\t} else if (propName.equals(EventData.COLUMN_EVENTID)) {\n \t\t\t\t\te.set(EventData.COLUMN_EVENTID, Long.parseLong(eventReader.getText()));\n \t\t\t\t} else if (propName.equals(EventData.COLUMN_CLOCK)) {\n@@ -776,9 +776,9 @@ public class ZabbixService {\n \t\t\t\t\t} else if (propName.equals(GraphData.COLUMN_NAME)) {\n \t\t\t\t\t\tscr.set(GraphData.COLUMN_NAME, graphReader.getText());\n \t\t\t\t\t} else if (propName.equals(\"gitems\")) {\n-\t\t\t\t\t\tmustSetGraphid = importGraphItems(graphReader.getJsonArray());\n+\t\t\t\t\t\tmustSetGraphid = importGraphItems(graphReader.getJsonArrayOrObjectReader());\n \t\t\t\t\t} else if (propName.equals(\"items\")) {\n-\t\t\t\t\t\timportItems(graphReader.getJsonArray(), 0, true);\n+\t\t\t\t\t\timportItems(graphReader.getJsonArrayOrObjectReader(), 0, true);\n \t\t\t\t\t} else {\n \t\t\t\t\t\tgraphReader.nextProperty();\n \t\t\t\t\t}\n@@ -949,7 +949,7 @@ public class ZabbixService {\n \t\t\t\t\thostnames.add(host);\n \t\t\t\t\th.set(HostData.COLUMN_HOST, host);\n \t\t\t\t} else if (propName.equals(\"groups\")) {\n-\t\t\t\t\tlong groupid = importHostGroups(hostReader.getJsonArray());\n+\t\t\t\t\tlong groupid = importHostGroups(hostReader.getJsonArrayOrObjectReader());\n \t\t\t\t\tif (groupid != -1) {\n \t\t\t\t\t\th.set(HostData.COLUMN_GROUPID, groupid);\n \t\t\t\t\t}\n@@ -1055,7 +1055,7 @@ public class ZabbixService {\n \t\t\t\t\t// at this point itemid and hostid is unknown\n \t\t\t\t\t// because of this, all applicationrelations will be saved with itemid and hostid \"-1\".\n \t\t\t\t\t// later the IDs will be replaced with the correct\n-\t\t\t\t\timportApplications(-1, -1, itemReader.getJsonArray());\n+\t\t\t\t\timportApplications(-1, -1, itemReader.getJsonArrayOrObjectReader());\n \t\t\t\t} else {\n \t\t\t\t\titemReader.nextProperty();\n \t\t\t\t}\n@@ -1176,7 +1176,7 @@ public class ZabbixService {\n \t\t\t\t\t} else if (propName.equals(ScreenData.COLUMN_NAME)) {\n \t\t\t\t\t\tscr.set(ScreenData.COLUMN_NAME, screenReader.getText());\n \t\t\t\t\t} else if (propName.equals(\"screenitems\")) {\n-\t\t\t\t\t\timportScreenItems(screenReader.getJsonArray());\n+\t\t\t\t\t\timportScreenItems(screenReader.getJsonArrayOrObjectReader());\n \t\t\t\t\t} else {\n \t\t\t\t\t\tscreenReader.nextProperty();\n \t\t\t\t\t}\n@@ -1313,14 +1313,14 @@ public class ZabbixService {\n \t\t\t\t} else if (propName.equals(TriggerData.COLUMN_URL)) {\n \t\t\t\t\tt.set(TriggerData.COLUMN_URL, triggerReader.getText());\n \t\t\t\t} else if (propName.equals(\"hosts\")) {\n-\t\t\t\t\tObject[] hostsCache = importHosts(triggerReader.getJsonArray(), null);\n+\t\t\t\t\tObject[] hostsCache = importHosts(triggerReader.getJsonArrayOrObjectReader(), null);\n \t\t\t\t\tt.set(TriggerData.COLUMN_HOSTS, hostsCache[0]);\n \t\t\t\t\tt.set(TriggerData.COLUMN_HOSTID, hostsCache[1]);\n \t\t\t\t} else if (propName.equals(\"groups\")) {\n-\t\t\t\t\timportHostGroups(triggerReader.getJsonArray());\n+\t\t\t\t\timportHostGroups(triggerReader.getJsonArrayOrObjectReader());\n \t\t\t\t} else if (propName.equals(\"items\")) {\n \t\t\t\t\t// store the first item id\n-\t\t\t\t\tt.set(TriggerData.COLUMN_ITEMID, importItems(triggerReader.getJsonArray(), 1, true));\n+\t\t\t\t\tt.set(TriggerData.COLUMN_ITEMID, importItems(triggerReader.getJsonArrayOrObjectReader(), 1, true));\n \t\t\t\t} else {\n \t\t\t\t\ttriggerReader.nextProperty();\n \t\t\t\t}"],
      "repo_sni": "inovex/zax",
      "_version_": 1526823823630925824,
      "c_user_sni": "Johannes Schamburger",
      "c_callsites_added_cs": "org.json.JSONObject.put(java.lang.String, java.lang.String)",
      "p_parents_ss": ["976f9d4001cf9c49a39f3b93acb53607ea8c0bfd"],
      "p_user_sni": "Johannes Schamburger",
      "c_subject_t": ["When acknowledging an event, the message is now sent to the Zabbix server."],
      "c_imports_added_cs": "<empty>",
      "c_callsites_removed_cs": "<empty>"
    }, {
      "c_patch_no_context_t": ["+\t\t\t// clear triggers\n+\t\t\tzabbixLocalDB.delete(TriggerData.TABLE_NAME, null, null);\n+"],
      "p_patch_no_context_t": ["-\tprivate JsonArrayReader _queryStream(String method, JSONObject params) throws JSONException, IOException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n+\tprivate JsonArrayOrObjectReader _queryStream(String method, JSONObject params) throws JSONException, IOException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n+\t\tLog.d(\"ZabbixService\", \"_queryStream: \"+url);\n+\t\tLog.d(\"ZabbixService\", \"_queryStream: \"+json.toString());\n+\n-\t\t\t\t\t\t\tJsonArrayReader r = _queryStream(method, params);\n+\t\t\t\t\t\t\tJsonArrayOrObjectReader r = _queryStream(method, params);\n-\t\t\tif (jp.nextToken() != JsonToken.START_ARRAY) { // go inside the array\n+\t\t\tif (jp.nextToken() != JsonToken.START_ARRAY && jp.getCurrentToken() != JsonToken.START_OBJECT) { // go inside the array\n+\t\t\t\ttry {\n+\t\t\t\t\tLog.d(\"ZabbixService\", \"current token: \"+jp.getCurrentToken());\n+\t\t\t\t\tLog.d(\"ZabbixService\", \"current name: \"+jp.getCurrentName());\n+\t\t\t\t\tLog.d(\"ZabbixService\", \"get text: \"+jp.getText());\n+\t\t\t\t\tLog.d(\"ZabbixService\", \"next value: \"+jp.nextValue());\n+\t\t\t\t\tLog.d(\"ZabbixService\", \"next token: \"+jp.nextToken());\n+\t\t\t\t\tLog.d(\"ZabbixService\", \"current token: \"+jp.getCurrentToken());\n+\t\t\t\t\tLog.d(\"ZabbixService\", \"current name: \"+jp.getCurrentName());\n+\t\t\t\t\tLog.d(\"ZabbixService\", \"get text: \"+jp.getText());\n+\t\t\t\t} catch (Exception e) {}\n-\t\t\treturn new JsonArrayReader(jp);\n+\t\t\treturn new JsonArrayOrObjectReader(jp);\n+\t\t\tLog.i(\"ZabbixService\", \"Zabbix Server Version: isVersion2=\"+isVersion2);\n-\tprivate void importApplications(long hostid, long itemid, JsonArrayReader jsonArray) throws JsonParseException, NumberFormatException, IOException {\n+\tprivate void importApplications(long hostid, long itemid, JsonArrayOrObjectReader jsonArray) throws JsonParseException, NumberFormatException, IOException {\n-\t\t\tJsonArrayReader events = _queryStream(\n+\t\t\tJsonArrayOrObjectReader events = _queryStream(\n-\t\t\tJsonArrayReader events = _queryStream(\n+\t\t\tJsonArrayOrObjectReader events = _queryStream(\n-\tprivate void importEvents(JsonArrayReader events, Integer numEvents) throws JsonParseException, IOException {\n+\tprivate void importEvents(JsonArrayOrObjectReader events, Integer numEvents) throws JsonParseException, IOException {\n-\tprivate boolean importGraphItems(JsonArrayReader graphItems) throws JsonParseException, NumberFormatException, IOException {\n+\tprivate boolean importGraphItems(JsonArrayOrObjectReader graphItems) throws JsonParseException, NumberFormatException, IOException {\n-\t\t\tJsonArrayReader graphs = _queryStream(\n+\t\t\tJsonArrayOrObjectReader graphs = _queryStream(\n-\t\t\t\tJsonArrayReader historydetails = _queryStream(\n+\t\t\t\tJsonArrayOrObjectReader historydetails = _queryStream(\n-\tprivate long importHostGroups(JsonArrayReader jsonArray) throws JsonParseException, IOException {\n+\tprivate long importHostGroups(JsonArrayOrObjectReader jsonArray) throws JsonParseException, IOException {\n-\tprivate Object[] importHosts(JsonArrayReader jsonArray, Integer numHosts) throws JsonParseException, IOException {\n+\tprivate Object[] importHosts(JsonArrayOrObjectReader jsonArray, Integer numHosts) throws JsonParseException, IOException {\n-\t\t\tJsonArrayReader hosts = _queryStream(\n+\t\t\tJsonArrayOrObjectReader hosts = _queryStream(\n-\tprivate long importItems(JsonArrayReader items, int numItems, boolean checkBeforeInsert) throws JsonParseException, IOException {\n+\tprivate long importItems(JsonArrayOrObjectReader items, int numItems, boolean checkBeforeInsert) throws JsonParseException, IOException {\n-\t\t\tJsonArrayReader items = _queryStream(\n+\t\t\tJsonArrayOrObjectReader items = _queryStream(\n-\tprivate void importScreenItems(JsonArrayReader screenItems) throws JsonParseException, NumberFormatException, IOException {\n+\tprivate void importScreenItems(JsonArrayOrObjectReader screenItems) throws JsonParseException, NumberFormatException, IOException {\n-\t\t\tJsonArrayReader screens = _queryStream(\n+\t\t\tJsonArrayOrObjectReader screens = _queryStream(\n-\t\t\tJsonArrayReader trigger = _queryStream(\n+\t\t\tJsonArrayOrObjectReader trigger = _queryStream(\n-\t\t\tJsonArrayReader triggers = _queryStream(\n+\t\t\tJsonArrayOrObjectReader triggers = _queryStream(\n-\t\t\tJsonArrayReader triggers = _queryStream(\n+\t\t\tJsonArrayOrObjectReader triggers = _queryStream(\n-\tprivate void importTriggers(JsonArrayReader jsonArray) throws JsonParseException, IOException {\n+\tprivate void importTriggers(JsonArrayOrObjectReader jsonArray) throws JsonParseException, IOException {\n-\t\t\tJsonArrayReader triggers = _queryStream(\n+\t\t\tJsonArrayOrObjectReader triggers = _queryStream("],
      "c_date_tdt": "Sep 12, 2012 8:22:56 AM",
      "c_imports_t": ["android.database.sqlite.SQLiteQueryBuilder org.apache.http.conn.scheme.SchemeRegistry java.util.HashSet org.apache.http.params.BasicHttpParams android.content.Context org.apache.http.params.HttpParams org.apache.http.conn.scheme.PlainSocketFactory java.util.ArrayList com.inovex.zabbixmobile.model.ItemData com.inovex.zabbixmobile.model.HostData com.inovex.zabbixmobile.model.GraphData com.inovex.zabbixmobile.model.EventData org.apache.http.auth.UsernamePasswordCredentials org.apache.http.params.HttpConnectionParams android.content.SharedPreferences java.security.KeyManagementException org.apache.http.conn.ClientConnectionManager org.codehaus.jackson.JsonFactory org.apache.http.entity.StringEntity java.util.Set org.apache.http.params.HttpProtocolParams com.inovex.zabbixmobile.model.ApplicationItemRelationData com.inovex.zabbixmobile.model.TriggerData org.codehaus.jackson.JsonToken android.database.Cursor java.net.Socket android.content.Intent org.apache.http.protocol.HTTP org.json.JSONException java.net.UnknownHostException com.inovex.zabbixmobile.model.HistoryDetailData org.apache.http.HttpResponse java.security.KeyStore com.inovex.zabbixmobile.ZabbixContentProvider android.preference.PreferenceManager android.util.Log org.json.JSONObject java.security.NoSuchAlgorithmException org.apache.http.client.params.HttpClientParams java.io.IOException org.apache.http.conn.scheme.Scheme org.apache.http.client.methods.HttpPost javax.net.ssl.SSLContext org.apache.http.auth.AuthScope org.apache.http.conn.ssl.SSLSocketFactory java.security.KeyStoreException android.content.ContentValues java.io.InputStreamReader java.util.Date java.security.UnrecoverableKeyException android.graphics.Color org.apache.http.client.ClientProtocolException com.inovex.zabbixmobile.model.GraphItemData org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager org.json.JSONArray com.inovex.zabbixmobile.model.CacheData javax.net.ssl.SSLPeerUnverifiedException com.inovex.zabbixmobile.model.HostGroupData org.codehaus.jackson.JsonParseException java.security.cert.X509Certificate org.apache.http.HttpVersion android.database.sqlite.SQLiteDatabase java.util.List java.security.cert.CertificateException java.io.BufferedReader com.inovex.zabbixmobile.model.ApplicationData com.inovex.zabbixmobile.model.ScreenItemData javax.net.ssl.TrustManager com.inovex.zabbixmobile.model.ScreenData com.inovex.zabbixmobile.R org.codehaus.jackson.JsonParser org.apache.http.impl.client.DefaultHttpClient javax.net.ssl.X509TrustManager"],
      "c_contents_t": ["package com.inovex.zabbixmobile.api;\n\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.net.Socket;\nimport java.net.UnknownHostException;\nimport java.security.KeyManagementException;\nimport java.security.KeyStore;\nimport java.security.KeyStoreException;\nimport java.security.NoSuchAlgorithmException;\nimport java.security.UnrecoverableKeyException;\nimport java.security.cert.CertificateException;\nimport java.security.cert.X509Certificate;\nimport java.util.ArrayList;\nimport java.util.Date;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Set;\n\nimport javax.net.ssl.SSLContext;\nimport javax.net.ssl.SSLPeerUnverifiedException;\nimport javax.net.ssl.TrustManager;\nimport javax.net.ssl.X509TrustManager;\n\nimport org.apache.http.HttpResponse;\nimport org.apache.http.HttpVersion;\nimport org.apache.http.auth.AuthScope;\nimport org.apache.http.auth.UsernamePasswordCredentials;\nimport org.apache.http.client.ClientProtocolException;\nimport org.apache.http.client.methods.HttpPost;\nimport org.apache.http.client.params.HttpClientParams;\nimport org.apache.http.conn.ClientConnectionManager;\nimport org.apache.http.conn.scheme.PlainSocketFactory;\nimport org.apache.http.conn.scheme.Scheme;\nimport org.apache.http.conn.scheme.SchemeRegistry;\nimport org.apache.http.conn.ssl.SSLSocketFactory;\nimport org.apache.http.entity.StringEntity;\nimport org.apache.http.impl.client.DefaultHttpClient;\nimport org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager;\nimport org.apache.http.params.BasicHttpParams;\nimport org.apache.http.params.HttpConnectionParams;\nimport org.apache.http.params.HttpParams;\nimport org.apache.http.params.HttpProtocolParams;\nimport org.apache.http.protocol.HTTP;\nimport org.codehaus.jackson.JsonFactory;\nimport org.codehaus.jackson.JsonParseException;\nimport org.codehaus.jackson.JsonParser;\nimport org.codehaus.jackson.JsonToken;\nimport org.json.JSONArray;\nimport org.json.JSONException;\nimport org.json.JSONObject;\n\nimport android.content.ContentValues;\nimport android.content.Context;\nimport android.content.Intent;\nimport android.content.SharedPreferences;\nimport android.database.Cursor;\nimport android.database.sqlite.SQLiteDatabase;\nimport android.database.sqlite.SQLiteQueryBuilder;\nimport android.graphics.Color;\nimport android.preference.PreferenceManager;\nimport android.util.Log;\n\nimport com.inovex.zabbixmobile.R;\nimport com.inovex.zabbixmobile.ZabbixContentProvider;\nimport com.inovex.zabbixmobile.model.ApplicationData;\nimport com.inovex.zabbixmobile.model.ApplicationItemRelationData;\nimport com.inovex.zabbixmobile.model.CacheData;\nimport com.inovex.zabbixmobile.model.EventData;\nimport com.inovex.zabbixmobile.model.GraphData;\nimport com.inovex.zabbixmobile.model.GraphItemData;\nimport com.inovex.zabbixmobile.model.HistoryDetailData;\nimport com.inovex.zabbixmobile.model.HostData;\nimport com.inovex.zabbixmobile.model.HostGroupData;\nimport com.inovex.zabbixmobile.model.ItemData;\nimport com.inovex.zabbixmobile.model.ScreenData;\nimport com.inovex.zabbixmobile.model.ScreenItemData;\nimport com.inovex.zabbixmobile.model.TriggerData;\n\n/**\n * interface to connect to the zabbix server\n */\npublic class ZabbixService {\n\tclass CustomSSLSocketFactory extends SSLSocketFactory {\n\t\tSSLContext sslContext = SSLContext.getInstance(\"TLS\");\n\n\t\tpublic CustomSSLSocketFactory(KeyStore truststore) throws NoSuchAlgorithmException, KeyManagementException, KeyStoreException, UnrecoverableKeyException {\n\t\t\tsuper(truststore);\n\t\t\tTrustManager tm = new X509TrustManager() {\n\t\t\t\t@Override\n\t\t\t\tpublic void checkClientTrusted(X509Certificate[] chain,\n\t\t\t\t\t\tString authType) throws CertificateException {\n\t\t\t\t}\n\t\t\t\t@Override\n\t\t\t\tpublic void checkServerTrusted(X509Certificate[] chain,\n\t\t\t\t\t\tString authType) throws CertificateException {\n\t\t\t\t}\n\t\t\t\t@Override\n\t\t\t\tpublic X509Certificate[] getAcceptedIssuers() {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t};\n\t\t\tsslContext.init(null, new TrustManager[] { tm }, null);\n\t\t}\n\n\t\t@Override\n\t\tpublic Socket createSocket() throws IOException {\n\t\t\treturn sslContext.getSocketFactory().createSocket();\n\t\t}\n\n\t\t@Override\n\t\tpublic Socket createSocket(Socket socket, String host, int port, boolean autoClose) throws IOException, UnknownHostException {\n\t\t\treturn sslContext.getSocketFactory().createSocket(socket, host, port, autoClose);\n\t\t}\n\t}\n\n\t/**\n\t * http auth is needed\n\t */\n\tpublic class HttpAuthorizationRequiredException extends Exception {\n\t\tprivate static final long serialVersionUID = 6632422081858878147L;\n\t}\n\n\t/**\n\t * zabbix error: no api access\n\t */\n\tpublic class NoAPIAccessException extends Exception {\n\t\tprivate static final long serialVersionUID = 6381395987443456382L;\n\t}\n\n\t/**\n\t * probably too old zabbix <= 1.8.2\n\t */\n\tpublic class PreconditionFailedException extends Exception {\n\t\tprivate static final long serialVersionUID = -2529885710860745023L;\n\t}\n\n\t/**\n\t * global constants\n\t */\n\tpublic class ZabbixConfig {\n\t\tpublic static final int APPLICATION_GET_LIMIT = 1000;\n\t\tpublic static final int EVENTS_GET_LIMIT = 60;\n\t\tpublic static final int HISTORY_GET_TIME_FROM_SHIFT = 8*60*60; // -8h\n\t\tpublic static final int HISTORY_GET_LIMIT = 8000;\n\t\tpublic static final int HOSTGROUP_GET_LIMIT = 200;\n\t\tpublic static final int HOST_GET_LIMIT = 300;\n\t\tpublic static final int ITEM_GET_LIMIT = 200;\n\t\tpublic static final int TRIGGER_GET_LIMIT = 100;\n\t\tpublic static final int EVENT_GET_TIME_FROM_SHIFT = 7*24*60*60; // -7 days\n\t\tpublic static final int CACHE_LIFETIME_APPLICATIONS = 2*24*60*60; // 2 days\n\t\tpublic static final int CACHE_LIFETIME_EVENTS = 120;\n\t\tpublic static final int CACHE_LIFETIME_HISTORY_DETAILS = 4*60;\n\t\tpublic static final int CACHE_LIFETIME_HOST_GROUPS = 7*24*60*60;\n\t\tpublic static final int CACHE_LIFETIME_HOSTS = 2*24*60*60;\n\t\tpublic static final int CACHE_LIFETIME_SCREENS = 2*24*60*60;\n\t\tpublic static final int CACHE_LIFETIME_ITEMS = 4*60;\n\t\tpublic static final int CACHE_LIFETIME_TRIGGERS = 2*60;\n\t\tpublic static final long STATUS_SHOW_TRIGGER_TIME = 14*24*60*60;\n\t\tpublic static final int HTTP_CONNECTION_TIMEOUT = 30000;\n\t}\n\n\tprivate final DefaultHttpClient httpClient;\n\tprivate final SQLiteDatabase zabbixLocalDB;\n\tprivate String url;\n\tprivate String token;\n\tprivate final Context context;\n\tprivate int _transactionStack;\n\tprivate JsonParser lastStream;\n\tprivate int transformProgressStart;\n\tprivate int transformProgressEnd;\n\tprivate boolean _notAuthorizedRetry;\n\tprivate boolean isVersion2 = true;\n\n\t/**\n\t * init\n\t * @param context android context\n\t * @param zabbixLocalDB sqlite\n\t */\n\tpublic ZabbixService(Context context, SQLiteDatabase zabbixLocalDB) {\n\t\tClientConnectionManager ccm = null;\n\t\tHttpParams params = null;\n\n\t\ttry {\n\t\t\tSharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(context);\n\t\t\tif (prefs.getBoolean(\"zabbix_trust_all_ssl_ca\", false)) {\n\t\t\t\tKeyStore trustStore = KeyStore.getInstance(KeyStore.getDefaultType());\n\t\t\t\ttrustStore.load(null, null);\n\n\t\t\t\tSSLSocketFactory sf = new CustomSSLSocketFactory(trustStore);\n\t\t\t\tsf.setHostnameVerifier(SSLSocketFactory.ALLOW_ALL_HOSTNAME_VERIFIER);\n\n\t\t\t\tparams = new BasicHttpParams();\n\t\t\t\tHttpProtocolParams.setVersion(params, HttpVersion.HTTP_1_1);\n\t\t\t\tHttpProtocolParams.setContentCharset(params, HTTP.UTF_8);\n\n\t\t\t\tSchemeRegistry registry = new SchemeRegistry();\n\t\t\t\tregistry.register(new Scheme(\"http\", PlainSocketFactory.getSocketFactory(), 80));\n\t\t\t\tregistry.register(new Scheme(\"https\", sf, 443));\n\n\t\t\t\tccm = new ThreadSafeClientConnManager(params, registry);\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\t// ignore for unit test\n\t\t}\n\n\t\tif (ccm == null || params == null) {\n\t\t\thttpClient = new DefaultHttpClient();\n\t\t} else {\n\t\t\thttpClient = new DefaultHttpClient(ccm, params);\n\t\t}\n\n\t\t// if applicable http auth\n\t\ttry {\n\t\t\tSharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(context);\n\t\t\tif (prefs.getBoolean(\"http_auth_enabled\", false)) {\n\t\t\t\tString user = prefs.getString(\"http_auth_username\", \"\");\n\t\t\t\tString pwd = prefs.getString(\"http_auth_password\", \"\");\n\t\t\t\thttpClient.getCredentialsProvider().setCredentials(AuthScope.ANY, new UsernamePasswordCredentials(user, pwd));\n\t\t\t}\n\t\t} catch (java.lang.UnsupportedOperationException e1) {\n\t\t\t// for unit test\n\t\t}\n\n\t\tparams = httpClient.getParams();\n\t\tHttpClientParams.setRedirecting(params, true); // redirecting\n\t\tHttpConnectionParams.setConnectionTimeout(params, ZabbixConfig.HTTP_CONNECTION_TIMEOUT);\n\t\tthis.context = context;\n\t\tthis.zabbixLocalDB = zabbixLocalDB;\n\t}\n\n\t/**\n\t * counts the sql inserts/updates and do a transaction commit to save the memory\n\t */\n\tprivate void _commitTransactionIfRecommended() {\n\t\tif (_transactionStack++ > 50) {\n\t\t\t_endTransaction();\n\t\t\t_startTransaction();\n\t\t}\n\t}\n\n\t/**\n\t * commit sql transaction\n\t */\n\tpublic void _endTransaction() {\n\t\tif (zabbixLocalDB.inTransaction()) {\n\t\t\tzabbixLocalDB.setTransactionSuccessful();\n\t\t\tzabbixLocalDB.endTransaction();\n\t\t}\n\t}\n\n\t/**\n\t * zabbix api call. data will be parsed as json object on-the-fly.\n\t * Caution: use this only for api calls with a small return data.\n\t * @param method\n\t * @param params\n\t * @return\n\t * @throws ClientProtocolException\n\t * @throws IOException\n\t * @throws JSONException\n\t * @throws HttpAuthorizationRequiredException\n\t * @throws NoAPIAccessException\n\t */\n\tprivate JSONObject _queryBuffer(String method, JSONObject params) throws ClientProtocolException, IOException, JSONException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\tHttpPost post = new HttpPost(url);\n\t\tpost.addHeader(\"Content-Type\", \"application/json; charset=utf-8\");\n\n\t\tString json =\n\t\t\t\"{\" +\n\t\t\t\"\t\\\"jsonrpc\\\" : \\\"2.0\\\",\" +\n\t\t\t\"\t\\\"method\\\" : \\\"\"+method+\"\\\",\" +\n\t\t\t\"\t\\\"params\\\" : \"+params.toString()+\",\" +\n\t\t\t\"\t\\\"auth\\\" : \"+(token==null?\"null\":'\"'+token+'\"')+\",\" +\n\t\t\t\"\t\\\"id\\\" : 0\" +\n\t\t\t\"}\";\n\n\t\tpost.setEntity(new StringEntity(json, \"UTF-8\"));\n\t\ttry {\n\t\t\tHttpResponse resp = httpClient.execute(post);\n\t\t\tif (resp.getStatusLine().getStatusCode() == 401) {\n\t\t\t\t// http auth failed\n\t\t\t\tthrow new HttpAuthorizationRequiredException();\n\t\t\t} else if (resp.getStatusLine().getStatusCode() == 412) {\n\t\t\t\t\t// Precondition failed / Looks like Zabbix 1.8.2\n\t\t\t\tthrow new PreconditionFailedException();\n\t\t\t} else if (resp.getStatusLine().getStatusCode() == 404) {\n\t\t\t\t// file not found\n\t\t\t\tthrow new IOException(resp.getStatusLine().getStatusCode()+\" \"+resp.getStatusLine().getReasonPhrase());\n\t\t\t} else {\n\t\t\t\tLog.d(\"ZabbixService\", resp.getStatusLine().getStatusCode()+\" \"+resp.getStatusLine().getReasonPhrase());\n\t\t\t}\n\t\t\tStringBuilder total = new StringBuilder();\n\t\t\tBufferedReader rd = new BufferedReader(new InputStreamReader(resp.getEntity().getContent()));\n\t\t\tint chr;\n\t\t\twhile ((chr = rd.read()) != -1) {\n\t\t\t\ttotal.append((char) chr);\n\t\t\t}\n\t\t\tJSONObject result = new JSONObject(total.toString());\n\t\t\ttry {\n\t\t\t\tif (result.getJSONObject(\"error\") != null) {\n\t\t\t\t\tif (result.getJSONObject(\"error\").getString(\"data\").equals(\"No API access\")) {\n\t\t\t\t\t\tthrow new NoAPIAccessException();\n\t\t\t\t\t} else throw new RuntimeException(result.getJSONObject(\"error\").toString());\n\t\t\t\t}\n\t\t\t\tif (result.getString(\"data\").equals(\"Not authorized\")) {\n\t\t\t\t\t// first do a new auth and then try the same api call again\n\t\t\t\t\tif (authenticate() && !_notAuthorizedRetry) {\n\t\t\t\t\t\t_notAuthorizedRetry = true;\n\t\t\t\t\t\tJSONObject r = _queryBuffer(method, params);\n\t\t\t\t\t\t_notAuthorizedRetry = false;\n\t\t\t\t\t\treturn r;\n\t\t\t\t\t} throw new IllegalStateException(result.toString());\n\t\t\t\t}\n\t\t\t} catch (JSONException e) {\n\t\t\t\t// ignore\n\t\t\t}\n\t\t\treturn result;\n\t\t} catch (SSLPeerUnverifiedException e) {\n\t\t\t// SSL not trusted\n\t\t\tIntent intent = new Intent(ZabbixContentProvider.CONTENT_PROVIDER_INTENT_ACTION);\n\t\t\tintent.putExtra(\"flag\", ZabbixContentProvider.INTENT_FLAG_SSL_NOT_TRUSTED);\n\t\t\tcontext.sendBroadcast(intent);\n\t\t\tthrow e;\n\t\t} catch (IOException e) {\n\t\t\t// internet problem\n\t\t\t// send intent to GUI\n\t\t\tIntent intent = new Intent(ZabbixContentProvider.CONTENT_PROVIDER_INTENT_ACTION);\n\t\t\tintent.putExtra(\"flag\", ZabbixContentProvider.INTENT_FLAG_CONNECTION_FAILED);\n\t\t\tintent.putExtra(\"value\", e.getMessage());\n\t\t\tcontext.sendBroadcast(intent);\n\t\t\tthrow e;\n\t\t}\n\t}\n\n\t/**\n\t * zabbix api call as stream.\n\t * @param method\n\t * @param params\n\t * @return stream im json array wrapper\n\t * @throws JSONException\n\t * @throws IOException\n\t * @throws HttpAuthorizationRequiredException\n\t * @throws NoAPIAccessException\n\t */\n\tprivate JsonArrayOrObjectReader _queryStream(String method, JSONObject params) throws JSONException, IOException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\t// http request\n\t\tHttpPost post = new HttpPost(url);\n\t\tpost.addHeader(\"Content-Type\", \"application/json; charset=utf-8\");\n\n\t\tJSONObject json = new JSONObject()\n\t\t\t.put(\"jsonrpc\", \"2.0\")\n\t\t\t.put(\"method\", method)\n\t\t\t.put(\"params\", params)\n\t\t\t.put(\"auth\", token)\n\t\t\t.put(\"id\", 0);\n\n\t\tLog.d(\"ZabbixService\", \"_queryStream: \"+url);\n\t\tLog.d(\"ZabbixService\", \"_queryStream: \"+json.toString());\n\n\t\tpost.setEntity(new StringEntity(json.toString(), \"UTF-8\"));\n\t\ttry {\n\t\t\tHttpResponse resp = httpClient.execute(post);\n\t\t\tif (resp.getStatusLine().getStatusCode() == 401) {\n\t\t\t\t// http auth failed\n\t\t\t\tthrow new HttpAuthorizationRequiredException();\n\t\t\t}\n\n\t\t\tJsonFactory jsonFac = new JsonFactory();\n\t\t\tJsonParser jp = jsonFac.createJsonParser(resp.getEntity().getContent());\n\t\t\t// store the last stream to close it if an exception will be thrown\n\t\t\tlastStream = jp;\n\t\t\tif (jp.nextToken() != JsonToken.START_OBJECT) {\n\t\t\t\tthrow new IOException(\"Expected data to start with an Object\");\n\t\t\t}\n\t\t\tdo {\n\t\t\t\tjp.nextToken();\n\t\t\t\tif (jp.getCurrentName().equals(\"error\")) {\n\t\t\t\t\tjp.nextToken();\n\t\t\t\t\tString errortxt = \"\";\n\t\t\t\t\twhile (jp.nextToken() != JsonToken.END_OBJECT) {\n\t\t\t\t\t\terrortxt += jp.getText();\n\t\t\t\t\t}\n\t\t\t\t\tif (errortxt.contains(\"No API access\")) {\n\t\t\t\t\t\tthrow new NoAPIAccessException();\n\t\t\t\t\t} else if (errortxt.contains(\"Not authorized\")) {\n\t\t\t\t\t\t// first do a new auth and then try the same api call again\n\t\t\t\t\t\tif (authenticate() && !_notAuthorizedRetry) {\n\t\t\t\t\t\t\t_notAuthorizedRetry = true;\n\t\t\t\t\t\t\tJsonArrayOrObjectReader r = _queryStream(method, params);\n\t\t\t\t\t\t\t_notAuthorizedRetry = false;\n\t\t\t\t\t\t\treturn r;\n\t\t\t\t\t\t} else throw new IllegalStateException(errortxt);\n\t\t\t\t\t} else throw new IllegalStateException(\"JSON API Error: \"+errortxt);\n\t\t\t\t}\n\t\t\t} while (!jp.getCurrentName().equals(\"result\"));\n\n\t\t\t// result array found\n\t\t\tif (jp.nextToken() != JsonToken.START_ARRAY && jp.getCurrentToken() != JsonToken.START_OBJECT) { // go inside the array\n\t\t\t\ttry {\n\t\t\t\t\tLog.d(\"ZabbixService\", \"current token: \"+jp.getCurrentToken());\n\t\t\t\t\tLog.d(\"ZabbixService\", \"current name: \"+jp.getCurrentName());\n\t\t\t\t\tLog.d(\"ZabbixService\", \"get text: \"+jp.getText());\n\t\t\t\t\tLog.d(\"ZabbixService\", \"next value: \"+jp.nextValue());\n\t\t\t\t\tLog.d(\"ZabbixService\", \"next token: \"+jp.nextToken());\n\t\t\t\t\tLog.d(\"ZabbixService\", \"current token: \"+jp.getCurrentToken());\n\t\t\t\t\tLog.d(\"ZabbixService\", \"current name: \"+jp.getCurrentName());\n\t\t\t\t\tLog.d(\"ZabbixService\", \"get text: \"+jp.getText());\n\t\t\t\t} catch (Exception e) {}\n\t\t\t\tthrow new IOException(\"Expected data to start with an Array\");\n\t\t\t}\n\t\t\treturn new JsonArrayOrObjectReader(jp);\n\t\t} catch (SSLPeerUnverifiedException e) {\n\t\t\tthrow e;\n\t\t} catch (IOException e) {\n\t\t\t// internet problem\n\t\t\t// send intent to GUI\n\t\t\tIntent intent = new Intent(ZabbixContentProvider.CONTENT_PROVIDER_INTENT_ACTION);\n\t\t\tintent.putExtra(\"flag\", ZabbixContentProvider.INTENT_FLAG_CONNECTION_FAILED);\n\t\t\tcontext.sendBroadcast(intent);\n\t\t\tthrow e;\n\t\t}\n\t}\n\n\t/**\n\t * begin sql transaction\n\t */\n\tprivate void _startTransaction() {\n\t\tzabbixLocalDB.beginTransaction();\n\t\t_transactionStack = 0;\n\t}\n\n\t/**\n\t * acknowledge zabbix event. Sets ack-flag with comment.\n\t * Caution: This is supported only for Zabbix version >= 1.8.4\n\t * @param eventid\n\t * @param comment\n\t * @return true, success.\n\t * @throws ClientProtocolException\n\t * @throws IOException\n\t * @throws JSONException\n\t * @throws HttpAuthorizationRequiredException\n\t * @throws NoAPIAccessException\n\t */\n\tpublic boolean acknowledgeEvent(String eventid, String comment) throws ClientProtocolException, IOException, JSONException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\t// for GUI unit test, just return true\n\t\tif (comment != null && comment.equals(\"__UNIT_TEST__RETURN_TRUE__\")) return true;\n\n\t\tJSONObject result = _queryBuffer(\n\t\t\t\t\"event.acknowledge\"\n\t\t\t\t, new JSONObject()\n\t\t\t\t\t.put(\"eventids\", new JSONArray().put(eventid))\n\t\t);\n\t\t// it can be an (empty) array\n\t\ttry {\n\t\t\treturn result.getJSONObject(\"result\").getJSONArray(\"eventids\").length() == 1;\n\t\t} catch (JSONException e) {\n\t\t\t// or a json object\n\t\t\treturn result.getJSONObject(\"result\").getJSONObject(\"eventids\").length() == 1;\n\t\t}\n\t}\n\n\t/**\n\t * zabbix auth. user and pwd from app preferences\n\t * @return true success\n\t * @throws ClientProtocolException\n\t * @throws IOException\n\t * @throws JSONException\n\t * @throws HttpAuthorizationRequiredException\n\t * @throws NoAPIAccessException\n\t */\n\tpublic boolean authenticate() throws ClientProtocolException, IOException, JSONException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\tSharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(context);\n\t\tString url = prefs.getString(\"zabbix_url\", \"\").trim();\n\t\tString user = prefs.getString(\"zabbix_username\", \"\").trim();\n\t\tString password = prefs.getString(\"zabbix_password\", \"\");\n\n\t\tthis.url = url+(url.endsWith(\"/\")?\"\":'/')+\"api_jsonrpc.php\";\n\t\tLog.d(\"ZabbixContentProvider\", url+\"//\"+user);\n\n\t\ttry {\n\t\t\tJSONObject result = _queryBuffer(\n\t\t\t\t\t\"user.authenticate\"\n\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t\t.put(\"user\", user)\n\t\t\t\t\t\t.put(\"password\", password)\n\t\t\t);\n\t\t\ttoken = result.getString(\"result\");\n\t\t} catch (JSONException e) {\n\t\t\t// there's no result\n\t\t\te.printStackTrace();\n\t\t} catch (RuntimeException e) {\n\t\t\t// wrong password. token remains null\n\t\t\te.printStackTrace();\n\t\t}\n\t\tif (token != null) {\n\t\t\t// get API version\n\t\t\tJSONObject result = _queryBuffer(\n\t\t\t\t\t\"apiinfo.version\"\n\t\t\t\t\t, new JSONObject()\n\t\t\t);\n\t\t\tisVersion2 = result.getString(\"result\").equals(\"1.4\");\n\t\t\tLog.i(\"ZabbixService\", \"Zabbix Server Version: isVersion2=\"+isVersion2);\n\t\t}\n\t\treturn token != null;\n\t}\n\n\t/**\n\t * close the last http stream\n\t */\n\tpublic void closeLastStream() {\n\t\tif (lastStream != null && !lastStream.isClosed()) {\n\t\t\ttry {\n\t\t\t\tlastStream.close();\n\t\t\t} catch (IOException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate void importApplications(long hostid, long itemid, JsonArrayOrObjectReader jsonArray) throws JsonParseException, NumberFormatException, IOException {\n\t\tint num = 0;\n\t\tJsonObjectReader application;\n\t\twhile ((application = jsonArray.next()) != null) {\n\t\t\tApplicationData app = new ApplicationData();\n\t\t\twhile (application.nextValueToken()) {\n\t\t\t\tString propName = application.getCurrentName();\n\t\t\t\tif (propName.equals(ApplicationData.COLUMN_APPLICATIONID)) {\n\t\t\t\t\tapp.set(ApplicationData.COLUMN_APPLICATIONID, Long.parseLong(application.getText()));\n\t\t\t\t} else if (propName.equals(ApplicationData.COLUMN_NAME)) {\n\t\t\t\t\tapp.set(ApplicationData.COLUMN_NAME, application.getText());\n\t\t\t\t} else if (propName.equals(ApplicationData.COLUMN_HOSTID)) {\n\t\t\t\t\tapp.set(ApplicationData.COLUMN_HOSTID, Long.parseLong(application.getText()));\n\t\t\t\t} else {\n\t\t\t\t\tapplication.nextProperty();\n\t\t\t\t}\n\t\t\t}\n\t\t\t// create applications that does not exist\n\t\t\tapp.insert(zabbixLocalDB, ApplicationData.COLUMN_APPLICATIONID);\n\t\t\t_commitTransactionIfRecommended();\n\n\t\t\t// create ApplicationItemRelation\n\t\t\tlong appid = (Long) app.get(ApplicationData.COLUMN_APPLICATIONID);\n\t\t\tApplicationItemRelationData rel = new ApplicationItemRelationData();\n\t\t\trel.set(ApplicationItemRelationData.COLUMN_APPLICATIONID, appid);\n\t\t\trel.set(ApplicationItemRelationData.COLUMN_ITEMID, itemid);\n\t\t\trel.set(ApplicationItemRelationData.COLUMN_HOSTID, hostid);\n\t\t\trel.insert(zabbixLocalDB);\n\t\t\t_commitTransactionIfRecommended();\n\n\t\t\tnum++;\n\t\t}\n\t\tif (num == 0) {\n\t\t\t// if there's no application, the ID #0 must be added (for other)\n\t\t\tApplicationItemRelationData rel = new ApplicationItemRelationData();\n\t\t\trel.set(ApplicationItemRelationData.COLUMN_APPLICATIONID, 0);\n\t\t\trel.set(ApplicationItemRelationData.COLUMN_ITEMID, itemid);\n\t\t\trel.set(ApplicationItemRelationData.COLUMN_HOSTID, hostid);\n\t\t\trel.insert(zabbixLocalDB);\n\n\t\t\t// if #0 \"other\" does not exist yet, it has to be created\n\t\t\tApplicationData app = new ApplicationData();\n\t\t\tapp.set(ApplicationData.COLUMN_APPLICATIONID, 0);\n\t\t\tapp.set(ApplicationData.COLUMN_NAME, \"- \"+context.getResources().getString(R.string.other)+\" -\");\n\t\t\tapp.insert(zabbixLocalDB, ApplicationData.COLUMN_APPLICATIONID);\n\t\t}\n\t}\n\n\t/**\n\t * import the newest event of a trigger\n\t * @param triggerid\n\t * @throws JSONException\n\t * @throws IOException\n\t * @throws HttpAuthorizationRequiredException\n\t * @throws NoAPIAccessException\n\t */\n\tpublic void importEventByTriggerId(String triggerid) throws JSONException, IOException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\tif (!isCached(EventData.TABLE_NAME, \"triggerid=\"+triggerid)) {\n\t\t\t_startTransaction();\n\t\t\tzabbixLocalDB.delete(EventData.TABLE_NAME, EventData.COLUMN_OBJECTID+\"=\"+triggerid, null);\n\n\t\t\tJSONObject params = new JSONObject()\n\t\t\t\t.put(\"output\", \"extend\")\n\t\t\t\t.put(isVersion2?\"selectHosts\":\"select_hosts\", \"extend\")\n\t\t\t\t.put(\"triggerids\", new JSONArray().put(triggerid))\n\t\t\t\t.put(\"limit\", 1)\n\t\t\t\t.put(\"source\", 0);\n\t\t\tif (!isVersion2) {\n\t\t\t\tparams.put(\"sortfield\", \"clock\")\n\t\t\t\t\t.put(\"sortorder\", \"DESC\");\n\t\t\t}\n\n\t\t\tJsonArrayOrObjectReader events = _queryStream(\n\t\t\t\t\t\"event.get\"\n\t\t\t\t\t, params\n\t\t\t);\n\t\t\timportEvents(events, null);\n\t\t\tevents.close();\n\n\t\t\tsetCached(EventData.TABLE_NAME, \"triggerid=\"+triggerid, ZabbixConfig.CACHE_LIFETIME_EVENTS);\n\t\t\t_endTransaction();\n\t\t}\n\t}\n\n\t/**\n\t * import the newest events\n\t * @throws ClientProtocolException\n\t * @throws IOException\n\t * @throws JSONException\n\t * @throws HttpAuthorizationRequiredException\n\t * @throws NoAPIAccessException\n\t */\n\tpublic void importEvents() throws ClientProtocolException, IOException, JSONException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\tif (!isCached(EventData.TABLE_NAME, null)) {\n\t\t\t_startTransaction();\n\t\t\tzabbixLocalDB.delete(EventData.TABLE_NAME, null, null);\n\t\t\tzabbixLocalDB.delete(TriggerData.TABLE_NAME, null, null);\n\t\t\tzabbixLocalDB.delete(CacheData.TABLE_NAME, CacheData.COLUMN_KIND+\"='\"+EventData.TABLE_NAME+\"'\", null);\n\t\t\tzabbixLocalDB.delete(CacheData.TABLE_NAME, CacheData.COLUMN_KIND+\"='\"+TriggerData.TABLE_NAME+\"'\", null);\n\n\t\t\tint numEvents = ZabbixConfig.EVENTS_GET_LIMIT;\n\n\t\t\tJSONObject params = new JSONObject()\n\t\t\t\t.put(\"output\", \"extend\")\n\t\t\t\t.put(\"limit\", ZabbixConfig.EVENTS_GET_LIMIT)\n\t\t\t\t.put(isVersion2?\"selectHosts\":\"select_hosts\", \"extend\")\n\t\t\t\t.put(isVersion2?\"selectTriggers\":\"select_triggers\", \"extend\")\n\t\t\t\t.put(\"source\", 0)\n\t\t\t\t.put(\"time_from\", (new Date().getTime()/1000) - ZabbixConfig.EVENT_GET_TIME_FROM_SHIFT);\n\t\t\tif (!isVersion2) {\n\t\t\t\t// in Zabbix version <2.0, this is not default\n\t\t\t\tparams.put(\"sortfield\", \"clock\")\n\t\t\t\t\t.put(\"sortorder\", \"DESC\");\n\t\t\t}\n\t\t\tJsonArrayOrObjectReader events = _queryStream(\n\t\t\t\t\t\"event.get\"\n\t\t\t\t\t, params\n\t\t\t);\n\t\t\timportEvents(events, numEvents);\n\t\t\tevents.close();\n\n\t\t\tsetCached(EventData.TABLE_NAME, null, ZabbixConfig.CACHE_LIFETIME_EVENTS);\n\t\t\t_endTransaction();\n\t\t}\n\t}\n\n\t/**\n\t * @param events stream\n\t * @param numEvents if null, no progressbar-update AND only isert, if it does not exist. If !null, progressbar-update AND always insert without checking\n\t * @throws JsonParseException\n\t * @throws IOException\n\t */\n\tprivate void importEvents(JsonArrayOrObjectReader events, Integer numEvents) throws JsonParseException, IOException {\n\t\tint i=0;\n\t\tJsonObjectReader eventReader;\n\t\twhile ((eventReader = events.next()) != null) {\n\t\t\tEventData e = new EventData();\n\t\t\twhile (eventReader.nextValueToken()) {\n\t\t\t\tString propName = eventReader.getCurrentName();\n\t\t\t\tif (propName.equals(\"hosts\")) {\n\t\t\t\t\t// import hosts\n\t\t\t\t\tString hostnames = (String) importHosts(eventReader.getJsonArray(), null)[0];\n\t\t\t\t\t// store hosts namen\n\t\t\t\t\te.set(EventData.COLUMN_HOSTS, hostnames);\n\t\t\t\t} else if (propName.equals(\"triggers\")) {\n\t\t\t\t\t// import triggers\n\t\t\t\t\timportTriggers(eventReader.getJsonArray());\n\t\t\t\t} else if (propName.equals(EventData.COLUMN_EVENTID)) {\n\t\t\t\t\te.set(EventData.COLUMN_EVENTID, Long.parseLong(eventReader.getText()));\n\t\t\t\t} else if (propName.equals(EventData.COLUMN_CLOCK)) {\n\t\t\t\t\te.set(EventData.COLUMN_CLOCK, Integer.parseInt(eventReader.getText()));\n\t\t\t\t} else if (propName.equals(EventData.COLUMN_OBJECTID)) {\n\t\t\t\t\te.set(EventData.COLUMN_OBJECTID, Long.parseLong(eventReader.getText()));\n\t\t\t\t} else if (propName.equals(EventData.COLUMN_ACK)) {\n\t\t\t\t\te.set(EventData.COLUMN_ACK, Integer.parseInt(eventReader.getText()) == 1);\n\t\t\t\t} else if (propName.equals(EventData.COLUMN_VALUE)) {\n\t\t\t\t\te.set(EventData.COLUMN_VALUE, Integer.parseInt(eventReader.getText()));\n\t\t\t\t} else {\n\t\t\t\t\teventReader.nextProperty();\n\t\t\t\t}\n\t\t\t}\n\t\t\t// event is parsed and can be inserted into the db\n\t\t\tif (numEvents == null) {\n\t\t\t\te.insert(zabbixLocalDB, EventData.COLUMN_EVENTID);\n\t\t\t} else {\n\t\t\t\te.insert(zabbixLocalDB);\n\t\t\t\tif (++i % 10 == 0) {\n\t\t\t\t\tshowProgress(i*100/numEvents);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t_commitTransactionIfRecommended();\n\t\t}\n\t}\n\n\t/**\n\t * import graph items\n\t *\n\t * @param graphItems\n\t * @return true, if graphid column has to be updated from -1 to the correct graphid later.\n\t * @throws JsonParseException\n\t * @throws NumberFormatException\n\t * @throws IOException\n\t */\n\tprivate boolean importGraphItems(JsonArrayOrObjectReader graphItems) throws JsonParseException, NumberFormatException, IOException {\n\t\tboolean mustSetGraphid = false;\n\t\tJsonObjectReader graphItemReader;\n\t\twhile ((graphItemReader = graphItems.next()) != null) {\n\t\t\tGraphItemData gi = new GraphItemData();\n\t\t\twhile (graphItemReader.nextValueToken()) {\n\t\t\t\tString propName = graphItemReader.getCurrentName();\n\t\t\t\tif (propName.equals(\"gitemid\")) {\n\t\t\t\t\tgi.set(GraphItemData.COLUMN_GRAPHITEMID, Long.parseLong(graphItemReader.getText()));\n\t\t\t\t} else if (propName.equals(GraphItemData.COLUMN_GRAPHID)) {\n\t\t\t\t\tgi.set(GraphItemData.COLUMN_GRAPHID, Long.parseLong(graphItemReader.getText()));\n\t\t\t\t} else if (propName.equals(GraphItemData.COLUMN_ITEMID)) {\n\t\t\t\t\tgi.set(GraphItemData.COLUMN_ITEMID, Long.parseLong(graphItemReader.getText()));\n\t\t\t\t} else if (propName.equals(GraphItemData.COLUMN_COLOR)) {\n\t\t\t\t\t// hex string => color int\n\t\t\t\t\tgi.set(GraphItemData.COLUMN_COLOR, Color.parseColor(\"#\"+graphItemReader.getText()));\n\t\t\t\t} else {\n\t\t\t\t\tgraphItemReader.nextProperty();\n\t\t\t\t}\n\t\t\t}\n\t\t\t// if graphid-column was not set, this must be done later. temporary graphid=-1\n\t\t\tif (gi.get(GraphItemData.COLUMN_GRAPHID) == null) {\n\t\t\t\tgi.set(GraphItemData.COLUMN_GRAPHID, -1);\n\t\t\t\tmustSetGraphid = true;\n\t\t\t}\n\t\t\tgi.insert(zabbixLocalDB);\n\t\t}\n\t\treturn mustSetGraphid;\n\t}\n\n\tpublic void importGraphsForScreen(long screenid) throws ClientProtocolException, IOException, JSONException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\tif (!isCached(GraphData.TABLE_NAME, \"screenid=\"+screenid)) {\n\t\t\t_startTransaction();\n\n\t\t\t// collect all graphids\n\t\t\tSet<Long> graphids = new HashSet<Long>();\n\t\t\tCursor cur = zabbixLocalDB.query(ScreenItemData.TABLE_NAME, null, ScreenItemData.COLUMN_SCREENID+\"=\"+screenid, null, null, null, null);\n\t\t\twhile (cur.moveToNext()) {\n\t\t\t\tgraphids.add(cur.getLong(cur.getColumnIndex(ScreenItemData.COLUMN_RESOURCEID)));\n\t\t\t}\n\n\t\t\t// delete old graphs\n\t\t\tString str_graphids = graphids.toString().replace(\"[\", \"\").replace(\"]\", \"\");\n\t\t\tif (str_graphids.length()>0) {\n\t\t\t\tzabbixLocalDB.delete(GraphData.TABLE_NAME, GraphData.COLUMN_GRAPHID+\" IN (\"+str_graphids+\")\", null);\n\t\t\t\tzabbixLocalDB.delete(GraphItemData.TABLE_NAME, GraphItemData.COLUMN_GRAPHID+\" IN (\"+str_graphids+\")\", null);\n\t\t\t}\n\t\t\tzabbixLocalDB.delete(CacheData.TABLE_NAME, CacheData.COLUMN_KIND+\"='\"+GraphData.TABLE_NAME+\"' AND \"+CacheData.COLUMN_FILTER+\"='screenid=\"+screenid+'\\'', null);\n\n\t\t\tJsonArrayOrObjectReader graphs = _queryStream(\n\t\t\t\t\t\"graph.get\"\n\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t\t.put(isVersion2?\"selectGraphItems\":\"select_graph_items\", \"extend\")\n\t\t\t\t\t\t.put(isVersion2?\"selectItems\":\"select_items\", \"extend\")\n\t\t\t\t\t\t.put(\"output\", \"extend\")\n\t\t\t\t\t\t.put(\"graphids\", new JSONArray(graphids))\n\t\t\t);\n\t\t\tJsonObjectReader graphReader;\n\t\t\twhile ((graphReader = graphs.next()) != null) {\n\t\t\t\tboolean mustSetGraphid = false;\n\t\t\t\tGraphData scr = new GraphData();\n\t\t\t\twhile (graphReader.nextValueToken()) {\n\t\t\t\t\tString propName = graphReader.getCurrentName();\n\t\t\t\t\tif (propName.equals(GraphData.COLUMN_GRAPHID)) {\n\t\t\t\t\t\tscr.set(GraphData.COLUMN_GRAPHID, Long.parseLong(graphReader.getText()));\n\t\t\t\t\t} else if (propName.equals(GraphData.COLUMN_NAME)) {\n\t\t\t\t\t\tscr.set(GraphData.COLUMN_NAME, graphReader.getText());\n\t\t\t\t\t} else if (propName.equals(\"gitems\")) {\n\t\t\t\t\t\tmustSetGraphid = importGraphItems(graphReader.getJsonArray());\n\t\t\t\t\t} else if (propName.equals(\"items\")) {\n\t\t\t\t\t\timportItems(graphReader.getJsonArray(), 0, true);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tgraphReader.nextProperty();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tscr.insert(zabbixLocalDB);\n\t\t\t\tif (mustSetGraphid) {\n\t\t\t\t\tContentValues values = new ContentValues(1);\n\t\t\t\t\tvalues.put(GraphItemData.COLUMN_GRAPHID, (Long) scr.get(GraphData.COLUMN_GRAPHID));\n\t\t\t\t\tzabbixLocalDB.update(\n\t\t\t\t\t\t\tGraphItemData.TABLE_NAME\n\t\t\t\t\t\t\t, values\n\t\t\t\t\t\t\t, GraphItemData.COLUMN_GRAPHID+\"=-1\"\n\t\t\t\t\t\t\t, null);\n\t\t\t\t}\n\t\t\t}\n\t\t\tgraphs.close();\n\n\t\t\tsetCached(GraphData.TABLE_NAME, \"screenid=\"+screenid, ZabbixConfig.CACHE_LIFETIME_SCREENS);\n\t\t\t_endTransaction();\n\t\t}\n\t}\n\n\tpublic void importHistoryDetails(String itemid) throws ClientProtocolException, IOException, JSONException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\tif (!isCached(HistoryDetailData.TABLE_NAME, itemid)) {\n\t\t\t_startTransaction();\n\t\t\tzabbixLocalDB.delete(HistoryDetailData.TABLE_NAME, HistoryDetailData.COLUMN_ITEMID+\"=\"+itemid, null);\n\n\t\t\t// the past 2 hours\n\t\t\tlong time_till = new Date().getTime() / 1000;\n\t\t\tlong time_from = time_till - ZabbixConfig.HISTORY_GET_TIME_FROM_SHIFT; // jetzt-2h\n\n\t\t\t// Workaround: historydetails only comes if you use the correct \"history\"-parameter.\n\t\t\t// this parameter can be \"null\" or a number 0-4. Because we don't know when to use which,\n\t\t\t// we try them all, until we get results.\n\t\t\tInteger historytype = null;\n\t\t\tJSONObject result = _queryBuffer(\n\t\t\t\t\t\"history.get\"\n\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t\t.put(\"limit\", 1)\n\t\t\t\t\t\t.put(\"history\", historytype) // for integer ?\n\t\t\t\t\t\t.put(\"itemids\", new JSONArray().put(itemid))\n\t\t\t\t\t\t.put(\"time_from\", time_from)\n\t\t\t);\n\n\t\t\tJSONArray testHistorydetails = result.getJSONArray(\"result\");\n\t\t\tif (testHistorydetails.length() == 0) {\n\t\t\t\thistorytype = -1;\n\t\t\t\twhile (testHistorydetails.length() == 0 && ++historytype <= 4) {\n\t\t\t\t\t// if we get an empty array, we try another history parameter\n\t\t\t\t\tresult = _queryBuffer(\n\t\t\t\t\t\t\t\"history.get\"\n\t\t\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t\t\t\t.put(\"output\", \"extend\")\n\t\t\t\t\t\t\t\t.put(\"limit\", 1)\n\t\t\t\t\t\t\t\t.put(\"history\", historytype)\n\t\t\t\t\t\t\t\t.put(\"itemids\", new JSONArray().put(itemid))\n\t\t\t\t\t\t\t\t.put(\"time_from\", time_from)\n\t\t\t\t\t);\n\t\t\t\t\ttestHistorydetails = result.getJSONArray(\"result\");\n\t\t\t\t}\n\t\t\t}\n\t\t\t// correct historytype found and there are data\n\t\t\tif (testHistorydetails.length() > 0) {\n\t\t\t\t// count of the entries cannot be detected (zabbix bug),\n\t\t\t\t// so we use a fiction\n\t\t\t\tint numDetails = 400;\n\t\t\t\tint curI=0;\n\t\t\t\tJsonArrayOrObjectReader historydetails = _queryStream(\n\t\t\t\t\t\t\"history.get\"\n\t\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t\t\t.put(\"output\", \"extend\")\n\t\t\t\t\t\t\t.put(\"limit\", ZabbixConfig.HISTORY_GET_LIMIT)\n\t\t\t\t\t\t\t.put(\"history\", historytype)\n\t\t\t\t\t\t\t.put(\"itemids\", new JSONArray().put(itemid))\n\t\t\t\t\t\t\t.put(\"time_from\", time_from)\n\t\t\t\t\t\t\t.put(\"sortfield\", \"clock\")\n\t\t\t\t\t\t\t.put(\"sortorder\", \"DESC\")\n\t\t\t\t);\n\t\t\t\tJsonObjectReader historydetail;\n\t\t\t\ttry {\n\t\t\t\t\tint selI = 0;\n\t\t\t\t\twhile ((historydetail = historydetails.next()) != null) {\n\t\t\t\t\t\t// save only every 20th\n\t\t\t\t\t\tif (selI++ % 20 != 0) {\n\t\t\t\t\t\t\twhile (historydetail.nextValueToken()) {\n\t\t\t\t\t\t\t\thistorydetail.nextProperty();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tHistoryDetailData h = new HistoryDetailData();\n\t\t\t\t\t\twhile (historydetail.nextValueToken()) {\n\t\t\t\t\t\t\tString propName = historydetail.getCurrentName();\n\t\t\t\t\t\t\tif (propName.equals(HistoryDetailData.COLUMN_CLOCK)) {\n\t\t\t\t\t\t\t\th.set(HistoryDetailData.COLUMN_CLOCK, Integer.parseInt(historydetail.getText()));\n\t\t\t\t\t\t\t} else if (propName.equals(HistoryDetailData.COLUMN_ITEMID)) {\n\t\t\t\t\t\t\t\th.set(HistoryDetailData.COLUMN_ITEMID, Long.parseLong(historydetail.getText()));\n\t\t\t\t\t\t\t} else if (propName.equals(HistoryDetailData.COLUMN_VALUE)) {\n\t\t\t\t\t\t\t\th.set(HistoryDetailData.COLUMN_VALUE, Double.parseDouble(historydetail.getText()));\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\thistorydetail.nextProperty();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\th.insert(zabbixLocalDB);\n\t\t\t\t\t\tif (++curI % 10 == 0) {\n\t\t\t\t\t\t\tshowProgress(Math.min(curI*100/numDetails, 84));\n\t\t\t\t\t\t}\n\t\t\t\t\t\t_commitTransactionIfRecommended();\n\t\t\t\t\t}\n\t\t\t\t} catch (NumberFormatException e) {\n\t\t\t\t\t// data are unuseable, e.g. because it's a string\n\t\t\t\t}\n\t\t\t\thistorydetails.close();\n\t\t\t}\n\t\t\tsetCached(HistoryDetailData.TABLE_NAME, itemid, ZabbixConfig.CACHE_LIFETIME_HISTORY_DETAILS);\n\t\t\t_endTransaction();\n\t\t}\n\t}\n\n\tprivate long importHostGroups(JsonArrayOrObjectReader jsonArray) throws JsonParseException, IOException {\n\t\tlong firstHostGroupId = -1;\n\t\tJsonObjectReader hostReader;\n\t\twhile ((hostReader = jsonArray.next()) != null) {\n\t\t\tHostGroupData h = new HostGroupData();\n\t\t\twhile (hostReader.nextValueToken()) {\n\t\t\t\tString propName = hostReader.getCurrentName();\n\t\t\t\tif (propName.equals(HostGroupData.COLUMN_GROUPID)) {\n\t\t\t\t\tlong id = Long.parseLong(hostReader.getText());\n\t\t\t\t\tif (firstHostGroupId == -1) firstHostGroupId = id;\n\t\t\t\t\th.set(HostGroupData.COLUMN_GROUPID, id);\n\t\t\t\t} else if (propName.equals(HostGroupData.COLUMN_NAME)) {\n\t\t\t\t\th.set(HostGroupData.COLUMN_NAME, hostReader.getText());\n\t\t\t\t} else {\n\t\t\t\t\thostReader.nextProperty();\n\t\t\t\t}\n\t\t\t}\n\t\t\th.insert(zabbixLocalDB, HostGroupData.COLUMN_GROUPID);\n\t\t\t_commitTransactionIfRecommended();\n\t\t}\n\n\t\treturn firstHostGroupId;\n\t}\n\n\t/**\n\t * import the hosts from stream\n\t * @param jsonArray stream\n\t * @param numHosts count of hosts for progressbar. null if unknown.\n\t * @return Object[] {(String) comma-separated all Hostnames, (Long) 1. host id}\n\t * @throws JsonParseException\n\t * @throws IOException\n\t */\n\tprivate Object[] importHosts(JsonArrayOrObjectReader jsonArray, Integer numHosts) throws JsonParseException, IOException {\n\t\tList<String> hostnames = new ArrayList<String>();\n\t\tlong firstHostId = -1;\n\t\tJsonObjectReader hostReader;\n\t\tint i=0;\n\t\twhile ((hostReader = jsonArray.next()) != null) {\n\t\t\tHostData h = new HostData();\n\t\t\twhile (hostReader.nextValueToken()) {\n\t\t\t\tString propName = hostReader.getCurrentName();\n\t\t\t\tif (propName.equals(HostData.COLUMN_HOSTID)) {\n\t\t\t\t\th.set(HostData.COLUMN_HOSTID, Long.parseLong(hostReader.getText()));\n\t\t\t\t\tif (firstHostId == -1) {\n\t\t\t\t\t\tfirstHostId = (Long) h.get(HostData.COLUMN_HOSTID);\n\t\t\t\t\t}\n\t\t\t\t} else if (propName.equals(HostData.COLUMN_HOST)) {\n\t\t\t\t\tString host = hostReader.getText();\n\t\t\t\t\thostnames.add(host);\n\t\t\t\t\th.set(HostData.COLUMN_HOST, host);\n\t\t\t\t} else if (propName.equals(\"groups\")) {\n\t\t\t\t\tlong groupid = importHostGroups(hostReader.getJsonArray());\n\t\t\t\t\tif (groupid != -1) {\n\t\t\t\t\t\th.set(HostData.COLUMN_GROUPID, groupid);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\thostReader.nextProperty();\n\t\t\t\t}\n\t\t\t}\n\t\t\t// host without group will get group #0 (other)\n\t\t\tif (h.get(HostData.COLUMN_GROUPID) == null) {\n\t\t\t\th.set(HostData.COLUMN_GROUPID, 0);\n\t\t\t\t// create \"other\" hostgroup #1\n\t\t\t\tHostGroupData hg = new HostGroupData();\n\t\t\t\thg.set(HostGroupData.COLUMN_GROUPID, 0);\n\t\t\t\thg.set(HostGroupData.COLUMN_NAME, \"- \"+context.getResources().getString(R.string.other)+\" -\");\n\t\t\t\thg.insert(zabbixLocalDB, HostGroupData.COLUMN_GROUPID);\n\t\t\t}\n\t\t\th.insert(zabbixLocalDB, HostData.COLUMN_HOSTID);\n\t\t\tif (numHosts != null && ++i % 10 == 0) {\n\t\t\t\tshowProgress(i*100/numHosts);\n\t\t\t}\n\t\t\t_commitTransactionIfRecommended();\n\t\t}\n\n\t\treturn new Object[] {hostnames.toString().replaceAll(\"[\\\\[\\\\]]\", \"\"), firstHostId};\n\t}\n\n\tpublic void importHostsAndGroups() throws JSONException, IOException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\tif (!isCached(HostData.TABLE_NAME, null)) {\n\t\t\t_startTransaction();\n\t\t\tzabbixLocalDB.delete(HostData.TABLE_NAME, null, null);\n\t\t\tzabbixLocalDB.delete(HostGroupData.TABLE_NAME, null, null);\n\n\t\t\t// get count of hosts\n\t\t\tJSONObject result = _queryBuffer(\n\t\t\t\t\t\"host.get\"\n\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t\t.put(\"countOutput\", 1)\n\t\t\t\t\t\t.put(\"limit\", ZabbixConfig.HOST_GET_LIMIT)\n\t\t\t\t\t\t.put(isVersion2?\"selectGroups\":\"select_groups\", \"extend\")\n\t\t\t);\n\t\t\tint numHosts = result.getInt(\"result\");\n\t\t\tJsonArrayOrObjectReader hosts = _queryStream(\n\t\t\t\t\t\"host.get\"\n\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t\t.put(\"output\", \"extend\")\n\t\t\t\t\t\t.put(\"limit\", ZabbixConfig.HOST_GET_LIMIT)\n\t\t\t\t\t\t.put(isVersion2?\"selectGroups\":\"select_groups\", \"extend\")\n\t\t\t);\n\t\t\timportHosts(hosts, numHosts);\n\t\t\thosts.close();\n\n\t\t\tsetCached(HostData.TABLE_NAME, null, ZabbixConfig.CACHE_LIFETIME_HOSTS);\n\t\t\t_endTransaction();\n\t\t}\n\t}\n\n\t/**\n\t * import items from stream.\n\t * @param items stream\n\t * @param numItems count for progressbar, if 0 no progressbarupdate\n\t * @param checkBeforeInsert if true, only make an insert if item does not exist\n\t * @return the first item id\n\t * @throws JsonParseException\n\t * @throws IOException\n\t */\n\tprivate long importItems(JsonArrayOrObjectReader items, int numItems, boolean checkBeforeInsert) throws JsonParseException, IOException {\n\t\tlong firstItemId = -1;\n\t\tint curI=0;\n\t\tJsonObjectReader itemReader;\n\t\twhile ((itemReader = items.next()) != null) {\n\t\t\tItemData i = new ItemData();\n\t\t\tString key_ = null;\n\t\t\twhile (itemReader.nextValueToken()) {\n\t\t\t\tString propName = itemReader.getCurrentName();\n\t\t\t\tif (propName.equals(ItemData.COLUMN_ITEMID)) {\n\t\t\t\t\ti.set(ItemData.COLUMN_ITEMID, Long.parseLong(itemReader.getText()));\n\t\t\t\t\tif (firstItemId == -1) {\n\t\t\t\t\t\tfirstItemId = (Long) i.get(ItemData.COLUMN_ITEMID);\n\t\t\t\t\t}\n\t\t\t\t} else if (propName.equals(ItemData.COLUMN_HOSTID)) {\n\t\t\t\t\ti.set(ItemData.COLUMN_HOSTID, Long.parseLong(itemReader.getText()));\n\t\t\t\t} else if (propName.equals(ItemData.COLUMN_DESCRIPTION) || propName.equals(\"name\")) {\n\t\t\t\t\t// since zabbix 2.x is the name of the item \"name\"\n\t\t\t\t\t// before zabbix 2.x the name field was \"description\"\n\t\t\t\t\tif (isVersion2 && propName.equals(\"name\")) {\n\t\t\t\t\t\ti.set(ItemData.COLUMN_DESCRIPTION, itemReader.getText());\n\t\t\t\t\t} else if (!isVersion2) {\n\t\t\t\t\t\ti.set(ItemData.COLUMN_DESCRIPTION, itemReader.getText());\n\t\t\t\t\t}\n\t\t\t\t} else if (propName.equals(ItemData.COLUMN_LASTCLOCK)) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\ti.set(ItemData.COLUMN_LASTCLOCK, Integer.parseInt(itemReader.getText()));\n\t\t\t\t\t} catch (NumberFormatException e) {\n\t\t\t\t\t\t// ignore\n\t\t\t\t\t}\n\t\t\t\t} else if (propName.equals(ItemData.COLUMN_LASTVALUE)) {\n\t\t\t\t\ti.set(ItemData.COLUMN_LASTVALUE, itemReader.getText());\n\t\t\t\t} else if (propName.equals(ItemData.COLUMN_UNITS)) {\n\t\t\t\t\ti.set(ItemData.COLUMN_UNITS, itemReader.getText());\n\t\t\t\t} else if (propName.equals(\"key_\")) {\n\t\t\t\t\tkey_ = itemReader.getText();\n\t\t\t\t} else if (propName.equals(\"applications\")) {\n\t\t\t\t\t// at this point itemid and hostid is unknown\n\t\t\t\t\t// because of this, all applicationrelations will be saved with itemid and hostid \"-1\".\n\t\t\t\t\t// later the IDs will be replaced with the correct\n\t\t\t\t\timportApplications(-1, -1, itemReader.getJsonArray());\n\t\t\t\t} else {\n\t\t\t\t\titemReader.nextProperty();\n\t\t\t\t}\n\t\t\t}\n\t\t\t// if applicable replace placeholder\n\t\t\tString description = (String) i.get(ItemData.COLUMN_DESCRIPTION);\n\t\t\tif (description.matches(\".*\\\\$[0-9].*\")) {\n\t\t\t\tif (key_ != null && key_.indexOf('[') != -1) {\n\t\t\t\t\tString[] keys = key_.substring(key_.indexOf('[')+1, key_.indexOf(']')).split(\",\");\n\t\t\t\t\tfor (int ix=0; ix<keys.length; ix++) {\n\t\t\t\t\t\tdescription = description.replace(\"$\"+(ix+1), keys[ix]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\ti.set(ItemData.COLUMN_DESCRIPTION, description);\n\t\t\tif (checkBeforeInsert) {\n\t\t\t\ti.insert(zabbixLocalDB, ItemData.COLUMN_ITEMID);\n\t\t\t} else {\n\t\t\t\ti.insert(zabbixLocalDB);\n\t\t\t}\n\t\t\tif (numItems > 0 && ++curI % 10 == 0) {\n\t\t\t\tshowProgress(curI*100/numItems);\n\t\t\t}\n\n\t\t\t// now the \"-1\" IDs of applicationsrelation will be replaced with the correct itemID\n\t\t\tContentValues values = new ContentValues(2);\n\t\t\tvalues.put(ApplicationItemRelationData.COLUMN_ITEMID, (Long) i.get(ItemData.COLUMN_ITEMID));\n\t\t\tvalues.put(ApplicationItemRelationData.COLUMN_HOSTID, (Long) i.get(ItemData.COLUMN_HOSTID));\n\t\t\tzabbixLocalDB.update(\n\t\t\t\t\tApplicationItemRelationData.TABLE_NAME\n\t\t\t\t\t, values\n\t\t\t\t\t, ApplicationItemRelationData.COLUMN_ITEMID+\"=-1\"\n\t\t\t\t\t, null\n\t\t\t);\n\t\t}\n\t\treturn firstItemId;\n\t}\n\n\tpublic void importItems(long hostid) throws JSONException, IOException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\tif (!isCached(ItemData.TABLE_NAME, \"hostid=\"+hostid)) {\n\t\t\t_startTransaction();\n\t\t\tzabbixLocalDB.delete(ItemData.TABLE_NAME, ItemData.COLUMN_HOSTID+\"=\"+hostid, null);\n\t\t\tzabbixLocalDB.delete(ApplicationItemRelationData.TABLE_NAME, ApplicationItemRelationData.COLUMN_HOSTID+\"=\"+hostid, null);\n\n\t\t\t// count of items\n\t\t\tJSONObject result = _queryBuffer(\n\t\t\t\t\t\"item.get\"\n\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t.put(\"output\", \"extend\")\n\t\t\t\t\t.put(\"countOutput\", 1)\n\t\t\t\t\t.put(\"limit\", ZabbixConfig.ITEM_GET_LIMIT)\n\t\t\t\t\t.put(\"hostids\", new JSONArray().put(hostid))\n\t\t\t);\n\t\t\tint numItems = result.getInt(\"result\");\n\t\t\tJsonArrayOrObjectReader items = _queryStream(\n\t\t\t\t\t\"item.get\"\n\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t\t.put(\"output\", \"extend\")\n\t\t\t\t\t\t.put(\"limit\", ZabbixConfig.ITEM_GET_LIMIT)\n\t\t\t\t\t\t.put(isVersion2?\"selectApplications\":\"select_applications\", \"extend\")\n\t\t\t\t\t\t.put(\"hostids\", new JSONArray().put(hostid))\n\t\t\t);\n\t\t\timportItems(items, numItems, false);\n\t\t\titems.close();\n\n\t\t\tsetCached(ItemData.TABLE_NAME, \"hostid=\"+hostid, ZabbixConfig.CACHE_LIFETIME_ITEMS);\n\t\t\t_endTransaction();\n\t\t}\n\t}\n\n\tprivate void importScreenItems(JsonArrayOrObjectReader screenItems) throws JsonParseException, NumberFormatException, IOException {\n\t\tJsonObjectReader screenItemReader;\n\t\twhile ((screenItemReader = screenItems.next()) != null) {\n\t\t\tScreenItemData si = new ScreenItemData();\n\t\t\tint resourcetype = -1;\n\t\t\twhile (screenItemReader.nextValueToken()) {\n\t\t\t\tString propName = screenItemReader.getCurrentName();\n\t\t\t\tif (propName.equals(ScreenItemData.COLUMN_SCREENITEMID)) {\n\t\t\t\t\tsi.set(ScreenItemData.COLUMN_SCREENITEMID, Long.parseLong(screenItemReader.getText()));\n\t\t\t\t} else if (propName.equals(ScreenItemData.COLUMN_SCREENID)) {\n\t\t\t\t\tsi.set(ScreenItemData.COLUMN_SCREENID, Long.parseLong(screenItemReader.getText()));\n\t\t\t\t} else if (propName.equals(ScreenItemData.COLUMN_RESOURCEID)) {\n\t\t\t\t\tsi.set(ScreenItemData.COLUMN_RESOURCEID, Long.parseLong(screenItemReader.getText()));\n\t\t\t\t} else if (propName.equals(\"resourcetype\")) {\n\t\t\t\t\tresourcetype = Integer.parseInt(screenItemReader.getText());\n\t\t\t\t} else {\n\t\t\t\t\tscreenItemReader.nextProperty();\n\t\t\t\t}\n\t\t\t}\n\t\t\t// only resouretype == 0\n\t\t\tif (resourcetype == 0) {\n\t\t\t\tsi.insert(zabbixLocalDB);\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic void importScreens() throws ClientProtocolException, IOException, JSONException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\tif (!isCached(ScreenData.TABLE_NAME, null)) {\n\t\t\t_startTransaction();\n\n\t\t\tzabbixLocalDB.delete(ScreenData.TABLE_NAME, null, null);\n\t\t\tzabbixLocalDB.delete(ScreenItemData.TABLE_NAME, null, null);\n\t\t\tzabbixLocalDB.delete(CacheData.TABLE_NAME, CacheData.COLUMN_KIND+\"='\"+ScreenData.TABLE_NAME+\"'\", null);\n\n\t\t\tJsonArrayOrObjectReader screens = _queryStream(\n\t\t\t\t\t(isVersion2?\"s\":\"S\")+\"creen.get\"\n\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t\t.put(\"output\", \"extend\")\n\t\t\t\t\t\t.put(isVersion2?\"selectScreenItems\":\"select_screenitems\", \"extend\")\n\t\t\t);\n\t\t\tJsonObjectReader screenReader;\n\t\t\twhile ((screenReader = screens.next()) != null) {\n\t\t\t\tScreenData scr = new ScreenData();\n\t\t\t\twhile (screenReader.nextValueToken()) {\n\t\t\t\t\tString propName = screenReader.getCurrentName();\n\t\t\t\t\tif (propName.equals(ScreenData.COLUMN_SCREENID)) {\n\t\t\t\t\t\tscr.set(ScreenData.COLUMN_SCREENID, Long.parseLong(screenReader.getText()));\n\t\t\t\t\t} else if (propName.equals(ScreenData.COLUMN_NAME)) {\n\t\t\t\t\t\tscr.set(ScreenData.COLUMN_NAME, screenReader.getText());\n\t\t\t\t\t} else if (propName.equals(\"screenitems\")) {\n\t\t\t\t\t\timportScreenItems(screenReader.getJsonArray());\n\t\t\t\t\t} else {\n\t\t\t\t\t\tscreenReader.nextProperty();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tscr.insert(zabbixLocalDB);\n\t\t\t}\n\t\t\tscreens.close();\n\n\t\t\tsetCached(ScreenData.TABLE_NAME, null, ZabbixConfig.CACHE_LIFETIME_SCREENS);\n\t\t\t_endTransaction();\n\t\t}\n\t}\n\n\tpublic void importTrigger(String triggerid) throws JSONException, IOException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\tif (!isCached(TriggerData.TABLE_NAME, \"triggerid=\"+triggerid)) {\n\t\t\t_startTransaction();\n\n\t\t\tJsonArrayOrObjectReader trigger = _queryStream(\n\t\t\t\t\t\"trigger.get\"\n\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t\t.put(\"output\", \"extend\")\n\t\t\t\t\t\t.put(isVersion2?\"selectHosts\":\"select_hosts\", \"extend\")\n\t\t\t\t\t\t.put(\"triggerids\", new JSONArray().put(triggerid))\n\t\t\t);\n\t\t\timportTriggers(trigger);\n\t\t\ttrigger.close();\n\n\t\t\tsetCached(TriggerData.TABLE_NAME, \"triggerid=\"+triggerid, ZabbixConfig.CACHE_LIFETIME_TRIGGERS);\n\t\t\t_endTransaction();\n\t\t}\n\t}\n\n\t/**\n\t * importiert ein trigger mit dem attribute itemid. ggf. wird der trigger zuerst gelöscht und neu angelegt.\n\t * imports a trigger with the attribute itemid. if trigger already exists, it will be removed first.\n\t * @param triggerid\n\t * @throws JSONException\n\t * @throws IOException\n\t * @throws HttpAuthorizationRequiredException\n\t * @throws NoAPIAccessException\n\t */\n\tpublic void importTriggerColumnItemId(String triggerid) throws JSONException, IOException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\t// check if the trigger exists and if the itemid was set\n\t\tboolean mustImport = true;\n\t\tCursor cur = zabbixLocalDB.query(TriggerData.TABLE_NAME, null, TriggerData.COLUMN_TRIGGERID+\"=\"+triggerid, null, null, null, null);\n\t\tif (cur.moveToFirst()) {\n\t\t\tlong itemid = 0;\n\t\t\ttry {\n\t\t\t\titemid = cur.getLong(cur.getColumnIndex(TriggerData.COLUMN_ITEMID));\n\t\t\t} catch (Exception e) {\n\t\t\t\t// no itemid\n\t\t\t}\n\t\t\tif (itemid > 0) {\n\t\t\t\tmustImport = false;\n\t\t\t}\n\t\t}\n\t\tif (mustImport) {\n\t\t\t_startTransaction();\n\t\t\tzabbixLocalDB.delete(TriggerData.TABLE_NAME, TriggerData.COLUMN_TRIGGERID+\"=\"+triggerid, null);\n\t\t\tJsonArrayOrObjectReader triggers = _queryStream(\n\t\t\t\t\t\"trigger.get\"\n\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t\t.put(\"output\", \"extend\")\n\t\t\t\t\t\t.put(isVersion2?\"selectHosts\":\"select_hosts\", \"extend\")\n\t\t\t\t\t\t.put(isVersion2?\"selectGroups\":\"select_groups\", \"extend\")\n\t\t\t\t\t\t.put(isVersion2?\"selectItems\":\"select_items\", \"extend\")\n\t\t\t\t\t\t.put(\"triggerids\", new JSONArray().put(triggerid))\n\t\t\t\t\t\t.put(\"limit\", 1)\n\t\t\t);\n\t\t\timportTriggers(triggers);\n\t\t\t_endTransaction();\n\t\t}\n\t}\n\n\t/**\n\t * imports the \"warning\"-triggers\n\t * @throws JSONException\n\t * @throws IOException\n\t * @throws HttpAuthorizationRequiredException\n\t * @throws NoAPIAccessException\n\t */\n\tpublic void importTriggers() throws JSONException, IOException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\tif (!isCached(TriggerData.TABLE_NAME, null)) {\n\t\t\t// clear triggers\n\t\t\tzabbixLocalDB.delete(TriggerData.TABLE_NAME, null, null);\n\n\t\t\t_startTransaction();\n\n\t\t\tlong min = (new Date().getTime()/1000)-ZabbixConfig.STATUS_SHOW_TRIGGER_TIME;\n\t\t\tJsonArrayOrObjectReader triggers = _queryStream(\n\t\t\t\t\t\"trigger.get\"\n\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t\t.put(\"output\", \"extend\")\n\t\t\t\t\t\t.put(\"sortfield\", \"lastchange\")\n\t\t\t\t\t\t.put(\"sortorder\", \"desc\")\n\t\t\t\t\t\t.put(isVersion2?\"selectHosts\":\"select_hosts\", \"extend\")\n\t\t\t\t\t\t.put(isVersion2?\"selectGroups\":\"select_groups\", \"extend\")\n\t\t\t\t\t\t.put(isVersion2?\"selectItems\":\"select_items\", \"extend\")\n\t\t\t\t\t\t.put(\"lastChangeSince\", min)\n\t\t\t\t\t\t.put(\"only_true\", \"1\")\n\t\t\t\t\t\t.put(\"limit\", ZabbixConfig.TRIGGER_GET_LIMIT)\n\t\t\t\t\t\t.put(\"expandDescription\", true)\n\t\t\t);\n\t\t\timportTriggers(triggers);\n\t\t\ttriggers.close();\n\n\t\t\tsetCached(TriggerData.TABLE_NAME, null, ZabbixConfig.CACHE_LIFETIME_TRIGGERS);\n\t\t\t_endTransaction();\n\t\t}\n\t}\n\n\tprivate void importTriggers(JsonArrayOrObjectReader jsonArray) throws JsonParseException, IOException {\n\t\tJsonObjectReader triggerReader;\n\t\twhile ((triggerReader = jsonArray.next()) != null) {\n\t\t\tTriggerData t = new TriggerData();\n\t\t\twhile (triggerReader.nextValueToken()) {\n\t\t\t\tString propName = triggerReader.getCurrentName();\n\t\t\t\tif (propName.equals(TriggerData.COLUMN_TRIGGERID)) {\n\t\t\t\t\tt.set(TriggerData.COLUMN_TRIGGERID, Long.parseLong(triggerReader.getText()));\n\t\t\t\t} else if (propName.equals(TriggerData.COLUMN_COMMENTS)) {\n\t\t\t\t\tt.set(TriggerData.COLUMN_COMMENTS, triggerReader.getText());\n\t\t\t\t} else if (propName.equals(TriggerData.COLUMN_DESCRIPTION)) {\n\t\t\t\t\tt.set(TriggerData.COLUMN_DESCRIPTION, triggerReader.getText());\n\t\t\t\t} else if (propName.equals(TriggerData.COLUMN_EXPRESSION)) {\n\t\t\t\t\tt.set(TriggerData.COLUMN_EXPRESSION, triggerReader.getText());\n\t\t\t\t} else if (propName.equals(TriggerData.COLUMN_LASTCHANGE)) {\n\t\t\t\t\tt.set(TriggerData.COLUMN_LASTCHANGE, Integer.parseInt(triggerReader.getText()));\n\t\t\t\t} else if (propName.equals(TriggerData.COLUMN_PRIORITY)) {\n\t\t\t\t\tt.set(TriggerData.COLUMN_PRIORITY, Integer.parseInt(triggerReader.getText()));\n\t\t\t\t} else if (propName.equals(TriggerData.COLUMN_STATUS)) {\n\t\t\t\t\tt.set(TriggerData.COLUMN_STATUS, Integer.parseInt(triggerReader.getText()));\n\t\t\t\t} else if (propName.equals(TriggerData.COLUMN_VALUE)) {\n\t\t\t\t\tt.set(TriggerData.COLUMN_VALUE, Integer.parseInt(triggerReader.getText()));\n\t\t\t\t} else if (propName.equals(TriggerData.COLUMN_URL)) {\n\t\t\t\t\tt.set(TriggerData.COLUMN_URL, triggerReader.getText());\n\t\t\t\t} else if (propName.equals(\"hosts\")) {\n\t\t\t\t\tObject[] hostsCache = importHosts(triggerReader.getJsonArray(), null);\n\t\t\t\t\tt.set(TriggerData.COLUMN_HOSTS, hostsCache[0]);\n\t\t\t\t\tt.set(TriggerData.COLUMN_HOSTID, hostsCache[1]);\n\t\t\t\t} else if (propName.equals(\"groups\")) {\n\t\t\t\t\timportHostGroups(triggerReader.getJsonArray());\n\t\t\t\t} else if (propName.equals(\"items\")) {\n\t\t\t\t\t// store the first item id\n\t\t\t\t\tt.set(TriggerData.COLUMN_ITEMID, importItems(triggerReader.getJsonArray(), 1, true));\n\t\t\t\t} else {\n\t\t\t\t\ttriggerReader.nextProperty();\n\t\t\t\t}\n\t\t\t}\n\t\t\tt.insert(zabbixLocalDB, TriggerData.COLUMN_TRIGGERID);\n\t\t\t_commitTransactionIfRecommended();\n\t\t}\n\t}\n\n\tpublic void importTriggersByItemId(String itemid) throws JSONException, IOException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\tif (!isCached(TriggerData.TABLE_NAME, \"itemid=\"+itemid)) {\n\t\t\t_startTransaction();\n\t\t\tzabbixLocalDB.delete(TriggerData.TABLE_NAME, TriggerData.COLUMN_ITEMID+\"=\"+itemid, null);\n\t\t\tJsonArrayOrObjectReader triggers = _queryStream(\n\t\t\t\t\t\"trigger.get\"\n\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t\t.put(\"output\", \"extend\")\n\t\t\t\t\t\t.put(isVersion2?\"selectHosts\":\"select_hosts\", \"extend\")\n\t\t\t\t\t\t.put(isVersion2?\"selectGroups\":\"select_groups\", \"extend\")\n\t\t\t\t\t\t.put(isVersion2?\"selectItems\":\"select_items\", \"extend\")\n\t\t\t\t\t\t.put(\"itemids\", new JSONArray().put(itemid))\n\t\t\t\t\t\t.put(\"limit\", 1)\n\t\t\t\t\t\t.put(\"sortfield\", \"lastchange\")\n\t\t\t\t\t\t.put(\"sortorder\", \"DESC\")\n\t\t\t);\n\t\t\timportTriggers(triggers);\n\t\t\tsetCached(TriggerData.TABLE_NAME, \"itemid=\"+itemid, ZabbixConfig.CACHE_LIFETIME_TRIGGERS);\n\t\t\t_endTransaction();\n\t\t}\n\t}\n\n\tpublic boolean isCached(String kind, String filter) {\n\t\tSQLiteQueryBuilder sqlBuilder = new SQLiteQueryBuilder();\n\t\tsqlBuilder.setTables(CacheData.TABLE_NAME);\n\t\tsqlBuilder.appendWhere(CacheData.COLUMN_KIND+\"='\"+kind+\"' AND \");\n\t\tsqlBuilder.appendWhere(CacheData.COLUMN_FILTER+\n\t\t\t\t(filter==null?\" IS NULL\":\"='\"+filter+\"'\")\n\t\t);\n\t\tsqlBuilder.appendWhere(\" AND \"+CacheData.COLUMN_EXPIRE_DATE+\">\"+new Date().getTime()/1000);\n\t\tCursor cur = sqlBuilder.query(\n\t\t\tzabbixLocalDB,\n\t\t\tnull,\n\t\t\tnull,\n\t\t\tnull,\n\t\t\tnull,\n\t\t\tnull,\n\t\t\tnull\n\t\t);\n\t\tLog.i(\"ZabbixContentProvider\", \"isCached \"+kind+\"//\"+filter+\"//\"+cur.moveToFirst());\n\t\treturn cur.moveToFirst();\n\t}\n\n\t/**\n\t * public, for the unit test\n\t */\n\tpublic void setCached(String kind, String filter, int lifetime) {\n\t\tCacheData cache = new CacheData();\n\t\tcache.set(CacheData.COLUMN_EXPIRE_DATE, new Date().getTime()/1000 + lifetime);\n\t\tcache.set(CacheData.COLUMN_KIND, kind);\n\t\tif (filter != null) {\n\t\t\tcache.set(CacheData.COLUMN_FILTER, filter);\n\t\t}\n\t\tcache.insert(zabbixLocalDB);\n\t}\n\n\t/**\n\t * updates the progressbar in the gui\n\t * @param i 0..100\n\t */\n\tpublic void showProgress(int i) {\n\t\t// if applicable, transform the progress\n\t\tif (transformProgressStart != 0 && transformProgressEnd != 0) {\n\t\t\ti = (int) (transformProgressStart + (transformProgressEnd-transformProgressStart)*(double)i/100);\n\t\t}\n\n\t\tIntent intent = new Intent(ZabbixContentProvider.CONTENT_PROVIDER_INTENT_ACTION);\n\t\tintent.putExtra(\"flag\", ZabbixContentProvider.INTENT_FLAG_SHOW_PROGRESS);\n\t\tintent.putExtra(\"value\", i);\n\t\tcontext.sendBroadcast(intent);\n\t}\n\n\t/**\n\t * transforms the progress\n\t * @param start 0% => start%\n\t * @param end 100% => end%\n\t */\n\tpublic void transformProgress(int start, int end) {\n\t\ttransformProgressStart = start;\n\t\ttransformProgressEnd = end;\n\t}\n}\n"],
      "p_date_tdt": "Sep 12, 2012 5:48:12 AM",
      "c_comments_t": ["\t\t\t// create ApplicationItemRelation /** \n * public, for the unit test\n */\n /** \n * import the hosts from stream\n * @param jsonArray stream\n * @param numHosts count of hosts for progressbar. null if unknown.\n * @return Object[] {(String) comma-separated all Hostnames, (Long) 1. host id}\n * @throws JsonParseException\n * @throws IOException\n */\n \t\t\t// result array found /** \n * import graph items\n * @param graphItems\n * @return true, if graphid column has to be updated from -1 to the correct graphid later.\n * @throws JsonParseException\n * @throws NumberFormatException\n * @throws IOException\n */\n \t\t\t\t\t\t// save only every 20th \t\t\t// wrong password. token remains null \t\t\t// the past 2 hours \t\t\t\t\t// data are unuseable, e.g. because it's a string /** \n * @param events stream\n * @param numEvents if null, no progressbar-update AND only isert, if it does not exist. If !null, progressbar-update AND always insert without checking\n * @throws JsonParseException\n * @throws IOException\n */\n \t\t\t\t\t// Precondition failed / Looks like Zabbix 1.8.2 \t\t\t// get API version \t\t\t// if #0 \"other\" does not exist yet, it has to be created \t\t\t\t\t// later the IDs will be replaced with the correct /** \n * zabbix api call. data will be parsed as json object on-the-fly. Caution: use this only for api calls with a small return data.\n * @param method\n * @param params\n * @return\n * @throws ClientProtocolException\n * @throws IOException\n * @throws JSONException\n * @throws HttpAuthorizationRequiredException\n * @throws NoAPIAccessException\n */\n /** \n * begin sql transaction\n */\n \t\t\t\t\t\t// first do a new auth and then try the same api call again \t\t\t\t// no itemid \t\t\t// count of items /** \n * init\n * @param context android context\n * @param zabbixLocalDB sqlite\n */\n \t\t\t// create applications that does not exist \t\t\t\t// so we use a fiction \t\t\t// only resouretype == 0 /** \n * probably too old zabbix <= 1.8.2\n */\n /** \n * zabbix auth. user and pwd from app preferences\n * @return true success\n * @throws ClientProtocolException\n * @throws IOException\n * @throws JSONException\n * @throws HttpAuthorizationRequiredException\n * @throws NoAPIAccessException\n */\n /** \n * close the last http stream\n */\n \t\t\t// Workaround: historydetails only comes if you use the correct \"history\"-parameter. /** \n * transforms the progress\n * @param start 0% => start%\n * @param end 100% => end%\n */\n \t\t\t\t// in Zabbix version <2.0, this is not default \t\t\t\t// file not found \t\t\t\t\t// hex string => color int \t\tHttpClientParams.setRedirecting(params, true); // redirecting \t\t\t// if applicable replace placeholder \t\t\t// if graphid-column was not set, this must be done later. temporary graphid=-1 \t\t// for GUI unit test, just return true /** \n * imports the \"warning\"-triggers\n * @throws JSONException\n * @throws IOException\n * @throws HttpAuthorizationRequiredException\n * @throws NoAPIAccessException\n */\n \t\t\t// event is parsed and can be inserted into the db \t\tpublic static final int EVENT_GET_TIME_FROM_SHIFT = 7*24*60*60; // -7 days \t\t// http request \t\t\t\t\t// store hosts namen \t\t\t\t// http auth failed \t\t\t\t\t// at this point itemid and hostid is unknown \t\t\t\t\t// import triggers \t\t\t// we try them all, until we get results. /** \n * importiert ein trigger mit dem attribute itemid. ggf. wird der trigger zuerst gelöscht und neu angelegt. imports a trigger with the attribute itemid. if trigger already exists, it will be removed first.\n * @param triggerid\n * @throws JSONException\n * @throws IOException\n * @throws HttpAuthorizationRequiredException\n * @throws NoAPIAccessException\n */\n \t\t\t\t\t// import hosts \t\t\t// for unit test \t\t\t\t// ignore \t\t\tlong time_from = time_till - ZabbixConfig.HISTORY_GET_TIME_FROM_SHIFT; // jetzt-2h \t\t\t// or a json object /** \n * zabbix error: no api access\n */\n /** \n * counts the sql inserts/updates and do a transaction commit to save the memory\n */\n \t\t\t// send intent to GUI \t\t\t\t\t// before zabbix 2.x the name field was \"description\" \t\t\t\t\t// if we get an empty array, we try another history parameter \t\t\t\t\t// store the first item id \t\t// check if the trigger exists and if the itemid was set /** \n * global constants\n */\n \t\t\t\t// create \"other\" hostgroup #1 \t\t\t// if there's no application, the ID #0 must be added (for other) \t\t\t\t\t// because of this, all applicationrelations will be saved with itemid and hostid \"-1\". \t\tpublic static final int HISTORY_GET_TIME_FROM_SHIFT = 8*60*60; // -8h \t\t\t\t\t\t.put(\"history\", historytype) // for integer ? /** \n * interface to connect to the zabbix server\n */\n /** \n * acknowledge zabbix event. Sets ack-flag with comment. Caution: This is supported only for Zabbix version >= 1.8.4\n * @param eventid\n * @param comment\n * @return true, success.\n * @throws ClientProtocolException\n * @throws IOException\n * @throws JSONException\n * @throws HttpAuthorizationRequiredException\n * @throws NoAPIAccessException\n */\n \t\t\t// store the last stream to close it if an exception will be thrown /** \n * zabbix api call as stream.\n * @param method\n * @param params\n * @return stream im json array wrapper\n * @throws JSONException\n * @throws IOException\n * @throws HttpAuthorizationRequiredException\n * @throws NoAPIAccessException\n */\n \t\t// if applicable http auth \t\t\t// correct historytype found and there are data \t\t\t\t// count of the entries cannot be detected (zabbix bug), /** \n * import items from stream.\n * @param items stream\n * @param numItems count for progressbar, if 0 no progressbarupdate\n * @param checkBeforeInsert if true, only make an insert if item does not exist\n * @return the first item id\n * @throws JsonParseException\n * @throws IOException\n */\n \t\t\t// collect all graphids /** \n * http auth is needed\n */\n \t\t\t// ignore for unit test /** \n * commit sql transaction\n */\n \t\t\t// delete old graphs \t\t\t// host without group will get group #0 (other) \t\t\t// there's no result \t\t// if applicable, transform the progress \t\t\t// SSL not trusted \t\t\t// internet problem \t\t\tif (jp.nextToken() != JsonToken.START_ARRAY && jp.getCurrentToken() != JsonToken.START_OBJECT) { // go inside the array \t\tpublic static final int CACHE_LIFETIME_APPLICATIONS = 2*24*60*60; // 2 days \t\t\t\t\t// since zabbix 2.x is the name of the item \"name\" \t\t\t// now the \"-1\" IDs of applicationsrelation will be replaced with the correct itemID \t\t\t// get count of hosts /** \n * import the newest events\n * @throws ClientProtocolException\n * @throws IOException\n * @throws JSONException\n * @throws HttpAuthorizationRequiredException\n * @throws NoAPIAccessException\n */\n /** \n * updates the progressbar in the gui\n * @param i 0..100\n */\n \t\t\t\t\t\t// ignore \t\t\t\t\t// first do a new auth and then try the same api call again /** \n * import the newest event of a trigger\n * @param triggerid\n * @throws JSONException\n * @throws IOException\n * @throws HttpAuthorizationRequiredException\n * @throws NoAPIAccessException\n */\n \t\t// it can be an (empty) array \t\t\t// this parameter can be \"null\" or a number 0-4. Because we don't know when to use which, \t\t\t// clear triggers"],
      "p_contents_t": ["package com.inovex.zabbixmobile.api;\n\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.net.Socket;\nimport java.net.UnknownHostException;\nimport java.security.KeyManagementException;\nimport java.security.KeyStore;\nimport java.security.KeyStoreException;\nimport java.security.NoSuchAlgorithmException;\nimport java.security.UnrecoverableKeyException;\nimport java.security.cert.CertificateException;\nimport java.security.cert.X509Certificate;\nimport java.util.ArrayList;\nimport java.util.Date;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Set;\n\nimport javax.net.ssl.SSLContext;\nimport javax.net.ssl.SSLPeerUnverifiedException;\nimport javax.net.ssl.TrustManager;\nimport javax.net.ssl.X509TrustManager;\n\nimport org.apache.http.HttpResponse;\nimport org.apache.http.HttpVersion;\nimport org.apache.http.auth.AuthScope;\nimport org.apache.http.auth.UsernamePasswordCredentials;\nimport org.apache.http.client.ClientProtocolException;\nimport org.apache.http.client.methods.HttpPost;\nimport org.apache.http.client.params.HttpClientParams;\nimport org.apache.http.conn.ClientConnectionManager;\nimport org.apache.http.conn.scheme.PlainSocketFactory;\nimport org.apache.http.conn.scheme.Scheme;\nimport org.apache.http.conn.scheme.SchemeRegistry;\nimport org.apache.http.conn.ssl.SSLSocketFactory;\nimport org.apache.http.entity.StringEntity;\nimport org.apache.http.impl.client.DefaultHttpClient;\nimport org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager;\nimport org.apache.http.params.BasicHttpParams;\nimport org.apache.http.params.HttpConnectionParams;\nimport org.apache.http.params.HttpParams;\nimport org.apache.http.params.HttpProtocolParams;\nimport org.apache.http.protocol.HTTP;\nimport org.codehaus.jackson.JsonFactory;\nimport org.codehaus.jackson.JsonParseException;\nimport org.codehaus.jackson.JsonParser;\nimport org.codehaus.jackson.JsonToken;\nimport org.json.JSONArray;\nimport org.json.JSONException;\nimport org.json.JSONObject;\n\nimport android.content.ContentValues;\nimport android.content.Context;\nimport android.content.Intent;\nimport android.content.SharedPreferences;\nimport android.database.Cursor;\nimport android.database.sqlite.SQLiteDatabase;\nimport android.database.sqlite.SQLiteQueryBuilder;\nimport android.graphics.Color;\nimport android.preference.PreferenceManager;\nimport android.util.Log;\n\nimport com.inovex.zabbixmobile.R;\nimport com.inovex.zabbixmobile.ZabbixContentProvider;\nimport com.inovex.zabbixmobile.model.ApplicationData;\nimport com.inovex.zabbixmobile.model.ApplicationItemRelationData;\nimport com.inovex.zabbixmobile.model.CacheData;\nimport com.inovex.zabbixmobile.model.EventData;\nimport com.inovex.zabbixmobile.model.GraphData;\nimport com.inovex.zabbixmobile.model.GraphItemData;\nimport com.inovex.zabbixmobile.model.HistoryDetailData;\nimport com.inovex.zabbixmobile.model.HostData;\nimport com.inovex.zabbixmobile.model.HostGroupData;\nimport com.inovex.zabbixmobile.model.ItemData;\nimport com.inovex.zabbixmobile.model.ScreenData;\nimport com.inovex.zabbixmobile.model.ScreenItemData;\nimport com.inovex.zabbixmobile.model.TriggerData;\n\n/**\n * interface to connect to the zabbix server\n */\npublic class ZabbixService {\n\tclass CustomSSLSocketFactory extends SSLSocketFactory {\n\t\tSSLContext sslContext = SSLContext.getInstance(\"TLS\");\n\n\t\tpublic CustomSSLSocketFactory(KeyStore truststore) throws NoSuchAlgorithmException, KeyManagementException, KeyStoreException, UnrecoverableKeyException {\n\t\t\tsuper(truststore);\n\t\t\tTrustManager tm = new X509TrustManager() {\n\t\t\t\t@Override\n\t\t\t\tpublic void checkClientTrusted(X509Certificate[] chain,\n\t\t\t\t\t\tString authType) throws CertificateException {\n\t\t\t\t}\n\t\t\t\t@Override\n\t\t\t\tpublic void checkServerTrusted(X509Certificate[] chain,\n\t\t\t\t\t\tString authType) throws CertificateException {\n\t\t\t\t}\n\t\t\t\t@Override\n\t\t\t\tpublic X509Certificate[] getAcceptedIssuers() {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t};\n\t\t\tsslContext.init(null, new TrustManager[] { tm }, null);\n\t\t}\n\n\t\t@Override\n\t\tpublic Socket createSocket() throws IOException {\n\t\t\treturn sslContext.getSocketFactory().createSocket();\n\t\t}\n\n\t\t@Override\n\t\tpublic Socket createSocket(Socket socket, String host, int port, boolean autoClose) throws IOException, UnknownHostException {\n\t\t\treturn sslContext.getSocketFactory().createSocket(socket, host, port, autoClose);\n\t\t}\n\t}\n\n\t/**\n\t * http auth is needed\n\t */\n\tpublic class HttpAuthorizationRequiredException extends Exception {\n\t\tprivate static final long serialVersionUID = 6632422081858878147L;\n\t}\n\n\t/**\n\t * zabbix error: no api access\n\t */\n\tpublic class NoAPIAccessException extends Exception {\n\t\tprivate static final long serialVersionUID = 6381395987443456382L;\n\t}\n\n\t/**\n\t * probably too old zabbix <= 1.8.2\n\t */\n\tpublic class PreconditionFailedException extends Exception {\n\t\tprivate static final long serialVersionUID = -2529885710860745023L;\n\t}\n\n\t/**\n\t * global constants\n\t */\n\tpublic class ZabbixConfig {\n\t\tpublic static final int APPLICATION_GET_LIMIT = 1000;\n\t\tpublic static final int EVENTS_GET_LIMIT = 60;\n\t\tpublic static final int HISTORY_GET_TIME_FROM_SHIFT = 8*60*60; // -8h\n\t\tpublic static final int HISTORY_GET_LIMIT = 8000;\n\t\tpublic static final int HOSTGROUP_GET_LIMIT = 200;\n\t\tpublic static final int HOST_GET_LIMIT = 300;\n\t\tpublic static final int ITEM_GET_LIMIT = 200;\n\t\tpublic static final int TRIGGER_GET_LIMIT = 100;\n\t\tpublic static final int EVENT_GET_TIME_FROM_SHIFT = 7*24*60*60; // -7 days\n\t\tpublic static final int CACHE_LIFETIME_APPLICATIONS = 2*24*60*60; // 2 days\n\t\tpublic static final int CACHE_LIFETIME_EVENTS = 120;\n\t\tpublic static final int CACHE_LIFETIME_HISTORY_DETAILS = 4*60;\n\t\tpublic static final int CACHE_LIFETIME_HOST_GROUPS = 7*24*60*60;\n\t\tpublic static final int CACHE_LIFETIME_HOSTS = 2*24*60*60;\n\t\tpublic static final int CACHE_LIFETIME_SCREENS = 2*24*60*60;\n\t\tpublic static final int CACHE_LIFETIME_ITEMS = 4*60;\n\t\tpublic static final int CACHE_LIFETIME_TRIGGERS = 2*60;\n\t\tpublic static final long STATUS_SHOW_TRIGGER_TIME = 14*24*60*60;\n\t\tpublic static final int HTTP_CONNECTION_TIMEOUT = 30000;\n\t}\n\n\tprivate final DefaultHttpClient httpClient;\n\tprivate final SQLiteDatabase zabbixLocalDB;\n\tprivate String url;\n\tprivate String token;\n\tprivate final Context context;\n\tprivate int _transactionStack;\n\tprivate JsonParser lastStream;\n\tprivate int transformProgressStart;\n\tprivate int transformProgressEnd;\n\tprivate boolean _notAuthorizedRetry;\n\tprivate boolean isVersion2 = true;\n\n\t/**\n\t * init\n\t * @param context android context\n\t * @param zabbixLocalDB sqlite\n\t */\n\tpublic ZabbixService(Context context, SQLiteDatabase zabbixLocalDB) {\n\t\tClientConnectionManager ccm = null;\n\t\tHttpParams params = null;\n\n\t\ttry {\n\t\t\tSharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(context);\n\t\t\tif (prefs.getBoolean(\"zabbix_trust_all_ssl_ca\", false)) {\n\t\t\t\tKeyStore trustStore = KeyStore.getInstance(KeyStore.getDefaultType());\n\t\t\t\ttrustStore.load(null, null);\n\n\t\t\t\tSSLSocketFactory sf = new CustomSSLSocketFactory(trustStore);\n\t\t\t\tsf.setHostnameVerifier(SSLSocketFactory.ALLOW_ALL_HOSTNAME_VERIFIER);\n\n\t\t\t\tparams = new BasicHttpParams();\n\t\t\t\tHttpProtocolParams.setVersion(params, HttpVersion.HTTP_1_1);\n\t\t\t\tHttpProtocolParams.setContentCharset(params, HTTP.UTF_8);\n\n\t\t\t\tSchemeRegistry registry = new SchemeRegistry();\n\t\t\t\tregistry.register(new Scheme(\"http\", PlainSocketFactory.getSocketFactory(), 80));\n\t\t\t\tregistry.register(new Scheme(\"https\", sf, 443));\n\n\t\t\t\tccm = new ThreadSafeClientConnManager(params, registry);\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\t// ignore for unit test\n\t\t}\n\n\t\tif (ccm == null || params == null) {\n\t\t\thttpClient = new DefaultHttpClient();\n\t\t} else {\n\t\t\thttpClient = new DefaultHttpClient(ccm, params);\n\t\t}\n\n\t\t// if applicable http auth\n\t\ttry {\n\t\t\tSharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(context);\n\t\t\tif (prefs.getBoolean(\"http_auth_enabled\", false)) {\n\t\t\t\tString user = prefs.getString(\"http_auth_username\", \"\");\n\t\t\t\tString pwd = prefs.getString(\"http_auth_password\", \"\");\n\t\t\t\thttpClient.getCredentialsProvider().setCredentials(AuthScope.ANY, new UsernamePasswordCredentials(user, pwd));\n\t\t\t}\n\t\t} catch (java.lang.UnsupportedOperationException e1) {\n\t\t\t// for unit test\n\t\t}\n\n\t\tparams = httpClient.getParams();\n\t\tHttpClientParams.setRedirecting(params, true); // redirecting\n\t\tHttpConnectionParams.setConnectionTimeout(params, ZabbixConfig.HTTP_CONNECTION_TIMEOUT);\n\t\tthis.context = context;\n\t\tthis.zabbixLocalDB = zabbixLocalDB;\n\t}\n\n\t/**\n\t * counts the sql inserts/updates and do a transaction commit to save the memory\n\t */\n\tprivate void _commitTransactionIfRecommended() {\n\t\tif (_transactionStack++ > 50) {\n\t\t\t_endTransaction();\n\t\t\t_startTransaction();\n\t\t}\n\t}\n\n\t/**\n\t * commit sql transaction\n\t */\n\tpublic void _endTransaction() {\n\t\tif (zabbixLocalDB.inTransaction()) {\n\t\t\tzabbixLocalDB.setTransactionSuccessful();\n\t\t\tzabbixLocalDB.endTransaction();\n\t\t}\n\t}\n\n\t/**\n\t * zabbix api call. data will be parsed as json object on-the-fly.\n\t * Caution: use this only for api calls with a small return data.\n\t * @param method\n\t * @param params\n\t * @return\n\t * @throws ClientProtocolException\n\t * @throws IOException\n\t * @throws JSONException\n\t * @throws HttpAuthorizationRequiredException\n\t * @throws NoAPIAccessException\n\t */\n\tprivate JSONObject _queryBuffer(String method, JSONObject params) throws ClientProtocolException, IOException, JSONException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\tHttpPost post = new HttpPost(url);\n\t\tpost.addHeader(\"Content-Type\", \"application/json; charset=utf-8\");\n\n\t\tString json =\n\t\t\t\"{\" +\n\t\t\t\"\t\\\"jsonrpc\\\" : \\\"2.0\\\",\" +\n\t\t\t\"\t\\\"method\\\" : \\\"\"+method+\"\\\",\" +\n\t\t\t\"\t\\\"params\\\" : \"+params.toString()+\",\" +\n\t\t\t\"\t\\\"auth\\\" : \"+(token==null?\"null\":'\"'+token+'\"')+\",\" +\n\t\t\t\"\t\\\"id\\\" : 0\" +\n\t\t\t\"}\";\n\n\t\tpost.setEntity(new StringEntity(json, \"UTF-8\"));\n\t\ttry {\n\t\t\tHttpResponse resp = httpClient.execute(post);\n\t\t\tif (resp.getStatusLine().getStatusCode() == 401) {\n\t\t\t\t// http auth failed\n\t\t\t\tthrow new HttpAuthorizationRequiredException();\n\t\t\t} else if (resp.getStatusLine().getStatusCode() == 412) {\n\t\t\t\t\t// Precondition failed / Looks like Zabbix 1.8.2\n\t\t\t\tthrow new PreconditionFailedException();\n\t\t\t} else if (resp.getStatusLine().getStatusCode() == 404) {\n\t\t\t\t// file not found\n\t\t\t\tthrow new IOException(resp.getStatusLine().getStatusCode()+\" \"+resp.getStatusLine().getReasonPhrase());\n\t\t\t} else {\n\t\t\t\tLog.d(\"ZabbixService\", resp.getStatusLine().getStatusCode()+\" \"+resp.getStatusLine().getReasonPhrase());\n\t\t\t}\n\t\t\tStringBuilder total = new StringBuilder();\n\t\t\tBufferedReader rd = new BufferedReader(new InputStreamReader(resp.getEntity().getContent()));\n\t\t\tint chr;\n\t\t\twhile ((chr = rd.read()) != -1) {\n\t\t\t\ttotal.append((char) chr);\n\t\t\t}\n\t\t\tJSONObject result = new JSONObject(total.toString());\n\t\t\ttry {\n\t\t\t\tif (result.getJSONObject(\"error\") != null) {\n\t\t\t\t\tif (result.getJSONObject(\"error\").getString(\"data\").equals(\"No API access\")) {\n\t\t\t\t\t\tthrow new NoAPIAccessException();\n\t\t\t\t\t} else throw new RuntimeException(result.getJSONObject(\"error\").toString());\n\t\t\t\t}\n\t\t\t\tif (result.getString(\"data\").equals(\"Not authorized\")) {\n\t\t\t\t\t// first do a new auth and then try the same api call again\n\t\t\t\t\tif (authenticate() && !_notAuthorizedRetry) {\n\t\t\t\t\t\t_notAuthorizedRetry = true;\n\t\t\t\t\t\tJSONObject r = _queryBuffer(method, params);\n\t\t\t\t\t\t_notAuthorizedRetry = false;\n\t\t\t\t\t\treturn r;\n\t\t\t\t\t} throw new IllegalStateException(result.toString());\n\t\t\t\t}\n\t\t\t} catch (JSONException e) {\n\t\t\t\t// ignore\n\t\t\t}\n\t\t\treturn result;\n\t\t} catch (SSLPeerUnverifiedException e) {\n\t\t\t// SSL not trusted\n\t\t\tIntent intent = new Intent(ZabbixContentProvider.CONTENT_PROVIDER_INTENT_ACTION);\n\t\t\tintent.putExtra(\"flag\", ZabbixContentProvider.INTENT_FLAG_SSL_NOT_TRUSTED);\n\t\t\tcontext.sendBroadcast(intent);\n\t\t\tthrow e;\n\t\t} catch (IOException e) {\n\t\t\t// internet problem\n\t\t\t// send intent to GUI\n\t\t\tIntent intent = new Intent(ZabbixContentProvider.CONTENT_PROVIDER_INTENT_ACTION);\n\t\t\tintent.putExtra(\"flag\", ZabbixContentProvider.INTENT_FLAG_CONNECTION_FAILED);\n\t\t\tintent.putExtra(\"value\", e.getMessage());\n\t\t\tcontext.sendBroadcast(intent);\n\t\t\tthrow e;\n\t\t}\n\t}\n\n\t/**\n\t * zabbix api call as stream.\n\t * @param method\n\t * @param params\n\t * @return stream im json array wrapper\n\t * @throws JSONException\n\t * @throws IOException\n\t * @throws HttpAuthorizationRequiredException\n\t * @throws NoAPIAccessException\n\t */\n\tprivate JsonArrayOrObjectReader _queryStream(String method, JSONObject params) throws JSONException, IOException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\t// http request\n\t\tHttpPost post = new HttpPost(url);\n\t\tpost.addHeader(\"Content-Type\", \"application/json; charset=utf-8\");\n\n\t\tJSONObject json = new JSONObject()\n\t\t\t.put(\"jsonrpc\", \"2.0\")\n\t\t\t.put(\"method\", method)\n\t\t\t.put(\"params\", params)\n\t\t\t.put(\"auth\", token)\n\t\t\t.put(\"id\", 0);\n\n\t\tLog.d(\"ZabbixService\", \"_queryStream: \"+url);\n\t\tLog.d(\"ZabbixService\", \"_queryStream: \"+json.toString());\n\n\t\tpost.setEntity(new StringEntity(json.toString(), \"UTF-8\"));\n\t\ttry {\n\t\t\tHttpResponse resp = httpClient.execute(post);\n\t\t\tif (resp.getStatusLine().getStatusCode() == 401) {\n\t\t\t\t// http auth failed\n\t\t\t\tthrow new HttpAuthorizationRequiredException();\n\t\t\t}\n\n\t\t\tJsonFactory jsonFac = new JsonFactory();\n\t\t\tJsonParser jp = jsonFac.createJsonParser(resp.getEntity().getContent());\n\t\t\t// store the last stream to close it if an exception will be thrown\n\t\t\tlastStream = jp;\n\t\t\tif (jp.nextToken() != JsonToken.START_OBJECT) {\n\t\t\t\tthrow new IOException(\"Expected data to start with an Object\");\n\t\t\t}\n\t\t\tdo {\n\t\t\t\tjp.nextToken();\n\t\t\t\tif (jp.getCurrentName().equals(\"error\")) {\n\t\t\t\t\tjp.nextToken();\n\t\t\t\t\tString errortxt = \"\";\n\t\t\t\t\twhile (jp.nextToken() != JsonToken.END_OBJECT) {\n\t\t\t\t\t\terrortxt += jp.getText();\n\t\t\t\t\t}\n\t\t\t\t\tif (errortxt.contains(\"No API access\")) {\n\t\t\t\t\t\tthrow new NoAPIAccessException();\n\t\t\t\t\t} else if (errortxt.contains(\"Not authorized\")) {\n\t\t\t\t\t\t// first do a new auth and then try the same api call again\n\t\t\t\t\t\tif (authenticate() && !_notAuthorizedRetry) {\n\t\t\t\t\t\t\t_notAuthorizedRetry = true;\n\t\t\t\t\t\t\tJsonArrayOrObjectReader r = _queryStream(method, params);\n\t\t\t\t\t\t\t_notAuthorizedRetry = false;\n\t\t\t\t\t\t\treturn r;\n\t\t\t\t\t\t} else throw new IllegalStateException(errortxt);\n\t\t\t\t\t} else throw new IllegalStateException(\"JSON API Error: \"+errortxt);\n\t\t\t\t}\n\t\t\t} while (!jp.getCurrentName().equals(\"result\"));\n\n\t\t\t// result array found\n\t\t\tif (jp.nextToken() != JsonToken.START_ARRAY && jp.getCurrentToken() != JsonToken.START_OBJECT) { // go inside the array\n\t\t\t\ttry {\n\t\t\t\t\tLog.d(\"ZabbixService\", \"current token: \"+jp.getCurrentToken());\n\t\t\t\t\tLog.d(\"ZabbixService\", \"current name: \"+jp.getCurrentName());\n\t\t\t\t\tLog.d(\"ZabbixService\", \"get text: \"+jp.getText());\n\t\t\t\t\tLog.d(\"ZabbixService\", \"next value: \"+jp.nextValue());\n\t\t\t\t\tLog.d(\"ZabbixService\", \"next token: \"+jp.nextToken());\n\t\t\t\t\tLog.d(\"ZabbixService\", \"current token: \"+jp.getCurrentToken());\n\t\t\t\t\tLog.d(\"ZabbixService\", \"current name: \"+jp.getCurrentName());\n\t\t\t\t\tLog.d(\"ZabbixService\", \"get text: \"+jp.getText());\n\t\t\t\t} catch (Exception e) {}\n\t\t\t\tthrow new IOException(\"Expected data to start with an Array\");\n\t\t\t}\n\t\t\treturn new JsonArrayOrObjectReader(jp);\n\t\t} catch (SSLPeerUnverifiedException e) {\n\t\t\tthrow e;\n\t\t} catch (IOException e) {\n\t\t\t// internet problem\n\t\t\t// send intent to GUI\n\t\t\tIntent intent = new Intent(ZabbixContentProvider.CONTENT_PROVIDER_INTENT_ACTION);\n\t\t\tintent.putExtra(\"flag\", ZabbixContentProvider.INTENT_FLAG_CONNECTION_FAILED);\n\t\t\tcontext.sendBroadcast(intent);\n\t\t\tthrow e;\n\t\t}\n\t}\n\n\t/**\n\t * begin sql transaction\n\t */\n\tprivate void _startTransaction() {\n\t\tzabbixLocalDB.beginTransaction();\n\t\t_transactionStack = 0;\n\t}\n\n\t/**\n\t * acknowledge zabbix event. Sets ack-flag with comment.\n\t * Caution: This is supported only for Zabbix version >= 1.8.4\n\t * @param eventid\n\t * @param comment\n\t * @return true, success.\n\t * @throws ClientProtocolException\n\t * @throws IOException\n\t * @throws JSONException\n\t * @throws HttpAuthorizationRequiredException\n\t * @throws NoAPIAccessException\n\t */\n\tpublic boolean acknowledgeEvent(String eventid, String comment) throws ClientProtocolException, IOException, JSONException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\t// for GUI unit test, just return true\n\t\tif (comment != null && comment.equals(\"__UNIT_TEST__RETURN_TRUE__\")) return true;\n\n\t\tJSONObject result = _queryBuffer(\n\t\t\t\t\"event.acknowledge\"\n\t\t\t\t, new JSONObject()\n\t\t\t\t\t.put(\"eventids\", new JSONArray().put(eventid))\n\t\t);\n\t\t// it can be an (empty) array\n\t\ttry {\n\t\t\treturn result.getJSONObject(\"result\").getJSONArray(\"eventids\").length() == 1;\n\t\t} catch (JSONException e) {\n\t\t\t// or a json object\n\t\t\treturn result.getJSONObject(\"result\").getJSONObject(\"eventids\").length() == 1;\n\t\t}\n\t}\n\n\t/**\n\t * zabbix auth. user and pwd from app preferences\n\t * @return true success\n\t * @throws ClientProtocolException\n\t * @throws IOException\n\t * @throws JSONException\n\t * @throws HttpAuthorizationRequiredException\n\t * @throws NoAPIAccessException\n\t */\n\tpublic boolean authenticate() throws ClientProtocolException, IOException, JSONException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\tSharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(context);\n\t\tString url = prefs.getString(\"zabbix_url\", \"\").trim();\n\t\tString user = prefs.getString(\"zabbix_username\", \"\").trim();\n\t\tString password = prefs.getString(\"zabbix_password\", \"\");\n\n\t\tthis.url = url+(url.endsWith(\"/\")?\"\":'/')+\"api_jsonrpc.php\";\n\t\tLog.d(\"ZabbixContentProvider\", url+\"//\"+user);\n\n\t\ttry {\n\t\t\tJSONObject result = _queryBuffer(\n\t\t\t\t\t\"user.authenticate\"\n\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t\t.put(\"user\", user)\n\t\t\t\t\t\t.put(\"password\", password)\n\t\t\t);\n\t\t\ttoken = result.getString(\"result\");\n\t\t} catch (JSONException e) {\n\t\t\t// there's no result\n\t\t\te.printStackTrace();\n\t\t} catch (RuntimeException e) {\n\t\t\t// wrong password. token remains null\n\t\t\te.printStackTrace();\n\t\t}\n\t\tif (token != null) {\n\t\t\t// get API version\n\t\t\tJSONObject result = _queryBuffer(\n\t\t\t\t\t\"apiinfo.version\"\n\t\t\t\t\t, new JSONObject()\n\t\t\t);\n\t\t\tisVersion2 = result.getString(\"result\").equals(\"1.4\");\n\t\t\tLog.i(\"ZabbixService\", \"Zabbix Server Version: isVersion2=\"+isVersion2);\n\t\t}\n\t\treturn token != null;\n\t}\n\n\t/**\n\t * close the last http stream\n\t */\n\tpublic void closeLastStream() {\n\t\tif (lastStream != null && !lastStream.isClosed()) {\n\t\t\ttry {\n\t\t\t\tlastStream.close();\n\t\t\t} catch (IOException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate void importApplications(long hostid, long itemid, JsonArrayOrObjectReader jsonArray) throws JsonParseException, NumberFormatException, IOException {\n\t\tint num = 0;\n\t\tJsonObjectReader application;\n\t\twhile ((application = jsonArray.next()) != null) {\n\t\t\tApplicationData app = new ApplicationData();\n\t\t\twhile (application.nextValueToken()) {\n\t\t\t\tString propName = application.getCurrentName();\n\t\t\t\tif (propName.equals(ApplicationData.COLUMN_APPLICATIONID)) {\n\t\t\t\t\tapp.set(ApplicationData.COLUMN_APPLICATIONID, Long.parseLong(application.getText()));\n\t\t\t\t} else if (propName.equals(ApplicationData.COLUMN_NAME)) {\n\t\t\t\t\tapp.set(ApplicationData.COLUMN_NAME, application.getText());\n\t\t\t\t} else if (propName.equals(ApplicationData.COLUMN_HOSTID)) {\n\t\t\t\t\tapp.set(ApplicationData.COLUMN_HOSTID, Long.parseLong(application.getText()));\n\t\t\t\t} else {\n\t\t\t\t\tapplication.nextProperty();\n\t\t\t\t}\n\t\t\t}\n\t\t\t// create applications that does not exist\n\t\t\tapp.insert(zabbixLocalDB, ApplicationData.COLUMN_APPLICATIONID);\n\t\t\t_commitTransactionIfRecommended();\n\n\t\t\t// create ApplicationItemRelation\n\t\t\tlong appid = (Long) app.get(ApplicationData.COLUMN_APPLICATIONID);\n\t\t\tApplicationItemRelationData rel = new ApplicationItemRelationData();\n\t\t\trel.set(ApplicationItemRelationData.COLUMN_APPLICATIONID, appid);\n\t\t\trel.set(ApplicationItemRelationData.COLUMN_ITEMID, itemid);\n\t\t\trel.set(ApplicationItemRelationData.COLUMN_HOSTID, hostid);\n\t\t\trel.insert(zabbixLocalDB);\n\t\t\t_commitTransactionIfRecommended();\n\n\t\t\tnum++;\n\t\t}\n\t\tif (num == 0) {\n\t\t\t// if there's no application, the ID #0 must be added (for other)\n\t\t\tApplicationItemRelationData rel = new ApplicationItemRelationData();\n\t\t\trel.set(ApplicationItemRelationData.COLUMN_APPLICATIONID, 0);\n\t\t\trel.set(ApplicationItemRelationData.COLUMN_ITEMID, itemid);\n\t\t\trel.set(ApplicationItemRelationData.COLUMN_HOSTID, hostid);\n\t\t\trel.insert(zabbixLocalDB);\n\n\t\t\t// if #0 \"other\" does not exist yet, it has to be created\n\t\t\tApplicationData app = new ApplicationData();\n\t\t\tapp.set(ApplicationData.COLUMN_APPLICATIONID, 0);\n\t\t\tapp.set(ApplicationData.COLUMN_NAME, \"- \"+context.getResources().getString(R.string.other)+\" -\");\n\t\t\tapp.insert(zabbixLocalDB, ApplicationData.COLUMN_APPLICATIONID);\n\t\t}\n\t}\n\n\t/**\n\t * import the newest event of a trigger\n\t * @param triggerid\n\t * @throws JSONException\n\t * @throws IOException\n\t * @throws HttpAuthorizationRequiredException\n\t * @throws NoAPIAccessException\n\t */\n\tpublic void importEventByTriggerId(String triggerid) throws JSONException, IOException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\tif (!isCached(EventData.TABLE_NAME, \"triggerid=\"+triggerid)) {\n\t\t\t_startTransaction();\n\t\t\tzabbixLocalDB.delete(EventData.TABLE_NAME, EventData.COLUMN_OBJECTID+\"=\"+triggerid, null);\n\n\t\t\tJSONObject params = new JSONObject()\n\t\t\t\t.put(\"output\", \"extend\")\n\t\t\t\t.put(isVersion2?\"selectHosts\":\"select_hosts\", \"extend\")\n\t\t\t\t.put(\"triggerids\", new JSONArray().put(triggerid))\n\t\t\t\t.put(\"limit\", 1)\n\t\t\t\t.put(\"source\", 0);\n\t\t\tif (!isVersion2) {\n\t\t\t\tparams.put(\"sortfield\", \"clock\")\n\t\t\t\t\t.put(\"sortorder\", \"DESC\");\n\t\t\t}\n\n\t\t\tJsonArrayOrObjectReader events = _queryStream(\n\t\t\t\t\t\"event.get\"\n\t\t\t\t\t, params\n\t\t\t);\n\t\t\timportEvents(events, null);\n\t\t\tevents.close();\n\n\t\t\tsetCached(EventData.TABLE_NAME, \"triggerid=\"+triggerid, ZabbixConfig.CACHE_LIFETIME_EVENTS);\n\t\t\t_endTransaction();\n\t\t}\n\t}\n\n\t/**\n\t * import the newest events\n\t * @throws ClientProtocolException\n\t * @throws IOException\n\t * @throws JSONException\n\t * @throws HttpAuthorizationRequiredException\n\t * @throws NoAPIAccessException\n\t */\n\tpublic void importEvents() throws ClientProtocolException, IOException, JSONException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\tif (!isCached(EventData.TABLE_NAME, null)) {\n\t\t\t_startTransaction();\n\t\t\tzabbixLocalDB.delete(EventData.TABLE_NAME, null, null);\n\t\t\tzabbixLocalDB.delete(TriggerData.TABLE_NAME, null, null);\n\t\t\tzabbixLocalDB.delete(CacheData.TABLE_NAME, CacheData.COLUMN_KIND+\"='\"+EventData.TABLE_NAME+\"'\", null);\n\t\t\tzabbixLocalDB.delete(CacheData.TABLE_NAME, CacheData.COLUMN_KIND+\"='\"+TriggerData.TABLE_NAME+\"'\", null);\n\n\t\t\tint numEvents = ZabbixConfig.EVENTS_GET_LIMIT;\n\n\t\t\tJSONObject params = new JSONObject()\n\t\t\t\t.put(\"output\", \"extend\")\n\t\t\t\t.put(\"limit\", ZabbixConfig.EVENTS_GET_LIMIT)\n\t\t\t\t.put(isVersion2?\"selectHosts\":\"select_hosts\", \"extend\")\n\t\t\t\t.put(isVersion2?\"selectTriggers\":\"select_triggers\", \"extend\")\n\t\t\t\t.put(\"source\", 0)\n\t\t\t\t.put(\"time_from\", (new Date().getTime()/1000) - ZabbixConfig.EVENT_GET_TIME_FROM_SHIFT);\n\t\t\tif (!isVersion2) {\n\t\t\t\t// in Zabbix version <2.0, this is not default\n\t\t\t\tparams.put(\"sortfield\", \"clock\")\n\t\t\t\t\t.put(\"sortorder\", \"DESC\");\n\t\t\t}\n\t\t\tJsonArrayOrObjectReader events = _queryStream(\n\t\t\t\t\t\"event.get\"\n\t\t\t\t\t, params\n\t\t\t);\n\t\t\timportEvents(events, numEvents);\n\t\t\tevents.close();\n\n\t\t\tsetCached(EventData.TABLE_NAME, null, ZabbixConfig.CACHE_LIFETIME_EVENTS);\n\t\t\t_endTransaction();\n\t\t}\n\t}\n\n\t/**\n\t * @param events stream\n\t * @param numEvents if null, no progressbar-update AND only isert, if it does not exist. If !null, progressbar-update AND always insert without checking\n\t * @throws JsonParseException\n\t * @throws IOException\n\t */\n\tprivate void importEvents(JsonArrayOrObjectReader events, Integer numEvents) throws JsonParseException, IOException {\n\t\tint i=0;\n\t\tJsonObjectReader eventReader;\n\t\twhile ((eventReader = events.next()) != null) {\n\t\t\tEventData e = new EventData();\n\t\t\twhile (eventReader.nextValueToken()) {\n\t\t\t\tString propName = eventReader.getCurrentName();\n\t\t\t\tif (propName.equals(\"hosts\")) {\n\t\t\t\t\t// import hosts\n\t\t\t\t\tString hostnames = (String) importHosts(eventReader.getJsonArray(), null)[0];\n\t\t\t\t\t// store hosts namen\n\t\t\t\t\te.set(EventData.COLUMN_HOSTS, hostnames);\n\t\t\t\t} else if (propName.equals(\"triggers\")) {\n\t\t\t\t\t// import triggers\n\t\t\t\t\timportTriggers(eventReader.getJsonArray());\n\t\t\t\t} else if (propName.equals(EventData.COLUMN_EVENTID)) {\n\t\t\t\t\te.set(EventData.COLUMN_EVENTID, Long.parseLong(eventReader.getText()));\n\t\t\t\t} else if (propName.equals(EventData.COLUMN_CLOCK)) {\n\t\t\t\t\te.set(EventData.COLUMN_CLOCK, Integer.parseInt(eventReader.getText()));\n\t\t\t\t} else if (propName.equals(EventData.COLUMN_OBJECTID)) {\n\t\t\t\t\te.set(EventData.COLUMN_OBJECTID, Long.parseLong(eventReader.getText()));\n\t\t\t\t} else if (propName.equals(EventData.COLUMN_ACK)) {\n\t\t\t\t\te.set(EventData.COLUMN_ACK, Integer.parseInt(eventReader.getText()) == 1);\n\t\t\t\t} else if (propName.equals(EventData.COLUMN_VALUE)) {\n\t\t\t\t\te.set(EventData.COLUMN_VALUE, Integer.parseInt(eventReader.getText()));\n\t\t\t\t} else {\n\t\t\t\t\teventReader.nextProperty();\n\t\t\t\t}\n\t\t\t}\n\t\t\t// event is parsed and can be inserted into the db\n\t\t\tif (numEvents == null) {\n\t\t\t\te.insert(zabbixLocalDB, EventData.COLUMN_EVENTID);\n\t\t\t} else {\n\t\t\t\te.insert(zabbixLocalDB);\n\t\t\t\tif (++i % 10 == 0) {\n\t\t\t\t\tshowProgress(i*100/numEvents);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t_commitTransactionIfRecommended();\n\t\t}\n\t}\n\n\t/**\n\t * import graph items\n\t *\n\t * @param graphItems\n\t * @return true, if graphid column has to be updated from -1 to the correct graphid later.\n\t * @throws JsonParseException\n\t * @throws NumberFormatException\n\t * @throws IOException\n\t */\n\tprivate boolean importGraphItems(JsonArrayOrObjectReader graphItems) throws JsonParseException, NumberFormatException, IOException {\n\t\tboolean mustSetGraphid = false;\n\t\tJsonObjectReader graphItemReader;\n\t\twhile ((graphItemReader = graphItems.next()) != null) {\n\t\t\tGraphItemData gi = new GraphItemData();\n\t\t\twhile (graphItemReader.nextValueToken()) {\n\t\t\t\tString propName = graphItemReader.getCurrentName();\n\t\t\t\tif (propName.equals(\"gitemid\")) {\n\t\t\t\t\tgi.set(GraphItemData.COLUMN_GRAPHITEMID, Long.parseLong(graphItemReader.getText()));\n\t\t\t\t} else if (propName.equals(GraphItemData.COLUMN_GRAPHID)) {\n\t\t\t\t\tgi.set(GraphItemData.COLUMN_GRAPHID, Long.parseLong(graphItemReader.getText()));\n\t\t\t\t} else if (propName.equals(GraphItemData.COLUMN_ITEMID)) {\n\t\t\t\t\tgi.set(GraphItemData.COLUMN_ITEMID, Long.parseLong(graphItemReader.getText()));\n\t\t\t\t} else if (propName.equals(GraphItemData.COLUMN_COLOR)) {\n\t\t\t\t\t// hex string => color int\n\t\t\t\t\tgi.set(GraphItemData.COLUMN_COLOR, Color.parseColor(\"#\"+graphItemReader.getText()));\n\t\t\t\t} else {\n\t\t\t\t\tgraphItemReader.nextProperty();\n\t\t\t\t}\n\t\t\t}\n\t\t\t// if graphid-column was not set, this must be done later. temporary graphid=-1\n\t\t\tif (gi.get(GraphItemData.COLUMN_GRAPHID) == null) {\n\t\t\t\tgi.set(GraphItemData.COLUMN_GRAPHID, -1);\n\t\t\t\tmustSetGraphid = true;\n\t\t\t}\n\t\t\tgi.insert(zabbixLocalDB);\n\t\t}\n\t\treturn mustSetGraphid;\n\t}\n\n\tpublic void importGraphsForScreen(long screenid) throws ClientProtocolException, IOException, JSONException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\tif (!isCached(GraphData.TABLE_NAME, \"screenid=\"+screenid)) {\n\t\t\t_startTransaction();\n\n\t\t\t// collect all graphids\n\t\t\tSet<Long> graphids = new HashSet<Long>();\n\t\t\tCursor cur = zabbixLocalDB.query(ScreenItemData.TABLE_NAME, null, ScreenItemData.COLUMN_SCREENID+\"=\"+screenid, null, null, null, null);\n\t\t\twhile (cur.moveToNext()) {\n\t\t\t\tgraphids.add(cur.getLong(cur.getColumnIndex(ScreenItemData.COLUMN_RESOURCEID)));\n\t\t\t}\n\n\t\t\t// delete old graphs\n\t\t\tString str_graphids = graphids.toString().replace(\"[\", \"\").replace(\"]\", \"\");\n\t\t\tif (str_graphids.length()>0) {\n\t\t\t\tzabbixLocalDB.delete(GraphData.TABLE_NAME, GraphData.COLUMN_GRAPHID+\" IN (\"+str_graphids+\")\", null);\n\t\t\t\tzabbixLocalDB.delete(GraphItemData.TABLE_NAME, GraphItemData.COLUMN_GRAPHID+\" IN (\"+str_graphids+\")\", null);\n\t\t\t}\n\t\t\tzabbixLocalDB.delete(CacheData.TABLE_NAME, CacheData.COLUMN_KIND+\"='\"+GraphData.TABLE_NAME+\"' AND \"+CacheData.COLUMN_FILTER+\"='screenid=\"+screenid+'\\'', null);\n\n\t\t\tJsonArrayOrObjectReader graphs = _queryStream(\n\t\t\t\t\t\"graph.get\"\n\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t\t.put(isVersion2?\"selectGraphItems\":\"select_graph_items\", \"extend\")\n\t\t\t\t\t\t.put(isVersion2?\"selectItems\":\"select_items\", \"extend\")\n\t\t\t\t\t\t.put(\"output\", \"extend\")\n\t\t\t\t\t\t.put(\"graphids\", new JSONArray(graphids))\n\t\t\t);\n\t\t\tJsonObjectReader graphReader;\n\t\t\twhile ((graphReader = graphs.next()) != null) {\n\t\t\t\tboolean mustSetGraphid = false;\n\t\t\t\tGraphData scr = new GraphData();\n\t\t\t\twhile (graphReader.nextValueToken()) {\n\t\t\t\t\tString propName = graphReader.getCurrentName();\n\t\t\t\t\tif (propName.equals(GraphData.COLUMN_GRAPHID)) {\n\t\t\t\t\t\tscr.set(GraphData.COLUMN_GRAPHID, Long.parseLong(graphReader.getText()));\n\t\t\t\t\t} else if (propName.equals(GraphData.COLUMN_NAME)) {\n\t\t\t\t\t\tscr.set(GraphData.COLUMN_NAME, graphReader.getText());\n\t\t\t\t\t} else if (propName.equals(\"gitems\")) {\n\t\t\t\t\t\tmustSetGraphid = importGraphItems(graphReader.getJsonArray());\n\t\t\t\t\t} else if (propName.equals(\"items\")) {\n\t\t\t\t\t\timportItems(graphReader.getJsonArray(), 0, true);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tgraphReader.nextProperty();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tscr.insert(zabbixLocalDB);\n\t\t\t\tif (mustSetGraphid) {\n\t\t\t\t\tContentValues values = new ContentValues(1);\n\t\t\t\t\tvalues.put(GraphItemData.COLUMN_GRAPHID, (Long) scr.get(GraphData.COLUMN_GRAPHID));\n\t\t\t\t\tzabbixLocalDB.update(\n\t\t\t\t\t\t\tGraphItemData.TABLE_NAME\n\t\t\t\t\t\t\t, values\n\t\t\t\t\t\t\t, GraphItemData.COLUMN_GRAPHID+\"=-1\"\n\t\t\t\t\t\t\t, null);\n\t\t\t\t}\n\t\t\t}\n\t\t\tgraphs.close();\n\n\t\t\tsetCached(GraphData.TABLE_NAME, \"screenid=\"+screenid, ZabbixConfig.CACHE_LIFETIME_SCREENS);\n\t\t\t_endTransaction();\n\t\t}\n\t}\n\n\tpublic void importHistoryDetails(String itemid) throws ClientProtocolException, IOException, JSONException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\tif (!isCached(HistoryDetailData.TABLE_NAME, itemid)) {\n\t\t\t_startTransaction();\n\t\t\tzabbixLocalDB.delete(HistoryDetailData.TABLE_NAME, HistoryDetailData.COLUMN_ITEMID+\"=\"+itemid, null);\n\n\t\t\t// the past 2 hours\n\t\t\tlong time_till = new Date().getTime() / 1000;\n\t\t\tlong time_from = time_till - ZabbixConfig.HISTORY_GET_TIME_FROM_SHIFT; // jetzt-2h\n\n\t\t\t// Workaround: historydetails only comes if you use the correct \"history\"-parameter.\n\t\t\t// this parameter can be \"null\" or a number 0-4. Because we don't know when to use which,\n\t\t\t// we try them all, until we get results.\n\t\t\tInteger historytype = null;\n\t\t\tJSONObject result = _queryBuffer(\n\t\t\t\t\t\"history.get\"\n\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t\t.put(\"limit\", 1)\n\t\t\t\t\t\t.put(\"history\", historytype) // for integer ?\n\t\t\t\t\t\t.put(\"itemids\", new JSONArray().put(itemid))\n\t\t\t\t\t\t.put(\"time_from\", time_from)\n\t\t\t);\n\n\t\t\tJSONArray testHistorydetails = result.getJSONArray(\"result\");\n\t\t\tif (testHistorydetails.length() == 0) {\n\t\t\t\thistorytype = -1;\n\t\t\t\twhile (testHistorydetails.length() == 0 && ++historytype <= 4) {\n\t\t\t\t\t// if we get an empty array, we try another history parameter\n\t\t\t\t\tresult = _queryBuffer(\n\t\t\t\t\t\t\t\"history.get\"\n\t\t\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t\t\t\t.put(\"output\", \"extend\")\n\t\t\t\t\t\t\t\t.put(\"limit\", 1)\n\t\t\t\t\t\t\t\t.put(\"history\", historytype)\n\t\t\t\t\t\t\t\t.put(\"itemids\", new JSONArray().put(itemid))\n\t\t\t\t\t\t\t\t.put(\"time_from\", time_from)\n\t\t\t\t\t);\n\t\t\t\t\ttestHistorydetails = result.getJSONArray(\"result\");\n\t\t\t\t}\n\t\t\t}\n\t\t\t// correct historytype found and there are data\n\t\t\tif (testHistorydetails.length() > 0) {\n\t\t\t\t// count of the entries cannot be detected (zabbix bug),\n\t\t\t\t// so we use a fiction\n\t\t\t\tint numDetails = 400;\n\t\t\t\tint curI=0;\n\t\t\t\tJsonArrayOrObjectReader historydetails = _queryStream(\n\t\t\t\t\t\t\"history.get\"\n\t\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t\t\t.put(\"output\", \"extend\")\n\t\t\t\t\t\t\t.put(\"limit\", ZabbixConfig.HISTORY_GET_LIMIT)\n\t\t\t\t\t\t\t.put(\"history\", historytype)\n\t\t\t\t\t\t\t.put(\"itemids\", new JSONArray().put(itemid))\n\t\t\t\t\t\t\t.put(\"time_from\", time_from)\n\t\t\t\t\t\t\t.put(\"sortfield\", \"clock\")\n\t\t\t\t\t\t\t.put(\"sortorder\", \"DESC\")\n\t\t\t\t);\n\t\t\t\tJsonObjectReader historydetail;\n\t\t\t\ttry {\n\t\t\t\t\tint selI = 0;\n\t\t\t\t\twhile ((historydetail = historydetails.next()) != null) {\n\t\t\t\t\t\t// save only every 20th\n\t\t\t\t\t\tif (selI++ % 20 != 0) {\n\t\t\t\t\t\t\twhile (historydetail.nextValueToken()) {\n\t\t\t\t\t\t\t\thistorydetail.nextProperty();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tHistoryDetailData h = new HistoryDetailData();\n\t\t\t\t\t\twhile (historydetail.nextValueToken()) {\n\t\t\t\t\t\t\tString propName = historydetail.getCurrentName();\n\t\t\t\t\t\t\tif (propName.equals(HistoryDetailData.COLUMN_CLOCK)) {\n\t\t\t\t\t\t\t\th.set(HistoryDetailData.COLUMN_CLOCK, Integer.parseInt(historydetail.getText()));\n\t\t\t\t\t\t\t} else if (propName.equals(HistoryDetailData.COLUMN_ITEMID)) {\n\t\t\t\t\t\t\t\th.set(HistoryDetailData.COLUMN_ITEMID, Long.parseLong(historydetail.getText()));\n\t\t\t\t\t\t\t} else if (propName.equals(HistoryDetailData.COLUMN_VALUE)) {\n\t\t\t\t\t\t\t\th.set(HistoryDetailData.COLUMN_VALUE, Double.parseDouble(historydetail.getText()));\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\thistorydetail.nextProperty();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\th.insert(zabbixLocalDB);\n\t\t\t\t\t\tif (++curI % 10 == 0) {\n\t\t\t\t\t\t\tshowProgress(Math.min(curI*100/numDetails, 84));\n\t\t\t\t\t\t}\n\t\t\t\t\t\t_commitTransactionIfRecommended();\n\t\t\t\t\t}\n\t\t\t\t} catch (NumberFormatException e) {\n\t\t\t\t\t// data are unuseable, e.g. because it's a string\n\t\t\t\t}\n\t\t\t\thistorydetails.close();\n\t\t\t}\n\t\t\tsetCached(HistoryDetailData.TABLE_NAME, itemid, ZabbixConfig.CACHE_LIFETIME_HISTORY_DETAILS);\n\t\t\t_endTransaction();\n\t\t}\n\t}\n\n\tprivate long importHostGroups(JsonArrayOrObjectReader jsonArray) throws JsonParseException, IOException {\n\t\tlong firstHostGroupId = -1;\n\t\tJsonObjectReader hostReader;\n\t\twhile ((hostReader = jsonArray.next()) != null) {\n\t\t\tHostGroupData h = new HostGroupData();\n\t\t\twhile (hostReader.nextValueToken()) {\n\t\t\t\tString propName = hostReader.getCurrentName();\n\t\t\t\tif (propName.equals(HostGroupData.COLUMN_GROUPID)) {\n\t\t\t\t\tlong id = Long.parseLong(hostReader.getText());\n\t\t\t\t\tif (firstHostGroupId == -1) firstHostGroupId = id;\n\t\t\t\t\th.set(HostGroupData.COLUMN_GROUPID, id);\n\t\t\t\t} else if (propName.equals(HostGroupData.COLUMN_NAME)) {\n\t\t\t\t\th.set(HostGroupData.COLUMN_NAME, hostReader.getText());\n\t\t\t\t} else {\n\t\t\t\t\thostReader.nextProperty();\n\t\t\t\t}\n\t\t\t}\n\t\t\th.insert(zabbixLocalDB, HostGroupData.COLUMN_GROUPID);\n\t\t\t_commitTransactionIfRecommended();\n\t\t}\n\n\t\treturn firstHostGroupId;\n\t}\n\n\t/**\n\t * import the hosts from stream\n\t * @param jsonArray stream\n\t * @param numHosts count of hosts for progressbar. null if unknown.\n\t * @return Object[] {(String) comma-separated all Hostnames, (Long) 1. host id}\n\t * @throws JsonParseException\n\t * @throws IOException\n\t */\n\tprivate Object[] importHosts(JsonArrayOrObjectReader jsonArray, Integer numHosts) throws JsonParseException, IOException {\n\t\tList<String> hostnames = new ArrayList<String>();\n\t\tlong firstHostId = -1;\n\t\tJsonObjectReader hostReader;\n\t\tint i=0;\n\t\twhile ((hostReader = jsonArray.next()) != null) {\n\t\t\tHostData h = new HostData();\n\t\t\twhile (hostReader.nextValueToken()) {\n\t\t\t\tString propName = hostReader.getCurrentName();\n\t\t\t\tif (propName.equals(HostData.COLUMN_HOSTID)) {\n\t\t\t\t\th.set(HostData.COLUMN_HOSTID, Long.parseLong(hostReader.getText()));\n\t\t\t\t\tif (firstHostId == -1) {\n\t\t\t\t\t\tfirstHostId = (Long) h.get(HostData.COLUMN_HOSTID);\n\t\t\t\t\t}\n\t\t\t\t} else if (propName.equals(HostData.COLUMN_HOST)) {\n\t\t\t\t\tString host = hostReader.getText();\n\t\t\t\t\thostnames.add(host);\n\t\t\t\t\th.set(HostData.COLUMN_HOST, host);\n\t\t\t\t} else if (propName.equals(\"groups\")) {\n\t\t\t\t\tlong groupid = importHostGroups(hostReader.getJsonArray());\n\t\t\t\t\tif (groupid != -1) {\n\t\t\t\t\t\th.set(HostData.COLUMN_GROUPID, groupid);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\thostReader.nextProperty();\n\t\t\t\t}\n\t\t\t}\n\t\t\t// host without group will get group #0 (other)\n\t\t\tif (h.get(HostData.COLUMN_GROUPID) == null) {\n\t\t\t\th.set(HostData.COLUMN_GROUPID, 0);\n\t\t\t\t// create \"other\" hostgroup #1\n\t\t\t\tHostGroupData hg = new HostGroupData();\n\t\t\t\thg.set(HostGroupData.COLUMN_GROUPID, 0);\n\t\t\t\thg.set(HostGroupData.COLUMN_NAME, \"- \"+context.getResources().getString(R.string.other)+\" -\");\n\t\t\t\thg.insert(zabbixLocalDB, HostGroupData.COLUMN_GROUPID);\n\t\t\t}\n\t\t\th.insert(zabbixLocalDB, HostData.COLUMN_HOSTID);\n\t\t\tif (numHosts != null && ++i % 10 == 0) {\n\t\t\t\tshowProgress(i*100/numHosts);\n\t\t\t}\n\t\t\t_commitTransactionIfRecommended();\n\t\t}\n\n\t\treturn new Object[] {hostnames.toString().replaceAll(\"[\\\\[\\\\]]\", \"\"), firstHostId};\n\t}\n\n\tpublic void importHostsAndGroups() throws JSONException, IOException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\tif (!isCached(HostData.TABLE_NAME, null)) {\n\t\t\t_startTransaction();\n\t\t\tzabbixLocalDB.delete(HostData.TABLE_NAME, null, null);\n\t\t\tzabbixLocalDB.delete(HostGroupData.TABLE_NAME, null, null);\n\n\t\t\t// get count of hosts\n\t\t\tJSONObject result = _queryBuffer(\n\t\t\t\t\t\"host.get\"\n\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t\t.put(\"countOutput\", 1)\n\t\t\t\t\t\t.put(\"limit\", ZabbixConfig.HOST_GET_LIMIT)\n\t\t\t\t\t\t.put(isVersion2?\"selectGroups\":\"select_groups\", \"extend\")\n\t\t\t);\n\t\t\tint numHosts = result.getInt(\"result\");\n\t\t\tJsonArrayOrObjectReader hosts = _queryStream(\n\t\t\t\t\t\"host.get\"\n\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t\t.put(\"output\", \"extend\")\n\t\t\t\t\t\t.put(\"limit\", ZabbixConfig.HOST_GET_LIMIT)\n\t\t\t\t\t\t.put(isVersion2?\"selectGroups\":\"select_groups\", \"extend\")\n\t\t\t);\n\t\t\timportHosts(hosts, numHosts);\n\t\t\thosts.close();\n\n\t\t\tsetCached(HostData.TABLE_NAME, null, ZabbixConfig.CACHE_LIFETIME_HOSTS);\n\t\t\t_endTransaction();\n\t\t}\n\t}\n\n\t/**\n\t * import items from stream.\n\t * @param items stream\n\t * @param numItems count for progressbar, if 0 no progressbarupdate\n\t * @param checkBeforeInsert if true, only make an insert if item does not exist\n\t * @return the first item id\n\t * @throws JsonParseException\n\t * @throws IOException\n\t */\n\tprivate long importItems(JsonArrayOrObjectReader items, int numItems, boolean checkBeforeInsert) throws JsonParseException, IOException {\n\t\tlong firstItemId = -1;\n\t\tint curI=0;\n\t\tJsonObjectReader itemReader;\n\t\twhile ((itemReader = items.next()) != null) {\n\t\t\tItemData i = new ItemData();\n\t\t\tString key_ = null;\n\t\t\twhile (itemReader.nextValueToken()) {\n\t\t\t\tString propName = itemReader.getCurrentName();\n\t\t\t\tif (propName.equals(ItemData.COLUMN_ITEMID)) {\n\t\t\t\t\ti.set(ItemData.COLUMN_ITEMID, Long.parseLong(itemReader.getText()));\n\t\t\t\t\tif (firstItemId == -1) {\n\t\t\t\t\t\tfirstItemId = (Long) i.get(ItemData.COLUMN_ITEMID);\n\t\t\t\t\t}\n\t\t\t\t} else if (propName.equals(ItemData.COLUMN_HOSTID)) {\n\t\t\t\t\ti.set(ItemData.COLUMN_HOSTID, Long.parseLong(itemReader.getText()));\n\t\t\t\t} else if (propName.equals(ItemData.COLUMN_DESCRIPTION) || propName.equals(\"name\")) {\n\t\t\t\t\t// since zabbix 2.x is the name of the item \"name\"\n\t\t\t\t\t// before zabbix 2.x the name field was \"description\"\n\t\t\t\t\tif (isVersion2 && propName.equals(\"name\")) {\n\t\t\t\t\t\ti.set(ItemData.COLUMN_DESCRIPTION, itemReader.getText());\n\t\t\t\t\t} else if (!isVersion2) {\n\t\t\t\t\t\ti.set(ItemData.COLUMN_DESCRIPTION, itemReader.getText());\n\t\t\t\t\t}\n\t\t\t\t} else if (propName.equals(ItemData.COLUMN_LASTCLOCK)) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\ti.set(ItemData.COLUMN_LASTCLOCK, Integer.parseInt(itemReader.getText()));\n\t\t\t\t\t} catch (NumberFormatException e) {\n\t\t\t\t\t\t// ignore\n\t\t\t\t\t}\n\t\t\t\t} else if (propName.equals(ItemData.COLUMN_LASTVALUE)) {\n\t\t\t\t\ti.set(ItemData.COLUMN_LASTVALUE, itemReader.getText());\n\t\t\t\t} else if (propName.equals(ItemData.COLUMN_UNITS)) {\n\t\t\t\t\ti.set(ItemData.COLUMN_UNITS, itemReader.getText());\n\t\t\t\t} else if (propName.equals(\"key_\")) {\n\t\t\t\t\tkey_ = itemReader.getText();\n\t\t\t\t} else if (propName.equals(\"applications\")) {\n\t\t\t\t\t// at this point itemid and hostid is unknown\n\t\t\t\t\t// because of this, all applicationrelations will be saved with itemid and hostid \"-1\".\n\t\t\t\t\t// later the IDs will be replaced with the correct\n\t\t\t\t\timportApplications(-1, -1, itemReader.getJsonArray());\n\t\t\t\t} else {\n\t\t\t\t\titemReader.nextProperty();\n\t\t\t\t}\n\t\t\t}\n\t\t\t// if applicable replace placeholder\n\t\t\tString description = (String) i.get(ItemData.COLUMN_DESCRIPTION);\n\t\t\tif (description.matches(\".*\\\\$[0-9].*\")) {\n\t\t\t\tif (key_ != null && key_.indexOf('[') != -1) {\n\t\t\t\t\tString[] keys = key_.substring(key_.indexOf('[')+1, key_.indexOf(']')).split(\",\");\n\t\t\t\t\tfor (int ix=0; ix<keys.length; ix++) {\n\t\t\t\t\t\tdescription = description.replace(\"$\"+(ix+1), keys[ix]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\ti.set(ItemData.COLUMN_DESCRIPTION, description);\n\t\t\tif (checkBeforeInsert) {\n\t\t\t\ti.insert(zabbixLocalDB, ItemData.COLUMN_ITEMID);\n\t\t\t} else {\n\t\t\t\ti.insert(zabbixLocalDB);\n\t\t\t}\n\t\t\tif (numItems > 0 && ++curI % 10 == 0) {\n\t\t\t\tshowProgress(curI*100/numItems);\n\t\t\t}\n\n\t\t\t// now the \"-1\" IDs of applicationsrelation will be replaced with the correct itemID\n\t\t\tContentValues values = new ContentValues(2);\n\t\t\tvalues.put(ApplicationItemRelationData.COLUMN_ITEMID, (Long) i.get(ItemData.COLUMN_ITEMID));\n\t\t\tvalues.put(ApplicationItemRelationData.COLUMN_HOSTID, (Long) i.get(ItemData.COLUMN_HOSTID));\n\t\t\tzabbixLocalDB.update(\n\t\t\t\t\tApplicationItemRelationData.TABLE_NAME\n\t\t\t\t\t, values\n\t\t\t\t\t, ApplicationItemRelationData.COLUMN_ITEMID+\"=-1\"\n\t\t\t\t\t, null\n\t\t\t);\n\t\t}\n\t\treturn firstItemId;\n\t}\n\n\tpublic void importItems(long hostid) throws JSONException, IOException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\tif (!isCached(ItemData.TABLE_NAME, \"hostid=\"+hostid)) {\n\t\t\t_startTransaction();\n\t\t\tzabbixLocalDB.delete(ItemData.TABLE_NAME, ItemData.COLUMN_HOSTID+\"=\"+hostid, null);\n\t\t\tzabbixLocalDB.delete(ApplicationItemRelationData.TABLE_NAME, ApplicationItemRelationData.COLUMN_HOSTID+\"=\"+hostid, null);\n\n\t\t\t// count of items\n\t\t\tJSONObject result = _queryBuffer(\n\t\t\t\t\t\"item.get\"\n\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t.put(\"output\", \"extend\")\n\t\t\t\t\t.put(\"countOutput\", 1)\n\t\t\t\t\t.put(\"limit\", ZabbixConfig.ITEM_GET_LIMIT)\n\t\t\t\t\t.put(\"hostids\", new JSONArray().put(hostid))\n\t\t\t);\n\t\t\tint numItems = result.getInt(\"result\");\n\t\t\tJsonArrayOrObjectReader items = _queryStream(\n\t\t\t\t\t\"item.get\"\n\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t\t.put(\"output\", \"extend\")\n\t\t\t\t\t\t.put(\"limit\", ZabbixConfig.ITEM_GET_LIMIT)\n\t\t\t\t\t\t.put(isVersion2?\"selectApplications\":\"select_applications\", \"extend\")\n\t\t\t\t\t\t.put(\"hostids\", new JSONArray().put(hostid))\n\t\t\t);\n\t\t\timportItems(items, numItems, false);\n\t\t\titems.close();\n\n\t\t\tsetCached(ItemData.TABLE_NAME, \"hostid=\"+hostid, ZabbixConfig.CACHE_LIFETIME_ITEMS);\n\t\t\t_endTransaction();\n\t\t}\n\t}\n\n\tprivate void importScreenItems(JsonArrayOrObjectReader screenItems) throws JsonParseException, NumberFormatException, IOException {\n\t\tJsonObjectReader screenItemReader;\n\t\twhile ((screenItemReader = screenItems.next()) != null) {\n\t\t\tScreenItemData si = new ScreenItemData();\n\t\t\tint resourcetype = -1;\n\t\t\twhile (screenItemReader.nextValueToken()) {\n\t\t\t\tString propName = screenItemReader.getCurrentName();\n\t\t\t\tif (propName.equals(ScreenItemData.COLUMN_SCREENITEMID)) {\n\t\t\t\t\tsi.set(ScreenItemData.COLUMN_SCREENITEMID, Long.parseLong(screenItemReader.getText()));\n\t\t\t\t} else if (propName.equals(ScreenItemData.COLUMN_SCREENID)) {\n\t\t\t\t\tsi.set(ScreenItemData.COLUMN_SCREENID, Long.parseLong(screenItemReader.getText()));\n\t\t\t\t} else if (propName.equals(ScreenItemData.COLUMN_RESOURCEID)) {\n\t\t\t\t\tsi.set(ScreenItemData.COLUMN_RESOURCEID, Long.parseLong(screenItemReader.getText()));\n\t\t\t\t} else if (propName.equals(\"resourcetype\")) {\n\t\t\t\t\tresourcetype = Integer.parseInt(screenItemReader.getText());\n\t\t\t\t} else {\n\t\t\t\t\tscreenItemReader.nextProperty();\n\t\t\t\t}\n\t\t\t}\n\t\t\t// only resouretype == 0\n\t\t\tif (resourcetype == 0) {\n\t\t\t\tsi.insert(zabbixLocalDB);\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic void importScreens() throws ClientProtocolException, IOException, JSONException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\tif (!isCached(ScreenData.TABLE_NAME, null)) {\n\t\t\t_startTransaction();\n\n\t\t\tzabbixLocalDB.delete(ScreenData.TABLE_NAME, null, null);\n\t\t\tzabbixLocalDB.delete(ScreenItemData.TABLE_NAME, null, null);\n\t\t\tzabbixLocalDB.delete(CacheData.TABLE_NAME, CacheData.COLUMN_KIND+\"='\"+ScreenData.TABLE_NAME+\"'\", null);\n\n\t\t\tJsonArrayOrObjectReader screens = _queryStream(\n\t\t\t\t\t(isVersion2?\"s\":\"S\")+\"creen.get\"\n\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t\t.put(\"output\", \"extend\")\n\t\t\t\t\t\t.put(isVersion2?\"selectScreenItems\":\"select_screenitems\", \"extend\")\n\t\t\t);\n\t\t\tJsonObjectReader screenReader;\n\t\t\twhile ((screenReader = screens.next()) != null) {\n\t\t\t\tScreenData scr = new ScreenData();\n\t\t\t\twhile (screenReader.nextValueToken()) {\n\t\t\t\t\tString propName = screenReader.getCurrentName();\n\t\t\t\t\tif (propName.equals(ScreenData.COLUMN_SCREENID)) {\n\t\t\t\t\t\tscr.set(ScreenData.COLUMN_SCREENID, Long.parseLong(screenReader.getText()));\n\t\t\t\t\t} else if (propName.equals(ScreenData.COLUMN_NAME)) {\n\t\t\t\t\t\tscr.set(ScreenData.COLUMN_NAME, screenReader.getText());\n\t\t\t\t\t} else if (propName.equals(\"screenitems\")) {\n\t\t\t\t\t\timportScreenItems(screenReader.getJsonArray());\n\t\t\t\t\t} else {\n\t\t\t\t\t\tscreenReader.nextProperty();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tscr.insert(zabbixLocalDB);\n\t\t\t}\n\t\t\tscreens.close();\n\n\t\t\tsetCached(ScreenData.TABLE_NAME, null, ZabbixConfig.CACHE_LIFETIME_SCREENS);\n\t\t\t_endTransaction();\n\t\t}\n\t}\n\n\tpublic void importTrigger(String triggerid) throws JSONException, IOException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\tif (!isCached(TriggerData.TABLE_NAME, \"triggerid=\"+triggerid)) {\n\t\t\t_startTransaction();\n\n\t\t\tJsonArrayOrObjectReader trigger = _queryStream(\n\t\t\t\t\t\"trigger.get\"\n\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t\t.put(\"output\", \"extend\")\n\t\t\t\t\t\t.put(isVersion2?\"selectHosts\":\"select_hosts\", \"extend\")\n\t\t\t\t\t\t.put(\"triggerids\", new JSONArray().put(triggerid))\n\t\t\t);\n\t\t\timportTriggers(trigger);\n\t\t\ttrigger.close();\n\n\t\t\tsetCached(TriggerData.TABLE_NAME, \"triggerid=\"+triggerid, ZabbixConfig.CACHE_LIFETIME_TRIGGERS);\n\t\t\t_endTransaction();\n\t\t}\n\t}\n\n\t/**\n\t * importiert ein trigger mit dem attribute itemid. ggf. wird der trigger zuerst gelöscht und neu angelegt.\n\t * imports a trigger with the attribute itemid. if trigger already exists, it will be removed first.\n\t * @param triggerid\n\t * @throws JSONException\n\t * @throws IOException\n\t * @throws HttpAuthorizationRequiredException\n\t * @throws NoAPIAccessException\n\t */\n\tpublic void importTriggerColumnItemId(String triggerid) throws JSONException, IOException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\t// check if the trigger exists and if the itemid was set\n\t\tboolean mustImport = true;\n\t\tCursor cur = zabbixLocalDB.query(TriggerData.TABLE_NAME, null, TriggerData.COLUMN_TRIGGERID+\"=\"+triggerid, null, null, null, null);\n\t\tif (cur.moveToFirst()) {\n\t\t\tlong itemid = 0;\n\t\t\ttry {\n\t\t\t\titemid = cur.getLong(cur.getColumnIndex(TriggerData.COLUMN_ITEMID));\n\t\t\t} catch (Exception e) {\n\t\t\t\t// no itemid\n\t\t\t}\n\t\t\tif (itemid > 0) {\n\t\t\t\tmustImport = false;\n\t\t\t}\n\t\t}\n\t\tif (mustImport) {\n\t\t\t_startTransaction();\n\t\t\tzabbixLocalDB.delete(TriggerData.TABLE_NAME, TriggerData.COLUMN_TRIGGERID+\"=\"+triggerid, null);\n\t\t\tJsonArrayOrObjectReader triggers = _queryStream(\n\t\t\t\t\t\"trigger.get\"\n\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t\t.put(\"output\", \"extend\")\n\t\t\t\t\t\t.put(isVersion2?\"selectHosts\":\"select_hosts\", \"extend\")\n\t\t\t\t\t\t.put(isVersion2?\"selectGroups\":\"select_groups\", \"extend\")\n\t\t\t\t\t\t.put(isVersion2?\"selectItems\":\"select_items\", \"extend\")\n\t\t\t\t\t\t.put(\"triggerids\", new JSONArray().put(triggerid))\n\t\t\t\t\t\t.put(\"limit\", 1)\n\t\t\t);\n\t\t\timportTriggers(triggers);\n\t\t\t_endTransaction();\n\t\t}\n\t}\n\n\t/**\n\t * imports the \"warning\"-triggers\n\t * @throws JSONException\n\t * @throws IOException\n\t * @throws HttpAuthorizationRequiredException\n\t * @throws NoAPIAccessException\n\t */\n\tpublic void importTriggers() throws JSONException, IOException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\tif (!isCached(TriggerData.TABLE_NAME, null)) {\n\t\t\t_startTransaction();\n\n\t\t\tlong min = (new Date().getTime()/1000)-ZabbixConfig.STATUS_SHOW_TRIGGER_TIME;\n\t\t\tJsonArrayOrObjectReader triggers = _queryStream(\n\t\t\t\t\t\"trigger.get\"\n\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t\t.put(\"output\", \"extend\")\n\t\t\t\t\t\t.put(\"sortfield\", \"lastchange\")\n\t\t\t\t\t\t.put(\"sortorder\", \"desc\")\n\t\t\t\t\t\t.put(isVersion2?\"selectHosts\":\"select_hosts\", \"extend\")\n\t\t\t\t\t\t.put(isVersion2?\"selectGroups\":\"select_groups\", \"extend\")\n\t\t\t\t\t\t.put(isVersion2?\"selectItems\":\"select_items\", \"extend\")\n\t\t\t\t\t\t.put(\"lastChangeSince\", min)\n\t\t\t\t\t\t.put(\"only_true\", \"1\")\n\t\t\t\t\t\t.put(\"limit\", ZabbixConfig.TRIGGER_GET_LIMIT)\n\t\t\t\t\t\t.put(\"expandDescription\", true)\n\t\t\t);\n\t\t\timportTriggers(triggers);\n\t\t\ttriggers.close();\n\n\t\t\tsetCached(TriggerData.TABLE_NAME, null, ZabbixConfig.CACHE_LIFETIME_TRIGGERS);\n\t\t\t_endTransaction();\n\t\t}\n\t}\n\n\tprivate void importTriggers(JsonArrayOrObjectReader jsonArray) throws JsonParseException, IOException {\n\t\tJsonObjectReader triggerReader;\n\t\twhile ((triggerReader = jsonArray.next()) != null) {\n\t\t\tTriggerData t = new TriggerData();\n\t\t\twhile (triggerReader.nextValueToken()) {\n\t\t\t\tString propName = triggerReader.getCurrentName();\n\t\t\t\tif (propName.equals(TriggerData.COLUMN_TRIGGERID)) {\n\t\t\t\t\tt.set(TriggerData.COLUMN_TRIGGERID, Long.parseLong(triggerReader.getText()));\n\t\t\t\t} else if (propName.equals(TriggerData.COLUMN_COMMENTS)) {\n\t\t\t\t\tt.set(TriggerData.COLUMN_COMMENTS, triggerReader.getText());\n\t\t\t\t} else if (propName.equals(TriggerData.COLUMN_DESCRIPTION)) {\n\t\t\t\t\tt.set(TriggerData.COLUMN_DESCRIPTION, triggerReader.getText());\n\t\t\t\t} else if (propName.equals(TriggerData.COLUMN_EXPRESSION)) {\n\t\t\t\t\tt.set(TriggerData.COLUMN_EXPRESSION, triggerReader.getText());\n\t\t\t\t} else if (propName.equals(TriggerData.COLUMN_LASTCHANGE)) {\n\t\t\t\t\tt.set(TriggerData.COLUMN_LASTCHANGE, Integer.parseInt(triggerReader.getText()));\n\t\t\t\t} else if (propName.equals(TriggerData.COLUMN_PRIORITY)) {\n\t\t\t\t\tt.set(TriggerData.COLUMN_PRIORITY, Integer.parseInt(triggerReader.getText()));\n\t\t\t\t} else if (propName.equals(TriggerData.COLUMN_STATUS)) {\n\t\t\t\t\tt.set(TriggerData.COLUMN_STATUS, Integer.parseInt(triggerReader.getText()));\n\t\t\t\t} else if (propName.equals(TriggerData.COLUMN_VALUE)) {\n\t\t\t\t\tt.set(TriggerData.COLUMN_VALUE, Integer.parseInt(triggerReader.getText()));\n\t\t\t\t} else if (propName.equals(TriggerData.COLUMN_URL)) {\n\t\t\t\t\tt.set(TriggerData.COLUMN_URL, triggerReader.getText());\n\t\t\t\t} else if (propName.equals(\"hosts\")) {\n\t\t\t\t\tObject[] hostsCache = importHosts(triggerReader.getJsonArray(), null);\n\t\t\t\t\tt.set(TriggerData.COLUMN_HOSTS, hostsCache[0]);\n\t\t\t\t\tt.set(TriggerData.COLUMN_HOSTID, hostsCache[1]);\n\t\t\t\t} else if (propName.equals(\"groups\")) {\n\t\t\t\t\timportHostGroups(triggerReader.getJsonArray());\n\t\t\t\t} else if (propName.equals(\"items\")) {\n\t\t\t\t\t// store the first item id\n\t\t\t\t\tt.set(TriggerData.COLUMN_ITEMID, importItems(triggerReader.getJsonArray(), 1, true));\n\t\t\t\t} else {\n\t\t\t\t\ttriggerReader.nextProperty();\n\t\t\t\t}\n\t\t\t}\n\t\t\tt.insert(zabbixLocalDB, TriggerData.COLUMN_TRIGGERID);\n\t\t\t_commitTransactionIfRecommended();\n\t\t}\n\t}\n\n\tpublic void importTriggersByItemId(String itemid) throws JSONException, IOException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\tif (!isCached(TriggerData.TABLE_NAME, \"itemid=\"+itemid)) {\n\t\t\t_startTransaction();\n\t\t\tzabbixLocalDB.delete(TriggerData.TABLE_NAME, TriggerData.COLUMN_ITEMID+\"=\"+itemid, null);\n\t\t\tJsonArrayOrObjectReader triggers = _queryStream(\n\t\t\t\t\t\"trigger.get\"\n\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t\t.put(\"output\", \"extend\")\n\t\t\t\t\t\t.put(isVersion2?\"selectHosts\":\"select_hosts\", \"extend\")\n\t\t\t\t\t\t.put(isVersion2?\"selectGroups\":\"select_groups\", \"extend\")\n\t\t\t\t\t\t.put(isVersion2?\"selectItems\":\"select_items\", \"extend\")\n\t\t\t\t\t\t.put(\"itemids\", new JSONArray().put(itemid))\n\t\t\t\t\t\t.put(\"limit\", 1)\n\t\t\t\t\t\t.put(\"sortfield\", \"lastchange\")\n\t\t\t\t\t\t.put(\"sortorder\", \"DESC\")\n\t\t\t);\n\t\t\timportTriggers(triggers);\n\t\t\tsetCached(TriggerData.TABLE_NAME, \"itemid=\"+itemid, ZabbixConfig.CACHE_LIFETIME_TRIGGERS);\n\t\t\t_endTransaction();\n\t\t}\n\t}\n\n\tpublic boolean isCached(String kind, String filter) {\n\t\tSQLiteQueryBuilder sqlBuilder = new SQLiteQueryBuilder();\n\t\tsqlBuilder.setTables(CacheData.TABLE_NAME);\n\t\tsqlBuilder.appendWhere(CacheData.COLUMN_KIND+\"='\"+kind+\"' AND \");\n\t\tsqlBuilder.appendWhere(CacheData.COLUMN_FILTER+\n\t\t\t\t(filter==null?\" IS NULL\":\"='\"+filter+\"'\")\n\t\t);\n\t\tsqlBuilder.appendWhere(\" AND \"+CacheData.COLUMN_EXPIRE_DATE+\">\"+new Date().getTime()/1000);\n\t\tCursor cur = sqlBuilder.query(\n\t\t\tzabbixLocalDB,\n\t\t\tnull,\n\t\t\tnull,\n\t\t\tnull,\n\t\t\tnull,\n\t\t\tnull,\n\t\t\tnull\n\t\t);\n\t\tLog.i(\"ZabbixContentProvider\", \"isCached \"+kind+\"//\"+filter+\"//\"+cur.moveToFirst());\n\t\treturn cur.moveToFirst();\n\t}\n\n\t/**\n\t * public, for the unit test\n\t */\n\tpublic void setCached(String kind, String filter, int lifetime) {\n\t\tCacheData cache = new CacheData();\n\t\tcache.set(CacheData.COLUMN_EXPIRE_DATE, new Date().getTime()/1000 + lifetime);\n\t\tcache.set(CacheData.COLUMN_KIND, kind);\n\t\tif (filter != null) {\n\t\t\tcache.set(CacheData.COLUMN_FILTER, filter);\n\t\t}\n\t\tcache.insert(zabbixLocalDB);\n\t}\n\n\t/**\n\t * updates the progressbar in the gui\n\t * @param i 0..100\n\t */\n\tpublic void showProgress(int i) {\n\t\t// if applicable, transform the progress\n\t\tif (transformProgressStart != 0 && transformProgressEnd != 0) {\n\t\t\ti = (int) (transformProgressStart + (transformProgressEnd-transformProgressStart)*(double)i/100);\n\t\t}\n\n\t\tIntent intent = new Intent(ZabbixContentProvider.CONTENT_PROVIDER_INTENT_ACTION);\n\t\tintent.putExtra(\"flag\", ZabbixContentProvider.INTENT_FLAG_SHOW_PROGRESS);\n\t\tintent.putExtra(\"value\", i);\n\t\tcontext.sendBroadcast(intent);\n\t}\n\n\t/**\n\t * transforms the progress\n\t * @param start 0% => start%\n\t * @param end 100% => end%\n\t */\n\tpublic void transformProgress(int start, int end) {\n\t\ttransformProgressStart = start;\n\t\ttransformProgressEnd = end;\n\t}\n}\n"],
      "c_hash_sni": "bae0223e3d008ee05a94f9b7db30eec6844110b6",
      "name_sni": "src/com/inovex/zabbixmobile/api/ZabbixService.java",
      "c_parents_ss": ["df53c588a80d246f2f77494f72b9fc4b285728ad"],
      "c_imports_removed_t": ["<empty>"],
      "p_hash_sni": "df53c588a80d246f2f77494f72b9fc4b285728ad",
      "c_imports_added_t": ["<empty>"],
      "p_methods_t": ["ApplicationData ApplicationItemRelationData ArrayList, String BasicHttpParams BufferedReader CacheData ContentValues CustomSSLSocketFactory Date DefaultHttpClient EventData GraphData GraphItemData HashSet, Long HistoryDetailData HostData HostGroupData HttpAuthorizationRequiredException HttpPost IOException IllegalStateException InputStreamReader Intent ItemData JSONArray JSONObject JsonArrayOrObjectReader JsonFactory NoAPIAccessException PreconditionFailedException RuntimeException SQLiteQueryBuilder Scheme SchemeRegistry ScreenData ScreenItemData StringBuilder StringEntity ThreadSafeClientConnManager TriggerData UsernamePasswordCredentials X509TrustManager _commitTransactionIfRecommended _endTransaction _queryBuffer _queryStream _startTransaction add addHeader append appendWhere authenticate beginTransaction close contains createJsonParser createSocket d delete endTransaction endsWith equals execute get getBoolean getColumnIndex getContent getCredentialsProvider getCurrentName getCurrentToken getDefaultSharedPreferences getDefaultType getEntity getInstance getInt getJSONArray getJSONObject getJsonArray getLong getMessage getParams getReasonPhrase getResources getSocketFactory getStatusCode getStatusLine getString getText getTime i importApplications importEvents importGraphItems importHostGroups importHosts importItems importScreenItems importTriggers inTransaction indexOf init insert isCached isClosed length load matches min moveToFirst moveToNext next nextProperty nextToken nextValue nextValueToken parseColor parseDouble parseInt parseLong printStackTrace put putExtra query read register replace replaceAll sendBroadcast set setCached setConnectionTimeout setContentCharset setCredentials setEntity setHostnameVerifier setRedirecting setTables setTransactionSuccessful setVersion showProgress split substring toString trim update"],
      "c_imports_removed_cs": "<empty>",
      "p_imports_t": ["android.database.sqlite.SQLiteQueryBuilder org.apache.http.conn.scheme.SchemeRegistry java.util.HashSet org.apache.http.params.BasicHttpParams android.content.Context org.apache.http.params.HttpParams org.apache.http.conn.scheme.PlainSocketFactory java.util.ArrayList com.inovex.zabbixmobile.model.ItemData com.inovex.zabbixmobile.model.HostData com.inovex.zabbixmobile.model.GraphData com.inovex.zabbixmobile.model.EventData org.apache.http.auth.UsernamePasswordCredentials org.apache.http.params.HttpConnectionParams android.content.SharedPreferences java.security.KeyManagementException org.apache.http.conn.ClientConnectionManager org.codehaus.jackson.JsonFactory org.apache.http.entity.StringEntity java.util.Set org.apache.http.params.HttpProtocolParams com.inovex.zabbixmobile.model.ApplicationItemRelationData com.inovex.zabbixmobile.model.TriggerData org.codehaus.jackson.JsonToken android.database.Cursor java.net.Socket android.content.Intent org.apache.http.protocol.HTTP org.json.JSONException java.net.UnknownHostException com.inovex.zabbixmobile.model.HistoryDetailData org.apache.http.HttpResponse java.security.KeyStore com.inovex.zabbixmobile.ZabbixContentProvider android.preference.PreferenceManager android.util.Log org.json.JSONObject java.security.NoSuchAlgorithmException org.apache.http.client.params.HttpClientParams java.io.IOException org.apache.http.conn.scheme.Scheme org.apache.http.client.methods.HttpPost javax.net.ssl.SSLContext org.apache.http.auth.AuthScope org.apache.http.conn.ssl.SSLSocketFactory java.security.KeyStoreException android.content.ContentValues java.io.InputStreamReader java.util.Date java.security.UnrecoverableKeyException android.graphics.Color org.apache.http.client.ClientProtocolException com.inovex.zabbixmobile.model.GraphItemData org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager org.json.JSONArray com.inovex.zabbixmobile.model.CacheData javax.net.ssl.SSLPeerUnverifiedException com.inovex.zabbixmobile.model.HostGroupData org.codehaus.jackson.JsonParseException java.security.cert.X509Certificate org.apache.http.HttpVersion android.database.sqlite.SQLiteDatabase java.util.List java.security.cert.CertificateException java.io.BufferedReader com.inovex.zabbixmobile.model.ApplicationData com.inovex.zabbixmobile.model.ScreenItemData javax.net.ssl.TrustManager com.inovex.zabbixmobile.model.ScreenData com.inovex.zabbixmobile.R org.codehaus.jackson.JsonParser org.apache.http.impl.client.DefaultHttpClient javax.net.ssl.X509TrustManager"],
      "p_subject_t": ["filter by severity, API can parse Object AND Array results"],
      "p_callsites_cs": "<unknown>.set(<unknown>, <unknown>)#org.apache.http.HttpEntity.getContent()#java.lang.String.equals(java.lang.String)#org.json.JSONArray.JSONArray()#<unknown>.set(<unknown>, java.lang.Object)#org.json.JSONObject.put(java.lang.String, java.lang.Integer)#org.json.JSONArray.put(java.lang.String)#org.json.JSONObject.JSONObject()#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.codehaus.jackson.JsonFactory.createJsonParser(java.io.InputStream)#java.lang.String.equals(<unknown>)#org.apache.http.StatusLine.getStatusCode()#<unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>)#org.json.JSONObject.put(java.lang.String, java.lang.String)#android.database.sqlite.SQLiteDatabase.inTransaction()#android.util.Log.d(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService._startTransaction()#java.lang.String.equals(java.lang.String)#org.codehaus.jackson.JsonFactory.JsonFactory()#com.inovex.zabbixmobile.api.ZabbixService._endTransaction()#org.json.JSONObject.put(java.lang.String, int)#android.content.ContentValues.ContentValues(int)#org.apache.http.conn.scheme.SchemeRegistry.SchemeRegistry()#<unknown>.insert(android.database.sqlite.SQLiteDatabase)#<unknown>.insert(android.database.sqlite.SQLiteDatabase)#com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject)#com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject)#com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject)#org.json.JSONObject.getJSONObject(java.lang.String)#java.io.InputStreamReader.InputStreamReader(java.io.InputStream)#android.content.Intent.putExtra(java.lang.String, <unknown>)#org.json.JSONArray.length()#java.lang.String.equals(java.lang.String)#<unknown>.set(<unknown>, <unknown>)#java.lang.String.equals(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService.PreconditionFailedException.PreconditionFailedException()#java.lang.StringBuilder.StringBuilder()#android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null)#<unknown>.nextValueToken()#org.json.JSONObject.JSONObject()#org.json.JSONObject.put(java.lang.String, int)#org.json.JSONObject.put(java.lang.String, org.json.JSONArray)#java.lang.String.equals(<unknown>)#<unknown>.get(<unknown>)#<unknown>.insert(android.database.sqlite.SQLiteDatabase)#android.content.Intent.putExtra(java.lang.String, <unknown>)#java.lang.String.equals(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService.importItems(<unknown>, int, boolean)#com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, java.lang.String, int)#android.util.Log.d(java.lang.String, java.lang.String)#org.json.JSONObject.put(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject)#org.apache.http.conn.scheme.Scheme.Scheme(java.lang.String, org.apache.http.conn.ssl.SSLSocketFactory, int)#org.apache.http.HttpEntity.getContent()#org.codehaus.jackson.JsonParser.close()#java.lang.String.equals(<unknown>)#<unknown>.nextValueToken()#<unknown>.getCurrentName()#org.json.JSONArray.JSONArray(java.util.Set<java.lang.Long>)#<unknown>.nextValueToken()#android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null)#<unknown>.getJsonArray()#com.inovex.zabbixmobile.api.ZabbixService._startTransaction()#org.json.JSONArray.JSONArray()#<unknown>.nextProperty()#java.lang.String.equals(java.lang.String)#android.database.sqlite.SQLiteDatabase.update(<unknown>, android.content.ContentValues, <unknown>, null)#java.util.Set<java.lang.Long>.add(<unknown>)#<unknown>.get(<unknown>)#<unknown>.get(<unknown>)#android.content.ContentValues.put(<unknown>, java.lang.Long)#java.lang.String.equals(java.lang.String)#org.apache.http.StatusLine.getReasonPhrase()#java.lang.RuntimeException.RuntimeException(java.lang.String)#<unknown>.nextProperty()#java.lang.Throwable.printStackTrace()#java.lang.String.equals(<unknown>)#java.lang.Long.parseLong(<unknown>)#org.json.JSONObject.put(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject)#<unknown>.getCurrentName()#android.content.ContentValues.put(<unknown>, java.lang.Long)#org.apache.http.entity.StringEntity.StringEntity(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject)#java.lang.String.equals(<unknown>)#<unknown>.EventData()#<unknown>.next()#<unknown>.set(<unknown>, <unknown>)#com.inovex.zabbixmobile.api.ZabbixService.CustomSSLSocketFactory.CustomSSLSocketFactory(java.security.KeyStore)#com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject)#<unknown>.getCurrentName()#java.util.List<java.lang.String>.add(java.lang.String)#org.json.JSONObject.put(java.lang.String, int)#<unknown>.getText()#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.apache.http.conn.ssl.SSLSocketFactory.setHostnameVerifier(org.apache.http.conn.ssl.X509HostnameVerifier)#<unknown>.set(<unknown>, <unknown>)#<unknown>.getText()#org.json.JSONObject.put(java.lang.String, long)#java.util.Date.Date()#android.util.Log.i(java.lang.String, java.lang.String)#org.json.JSONObject.put(java.lang.String, int)#org.json.JSONObject.put(java.lang.String, int)#<unknown>.set(<unknown>, <unknown>)#com.inovex.zabbixmobile.api.ZabbixService.authenticate()#android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null)#android.util.Log.d(java.lang.String, java.lang.String)#java.lang.String.equals(java.lang.String)#org.apache.http.HttpResponse.getEntity()#org.json.JSONObject.JSONObject()#com.inovex.zabbixmobile.api.ZabbixService.importItems(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader, int, boolean)#com.inovex.zabbixmobile.api.ZabbixService._startTransaction()#com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, null, int)#java.io.BufferedReader.read()#org.json.JSONObject.put(java.lang.String, long)#<unknown>.set(<unknown>, <unknown>)#android.database.Cursor.getLong(<unknown>)#java.lang.IllegalStateException.IllegalStateException(java.lang.String)#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.getCurrentName()#android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null)#android.util.Log.d(java.lang.String, java.lang.String)#<unknown>.set(<unknown>, <unknown>)#java.lang.String.equals(<unknown>)#org.json.JSONObject.put(java.lang.String, java.lang.String)#android.database.Cursor.moveToFirst()#com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, java.lang.String)#android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null)#java.lang.String.equals(java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, java.lang.String)#<unknown>.getText()#org.json.JSONObject.put(java.lang.String, java.lang.String)#android.content.Intent.putExtra(java.lang.String, <unknown>)#<unknown>.getCurrentName()#android.content.res.Resources.getString(<unknown>)#android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null)#android.database.sqlite.SQLiteDatabase.setTransactionSuccessful()#<unknown>.next()#<unknown>.getText()#<unknown>.nextValueToken()#com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject)#com.inovex.zabbixmobile.api.ZabbixService.showProgress(<unknown>)#java.io.IOException.IOException(java.lang.String)#<unknown>.getCurrentName()#android.util.Log.d(java.lang.String, java.lang.String)#java.lang.Object.toString()#org.json.JSONObject.toString()#<unknown>.set(<unknown>, <unknown>)#org.json.JSONArray.JSONArray()#org.apache.http.HttpResponse.getStatusLine()#org.json.JSONArray.JSONArray()#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.apache.http.impl.client.DefaultHttpClient.DefaultHttpClient()#org.json.JSONObject.put(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject)#org.apache.http.HttpResponse.getStatusLine()#java.lang.String.equals(<unknown>)#java.util.Date.Date()#android.util.Log.i(java.lang.String, java.lang.String)#android.content.Context.getResources()#org.apache.http.impl.client.CloseableHttpClient.execute(org.apache.http.client.methods.HttpPost)#com.inovex.zabbixmobile.api.ZabbixService._commitTransactionIfRecommended()#com.inovex.zabbixmobile.api.ZabbixService.importHostGroups(<unknown>)#android.content.Context.sendBroadcast(android.content.Intent)#android.content.Context.sendBroadcast(android.content.Intent)#com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, null, int)#java.lang.Integer.parseInt(<unknown>)#<unknown>.ApplicationData()#com.inovex.zabbixmobile.api.ZabbixService.NoAPIAccessException.NoAPIAccessException()#com.inovex.zabbixmobile.api.ZabbixService._commitTransactionIfRecommended()#<unknown>.getJsonArray()#org.apache.http.message.AbstractHttpMessage.addHeader(java.lang.String, java.lang.String)#org.json.JSONObject.put(java.lang.String, int)#java.lang.String.replace(java.lang.String, java.lang.String)#org.json.JSONArray.JSONArray()#<unknown>.set(<unknown>, <unknown>)#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.set(<unknown>, <unknown>)#org.json.JSONArray.JSONArray()#java.lang.String.equals(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, java.lang.String, int)#<unknown>.nextProperty()#<unknown>.set(<unknown>, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject)#org.json.JSONObject.JSONObject()#java.lang.String.contains(java.lang.String)#org.apache.http.client.methods.HttpEntityEnclosingRequestBase.setEntity(org.apache.http.entity.StringEntity)#com.inovex.zabbixmobile.api.ZabbixService.importTriggers(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader)#org.json.JSONObject.put(java.lang.String, int)#<unknown>.HostGroupData()#<unknown>.JsonArrayOrObjectReader(org.codehaus.jackson.JsonParser)#<unknown>.HostGroupData()#<unknown>.nextProperty()#java.lang.Long.parseLong(<unknown>)#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.json.JSONObject.put(java.lang.String, org.json.JSONArray)#org.json.JSONObject.put(java.lang.String, java.lang.Integer)#<unknown>.set(<unknown>, <unknown>)#<unknown>.close()#org.json.JSONObject.put(java.lang.String, org.json.JSONArray)#<unknown>.set(<unknown>, <unknown>)#java.lang.String.equals(java.lang.String)#android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null)#<unknown>.next()#org.json.JSONObject.toString()#java.lang.String.equals(<unknown>)#java.lang.String.equals(<unknown>)#android.database.sqlite.SQLiteDatabase.query(<unknown>, null, <unknown>, null, null, null, null)#<unknown>.set(<unknown>, <unknown>)#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.CacheData()#<unknown>.getText()#com.inovex.zabbixmobile.api.ZabbixService._startTransaction()#<unknown>.set(<unknown>, <unknown>)#com.inovex.zabbixmobile.api.ZabbixService._endTransaction()#<unknown>.set(<unknown>, int)#<unknown>.getJsonArray()#java.lang.String.equals(<unknown>)#java.util.Date.getTime()#java.lang.String.equals(java.lang.String)#org.json.JSONObject.put(java.lang.String, int)#<unknown>.set(<unknown>, <unknown>)#java.lang.Integer.parseInt(<unknown>)#org.codehaus.jackson.JsonParser.getCurrentName()#<unknown>.nextProperty()#com.inovex.zabbixmobile.api.ZabbixService._endTransaction()#java.lang.String.equals(<unknown>)#org.json.JSONObject.put(java.lang.String, int)#android.database.sqlite.SQLiteDatabase.update(<unknown>, android.content.ContentValues, <unknown>, null)#com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject)#com.inovex.zabbixmobile.api.ZabbixService._endTransaction()#java.lang.StringBuilder.append(char)#<unknown>.set(<unknown>, <unknown>)#<unknown>.get(<unknown>)#<unknown>.set(<unknown>, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject)#org.json.JSONObject.put(java.lang.String, java.lang.String)#android.database.Cursor.getLong(<unknown>)#java.lang.String.equals(<unknown>)#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.json.JSONObject.JSONObject()#org.apache.http.params.HttpProtocolParams.setVersion(org.apache.http.params.HttpParams, org.apache.http.HttpVersion)#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.HistoryDetailData()#android.util.Log.d(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService._startTransaction()#<unknown>.next()#<unknown>.set(<unknown>, <unknown>)#<unknown>.nextValueToken()#org.json.JSONObject.JSONObject()#java.lang.String.equals(<unknown>)#java.lang.Long.parseLong(<unknown>)#java.lang.Integer.parseInt(<unknown>)#org.apache.http.client.methods.HttpPost.HttpPost(java.lang.String)#org.apache.http.StatusLine.getStatusCode()#<unknown>.set(<unknown>, int)#java.lang.String.equals(java.lang.String)#java.lang.String.equals(<unknown>)#java.lang.String.equals(<unknown>)#<unknown>.getCurrentName()#java.util.ArrayList<java.lang.String>.ArrayList, String()#com.inovex.zabbixmobile.api.ZabbixService._startTransaction()#com.inovex.zabbixmobile.api.ZabbixService.importTriggers(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader)#org.json.JSONArray.put(java.lang.String)#<unknown>.nextValueToken()#org.json.JSONArray.put(java.lang.String)#<unknown>.set(<unknown>, <unknown>)#org.json.JSONObject.put(java.lang.String, int)#com.inovex.zabbixmobile.api.ZabbixService.importItems(<unknown>, int, boolean)#org.json.JSONObject.JSONObject()#com.inovex.zabbixmobile.api.ZabbixService.importTriggers(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService.importGraphItems(<unknown>)#<unknown>.ScreenItemData()#<unknown>.set(<unknown>, <unknown>)#<unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>)#android.preference.PreferenceManager.getDefaultSharedPreferences(android.content.Context)#org.json.JSONObject.length()#<unknown>.nextValueToken()#java.util.HashSet<java.lang.Long>.HashSet, Long()#java.lang.String.equals(java.lang.String)#android.content.SharedPreferences.getBoolean(java.lang.String, boolean)#<unknown>.insert(android.database.sqlite.SQLiteDatabase)#org.json.JSONObject.put(java.lang.String, org.json.JSONArray)#<unknown>.close()#com.inovex.zabbixmobile.api.ZabbixService.importHosts(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader, int)#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.next()#android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null)#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.json.JSONObject.getString(java.lang.String)#<unknown>.set(<unknown>, <unknown>)#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.close()#org.json.JSONObject.getString(java.lang.String)#java.lang.String.equals(java.lang.String)#java.lang.Long.parseLong(<unknown>)#org.codehaus.jackson.JsonParser.isClosed()#org.json.JSONObject.put(java.lang.String, int)#org.json.JSONObject.put(java.lang.String, org.json.JSONArray)#org.json.JSONObject.put(java.lang.String, long)#<unknown>.close()#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.set(<unknown>, long)#org.json.JSONObject.put(java.lang.String, org.json.JSONObject)#<unknown>.set(<unknown>, <unknown>)#com.inovex.zabbixmobile.api.ZabbixService._endTransaction()#java.lang.String.replaceAll(java.lang.String, java.lang.String)#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.nextValueToken()#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.apache.http.params.BasicHttpParams.BasicHttpParams()#android.database.sqlite.SQLiteDatabase.beginTransaction()#com.inovex.zabbixmobile.api.ZabbixService._commitTransactionIfRecommended()#com.inovex.zabbixmobile.api.ZabbixService._endTransaction()#java.lang.String.equals(<unknown>)#<unknown>.insert(android.database.sqlite.SQLiteDatabase)#<unknown>.insert(android.database.sqlite.SQLiteDatabase)#org.json.JSONObject.put(java.lang.String, int)#<unknown>.next()#com.inovex.zabbixmobile.api.ZabbixService._startTransaction()#<unknown>.getJsonArray()#android.content.SharedPreferences.getString(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, null, int)#javax.net.SocketFactory.createSocket()#java.lang.Long.parseLong(<unknown>)#org.apache.http.client.CredentialsProvider.setCredentials(org.apache.http.auth.AuthScope, org.apache.http.auth.UsernamePasswordCredentials)#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.next()#com.inovex.zabbixmobile.api.ZabbixService.HttpAuthorizationRequiredException.HttpAuthorizationRequiredException()#android.database.sqlite.SQLiteQueryBuilder.query(android.database.sqlite.SQLiteDatabase, null, null, null, null, null, null)#java.util.Date.Date()#com.inovex.zabbixmobile.api.ZabbixService._commitTransactionIfRecommended()#<unknown>.set(<unknown>, java.lang.String)#org.json.JSONObject.JSONObject()#<unknown>.next()#<unknown>.set(<unknown>, <unknown>)#<unknown>.set(<unknown>, <unknown>)#com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject)#java.lang.String.equals(java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, java.lang.String)#java.lang.String.indexOf(char)#android.database.sqlite.SQLiteDatabase.query(<unknown>, null, <unknown>, null, null, null, null)#android.preference.PreferenceManager.getDefaultSharedPreferences(android.content.Context)#<unknown>.nextProperty()#org.apache.http.impl.client.CloseableHttpClient.execute(org.apache.http.client.methods.HttpPost)#<unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>)#com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, java.lang.String)#org.json.JSONObject.JSONObject()#<unknown>.close()#android.database.Cursor.getColumnIndex(<unknown>)#android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null)#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.nextProperty()#org.apache.http.conn.scheme.PlainSocketFactory.getSocketFactory()#com.inovex.zabbixmobile.api.ZabbixService._commitTransactionIfRecommended()#com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject)#java.lang.StringBuilder.toString()#org.json.JSONObject.put(java.lang.String, java.lang.String)#android.database.sqlite.SQLiteQueryBuilder.SQLiteQueryBuilder()#<unknown>.insert(android.database.sqlite.SQLiteDatabase)#org.apache.http.conn.scheme.SchemeRegistry.register(org.apache.http.conn.scheme.Scheme)#<unknown>.set(<unknown>, <unknown>)#org.json.JSONObject.JSONObject(java.lang.String)#java.lang.String.equals(<unknown>)#<unknown>.set(<unknown>, <unknown>)#<unknown>.set(<unknown>, <unknown>)#java.lang.IllegalStateException.IllegalStateException(java.lang.String)#java.lang.Double.parseDouble(<unknown>)#android.content.ContentValues.put(<unknown>, java.lang.Long)#android.database.sqlite.SQLiteQueryBuilder.appendWhere(<unknown>)#org.apache.http.conn.scheme.SchemeRegistry.register(org.apache.http.conn.scheme.Scheme)#org.json.JSONObject.getInt(java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService.importHosts(<unknown>, null)#org.json.JSONObject.put(java.lang.String, boolean)#java.lang.Long.parseLong(<unknown>)#java.lang.String.indexOf(char)#android.database.sqlite.SQLiteQueryBuilder.appendWhere(<unknown>)#java.lang.String.length()#java.lang.String.equals(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject)#<unknown>.nextProperty()#<unknown>.next()#android.content.SharedPreferences.getString(java.lang.String, java.lang.String)#<unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>)#com.inovex.zabbixmobile.api.ZabbixService.importTriggers(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader)#<unknown>.GraphData()#org.json.JSONArray.put(java.lang.String)#org.apache.http.impl.client.AbstractHttpClient.getParams()#<unknown>.set(<unknown>, long)#<unknown>.set(<unknown>, <unknown>)#org.json.JSONObject.getJSONObject(java.lang.String)#org.json.JSONObject.put(java.lang.String, java.lang.String)#java.lang.String.equals(java.lang.String)#org.json.JSONObject.getString(java.lang.String)#java.lang.String.equals(<unknown>)#java.lang.String.equals(<unknown>)#<unknown>.getCurrentName()#java.lang.String.equals(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService.showProgress(int)#<unknown>.getCurrentName()#com.inovex.zabbixmobile.api.ZabbixService.importHosts(<unknown>, null)#com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, java.lang.String, int)#org.json.JSONObject.put(java.lang.String, int)#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.close()#java.lang.String.replace(java.lang.String, java.lang.String)#java.lang.String.equals(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject)#com.inovex.zabbixmobile.api.ZabbixService._endTransaction()#android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null)#android.database.Cursor.moveToNext()#<unknown>.HostData()#<unknown>.set(<unknown>, long)#<unknown>.next()#com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject)#android.database.sqlite.SQLiteQueryBuilder.setTables(<unknown>)#java.util.Date.getTime()#org.json.JSONObject.put(java.lang.String, long)#android.content.ContentValues.ContentValues(int)#java.lang.Long.parseLong(<unknown>)#org.apache.http.HttpResponse.getEntity()#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.getText()#java.lang.String.equals(java.lang.String)#<unknown>.set(<unknown>, <unknown>)#<unknown>.set(<unknown>, <unknown>)#javax.net.ssl.SSLContext.init(null, javax.net.ssl.TrustManager[], null)#android.database.sqlite.SQLiteDatabase.endTransaction()#java.lang.String.equals(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, java.lang.String)#android.util.Log.d(java.lang.String, java.lang.String)#<unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>)#<unknown>.next()#<unknown>.close()#<unknown>.insert(android.database.sqlite.SQLiteDatabase)#org.json.JSONObject.put(java.lang.String, java.lang.String)#java.lang.Throwable.getMessage()#java.lang.String.equals(<unknown>)#java.lang.String.equals(<unknown>)#<unknown>.set(<unknown>, <unknown>)#com.inovex.zabbixmobile.api.ZabbixService._endTransaction()#javax.net.ssl.SSLContext.getSocketFactory()#org.json.JSONObject.JSONObject()#android.content.Context.getResources()#org.json.JSONObject.put(java.lang.String, int)#com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, null)#com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, java.lang.String, int)#java.lang.String.matches(java.lang.String)#<unknown>.set(<unknown>, <unknown>)#org.json.JSONArray.put(java.lang.String)#<unknown>.set(<unknown>, <unknown>)#android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null)#android.content.Context.sendBroadcast(android.content.Intent)#org.json.JSONObject.getJSONObject(java.lang.String)#<unknown>.get(<unknown>)#android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null)#java.lang.String.equals(<unknown>)#android.content.SharedPreferences.getBoolean(java.lang.String, boolean)#java.lang.Throwable.printStackTrace()#android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null)#org.json.JSONObject.put(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService._startTransaction()#android.content.Intent.putExtra(java.lang.String, int)#org.json.JSONObject.JSONObject()#<unknown>.getText()#com.inovex.zabbixmobile.api.ZabbixService._endTransaction()#org.apache.http.client.methods.HttpPost.HttpPost(java.lang.String)#android.content.SharedPreferences.getString(java.lang.String, java.lang.String)#<unknown>.GraphItemData()#com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, java.lang.String, int)#<unknown>.nextValueToken()#org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager.ThreadSafeClientConnManager(org.apache.http.params.HttpParams, org.apache.http.conn.scheme.SchemeRegistry)#<unknown>.ApplicationItemRelationData()#java.lang.Object.toString()#android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null)#org.json.JSONArray.JSONArray()#java.lang.String.equals(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService._startTransaction()#org.json.JSONObject.put(java.lang.String, org.json.JSONArray)#com.inovex.zabbixmobile.api.ZabbixService.importApplications(int, int, <unknown>)#<unknown>.set(<unknown>, int)#org.json.JSONObject.put(java.lang.String, int)#com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, java.lang.String, int)#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.json.JSONObject.JSONObject()#java.lang.Math.min(int, int)#com.inovex.zabbixmobile.api.ZabbixService.showProgress(<unknown>)#java.lang.String.equals(java.lang.String)#android.content.Intent.Intent(<unknown>)#java.lang.String.equals(<unknown>)#org.json.JSONObject.put(java.lang.String, int)#javax.net.ssl.SSLContext.getInstance(java.lang.String)#android.content.res.Resources.getString(<unknown>)#org.json.JSONObject.JSONObject()#android.content.Intent.Intent(<unknown>)#java.lang.String.equals(<unknown>)#<unknown>.nextProperty()#javax.net.ssl.SSLSocketFactory.createSocket(java.net.Socket, java.lang.String, int, boolean)#org.json.JSONObject.put(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject)#<unknown>.get(<unknown>)#java.io.IOException.IOException(java.lang.String)#java.lang.String.trim()#java.lang.String.contains(java.lang.String)#org.apache.http.entity.StringEntity.StringEntity(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService._endTransaction()#.X509TrustManager()#com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject)#android.graphics.Color.parseColor(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, null)#org.json.JSONObject.getJSONArray(java.lang.String)#org.apache.http.client.params.HttpClientParams.setRedirecting(org.apache.http.params.HttpParams, boolean)#com.inovex.zabbixmobile.api.ZabbixService._startTransaction()#<unknown>.getCurrentName()#java.lang.String.equals(<unknown>)#java.lang.Long.parseLong(<unknown>)#android.util.Log.d(java.lang.String, java.lang.String)#org.codehaus.jackson.JsonParser.getCurrentToken()#org.codehaus.jackson.JsonParser.nextValue()#java.lang.Long.parseLong(<unknown>)#<unknown>.getText()#java.util.Date.getTime()#android.content.Intent.putExtra(java.lang.String, <unknown>)#android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null)#<unknown>.get(<unknown>)#android.database.Cursor.moveToFirst()#org.apache.http.client.methods.HttpEntityEnclosingRequestBase.setEntity(org.apache.http.entity.StringEntity)#com.inovex.zabbixmobile.api.ZabbixService._commitTransactionIfRecommended()#com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, null)#android.database.sqlite.SQLiteQueryBuilder.appendWhere(<unknown>)#org.apache.http.auth.UsernamePasswordCredentials.UsernamePasswordCredentials(java.lang.String, java.lang.String)#java.util.Date.getTime()#java.lang.String.equals(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService._endTransaction()#org.json.JSONObject.put(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService.authenticate()#java.lang.String.equals(<unknown>)#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.json.JSONObject.put(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService.NoAPIAccessException.NoAPIAccessException()#org.json.JSONArray.put(long)#com.inovex.zabbixmobile.api.ZabbixService._endTransaction()#android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null)#<unknown>.getJsonArray()#<unknown>.ScreenData()#java.util.Date.Date()#java.util.Date.Date()#<unknown>.set(<unknown>, long)#<unknown>.getCurrentName()#org.json.JSONObject.put(java.lang.String, org.json.JSONArray)#<unknown>.set(<unknown>, long)#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.apache.http.params.HttpConnectionParams.setConnectionTimeout(org.apache.http.params.HttpParams, int)#org.json.JSONArray.length()#<unknown>.set(<unknown>, java.lang.String)#<unknown>.set(<unknown>, long)#java.util.Date.getTime()#<unknown>.set(<unknown>, <unknown>)#<unknown>.set(<unknown>, <unknown>)#org.json.JSONArray.put(java.lang.String)#java.lang.String.equals(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService.importScreenItems(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService.HttpAuthorizationRequiredException.HttpAuthorizationRequiredException()#<unknown>.getText()#org.json.JSONObject.put(java.lang.String, org.json.JSONArray)#com.inovex.zabbixmobile.api.ZabbixService.importEvents(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader, null)#org.json.JSONObject.JSONObject()#<unknown>.set(<unknown>, <unknown>)#com.inovex.zabbixmobile.api.ZabbixService.importHostGroups(<unknown>)#org.json.JSONObject.toString()#java.lang.Integer.parseInt(<unknown>)#java.lang.String.equals(java.lang.String)#org.apache.http.params.HttpProtocolParams.setContentCharset(org.apache.http.params.HttpParams, java.lang.String)#<unknown>.get(<unknown>)#android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null)#java.lang.String.equals(<unknown>)#<unknown>.set(<unknown>, <unknown>)#<unknown>.nextValueToken()#<unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>)#org.json.JSONObject.put(java.lang.String, org.json.JSONArray)#org.json.JSONObject.put(java.lang.String, java.lang.Integer)#<unknown>.getText()#<unknown>.set(<unknown>, <unknown>)#org.apache.http.message.AbstractHttpMessage.addHeader(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject)#org.json.JSONObject.getJSONArray(java.lang.String)#java.security.KeyStore.load(null, null)#java.lang.String.replace(java.lang.String, java.lang.String)#java.lang.Long.parseLong(<unknown>)#org.json.JSONObject.toString()#com.inovex.zabbixmobile.api.ZabbixService.importTriggers(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader)#android.util.Log.d(java.lang.String, java.lang.String)#android.content.SharedPreferences.getString(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, java.lang.String)#<unknown>.TriggerData()#android.content.SharedPreferences.getString(java.lang.String, java.lang.String)#android.content.Intent.Intent(<unknown>)#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.apache.http.impl.client.AbstractHttpClient.getCredentialsProvider()#<unknown>.set(<unknown>, <unknown>)#java.io.IOException.IOException(java.lang.String)#java.lang.String.trim()#org.json.JSONObject.put(java.lang.String, org.json.JSONArray)#java.lang.String.split(java.lang.String)#java.lang.String.equals(java.lang.String)#java.lang.String.endsWith(java.lang.String)#<unknown>.set(<unknown>, int)#com.inovex.zabbixmobile.api.ZabbixService.showProgress(int)#<unknown>.ItemData()#org.json.JSONObject.put(java.lang.String, int)#<unknown>.set(<unknown>, <unknown>)#org.codehaus.jackson.JsonParser.getText()#android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null)#org.apache.http.impl.client.DefaultHttpClient.DefaultHttpClient(org.apache.http.conn.ClientConnectionManager, org.apache.http.params.HttpParams)#<unknown>.close()#java.lang.IllegalStateException.IllegalStateException(java.lang.String)#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.codehaus.jackson.JsonParser.nextToken()#android.database.Cursor.getColumnIndex(<unknown>)#org.json.JSONObject.put(java.lang.String, org.json.JSONArray)#<unknown>.nextValueToken()#com.inovex.zabbixmobile.api.ZabbixService._startTransaction()#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.set(<unknown>, java.lang.String)#java.lang.String.substring(int, int)#java.lang.Long.parseLong(<unknown>)#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.json.JSONObject.getInt(java.lang.String)#java.lang.String.equals(java.lang.String)#<unknown>.set(<unknown>, <unknown>)#<unknown>.set(<unknown>, <unknown>)#java.security.KeyStore.getInstance(java.lang.String)#java.lang.Integer.parseInt(<unknown>)#java.lang.String.equals(java.lang.String)#<unknown>.nextProperty()#android.content.Intent.putExtra(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, null)#<unknown>.set(<unknown>, int)#java.io.BufferedReader.BufferedReader(java.io.InputStreamReader)#com.inovex.zabbixmobile.api.ZabbixService.importEvents(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader, int)#java.security.KeyStore.getDefaultType()#java.lang.String.equals(<unknown>)#<unknown>.getText()#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.set(<unknown>, java.lang.Object)#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.insert(android.database.sqlite.SQLiteDatabase)#<unknown>.nextProperty()#com.inovex.zabbixmobile.api.ZabbixService._startTransaction()#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.close()#<unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>)#org.json.JSONObject.put(java.lang.String, long)#com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, null, int)#<unknown>.getJsonArray()#<unknown>.set(<unknown>, <unknown>)#java.lang.String.equals(<unknown>)#org.apache.http.conn.scheme.Scheme.Scheme(java.lang.String, org.apache.http.conn.scheme.PlainSocketFactory, int)#org.json.JSONObject.put(java.lang.String, java.lang.String)#java.lang.String.equals(<unknown>)",
      "p_callsites_t": ["<unknown>.set(<unknown>, <unknown>) org.apache.http.HttpEntity.getContent() java.lang.String.equals(java.lang.String) org.json.JSONArray.JSONArray() <unknown>.set(<unknown>, java.lang.Object) org.json.JSONObject.put(java.lang.String, java.lang.Integer) org.json.JSONArray.put(java.lang.String) org.json.JSONObject.JSONObject() org.json.JSONObject.put(java.lang.String, java.lang.String) org.codehaus.jackson.JsonFactory.createJsonParser(java.io.InputStream) java.lang.String.equals(<unknown>) org.apache.http.StatusLine.getStatusCode() <unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>) org.json.JSONObject.put(java.lang.String, java.lang.String) android.database.sqlite.SQLiteDatabase.inTransaction() android.util.Log.d(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService._startTransaction() java.lang.String.equals(java.lang.String) org.codehaus.jackson.JsonFactory.JsonFactory() com.inovex.zabbixmobile.api.ZabbixService._endTransaction() org.json.JSONObject.put(java.lang.String, int) android.content.ContentValues.ContentValues(int) org.apache.http.conn.scheme.SchemeRegistry.SchemeRegistry() <unknown>.insert(android.database.sqlite.SQLiteDatabase) <unknown>.insert(android.database.sqlite.SQLiteDatabase) com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject) com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject) com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject) org.json.JSONObject.getJSONObject(java.lang.String) java.io.InputStreamReader.InputStreamReader(java.io.InputStream) android.content.Intent.putExtra(java.lang.String, <unknown>) org.json.JSONArray.length() java.lang.String.equals(java.lang.String) <unknown>.set(<unknown>, <unknown>) java.lang.String.equals(<unknown>) com.inovex.zabbixmobile.api.ZabbixService.PreconditionFailedException.PreconditionFailedException() java.lang.StringBuilder.StringBuilder() android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null) <unknown>.nextValueToken() org.json.JSONObject.JSONObject() org.json.JSONObject.put(java.lang.String, int) org.json.JSONObject.put(java.lang.String, org.json.JSONArray) java.lang.String.equals(<unknown>) <unknown>.get(<unknown>) <unknown>.insert(android.database.sqlite.SQLiteDatabase) android.content.Intent.putExtra(java.lang.String, <unknown>) java.lang.String.equals(<unknown>) com.inovex.zabbixmobile.api.ZabbixService.importItems(<unknown>, int, boolean) com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, java.lang.String, int) android.util.Log.d(java.lang.String, java.lang.String) org.json.JSONObject.put(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject) org.apache.http.conn.scheme.Scheme.Scheme(java.lang.String, org.apache.http.conn.ssl.SSLSocketFactory, int) org.apache.http.HttpEntity.getContent() org.codehaus.jackson.JsonParser.close() java.lang.String.equals(<unknown>) <unknown>.nextValueToken() <unknown>.getCurrentName() org.json.JSONArray.JSONArray(java.util.Set<java.lang.Long>) <unknown>.nextValueToken() android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null) <unknown>.getJsonArray() com.inovex.zabbixmobile.api.ZabbixService._startTransaction() org.json.JSONArray.JSONArray() <unknown>.nextProperty() java.lang.String.equals(java.lang.String) android.database.sqlite.SQLiteDatabase.update(<unknown>, android.content.ContentValues, <unknown>, null) java.util.Set<java.lang.Long>.add(<unknown>) <unknown>.get(<unknown>) <unknown>.get(<unknown>) android.content.ContentValues.put(<unknown>, java.lang.Long) java.lang.String.equals(java.lang.String) org.apache.http.StatusLine.getReasonPhrase() java.lang.RuntimeException.RuntimeException(java.lang.String) <unknown>.nextProperty() java.lang.Throwable.printStackTrace() java.lang.String.equals(<unknown>) java.lang.Long.parseLong(<unknown>) org.json.JSONObject.put(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject) <unknown>.getCurrentName() android.content.ContentValues.put(<unknown>, java.lang.Long) org.apache.http.entity.StringEntity.StringEntity(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject) java.lang.String.equals(<unknown>) <unknown>.EventData() <unknown>.next() <unknown>.set(<unknown>, <unknown>) com.inovex.zabbixmobile.api.ZabbixService.CustomSSLSocketFactory.CustomSSLSocketFactory(java.security.KeyStore) com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject) <unknown>.getCurrentName() java.util.List<java.lang.String>.add(java.lang.String) org.json.JSONObject.put(java.lang.String, int) <unknown>.getText() org.json.JSONObject.put(java.lang.String, java.lang.String) org.apache.http.conn.ssl.SSLSocketFactory.setHostnameVerifier(org.apache.http.conn.ssl.X509HostnameVerifier) <unknown>.set(<unknown>, <unknown>) <unknown>.getText() org.json.JSONObject.put(java.lang.String, long) java.util.Date.Date() android.util.Log.i(java.lang.String, java.lang.String) org.json.JSONObject.put(java.lang.String, int) org.json.JSONObject.put(java.lang.String, int) <unknown>.set(<unknown>, <unknown>) com.inovex.zabbixmobile.api.ZabbixService.authenticate() android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null) android.util.Log.d(java.lang.String, java.lang.String) java.lang.String.equals(java.lang.String) org.apache.http.HttpResponse.getEntity() org.json.JSONObject.JSONObject() com.inovex.zabbixmobile.api.ZabbixService.importItems(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader, int, boolean) com.inovex.zabbixmobile.api.ZabbixService._startTransaction() com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, null, int) java.io.BufferedReader.read() org.json.JSONObject.put(java.lang.String, long) <unknown>.set(<unknown>, <unknown>) android.database.Cursor.getLong(<unknown>) java.lang.IllegalStateException.IllegalStateException(java.lang.String) org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.getCurrentName() android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null) android.util.Log.d(java.lang.String, java.lang.String) <unknown>.set(<unknown>, <unknown>) java.lang.String.equals(<unknown>) org.json.JSONObject.put(java.lang.String, java.lang.String) android.database.Cursor.moveToFirst() com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, java.lang.String) android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null) java.lang.String.equals(java.lang.String) com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, java.lang.String) <unknown>.getText() org.json.JSONObject.put(java.lang.String, java.lang.String) android.content.Intent.putExtra(java.lang.String, <unknown>) <unknown>.getCurrentName() android.content.res.Resources.getString(<unknown>) android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null) android.database.sqlite.SQLiteDatabase.setTransactionSuccessful() <unknown>.next() <unknown>.getText() <unknown>.nextValueToken() com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject) com.inovex.zabbixmobile.api.ZabbixService.showProgress(<unknown>) java.io.IOException.IOException(java.lang.String) <unknown>.getCurrentName() android.util.Log.d(java.lang.String, java.lang.String) java.lang.Object.toString() org.json.JSONObject.toString() <unknown>.set(<unknown>, <unknown>) org.json.JSONArray.JSONArray() org.apache.http.HttpResponse.getStatusLine() org.json.JSONArray.JSONArray() org.json.JSONObject.put(java.lang.String, java.lang.String) org.apache.http.impl.client.DefaultHttpClient.DefaultHttpClient() org.json.JSONObject.put(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject) org.apache.http.HttpResponse.getStatusLine() java.lang.String.equals(<unknown>) java.util.Date.Date() android.util.Log.i(java.lang.String, java.lang.String) android.content.Context.getResources() org.apache.http.impl.client.CloseableHttpClient.execute(org.apache.http.client.methods.HttpPost) com.inovex.zabbixmobile.api.ZabbixService._commitTransactionIfRecommended() com.inovex.zabbixmobile.api.ZabbixService.importHostGroups(<unknown>) android.content.Context.sendBroadcast(android.content.Intent) android.content.Context.sendBroadcast(android.content.Intent) com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, null, int) java.lang.Integer.parseInt(<unknown>) <unknown>.ApplicationData() com.inovex.zabbixmobile.api.ZabbixService.NoAPIAccessException.NoAPIAccessException() com.inovex.zabbixmobile.api.ZabbixService._commitTransactionIfRecommended() <unknown>.getJsonArray() org.apache.http.message.AbstractHttpMessage.addHeader(java.lang.String, java.lang.String) org.json.JSONObject.put(java.lang.String, int) java.lang.String.replace(java.lang.String, java.lang.String) org.json.JSONArray.JSONArray() <unknown>.set(<unknown>, <unknown>) org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.set(<unknown>, <unknown>) org.json.JSONArray.JSONArray() java.lang.String.equals(<unknown>) com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, java.lang.String, int) <unknown>.nextProperty() <unknown>.set(<unknown>, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject) org.json.JSONObject.JSONObject() java.lang.String.contains(java.lang.String) org.apache.http.client.methods.HttpEntityEnclosingRequestBase.setEntity(org.apache.http.entity.StringEntity) com.inovex.zabbixmobile.api.ZabbixService.importTriggers(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader) org.json.JSONObject.put(java.lang.String, int) <unknown>.HostGroupData() <unknown>.JsonArrayOrObjectReader(org.codehaus.jackson.JsonParser) <unknown>.HostGroupData() <unknown>.nextProperty() java.lang.Long.parseLong(<unknown>) org.json.JSONObject.put(java.lang.String, java.lang.String) org.json.JSONObject.put(java.lang.String, org.json.JSONArray) org.json.JSONObject.put(java.lang.String, java.lang.Integer) <unknown>.set(<unknown>, <unknown>) <unknown>.close() org.json.JSONObject.put(java.lang.String, org.json.JSONArray) <unknown>.set(<unknown>, <unknown>) java.lang.String.equals(java.lang.String) android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null) <unknown>.next() org.json.JSONObject.toString() java.lang.String.equals(<unknown>) java.lang.String.equals(<unknown>) android.database.sqlite.SQLiteDatabase.query(<unknown>, null, <unknown>, null, null, null, null) <unknown>.set(<unknown>, <unknown>) org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.CacheData() <unknown>.getText() com.inovex.zabbixmobile.api.ZabbixService._startTransaction() <unknown>.set(<unknown>, <unknown>) com.inovex.zabbixmobile.api.ZabbixService._endTransaction() <unknown>.set(<unknown>, int) <unknown>.getJsonArray() java.lang.String.equals(<unknown>) java.util.Date.getTime() java.lang.String.equals(java.lang.String) org.json.JSONObject.put(java.lang.String, int) <unknown>.set(<unknown>, <unknown>) java.lang.Integer.parseInt(<unknown>) org.codehaus.jackson.JsonParser.getCurrentName() <unknown>.nextProperty() com.inovex.zabbixmobile.api.ZabbixService._endTransaction() java.lang.String.equals(<unknown>) org.json.JSONObject.put(java.lang.String, int) android.database.sqlite.SQLiteDatabase.update(<unknown>, android.content.ContentValues, <unknown>, null) com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject) com.inovex.zabbixmobile.api.ZabbixService._endTransaction() java.lang.StringBuilder.append(char) <unknown>.set(<unknown>, <unknown>) <unknown>.get(<unknown>) <unknown>.set(<unknown>, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject) org.json.JSONObject.put(java.lang.String, java.lang.String) android.database.Cursor.getLong(<unknown>) java.lang.String.equals(<unknown>) org.json.JSONObject.put(java.lang.String, java.lang.String) org.json.JSONObject.JSONObject() org.apache.http.params.HttpProtocolParams.setVersion(org.apache.http.params.HttpParams, org.apache.http.HttpVersion) org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.HistoryDetailData() android.util.Log.d(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService._startTransaction() <unknown>.next() <unknown>.set(<unknown>, <unknown>) <unknown>.nextValueToken() org.json.JSONObject.JSONObject() java.lang.String.equals(<unknown>) java.lang.Long.parseLong(<unknown>) java.lang.Integer.parseInt(<unknown>) org.apache.http.client.methods.HttpPost.HttpPost(java.lang.String) org.apache.http.StatusLine.getStatusCode() <unknown>.set(<unknown>, int) java.lang.String.equals(java.lang.String) java.lang.String.equals(<unknown>) java.lang.String.equals(<unknown>) <unknown>.getCurrentName() java.util.ArrayList<java.lang.String>.ArrayList, String() com.inovex.zabbixmobile.api.ZabbixService._startTransaction() com.inovex.zabbixmobile.api.ZabbixService.importTriggers(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader) org.json.JSONArray.put(java.lang.String) <unknown>.nextValueToken() org.json.JSONArray.put(java.lang.String) <unknown>.set(<unknown>, <unknown>) org.json.JSONObject.put(java.lang.String, int) com.inovex.zabbixmobile.api.ZabbixService.importItems(<unknown>, int, boolean) org.json.JSONObject.JSONObject() com.inovex.zabbixmobile.api.ZabbixService.importTriggers(<unknown>) com.inovex.zabbixmobile.api.ZabbixService.importGraphItems(<unknown>) <unknown>.ScreenItemData() <unknown>.set(<unknown>, <unknown>) <unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>) android.preference.PreferenceManager.getDefaultSharedPreferences(android.content.Context) org.json.JSONObject.length() <unknown>.nextValueToken() java.util.HashSet<java.lang.Long>.HashSet, Long() java.lang.String.equals(java.lang.String) android.content.SharedPreferences.getBoolean(java.lang.String, boolean) <unknown>.insert(android.database.sqlite.SQLiteDatabase) org.json.JSONObject.put(java.lang.String, org.json.JSONArray) <unknown>.close() com.inovex.zabbixmobile.api.ZabbixService.importHosts(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader, int) org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.next() android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null) org.json.JSONObject.put(java.lang.String, java.lang.String) org.json.JSONObject.getString(java.lang.String) <unknown>.set(<unknown>, <unknown>) org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.close() org.json.JSONObject.getString(java.lang.String) java.lang.String.equals(java.lang.String) java.lang.Long.parseLong(<unknown>) org.codehaus.jackson.JsonParser.isClosed() org.json.JSONObject.put(java.lang.String, int) org.json.JSONObject.put(java.lang.String, org.json.JSONArray) org.json.JSONObject.put(java.lang.String, long) <unknown>.close() org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.set(<unknown>, long) org.json.JSONObject.put(java.lang.String, org.json.JSONObject) <unknown>.set(<unknown>, <unknown>) com.inovex.zabbixmobile.api.ZabbixService._endTransaction() java.lang.String.replaceAll(java.lang.String, java.lang.String) org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.nextValueToken() org.json.JSONObject.put(java.lang.String, java.lang.String) org.json.JSONObject.put(java.lang.String, java.lang.String) org.apache.http.params.BasicHttpParams.BasicHttpParams() android.database.sqlite.SQLiteDatabase.beginTransaction() com.inovex.zabbixmobile.api.ZabbixService._commitTransactionIfRecommended() com.inovex.zabbixmobile.api.ZabbixService._endTransaction() java.lang.String.equals(<unknown>) <unknown>.insert(android.database.sqlite.SQLiteDatabase) <unknown>.insert(android.database.sqlite.SQLiteDatabase) org.json.JSONObject.put(java.lang.String, int) <unknown>.next() com.inovex.zabbixmobile.api.ZabbixService._startTransaction() <unknown>.getJsonArray() android.content.SharedPreferences.getString(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, null, int) javax.net.SocketFactory.createSocket() java.lang.Long.parseLong(<unknown>) org.apache.http.client.CredentialsProvider.setCredentials(org.apache.http.auth.AuthScope, org.apache.http.auth.UsernamePasswordCredentials) org.json.JSONObject.put(java.lang.String, java.lang.String) org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.next() com.inovex.zabbixmobile.api.ZabbixService.HttpAuthorizationRequiredException.HttpAuthorizationRequiredException() android.database.sqlite.SQLiteQueryBuilder.query(android.database.sqlite.SQLiteDatabase, null, null, null, null, null, null) java.util.Date.Date() com.inovex.zabbixmobile.api.ZabbixService._commitTransactionIfRecommended() <unknown>.set(<unknown>, java.lang.String) org.json.JSONObject.JSONObject() <unknown>.next() <unknown>.set(<unknown>, <unknown>) <unknown>.set(<unknown>, <unknown>) com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject) java.lang.String.equals(java.lang.String) com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, java.lang.String) java.lang.String.indexOf(char) android.database.sqlite.SQLiteDatabase.query(<unknown>, null, <unknown>, null, null, null, null) android.preference.PreferenceManager.getDefaultSharedPreferences(android.content.Context) <unknown>.nextProperty() org.apache.http.impl.client.CloseableHttpClient.execute(org.apache.http.client.methods.HttpPost) <unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>) com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, java.lang.String) org.json.JSONObject.JSONObject() <unknown>.close() android.database.Cursor.getColumnIndex(<unknown>) android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null) org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.nextProperty() org.apache.http.conn.scheme.PlainSocketFactory.getSocketFactory() com.inovex.zabbixmobile.api.ZabbixService._commitTransactionIfRecommended() com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject) java.lang.StringBuilder.toString() org.json.JSONObject.put(java.lang.String, java.lang.String) android.database.sqlite.SQLiteQueryBuilder.SQLiteQueryBuilder() <unknown>.insert(android.database.sqlite.SQLiteDatabase) org.apache.http.conn.scheme.SchemeRegistry.register(org.apache.http.conn.scheme.Scheme) <unknown>.set(<unknown>, <unknown>) org.json.JSONObject.JSONObject(java.lang.String) java.lang.String.equals(<unknown>) <unknown>.set(<unknown>, <unknown>) <unknown>.set(<unknown>, <unknown>) java.lang.IllegalStateException.IllegalStateException(java.lang.String) java.lang.Double.parseDouble(<unknown>) android.content.ContentValues.put(<unknown>, java.lang.Long) android.database.sqlite.SQLiteQueryBuilder.appendWhere(<unknown>) org.apache.http.conn.scheme.SchemeRegistry.register(org.apache.http.conn.scheme.Scheme) org.json.JSONObject.getInt(java.lang.String) com.inovex.zabbixmobile.api.ZabbixService.importHosts(<unknown>, null) org.json.JSONObject.put(java.lang.String, boolean) java.lang.Long.parseLong(<unknown>) java.lang.String.indexOf(char) android.database.sqlite.SQLiteQueryBuilder.appendWhere(<unknown>) java.lang.String.length() java.lang.String.equals(<unknown>) com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject) <unknown>.nextProperty() <unknown>.next() android.content.SharedPreferences.getString(java.lang.String, java.lang.String) <unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>) com.inovex.zabbixmobile.api.ZabbixService.importTriggers(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader) <unknown>.GraphData() org.json.JSONArray.put(java.lang.String) org.apache.http.impl.client.AbstractHttpClient.getParams() <unknown>.set(<unknown>, long) <unknown>.set(<unknown>, <unknown>) org.json.JSONObject.getJSONObject(java.lang.String) org.json.JSONObject.put(java.lang.String, java.lang.String) java.lang.String.equals(java.lang.String) org.json.JSONObject.getString(java.lang.String) java.lang.String.equals(<unknown>) java.lang.String.equals(<unknown>) <unknown>.getCurrentName() java.lang.String.equals(<unknown>) com.inovex.zabbixmobile.api.ZabbixService.showProgress(int) <unknown>.getCurrentName() com.inovex.zabbixmobile.api.ZabbixService.importHosts(<unknown>, null) com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, java.lang.String, int) org.json.JSONObject.put(java.lang.String, int) org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.close() java.lang.String.replace(java.lang.String, java.lang.String) java.lang.String.equals(<unknown>) com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject) com.inovex.zabbixmobile.api.ZabbixService._endTransaction() android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null) android.database.Cursor.moveToNext() <unknown>.HostData() <unknown>.set(<unknown>, long) <unknown>.next() com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject) android.database.sqlite.SQLiteQueryBuilder.setTables(<unknown>) java.util.Date.getTime() org.json.JSONObject.put(java.lang.String, long) android.content.ContentValues.ContentValues(int) java.lang.Long.parseLong(<unknown>) org.apache.http.HttpResponse.getEntity() org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.getText() java.lang.String.equals(java.lang.String) <unknown>.set(<unknown>, <unknown>) <unknown>.set(<unknown>, <unknown>) javax.net.ssl.SSLContext.init(null, javax.net.ssl.TrustManager[], null) android.database.sqlite.SQLiteDatabase.endTransaction() java.lang.String.equals(<unknown>) com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, java.lang.String) android.util.Log.d(java.lang.String, java.lang.String) <unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>) <unknown>.next() <unknown>.close() <unknown>.insert(android.database.sqlite.SQLiteDatabase) org.json.JSONObject.put(java.lang.String, java.lang.String) java.lang.Throwable.getMessage() java.lang.String.equals(<unknown>) java.lang.String.equals(<unknown>) <unknown>.set(<unknown>, <unknown>) com.inovex.zabbixmobile.api.ZabbixService._endTransaction() javax.net.ssl.SSLContext.getSocketFactory() org.json.JSONObject.JSONObject() android.content.Context.getResources() org.json.JSONObject.put(java.lang.String, int) com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, null) com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, java.lang.String, int) java.lang.String.matches(java.lang.String) <unknown>.set(<unknown>, <unknown>) org.json.JSONArray.put(java.lang.String) <unknown>.set(<unknown>, <unknown>) android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null) android.content.Context.sendBroadcast(android.content.Intent) org.json.JSONObject.getJSONObject(java.lang.String) <unknown>.get(<unknown>) android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null) java.lang.String.equals(<unknown>) android.content.SharedPreferences.getBoolean(java.lang.String, boolean) java.lang.Throwable.printStackTrace() android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null) org.json.JSONObject.put(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService._startTransaction() android.content.Intent.putExtra(java.lang.String, int) org.json.JSONObject.JSONObject() <unknown>.getText() com.inovex.zabbixmobile.api.ZabbixService._endTransaction() org.apache.http.client.methods.HttpPost.HttpPost(java.lang.String) android.content.SharedPreferences.getString(java.lang.String, java.lang.String) <unknown>.GraphItemData() com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, java.lang.String, int) <unknown>.nextValueToken() org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager.ThreadSafeClientConnManager(org.apache.http.params.HttpParams, org.apache.http.conn.scheme.SchemeRegistry) <unknown>.ApplicationItemRelationData() java.lang.Object.toString() android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null) org.json.JSONArray.JSONArray() java.lang.String.equals(<unknown>) com.inovex.zabbixmobile.api.ZabbixService._startTransaction() org.json.JSONObject.put(java.lang.String, org.json.JSONArray) com.inovex.zabbixmobile.api.ZabbixService.importApplications(int, int, <unknown>) <unknown>.set(<unknown>, int) org.json.JSONObject.put(java.lang.String, int) com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, java.lang.String, int) org.json.JSONObject.put(java.lang.String, java.lang.String) org.json.JSONObject.JSONObject() java.lang.Math.min(int, int) com.inovex.zabbixmobile.api.ZabbixService.showProgress(<unknown>) java.lang.String.equals(java.lang.String) android.content.Intent.Intent(<unknown>) java.lang.String.equals(<unknown>) org.json.JSONObject.put(java.lang.String, int) javax.net.ssl.SSLContext.getInstance(java.lang.String) android.content.res.Resources.getString(<unknown>) org.json.JSONObject.JSONObject() android.content.Intent.Intent(<unknown>) java.lang.String.equals(<unknown>) <unknown>.nextProperty() javax.net.ssl.SSLSocketFactory.createSocket(java.net.Socket, java.lang.String, int, boolean) org.json.JSONObject.put(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject) <unknown>.get(<unknown>) java.io.IOException.IOException(java.lang.String) java.lang.String.trim() java.lang.String.contains(java.lang.String) org.apache.http.entity.StringEntity.StringEntity(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService._endTransaction() .X509TrustManager() com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject) android.graphics.Color.parseColor(<unknown>) com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, null) org.json.JSONObject.getJSONArray(java.lang.String) org.apache.http.client.params.HttpClientParams.setRedirecting(org.apache.http.params.HttpParams, boolean) com.inovex.zabbixmobile.api.ZabbixService._startTransaction() <unknown>.getCurrentName() java.lang.String.equals(<unknown>) java.lang.Long.parseLong(<unknown>) android.util.Log.d(java.lang.String, java.lang.String) org.codehaus.jackson.JsonParser.getCurrentToken() org.codehaus.jackson.JsonParser.nextValue() java.lang.Long.parseLong(<unknown>) <unknown>.getText() java.util.Date.getTime() android.content.Intent.putExtra(java.lang.String, <unknown>) android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null) <unknown>.get(<unknown>) android.database.Cursor.moveToFirst() org.apache.http.client.methods.HttpEntityEnclosingRequestBase.setEntity(org.apache.http.entity.StringEntity) com.inovex.zabbixmobile.api.ZabbixService._commitTransactionIfRecommended() com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, null) android.database.sqlite.SQLiteQueryBuilder.appendWhere(<unknown>) org.apache.http.auth.UsernamePasswordCredentials.UsernamePasswordCredentials(java.lang.String, java.lang.String) java.util.Date.getTime() java.lang.String.equals(<unknown>) com.inovex.zabbixmobile.api.ZabbixService._endTransaction() org.json.JSONObject.put(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService.authenticate() java.lang.String.equals(<unknown>) org.json.JSONObject.put(java.lang.String, java.lang.String) org.json.JSONObject.put(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService.NoAPIAccessException.NoAPIAccessException() org.json.JSONArray.put(long) com.inovex.zabbixmobile.api.ZabbixService._endTransaction() android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null) <unknown>.getJsonArray() <unknown>.ScreenData() java.util.Date.Date() java.util.Date.Date() <unknown>.set(<unknown>, long) <unknown>.getCurrentName() org.json.JSONObject.put(java.lang.String, org.json.JSONArray) <unknown>.set(<unknown>, long) org.json.JSONObject.put(java.lang.String, java.lang.String) org.apache.http.params.HttpConnectionParams.setConnectionTimeout(org.apache.http.params.HttpParams, int) org.json.JSONArray.length() <unknown>.set(<unknown>, java.lang.String) <unknown>.set(<unknown>, long) java.util.Date.getTime() <unknown>.set(<unknown>, <unknown>) <unknown>.set(<unknown>, <unknown>) org.json.JSONArray.put(java.lang.String) java.lang.String.equals(<unknown>) com.inovex.zabbixmobile.api.ZabbixService.importScreenItems(<unknown>) com.inovex.zabbixmobile.api.ZabbixService.HttpAuthorizationRequiredException.HttpAuthorizationRequiredException() <unknown>.getText() org.json.JSONObject.put(java.lang.String, org.json.JSONArray) com.inovex.zabbixmobile.api.ZabbixService.importEvents(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader, null) org.json.JSONObject.JSONObject() <unknown>.set(<unknown>, <unknown>) com.inovex.zabbixmobile.api.ZabbixService.importHostGroups(<unknown>) org.json.JSONObject.toString() java.lang.Integer.parseInt(<unknown>) java.lang.String.equals(java.lang.String) org.apache.http.params.HttpProtocolParams.setContentCharset(org.apache.http.params.HttpParams, java.lang.String) <unknown>.get(<unknown>) android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null) java.lang.String.equals(<unknown>) <unknown>.set(<unknown>, <unknown>) <unknown>.nextValueToken() <unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>) org.json.JSONObject.put(java.lang.String, org.json.JSONArray) org.json.JSONObject.put(java.lang.String, java.lang.Integer) <unknown>.getText() <unknown>.set(<unknown>, <unknown>) org.apache.http.message.AbstractHttpMessage.addHeader(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject) org.json.JSONObject.getJSONArray(java.lang.String) java.security.KeyStore.load(null, null) java.lang.String.replace(java.lang.String, java.lang.String) java.lang.Long.parseLong(<unknown>) org.json.JSONObject.toString() com.inovex.zabbixmobile.api.ZabbixService.importTriggers(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader) android.util.Log.d(java.lang.String, java.lang.String) android.content.SharedPreferences.getString(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, java.lang.String) <unknown>.TriggerData() android.content.SharedPreferences.getString(java.lang.String, java.lang.String) android.content.Intent.Intent(<unknown>) org.json.JSONObject.put(java.lang.String, java.lang.String) org.apache.http.impl.client.AbstractHttpClient.getCredentialsProvider() <unknown>.set(<unknown>, <unknown>) java.io.IOException.IOException(java.lang.String) java.lang.String.trim() org.json.JSONObject.put(java.lang.String, org.json.JSONArray) java.lang.String.split(java.lang.String) java.lang.String.equals(java.lang.String) java.lang.String.endsWith(java.lang.String) <unknown>.set(<unknown>, int) com.inovex.zabbixmobile.api.ZabbixService.showProgress(int) <unknown>.ItemData() org.json.JSONObject.put(java.lang.String, int) <unknown>.set(<unknown>, <unknown>) org.codehaus.jackson.JsonParser.getText() android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null) org.apache.http.impl.client.DefaultHttpClient.DefaultHttpClient(org.apache.http.conn.ClientConnectionManager, org.apache.http.params.HttpParams) <unknown>.close() java.lang.IllegalStateException.IllegalStateException(java.lang.String) org.json.JSONObject.put(java.lang.String, java.lang.String) org.codehaus.jackson.JsonParser.nextToken() android.database.Cursor.getColumnIndex(<unknown>) org.json.JSONObject.put(java.lang.String, org.json.JSONArray) <unknown>.nextValueToken() com.inovex.zabbixmobile.api.ZabbixService._startTransaction() org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.set(<unknown>, java.lang.String) java.lang.String.substring(int, int) java.lang.Long.parseLong(<unknown>) org.json.JSONObject.put(java.lang.String, java.lang.String) org.json.JSONObject.getInt(java.lang.String) java.lang.String.equals(java.lang.String) <unknown>.set(<unknown>, <unknown>) <unknown>.set(<unknown>, <unknown>) java.security.KeyStore.getInstance(java.lang.String) java.lang.Integer.parseInt(<unknown>) java.lang.String.equals(java.lang.String) <unknown>.nextProperty() android.content.Intent.putExtra(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, null) <unknown>.set(<unknown>, int) java.io.BufferedReader.BufferedReader(java.io.InputStreamReader) com.inovex.zabbixmobile.api.ZabbixService.importEvents(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader, int) java.security.KeyStore.getDefaultType() java.lang.String.equals(<unknown>) <unknown>.getText() org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.set(<unknown>, java.lang.Object) org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.insert(android.database.sqlite.SQLiteDatabase) <unknown>.nextProperty() com.inovex.zabbixmobile.api.ZabbixService._startTransaction() org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.close() <unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>) org.json.JSONObject.put(java.lang.String, long) com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, null, int) <unknown>.getJsonArray() <unknown>.set(<unknown>, <unknown>) java.lang.String.equals(<unknown>) org.apache.http.conn.scheme.Scheme.Scheme(java.lang.String, org.apache.http.conn.scheme.PlainSocketFactory, int) org.json.JSONObject.put(java.lang.String, java.lang.String) java.lang.String.equals(<unknown>)"],
      "c_callsites_t": ["<unknown>.set(<unknown>, <unknown>) org.apache.http.HttpEntity.getContent() java.lang.String.equals(java.lang.String) org.json.JSONArray.JSONArray() <unknown>.set(<unknown>, java.lang.Object) org.json.JSONObject.put(java.lang.String, java.lang.Integer) org.json.JSONArray.put(java.lang.String) org.json.JSONObject.JSONObject() org.json.JSONObject.put(java.lang.String, java.lang.String) org.codehaus.jackson.JsonFactory.createJsonParser(java.io.InputStream) java.lang.String.equals(<unknown>) org.apache.http.StatusLine.getStatusCode() <unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>) org.json.JSONObject.put(java.lang.String, java.lang.String) android.database.sqlite.SQLiteDatabase.inTransaction() android.util.Log.d(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService._startTransaction() java.lang.String.equals(java.lang.String) org.codehaus.jackson.JsonFactory.JsonFactory() com.inovex.zabbixmobile.api.ZabbixService._endTransaction() org.json.JSONObject.put(java.lang.String, int) android.content.ContentValues.ContentValues(int) org.apache.http.conn.scheme.SchemeRegistry.SchemeRegistry() <unknown>.insert(android.database.sqlite.SQLiteDatabase) <unknown>.insert(android.database.sqlite.SQLiteDatabase) com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject) com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject) com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject) org.json.JSONObject.getJSONObject(java.lang.String) java.io.InputStreamReader.InputStreamReader(java.io.InputStream) android.content.Intent.putExtra(java.lang.String, <unknown>) org.json.JSONArray.length() java.lang.String.equals(java.lang.String) <unknown>.set(<unknown>, <unknown>) java.lang.String.equals(<unknown>) com.inovex.zabbixmobile.api.ZabbixService.PreconditionFailedException.PreconditionFailedException() java.lang.StringBuilder.StringBuilder() android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null) <unknown>.nextValueToken() org.json.JSONObject.JSONObject() org.json.JSONObject.put(java.lang.String, int) org.json.JSONObject.put(java.lang.String, org.json.JSONArray) java.lang.String.equals(<unknown>) <unknown>.get(<unknown>) <unknown>.insert(android.database.sqlite.SQLiteDatabase) android.content.Intent.putExtra(java.lang.String, <unknown>) java.lang.String.equals(<unknown>) com.inovex.zabbixmobile.api.ZabbixService.importItems(<unknown>, int, boolean) com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, java.lang.String, int) android.util.Log.d(java.lang.String, java.lang.String) org.json.JSONObject.put(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject) org.apache.http.conn.scheme.Scheme.Scheme(java.lang.String, org.apache.http.conn.ssl.SSLSocketFactory, int) org.apache.http.HttpEntity.getContent() org.codehaus.jackson.JsonParser.close() java.lang.String.equals(<unknown>) <unknown>.nextValueToken() <unknown>.getCurrentName() org.json.JSONArray.JSONArray(java.util.Set<java.lang.Long>) <unknown>.nextValueToken() android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null) <unknown>.getJsonArray() com.inovex.zabbixmobile.api.ZabbixService._startTransaction() org.json.JSONArray.JSONArray() <unknown>.nextProperty() java.lang.String.equals(java.lang.String) android.database.sqlite.SQLiteDatabase.update(<unknown>, android.content.ContentValues, <unknown>, null) java.util.Set<java.lang.Long>.add(<unknown>) <unknown>.get(<unknown>) <unknown>.get(<unknown>) android.content.ContentValues.put(<unknown>, java.lang.Long) java.lang.String.equals(java.lang.String) org.apache.http.StatusLine.getReasonPhrase() java.lang.RuntimeException.RuntimeException(java.lang.String) <unknown>.nextProperty() java.lang.Throwable.printStackTrace() java.lang.String.equals(<unknown>) java.lang.Long.parseLong(<unknown>) org.json.JSONObject.put(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject) <unknown>.getCurrentName() android.content.ContentValues.put(<unknown>, java.lang.Long) org.apache.http.entity.StringEntity.StringEntity(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject) java.lang.String.equals(<unknown>) <unknown>.EventData() <unknown>.next() <unknown>.set(<unknown>, <unknown>) com.inovex.zabbixmobile.api.ZabbixService.CustomSSLSocketFactory.CustomSSLSocketFactory(java.security.KeyStore) com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject) <unknown>.getCurrentName() java.util.List<java.lang.String>.add(java.lang.String) org.json.JSONObject.put(java.lang.String, int) <unknown>.getText() org.json.JSONObject.put(java.lang.String, java.lang.String) org.apache.http.conn.ssl.SSLSocketFactory.setHostnameVerifier(org.apache.http.conn.ssl.X509HostnameVerifier) <unknown>.set(<unknown>, <unknown>) <unknown>.getText() org.json.JSONObject.put(java.lang.String, long) java.util.Date.Date() android.util.Log.i(java.lang.String, java.lang.String) org.json.JSONObject.put(java.lang.String, int) org.json.JSONObject.put(java.lang.String, int) <unknown>.set(<unknown>, <unknown>) com.inovex.zabbixmobile.api.ZabbixService.authenticate() android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null) android.util.Log.d(java.lang.String, java.lang.String) java.lang.String.equals(java.lang.String) org.apache.http.HttpResponse.getEntity() org.json.JSONObject.JSONObject() com.inovex.zabbixmobile.api.ZabbixService.importItems(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader, int, boolean) com.inovex.zabbixmobile.api.ZabbixService._startTransaction() com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, null, int) java.io.BufferedReader.read() org.json.JSONObject.put(java.lang.String, long) <unknown>.set(<unknown>, <unknown>) android.database.Cursor.getLong(<unknown>) java.lang.IllegalStateException.IllegalStateException(java.lang.String) org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.getCurrentName() android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null) android.util.Log.d(java.lang.String, java.lang.String) <unknown>.set(<unknown>, <unknown>) java.lang.String.equals(<unknown>) org.json.JSONObject.put(java.lang.String, java.lang.String) android.database.Cursor.moveToFirst() com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, java.lang.String) android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null) java.lang.String.equals(java.lang.String) com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, java.lang.String) <unknown>.getText() org.json.JSONObject.put(java.lang.String, java.lang.String) android.content.Intent.putExtra(java.lang.String, <unknown>) <unknown>.getCurrentName() android.content.res.Resources.getString(<unknown>) android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null) android.database.sqlite.SQLiteDatabase.setTransactionSuccessful() <unknown>.next() <unknown>.getText() <unknown>.nextValueToken() com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject) com.inovex.zabbixmobile.api.ZabbixService.showProgress(<unknown>) java.io.IOException.IOException(java.lang.String) <unknown>.getCurrentName() android.util.Log.d(java.lang.String, java.lang.String) java.lang.Object.toString() org.json.JSONObject.toString() <unknown>.set(<unknown>, <unknown>) org.json.JSONArray.JSONArray() org.apache.http.HttpResponse.getStatusLine() org.json.JSONArray.JSONArray() org.json.JSONObject.put(java.lang.String, java.lang.String) org.apache.http.impl.client.DefaultHttpClient.DefaultHttpClient() org.json.JSONObject.put(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject) org.apache.http.HttpResponse.getStatusLine() java.lang.String.equals(<unknown>) java.util.Date.Date() android.util.Log.i(java.lang.String, java.lang.String) android.content.Context.getResources() org.apache.http.impl.client.CloseableHttpClient.execute(org.apache.http.client.methods.HttpPost) com.inovex.zabbixmobile.api.ZabbixService._commitTransactionIfRecommended() com.inovex.zabbixmobile.api.ZabbixService.importHostGroups(<unknown>) android.content.Context.sendBroadcast(android.content.Intent) android.content.Context.sendBroadcast(android.content.Intent) com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, null, int) java.lang.Integer.parseInt(<unknown>) <unknown>.ApplicationData() com.inovex.zabbixmobile.api.ZabbixService.NoAPIAccessException.NoAPIAccessException() com.inovex.zabbixmobile.api.ZabbixService._commitTransactionIfRecommended() <unknown>.getJsonArray() org.apache.http.message.AbstractHttpMessage.addHeader(java.lang.String, java.lang.String) org.json.JSONObject.put(java.lang.String, int) java.lang.String.replace(java.lang.String, java.lang.String) org.json.JSONArray.JSONArray() <unknown>.set(<unknown>, <unknown>) org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.set(<unknown>, <unknown>) org.json.JSONArray.JSONArray() java.lang.String.equals(<unknown>) com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, java.lang.String, int) <unknown>.nextProperty() <unknown>.set(<unknown>, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject) org.json.JSONObject.JSONObject() java.lang.String.contains(java.lang.String) org.apache.http.client.methods.HttpEntityEnclosingRequestBase.setEntity(org.apache.http.entity.StringEntity) com.inovex.zabbixmobile.api.ZabbixService.importTriggers(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader) org.json.JSONObject.put(java.lang.String, int) <unknown>.HostGroupData() <unknown>.JsonArrayOrObjectReader(org.codehaus.jackson.JsonParser) <unknown>.HostGroupData() <unknown>.nextProperty() java.lang.Long.parseLong(<unknown>) org.json.JSONObject.put(java.lang.String, java.lang.String) org.json.JSONObject.put(java.lang.String, org.json.JSONArray) org.json.JSONObject.put(java.lang.String, java.lang.Integer) <unknown>.set(<unknown>, <unknown>) <unknown>.close() org.json.JSONObject.put(java.lang.String, org.json.JSONArray) <unknown>.set(<unknown>, <unknown>) java.lang.String.equals(java.lang.String) android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null) <unknown>.next() org.json.JSONObject.toString() java.lang.String.equals(<unknown>) java.lang.String.equals(<unknown>) android.database.sqlite.SQLiteDatabase.query(<unknown>, null, <unknown>, null, null, null, null) <unknown>.set(<unknown>, <unknown>) org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.CacheData() <unknown>.getText() com.inovex.zabbixmobile.api.ZabbixService._startTransaction() <unknown>.set(<unknown>, <unknown>) com.inovex.zabbixmobile.api.ZabbixService._endTransaction() <unknown>.set(<unknown>, int) <unknown>.getJsonArray() java.lang.String.equals(<unknown>) java.util.Date.getTime() java.lang.String.equals(java.lang.String) org.json.JSONObject.put(java.lang.String, int) <unknown>.set(<unknown>, <unknown>) java.lang.Integer.parseInt(<unknown>) org.codehaus.jackson.JsonParser.getCurrentName() <unknown>.nextProperty() com.inovex.zabbixmobile.api.ZabbixService._endTransaction() java.lang.String.equals(<unknown>) org.json.JSONObject.put(java.lang.String, int) android.database.sqlite.SQLiteDatabase.update(<unknown>, android.content.ContentValues, <unknown>, null) com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject) com.inovex.zabbixmobile.api.ZabbixService._endTransaction() java.lang.StringBuilder.append(char) <unknown>.set(<unknown>, <unknown>) <unknown>.get(<unknown>) <unknown>.set(<unknown>, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject) org.json.JSONObject.put(java.lang.String, java.lang.String) android.database.Cursor.getLong(<unknown>) java.lang.String.equals(<unknown>) org.json.JSONObject.put(java.lang.String, java.lang.String) org.json.JSONObject.JSONObject() org.apache.http.params.HttpProtocolParams.setVersion(org.apache.http.params.HttpParams, org.apache.http.HttpVersion) org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.HistoryDetailData() android.util.Log.d(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService._startTransaction() <unknown>.next() <unknown>.set(<unknown>, <unknown>) <unknown>.nextValueToken() org.json.JSONObject.JSONObject() java.lang.String.equals(<unknown>) java.lang.Long.parseLong(<unknown>) java.lang.Integer.parseInt(<unknown>) org.apache.http.client.methods.HttpPost.HttpPost(java.lang.String) org.apache.http.StatusLine.getStatusCode() <unknown>.set(<unknown>, int) java.lang.String.equals(java.lang.String) java.lang.String.equals(<unknown>) java.lang.String.equals(<unknown>) <unknown>.getCurrentName() java.util.ArrayList<java.lang.String>.ArrayList, String() com.inovex.zabbixmobile.api.ZabbixService._startTransaction() com.inovex.zabbixmobile.api.ZabbixService.importTriggers(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader) org.json.JSONArray.put(java.lang.String) <unknown>.nextValueToken() org.json.JSONArray.put(java.lang.String) <unknown>.set(<unknown>, <unknown>) org.json.JSONObject.put(java.lang.String, int) com.inovex.zabbixmobile.api.ZabbixService.importItems(<unknown>, int, boolean) org.json.JSONObject.JSONObject() com.inovex.zabbixmobile.api.ZabbixService.importTriggers(<unknown>) com.inovex.zabbixmobile.api.ZabbixService.importGraphItems(<unknown>) <unknown>.ScreenItemData() <unknown>.set(<unknown>, <unknown>) <unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>) android.preference.PreferenceManager.getDefaultSharedPreferences(android.content.Context) org.json.JSONObject.length() <unknown>.nextValueToken() java.util.HashSet<java.lang.Long>.HashSet, Long() java.lang.String.equals(java.lang.String) android.content.SharedPreferences.getBoolean(java.lang.String, boolean) <unknown>.insert(android.database.sqlite.SQLiteDatabase) org.json.JSONObject.put(java.lang.String, org.json.JSONArray) <unknown>.close() com.inovex.zabbixmobile.api.ZabbixService.importHosts(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader, int) org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.next() android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null) org.json.JSONObject.put(java.lang.String, java.lang.String) org.json.JSONObject.getString(java.lang.String) <unknown>.set(<unknown>, <unknown>) org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.close() org.json.JSONObject.getString(java.lang.String) java.lang.String.equals(java.lang.String) java.lang.Long.parseLong(<unknown>) org.codehaus.jackson.JsonParser.isClosed() org.json.JSONObject.put(java.lang.String, int) org.json.JSONObject.put(java.lang.String, org.json.JSONArray) org.json.JSONObject.put(java.lang.String, long) <unknown>.close() org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.set(<unknown>, long) org.json.JSONObject.put(java.lang.String, org.json.JSONObject) <unknown>.set(<unknown>, <unknown>) com.inovex.zabbixmobile.api.ZabbixService._endTransaction() java.lang.String.replaceAll(java.lang.String, java.lang.String) org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.nextValueToken() org.json.JSONObject.put(java.lang.String, java.lang.String) org.json.JSONObject.put(java.lang.String, java.lang.String) org.apache.http.params.BasicHttpParams.BasicHttpParams() android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null) android.database.sqlite.SQLiteDatabase.beginTransaction() com.inovex.zabbixmobile.api.ZabbixService._commitTransactionIfRecommended() com.inovex.zabbixmobile.api.ZabbixService._endTransaction() java.lang.String.equals(<unknown>) <unknown>.insert(android.database.sqlite.SQLiteDatabase) <unknown>.insert(android.database.sqlite.SQLiteDatabase) org.json.JSONObject.put(java.lang.String, int) <unknown>.next() com.inovex.zabbixmobile.api.ZabbixService._startTransaction() <unknown>.getJsonArray() android.content.SharedPreferences.getString(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, null, int) javax.net.SocketFactory.createSocket() java.lang.Long.parseLong(<unknown>) org.apache.http.client.CredentialsProvider.setCredentials(org.apache.http.auth.AuthScope, org.apache.http.auth.UsernamePasswordCredentials) org.json.JSONObject.put(java.lang.String, java.lang.String) org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.next() com.inovex.zabbixmobile.api.ZabbixService.HttpAuthorizationRequiredException.HttpAuthorizationRequiredException() android.database.sqlite.SQLiteQueryBuilder.query(android.database.sqlite.SQLiteDatabase, null, null, null, null, null, null) java.util.Date.Date() com.inovex.zabbixmobile.api.ZabbixService._commitTransactionIfRecommended() <unknown>.set(<unknown>, java.lang.String) org.json.JSONObject.JSONObject() <unknown>.next() <unknown>.set(<unknown>, <unknown>) <unknown>.set(<unknown>, <unknown>) com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject) java.lang.String.equals(java.lang.String) com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, java.lang.String) java.lang.String.indexOf(char) android.database.sqlite.SQLiteDatabase.query(<unknown>, null, <unknown>, null, null, null, null) android.preference.PreferenceManager.getDefaultSharedPreferences(android.content.Context) <unknown>.nextProperty() org.apache.http.impl.client.CloseableHttpClient.execute(org.apache.http.client.methods.HttpPost) <unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>) com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, java.lang.String) org.json.JSONObject.JSONObject() <unknown>.close() android.database.Cursor.getColumnIndex(<unknown>) android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null) org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.nextProperty() org.apache.http.conn.scheme.PlainSocketFactory.getSocketFactory() com.inovex.zabbixmobile.api.ZabbixService._commitTransactionIfRecommended() com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject) java.lang.StringBuilder.toString() org.json.JSONObject.put(java.lang.String, java.lang.String) android.database.sqlite.SQLiteQueryBuilder.SQLiteQueryBuilder() <unknown>.insert(android.database.sqlite.SQLiteDatabase) org.apache.http.conn.scheme.SchemeRegistry.register(org.apache.http.conn.scheme.Scheme) <unknown>.set(<unknown>, <unknown>) org.json.JSONObject.JSONObject(java.lang.String) java.lang.String.equals(<unknown>) <unknown>.set(<unknown>, <unknown>) <unknown>.set(<unknown>, <unknown>) java.lang.IllegalStateException.IllegalStateException(java.lang.String) java.lang.Double.parseDouble(<unknown>) android.content.ContentValues.put(<unknown>, java.lang.Long) android.database.sqlite.SQLiteQueryBuilder.appendWhere(<unknown>) org.apache.http.conn.scheme.SchemeRegistry.register(org.apache.http.conn.scheme.Scheme) org.json.JSONObject.getInt(java.lang.String) com.inovex.zabbixmobile.api.ZabbixService.importHosts(<unknown>, null) org.json.JSONObject.put(java.lang.String, boolean) java.lang.Long.parseLong(<unknown>) java.lang.String.indexOf(char) android.database.sqlite.SQLiteQueryBuilder.appendWhere(<unknown>) java.lang.String.length() java.lang.String.equals(<unknown>) com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject) <unknown>.nextProperty() <unknown>.next() android.content.SharedPreferences.getString(java.lang.String, java.lang.String) <unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>) com.inovex.zabbixmobile.api.ZabbixService.importTriggers(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader) <unknown>.GraphData() org.json.JSONArray.put(java.lang.String) org.apache.http.impl.client.AbstractHttpClient.getParams() <unknown>.set(<unknown>, long) <unknown>.set(<unknown>, <unknown>) org.json.JSONObject.getJSONObject(java.lang.String) org.json.JSONObject.put(java.lang.String, java.lang.String) java.lang.String.equals(java.lang.String) org.json.JSONObject.getString(java.lang.String) java.lang.String.equals(<unknown>) java.lang.String.equals(<unknown>) <unknown>.getCurrentName() java.lang.String.equals(<unknown>) com.inovex.zabbixmobile.api.ZabbixService.showProgress(int) <unknown>.getCurrentName() com.inovex.zabbixmobile.api.ZabbixService.importHosts(<unknown>, null) com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, java.lang.String, int) org.json.JSONObject.put(java.lang.String, int) org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.close() java.lang.String.replace(java.lang.String, java.lang.String) java.lang.String.equals(<unknown>) com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject) com.inovex.zabbixmobile.api.ZabbixService._endTransaction() android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null) android.database.Cursor.moveToNext() <unknown>.HostData() <unknown>.set(<unknown>, long) <unknown>.next() com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject) android.database.sqlite.SQLiteQueryBuilder.setTables(<unknown>) java.util.Date.getTime() org.json.JSONObject.put(java.lang.String, long) android.content.ContentValues.ContentValues(int) java.lang.Long.parseLong(<unknown>) org.apache.http.HttpResponse.getEntity() org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.getText() java.lang.String.equals(java.lang.String) <unknown>.set(<unknown>, <unknown>) <unknown>.set(<unknown>, <unknown>) javax.net.ssl.SSLContext.init(null, javax.net.ssl.TrustManager[], null) android.database.sqlite.SQLiteDatabase.endTransaction() java.lang.String.equals(<unknown>) com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, java.lang.String) android.util.Log.d(java.lang.String, java.lang.String) <unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>) <unknown>.next() <unknown>.close() <unknown>.insert(android.database.sqlite.SQLiteDatabase) org.json.JSONObject.put(java.lang.String, java.lang.String) java.lang.Throwable.getMessage() java.lang.String.equals(<unknown>) java.lang.String.equals(<unknown>) <unknown>.set(<unknown>, <unknown>) com.inovex.zabbixmobile.api.ZabbixService._endTransaction() javax.net.ssl.SSLContext.getSocketFactory() org.json.JSONObject.JSONObject() android.content.Context.getResources() org.json.JSONObject.put(java.lang.String, int) com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, null) com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, java.lang.String, int) java.lang.String.matches(java.lang.String) <unknown>.set(<unknown>, <unknown>) org.json.JSONArray.put(java.lang.String) <unknown>.set(<unknown>, <unknown>) android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null) android.content.Context.sendBroadcast(android.content.Intent) org.json.JSONObject.getJSONObject(java.lang.String) <unknown>.get(<unknown>) android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null) java.lang.String.equals(<unknown>) android.content.SharedPreferences.getBoolean(java.lang.String, boolean) java.lang.Throwable.printStackTrace() android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null) org.json.JSONObject.put(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService._startTransaction() android.content.Intent.putExtra(java.lang.String, int) org.json.JSONObject.JSONObject() <unknown>.getText() com.inovex.zabbixmobile.api.ZabbixService._endTransaction() org.apache.http.client.methods.HttpPost.HttpPost(java.lang.String) android.content.SharedPreferences.getString(java.lang.String, java.lang.String) <unknown>.GraphItemData() com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, java.lang.String, int) <unknown>.nextValueToken() org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager.ThreadSafeClientConnManager(org.apache.http.params.HttpParams, org.apache.http.conn.scheme.SchemeRegistry) <unknown>.ApplicationItemRelationData() java.lang.Object.toString() android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null) org.json.JSONArray.JSONArray() java.lang.String.equals(<unknown>) com.inovex.zabbixmobile.api.ZabbixService._startTransaction() org.json.JSONObject.put(java.lang.String, org.json.JSONArray) com.inovex.zabbixmobile.api.ZabbixService.importApplications(int, int, <unknown>) <unknown>.set(<unknown>, int) org.json.JSONObject.put(java.lang.String, int) com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, java.lang.String, int) org.json.JSONObject.put(java.lang.String, java.lang.String) org.json.JSONObject.JSONObject() java.lang.Math.min(int, int) com.inovex.zabbixmobile.api.ZabbixService.showProgress(<unknown>) java.lang.String.equals(java.lang.String) android.content.Intent.Intent(<unknown>) java.lang.String.equals(<unknown>) org.json.JSONObject.put(java.lang.String, int) javax.net.ssl.SSLContext.getInstance(java.lang.String) android.content.res.Resources.getString(<unknown>) org.json.JSONObject.JSONObject() android.content.Intent.Intent(<unknown>) java.lang.String.equals(<unknown>) <unknown>.nextProperty() javax.net.ssl.SSLSocketFactory.createSocket(java.net.Socket, java.lang.String, int, boolean) org.json.JSONObject.put(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject) <unknown>.get(<unknown>) java.io.IOException.IOException(java.lang.String) java.lang.String.trim() java.lang.String.contains(java.lang.String) org.apache.http.entity.StringEntity.StringEntity(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService._endTransaction() .X509TrustManager() com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject) android.graphics.Color.parseColor(<unknown>) com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, null) org.json.JSONObject.getJSONArray(java.lang.String) org.apache.http.client.params.HttpClientParams.setRedirecting(org.apache.http.params.HttpParams, boolean) com.inovex.zabbixmobile.api.ZabbixService._startTransaction() <unknown>.getCurrentName() java.lang.String.equals(<unknown>) java.lang.Long.parseLong(<unknown>) android.util.Log.d(java.lang.String, java.lang.String) org.codehaus.jackson.JsonParser.getCurrentToken() org.codehaus.jackson.JsonParser.nextValue() java.lang.Long.parseLong(<unknown>) <unknown>.getText() java.util.Date.getTime() android.content.Intent.putExtra(java.lang.String, <unknown>) android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null) <unknown>.get(<unknown>) android.database.Cursor.moveToFirst() org.apache.http.client.methods.HttpEntityEnclosingRequestBase.setEntity(org.apache.http.entity.StringEntity) com.inovex.zabbixmobile.api.ZabbixService._commitTransactionIfRecommended() com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, null) android.database.sqlite.SQLiteQueryBuilder.appendWhere(<unknown>) org.apache.http.auth.UsernamePasswordCredentials.UsernamePasswordCredentials(java.lang.String, java.lang.String) java.util.Date.getTime() java.lang.String.equals(<unknown>) com.inovex.zabbixmobile.api.ZabbixService._endTransaction() org.json.JSONObject.put(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService.authenticate() java.lang.String.equals(<unknown>) org.json.JSONObject.put(java.lang.String, java.lang.String) org.json.JSONObject.put(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService.NoAPIAccessException.NoAPIAccessException() org.json.JSONArray.put(long) com.inovex.zabbixmobile.api.ZabbixService._endTransaction() android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null) <unknown>.getJsonArray() <unknown>.ScreenData() java.util.Date.Date() java.util.Date.Date() <unknown>.set(<unknown>, long) <unknown>.getCurrentName() org.json.JSONObject.put(java.lang.String, org.json.JSONArray) <unknown>.set(<unknown>, long) org.json.JSONObject.put(java.lang.String, java.lang.String) org.apache.http.params.HttpConnectionParams.setConnectionTimeout(org.apache.http.params.HttpParams, int) org.json.JSONArray.length() <unknown>.set(<unknown>, java.lang.String) <unknown>.set(<unknown>, long) java.util.Date.getTime() <unknown>.set(<unknown>, <unknown>) <unknown>.set(<unknown>, <unknown>) org.json.JSONArray.put(java.lang.String) java.lang.String.equals(<unknown>) com.inovex.zabbixmobile.api.ZabbixService.importScreenItems(<unknown>) com.inovex.zabbixmobile.api.ZabbixService.HttpAuthorizationRequiredException.HttpAuthorizationRequiredException() <unknown>.getText() org.json.JSONObject.put(java.lang.String, org.json.JSONArray) com.inovex.zabbixmobile.api.ZabbixService.importEvents(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader, null) org.json.JSONObject.JSONObject() <unknown>.set(<unknown>, <unknown>) com.inovex.zabbixmobile.api.ZabbixService.importHostGroups(<unknown>) org.json.JSONObject.toString() java.lang.Integer.parseInt(<unknown>) java.lang.String.equals(java.lang.String) org.apache.http.params.HttpProtocolParams.setContentCharset(org.apache.http.params.HttpParams, java.lang.String) <unknown>.get(<unknown>) android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null) java.lang.String.equals(<unknown>) <unknown>.set(<unknown>, <unknown>) <unknown>.nextValueToken() <unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>) org.json.JSONObject.put(java.lang.String, org.json.JSONArray) org.json.JSONObject.put(java.lang.String, java.lang.Integer) <unknown>.getText() <unknown>.set(<unknown>, <unknown>) org.apache.http.message.AbstractHttpMessage.addHeader(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject) org.json.JSONObject.getJSONArray(java.lang.String) java.security.KeyStore.load(null, null) java.lang.String.replace(java.lang.String, java.lang.String) java.lang.Long.parseLong(<unknown>) org.json.JSONObject.toString() com.inovex.zabbixmobile.api.ZabbixService.importTriggers(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader) android.util.Log.d(java.lang.String, java.lang.String) android.content.SharedPreferences.getString(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, java.lang.String) <unknown>.TriggerData() android.content.SharedPreferences.getString(java.lang.String, java.lang.String) android.content.Intent.Intent(<unknown>) org.json.JSONObject.put(java.lang.String, java.lang.String) org.apache.http.impl.client.AbstractHttpClient.getCredentialsProvider() <unknown>.set(<unknown>, <unknown>) java.io.IOException.IOException(java.lang.String) java.lang.String.trim() org.json.JSONObject.put(java.lang.String, org.json.JSONArray) java.lang.String.split(java.lang.String) java.lang.String.equals(java.lang.String) java.lang.String.endsWith(java.lang.String) <unknown>.set(<unknown>, int) com.inovex.zabbixmobile.api.ZabbixService.showProgress(int) <unknown>.ItemData() org.json.JSONObject.put(java.lang.String, int) <unknown>.set(<unknown>, <unknown>) org.codehaus.jackson.JsonParser.getText() android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null) org.apache.http.impl.client.DefaultHttpClient.DefaultHttpClient(org.apache.http.conn.ClientConnectionManager, org.apache.http.params.HttpParams) <unknown>.close() java.lang.IllegalStateException.IllegalStateException(java.lang.String) org.json.JSONObject.put(java.lang.String, java.lang.String) org.codehaus.jackson.JsonParser.nextToken() android.database.Cursor.getColumnIndex(<unknown>) org.json.JSONObject.put(java.lang.String, org.json.JSONArray) <unknown>.nextValueToken() com.inovex.zabbixmobile.api.ZabbixService._startTransaction() org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.set(<unknown>, java.lang.String) java.lang.String.substring(int, int) java.lang.Long.parseLong(<unknown>) org.json.JSONObject.put(java.lang.String, java.lang.String) org.json.JSONObject.getInt(java.lang.String) java.lang.String.equals(java.lang.String) <unknown>.set(<unknown>, <unknown>) <unknown>.set(<unknown>, <unknown>) java.security.KeyStore.getInstance(java.lang.String) java.lang.Integer.parseInt(<unknown>) java.lang.String.equals(java.lang.String) <unknown>.nextProperty() android.content.Intent.putExtra(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, null) <unknown>.set(<unknown>, int) java.io.BufferedReader.BufferedReader(java.io.InputStreamReader) com.inovex.zabbixmobile.api.ZabbixService.importEvents(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader, int) java.security.KeyStore.getDefaultType() java.lang.String.equals(<unknown>) <unknown>.getText() org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.set(<unknown>, java.lang.Object) org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.insert(android.database.sqlite.SQLiteDatabase) <unknown>.nextProperty() com.inovex.zabbixmobile.api.ZabbixService._startTransaction() org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.close() <unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>) org.json.JSONObject.put(java.lang.String, long) com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, null, int) <unknown>.getJsonArray() <unknown>.set(<unknown>, <unknown>) java.lang.String.equals(<unknown>) org.apache.http.conn.scheme.Scheme.Scheme(java.lang.String, org.apache.http.conn.scheme.PlainSocketFactory, int) org.json.JSONObject.put(java.lang.String, java.lang.String) java.lang.String.equals(<unknown>)"],
      "c_callsites_added_t": ["android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null)"],
      "c_methods_t": ["ApplicationData ApplicationItemRelationData ArrayList, String BasicHttpParams BufferedReader CacheData ContentValues CustomSSLSocketFactory Date DefaultHttpClient EventData GraphData GraphItemData HashSet, Long HistoryDetailData HostData HostGroupData HttpAuthorizationRequiredException HttpPost IOException IllegalStateException InputStreamReader Intent ItemData JSONArray JSONObject JsonArrayOrObjectReader JsonFactory NoAPIAccessException PreconditionFailedException RuntimeException SQLiteQueryBuilder Scheme SchemeRegistry ScreenData ScreenItemData StringBuilder StringEntity ThreadSafeClientConnManager TriggerData UsernamePasswordCredentials X509TrustManager _commitTransactionIfRecommended _endTransaction _queryBuffer _queryStream _startTransaction add addHeader append appendWhere authenticate beginTransaction close contains createJsonParser createSocket d delete endTransaction endsWith equals execute get getBoolean getColumnIndex getContent getCredentialsProvider getCurrentName getCurrentToken getDefaultSharedPreferences getDefaultType getEntity getInstance getInt getJSONArray getJSONObject getJsonArray getLong getMessage getParams getReasonPhrase getResources getSocketFactory getStatusCode getStatusLine getString getText getTime i importApplications importEvents importGraphItems importHostGroups importHosts importItems importScreenItems importTriggers inTransaction indexOf init insert isCached isClosed length load matches min moveToFirst moveToNext next nextProperty nextToken nextValue nextValueToken parseColor parseDouble parseInt parseLong printStackTrace put putExtra query read register replace replaceAll sendBroadcast set setCached setConnectionTimeout setContentCharset setCredentials setEntity setHostnameVerifier setRedirecting setTables setTransactionSuccessful setVersion showProgress split substring toString trim update"],
      "id": "inovex/zax\u0000src/com/inovex/zabbixmobile/api/ZabbixService.java\u0000df53c588a80d246f2f77494f72b9fc4b285728ad\u0000bae0223e3d008ee05a94f9b7db30eec6844110b6",
      "p_comments_t": ["\t\t\t// create ApplicationItemRelation /** \n * public, for the unit test\n */\n /** \n * import the hosts from stream\n * @param jsonArray stream\n * @param numHosts count of hosts for progressbar. null if unknown.\n * @return Object[] {(String) comma-separated all Hostnames, (Long) 1. host id}\n * @throws JsonParseException\n * @throws IOException\n */\n \t\t\t// result array found /** \n * import graph items\n * @param graphItems\n * @return true, if graphid column has to be updated from -1 to the correct graphid later.\n * @throws JsonParseException\n * @throws NumberFormatException\n * @throws IOException\n */\n \t\t\t\t\t\t// save only every 20th \t\t\t// wrong password. token remains null \t\t\t// the past 2 hours \t\t\t\t\t// data are unuseable, e.g. because it's a string /** \n * @param events stream\n * @param numEvents if null, no progressbar-update AND only isert, if it does not exist. If !null, progressbar-update AND always insert without checking\n * @throws JsonParseException\n * @throws IOException\n */\n \t\t\t\t\t// Precondition failed / Looks like Zabbix 1.8.2 \t\t\t// get API version \t\t\t// if #0 \"other\" does not exist yet, it has to be created \t\t\t\t\t// later the IDs will be replaced with the correct /** \n * zabbix api call. data will be parsed as json object on-the-fly. Caution: use this only for api calls with a small return data.\n * @param method\n * @param params\n * @return\n * @throws ClientProtocolException\n * @throws IOException\n * @throws JSONException\n * @throws HttpAuthorizationRequiredException\n * @throws NoAPIAccessException\n */\n /** \n * begin sql transaction\n */\n \t\t\t\t\t\t// first do a new auth and then try the same api call again \t\t\t\t// no itemid \t\t\t// count of items /** \n * init\n * @param context android context\n * @param zabbixLocalDB sqlite\n */\n \t\t\t// create applications that does not exist \t\t\t\t// so we use a fiction \t\t\t// only resouretype == 0 /** \n * probably too old zabbix <= 1.8.2\n */\n /** \n * zabbix auth. user and pwd from app preferences\n * @return true success\n * @throws ClientProtocolException\n * @throws IOException\n * @throws JSONException\n * @throws HttpAuthorizationRequiredException\n * @throws NoAPIAccessException\n */\n /** \n * close the last http stream\n */\n \t\t\t// Workaround: historydetails only comes if you use the correct \"history\"-parameter. /** \n * transforms the progress\n * @param start 0% => start%\n * @param end 100% => end%\n */\n \t\t\t\t// in Zabbix version <2.0, this is not default \t\t\t\t// file not found \t\t\t\t\t// hex string => color int \t\tHttpClientParams.setRedirecting(params, true); // redirecting \t\t\t// if applicable replace placeholder \t\t\t// if graphid-column was not set, this must be done later. temporary graphid=-1 \t\t// for GUI unit test, just return true /** \n * imports the \"warning\"-triggers\n * @throws JSONException\n * @throws IOException\n * @throws HttpAuthorizationRequiredException\n * @throws NoAPIAccessException\n */\n \t\t\t// event is parsed and can be inserted into the db \t\tpublic static final int EVENT_GET_TIME_FROM_SHIFT = 7*24*60*60; // -7 days \t\t// http request \t\t\t\t\t// store hosts namen \t\t\t\t// http auth failed \t\t\t\t\t// at this point itemid and hostid is unknown \t\t\t\t\t// import triggers \t\t\t// we try them all, until we get results. /** \n * importiert ein trigger mit dem attribute itemid. ggf. wird der trigger zuerst gelöscht und neu angelegt. imports a trigger with the attribute itemid. if trigger already exists, it will be removed first.\n * @param triggerid\n * @throws JSONException\n * @throws IOException\n * @throws HttpAuthorizationRequiredException\n * @throws NoAPIAccessException\n */\n \t\t\t\t\t// import hosts \t\t\t// for unit test \t\t\t\t// ignore \t\t\tlong time_from = time_till - ZabbixConfig.HISTORY_GET_TIME_FROM_SHIFT; // jetzt-2h \t\t\t// or a json object /** \n * zabbix error: no api access\n */\n /** \n * counts the sql inserts/updates and do a transaction commit to save the memory\n */\n \t\t\t// send intent to GUI \t\t\t\t\t// before zabbix 2.x the name field was \"description\" \t\t\t\t\t// if we get an empty array, we try another history parameter \t\t\t\t\t// store the first item id \t\t// check if the trigger exists and if the itemid was set /** \n * global constants\n */\n \t\t\t\t// create \"other\" hostgroup #1 \t\t\t// if there's no application, the ID #0 must be added (for other) \t\t\t\t\t// because of this, all applicationrelations will be saved with itemid and hostid \"-1\". \t\tpublic static final int HISTORY_GET_TIME_FROM_SHIFT = 8*60*60; // -8h \t\t\t\t\t\t.put(\"history\", historytype) // for integer ? /** \n * interface to connect to the zabbix server\n */\n /** \n * acknowledge zabbix event. Sets ack-flag with comment. Caution: This is supported only for Zabbix version >= 1.8.4\n * @param eventid\n * @param comment\n * @return true, success.\n * @throws ClientProtocolException\n * @throws IOException\n * @throws JSONException\n * @throws HttpAuthorizationRequiredException\n * @throws NoAPIAccessException\n */\n \t\t\t// store the last stream to close it if an exception will be thrown /** \n * zabbix api call as stream.\n * @param method\n * @param params\n * @return stream im json array wrapper\n * @throws JSONException\n * @throws IOException\n * @throws HttpAuthorizationRequiredException\n * @throws NoAPIAccessException\n */\n \t\t// if applicable http auth \t\t\t// correct historytype found and there are data \t\t\t\t// count of the entries cannot be detected (zabbix bug), /** \n * import items from stream.\n * @param items stream\n * @param numItems count for progressbar, if 0 no progressbarupdate\n * @param checkBeforeInsert if true, only make an insert if item does not exist\n * @return the first item id\n * @throws JsonParseException\n * @throws IOException\n */\n \t\t\t// collect all graphids /** \n * http auth is needed\n */\n \t\t\t// ignore for unit test /** \n * commit sql transaction\n */\n \t\t\t// delete old graphs \t\t\t// host without group will get group #0 (other) \t\t\t// there's no result \t\t// if applicable, transform the progress \t\t\t// SSL not trusted \t\t\t// internet problem \t\t\tif (jp.nextToken() != JsonToken.START_ARRAY && jp.getCurrentToken() != JsonToken.START_OBJECT) { // go inside the array \t\tpublic static final int CACHE_LIFETIME_APPLICATIONS = 2*24*60*60; // 2 days \t\t\t\t\t// since zabbix 2.x is the name of the item \"name\" \t\t\t// now the \"-1\" IDs of applicationsrelation will be replaced with the correct itemID \t\t\t// get count of hosts /** \n * import the newest events\n * @throws ClientProtocolException\n * @throws IOException\n * @throws JSONException\n * @throws HttpAuthorizationRequiredException\n * @throws NoAPIAccessException\n */\n /** \n * updates the progressbar in the gui\n * @param i 0..100\n */\n \t\t\t\t\t\t// ignore \t\t\t\t\t// first do a new auth and then try the same api call again /** \n * import the newest event of a trigger\n * @param triggerid\n * @throws JSONException\n * @throws IOException\n * @throws HttpAuthorizationRequiredException\n * @throws NoAPIAccessException\n */\n \t\t// it can be an (empty) array \t\t\t// this parameter can be \"null\" or a number 0-4. Because we don't know when to use which,"],
      "p_email_sni": "jonas.gehring@inovex.de",
      "c_callsites_removed_t": ["<empty>"],
      "c_callsites_cs": "<unknown>.set(<unknown>, <unknown>)#org.apache.http.HttpEntity.getContent()#java.lang.String.equals(java.lang.String)#org.json.JSONArray.JSONArray()#<unknown>.set(<unknown>, java.lang.Object)#org.json.JSONObject.put(java.lang.String, java.lang.Integer)#org.json.JSONArray.put(java.lang.String)#org.json.JSONObject.JSONObject()#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.codehaus.jackson.JsonFactory.createJsonParser(java.io.InputStream)#java.lang.String.equals(<unknown>)#org.apache.http.StatusLine.getStatusCode()#<unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>)#org.json.JSONObject.put(java.lang.String, java.lang.String)#android.database.sqlite.SQLiteDatabase.inTransaction()#android.util.Log.d(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService._startTransaction()#java.lang.String.equals(java.lang.String)#org.codehaus.jackson.JsonFactory.JsonFactory()#com.inovex.zabbixmobile.api.ZabbixService._endTransaction()#org.json.JSONObject.put(java.lang.String, int)#android.content.ContentValues.ContentValues(int)#org.apache.http.conn.scheme.SchemeRegistry.SchemeRegistry()#<unknown>.insert(android.database.sqlite.SQLiteDatabase)#<unknown>.insert(android.database.sqlite.SQLiteDatabase)#com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject)#com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject)#com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject)#org.json.JSONObject.getJSONObject(java.lang.String)#java.io.InputStreamReader.InputStreamReader(java.io.InputStream)#android.content.Intent.putExtra(java.lang.String, <unknown>)#org.json.JSONArray.length()#java.lang.String.equals(java.lang.String)#<unknown>.set(<unknown>, <unknown>)#java.lang.String.equals(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService.PreconditionFailedException.PreconditionFailedException()#java.lang.StringBuilder.StringBuilder()#android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null)#<unknown>.nextValueToken()#org.json.JSONObject.JSONObject()#org.json.JSONObject.put(java.lang.String, int)#org.json.JSONObject.put(java.lang.String, org.json.JSONArray)#java.lang.String.equals(<unknown>)#<unknown>.get(<unknown>)#<unknown>.insert(android.database.sqlite.SQLiteDatabase)#android.content.Intent.putExtra(java.lang.String, <unknown>)#java.lang.String.equals(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService.importItems(<unknown>, int, boolean)#com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, java.lang.String, int)#android.util.Log.d(java.lang.String, java.lang.String)#org.json.JSONObject.put(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject)#org.apache.http.conn.scheme.Scheme.Scheme(java.lang.String, org.apache.http.conn.ssl.SSLSocketFactory, int)#org.apache.http.HttpEntity.getContent()#org.codehaus.jackson.JsonParser.close()#java.lang.String.equals(<unknown>)#<unknown>.nextValueToken()#<unknown>.getCurrentName()#org.json.JSONArray.JSONArray(java.util.Set<java.lang.Long>)#<unknown>.nextValueToken()#android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null)#<unknown>.getJsonArray()#com.inovex.zabbixmobile.api.ZabbixService._startTransaction()#org.json.JSONArray.JSONArray()#<unknown>.nextProperty()#java.lang.String.equals(java.lang.String)#android.database.sqlite.SQLiteDatabase.update(<unknown>, android.content.ContentValues, <unknown>, null)#java.util.Set<java.lang.Long>.add(<unknown>)#<unknown>.get(<unknown>)#<unknown>.get(<unknown>)#android.content.ContentValues.put(<unknown>, java.lang.Long)#java.lang.String.equals(java.lang.String)#org.apache.http.StatusLine.getReasonPhrase()#java.lang.RuntimeException.RuntimeException(java.lang.String)#<unknown>.nextProperty()#java.lang.Throwable.printStackTrace()#java.lang.String.equals(<unknown>)#java.lang.Long.parseLong(<unknown>)#org.json.JSONObject.put(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject)#<unknown>.getCurrentName()#android.content.ContentValues.put(<unknown>, java.lang.Long)#org.apache.http.entity.StringEntity.StringEntity(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject)#java.lang.String.equals(<unknown>)#<unknown>.EventData()#<unknown>.next()#<unknown>.set(<unknown>, <unknown>)#com.inovex.zabbixmobile.api.ZabbixService.CustomSSLSocketFactory.CustomSSLSocketFactory(java.security.KeyStore)#com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject)#<unknown>.getCurrentName()#java.util.List<java.lang.String>.add(java.lang.String)#org.json.JSONObject.put(java.lang.String, int)#<unknown>.getText()#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.apache.http.conn.ssl.SSLSocketFactory.setHostnameVerifier(org.apache.http.conn.ssl.X509HostnameVerifier)#<unknown>.set(<unknown>, <unknown>)#<unknown>.getText()#org.json.JSONObject.put(java.lang.String, long)#java.util.Date.Date()#android.util.Log.i(java.lang.String, java.lang.String)#org.json.JSONObject.put(java.lang.String, int)#org.json.JSONObject.put(java.lang.String, int)#<unknown>.set(<unknown>, <unknown>)#com.inovex.zabbixmobile.api.ZabbixService.authenticate()#android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null)#android.util.Log.d(java.lang.String, java.lang.String)#java.lang.String.equals(java.lang.String)#org.apache.http.HttpResponse.getEntity()#org.json.JSONObject.JSONObject()#com.inovex.zabbixmobile.api.ZabbixService.importItems(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader, int, boolean)#com.inovex.zabbixmobile.api.ZabbixService._startTransaction()#com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, null, int)#java.io.BufferedReader.read()#org.json.JSONObject.put(java.lang.String, long)#<unknown>.set(<unknown>, <unknown>)#android.database.Cursor.getLong(<unknown>)#java.lang.IllegalStateException.IllegalStateException(java.lang.String)#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.getCurrentName()#android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null)#android.util.Log.d(java.lang.String, java.lang.String)#<unknown>.set(<unknown>, <unknown>)#java.lang.String.equals(<unknown>)#org.json.JSONObject.put(java.lang.String, java.lang.String)#android.database.Cursor.moveToFirst()#com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, java.lang.String)#android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null)#java.lang.String.equals(java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, java.lang.String)#<unknown>.getText()#org.json.JSONObject.put(java.lang.String, java.lang.String)#android.content.Intent.putExtra(java.lang.String, <unknown>)#<unknown>.getCurrentName()#android.content.res.Resources.getString(<unknown>)#android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null)#android.database.sqlite.SQLiteDatabase.setTransactionSuccessful()#<unknown>.next()#<unknown>.getText()#<unknown>.nextValueToken()#com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject)#com.inovex.zabbixmobile.api.ZabbixService.showProgress(<unknown>)#java.io.IOException.IOException(java.lang.String)#<unknown>.getCurrentName()#android.util.Log.d(java.lang.String, java.lang.String)#java.lang.Object.toString()#org.json.JSONObject.toString()#<unknown>.set(<unknown>, <unknown>)#org.json.JSONArray.JSONArray()#org.apache.http.HttpResponse.getStatusLine()#org.json.JSONArray.JSONArray()#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.apache.http.impl.client.DefaultHttpClient.DefaultHttpClient()#org.json.JSONObject.put(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject)#org.apache.http.HttpResponse.getStatusLine()#java.lang.String.equals(<unknown>)#java.util.Date.Date()#android.util.Log.i(java.lang.String, java.lang.String)#android.content.Context.getResources()#org.apache.http.impl.client.CloseableHttpClient.execute(org.apache.http.client.methods.HttpPost)#com.inovex.zabbixmobile.api.ZabbixService._commitTransactionIfRecommended()#com.inovex.zabbixmobile.api.ZabbixService.importHostGroups(<unknown>)#android.content.Context.sendBroadcast(android.content.Intent)#android.content.Context.sendBroadcast(android.content.Intent)#com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, null, int)#java.lang.Integer.parseInt(<unknown>)#<unknown>.ApplicationData()#com.inovex.zabbixmobile.api.ZabbixService.NoAPIAccessException.NoAPIAccessException()#com.inovex.zabbixmobile.api.ZabbixService._commitTransactionIfRecommended()#<unknown>.getJsonArray()#org.apache.http.message.AbstractHttpMessage.addHeader(java.lang.String, java.lang.String)#org.json.JSONObject.put(java.lang.String, int)#java.lang.String.replace(java.lang.String, java.lang.String)#org.json.JSONArray.JSONArray()#<unknown>.set(<unknown>, <unknown>)#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.set(<unknown>, <unknown>)#org.json.JSONArray.JSONArray()#java.lang.String.equals(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, java.lang.String, int)#<unknown>.nextProperty()#<unknown>.set(<unknown>, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject)#org.json.JSONObject.JSONObject()#java.lang.String.contains(java.lang.String)#org.apache.http.client.methods.HttpEntityEnclosingRequestBase.setEntity(org.apache.http.entity.StringEntity)#com.inovex.zabbixmobile.api.ZabbixService.importTriggers(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader)#org.json.JSONObject.put(java.lang.String, int)#<unknown>.HostGroupData()#<unknown>.JsonArrayOrObjectReader(org.codehaus.jackson.JsonParser)#<unknown>.HostGroupData()#<unknown>.nextProperty()#java.lang.Long.parseLong(<unknown>)#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.json.JSONObject.put(java.lang.String, org.json.JSONArray)#org.json.JSONObject.put(java.lang.String, java.lang.Integer)#<unknown>.set(<unknown>, <unknown>)#<unknown>.close()#org.json.JSONObject.put(java.lang.String, org.json.JSONArray)#<unknown>.set(<unknown>, <unknown>)#java.lang.String.equals(java.lang.String)#android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null)#<unknown>.next()#org.json.JSONObject.toString()#java.lang.String.equals(<unknown>)#java.lang.String.equals(<unknown>)#android.database.sqlite.SQLiteDatabase.query(<unknown>, null, <unknown>, null, null, null, null)#<unknown>.set(<unknown>, <unknown>)#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.CacheData()#<unknown>.getText()#com.inovex.zabbixmobile.api.ZabbixService._startTransaction()#<unknown>.set(<unknown>, <unknown>)#com.inovex.zabbixmobile.api.ZabbixService._endTransaction()#<unknown>.set(<unknown>, int)#<unknown>.getJsonArray()#java.lang.String.equals(<unknown>)#java.util.Date.getTime()#java.lang.String.equals(java.lang.String)#org.json.JSONObject.put(java.lang.String, int)#<unknown>.set(<unknown>, <unknown>)#java.lang.Integer.parseInt(<unknown>)#org.codehaus.jackson.JsonParser.getCurrentName()#<unknown>.nextProperty()#com.inovex.zabbixmobile.api.ZabbixService._endTransaction()#java.lang.String.equals(<unknown>)#org.json.JSONObject.put(java.lang.String, int)#android.database.sqlite.SQLiteDatabase.update(<unknown>, android.content.ContentValues, <unknown>, null)#com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject)#com.inovex.zabbixmobile.api.ZabbixService._endTransaction()#java.lang.StringBuilder.append(char)#<unknown>.set(<unknown>, <unknown>)#<unknown>.get(<unknown>)#<unknown>.set(<unknown>, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject)#org.json.JSONObject.put(java.lang.String, java.lang.String)#android.database.Cursor.getLong(<unknown>)#java.lang.String.equals(<unknown>)#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.json.JSONObject.JSONObject()#org.apache.http.params.HttpProtocolParams.setVersion(org.apache.http.params.HttpParams, org.apache.http.HttpVersion)#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.HistoryDetailData()#android.util.Log.d(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService._startTransaction()#<unknown>.next()#<unknown>.set(<unknown>, <unknown>)#<unknown>.nextValueToken()#org.json.JSONObject.JSONObject()#java.lang.String.equals(<unknown>)#java.lang.Long.parseLong(<unknown>)#java.lang.Integer.parseInt(<unknown>)#org.apache.http.client.methods.HttpPost.HttpPost(java.lang.String)#org.apache.http.StatusLine.getStatusCode()#<unknown>.set(<unknown>, int)#java.lang.String.equals(java.lang.String)#java.lang.String.equals(<unknown>)#java.lang.String.equals(<unknown>)#<unknown>.getCurrentName()#java.util.ArrayList<java.lang.String>.ArrayList, String()#com.inovex.zabbixmobile.api.ZabbixService._startTransaction()#com.inovex.zabbixmobile.api.ZabbixService.importTriggers(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader)#org.json.JSONArray.put(java.lang.String)#<unknown>.nextValueToken()#org.json.JSONArray.put(java.lang.String)#<unknown>.set(<unknown>, <unknown>)#org.json.JSONObject.put(java.lang.String, int)#com.inovex.zabbixmobile.api.ZabbixService.importItems(<unknown>, int, boolean)#org.json.JSONObject.JSONObject()#com.inovex.zabbixmobile.api.ZabbixService.importTriggers(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService.importGraphItems(<unknown>)#<unknown>.ScreenItemData()#<unknown>.set(<unknown>, <unknown>)#<unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>)#android.preference.PreferenceManager.getDefaultSharedPreferences(android.content.Context)#org.json.JSONObject.length()#<unknown>.nextValueToken()#java.util.HashSet<java.lang.Long>.HashSet, Long()#java.lang.String.equals(java.lang.String)#android.content.SharedPreferences.getBoolean(java.lang.String, boolean)#<unknown>.insert(android.database.sqlite.SQLiteDatabase)#org.json.JSONObject.put(java.lang.String, org.json.JSONArray)#<unknown>.close()#com.inovex.zabbixmobile.api.ZabbixService.importHosts(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader, int)#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.next()#android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null)#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.json.JSONObject.getString(java.lang.String)#<unknown>.set(<unknown>, <unknown>)#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.close()#org.json.JSONObject.getString(java.lang.String)#java.lang.String.equals(java.lang.String)#java.lang.Long.parseLong(<unknown>)#org.codehaus.jackson.JsonParser.isClosed()#org.json.JSONObject.put(java.lang.String, int)#org.json.JSONObject.put(java.lang.String, org.json.JSONArray)#org.json.JSONObject.put(java.lang.String, long)#<unknown>.close()#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.set(<unknown>, long)#org.json.JSONObject.put(java.lang.String, org.json.JSONObject)#<unknown>.set(<unknown>, <unknown>)#com.inovex.zabbixmobile.api.ZabbixService._endTransaction()#java.lang.String.replaceAll(java.lang.String, java.lang.String)#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.nextValueToken()#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.apache.http.params.BasicHttpParams.BasicHttpParams()#android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null)#android.database.sqlite.SQLiteDatabase.beginTransaction()#com.inovex.zabbixmobile.api.ZabbixService._commitTransactionIfRecommended()#com.inovex.zabbixmobile.api.ZabbixService._endTransaction()#java.lang.String.equals(<unknown>)#<unknown>.insert(android.database.sqlite.SQLiteDatabase)#<unknown>.insert(android.database.sqlite.SQLiteDatabase)#org.json.JSONObject.put(java.lang.String, int)#<unknown>.next()#com.inovex.zabbixmobile.api.ZabbixService._startTransaction()#<unknown>.getJsonArray()#android.content.SharedPreferences.getString(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, null, int)#javax.net.SocketFactory.createSocket()#java.lang.Long.parseLong(<unknown>)#org.apache.http.client.CredentialsProvider.setCredentials(org.apache.http.auth.AuthScope, org.apache.http.auth.UsernamePasswordCredentials)#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.next()#com.inovex.zabbixmobile.api.ZabbixService.HttpAuthorizationRequiredException.HttpAuthorizationRequiredException()#android.database.sqlite.SQLiteQueryBuilder.query(android.database.sqlite.SQLiteDatabase, null, null, null, null, null, null)#java.util.Date.Date()#com.inovex.zabbixmobile.api.ZabbixService._commitTransactionIfRecommended()#<unknown>.set(<unknown>, java.lang.String)#org.json.JSONObject.JSONObject()#<unknown>.next()#<unknown>.set(<unknown>, <unknown>)#<unknown>.set(<unknown>, <unknown>)#com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject)#java.lang.String.equals(java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, java.lang.String)#java.lang.String.indexOf(char)#android.database.sqlite.SQLiteDatabase.query(<unknown>, null, <unknown>, null, null, null, null)#android.preference.PreferenceManager.getDefaultSharedPreferences(android.content.Context)#<unknown>.nextProperty()#org.apache.http.impl.client.CloseableHttpClient.execute(org.apache.http.client.methods.HttpPost)#<unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>)#com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, java.lang.String)#org.json.JSONObject.JSONObject()#<unknown>.close()#android.database.Cursor.getColumnIndex(<unknown>)#android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null)#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.nextProperty()#org.apache.http.conn.scheme.PlainSocketFactory.getSocketFactory()#com.inovex.zabbixmobile.api.ZabbixService._commitTransactionIfRecommended()#com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject)#java.lang.StringBuilder.toString()#org.json.JSONObject.put(java.lang.String, java.lang.String)#android.database.sqlite.SQLiteQueryBuilder.SQLiteQueryBuilder()#<unknown>.insert(android.database.sqlite.SQLiteDatabase)#org.apache.http.conn.scheme.SchemeRegistry.register(org.apache.http.conn.scheme.Scheme)#<unknown>.set(<unknown>, <unknown>)#org.json.JSONObject.JSONObject(java.lang.String)#java.lang.String.equals(<unknown>)#<unknown>.set(<unknown>, <unknown>)#<unknown>.set(<unknown>, <unknown>)#java.lang.IllegalStateException.IllegalStateException(java.lang.String)#java.lang.Double.parseDouble(<unknown>)#android.content.ContentValues.put(<unknown>, java.lang.Long)#android.database.sqlite.SQLiteQueryBuilder.appendWhere(<unknown>)#org.apache.http.conn.scheme.SchemeRegistry.register(org.apache.http.conn.scheme.Scheme)#org.json.JSONObject.getInt(java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService.importHosts(<unknown>, null)#org.json.JSONObject.put(java.lang.String, boolean)#java.lang.Long.parseLong(<unknown>)#java.lang.String.indexOf(char)#android.database.sqlite.SQLiteQueryBuilder.appendWhere(<unknown>)#java.lang.String.length()#java.lang.String.equals(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject)#<unknown>.nextProperty()#<unknown>.next()#android.content.SharedPreferences.getString(java.lang.String, java.lang.String)#<unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>)#com.inovex.zabbixmobile.api.ZabbixService.importTriggers(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader)#<unknown>.GraphData()#org.json.JSONArray.put(java.lang.String)#org.apache.http.impl.client.AbstractHttpClient.getParams()#<unknown>.set(<unknown>, long)#<unknown>.set(<unknown>, <unknown>)#org.json.JSONObject.getJSONObject(java.lang.String)#org.json.JSONObject.put(java.lang.String, java.lang.String)#java.lang.String.equals(java.lang.String)#org.json.JSONObject.getString(java.lang.String)#java.lang.String.equals(<unknown>)#java.lang.String.equals(<unknown>)#<unknown>.getCurrentName()#java.lang.String.equals(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService.showProgress(int)#<unknown>.getCurrentName()#com.inovex.zabbixmobile.api.ZabbixService.importHosts(<unknown>, null)#com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, java.lang.String, int)#org.json.JSONObject.put(java.lang.String, int)#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.close()#java.lang.String.replace(java.lang.String, java.lang.String)#java.lang.String.equals(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject)#com.inovex.zabbixmobile.api.ZabbixService._endTransaction()#android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null)#android.database.Cursor.moveToNext()#<unknown>.HostData()#<unknown>.set(<unknown>, long)#<unknown>.next()#com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject)#android.database.sqlite.SQLiteQueryBuilder.setTables(<unknown>)#java.util.Date.getTime()#org.json.JSONObject.put(java.lang.String, long)#android.content.ContentValues.ContentValues(int)#java.lang.Long.parseLong(<unknown>)#org.apache.http.HttpResponse.getEntity()#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.getText()#java.lang.String.equals(java.lang.String)#<unknown>.set(<unknown>, <unknown>)#<unknown>.set(<unknown>, <unknown>)#javax.net.ssl.SSLContext.init(null, javax.net.ssl.TrustManager[], null)#android.database.sqlite.SQLiteDatabase.endTransaction()#java.lang.String.equals(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, java.lang.String)#android.util.Log.d(java.lang.String, java.lang.String)#<unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>)#<unknown>.next()#<unknown>.close()#<unknown>.insert(android.database.sqlite.SQLiteDatabase)#org.json.JSONObject.put(java.lang.String, java.lang.String)#java.lang.Throwable.getMessage()#java.lang.String.equals(<unknown>)#java.lang.String.equals(<unknown>)#<unknown>.set(<unknown>, <unknown>)#com.inovex.zabbixmobile.api.ZabbixService._endTransaction()#javax.net.ssl.SSLContext.getSocketFactory()#org.json.JSONObject.JSONObject()#android.content.Context.getResources()#org.json.JSONObject.put(java.lang.String, int)#com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, null)#com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, java.lang.String, int)#java.lang.String.matches(java.lang.String)#<unknown>.set(<unknown>, <unknown>)#org.json.JSONArray.put(java.lang.String)#<unknown>.set(<unknown>, <unknown>)#android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null)#android.content.Context.sendBroadcast(android.content.Intent)#org.json.JSONObject.getJSONObject(java.lang.String)#<unknown>.get(<unknown>)#android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null)#java.lang.String.equals(<unknown>)#android.content.SharedPreferences.getBoolean(java.lang.String, boolean)#java.lang.Throwable.printStackTrace()#android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null)#org.json.JSONObject.put(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService._startTransaction()#android.content.Intent.putExtra(java.lang.String, int)#org.json.JSONObject.JSONObject()#<unknown>.getText()#com.inovex.zabbixmobile.api.ZabbixService._endTransaction()#org.apache.http.client.methods.HttpPost.HttpPost(java.lang.String)#android.content.SharedPreferences.getString(java.lang.String, java.lang.String)#<unknown>.GraphItemData()#com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, java.lang.String, int)#<unknown>.nextValueToken()#org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager.ThreadSafeClientConnManager(org.apache.http.params.HttpParams, org.apache.http.conn.scheme.SchemeRegistry)#<unknown>.ApplicationItemRelationData()#java.lang.Object.toString()#android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null)#org.json.JSONArray.JSONArray()#java.lang.String.equals(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService._startTransaction()#org.json.JSONObject.put(java.lang.String, org.json.JSONArray)#com.inovex.zabbixmobile.api.ZabbixService.importApplications(int, int, <unknown>)#<unknown>.set(<unknown>, int)#org.json.JSONObject.put(java.lang.String, int)#com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, java.lang.String, int)#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.json.JSONObject.JSONObject()#java.lang.Math.min(int, int)#com.inovex.zabbixmobile.api.ZabbixService.showProgress(<unknown>)#java.lang.String.equals(java.lang.String)#android.content.Intent.Intent(<unknown>)#java.lang.String.equals(<unknown>)#org.json.JSONObject.put(java.lang.String, int)#javax.net.ssl.SSLContext.getInstance(java.lang.String)#android.content.res.Resources.getString(<unknown>)#org.json.JSONObject.JSONObject()#android.content.Intent.Intent(<unknown>)#java.lang.String.equals(<unknown>)#<unknown>.nextProperty()#javax.net.ssl.SSLSocketFactory.createSocket(java.net.Socket, java.lang.String, int, boolean)#org.json.JSONObject.put(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject)#<unknown>.get(<unknown>)#java.io.IOException.IOException(java.lang.String)#java.lang.String.trim()#java.lang.String.contains(java.lang.String)#org.apache.http.entity.StringEntity.StringEntity(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService._endTransaction()#.X509TrustManager()#com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject)#android.graphics.Color.parseColor(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, null)#org.json.JSONObject.getJSONArray(java.lang.String)#org.apache.http.client.params.HttpClientParams.setRedirecting(org.apache.http.params.HttpParams, boolean)#com.inovex.zabbixmobile.api.ZabbixService._startTransaction()#<unknown>.getCurrentName()#java.lang.String.equals(<unknown>)#java.lang.Long.parseLong(<unknown>)#android.util.Log.d(java.lang.String, java.lang.String)#org.codehaus.jackson.JsonParser.getCurrentToken()#org.codehaus.jackson.JsonParser.nextValue()#java.lang.Long.parseLong(<unknown>)#<unknown>.getText()#java.util.Date.getTime()#android.content.Intent.putExtra(java.lang.String, <unknown>)#android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null)#<unknown>.get(<unknown>)#android.database.Cursor.moveToFirst()#org.apache.http.client.methods.HttpEntityEnclosingRequestBase.setEntity(org.apache.http.entity.StringEntity)#com.inovex.zabbixmobile.api.ZabbixService._commitTransactionIfRecommended()#com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, null)#android.database.sqlite.SQLiteQueryBuilder.appendWhere(<unknown>)#org.apache.http.auth.UsernamePasswordCredentials.UsernamePasswordCredentials(java.lang.String, java.lang.String)#java.util.Date.getTime()#java.lang.String.equals(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService._endTransaction()#org.json.JSONObject.put(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService.authenticate()#java.lang.String.equals(<unknown>)#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.json.JSONObject.put(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService.NoAPIAccessException.NoAPIAccessException()#org.json.JSONArray.put(long)#com.inovex.zabbixmobile.api.ZabbixService._endTransaction()#android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null)#<unknown>.getJsonArray()#<unknown>.ScreenData()#java.util.Date.Date()#java.util.Date.Date()#<unknown>.set(<unknown>, long)#<unknown>.getCurrentName()#org.json.JSONObject.put(java.lang.String, org.json.JSONArray)#<unknown>.set(<unknown>, long)#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.apache.http.params.HttpConnectionParams.setConnectionTimeout(org.apache.http.params.HttpParams, int)#org.json.JSONArray.length()#<unknown>.set(<unknown>, java.lang.String)#<unknown>.set(<unknown>, long)#java.util.Date.getTime()#<unknown>.set(<unknown>, <unknown>)#<unknown>.set(<unknown>, <unknown>)#org.json.JSONArray.put(java.lang.String)#java.lang.String.equals(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService.importScreenItems(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService.HttpAuthorizationRequiredException.HttpAuthorizationRequiredException()#<unknown>.getText()#org.json.JSONObject.put(java.lang.String, org.json.JSONArray)#com.inovex.zabbixmobile.api.ZabbixService.importEvents(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader, null)#org.json.JSONObject.JSONObject()#<unknown>.set(<unknown>, <unknown>)#com.inovex.zabbixmobile.api.ZabbixService.importHostGroups(<unknown>)#org.json.JSONObject.toString()#java.lang.Integer.parseInt(<unknown>)#java.lang.String.equals(java.lang.String)#org.apache.http.params.HttpProtocolParams.setContentCharset(org.apache.http.params.HttpParams, java.lang.String)#<unknown>.get(<unknown>)#android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null)#java.lang.String.equals(<unknown>)#<unknown>.set(<unknown>, <unknown>)#<unknown>.nextValueToken()#<unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>)#org.json.JSONObject.put(java.lang.String, org.json.JSONArray)#org.json.JSONObject.put(java.lang.String, java.lang.Integer)#<unknown>.getText()#<unknown>.set(<unknown>, <unknown>)#org.apache.http.message.AbstractHttpMessage.addHeader(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject)#org.json.JSONObject.getJSONArray(java.lang.String)#java.security.KeyStore.load(null, null)#java.lang.String.replace(java.lang.String, java.lang.String)#java.lang.Long.parseLong(<unknown>)#org.json.JSONObject.toString()#com.inovex.zabbixmobile.api.ZabbixService.importTriggers(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader)#android.util.Log.d(java.lang.String, java.lang.String)#android.content.SharedPreferences.getString(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, java.lang.String)#<unknown>.TriggerData()#android.content.SharedPreferences.getString(java.lang.String, java.lang.String)#android.content.Intent.Intent(<unknown>)#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.apache.http.impl.client.AbstractHttpClient.getCredentialsProvider()#<unknown>.set(<unknown>, <unknown>)#java.io.IOException.IOException(java.lang.String)#java.lang.String.trim()#org.json.JSONObject.put(java.lang.String, org.json.JSONArray)#java.lang.String.split(java.lang.String)#java.lang.String.equals(java.lang.String)#java.lang.String.endsWith(java.lang.String)#<unknown>.set(<unknown>, int)#com.inovex.zabbixmobile.api.ZabbixService.showProgress(int)#<unknown>.ItemData()#org.json.JSONObject.put(java.lang.String, int)#<unknown>.set(<unknown>, <unknown>)#org.codehaus.jackson.JsonParser.getText()#android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null)#org.apache.http.impl.client.DefaultHttpClient.DefaultHttpClient(org.apache.http.conn.ClientConnectionManager, org.apache.http.params.HttpParams)#<unknown>.close()#java.lang.IllegalStateException.IllegalStateException(java.lang.String)#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.codehaus.jackson.JsonParser.nextToken()#android.database.Cursor.getColumnIndex(<unknown>)#org.json.JSONObject.put(java.lang.String, org.json.JSONArray)#<unknown>.nextValueToken()#com.inovex.zabbixmobile.api.ZabbixService._startTransaction()#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.set(<unknown>, java.lang.String)#java.lang.String.substring(int, int)#java.lang.Long.parseLong(<unknown>)#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.json.JSONObject.getInt(java.lang.String)#java.lang.String.equals(java.lang.String)#<unknown>.set(<unknown>, <unknown>)#<unknown>.set(<unknown>, <unknown>)#java.security.KeyStore.getInstance(java.lang.String)#java.lang.Integer.parseInt(<unknown>)#java.lang.String.equals(java.lang.String)#<unknown>.nextProperty()#android.content.Intent.putExtra(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, null)#<unknown>.set(<unknown>, int)#java.io.BufferedReader.BufferedReader(java.io.InputStreamReader)#com.inovex.zabbixmobile.api.ZabbixService.importEvents(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader, int)#java.security.KeyStore.getDefaultType()#java.lang.String.equals(<unknown>)#<unknown>.getText()#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.set(<unknown>, java.lang.Object)#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.insert(android.database.sqlite.SQLiteDatabase)#<unknown>.nextProperty()#com.inovex.zabbixmobile.api.ZabbixService._startTransaction()#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.close()#<unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>)#org.json.JSONObject.put(java.lang.String, long)#com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, null, int)#<unknown>.getJsonArray()#<unknown>.set(<unknown>, <unknown>)#java.lang.String.equals(<unknown>)#org.apache.http.conn.scheme.Scheme.Scheme(java.lang.String, org.apache.http.conn.scheme.PlainSocketFactory, int)#org.json.JSONObject.put(java.lang.String, java.lang.String)#java.lang.String.equals(<unknown>)",
      "p_body_t": ["<empty>"],
      "c_patch_t": [" \t */\n \tpublic void importTriggers() throws JSONException, IOException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n \t\tif (!isCached(TriggerData.TABLE_NAME, null)) {\n+\t\t\t// clear triggers\n+\t\t\tzabbixLocalDB.delete(TriggerData.TABLE_NAME, null, null);\n+\n \t\t\t_startTransaction();\n \n \t\t\tlong min = (new Date().getTime()/1000)-ZabbixConfig.STATUS_SHOW_TRIGGER_TIME;"],
      "c_body_t": ["<empty>"],
      "c_email_sni": "jonas.gehring@inovex.de",
      "p_patch_t": [" \t * @throws HttpAuthorizationRequiredException\n \t * @throws NoAPIAccessException\n \t */\n-\tprivate JsonArrayReader _queryStream(String method, JSONObject params) throws JSONException, IOException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n+\tprivate JsonArrayOrObjectReader _queryStream(String method, JSONObject params) throws JSONException, IOException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n \t\t// http request\n \t\tHttpPost post = new HttpPost(url);\n \t\tpost.addHeader(\"Content-Type\", \"application/json; charset=utf-8\");\n@@ -355,6 +355,9 @@ public class ZabbixService {\n \t\t\t.put(\"auth\", token)\n \t\t\t.put(\"id\", 0);\n \n+\t\tLog.d(\"ZabbixService\", \"_queryStream: \"+url);\n+\t\tLog.d(\"ZabbixService\", \"_queryStream: \"+json.toString());\n+\n \t\tpost.setEntity(new StringEntity(json.toString(), \"UTF-8\"));\n \t\ttry {\n \t\t\tHttpResponse resp = httpClient.execute(post);\n@@ -384,7 +387,7 @@ public class ZabbixService {\n \t\t\t\t\t\t// first do a new auth and then try the same api call again\n \t\t\t\t\t\tif (authenticate() && !_notAuthorizedRetry) {\n \t\t\t\t\t\t\t_notAuthorizedRetry = true;\n-\t\t\t\t\t\t\tJsonArrayReader r = _queryStream(method, params);\n+\t\t\t\t\t\t\tJsonArrayOrObjectReader r = _queryStream(method, params);\n \t\t\t\t\t\t\t_notAuthorizedRetry = false;\n \t\t\t\t\t\t\treturn r;\n \t\t\t\t\t\t} else throw new IllegalStateException(errortxt);\n@@ -393,10 +396,20 @@ public class ZabbixService {\n \t\t\t} while (!jp.getCurrentName().equals(\"result\"));\n \n \t\t\t// result array found\n-\t\t\tif (jp.nextToken() != JsonToken.START_ARRAY) { // go inside the array\n+\t\t\tif (jp.nextToken() != JsonToken.START_ARRAY && jp.getCurrentToken() != JsonToken.START_OBJECT) { // go inside the array\n+\t\t\t\ttry {\n+\t\t\t\t\tLog.d(\"ZabbixService\", \"current token: \"+jp.getCurrentToken());\n+\t\t\t\t\tLog.d(\"ZabbixService\", \"current name: \"+jp.getCurrentName());\n+\t\t\t\t\tLog.d(\"ZabbixService\", \"get text: \"+jp.getText());\n+\t\t\t\t\tLog.d(\"ZabbixService\", \"next value: \"+jp.nextValue());\n+\t\t\t\t\tLog.d(\"ZabbixService\", \"next token: \"+jp.nextToken());\n+\t\t\t\t\tLog.d(\"ZabbixService\", \"current token: \"+jp.getCurrentToken());\n+\t\t\t\t\tLog.d(\"ZabbixService\", \"current name: \"+jp.getCurrentName());\n+\t\t\t\t\tLog.d(\"ZabbixService\", \"get text: \"+jp.getText());\n+\t\t\t\t} catch (Exception e) {}\n \t\t\t\tthrow new IOException(\"Expected data to start with an Array\");\n \t\t\t}\n-\t\t\treturn new JsonArrayReader(jp);\n+\t\t\treturn new JsonArrayOrObjectReader(jp);\n \t\t} catch (SSLPeerUnverifiedException e) {\n \t\t\tthrow e;\n \t\t} catch (IOException e) {\n@@ -487,6 +500,7 @@ public class ZabbixService {\n \t\t\t\t\t, new JSONObject()\n \t\t\t);\n \t\t\tisVersion2 = result.getString(\"result\").equals(\"1.4\");\n+\t\t\tLog.i(\"ZabbixService\", \"Zabbix Server Version: isVersion2=\"+isVersion2);\n \t\t}\n \t\treturn token != null;\n \t}\n@@ -504,7 +518,7 @@ public class ZabbixService {\n \t\t}\n \t}\n \n-\tprivate void importApplications(long hostid, long itemid, JsonArrayReader jsonArray) throws JsonParseException, NumberFormatException, IOException {\n+\tprivate void importApplications(long hostid, long itemid, JsonArrayOrObjectReader jsonArray) throws JsonParseException, NumberFormatException, IOException {\n \t\tint num = 0;\n \t\tJsonObjectReader application;\n \t\twhile ((application = jsonArray.next()) != null) {\n@@ -576,7 +590,7 @@ public class ZabbixService {\n \t\t\t\t\t.put(\"sortorder\", \"DESC\");\n \t\t\t}\n \n-\t\t\tJsonArrayReader events = _queryStream(\n+\t\t\tJsonArrayOrObjectReader events = _queryStream(\n \t\t\t\t\t\"event.get\"\n \t\t\t\t\t, params\n \t\t\t);\n@@ -618,7 +632,7 @@ public class ZabbixService {\n \t\t\t\tparams.put(\"sortfield\", \"clock\")\n \t\t\t\t\t.put(\"sortorder\", \"DESC\");\n \t\t\t}\n-\t\t\tJsonArrayReader events = _queryStream(\n+\t\t\tJsonArrayOrObjectReader events = _queryStream(\n \t\t\t\t\t\"event.get\"\n \t\t\t\t\t, params\n \t\t\t);\n@@ -636,7 +650,7 @@ public class ZabbixService {\n \t * @throws JsonParseException\n \t * @throws IOException\n \t */\n-\tprivate void importEvents(JsonArrayReader events, Integer numEvents) throws JsonParseException, IOException {\n+\tprivate void importEvents(JsonArrayOrObjectReader events, Integer numEvents) throws JsonParseException, IOException {\n \t\tint i=0;\n \t\tJsonObjectReader eventReader;\n \t\twhile ((eventReader = events.next()) != null) {\n@@ -688,7 +702,7 @@ public class ZabbixService {\n \t * @throws NumberFormatException\n \t * @throws IOException\n \t */\n-\tprivate boolean importGraphItems(JsonArrayReader graphItems) throws JsonParseException, NumberFormatException, IOException {\n+\tprivate boolean importGraphItems(JsonArrayOrObjectReader graphItems) throws JsonParseException, NumberFormatException, IOException {\n \t\tboolean mustSetGraphid = false;\n \t\tJsonObjectReader graphItemReader;\n \t\twhile ((graphItemReader = graphItems.next()) != null) {\n@@ -737,7 +751,7 @@ public class ZabbixService {\n \t\t\t}\n \t\t\tzabbixLocalDB.delete(CacheData.TABLE_NAME, CacheData.COLUMN_KIND+\"='\"+GraphData.TABLE_NAME+\"' AND \"+CacheData.COLUMN_FILTER+\"='screenid=\"+screenid+'\\'', null);\n \n-\t\t\tJsonArrayReader graphs = _queryStream(\n+\t\t\tJsonArrayOrObjectReader graphs = _queryStream(\n \t\t\t\t\t\"graph.get\"\n \t\t\t\t\t, new JSONObject()\n \t\t\t\t\t\t.put(isVersion2?\"selectGraphItems\":\"select_graph_items\", \"extend\")\n@@ -826,7 +840,7 @@ public class ZabbixService {\n \t\t\t\t// so we use a fiction\n \t\t\t\tint numDetails = 400;\n \t\t\t\tint curI=0;\n-\t\t\t\tJsonArrayReader historydetails = _queryStream(\n+\t\t\t\tJsonArrayOrObjectReader historydetails = _queryStream(\n \t\t\t\t\t\t\"history.get\"\n \t\t\t\t\t\t, new JSONObject()\n \t\t\t\t\t\t\t.put(\"output\", \"extend\")\n@@ -878,7 +892,7 @@ public class ZabbixService {\n \t\t}\n \t}\n \n-\tprivate long importHostGroups(JsonArrayReader jsonArray) throws JsonParseException, IOException {\n+\tprivate long importHostGroups(JsonArrayOrObjectReader jsonArray) throws JsonParseException, IOException {\n \t\tlong firstHostGroupId = -1;\n \t\tJsonObjectReader hostReader;\n \t\twhile ((hostReader = jsonArray.next()) != null) {\n@@ -910,7 +924,7 @@ public class ZabbixService {\n \t * @throws JsonParseException\n \t * @throws IOException\n \t */\n-\tprivate Object[] importHosts(JsonArrayReader jsonArray, Integer numHosts) throws JsonParseException, IOException {\n+\tprivate Object[] importHosts(JsonArrayOrObjectReader jsonArray, Integer numHosts) throws JsonParseException, IOException {\n \t\tList<String> hostnames = new ArrayList<String>();\n \t\tlong firstHostId = -1;\n \t\tJsonObjectReader hostReader;\n@@ -971,7 +985,7 @@ public class ZabbixService {\n \t\t\t\t\t\t.put(isVersion2?\"selectGroups\":\"select_groups\", \"extend\")\n \t\t\t);\n \t\t\tint numHosts = result.getInt(\"result\");\n-\t\t\tJsonArrayReader hosts = _queryStream(\n+\t\t\tJsonArrayOrObjectReader hosts = _queryStream(\n \t\t\t\t\t\"host.get\"\n \t\t\t\t\t, new JSONObject()\n \t\t\t\t\t\t.put(\"output\", \"extend\")\n@@ -995,7 +1009,7 @@ public class ZabbixService {\n \t * @throws JsonParseException\n \t * @throws IOException\n \t */\n-\tprivate long importItems(JsonArrayReader items, int numItems, boolean checkBeforeInsert) throws JsonParseException, IOException {\n+\tprivate long importItems(JsonArrayOrObjectReader items, int numItems, boolean checkBeforeInsert) throws JsonParseException, IOException {\n \t\tlong firstItemId = -1;\n \t\tint curI=0;\n \t\tJsonObjectReader itemReader;\n@@ -1090,7 +1104,7 @@ public class ZabbixService {\n \t\t\t\t\t.put(\"hostids\", new JSONArray().put(hostid))\n \t\t\t);\n \t\t\tint numItems = result.getInt(\"result\");\n-\t\t\tJsonArrayReader items = _queryStream(\n+\t\t\tJsonArrayOrObjectReader items = _queryStream(\n \t\t\t\t\t\"item.get\"\n \t\t\t\t\t, new JSONObject()\n \t\t\t\t\t\t.put(\"output\", \"extend\")\n@@ -1106,7 +1120,7 @@ public class ZabbixService {\n \t\t}\n \t}\n \n-\tprivate void importScreenItems(JsonArrayReader screenItems) throws JsonParseException, NumberFormatException, IOException {\n+\tprivate void importScreenItems(JsonArrayOrObjectReader screenItems) throws JsonParseException, NumberFormatException, IOException {\n \t\tJsonObjectReader screenItemReader;\n \t\twhile ((screenItemReader = screenItems.next()) != null) {\n \t\t\tScreenItemData si = new ScreenItemData();\n@@ -1140,7 +1154,7 @@ public class ZabbixService {\n \t\t\tzabbixLocalDB.delete(ScreenItemData.TABLE_NAME, null, null);\n \t\t\tzabbixLocalDB.delete(CacheData.TABLE_NAME, CacheData.COLUMN_KIND+\"='\"+ScreenData.TABLE_NAME+\"'\", null);\n \n-\t\t\tJsonArrayReader screens = _queryStream(\n+\t\t\tJsonArrayOrObjectReader screens = _queryStream(\n \t\t\t\t\t(isVersion2?\"s\":\"S\")+\"creen.get\"\n \t\t\t\t\t, new JSONObject()\n \t\t\t\t\t\t.put(\"output\", \"extend\")\n@@ -1174,7 +1188,7 @@ public class ZabbixService {\n \t\tif (!isCached(TriggerData.TABLE_NAME, \"triggerid=\"+triggerid)) {\n \t\t\t_startTransaction();\n \n-\t\t\tJsonArrayReader trigger = _queryStream(\n+\t\t\tJsonArrayOrObjectReader trigger = _queryStream(\n \t\t\t\t\t\"trigger.get\"\n \t\t\t\t\t, new JSONObject()\n \t\t\t\t\t\t.put(\"output\", \"extend\")\n@@ -1216,7 +1230,7 @@ public class ZabbixService {\n \t\tif (mustImport) {\n \t\t\t_startTransaction();\n \t\t\tzabbixLocalDB.delete(TriggerData.TABLE_NAME, TriggerData.COLUMN_TRIGGERID+\"=\"+triggerid, null);\n-\t\t\tJsonArrayReader triggers = _queryStream(\n+\t\t\tJsonArrayOrObjectReader triggers = _queryStream(\n \t\t\t\t\t\"trigger.get\"\n \t\t\t\t\t, new JSONObject()\n \t\t\t\t\t\t.put(\"output\", \"extend\")\n@@ -1243,7 +1257,7 @@ public class ZabbixService {\n \t\t\t_startTransaction();\n \n \t\t\tlong min = (new Date().getTime()/1000)-ZabbixConfig.STATUS_SHOW_TRIGGER_TIME;\n-\t\t\tJsonArrayReader triggers = _queryStream(\n+\t\t\tJsonArrayOrObjectReader triggers = _queryStream(\n \t\t\t\t\t\"trigger.get\"\n \t\t\t\t\t, new JSONObject()\n \t\t\t\t\t\t.put(\"output\", \"extend\")\n@@ -1265,7 +1279,7 @@ public class ZabbixService {\n \t\t}\n \t}\n \n-\tprivate void importTriggers(JsonArrayReader jsonArray) throws JsonParseException, IOException {\n+\tprivate void importTriggers(JsonArrayOrObjectReader jsonArray) throws JsonParseException, IOException {\n \t\tJsonObjectReader triggerReader;\n \t\twhile ((triggerReader = jsonArray.next()) != null) {\n \t\t\tTriggerData t = new TriggerData();\n@@ -1311,7 +1325,7 @@ public class ZabbixService {\n \t\tif (!isCached(TriggerData.TABLE_NAME, \"itemid=\"+itemid)) {\n \t\t\t_startTransaction();\n \t\t\tzabbixLocalDB.delete(TriggerData.TABLE_NAME, TriggerData.COLUMN_ITEMID+\"=\"+itemid, null);\n-\t\t\tJsonArrayReader triggers = _queryStream(\n+\t\t\tJsonArrayOrObjectReader triggers = _queryStream(\n \t\t\t\t\t\"trigger.get\"\n \t\t\t\t\t, new JSONObject()\n \t\t\t\t\t\t.put(\"output\", \"extend\")"],
      "repo_sni": "inovex/zax",
      "_version_": 1526823823669723136,
      "c_user_sni": "Jonas Gehring",
      "c_callsites_added_cs": "android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null)",
      "p_parents_ss": ["2bbdeb660e92821bffb04b3315e354e34764dc43"],
      "p_user_sni": "Jonas Gehring",
      "c_subject_t": ["triggers are more stable"],
      "c_imports_added_cs": "<empty>",
      "c_callsites_removed_cs": "<empty>"
    }, {
      "c_patch_no_context_t": ["-\t\tpublic static final int HISTORY_GET_TIME_FROM_SHIFT = 8*60*60; // -8h\n+\t\tpublic static final int HISTORY_GET_TIME_FROM_SHIFT = 24*60*60; // -24h\n+\t/**\n+\t * The API version. From 1.8.3 (maybe earlier) to 2.0 (excluded), this was 1.3. With 2.0, it changed to 1.4. \n+\t * Finally, since 2.0.4, the API version matches the program version.\n+\t */\n+\tprivate String apiVersion = \"\";\n-\t\t\tisVersion2 = result.getString(\"result\").equals(\"1.4\");\n-\t\t\tLog.i(\"ZabbixService\", \"Zabbix Server Version: isVersion2=\"+isVersion2);\n+\t\t\tapiVersion = result.getString(\"result\");\n+\t\t\tisVersion2 = (apiVersion.equals(\"1.4\") || apiVersion.startsWith(\"2\"));\n+\t\t\tLog.i(\"ZabbixService\", \"Zabbix API Version: \" + apiVersion);\n-\t\t\tlong time_from = time_till - ZabbixConfig.HISTORY_GET_TIME_FROM_SHIFT; // jetzt-2h\n+\t\t\tlong time_from = time_till - ZabbixConfig.HISTORY_GET_TIME_FROM_SHIFT;"],
      "p_patch_no_context_t": ["+\t\t\t// clear triggers\n+\t\t\tzabbixLocalDB.delete(TriggerData.TABLE_NAME, null, null);\n+"],
      "c_date_tdt": "May 10, 2013 7:32:46 AM",
      "c_imports_t": ["android.database.sqlite.SQLiteQueryBuilder org.apache.http.conn.scheme.SchemeRegistry java.util.HashSet org.apache.http.params.BasicHttpParams android.content.Context org.apache.http.params.HttpParams org.apache.http.conn.scheme.PlainSocketFactory java.util.ArrayList com.inovex.zabbixmobile.model.ItemData com.inovex.zabbixmobile.model.HostData com.inovex.zabbixmobile.model.GraphData com.inovex.zabbixmobile.model.EventData org.apache.http.auth.UsernamePasswordCredentials org.apache.http.params.HttpConnectionParams android.content.SharedPreferences java.security.KeyManagementException org.apache.http.conn.ClientConnectionManager org.codehaus.jackson.JsonFactory org.apache.http.entity.StringEntity java.util.Set org.apache.http.params.HttpProtocolParams com.inovex.zabbixmobile.model.ApplicationItemRelationData com.inovex.zabbixmobile.model.TriggerData org.codehaus.jackson.JsonToken android.database.Cursor java.net.Socket android.content.Intent org.apache.http.protocol.HTTP org.json.JSONException java.net.UnknownHostException com.inovex.zabbixmobile.model.HistoryDetailData org.apache.http.HttpResponse java.security.KeyStore com.inovex.zabbixmobile.ZabbixContentProvider android.preference.PreferenceManager android.util.Log org.json.JSONObject java.security.NoSuchAlgorithmException org.apache.http.client.params.HttpClientParams java.io.IOException org.apache.http.conn.scheme.Scheme org.apache.http.client.methods.HttpPost javax.net.ssl.SSLContext org.apache.http.auth.AuthScope org.apache.http.conn.ssl.SSLSocketFactory java.security.KeyStoreException android.content.ContentValues java.io.InputStreamReader java.util.Date java.security.UnrecoverableKeyException android.graphics.Color org.apache.http.client.ClientProtocolException com.inovex.zabbixmobile.model.GraphItemData org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager org.json.JSONArray com.inovex.zabbixmobile.model.CacheData javax.net.ssl.SSLPeerUnverifiedException com.inovex.zabbixmobile.model.HostGroupData org.codehaus.jackson.JsonParseException java.security.cert.X509Certificate org.apache.http.HttpVersion android.database.sqlite.SQLiteDatabase java.util.List java.security.cert.CertificateException java.io.BufferedReader com.inovex.zabbixmobile.model.ApplicationData com.inovex.zabbixmobile.model.ScreenItemData javax.net.ssl.TrustManager com.inovex.zabbixmobile.model.ScreenData com.inovex.zabbixmobile.R org.codehaus.jackson.JsonParser org.apache.http.impl.client.DefaultHttpClient javax.net.ssl.X509TrustManager"],
      "c_contents_t": ["package com.inovex.zabbixmobile.api;\n\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.net.Socket;\nimport java.net.UnknownHostException;\nimport java.security.KeyManagementException;\nimport java.security.KeyStore;\nimport java.security.KeyStoreException;\nimport java.security.NoSuchAlgorithmException;\nimport java.security.UnrecoverableKeyException;\nimport java.security.cert.CertificateException;\nimport java.security.cert.X509Certificate;\nimport java.util.ArrayList;\nimport java.util.Date;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Set;\n\nimport javax.net.ssl.SSLContext;\nimport javax.net.ssl.SSLPeerUnverifiedException;\nimport javax.net.ssl.TrustManager;\nimport javax.net.ssl.X509TrustManager;\n\nimport org.apache.http.HttpResponse;\nimport org.apache.http.HttpVersion;\nimport org.apache.http.auth.AuthScope;\nimport org.apache.http.auth.UsernamePasswordCredentials;\nimport org.apache.http.client.ClientProtocolException;\nimport org.apache.http.client.methods.HttpPost;\nimport org.apache.http.client.params.HttpClientParams;\nimport org.apache.http.conn.ClientConnectionManager;\nimport org.apache.http.conn.scheme.PlainSocketFactory;\nimport org.apache.http.conn.scheme.Scheme;\nimport org.apache.http.conn.scheme.SchemeRegistry;\nimport org.apache.http.conn.ssl.SSLSocketFactory;\nimport org.apache.http.entity.StringEntity;\nimport org.apache.http.impl.client.DefaultHttpClient;\nimport org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager;\nimport org.apache.http.params.BasicHttpParams;\nimport org.apache.http.params.HttpConnectionParams;\nimport org.apache.http.params.HttpParams;\nimport org.apache.http.params.HttpProtocolParams;\nimport org.apache.http.protocol.HTTP;\nimport org.codehaus.jackson.JsonFactory;\nimport org.codehaus.jackson.JsonParseException;\nimport org.codehaus.jackson.JsonParser;\nimport org.codehaus.jackson.JsonToken;\nimport org.json.JSONArray;\nimport org.json.JSONException;\nimport org.json.JSONObject;\n\nimport android.content.ContentValues;\nimport android.content.Context;\nimport android.content.Intent;\nimport android.content.SharedPreferences;\nimport android.database.Cursor;\nimport android.database.sqlite.SQLiteDatabase;\nimport android.database.sqlite.SQLiteQueryBuilder;\nimport android.graphics.Color;\nimport android.preference.PreferenceManager;\nimport android.util.Log;\n\nimport com.inovex.zabbixmobile.R;\nimport com.inovex.zabbixmobile.ZabbixContentProvider;\nimport com.inovex.zabbixmobile.model.ApplicationData;\nimport com.inovex.zabbixmobile.model.ApplicationItemRelationData;\nimport com.inovex.zabbixmobile.model.CacheData;\nimport com.inovex.zabbixmobile.model.EventData;\nimport com.inovex.zabbixmobile.model.GraphData;\nimport com.inovex.zabbixmobile.model.GraphItemData;\nimport com.inovex.zabbixmobile.model.HistoryDetailData;\nimport com.inovex.zabbixmobile.model.HostData;\nimport com.inovex.zabbixmobile.model.HostGroupData;\nimport com.inovex.zabbixmobile.model.ItemData;\nimport com.inovex.zabbixmobile.model.ScreenData;\nimport com.inovex.zabbixmobile.model.ScreenItemData;\nimport com.inovex.zabbixmobile.model.TriggerData;\n\n/**\n * interface to connect to the zabbix server\n */\npublic class ZabbixService {\n\tclass CustomSSLSocketFactory extends SSLSocketFactory {\n\t\tSSLContext sslContext = SSLContext.getInstance(\"TLS\");\n\n\t\tpublic CustomSSLSocketFactory(KeyStore truststore) throws NoSuchAlgorithmException, KeyManagementException, KeyStoreException, UnrecoverableKeyException {\n\t\t\tsuper(truststore);\n\t\t\tTrustManager tm = new X509TrustManager() {\n\t\t\t\t@Override\n\t\t\t\tpublic void checkClientTrusted(X509Certificate[] chain,\n\t\t\t\t\t\tString authType) throws CertificateException {\n\t\t\t\t}\n\t\t\t\t@Override\n\t\t\t\tpublic void checkServerTrusted(X509Certificate[] chain,\n\t\t\t\t\t\tString authType) throws CertificateException {\n\t\t\t\t}\n\t\t\t\t@Override\n\t\t\t\tpublic X509Certificate[] getAcceptedIssuers() {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t};\n\t\t\tsslContext.init(null, new TrustManager[] { tm }, null);\n\t\t}\n\n\t\t@Override\n\t\tpublic Socket createSocket() throws IOException {\n\t\t\treturn sslContext.getSocketFactory().createSocket();\n\t\t}\n\n\t\t@Override\n\t\tpublic Socket createSocket(Socket socket, String host, int port, boolean autoClose) throws IOException, UnknownHostException {\n\t\t\treturn sslContext.getSocketFactory().createSocket(socket, host, port, autoClose);\n\t\t}\n\t}\n\n\t/**\n\t * http auth is needed\n\t */\n\tpublic class HttpAuthorizationRequiredException extends Exception {\n\t\tprivate static final long serialVersionUID = 6632422081858878147L;\n\t}\n\n\t/**\n\t * zabbix error: no api access\n\t */\n\tpublic class NoAPIAccessException extends Exception {\n\t\tprivate static final long serialVersionUID = 6381395987443456382L;\n\t}\n\n\t/**\n\t * probably too old zabbix <= 1.8.2\n\t */\n\tpublic class PreconditionFailedException extends Exception {\n\t\tprivate static final long serialVersionUID = -2529885710860745023L;\n\t}\n\n\t/**\n\t * global constants\n\t */\n\tpublic class ZabbixConfig {\n\t\tpublic static final int APPLICATION_GET_LIMIT = 1000;\n\t\tpublic static final int EVENTS_GET_LIMIT = 60;\n\t\tpublic static final int HISTORY_GET_TIME_FROM_SHIFT = 24*60*60; // -24h\n\t\tpublic static final int HISTORY_GET_LIMIT = 8000;\n\t\tpublic static final int HOSTGROUP_GET_LIMIT = 200;\n\t\tpublic static final int HOST_GET_LIMIT = 300;\n\t\tpublic static final int ITEM_GET_LIMIT = 200;\n\t\tpublic static final int TRIGGER_GET_LIMIT = 100;\n\t\tpublic static final int EVENT_GET_TIME_FROM_SHIFT = 7*24*60*60; // -7 days\n\t\tpublic static final int CACHE_LIFETIME_APPLICATIONS = 2*24*60*60; // 2 days\n\t\tpublic static final int CACHE_LIFETIME_EVENTS = 120;\n\t\tpublic static final int CACHE_LIFETIME_HISTORY_DETAILS = 4*60;\n\t\tpublic static final int CACHE_LIFETIME_HOST_GROUPS = 7*24*60*60;\n\t\tpublic static final int CACHE_LIFETIME_HOSTS = 2*24*60*60;\n\t\tpublic static final int CACHE_LIFETIME_SCREENS = 2*24*60*60;\n\t\tpublic static final int CACHE_LIFETIME_ITEMS = 4*60;\n\t\tpublic static final int CACHE_LIFETIME_TRIGGERS = 2*60;\n\t\tpublic static final long STATUS_SHOW_TRIGGER_TIME = 14*24*60*60;\n\t\tpublic static final int HTTP_CONNECTION_TIMEOUT = 30000;\n\t}\n\n\tprivate final DefaultHttpClient httpClient;\n\tprivate final SQLiteDatabase zabbixLocalDB;\n\tprivate String url;\n\tprivate String token;\n\tprivate final Context context;\n\tprivate int _transactionStack;\n\tprivate JsonParser lastStream;\n\tprivate int transformProgressStart;\n\tprivate int transformProgressEnd;\n\tprivate boolean _notAuthorizedRetry;\n\tprivate boolean isVersion2 = true;\n\t/**\n\t * The API version. From 1.8.3 (maybe earlier) to 2.0 (excluded), this was 1.3. With 2.0, it changed to 1.4. \n\t * Finally, since 2.0.4, the API version matches the program version.\n\t */\n\tprivate String apiVersion = \"\";\n\n\t/**\n\t * init\n\t * @param context android context\n\t * @param zabbixLocalDB sqlite\n\t */\n\tpublic ZabbixService(Context context, SQLiteDatabase zabbixLocalDB) {\n\t\tClientConnectionManager ccm = null;\n\t\tHttpParams params = null;\n\n\t\ttry {\n\t\t\tSharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(context);\n\t\t\tif (prefs.getBoolean(\"zabbix_trust_all_ssl_ca\", false)) {\n\t\t\t\tKeyStore trustStore = KeyStore.getInstance(KeyStore.getDefaultType());\n\t\t\t\ttrustStore.load(null, null);\n\n\t\t\t\tSSLSocketFactory sf = new CustomSSLSocketFactory(trustStore);\n\t\t\t\tsf.setHostnameVerifier(SSLSocketFactory.ALLOW_ALL_HOSTNAME_VERIFIER);\n\n\t\t\t\tparams = new BasicHttpParams();\n\t\t\t\tHttpProtocolParams.setVersion(params, HttpVersion.HTTP_1_1);\n\t\t\t\tHttpProtocolParams.setContentCharset(params, HTTP.UTF_8);\n\n\t\t\t\tSchemeRegistry registry = new SchemeRegistry();\n\t\t\t\tregistry.register(new Scheme(\"http\", PlainSocketFactory.getSocketFactory(), 80));\n\t\t\t\tregistry.register(new Scheme(\"https\", sf, 443));\n\n\t\t\t\tccm = new ThreadSafeClientConnManager(params, registry);\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\t// ignore for unit test\n\t\t}\n\n\t\tif (ccm == null || params == null) {\n\t\t\thttpClient = new DefaultHttpClient();\n\t\t} else {\n\t\t\thttpClient = new DefaultHttpClient(ccm, params);\n\t\t}\n\n\t\t// if applicable http auth\n\t\ttry {\n\t\t\tSharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(context);\n\t\t\tif (prefs.getBoolean(\"http_auth_enabled\", false)) {\n\t\t\t\tString user = prefs.getString(\"http_auth_username\", \"\");\n\t\t\t\tString pwd = prefs.getString(\"http_auth_password\", \"\");\n\t\t\t\thttpClient.getCredentialsProvider().setCredentials(AuthScope.ANY, new UsernamePasswordCredentials(user, pwd));\n\t\t\t}\n\t\t} catch (java.lang.UnsupportedOperationException e1) {\n\t\t\t// for unit test\n\t\t}\n\n\t\tparams = httpClient.getParams();\n\t\tHttpClientParams.setRedirecting(params, true); // redirecting\n\t\tHttpConnectionParams.setConnectionTimeout(params, ZabbixConfig.HTTP_CONNECTION_TIMEOUT);\n\t\tthis.context = context;\n\t\tthis.zabbixLocalDB = zabbixLocalDB;\n\t}\n\n\t/**\n\t * counts the sql inserts/updates and do a transaction commit to save the memory\n\t */\n\tprivate void _commitTransactionIfRecommended() {\n\t\tif (_transactionStack++ > 50) {\n\t\t\t_endTransaction();\n\t\t\t_startTransaction();\n\t\t}\n\t}\n\n\t/**\n\t * commit sql transaction\n\t */\n\tpublic void _endTransaction() {\n\t\tif (zabbixLocalDB.inTransaction()) {\n\t\t\tzabbixLocalDB.setTransactionSuccessful();\n\t\t\tzabbixLocalDB.endTransaction();\n\t\t}\n\t}\n\n\t/**\n\t * zabbix api call. data will be parsed as json object on-the-fly.\n\t * Caution: use this only for api calls with a small return data.\n\t * @param method\n\t * @param params\n\t * @return\n\t * @throws ClientProtocolException\n\t * @throws IOException\n\t * @throws JSONException\n\t * @throws HttpAuthorizationRequiredException\n\t * @throws NoAPIAccessException\n\t */\n\tprivate JSONObject _queryBuffer(String method, JSONObject params) throws ClientProtocolException, IOException, JSONException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\tHttpPost post = new HttpPost(url);\n\t\tpost.addHeader(\"Content-Type\", \"application/json; charset=utf-8\");\n\n\t\tString json =\n\t\t\t\"{\" +\n\t\t\t\"\t\\\"jsonrpc\\\" : \\\"2.0\\\",\" +\n\t\t\t\"\t\\\"method\\\" : \\\"\"+method+\"\\\",\" +\n\t\t\t\"\t\\\"params\\\" : \"+params.toString()+\",\" +\n\t\t\t\"\t\\\"auth\\\" : \"+(token==null?\"null\":'\"'+token+'\"')+\",\" +\n\t\t\t\"\t\\\"id\\\" : 0\" +\n\t\t\t\"}\";\n\n\t\tpost.setEntity(new StringEntity(json, \"UTF-8\"));\n\t\ttry {\n\t\t\tHttpResponse resp = httpClient.execute(post);\n\t\t\tif (resp.getStatusLine().getStatusCode() == 401) {\n\t\t\t\t// http auth failed\n\t\t\t\tthrow new HttpAuthorizationRequiredException();\n\t\t\t} else if (resp.getStatusLine().getStatusCode() == 412) {\n\t\t\t\t\t// Precondition failed / Looks like Zabbix 1.8.2\n\t\t\t\tthrow new PreconditionFailedException();\n\t\t\t} else if (resp.getStatusLine().getStatusCode() == 404) {\n\t\t\t\t// file not found\n\t\t\t\tthrow new IOException(resp.getStatusLine().getStatusCode()+\" \"+resp.getStatusLine().getReasonPhrase());\n\t\t\t} else {\n\t\t\t\tLog.d(\"ZabbixService\", resp.getStatusLine().getStatusCode()+\" \"+resp.getStatusLine().getReasonPhrase());\n\t\t\t}\n\t\t\tStringBuilder total = new StringBuilder();\n\t\t\tBufferedReader rd = new BufferedReader(new InputStreamReader(resp.getEntity().getContent()));\n\t\t\tint chr;\n\t\t\twhile ((chr = rd.read()) != -1) {\n\t\t\t\ttotal.append((char) chr);\n\t\t\t}\n\t\t\tJSONObject result = new JSONObject(total.toString());\n\t\t\ttry {\n\t\t\t\tif (result.getJSONObject(\"error\") != null) {\n\t\t\t\t\tif (result.getJSONObject(\"error\").getString(\"data\").equals(\"No API access\")) {\n\t\t\t\t\t\tthrow new NoAPIAccessException();\n\t\t\t\t\t} else throw new RuntimeException(result.getJSONObject(\"error\").toString());\n\t\t\t\t}\n\t\t\t\tif (result.getString(\"data\").equals(\"Not authorized\")) {\n\t\t\t\t\t// first do a new auth and then try the same api call again\n\t\t\t\t\tif (authenticate() && !_notAuthorizedRetry) {\n\t\t\t\t\t\t_notAuthorizedRetry = true;\n\t\t\t\t\t\tJSONObject r = _queryBuffer(method, params);\n\t\t\t\t\t\t_notAuthorizedRetry = false;\n\t\t\t\t\t\treturn r;\n\t\t\t\t\t} throw new IllegalStateException(result.toString());\n\t\t\t\t}\n\t\t\t} catch (JSONException e) {\n\t\t\t\t// ignore\n\t\t\t}\n\t\t\treturn result;\n\t\t} catch (SSLPeerUnverifiedException e) {\n\t\t\t// SSL not trusted\n\t\t\tIntent intent = new Intent(ZabbixContentProvider.CONTENT_PROVIDER_INTENT_ACTION);\n\t\t\tintent.putExtra(\"flag\", ZabbixContentProvider.INTENT_FLAG_SSL_NOT_TRUSTED);\n\t\t\tcontext.sendBroadcast(intent);\n\t\t\tthrow e;\n\t\t} catch (IOException e) {\n\t\t\t// internet problem\n\t\t\t// send intent to GUI\n\t\t\tIntent intent = new Intent(ZabbixContentProvider.CONTENT_PROVIDER_INTENT_ACTION);\n\t\t\tintent.putExtra(\"flag\", ZabbixContentProvider.INTENT_FLAG_CONNECTION_FAILED);\n\t\t\tintent.putExtra(\"value\", e.getMessage());\n\t\t\tcontext.sendBroadcast(intent);\n\t\t\tthrow e;\n\t\t}\n\t}\n\n\t/**\n\t * zabbix api call as stream.\n\t * @param method\n\t * @param params\n\t * @return stream im json array wrapper\n\t * @throws JSONException\n\t * @throws IOException\n\t * @throws HttpAuthorizationRequiredException\n\t * @throws NoAPIAccessException\n\t */\n\tprivate JsonArrayOrObjectReader _queryStream(String method, JSONObject params) throws JSONException, IOException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\t// http request\n\t\tHttpPost post = new HttpPost(url);\n\t\tpost.addHeader(\"Content-Type\", \"application/json; charset=utf-8\");\n\n\t\tJSONObject json = new JSONObject()\n\t\t\t.put(\"jsonrpc\", \"2.0\")\n\t\t\t.put(\"method\", method)\n\t\t\t.put(\"params\", params)\n\t\t\t.put(\"auth\", token)\n\t\t\t.put(\"id\", 0);\n\n\t\tLog.d(\"ZabbixService\", \"_queryStream: \"+url);\n\t\tLog.d(\"ZabbixService\", \"_queryStream: \"+json.toString());\n\n\t\tpost.setEntity(new StringEntity(json.toString(), \"UTF-8\"));\n\t\ttry {\n\t\t\tHttpResponse resp = httpClient.execute(post);\n\t\t\tif (resp.getStatusLine().getStatusCode() == 401) {\n\t\t\t\t// http auth failed\n\t\t\t\tthrow new HttpAuthorizationRequiredException();\n\t\t\t}\n\n\t\t\tJsonFactory jsonFac = new JsonFactory();\n\t\t\tJsonParser jp = jsonFac.createJsonParser(resp.getEntity().getContent());\n\t\t\t// store the last stream to close it if an exception will be thrown\n\t\t\tlastStream = jp;\n\t\t\tif (jp.nextToken() != JsonToken.START_OBJECT) {\n\t\t\t\tthrow new IOException(\"Expected data to start with an Object\");\n\t\t\t}\n\t\t\tdo {\n\t\t\t\tjp.nextToken();\n\t\t\t\tif (jp.getCurrentName().equals(\"error\")) {\n\t\t\t\t\tjp.nextToken();\n\t\t\t\t\tString errortxt = \"\";\n\t\t\t\t\twhile (jp.nextToken() != JsonToken.END_OBJECT) {\n\t\t\t\t\t\terrortxt += jp.getText();\n\t\t\t\t\t}\n\t\t\t\t\tif (errortxt.contains(\"No API access\")) {\n\t\t\t\t\t\tthrow new NoAPIAccessException();\n\t\t\t\t\t} else if (errortxt.contains(\"Not authorized\")) {\n\t\t\t\t\t\t// first do a new auth and then try the same api call again\n\t\t\t\t\t\tif (authenticate() && !_notAuthorizedRetry) {\n\t\t\t\t\t\t\t_notAuthorizedRetry = true;\n\t\t\t\t\t\t\tJsonArrayOrObjectReader r = _queryStream(method, params);\n\t\t\t\t\t\t\t_notAuthorizedRetry = false;\n\t\t\t\t\t\t\treturn r;\n\t\t\t\t\t\t} else throw new IllegalStateException(errortxt);\n\t\t\t\t\t} else throw new IllegalStateException(\"JSON API Error: \"+errortxt);\n\t\t\t\t}\n\t\t\t} while (!jp.getCurrentName().equals(\"result\"));\n\n\t\t\t// result array found\n\t\t\tif (jp.nextToken() != JsonToken.START_ARRAY && jp.getCurrentToken() != JsonToken.START_OBJECT) { // go inside the array\n\t\t\t\ttry {\n\t\t\t\t\tLog.d(\"ZabbixService\", \"current token: \"+jp.getCurrentToken());\n\t\t\t\t\tLog.d(\"ZabbixService\", \"current name: \"+jp.getCurrentName());\n\t\t\t\t\tLog.d(\"ZabbixService\", \"get text: \"+jp.getText());\n\t\t\t\t\tLog.d(\"ZabbixService\", \"next value: \"+jp.nextValue());\n\t\t\t\t\tLog.d(\"ZabbixService\", \"next token: \"+jp.nextToken());\n\t\t\t\t\tLog.d(\"ZabbixService\", \"current token: \"+jp.getCurrentToken());\n\t\t\t\t\tLog.d(\"ZabbixService\", \"current name: \"+jp.getCurrentName());\n\t\t\t\t\tLog.d(\"ZabbixService\", \"get text: \"+jp.getText());\n\t\t\t\t} catch (Exception e) {}\n\t\t\t\tthrow new IOException(\"Expected data to start with an Array\");\n\t\t\t}\n\t\t\treturn new JsonArrayOrObjectReader(jp);\n\t\t} catch (SSLPeerUnverifiedException e) {\n\t\t\tthrow e;\n\t\t} catch (IOException e) {\n\t\t\t// internet problem\n\t\t\t// send intent to GUI\n\t\t\tIntent intent = new Intent(ZabbixContentProvider.CONTENT_PROVIDER_INTENT_ACTION);\n\t\t\tintent.putExtra(\"flag\", ZabbixContentProvider.INTENT_FLAG_CONNECTION_FAILED);\n\t\t\tcontext.sendBroadcast(intent);\n\t\t\tthrow e;\n\t\t}\n\t}\n\n\t/**\n\t * begin sql transaction\n\t */\n\tprivate void _startTransaction() {\n\t\tzabbixLocalDB.beginTransaction();\n\t\t_transactionStack = 0;\n\t}\n\n\t/**\n\t * acknowledge zabbix event. Sets ack-flag with comment.\n\t * Caution: This is supported only for Zabbix version >= 1.8.4\n\t * @param eventid\n\t * @param comment\n\t * @return true, success.\n\t * @throws ClientProtocolException\n\t * @throws IOException\n\t * @throws JSONException\n\t * @throws HttpAuthorizationRequiredException\n\t * @throws NoAPIAccessException\n\t */\n\tpublic boolean acknowledgeEvent(String eventid, String comment) throws ClientProtocolException, IOException, JSONException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\t// for GUI unit test, just return true\n\t\tif (comment != null && comment.equals(\"__UNIT_TEST__RETURN_TRUE__\")) return true;\n\n\t\tJSONObject result = _queryBuffer(\n\t\t\t\t\"event.acknowledge\"\n\t\t\t\t, new JSONObject()\n\t\t\t\t\t.put(\"eventids\", new JSONArray().put(eventid))\n\t\t);\n\t\t// it can be an (empty) array\n\t\ttry {\n\t\t\treturn result.getJSONObject(\"result\").getJSONArray(\"eventids\").length() == 1;\n\t\t} catch (JSONException e) {\n\t\t\t// or a json object\n\t\t\treturn result.getJSONObject(\"result\").getJSONObject(\"eventids\").length() == 1;\n\t\t}\n\t}\n\n\t/**\n\t * zabbix auth. user and pwd from app preferences\n\t * @return true success\n\t * @throws ClientProtocolException\n\t * @throws IOException\n\t * @throws JSONException\n\t * @throws HttpAuthorizationRequiredException\n\t * @throws NoAPIAccessException\n\t */\n\tpublic boolean authenticate() throws ClientProtocolException, IOException, JSONException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\tSharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(context);\n\t\tString url = prefs.getString(\"zabbix_url\", \"\").trim();\n\t\tString user = prefs.getString(\"zabbix_username\", \"\").trim();\n\t\tString password = prefs.getString(\"zabbix_password\", \"\");\n\n\t\tthis.url = url+(url.endsWith(\"/\")?\"\":'/')+\"api_jsonrpc.php\";\n\t\tLog.d(\"ZabbixContentProvider\", url+\"//\"+user);\n\n\t\ttry {\n\t\t\tJSONObject result = _queryBuffer(\n\t\t\t\t\t\"user.authenticate\"\n\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t\t.put(\"user\", user)\n\t\t\t\t\t\t.put(\"password\", password)\n\t\t\t);\n\t\t\ttoken = result.getString(\"result\");\n\t\t} catch (JSONException e) {\n\t\t\t// there's no result\n\t\t\te.printStackTrace();\n\t\t} catch (RuntimeException e) {\n\t\t\t// wrong password. token remains null\n\t\t\te.printStackTrace();\n\t\t}\n\t\tif (token != null) {\n\t\t\t// get API version\n\t\t\tJSONObject result = _queryBuffer(\n\t\t\t\t\t\"apiinfo.version\"\n\t\t\t\t\t, new JSONObject()\n\t\t\t);\n\t\t\tapiVersion = result.getString(\"result\");\n\t\t\tisVersion2 = (apiVersion.equals(\"1.4\") || apiVersion.startsWith(\"2\"));\n\t\t\tLog.i(\"ZabbixService\", \"Zabbix API Version: \" + apiVersion);\n\t\t}\n\t\treturn token != null;\n\t}\n\n\t/**\n\t * close the last http stream\n\t */\n\tpublic void closeLastStream() {\n\t\tif (lastStream != null && !lastStream.isClosed()) {\n\t\t\ttry {\n\t\t\t\tlastStream.close();\n\t\t\t} catch (IOException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate void importApplications(long hostid, long itemid, JsonArrayOrObjectReader jsonArray) throws JsonParseException, NumberFormatException, IOException {\n\t\tint num = 0;\n\t\tJsonObjectReader application;\n\t\twhile ((application = jsonArray.next()) != null) {\n\t\t\tApplicationData app = new ApplicationData();\n\t\t\twhile (application.nextValueToken()) {\n\t\t\t\tString propName = application.getCurrentName();\n\t\t\t\tif (propName.equals(ApplicationData.COLUMN_APPLICATIONID)) {\n\t\t\t\t\tapp.set(ApplicationData.COLUMN_APPLICATIONID, Long.parseLong(application.getText()));\n\t\t\t\t} else if (propName.equals(ApplicationData.COLUMN_NAME)) {\n\t\t\t\t\tapp.set(ApplicationData.COLUMN_NAME, application.getText());\n\t\t\t\t} else if (propName.equals(ApplicationData.COLUMN_HOSTID)) {\n\t\t\t\t\tapp.set(ApplicationData.COLUMN_HOSTID, Long.parseLong(application.getText()));\n\t\t\t\t} else {\n\t\t\t\t\tapplication.nextProperty();\n\t\t\t\t}\n\t\t\t}\n\t\t\t// create applications that does not exist\n\t\t\tapp.insert(zabbixLocalDB, ApplicationData.COLUMN_APPLICATIONID);\n\t\t\t_commitTransactionIfRecommended();\n\n\t\t\t// create ApplicationItemRelation\n\t\t\tlong appid = (Long) app.get(ApplicationData.COLUMN_APPLICATIONID);\n\t\t\tApplicationItemRelationData rel = new ApplicationItemRelationData();\n\t\t\trel.set(ApplicationItemRelationData.COLUMN_APPLICATIONID, appid);\n\t\t\trel.set(ApplicationItemRelationData.COLUMN_ITEMID, itemid);\n\t\t\trel.set(ApplicationItemRelationData.COLUMN_HOSTID, hostid);\n\t\t\trel.insert(zabbixLocalDB);\n\t\t\t_commitTransactionIfRecommended();\n\n\t\t\tnum++;\n\t\t}\n\t\tif (num == 0) {\n\t\t\t// if there's no application, the ID #0 must be added (for other)\n\t\t\tApplicationItemRelationData rel = new ApplicationItemRelationData();\n\t\t\trel.set(ApplicationItemRelationData.COLUMN_APPLICATIONID, 0);\n\t\t\trel.set(ApplicationItemRelationData.COLUMN_ITEMID, itemid);\n\t\t\trel.set(ApplicationItemRelationData.COLUMN_HOSTID, hostid);\n\t\t\trel.insert(zabbixLocalDB);\n\n\t\t\t// if #0 \"other\" does not exist yet, it has to be created\n\t\t\tApplicationData app = new ApplicationData();\n\t\t\tapp.set(ApplicationData.COLUMN_APPLICATIONID, 0);\n\t\t\tapp.set(ApplicationData.COLUMN_NAME, \"- \"+context.getResources().getString(R.string.other)+\" -\");\n\t\t\tapp.insert(zabbixLocalDB, ApplicationData.COLUMN_APPLICATIONID);\n\t\t}\n\t}\n\n\t/**\n\t * import the newest event of a trigger\n\t * @param triggerid\n\t * @throws JSONException\n\t * @throws IOException\n\t * @throws HttpAuthorizationRequiredException\n\t * @throws NoAPIAccessException\n\t */\n\tpublic void importEventByTriggerId(String triggerid) throws JSONException, IOException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\tif (!isCached(EventData.TABLE_NAME, \"triggerid=\"+triggerid)) {\n\t\t\t_startTransaction();\n\t\t\tzabbixLocalDB.delete(EventData.TABLE_NAME, EventData.COLUMN_OBJECTID+\"=\"+triggerid, null);\n\n\t\t\tJSONObject params = new JSONObject()\n\t\t\t\t.put(\"output\", \"extend\")\n\t\t\t\t.put(isVersion2?\"selectHosts\":\"select_hosts\", \"extend\")\n\t\t\t\t.put(\"triggerids\", new JSONArray().put(triggerid))\n\t\t\t\t.put(\"limit\", 1)\n\t\t\t\t.put(\"source\", 0);\n\t\t\tif (!isVersion2) {\n\t\t\t\tparams.put(\"sortfield\", \"clock\")\n\t\t\t\t\t.put(\"sortorder\", \"DESC\");\n\t\t\t}\n\n\t\t\tJsonArrayOrObjectReader events = _queryStream(\n\t\t\t\t\t\"event.get\"\n\t\t\t\t\t, params\n\t\t\t);\n\t\t\timportEvents(events, null);\n\t\t\tevents.close();\n\n\t\t\tsetCached(EventData.TABLE_NAME, \"triggerid=\"+triggerid, ZabbixConfig.CACHE_LIFETIME_EVENTS);\n\t\t\t_endTransaction();\n\t\t}\n\t}\n\n\t/**\n\t * import the newest events\n\t * @throws ClientProtocolException\n\t * @throws IOException\n\t * @throws JSONException\n\t * @throws HttpAuthorizationRequiredException\n\t * @throws NoAPIAccessException\n\t */\n\tpublic void importEvents() throws ClientProtocolException, IOException, JSONException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\tif (!isCached(EventData.TABLE_NAME, null)) {\n\t\t\t_startTransaction();\n\t\t\tzabbixLocalDB.delete(EventData.TABLE_NAME, null, null);\n\t\t\tzabbixLocalDB.delete(TriggerData.TABLE_NAME, null, null);\n\t\t\tzabbixLocalDB.delete(CacheData.TABLE_NAME, CacheData.COLUMN_KIND+\"='\"+EventData.TABLE_NAME+\"'\", null);\n\t\t\tzabbixLocalDB.delete(CacheData.TABLE_NAME, CacheData.COLUMN_KIND+\"='\"+TriggerData.TABLE_NAME+\"'\", null);\n\n\t\t\tint numEvents = ZabbixConfig.EVENTS_GET_LIMIT;\n\n\t\t\tJSONObject params = new JSONObject()\n\t\t\t\t.put(\"output\", \"extend\")\n\t\t\t\t.put(\"limit\", ZabbixConfig.EVENTS_GET_LIMIT)\n\t\t\t\t.put(isVersion2?\"selectHosts\":\"select_hosts\", \"extend\")\n\t\t\t\t.put(isVersion2?\"selectTriggers\":\"select_triggers\", \"extend\")\n\t\t\t\t.put(\"source\", 0)\n\t\t\t\t.put(\"time_from\", (new Date().getTime()/1000) - ZabbixConfig.EVENT_GET_TIME_FROM_SHIFT);\n\t\t\tif (!isVersion2) {\n\t\t\t\t// in Zabbix version <2.0, this is not default\n\t\t\t\tparams.put(\"sortfield\", \"clock\")\n\t\t\t\t\t.put(\"sortorder\", \"DESC\");\n\t\t\t}\n\t\t\tJsonArrayOrObjectReader events = _queryStream(\n\t\t\t\t\t\"event.get\"\n\t\t\t\t\t, params\n\t\t\t);\n\t\t\timportEvents(events, numEvents);\n\t\t\tevents.close();\n\n\t\t\tsetCached(EventData.TABLE_NAME, null, ZabbixConfig.CACHE_LIFETIME_EVENTS);\n\t\t\t_endTransaction();\n\t\t}\n\t}\n\n\t/**\n\t * @param events stream\n\t * @param numEvents if null, no progressbar-update AND only isert, if it does not exist. If !null, progressbar-update AND always insert without checking\n\t * @throws JsonParseException\n\t * @throws IOException\n\t */\n\tprivate void importEvents(JsonArrayOrObjectReader events, Integer numEvents) throws JsonParseException, IOException {\n\t\tint i=0;\n\t\tJsonObjectReader eventReader;\n\t\twhile ((eventReader = events.next()) != null) {\n\t\t\tEventData e = new EventData();\n\t\t\twhile (eventReader.nextValueToken()) {\n\t\t\t\tString propName = eventReader.getCurrentName();\n\t\t\t\tif (propName.equals(\"hosts\")) {\n\t\t\t\t\t// import hosts\n\t\t\t\t\tString hostnames = (String) importHosts(eventReader.getJsonArray(), null)[0];\n\t\t\t\t\t// store hosts namen\n\t\t\t\t\te.set(EventData.COLUMN_HOSTS, hostnames);\n\t\t\t\t} else if (propName.equals(\"triggers\")) {\n\t\t\t\t\t// import triggers\n\t\t\t\t\timportTriggers(eventReader.getJsonArray());\n\t\t\t\t} else if (propName.equals(EventData.COLUMN_EVENTID)) {\n\t\t\t\t\te.set(EventData.COLUMN_EVENTID, Long.parseLong(eventReader.getText()));\n\t\t\t\t} else if (propName.equals(EventData.COLUMN_CLOCK)) {\n\t\t\t\t\te.set(EventData.COLUMN_CLOCK, Integer.parseInt(eventReader.getText()));\n\t\t\t\t} else if (propName.equals(EventData.COLUMN_OBJECTID)) {\n\t\t\t\t\te.set(EventData.COLUMN_OBJECTID, Long.parseLong(eventReader.getText()));\n\t\t\t\t} else if (propName.equals(EventData.COLUMN_ACK)) {\n\t\t\t\t\te.set(EventData.COLUMN_ACK, Integer.parseInt(eventReader.getText()) == 1);\n\t\t\t\t} else if (propName.equals(EventData.COLUMN_VALUE)) {\n\t\t\t\t\te.set(EventData.COLUMN_VALUE, Integer.parseInt(eventReader.getText()));\n\t\t\t\t} else {\n\t\t\t\t\teventReader.nextProperty();\n\t\t\t\t}\n\t\t\t}\n\t\t\t// event is parsed and can be inserted into the db\n\t\t\tif (numEvents == null) {\n\t\t\t\te.insert(zabbixLocalDB, EventData.COLUMN_EVENTID);\n\t\t\t} else {\n\t\t\t\te.insert(zabbixLocalDB);\n\t\t\t\tif (++i % 10 == 0) {\n\t\t\t\t\tshowProgress(i*100/numEvents);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t_commitTransactionIfRecommended();\n\t\t}\n\t}\n\n\t/**\n\t * import graph items\n\t *\n\t * @param graphItems\n\t * @return true, if graphid column has to be updated from -1 to the correct graphid later.\n\t * @throws JsonParseException\n\t * @throws NumberFormatException\n\t * @throws IOException\n\t */\n\tprivate boolean importGraphItems(JsonArrayOrObjectReader graphItems) throws JsonParseException, NumberFormatException, IOException {\n\t\tboolean mustSetGraphid = false;\n\t\tJsonObjectReader graphItemReader;\n\t\twhile ((graphItemReader = graphItems.next()) != null) {\n\t\t\tGraphItemData gi = new GraphItemData();\n\t\t\twhile (graphItemReader.nextValueToken()) {\n\t\t\t\tString propName = graphItemReader.getCurrentName();\n\t\t\t\tif (propName.equals(\"gitemid\")) {\n\t\t\t\t\tgi.set(GraphItemData.COLUMN_GRAPHITEMID, Long.parseLong(graphItemReader.getText()));\n\t\t\t\t} else if (propName.equals(GraphItemData.COLUMN_GRAPHID)) {\n\t\t\t\t\tgi.set(GraphItemData.COLUMN_GRAPHID, Long.parseLong(graphItemReader.getText()));\n\t\t\t\t} else if (propName.equals(GraphItemData.COLUMN_ITEMID)) {\n\t\t\t\t\tgi.set(GraphItemData.COLUMN_ITEMID, Long.parseLong(graphItemReader.getText()));\n\t\t\t\t} else if (propName.equals(GraphItemData.COLUMN_COLOR)) {\n\t\t\t\t\t// hex string => color int\n\t\t\t\t\tgi.set(GraphItemData.COLUMN_COLOR, Color.parseColor(\"#\"+graphItemReader.getText()));\n\t\t\t\t} else {\n\t\t\t\t\tgraphItemReader.nextProperty();\n\t\t\t\t}\n\t\t\t}\n\t\t\t// if graphid-column was not set, this must be done later. temporary graphid=-1\n\t\t\tif (gi.get(GraphItemData.COLUMN_GRAPHID) == null) {\n\t\t\t\tgi.set(GraphItemData.COLUMN_GRAPHID, -1);\n\t\t\t\tmustSetGraphid = true;\n\t\t\t}\n\t\t\tgi.insert(zabbixLocalDB);\n\t\t}\n\t\treturn mustSetGraphid;\n\t}\n\n\tpublic void importGraphsForScreen(long screenid) throws ClientProtocolException, IOException, JSONException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\tif (!isCached(GraphData.TABLE_NAME, \"screenid=\"+screenid)) {\n\t\t\t_startTransaction();\n\n\t\t\t// collect all graphids\n\t\t\tSet<Long> graphids = new HashSet<Long>();\n\t\t\tCursor cur = zabbixLocalDB.query(ScreenItemData.TABLE_NAME, null, ScreenItemData.COLUMN_SCREENID+\"=\"+screenid, null, null, null, null);\n\t\t\twhile (cur.moveToNext()) {\n\t\t\t\tgraphids.add(cur.getLong(cur.getColumnIndex(ScreenItemData.COLUMN_RESOURCEID)));\n\t\t\t}\n\n\t\t\t// delete old graphs\n\t\t\tString str_graphids = graphids.toString().replace(\"[\", \"\").replace(\"]\", \"\");\n\t\t\tif (str_graphids.length()>0) {\n\t\t\t\tzabbixLocalDB.delete(GraphData.TABLE_NAME, GraphData.COLUMN_GRAPHID+\" IN (\"+str_graphids+\")\", null);\n\t\t\t\tzabbixLocalDB.delete(GraphItemData.TABLE_NAME, GraphItemData.COLUMN_GRAPHID+\" IN (\"+str_graphids+\")\", null);\n\t\t\t}\n\t\t\tzabbixLocalDB.delete(CacheData.TABLE_NAME, CacheData.COLUMN_KIND+\"='\"+GraphData.TABLE_NAME+\"' AND \"+CacheData.COLUMN_FILTER+\"='screenid=\"+screenid+'\\'', null);\n\n\t\t\tJsonArrayOrObjectReader graphs = _queryStream(\n\t\t\t\t\t\"graph.get\"\n\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t\t.put(isVersion2?\"selectGraphItems\":\"select_graph_items\", \"extend\")\n\t\t\t\t\t\t.put(isVersion2?\"selectItems\":\"select_items\", \"extend\")\n\t\t\t\t\t\t.put(\"output\", \"extend\")\n\t\t\t\t\t\t.put(\"graphids\", new JSONArray(graphids))\n\t\t\t);\n\t\t\tJsonObjectReader graphReader;\n\t\t\twhile ((graphReader = graphs.next()) != null) {\n\t\t\t\tboolean mustSetGraphid = false;\n\t\t\t\tGraphData scr = new GraphData();\n\t\t\t\twhile (graphReader.nextValueToken()) {\n\t\t\t\t\tString propName = graphReader.getCurrentName();\n\t\t\t\t\tif (propName.equals(GraphData.COLUMN_GRAPHID)) {\n\t\t\t\t\t\tscr.set(GraphData.COLUMN_GRAPHID, Long.parseLong(graphReader.getText()));\n\t\t\t\t\t} else if (propName.equals(GraphData.COLUMN_NAME)) {\n\t\t\t\t\t\tscr.set(GraphData.COLUMN_NAME, graphReader.getText());\n\t\t\t\t\t} else if (propName.equals(\"gitems\")) {\n\t\t\t\t\t\tmustSetGraphid = importGraphItems(graphReader.getJsonArray());\n\t\t\t\t\t} else if (propName.equals(\"items\")) {\n\t\t\t\t\t\timportItems(graphReader.getJsonArray(), 0, true);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tgraphReader.nextProperty();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tscr.insert(zabbixLocalDB);\n\t\t\t\tif (mustSetGraphid) {\n\t\t\t\t\tContentValues values = new ContentValues(1);\n\t\t\t\t\tvalues.put(GraphItemData.COLUMN_GRAPHID, (Long) scr.get(GraphData.COLUMN_GRAPHID));\n\t\t\t\t\tzabbixLocalDB.update(\n\t\t\t\t\t\t\tGraphItemData.TABLE_NAME\n\t\t\t\t\t\t\t, values\n\t\t\t\t\t\t\t, GraphItemData.COLUMN_GRAPHID+\"=-1\"\n\t\t\t\t\t\t\t, null);\n\t\t\t\t}\n\t\t\t}\n\t\t\tgraphs.close();\n\n\t\t\tsetCached(GraphData.TABLE_NAME, \"screenid=\"+screenid, ZabbixConfig.CACHE_LIFETIME_SCREENS);\n\t\t\t_endTransaction();\n\t\t}\n\t}\n\n\tpublic void importHistoryDetails(String itemid) throws ClientProtocolException, IOException, JSONException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\tif (!isCached(HistoryDetailData.TABLE_NAME, itemid)) {\n\t\t\t_startTransaction();\n\t\t\tzabbixLocalDB.delete(HistoryDetailData.TABLE_NAME, HistoryDetailData.COLUMN_ITEMID+\"=\"+itemid, null);\n\n\t\t\t// the past 2 hours\n\t\t\tlong time_till = new Date().getTime() / 1000;\n\t\t\tlong time_from = time_till - ZabbixConfig.HISTORY_GET_TIME_FROM_SHIFT;\n\n\t\t\t// Workaround: historydetails only comes if you use the correct \"history\"-parameter.\n\t\t\t// this parameter can be \"null\" or a number 0-4. Because we don't know when to use which,\n\t\t\t// we try them all, until we get results.\n\t\t\tInteger historytype = null;\n\t\t\tJSONObject result = _queryBuffer(\n\t\t\t\t\t\"history.get\"\n\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t\t.put(\"limit\", 1)\n\t\t\t\t\t\t.put(\"history\", historytype) // for integer ?\n\t\t\t\t\t\t.put(\"itemids\", new JSONArray().put(itemid))\n\t\t\t\t\t\t.put(\"time_from\", time_from)\n\t\t\t);\n\n\t\t\tJSONArray testHistorydetails = result.getJSONArray(\"result\");\n\t\t\tif (testHistorydetails.length() == 0) {\n\t\t\t\thistorytype = -1;\n\t\t\t\twhile (testHistorydetails.length() == 0 && ++historytype <= 4) {\n\t\t\t\t\t// if we get an empty array, we try another history parameter\n\t\t\t\t\tresult = _queryBuffer(\n\t\t\t\t\t\t\t\"history.get\"\n\t\t\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t\t\t\t.put(\"output\", \"extend\")\n\t\t\t\t\t\t\t\t.put(\"limit\", 1)\n\t\t\t\t\t\t\t\t.put(\"history\", historytype)\n\t\t\t\t\t\t\t\t.put(\"itemids\", new JSONArray().put(itemid))\n\t\t\t\t\t\t\t\t.put(\"time_from\", time_from)\n\t\t\t\t\t);\n\t\t\t\t\ttestHistorydetails = result.getJSONArray(\"result\");\n\t\t\t\t}\n\t\t\t}\n\t\t\t// correct historytype found and there are data\n\t\t\tif (testHistorydetails.length() > 0) {\n\t\t\t\t// count of the entries cannot be detected (zabbix bug),\n\t\t\t\t// so we use a fiction\n\t\t\t\tint numDetails = 400;\n\t\t\t\tint curI=0;\n\t\t\t\tJsonArrayOrObjectReader historydetails = _queryStream(\n\t\t\t\t\t\t\"history.get\"\n\t\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t\t\t.put(\"output\", \"extend\")\n\t\t\t\t\t\t\t.put(\"limit\", ZabbixConfig.HISTORY_GET_LIMIT)\n\t\t\t\t\t\t\t.put(\"history\", historytype)\n\t\t\t\t\t\t\t.put(\"itemids\", new JSONArray().put(itemid))\n\t\t\t\t\t\t\t.put(\"time_from\", time_from)\n\t\t\t\t\t\t\t.put(\"sortfield\", \"clock\")\n\t\t\t\t\t\t\t.put(\"sortorder\", \"DESC\")\n\t\t\t\t);\n\t\t\t\tJsonObjectReader historydetail;\n\t\t\t\ttry {\n\t\t\t\t\tint selI = 0;\n\t\t\t\t\twhile ((historydetail = historydetails.next()) != null) {\n\t\t\t\t\t\t// save only every 20th\n\t\t\t\t\t\tif (selI++ % 20 != 0) {\n\t\t\t\t\t\t\twhile (historydetail.nextValueToken()) {\n\t\t\t\t\t\t\t\thistorydetail.nextProperty();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tHistoryDetailData h = new HistoryDetailData();\n\t\t\t\t\t\twhile (historydetail.nextValueToken()) {\n\t\t\t\t\t\t\tString propName = historydetail.getCurrentName();\n\t\t\t\t\t\t\tif (propName.equals(HistoryDetailData.COLUMN_CLOCK)) {\n\t\t\t\t\t\t\t\th.set(HistoryDetailData.COLUMN_CLOCK, Integer.parseInt(historydetail.getText()));\n\t\t\t\t\t\t\t} else if (propName.equals(HistoryDetailData.COLUMN_ITEMID)) {\n\t\t\t\t\t\t\t\th.set(HistoryDetailData.COLUMN_ITEMID, Long.parseLong(historydetail.getText()));\n\t\t\t\t\t\t\t} else if (propName.equals(HistoryDetailData.COLUMN_VALUE)) {\n\t\t\t\t\t\t\t\th.set(HistoryDetailData.COLUMN_VALUE, Double.parseDouble(historydetail.getText()));\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\thistorydetail.nextProperty();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\th.insert(zabbixLocalDB);\n\t\t\t\t\t\tif (++curI % 10 == 0) {\n\t\t\t\t\t\t\tshowProgress(Math.min(curI*100/numDetails, 84));\n\t\t\t\t\t\t}\n\t\t\t\t\t\t_commitTransactionIfRecommended();\n\t\t\t\t\t}\n\t\t\t\t} catch (NumberFormatException e) {\n\t\t\t\t\t// data are unuseable, e.g. because it's a string\n\t\t\t\t}\n\t\t\t\thistorydetails.close();\n\t\t\t}\n\t\t\tsetCached(HistoryDetailData.TABLE_NAME, itemid, ZabbixConfig.CACHE_LIFETIME_HISTORY_DETAILS);\n\t\t\t_endTransaction();\n\t\t}\n\t}\n\n\tprivate long importHostGroups(JsonArrayOrObjectReader jsonArray) throws JsonParseException, IOException {\n\t\tlong firstHostGroupId = -1;\n\t\tJsonObjectReader hostReader;\n\t\twhile ((hostReader = jsonArray.next()) != null) {\n\t\t\tHostGroupData h = new HostGroupData();\n\t\t\twhile (hostReader.nextValueToken()) {\n\t\t\t\tString propName = hostReader.getCurrentName();\n\t\t\t\tif (propName.equals(HostGroupData.COLUMN_GROUPID)) {\n\t\t\t\t\tlong id = Long.parseLong(hostReader.getText());\n\t\t\t\t\tif (firstHostGroupId == -1) firstHostGroupId = id;\n\t\t\t\t\th.set(HostGroupData.COLUMN_GROUPID, id);\n\t\t\t\t} else if (propName.equals(HostGroupData.COLUMN_NAME)) {\n\t\t\t\t\th.set(HostGroupData.COLUMN_NAME, hostReader.getText());\n\t\t\t\t} else {\n\t\t\t\t\thostReader.nextProperty();\n\t\t\t\t}\n\t\t\t}\n\t\t\th.insert(zabbixLocalDB, HostGroupData.COLUMN_GROUPID);\n\t\t\t_commitTransactionIfRecommended();\n\t\t}\n\n\t\treturn firstHostGroupId;\n\t}\n\n\t/**\n\t * import the hosts from stream\n\t * @param jsonArray stream\n\t * @param numHosts count of hosts for progressbar. null if unknown.\n\t * @return Object[] {(String) comma-separated all Hostnames, (Long) 1. host id}\n\t * @throws JsonParseException\n\t * @throws IOException\n\t */\n\tprivate Object[] importHosts(JsonArrayOrObjectReader jsonArray, Integer numHosts) throws JsonParseException, IOException {\n\t\tList<String> hostnames = new ArrayList<String>();\n\t\tlong firstHostId = -1;\n\t\tJsonObjectReader hostReader;\n\t\tint i=0;\n\t\twhile ((hostReader = jsonArray.next()) != null) {\n\t\t\tHostData h = new HostData();\n\t\t\twhile (hostReader.nextValueToken()) {\n\t\t\t\tString propName = hostReader.getCurrentName();\n\t\t\t\tif (propName.equals(HostData.COLUMN_HOSTID)) {\n\t\t\t\t\th.set(HostData.COLUMN_HOSTID, Long.parseLong(hostReader.getText()));\n\t\t\t\t\tif (firstHostId == -1) {\n\t\t\t\t\t\tfirstHostId = (Long) h.get(HostData.COLUMN_HOSTID);\n\t\t\t\t\t}\n\t\t\t\t} else if (propName.equals(HostData.COLUMN_HOST)) {\n\t\t\t\t\tString host = hostReader.getText();\n\t\t\t\t\thostnames.add(host);\n\t\t\t\t\th.set(HostData.COLUMN_HOST, host);\n\t\t\t\t} else if (propName.equals(\"groups\")) {\n\t\t\t\t\tlong groupid = importHostGroups(hostReader.getJsonArray());\n\t\t\t\t\tif (groupid != -1) {\n\t\t\t\t\t\th.set(HostData.COLUMN_GROUPID, groupid);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\thostReader.nextProperty();\n\t\t\t\t}\n\t\t\t}\n\t\t\t// host without group will get group #0 (other)\n\t\t\tif (h.get(HostData.COLUMN_GROUPID) == null) {\n\t\t\t\th.set(HostData.COLUMN_GROUPID, 0);\n\t\t\t\t// create \"other\" hostgroup #1\n\t\t\t\tHostGroupData hg = new HostGroupData();\n\t\t\t\thg.set(HostGroupData.COLUMN_GROUPID, 0);\n\t\t\t\thg.set(HostGroupData.COLUMN_NAME, \"- \"+context.getResources().getString(R.string.other)+\" -\");\n\t\t\t\thg.insert(zabbixLocalDB, HostGroupData.COLUMN_GROUPID);\n\t\t\t}\n\t\t\th.insert(zabbixLocalDB, HostData.COLUMN_HOSTID);\n\t\t\tif (numHosts != null && ++i % 10 == 0) {\n\t\t\t\tshowProgress(i*100/numHosts);\n\t\t\t}\n\t\t\t_commitTransactionIfRecommended();\n\t\t}\n\n\t\treturn new Object[] {hostnames.toString().replaceAll(\"[\\\\[\\\\]]\", \"\"), firstHostId};\n\t}\n\n\tpublic void importHostsAndGroups() throws JSONException, IOException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\tif (!isCached(HostData.TABLE_NAME, null)) {\n\t\t\t_startTransaction();\n\t\t\tzabbixLocalDB.delete(HostData.TABLE_NAME, null, null);\n\t\t\tzabbixLocalDB.delete(HostGroupData.TABLE_NAME, null, null);\n\n\t\t\t// get count of hosts\n\t\t\tJSONObject result = _queryBuffer(\n\t\t\t\t\t\"host.get\"\n\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t\t.put(\"countOutput\", 1)\n\t\t\t\t\t\t.put(\"limit\", ZabbixConfig.HOST_GET_LIMIT)\n\t\t\t\t\t\t.put(isVersion2?\"selectGroups\":\"select_groups\", \"extend\")\n\t\t\t);\n\t\t\tint numHosts = result.getInt(\"result\");\n\t\t\tJsonArrayOrObjectReader hosts = _queryStream(\n\t\t\t\t\t\"host.get\"\n\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t\t.put(\"output\", \"extend\")\n\t\t\t\t\t\t.put(\"limit\", ZabbixConfig.HOST_GET_LIMIT)\n\t\t\t\t\t\t.put(isVersion2?\"selectGroups\":\"select_groups\", \"extend\")\n\t\t\t);\n\t\t\timportHosts(hosts, numHosts);\n\t\t\thosts.close();\n\n\t\t\tsetCached(HostData.TABLE_NAME, null, ZabbixConfig.CACHE_LIFETIME_HOSTS);\n\t\t\t_endTransaction();\n\t\t}\n\t}\n\n\t/**\n\t * import items from stream.\n\t * @param items stream\n\t * @param numItems count for progressbar, if 0 no progressbarupdate\n\t * @param checkBeforeInsert if true, only make an insert if item does not exist\n\t * @return the first item id\n\t * @throws JsonParseException\n\t * @throws IOException\n\t */\n\tprivate long importItems(JsonArrayOrObjectReader items, int numItems, boolean checkBeforeInsert) throws JsonParseException, IOException {\n\t\tlong firstItemId = -1;\n\t\tint curI=0;\n\t\tJsonObjectReader itemReader;\n\t\twhile ((itemReader = items.next()) != null) {\n\t\t\tItemData i = new ItemData();\n\t\t\tString key_ = null;\n\t\t\twhile (itemReader.nextValueToken()) {\n\t\t\t\tString propName = itemReader.getCurrentName();\n\t\t\t\tif (propName.equals(ItemData.COLUMN_ITEMID)) {\n\t\t\t\t\ti.set(ItemData.COLUMN_ITEMID, Long.parseLong(itemReader.getText()));\n\t\t\t\t\tif (firstItemId == -1) {\n\t\t\t\t\t\tfirstItemId = (Long) i.get(ItemData.COLUMN_ITEMID);\n\t\t\t\t\t}\n\t\t\t\t} else if (propName.equals(ItemData.COLUMN_HOSTID)) {\n\t\t\t\t\ti.set(ItemData.COLUMN_HOSTID, Long.parseLong(itemReader.getText()));\n\t\t\t\t} else if (propName.equals(ItemData.COLUMN_DESCRIPTION) || propName.equals(\"name\")) {\n\t\t\t\t\t// since zabbix 2.x is the name of the item \"name\"\n\t\t\t\t\t// before zabbix 2.x the name field was \"description\"\n\t\t\t\t\tif (isVersion2 && propName.equals(\"name\")) {\n\t\t\t\t\t\ti.set(ItemData.COLUMN_DESCRIPTION, itemReader.getText());\n\t\t\t\t\t} else if (!isVersion2) {\n\t\t\t\t\t\ti.set(ItemData.COLUMN_DESCRIPTION, itemReader.getText());\n\t\t\t\t\t}\n\t\t\t\t} else if (propName.equals(ItemData.COLUMN_LASTCLOCK)) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\ti.set(ItemData.COLUMN_LASTCLOCK, Integer.parseInt(itemReader.getText()));\n\t\t\t\t\t} catch (NumberFormatException e) {\n\t\t\t\t\t\t// ignore\n\t\t\t\t\t}\n\t\t\t\t} else if (propName.equals(ItemData.COLUMN_LASTVALUE)) {\n\t\t\t\t\ti.set(ItemData.COLUMN_LASTVALUE, itemReader.getText());\n\t\t\t\t} else if (propName.equals(ItemData.COLUMN_UNITS)) {\n\t\t\t\t\ti.set(ItemData.COLUMN_UNITS, itemReader.getText());\n\t\t\t\t} else if (propName.equals(\"key_\")) {\n\t\t\t\t\tkey_ = itemReader.getText();\n\t\t\t\t} else if (propName.equals(\"applications\")) {\n\t\t\t\t\t// at this point itemid and hostid is unknown\n\t\t\t\t\t// because of this, all applicationrelations will be saved with itemid and hostid \"-1\".\n\t\t\t\t\t// later the IDs will be replaced with the correct\n\t\t\t\t\timportApplications(-1, -1, itemReader.getJsonArray());\n\t\t\t\t} else {\n\t\t\t\t\titemReader.nextProperty();\n\t\t\t\t}\n\t\t\t}\n\t\t\t// if applicable replace placeholder\n\t\t\tString description = (String) i.get(ItemData.COLUMN_DESCRIPTION);\n\t\t\tif (description.matches(\".*\\\\$[0-9].*\")) {\n\t\t\t\tif (key_ != null && key_.indexOf('[') != -1) {\n\t\t\t\t\tString[] keys = key_.substring(key_.indexOf('[')+1, key_.indexOf(']')).split(\",\");\n\t\t\t\t\tfor (int ix=0; ix<keys.length; ix++) {\n\t\t\t\t\t\tdescription = description.replace(\"$\"+(ix+1), keys[ix]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\ti.set(ItemData.COLUMN_DESCRIPTION, description);\n\t\t\tif (checkBeforeInsert) {\n\t\t\t\ti.insert(zabbixLocalDB, ItemData.COLUMN_ITEMID);\n\t\t\t} else {\n\t\t\t\ti.insert(zabbixLocalDB);\n\t\t\t}\n\t\t\tif (numItems > 0 && ++curI % 10 == 0) {\n\t\t\t\tshowProgress(curI*100/numItems);\n\t\t\t}\n\n\t\t\t// now the \"-1\" IDs of applicationsrelation will be replaced with the correct itemID\n\t\t\tContentValues values = new ContentValues(2);\n\t\t\tvalues.put(ApplicationItemRelationData.COLUMN_ITEMID, (Long) i.get(ItemData.COLUMN_ITEMID));\n\t\t\tvalues.put(ApplicationItemRelationData.COLUMN_HOSTID, (Long) i.get(ItemData.COLUMN_HOSTID));\n\t\t\tzabbixLocalDB.update(\n\t\t\t\t\tApplicationItemRelationData.TABLE_NAME\n\t\t\t\t\t, values\n\t\t\t\t\t, ApplicationItemRelationData.COLUMN_ITEMID+\"=-1\"\n\t\t\t\t\t, null\n\t\t\t);\n\t\t}\n\t\treturn firstItemId;\n\t}\n\n\tpublic void importItems(long hostid) throws JSONException, IOException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\tif (!isCached(ItemData.TABLE_NAME, \"hostid=\"+hostid)) {\n\t\t\t_startTransaction();\n\t\t\tzabbixLocalDB.delete(ItemData.TABLE_NAME, ItemData.COLUMN_HOSTID+\"=\"+hostid, null);\n\t\t\tzabbixLocalDB.delete(ApplicationItemRelationData.TABLE_NAME, ApplicationItemRelationData.COLUMN_HOSTID+\"=\"+hostid, null);\n\n\t\t\t// count of items\n\t\t\tJSONObject result = _queryBuffer(\n\t\t\t\t\t\"item.get\"\n\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t.put(\"output\", \"extend\")\n\t\t\t\t\t.put(\"countOutput\", 1)\n\t\t\t\t\t.put(\"limit\", ZabbixConfig.ITEM_GET_LIMIT)\n\t\t\t\t\t.put(\"hostids\", new JSONArray().put(hostid))\n\t\t\t);\n\t\t\tint numItems = result.getInt(\"result\");\n\t\t\tJsonArrayOrObjectReader items = _queryStream(\n\t\t\t\t\t\"item.get\"\n\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t\t.put(\"output\", \"extend\")\n\t\t\t\t\t\t.put(\"limit\", ZabbixConfig.ITEM_GET_LIMIT)\n\t\t\t\t\t\t.put(isVersion2?\"selectApplications\":\"select_applications\", \"extend\")\n\t\t\t\t\t\t.put(\"hostids\", new JSONArray().put(hostid))\n\t\t\t);\n\t\t\timportItems(items, numItems, false);\n\t\t\titems.close();\n\n\t\t\tsetCached(ItemData.TABLE_NAME, \"hostid=\"+hostid, ZabbixConfig.CACHE_LIFETIME_ITEMS);\n\t\t\t_endTransaction();\n\t\t}\n\t}\n\n\tprivate void importScreenItems(JsonArrayOrObjectReader screenItems) throws JsonParseException, NumberFormatException, IOException {\n\t\tJsonObjectReader screenItemReader;\n\t\twhile ((screenItemReader = screenItems.next()) != null) {\n\t\t\tScreenItemData si = new ScreenItemData();\n\t\t\tint resourcetype = -1;\n\t\t\twhile (screenItemReader.nextValueToken()) {\n\t\t\t\tString propName = screenItemReader.getCurrentName();\n\t\t\t\tif (propName.equals(ScreenItemData.COLUMN_SCREENITEMID)) {\n\t\t\t\t\tsi.set(ScreenItemData.COLUMN_SCREENITEMID, Long.parseLong(screenItemReader.getText()));\n\t\t\t\t} else if (propName.equals(ScreenItemData.COLUMN_SCREENID)) {\n\t\t\t\t\tsi.set(ScreenItemData.COLUMN_SCREENID, Long.parseLong(screenItemReader.getText()));\n\t\t\t\t} else if (propName.equals(ScreenItemData.COLUMN_RESOURCEID)) {\n\t\t\t\t\tsi.set(ScreenItemData.COLUMN_RESOURCEID, Long.parseLong(screenItemReader.getText()));\n\t\t\t\t} else if (propName.equals(\"resourcetype\")) {\n\t\t\t\t\tresourcetype = Integer.parseInt(screenItemReader.getText());\n\t\t\t\t} else {\n\t\t\t\t\tscreenItemReader.nextProperty();\n\t\t\t\t}\n\t\t\t}\n\t\t\t// only resouretype == 0\n\t\t\tif (resourcetype == 0) {\n\t\t\t\tsi.insert(zabbixLocalDB);\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic void importScreens() throws ClientProtocolException, IOException, JSONException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\tif (!isCached(ScreenData.TABLE_NAME, null)) {\n\t\t\t_startTransaction();\n\n\t\t\tzabbixLocalDB.delete(ScreenData.TABLE_NAME, null, null);\n\t\t\tzabbixLocalDB.delete(ScreenItemData.TABLE_NAME, null, null);\n\t\t\tzabbixLocalDB.delete(CacheData.TABLE_NAME, CacheData.COLUMN_KIND+\"='\"+ScreenData.TABLE_NAME+\"'\", null);\n\n\t\t\tJsonArrayOrObjectReader screens = _queryStream(\n\t\t\t\t\t(isVersion2?\"s\":\"S\")+\"creen.get\"\n\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t\t.put(\"output\", \"extend\")\n\t\t\t\t\t\t.put(isVersion2?\"selectScreenItems\":\"select_screenitems\", \"extend\")\n\t\t\t);\n\t\t\tJsonObjectReader screenReader;\n\t\t\twhile ((screenReader = screens.next()) != null) {\n\t\t\t\tScreenData scr = new ScreenData();\n\t\t\t\twhile (screenReader.nextValueToken()) {\n\t\t\t\t\tString propName = screenReader.getCurrentName();\n\t\t\t\t\tif (propName.equals(ScreenData.COLUMN_SCREENID)) {\n\t\t\t\t\t\tscr.set(ScreenData.COLUMN_SCREENID, Long.parseLong(screenReader.getText()));\n\t\t\t\t\t} else if (propName.equals(ScreenData.COLUMN_NAME)) {\n\t\t\t\t\t\tscr.set(ScreenData.COLUMN_NAME, screenReader.getText());\n\t\t\t\t\t} else if (propName.equals(\"screenitems\")) {\n\t\t\t\t\t\timportScreenItems(screenReader.getJsonArray());\n\t\t\t\t\t} else {\n\t\t\t\t\t\tscreenReader.nextProperty();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tscr.insert(zabbixLocalDB);\n\t\t\t}\n\t\t\tscreens.close();\n\n\t\t\tsetCached(ScreenData.TABLE_NAME, null, ZabbixConfig.CACHE_LIFETIME_SCREENS);\n\t\t\t_endTransaction();\n\t\t}\n\t}\n\n\tpublic void importTrigger(String triggerid) throws JSONException, IOException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\tif (!isCached(TriggerData.TABLE_NAME, \"triggerid=\"+triggerid)) {\n\t\t\t_startTransaction();\n\n\t\t\tJsonArrayOrObjectReader trigger = _queryStream(\n\t\t\t\t\t\"trigger.get\"\n\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t\t.put(\"output\", \"extend\")\n\t\t\t\t\t\t.put(isVersion2?\"selectHosts\":\"select_hosts\", \"extend\")\n\t\t\t\t\t\t.put(\"triggerids\", new JSONArray().put(triggerid))\n\t\t\t);\n\t\t\timportTriggers(trigger);\n\t\t\ttrigger.close();\n\n\t\t\tsetCached(TriggerData.TABLE_NAME, \"triggerid=\"+triggerid, ZabbixConfig.CACHE_LIFETIME_TRIGGERS);\n\t\t\t_endTransaction();\n\t\t}\n\t}\n\n\t/**\n\t * importiert ein trigger mit dem attribute itemid. ggf. wird der trigger zuerst gelöscht und neu angelegt.\n\t * imports a trigger with the attribute itemid. if trigger already exists, it will be removed first.\n\t * @param triggerid\n\t * @throws JSONException\n\t * @throws IOException\n\t * @throws HttpAuthorizationRequiredException\n\t * @throws NoAPIAccessException\n\t */\n\tpublic void importTriggerColumnItemId(String triggerid) throws JSONException, IOException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\t// check if the trigger exists and if the itemid was set\n\t\tboolean mustImport = true;\n\t\tCursor cur = zabbixLocalDB.query(TriggerData.TABLE_NAME, null, TriggerData.COLUMN_TRIGGERID+\"=\"+triggerid, null, null, null, null);\n\t\tif (cur.moveToFirst()) {\n\t\t\tlong itemid = 0;\n\t\t\ttry {\n\t\t\t\titemid = cur.getLong(cur.getColumnIndex(TriggerData.COLUMN_ITEMID));\n\t\t\t} catch (Exception e) {\n\t\t\t\t// no itemid\n\t\t\t}\n\t\t\tif (itemid > 0) {\n\t\t\t\tmustImport = false;\n\t\t\t}\n\t\t}\n\t\tif (mustImport) {\n\t\t\t_startTransaction();\n\t\t\tzabbixLocalDB.delete(TriggerData.TABLE_NAME, TriggerData.COLUMN_TRIGGERID+\"=\"+triggerid, null);\n\t\t\tJsonArrayOrObjectReader triggers = _queryStream(\n\t\t\t\t\t\"trigger.get\"\n\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t\t.put(\"output\", \"extend\")\n\t\t\t\t\t\t.put(isVersion2?\"selectHosts\":\"select_hosts\", \"extend\")\n\t\t\t\t\t\t.put(isVersion2?\"selectGroups\":\"select_groups\", \"extend\")\n\t\t\t\t\t\t.put(isVersion2?\"selectItems\":\"select_items\", \"extend\")\n\t\t\t\t\t\t.put(\"triggerids\", new JSONArray().put(triggerid))\n\t\t\t\t\t\t.put(\"limit\", 1)\n\t\t\t);\n\t\t\timportTriggers(triggers);\n\t\t\t_endTransaction();\n\t\t}\n\t}\n\n\t/**\n\t * imports the \"warning\"-triggers\n\t * @throws JSONException\n\t * @throws IOException\n\t * @throws HttpAuthorizationRequiredException\n\t * @throws NoAPIAccessException\n\t */\n\tpublic void importTriggers() throws JSONException, IOException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\tif (!isCached(TriggerData.TABLE_NAME, null)) {\n\t\t\t// clear triggers\n\t\t\tzabbixLocalDB.delete(TriggerData.TABLE_NAME, null, null);\n\n\t\t\t_startTransaction();\n\n\t\t\tlong min = (new Date().getTime()/1000)-ZabbixConfig.STATUS_SHOW_TRIGGER_TIME;\n\t\t\tJsonArrayOrObjectReader triggers = _queryStream(\n\t\t\t\t\t\"trigger.get\"\n\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t\t.put(\"output\", \"extend\")\n\t\t\t\t\t\t.put(\"sortfield\", \"lastchange\")\n\t\t\t\t\t\t.put(\"sortorder\", \"desc\")\n\t\t\t\t\t\t.put(isVersion2?\"selectHosts\":\"select_hosts\", \"extend\")\n\t\t\t\t\t\t.put(isVersion2?\"selectGroups\":\"select_groups\", \"extend\")\n\t\t\t\t\t\t.put(isVersion2?\"selectItems\":\"select_items\", \"extend\")\n\t\t\t\t\t\t.put(\"lastChangeSince\", min)\n\t\t\t\t\t\t.put(\"only_true\", \"1\")\n\t\t\t\t\t\t.put(\"limit\", ZabbixConfig.TRIGGER_GET_LIMIT)\n\t\t\t\t\t\t.put(\"expandDescription\", true)\n\t\t\t);\n\t\t\timportTriggers(triggers);\n\t\t\ttriggers.close();\n\n\t\t\tsetCached(TriggerData.TABLE_NAME, null, ZabbixConfig.CACHE_LIFETIME_TRIGGERS);\n\t\t\t_endTransaction();\n\t\t}\n\t}\n\n\tprivate void importTriggers(JsonArrayOrObjectReader jsonArray) throws JsonParseException, IOException {\n\t\tJsonObjectReader triggerReader;\n\t\twhile ((triggerReader = jsonArray.next()) != null) {\n\t\t\tTriggerData t = new TriggerData();\n\t\t\twhile (triggerReader.nextValueToken()) {\n\t\t\t\tString propName = triggerReader.getCurrentName();\n\t\t\t\tif (propName.equals(TriggerData.COLUMN_TRIGGERID)) {\n\t\t\t\t\tt.set(TriggerData.COLUMN_TRIGGERID, Long.parseLong(triggerReader.getText()));\n\t\t\t\t} else if (propName.equals(TriggerData.COLUMN_COMMENTS)) {\n\t\t\t\t\tt.set(TriggerData.COLUMN_COMMENTS, triggerReader.getText());\n\t\t\t\t} else if (propName.equals(TriggerData.COLUMN_DESCRIPTION)) {\n\t\t\t\t\tt.set(TriggerData.COLUMN_DESCRIPTION, triggerReader.getText());\n\t\t\t\t} else if (propName.equals(TriggerData.COLUMN_EXPRESSION)) {\n\t\t\t\t\tt.set(TriggerData.COLUMN_EXPRESSION, triggerReader.getText());\n\t\t\t\t} else if (propName.equals(TriggerData.COLUMN_LASTCHANGE)) {\n\t\t\t\t\tt.set(TriggerData.COLUMN_LASTCHANGE, Integer.parseInt(triggerReader.getText()));\n\t\t\t\t} else if (propName.equals(TriggerData.COLUMN_PRIORITY)) {\n\t\t\t\t\tt.set(TriggerData.COLUMN_PRIORITY, Integer.parseInt(triggerReader.getText()));\n\t\t\t\t} else if (propName.equals(TriggerData.COLUMN_STATUS)) {\n\t\t\t\t\tt.set(TriggerData.COLUMN_STATUS, Integer.parseInt(triggerReader.getText()));\n\t\t\t\t} else if (propName.equals(TriggerData.COLUMN_VALUE)) {\n\t\t\t\t\tt.set(TriggerData.COLUMN_VALUE, Integer.parseInt(triggerReader.getText()));\n\t\t\t\t} else if (propName.equals(TriggerData.COLUMN_URL)) {\n\t\t\t\t\tt.set(TriggerData.COLUMN_URL, triggerReader.getText());\n\t\t\t\t} else if (propName.equals(\"hosts\")) {\n\t\t\t\t\tObject[] hostsCache = importHosts(triggerReader.getJsonArray(), null);\n\t\t\t\t\tt.set(TriggerData.COLUMN_HOSTS, hostsCache[0]);\n\t\t\t\t\tt.set(TriggerData.COLUMN_HOSTID, hostsCache[1]);\n\t\t\t\t} else if (propName.equals(\"groups\")) {\n\t\t\t\t\timportHostGroups(triggerReader.getJsonArray());\n\t\t\t\t} else if (propName.equals(\"items\")) {\n\t\t\t\t\t// store the first item id\n\t\t\t\t\tt.set(TriggerData.COLUMN_ITEMID, importItems(triggerReader.getJsonArray(), 1, true));\n\t\t\t\t} else {\n\t\t\t\t\ttriggerReader.nextProperty();\n\t\t\t\t}\n\t\t\t}\n\t\t\tt.insert(zabbixLocalDB, TriggerData.COLUMN_TRIGGERID);\n\t\t\t_commitTransactionIfRecommended();\n\t\t}\n\t}\n\n\tpublic void importTriggersByItemId(String itemid) throws JSONException, IOException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\tif (!isCached(TriggerData.TABLE_NAME, \"itemid=\"+itemid)) {\n\t\t\t_startTransaction();\n\t\t\tzabbixLocalDB.delete(TriggerData.TABLE_NAME, TriggerData.COLUMN_ITEMID+\"=\"+itemid, null);\n\t\t\tJsonArrayOrObjectReader triggers = _queryStream(\n\t\t\t\t\t\"trigger.get\"\n\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t\t.put(\"output\", \"extend\")\n\t\t\t\t\t\t.put(isVersion2?\"selectHosts\":\"select_hosts\", \"extend\")\n\t\t\t\t\t\t.put(isVersion2?\"selectGroups\":\"select_groups\", \"extend\")\n\t\t\t\t\t\t.put(isVersion2?\"selectItems\":\"select_items\", \"extend\")\n\t\t\t\t\t\t.put(\"itemids\", new JSONArray().put(itemid))\n\t\t\t\t\t\t.put(\"limit\", 1)\n\t\t\t\t\t\t.put(\"sortfield\", \"lastchange\")\n\t\t\t\t\t\t.put(\"sortorder\", \"DESC\")\n\t\t\t);\n\t\t\timportTriggers(triggers);\n\t\t\tsetCached(TriggerData.TABLE_NAME, \"itemid=\"+itemid, ZabbixConfig.CACHE_LIFETIME_TRIGGERS);\n\t\t\t_endTransaction();\n\t\t}\n\t}\n\n\tpublic boolean isCached(String kind, String filter) {\n\t\tSQLiteQueryBuilder sqlBuilder = new SQLiteQueryBuilder();\n\t\tsqlBuilder.setTables(CacheData.TABLE_NAME);\n\t\tsqlBuilder.appendWhere(CacheData.COLUMN_KIND+\"='\"+kind+\"' AND \");\n\t\tsqlBuilder.appendWhere(CacheData.COLUMN_FILTER+\n\t\t\t\t(filter==null?\" IS NULL\":\"='\"+filter+\"'\")\n\t\t);\n\t\tsqlBuilder.appendWhere(\" AND \"+CacheData.COLUMN_EXPIRE_DATE+\">\"+new Date().getTime()/1000);\n\t\tCursor cur = sqlBuilder.query(\n\t\t\tzabbixLocalDB,\n\t\t\tnull,\n\t\t\tnull,\n\t\t\tnull,\n\t\t\tnull,\n\t\t\tnull,\n\t\t\tnull\n\t\t);\n\t\tLog.i(\"ZabbixContentProvider\", \"isCached \"+kind+\"//\"+filter+\"//\"+cur.moveToFirst());\n\t\treturn cur.moveToFirst();\n\t}\n\n\t/**\n\t * public, for the unit test\n\t */\n\tpublic void setCached(String kind, String filter, int lifetime) {\n\t\tCacheData cache = new CacheData();\n\t\tcache.set(CacheData.COLUMN_EXPIRE_DATE, new Date().getTime()/1000 + lifetime);\n\t\tcache.set(CacheData.COLUMN_KIND, kind);\n\t\tif (filter != null) {\n\t\t\tcache.set(CacheData.COLUMN_FILTER, filter);\n\t\t}\n\t\tcache.insert(zabbixLocalDB);\n\t}\n\n\t/**\n\t * updates the progressbar in the gui\n\t * @param i 0..100\n\t */\n\tpublic void showProgress(int i) {\n\t\t// if applicable, transform the progress\n\t\tif (transformProgressStart != 0 && transformProgressEnd != 0) {\n\t\t\ti = (int) (transformProgressStart + (transformProgressEnd-transformProgressStart)*(double)i/100);\n\t\t}\n\n\t\tIntent intent = new Intent(ZabbixContentProvider.CONTENT_PROVIDER_INTENT_ACTION);\n\t\tintent.putExtra(\"flag\", ZabbixContentProvider.INTENT_FLAG_SHOW_PROGRESS);\n\t\tintent.putExtra(\"value\", i);\n\t\tcontext.sendBroadcast(intent);\n\t}\n\n\t/**\n\t * transforms the progress\n\t * @param start 0% => start%\n\t * @param end 100% => end%\n\t */\n\tpublic void transformProgress(int start, int end) {\n\t\ttransformProgressStart = start;\n\t\ttransformProgressEnd = end;\n\t}\n}\n"],
      "p_date_tdt": "Sep 12, 2012 8:22:56 AM",
      "c_comments_t": ["\t\t\t// create ApplicationItemRelation /** \n * public, for the unit test\n */\n /** \n * import the hosts from stream\n * @param jsonArray stream\n * @param numHosts count of hosts for progressbar. null if unknown.\n * @return Object[] {(String) comma-separated all Hostnames, (Long) 1. host id}\n * @throws JsonParseException\n * @throws IOException\n */\n \t\t\t// result array found /** \n * import graph items\n * @param graphItems\n * @return true, if graphid column has to be updated from -1 to the correct graphid later.\n * @throws JsonParseException\n * @throws NumberFormatException\n * @throws IOException\n */\n \t\t\t\t\t\t// save only every 20th \t\t\t// wrong password. token remains null \t\t\t// the past 2 hours \t\t\t\t\t// data are unuseable, e.g. because it's a string /** \n * @param events stream\n * @param numEvents if null, no progressbar-update AND only isert, if it does not exist. If !null, progressbar-update AND always insert without checking\n * @throws JsonParseException\n * @throws IOException\n */\n \t\t\t\t\t// Precondition failed / Looks like Zabbix 1.8.2 \t\t\t// get API version \t\t\t// if #0 \"other\" does not exist yet, it has to be created \t\t\t\t\t// later the IDs will be replaced with the correct /** \n * zabbix api call. data will be parsed as json object on-the-fly. Caution: use this only for api calls with a small return data.\n * @param method\n * @param params\n * @return\n * @throws ClientProtocolException\n * @throws IOException\n * @throws JSONException\n * @throws HttpAuthorizationRequiredException\n * @throws NoAPIAccessException\n */\n /** \n * begin sql transaction\n */\n \t\t\t\t\t\t// first do a new auth and then try the same api call again \t\t\t\t// no itemid \t\t\t// count of items /** \n * init\n * @param context android context\n * @param zabbixLocalDB sqlite\n */\n \t\t\t// create applications that does not exist \t\t\t\t// so we use a fiction \t\t\t// only resouretype == 0 /** \n * probably too old zabbix <= 1.8.2\n */\n /** \n * zabbix auth. user and pwd from app preferences\n * @return true success\n * @throws ClientProtocolException\n * @throws IOException\n * @throws JSONException\n * @throws HttpAuthorizationRequiredException\n * @throws NoAPIAccessException\n */\n /** \n * close the last http stream\n */\n \t\t\t// Workaround: historydetails only comes if you use the correct \"history\"-parameter. /** \n * transforms the progress\n * @param start 0% => start%\n * @param end 100% => end%\n */\n \t\t\t\t// in Zabbix version <2.0, this is not default \t\t\t\t// file not found \t\t\t\t\t// hex string => color int \t\tHttpClientParams.setRedirecting(params, true); // redirecting /** \n * The API version. From 1.8.3 (maybe earlier) to 2.0 (excluded), this was 1.3. With 2.0, it changed to 1.4.  Finally, since 2.0.4, the API version matches the program version.\n */\n \t\t\t// if applicable replace placeholder \t\t\t// if graphid-column was not set, this must be done later. temporary graphid=-1 \t\t// for GUI unit test, just return true /** \n * imports the \"warning\"-triggers\n * @throws JSONException\n * @throws IOException\n * @throws HttpAuthorizationRequiredException\n * @throws NoAPIAccessException\n */\n \t\t\t// event is parsed and can be inserted into the db \t\tpublic static final int EVENT_GET_TIME_FROM_SHIFT = 7*24*60*60; // -7 days \t\t// http request \t\t\t\t\t// store hosts namen \t\t\t\t// http auth failed \t\t\t\t\t// at this point itemid and hostid is unknown \t\t\t\t\t// import triggers \t\t\t// we try them all, until we get results. /** \n * importiert ein trigger mit dem attribute itemid. ggf. wird der trigger zuerst gelöscht und neu angelegt. imports a trigger with the attribute itemid. if trigger already exists, it will be removed first.\n * @param triggerid\n * @throws JSONException\n * @throws IOException\n * @throws HttpAuthorizationRequiredException\n * @throws NoAPIAccessException\n */\n \t\t\t\t\t// import hosts \t\t\t// for unit test \t\t\t\t// ignore \t\t\t// or a json object /** \n * zabbix error: no api access\n */\n /** \n * counts the sql inserts/updates and do a transaction commit to save the memory\n */\n \t\t\t// send intent to GUI \t\t\t\t\t// before zabbix 2.x the name field was \"description\" \t\t\t\t\t// if we get an empty array, we try another history parameter \t\t\t\t\t// store the first item id \t\t// check if the trigger exists and if the itemid was set /** \n * global constants\n */\n \t\t\t\t// create \"other\" hostgroup #1 \t\t\t// if there's no application, the ID #0 must be added (for other) \t\t\t\t\t// because of this, all applicationrelations will be saved with itemid and hostid \"-1\". \t\t\t\t\t\t.put(\"history\", historytype) // for integer ? /** \n * interface to connect to the zabbix server\n */\n /** \n * acknowledge zabbix event. Sets ack-flag with comment. Caution: This is supported only for Zabbix version >= 1.8.4\n * @param eventid\n * @param comment\n * @return true, success.\n * @throws ClientProtocolException\n * @throws IOException\n * @throws JSONException\n * @throws HttpAuthorizationRequiredException\n * @throws NoAPIAccessException\n */\n \t\t\t// store the last stream to close it if an exception will be thrown /** \n * zabbix api call as stream.\n * @param method\n * @param params\n * @return stream im json array wrapper\n * @throws JSONException\n * @throws IOException\n * @throws HttpAuthorizationRequiredException\n * @throws NoAPIAccessException\n */\n \t\t// if applicable http auth \t\t\t// correct historytype found and there are data \t\t\t\t// count of the entries cannot be detected (zabbix bug), /** \n * import items from stream.\n * @param items stream\n * @param numItems count for progressbar, if 0 no progressbarupdate\n * @param checkBeforeInsert if true, only make an insert if item does not exist\n * @return the first item id\n * @throws JsonParseException\n * @throws IOException\n */\n \t\t\t// collect all graphids /** \n * http auth is needed\n */\n \t\t\t// ignore for unit test /** \n * commit sql transaction\n */\n \t\t\t// delete old graphs \t\t\t// host without group will get group #0 (other) \t\t\t// there's no result \t\tpublic static final int HISTORY_GET_TIME_FROM_SHIFT = 24*60*60; // -24h \t\t// if applicable, transform the progress \t\t\t// SSL not trusted \t\t\t// internet problem \t\t\tif (jp.nextToken() != JsonToken.START_ARRAY && jp.getCurrentToken() != JsonToken.START_OBJECT) { // go inside the array \t\tpublic static final int CACHE_LIFETIME_APPLICATIONS = 2*24*60*60; // 2 days \t\t\t\t\t// since zabbix 2.x is the name of the item \"name\" \t\t\t// now the \"-1\" IDs of applicationsrelation will be replaced with the correct itemID \t\t\t// get count of hosts /** \n * import the newest events\n * @throws ClientProtocolException\n * @throws IOException\n * @throws JSONException\n * @throws HttpAuthorizationRequiredException\n * @throws NoAPIAccessException\n */\n /** \n * updates the progressbar in the gui\n * @param i 0..100\n */\n \t\t\t\t\t\t// ignore \t\t\t\t\t// first do a new auth and then try the same api call again /** \n * import the newest event of a trigger\n * @param triggerid\n * @throws JSONException\n * @throws IOException\n * @throws HttpAuthorizationRequiredException\n * @throws NoAPIAccessException\n */\n \t\t// it can be an (empty) array \t\t\t// this parameter can be \"null\" or a number 0-4. Because we don't know when to use which, \t\t\t// clear triggers"],
      "p_contents_t": ["package com.inovex.zabbixmobile.api;\n\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.net.Socket;\nimport java.net.UnknownHostException;\nimport java.security.KeyManagementException;\nimport java.security.KeyStore;\nimport java.security.KeyStoreException;\nimport java.security.NoSuchAlgorithmException;\nimport java.security.UnrecoverableKeyException;\nimport java.security.cert.CertificateException;\nimport java.security.cert.X509Certificate;\nimport java.util.ArrayList;\nimport java.util.Date;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Set;\n\nimport javax.net.ssl.SSLContext;\nimport javax.net.ssl.SSLPeerUnverifiedException;\nimport javax.net.ssl.TrustManager;\nimport javax.net.ssl.X509TrustManager;\n\nimport org.apache.http.HttpResponse;\nimport org.apache.http.HttpVersion;\nimport org.apache.http.auth.AuthScope;\nimport org.apache.http.auth.UsernamePasswordCredentials;\nimport org.apache.http.client.ClientProtocolException;\nimport org.apache.http.client.methods.HttpPost;\nimport org.apache.http.client.params.HttpClientParams;\nimport org.apache.http.conn.ClientConnectionManager;\nimport org.apache.http.conn.scheme.PlainSocketFactory;\nimport org.apache.http.conn.scheme.Scheme;\nimport org.apache.http.conn.scheme.SchemeRegistry;\nimport org.apache.http.conn.ssl.SSLSocketFactory;\nimport org.apache.http.entity.StringEntity;\nimport org.apache.http.impl.client.DefaultHttpClient;\nimport org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager;\nimport org.apache.http.params.BasicHttpParams;\nimport org.apache.http.params.HttpConnectionParams;\nimport org.apache.http.params.HttpParams;\nimport org.apache.http.params.HttpProtocolParams;\nimport org.apache.http.protocol.HTTP;\nimport org.codehaus.jackson.JsonFactory;\nimport org.codehaus.jackson.JsonParseException;\nimport org.codehaus.jackson.JsonParser;\nimport org.codehaus.jackson.JsonToken;\nimport org.json.JSONArray;\nimport org.json.JSONException;\nimport org.json.JSONObject;\n\nimport android.content.ContentValues;\nimport android.content.Context;\nimport android.content.Intent;\nimport android.content.SharedPreferences;\nimport android.database.Cursor;\nimport android.database.sqlite.SQLiteDatabase;\nimport android.database.sqlite.SQLiteQueryBuilder;\nimport android.graphics.Color;\nimport android.preference.PreferenceManager;\nimport android.util.Log;\n\nimport com.inovex.zabbixmobile.R;\nimport com.inovex.zabbixmobile.ZabbixContentProvider;\nimport com.inovex.zabbixmobile.model.ApplicationData;\nimport com.inovex.zabbixmobile.model.ApplicationItemRelationData;\nimport com.inovex.zabbixmobile.model.CacheData;\nimport com.inovex.zabbixmobile.model.EventData;\nimport com.inovex.zabbixmobile.model.GraphData;\nimport com.inovex.zabbixmobile.model.GraphItemData;\nimport com.inovex.zabbixmobile.model.HistoryDetailData;\nimport com.inovex.zabbixmobile.model.HostData;\nimport com.inovex.zabbixmobile.model.HostGroupData;\nimport com.inovex.zabbixmobile.model.ItemData;\nimport com.inovex.zabbixmobile.model.ScreenData;\nimport com.inovex.zabbixmobile.model.ScreenItemData;\nimport com.inovex.zabbixmobile.model.TriggerData;\n\n/**\n * interface to connect to the zabbix server\n */\npublic class ZabbixService {\n\tclass CustomSSLSocketFactory extends SSLSocketFactory {\n\t\tSSLContext sslContext = SSLContext.getInstance(\"TLS\");\n\n\t\tpublic CustomSSLSocketFactory(KeyStore truststore) throws NoSuchAlgorithmException, KeyManagementException, KeyStoreException, UnrecoverableKeyException {\n\t\t\tsuper(truststore);\n\t\t\tTrustManager tm = new X509TrustManager() {\n\t\t\t\t@Override\n\t\t\t\tpublic void checkClientTrusted(X509Certificate[] chain,\n\t\t\t\t\t\tString authType) throws CertificateException {\n\t\t\t\t}\n\t\t\t\t@Override\n\t\t\t\tpublic void checkServerTrusted(X509Certificate[] chain,\n\t\t\t\t\t\tString authType) throws CertificateException {\n\t\t\t\t}\n\t\t\t\t@Override\n\t\t\t\tpublic X509Certificate[] getAcceptedIssuers() {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t};\n\t\t\tsslContext.init(null, new TrustManager[] { tm }, null);\n\t\t}\n\n\t\t@Override\n\t\tpublic Socket createSocket() throws IOException {\n\t\t\treturn sslContext.getSocketFactory().createSocket();\n\t\t}\n\n\t\t@Override\n\t\tpublic Socket createSocket(Socket socket, String host, int port, boolean autoClose) throws IOException, UnknownHostException {\n\t\t\treturn sslContext.getSocketFactory().createSocket(socket, host, port, autoClose);\n\t\t}\n\t}\n\n\t/**\n\t * http auth is needed\n\t */\n\tpublic class HttpAuthorizationRequiredException extends Exception {\n\t\tprivate static final long serialVersionUID = 6632422081858878147L;\n\t}\n\n\t/**\n\t * zabbix error: no api access\n\t */\n\tpublic class NoAPIAccessException extends Exception {\n\t\tprivate static final long serialVersionUID = 6381395987443456382L;\n\t}\n\n\t/**\n\t * probably too old zabbix <= 1.8.2\n\t */\n\tpublic class PreconditionFailedException extends Exception {\n\t\tprivate static final long serialVersionUID = -2529885710860745023L;\n\t}\n\n\t/**\n\t * global constants\n\t */\n\tpublic class ZabbixConfig {\n\t\tpublic static final int APPLICATION_GET_LIMIT = 1000;\n\t\tpublic static final int EVENTS_GET_LIMIT = 60;\n\t\tpublic static final int HISTORY_GET_TIME_FROM_SHIFT = 8*60*60; // -8h\n\t\tpublic static final int HISTORY_GET_LIMIT = 8000;\n\t\tpublic static final int HOSTGROUP_GET_LIMIT = 200;\n\t\tpublic static final int HOST_GET_LIMIT = 300;\n\t\tpublic static final int ITEM_GET_LIMIT = 200;\n\t\tpublic static final int TRIGGER_GET_LIMIT = 100;\n\t\tpublic static final int EVENT_GET_TIME_FROM_SHIFT = 7*24*60*60; // -7 days\n\t\tpublic static final int CACHE_LIFETIME_APPLICATIONS = 2*24*60*60; // 2 days\n\t\tpublic static final int CACHE_LIFETIME_EVENTS = 120;\n\t\tpublic static final int CACHE_LIFETIME_HISTORY_DETAILS = 4*60;\n\t\tpublic static final int CACHE_LIFETIME_HOST_GROUPS = 7*24*60*60;\n\t\tpublic static final int CACHE_LIFETIME_HOSTS = 2*24*60*60;\n\t\tpublic static final int CACHE_LIFETIME_SCREENS = 2*24*60*60;\n\t\tpublic static final int CACHE_LIFETIME_ITEMS = 4*60;\n\t\tpublic static final int CACHE_LIFETIME_TRIGGERS = 2*60;\n\t\tpublic static final long STATUS_SHOW_TRIGGER_TIME = 14*24*60*60;\n\t\tpublic static final int HTTP_CONNECTION_TIMEOUT = 30000;\n\t}\n\n\tprivate final DefaultHttpClient httpClient;\n\tprivate final SQLiteDatabase zabbixLocalDB;\n\tprivate String url;\n\tprivate String token;\n\tprivate final Context context;\n\tprivate int _transactionStack;\n\tprivate JsonParser lastStream;\n\tprivate int transformProgressStart;\n\tprivate int transformProgressEnd;\n\tprivate boolean _notAuthorizedRetry;\n\tprivate boolean isVersion2 = true;\n\n\t/**\n\t * init\n\t * @param context android context\n\t * @param zabbixLocalDB sqlite\n\t */\n\tpublic ZabbixService(Context context, SQLiteDatabase zabbixLocalDB) {\n\t\tClientConnectionManager ccm = null;\n\t\tHttpParams params = null;\n\n\t\ttry {\n\t\t\tSharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(context);\n\t\t\tif (prefs.getBoolean(\"zabbix_trust_all_ssl_ca\", false)) {\n\t\t\t\tKeyStore trustStore = KeyStore.getInstance(KeyStore.getDefaultType());\n\t\t\t\ttrustStore.load(null, null);\n\n\t\t\t\tSSLSocketFactory sf = new CustomSSLSocketFactory(trustStore);\n\t\t\t\tsf.setHostnameVerifier(SSLSocketFactory.ALLOW_ALL_HOSTNAME_VERIFIER);\n\n\t\t\t\tparams = new BasicHttpParams();\n\t\t\t\tHttpProtocolParams.setVersion(params, HttpVersion.HTTP_1_1);\n\t\t\t\tHttpProtocolParams.setContentCharset(params, HTTP.UTF_8);\n\n\t\t\t\tSchemeRegistry registry = new SchemeRegistry();\n\t\t\t\tregistry.register(new Scheme(\"http\", PlainSocketFactory.getSocketFactory(), 80));\n\t\t\t\tregistry.register(new Scheme(\"https\", sf, 443));\n\n\t\t\t\tccm = new ThreadSafeClientConnManager(params, registry);\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\t// ignore for unit test\n\t\t}\n\n\t\tif (ccm == null || params == null) {\n\t\t\thttpClient = new DefaultHttpClient();\n\t\t} else {\n\t\t\thttpClient = new DefaultHttpClient(ccm, params);\n\t\t}\n\n\t\t// if applicable http auth\n\t\ttry {\n\t\t\tSharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(context);\n\t\t\tif (prefs.getBoolean(\"http_auth_enabled\", false)) {\n\t\t\t\tString user = prefs.getString(\"http_auth_username\", \"\");\n\t\t\t\tString pwd = prefs.getString(\"http_auth_password\", \"\");\n\t\t\t\thttpClient.getCredentialsProvider().setCredentials(AuthScope.ANY, new UsernamePasswordCredentials(user, pwd));\n\t\t\t}\n\t\t} catch (java.lang.UnsupportedOperationException e1) {\n\t\t\t// for unit test\n\t\t}\n\n\t\tparams = httpClient.getParams();\n\t\tHttpClientParams.setRedirecting(params, true); // redirecting\n\t\tHttpConnectionParams.setConnectionTimeout(params, ZabbixConfig.HTTP_CONNECTION_TIMEOUT);\n\t\tthis.context = context;\n\t\tthis.zabbixLocalDB = zabbixLocalDB;\n\t}\n\n\t/**\n\t * counts the sql inserts/updates and do a transaction commit to save the memory\n\t */\n\tprivate void _commitTransactionIfRecommended() {\n\t\tif (_transactionStack++ > 50) {\n\t\t\t_endTransaction();\n\t\t\t_startTransaction();\n\t\t}\n\t}\n\n\t/**\n\t * commit sql transaction\n\t */\n\tpublic void _endTransaction() {\n\t\tif (zabbixLocalDB.inTransaction()) {\n\t\t\tzabbixLocalDB.setTransactionSuccessful();\n\t\t\tzabbixLocalDB.endTransaction();\n\t\t}\n\t}\n\n\t/**\n\t * zabbix api call. data will be parsed as json object on-the-fly.\n\t * Caution: use this only for api calls with a small return data.\n\t * @param method\n\t * @param params\n\t * @return\n\t * @throws ClientProtocolException\n\t * @throws IOException\n\t * @throws JSONException\n\t * @throws HttpAuthorizationRequiredException\n\t * @throws NoAPIAccessException\n\t */\n\tprivate JSONObject _queryBuffer(String method, JSONObject params) throws ClientProtocolException, IOException, JSONException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\tHttpPost post = new HttpPost(url);\n\t\tpost.addHeader(\"Content-Type\", \"application/json; charset=utf-8\");\n\n\t\tString json =\n\t\t\t\"{\" +\n\t\t\t\"\t\\\"jsonrpc\\\" : \\\"2.0\\\",\" +\n\t\t\t\"\t\\\"method\\\" : \\\"\"+method+\"\\\",\" +\n\t\t\t\"\t\\\"params\\\" : \"+params.toString()+\",\" +\n\t\t\t\"\t\\\"auth\\\" : \"+(token==null?\"null\":'\"'+token+'\"')+\",\" +\n\t\t\t\"\t\\\"id\\\" : 0\" +\n\t\t\t\"}\";\n\n\t\tpost.setEntity(new StringEntity(json, \"UTF-8\"));\n\t\ttry {\n\t\t\tHttpResponse resp = httpClient.execute(post);\n\t\t\tif (resp.getStatusLine().getStatusCode() == 401) {\n\t\t\t\t// http auth failed\n\t\t\t\tthrow new HttpAuthorizationRequiredException();\n\t\t\t} else if (resp.getStatusLine().getStatusCode() == 412) {\n\t\t\t\t\t// Precondition failed / Looks like Zabbix 1.8.2\n\t\t\t\tthrow new PreconditionFailedException();\n\t\t\t} else if (resp.getStatusLine().getStatusCode() == 404) {\n\t\t\t\t// file not found\n\t\t\t\tthrow new IOException(resp.getStatusLine().getStatusCode()+\" \"+resp.getStatusLine().getReasonPhrase());\n\t\t\t} else {\n\t\t\t\tLog.d(\"ZabbixService\", resp.getStatusLine().getStatusCode()+\" \"+resp.getStatusLine().getReasonPhrase());\n\t\t\t}\n\t\t\tStringBuilder total = new StringBuilder();\n\t\t\tBufferedReader rd = new BufferedReader(new InputStreamReader(resp.getEntity().getContent()));\n\t\t\tint chr;\n\t\t\twhile ((chr = rd.read()) != -1) {\n\t\t\t\ttotal.append((char) chr);\n\t\t\t}\n\t\t\tJSONObject result = new JSONObject(total.toString());\n\t\t\ttry {\n\t\t\t\tif (result.getJSONObject(\"error\") != null) {\n\t\t\t\t\tif (result.getJSONObject(\"error\").getString(\"data\").equals(\"No API access\")) {\n\t\t\t\t\t\tthrow new NoAPIAccessException();\n\t\t\t\t\t} else throw new RuntimeException(result.getJSONObject(\"error\").toString());\n\t\t\t\t}\n\t\t\t\tif (result.getString(\"data\").equals(\"Not authorized\")) {\n\t\t\t\t\t// first do a new auth and then try the same api call again\n\t\t\t\t\tif (authenticate() && !_notAuthorizedRetry) {\n\t\t\t\t\t\t_notAuthorizedRetry = true;\n\t\t\t\t\t\tJSONObject r = _queryBuffer(method, params);\n\t\t\t\t\t\t_notAuthorizedRetry = false;\n\t\t\t\t\t\treturn r;\n\t\t\t\t\t} throw new IllegalStateException(result.toString());\n\t\t\t\t}\n\t\t\t} catch (JSONException e) {\n\t\t\t\t// ignore\n\t\t\t}\n\t\t\treturn result;\n\t\t} catch (SSLPeerUnverifiedException e) {\n\t\t\t// SSL not trusted\n\t\t\tIntent intent = new Intent(ZabbixContentProvider.CONTENT_PROVIDER_INTENT_ACTION);\n\t\t\tintent.putExtra(\"flag\", ZabbixContentProvider.INTENT_FLAG_SSL_NOT_TRUSTED);\n\t\t\tcontext.sendBroadcast(intent);\n\t\t\tthrow e;\n\t\t} catch (IOException e) {\n\t\t\t// internet problem\n\t\t\t// send intent to GUI\n\t\t\tIntent intent = new Intent(ZabbixContentProvider.CONTENT_PROVIDER_INTENT_ACTION);\n\t\t\tintent.putExtra(\"flag\", ZabbixContentProvider.INTENT_FLAG_CONNECTION_FAILED);\n\t\t\tintent.putExtra(\"value\", e.getMessage());\n\t\t\tcontext.sendBroadcast(intent);\n\t\t\tthrow e;\n\t\t}\n\t}\n\n\t/**\n\t * zabbix api call as stream.\n\t * @param method\n\t * @param params\n\t * @return stream im json array wrapper\n\t * @throws JSONException\n\t * @throws IOException\n\t * @throws HttpAuthorizationRequiredException\n\t * @throws NoAPIAccessException\n\t */\n\tprivate JsonArrayOrObjectReader _queryStream(String method, JSONObject params) throws JSONException, IOException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\t// http request\n\t\tHttpPost post = new HttpPost(url);\n\t\tpost.addHeader(\"Content-Type\", \"application/json; charset=utf-8\");\n\n\t\tJSONObject json = new JSONObject()\n\t\t\t.put(\"jsonrpc\", \"2.0\")\n\t\t\t.put(\"method\", method)\n\t\t\t.put(\"params\", params)\n\t\t\t.put(\"auth\", token)\n\t\t\t.put(\"id\", 0);\n\n\t\tLog.d(\"ZabbixService\", \"_queryStream: \"+url);\n\t\tLog.d(\"ZabbixService\", \"_queryStream: \"+json.toString());\n\n\t\tpost.setEntity(new StringEntity(json.toString(), \"UTF-8\"));\n\t\ttry {\n\t\t\tHttpResponse resp = httpClient.execute(post);\n\t\t\tif (resp.getStatusLine().getStatusCode() == 401) {\n\t\t\t\t// http auth failed\n\t\t\t\tthrow new HttpAuthorizationRequiredException();\n\t\t\t}\n\n\t\t\tJsonFactory jsonFac = new JsonFactory();\n\t\t\tJsonParser jp = jsonFac.createJsonParser(resp.getEntity().getContent());\n\t\t\t// store the last stream to close it if an exception will be thrown\n\t\t\tlastStream = jp;\n\t\t\tif (jp.nextToken() != JsonToken.START_OBJECT) {\n\t\t\t\tthrow new IOException(\"Expected data to start with an Object\");\n\t\t\t}\n\t\t\tdo {\n\t\t\t\tjp.nextToken();\n\t\t\t\tif (jp.getCurrentName().equals(\"error\")) {\n\t\t\t\t\tjp.nextToken();\n\t\t\t\t\tString errortxt = \"\";\n\t\t\t\t\twhile (jp.nextToken() != JsonToken.END_OBJECT) {\n\t\t\t\t\t\terrortxt += jp.getText();\n\t\t\t\t\t}\n\t\t\t\t\tif (errortxt.contains(\"No API access\")) {\n\t\t\t\t\t\tthrow new NoAPIAccessException();\n\t\t\t\t\t} else if (errortxt.contains(\"Not authorized\")) {\n\t\t\t\t\t\t// first do a new auth and then try the same api call again\n\t\t\t\t\t\tif (authenticate() && !_notAuthorizedRetry) {\n\t\t\t\t\t\t\t_notAuthorizedRetry = true;\n\t\t\t\t\t\t\tJsonArrayOrObjectReader r = _queryStream(method, params);\n\t\t\t\t\t\t\t_notAuthorizedRetry = false;\n\t\t\t\t\t\t\treturn r;\n\t\t\t\t\t\t} else throw new IllegalStateException(errortxt);\n\t\t\t\t\t} else throw new IllegalStateException(\"JSON API Error: \"+errortxt);\n\t\t\t\t}\n\t\t\t} while (!jp.getCurrentName().equals(\"result\"));\n\n\t\t\t// result array found\n\t\t\tif (jp.nextToken() != JsonToken.START_ARRAY && jp.getCurrentToken() != JsonToken.START_OBJECT) { // go inside the array\n\t\t\t\ttry {\n\t\t\t\t\tLog.d(\"ZabbixService\", \"current token: \"+jp.getCurrentToken());\n\t\t\t\t\tLog.d(\"ZabbixService\", \"current name: \"+jp.getCurrentName());\n\t\t\t\t\tLog.d(\"ZabbixService\", \"get text: \"+jp.getText());\n\t\t\t\t\tLog.d(\"ZabbixService\", \"next value: \"+jp.nextValue());\n\t\t\t\t\tLog.d(\"ZabbixService\", \"next token: \"+jp.nextToken());\n\t\t\t\t\tLog.d(\"ZabbixService\", \"current token: \"+jp.getCurrentToken());\n\t\t\t\t\tLog.d(\"ZabbixService\", \"current name: \"+jp.getCurrentName());\n\t\t\t\t\tLog.d(\"ZabbixService\", \"get text: \"+jp.getText());\n\t\t\t\t} catch (Exception e) {}\n\t\t\t\tthrow new IOException(\"Expected data to start with an Array\");\n\t\t\t}\n\t\t\treturn new JsonArrayOrObjectReader(jp);\n\t\t} catch (SSLPeerUnverifiedException e) {\n\t\t\tthrow e;\n\t\t} catch (IOException e) {\n\t\t\t// internet problem\n\t\t\t// send intent to GUI\n\t\t\tIntent intent = new Intent(ZabbixContentProvider.CONTENT_PROVIDER_INTENT_ACTION);\n\t\t\tintent.putExtra(\"flag\", ZabbixContentProvider.INTENT_FLAG_CONNECTION_FAILED);\n\t\t\tcontext.sendBroadcast(intent);\n\t\t\tthrow e;\n\t\t}\n\t}\n\n\t/**\n\t * begin sql transaction\n\t */\n\tprivate void _startTransaction() {\n\t\tzabbixLocalDB.beginTransaction();\n\t\t_transactionStack = 0;\n\t}\n\n\t/**\n\t * acknowledge zabbix event. Sets ack-flag with comment.\n\t * Caution: This is supported only for Zabbix version >= 1.8.4\n\t * @param eventid\n\t * @param comment\n\t * @return true, success.\n\t * @throws ClientProtocolException\n\t * @throws IOException\n\t * @throws JSONException\n\t * @throws HttpAuthorizationRequiredException\n\t * @throws NoAPIAccessException\n\t */\n\tpublic boolean acknowledgeEvent(String eventid, String comment) throws ClientProtocolException, IOException, JSONException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\t// for GUI unit test, just return true\n\t\tif (comment != null && comment.equals(\"__UNIT_TEST__RETURN_TRUE__\")) return true;\n\n\t\tJSONObject result = _queryBuffer(\n\t\t\t\t\"event.acknowledge\"\n\t\t\t\t, new JSONObject()\n\t\t\t\t\t.put(\"eventids\", new JSONArray().put(eventid))\n\t\t);\n\t\t// it can be an (empty) array\n\t\ttry {\n\t\t\treturn result.getJSONObject(\"result\").getJSONArray(\"eventids\").length() == 1;\n\t\t} catch (JSONException e) {\n\t\t\t// or a json object\n\t\t\treturn result.getJSONObject(\"result\").getJSONObject(\"eventids\").length() == 1;\n\t\t}\n\t}\n\n\t/**\n\t * zabbix auth. user and pwd from app preferences\n\t * @return true success\n\t * @throws ClientProtocolException\n\t * @throws IOException\n\t * @throws JSONException\n\t * @throws HttpAuthorizationRequiredException\n\t * @throws NoAPIAccessException\n\t */\n\tpublic boolean authenticate() throws ClientProtocolException, IOException, JSONException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\tSharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(context);\n\t\tString url = prefs.getString(\"zabbix_url\", \"\").trim();\n\t\tString user = prefs.getString(\"zabbix_username\", \"\").trim();\n\t\tString password = prefs.getString(\"zabbix_password\", \"\");\n\n\t\tthis.url = url+(url.endsWith(\"/\")?\"\":'/')+\"api_jsonrpc.php\";\n\t\tLog.d(\"ZabbixContentProvider\", url+\"//\"+user);\n\n\t\ttry {\n\t\t\tJSONObject result = _queryBuffer(\n\t\t\t\t\t\"user.authenticate\"\n\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t\t.put(\"user\", user)\n\t\t\t\t\t\t.put(\"password\", password)\n\t\t\t);\n\t\t\ttoken = result.getString(\"result\");\n\t\t} catch (JSONException e) {\n\t\t\t// there's no result\n\t\t\te.printStackTrace();\n\t\t} catch (RuntimeException e) {\n\t\t\t// wrong password. token remains null\n\t\t\te.printStackTrace();\n\t\t}\n\t\tif (token != null) {\n\t\t\t// get API version\n\t\t\tJSONObject result = _queryBuffer(\n\t\t\t\t\t\"apiinfo.version\"\n\t\t\t\t\t, new JSONObject()\n\t\t\t);\n\t\t\tisVersion2 = result.getString(\"result\").equals(\"1.4\");\n\t\t\tLog.i(\"ZabbixService\", \"Zabbix Server Version: isVersion2=\"+isVersion2);\n\t\t}\n\t\treturn token != null;\n\t}\n\n\t/**\n\t * close the last http stream\n\t */\n\tpublic void closeLastStream() {\n\t\tif (lastStream != null && !lastStream.isClosed()) {\n\t\t\ttry {\n\t\t\t\tlastStream.close();\n\t\t\t} catch (IOException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate void importApplications(long hostid, long itemid, JsonArrayOrObjectReader jsonArray) throws JsonParseException, NumberFormatException, IOException {\n\t\tint num = 0;\n\t\tJsonObjectReader application;\n\t\twhile ((application = jsonArray.next()) != null) {\n\t\t\tApplicationData app = new ApplicationData();\n\t\t\twhile (application.nextValueToken()) {\n\t\t\t\tString propName = application.getCurrentName();\n\t\t\t\tif (propName.equals(ApplicationData.COLUMN_APPLICATIONID)) {\n\t\t\t\t\tapp.set(ApplicationData.COLUMN_APPLICATIONID, Long.parseLong(application.getText()));\n\t\t\t\t} else if (propName.equals(ApplicationData.COLUMN_NAME)) {\n\t\t\t\t\tapp.set(ApplicationData.COLUMN_NAME, application.getText());\n\t\t\t\t} else if (propName.equals(ApplicationData.COLUMN_HOSTID)) {\n\t\t\t\t\tapp.set(ApplicationData.COLUMN_HOSTID, Long.parseLong(application.getText()));\n\t\t\t\t} else {\n\t\t\t\t\tapplication.nextProperty();\n\t\t\t\t}\n\t\t\t}\n\t\t\t// create applications that does not exist\n\t\t\tapp.insert(zabbixLocalDB, ApplicationData.COLUMN_APPLICATIONID);\n\t\t\t_commitTransactionIfRecommended();\n\n\t\t\t// create ApplicationItemRelation\n\t\t\tlong appid = (Long) app.get(ApplicationData.COLUMN_APPLICATIONID);\n\t\t\tApplicationItemRelationData rel = new ApplicationItemRelationData();\n\t\t\trel.set(ApplicationItemRelationData.COLUMN_APPLICATIONID, appid);\n\t\t\trel.set(ApplicationItemRelationData.COLUMN_ITEMID, itemid);\n\t\t\trel.set(ApplicationItemRelationData.COLUMN_HOSTID, hostid);\n\t\t\trel.insert(zabbixLocalDB);\n\t\t\t_commitTransactionIfRecommended();\n\n\t\t\tnum++;\n\t\t}\n\t\tif (num == 0) {\n\t\t\t// if there's no application, the ID #0 must be added (for other)\n\t\t\tApplicationItemRelationData rel = new ApplicationItemRelationData();\n\t\t\trel.set(ApplicationItemRelationData.COLUMN_APPLICATIONID, 0);\n\t\t\trel.set(ApplicationItemRelationData.COLUMN_ITEMID, itemid);\n\t\t\trel.set(ApplicationItemRelationData.COLUMN_HOSTID, hostid);\n\t\t\trel.insert(zabbixLocalDB);\n\n\t\t\t// if #0 \"other\" does not exist yet, it has to be created\n\t\t\tApplicationData app = new ApplicationData();\n\t\t\tapp.set(ApplicationData.COLUMN_APPLICATIONID, 0);\n\t\t\tapp.set(ApplicationData.COLUMN_NAME, \"- \"+context.getResources().getString(R.string.other)+\" -\");\n\t\t\tapp.insert(zabbixLocalDB, ApplicationData.COLUMN_APPLICATIONID);\n\t\t}\n\t}\n\n\t/**\n\t * import the newest event of a trigger\n\t * @param triggerid\n\t * @throws JSONException\n\t * @throws IOException\n\t * @throws HttpAuthorizationRequiredException\n\t * @throws NoAPIAccessException\n\t */\n\tpublic void importEventByTriggerId(String triggerid) throws JSONException, IOException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\tif (!isCached(EventData.TABLE_NAME, \"triggerid=\"+triggerid)) {\n\t\t\t_startTransaction();\n\t\t\tzabbixLocalDB.delete(EventData.TABLE_NAME, EventData.COLUMN_OBJECTID+\"=\"+triggerid, null);\n\n\t\t\tJSONObject params = new JSONObject()\n\t\t\t\t.put(\"output\", \"extend\")\n\t\t\t\t.put(isVersion2?\"selectHosts\":\"select_hosts\", \"extend\")\n\t\t\t\t.put(\"triggerids\", new JSONArray().put(triggerid))\n\t\t\t\t.put(\"limit\", 1)\n\t\t\t\t.put(\"source\", 0);\n\t\t\tif (!isVersion2) {\n\t\t\t\tparams.put(\"sortfield\", \"clock\")\n\t\t\t\t\t.put(\"sortorder\", \"DESC\");\n\t\t\t}\n\n\t\t\tJsonArrayOrObjectReader events = _queryStream(\n\t\t\t\t\t\"event.get\"\n\t\t\t\t\t, params\n\t\t\t);\n\t\t\timportEvents(events, null);\n\t\t\tevents.close();\n\n\t\t\tsetCached(EventData.TABLE_NAME, \"triggerid=\"+triggerid, ZabbixConfig.CACHE_LIFETIME_EVENTS);\n\t\t\t_endTransaction();\n\t\t}\n\t}\n\n\t/**\n\t * import the newest events\n\t * @throws ClientProtocolException\n\t * @throws IOException\n\t * @throws JSONException\n\t * @throws HttpAuthorizationRequiredException\n\t * @throws NoAPIAccessException\n\t */\n\tpublic void importEvents() throws ClientProtocolException, IOException, JSONException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\tif (!isCached(EventData.TABLE_NAME, null)) {\n\t\t\t_startTransaction();\n\t\t\tzabbixLocalDB.delete(EventData.TABLE_NAME, null, null);\n\t\t\tzabbixLocalDB.delete(TriggerData.TABLE_NAME, null, null);\n\t\t\tzabbixLocalDB.delete(CacheData.TABLE_NAME, CacheData.COLUMN_KIND+\"='\"+EventData.TABLE_NAME+\"'\", null);\n\t\t\tzabbixLocalDB.delete(CacheData.TABLE_NAME, CacheData.COLUMN_KIND+\"='\"+TriggerData.TABLE_NAME+\"'\", null);\n\n\t\t\tint numEvents = ZabbixConfig.EVENTS_GET_LIMIT;\n\n\t\t\tJSONObject params = new JSONObject()\n\t\t\t\t.put(\"output\", \"extend\")\n\t\t\t\t.put(\"limit\", ZabbixConfig.EVENTS_GET_LIMIT)\n\t\t\t\t.put(isVersion2?\"selectHosts\":\"select_hosts\", \"extend\")\n\t\t\t\t.put(isVersion2?\"selectTriggers\":\"select_triggers\", \"extend\")\n\t\t\t\t.put(\"source\", 0)\n\t\t\t\t.put(\"time_from\", (new Date().getTime()/1000) - ZabbixConfig.EVENT_GET_TIME_FROM_SHIFT);\n\t\t\tif (!isVersion2) {\n\t\t\t\t// in Zabbix version <2.0, this is not default\n\t\t\t\tparams.put(\"sortfield\", \"clock\")\n\t\t\t\t\t.put(\"sortorder\", \"DESC\");\n\t\t\t}\n\t\t\tJsonArrayOrObjectReader events = _queryStream(\n\t\t\t\t\t\"event.get\"\n\t\t\t\t\t, params\n\t\t\t);\n\t\t\timportEvents(events, numEvents);\n\t\t\tevents.close();\n\n\t\t\tsetCached(EventData.TABLE_NAME, null, ZabbixConfig.CACHE_LIFETIME_EVENTS);\n\t\t\t_endTransaction();\n\t\t}\n\t}\n\n\t/**\n\t * @param events stream\n\t * @param numEvents if null, no progressbar-update AND only isert, if it does not exist. If !null, progressbar-update AND always insert without checking\n\t * @throws JsonParseException\n\t * @throws IOException\n\t */\n\tprivate void importEvents(JsonArrayOrObjectReader events, Integer numEvents) throws JsonParseException, IOException {\n\t\tint i=0;\n\t\tJsonObjectReader eventReader;\n\t\twhile ((eventReader = events.next()) != null) {\n\t\t\tEventData e = new EventData();\n\t\t\twhile (eventReader.nextValueToken()) {\n\t\t\t\tString propName = eventReader.getCurrentName();\n\t\t\t\tif (propName.equals(\"hosts\")) {\n\t\t\t\t\t// import hosts\n\t\t\t\t\tString hostnames = (String) importHosts(eventReader.getJsonArray(), null)[0];\n\t\t\t\t\t// store hosts namen\n\t\t\t\t\te.set(EventData.COLUMN_HOSTS, hostnames);\n\t\t\t\t} else if (propName.equals(\"triggers\")) {\n\t\t\t\t\t// import triggers\n\t\t\t\t\timportTriggers(eventReader.getJsonArray());\n\t\t\t\t} else if (propName.equals(EventData.COLUMN_EVENTID)) {\n\t\t\t\t\te.set(EventData.COLUMN_EVENTID, Long.parseLong(eventReader.getText()));\n\t\t\t\t} else if (propName.equals(EventData.COLUMN_CLOCK)) {\n\t\t\t\t\te.set(EventData.COLUMN_CLOCK, Integer.parseInt(eventReader.getText()));\n\t\t\t\t} else if (propName.equals(EventData.COLUMN_OBJECTID)) {\n\t\t\t\t\te.set(EventData.COLUMN_OBJECTID, Long.parseLong(eventReader.getText()));\n\t\t\t\t} else if (propName.equals(EventData.COLUMN_ACK)) {\n\t\t\t\t\te.set(EventData.COLUMN_ACK, Integer.parseInt(eventReader.getText()) == 1);\n\t\t\t\t} else if (propName.equals(EventData.COLUMN_VALUE)) {\n\t\t\t\t\te.set(EventData.COLUMN_VALUE, Integer.parseInt(eventReader.getText()));\n\t\t\t\t} else {\n\t\t\t\t\teventReader.nextProperty();\n\t\t\t\t}\n\t\t\t}\n\t\t\t// event is parsed and can be inserted into the db\n\t\t\tif (numEvents == null) {\n\t\t\t\te.insert(zabbixLocalDB, EventData.COLUMN_EVENTID);\n\t\t\t} else {\n\t\t\t\te.insert(zabbixLocalDB);\n\t\t\t\tif (++i % 10 == 0) {\n\t\t\t\t\tshowProgress(i*100/numEvents);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t_commitTransactionIfRecommended();\n\t\t}\n\t}\n\n\t/**\n\t * import graph items\n\t *\n\t * @param graphItems\n\t * @return true, if graphid column has to be updated from -1 to the correct graphid later.\n\t * @throws JsonParseException\n\t * @throws NumberFormatException\n\t * @throws IOException\n\t */\n\tprivate boolean importGraphItems(JsonArrayOrObjectReader graphItems) throws JsonParseException, NumberFormatException, IOException {\n\t\tboolean mustSetGraphid = false;\n\t\tJsonObjectReader graphItemReader;\n\t\twhile ((graphItemReader = graphItems.next()) != null) {\n\t\t\tGraphItemData gi = new GraphItemData();\n\t\t\twhile (graphItemReader.nextValueToken()) {\n\t\t\t\tString propName = graphItemReader.getCurrentName();\n\t\t\t\tif (propName.equals(\"gitemid\")) {\n\t\t\t\t\tgi.set(GraphItemData.COLUMN_GRAPHITEMID, Long.parseLong(graphItemReader.getText()));\n\t\t\t\t} else if (propName.equals(GraphItemData.COLUMN_GRAPHID)) {\n\t\t\t\t\tgi.set(GraphItemData.COLUMN_GRAPHID, Long.parseLong(graphItemReader.getText()));\n\t\t\t\t} else if (propName.equals(GraphItemData.COLUMN_ITEMID)) {\n\t\t\t\t\tgi.set(GraphItemData.COLUMN_ITEMID, Long.parseLong(graphItemReader.getText()));\n\t\t\t\t} else if (propName.equals(GraphItemData.COLUMN_COLOR)) {\n\t\t\t\t\t// hex string => color int\n\t\t\t\t\tgi.set(GraphItemData.COLUMN_COLOR, Color.parseColor(\"#\"+graphItemReader.getText()));\n\t\t\t\t} else {\n\t\t\t\t\tgraphItemReader.nextProperty();\n\t\t\t\t}\n\t\t\t}\n\t\t\t// if graphid-column was not set, this must be done later. temporary graphid=-1\n\t\t\tif (gi.get(GraphItemData.COLUMN_GRAPHID) == null) {\n\t\t\t\tgi.set(GraphItemData.COLUMN_GRAPHID, -1);\n\t\t\t\tmustSetGraphid = true;\n\t\t\t}\n\t\t\tgi.insert(zabbixLocalDB);\n\t\t}\n\t\treturn mustSetGraphid;\n\t}\n\n\tpublic void importGraphsForScreen(long screenid) throws ClientProtocolException, IOException, JSONException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\tif (!isCached(GraphData.TABLE_NAME, \"screenid=\"+screenid)) {\n\t\t\t_startTransaction();\n\n\t\t\t// collect all graphids\n\t\t\tSet<Long> graphids = new HashSet<Long>();\n\t\t\tCursor cur = zabbixLocalDB.query(ScreenItemData.TABLE_NAME, null, ScreenItemData.COLUMN_SCREENID+\"=\"+screenid, null, null, null, null);\n\t\t\twhile (cur.moveToNext()) {\n\t\t\t\tgraphids.add(cur.getLong(cur.getColumnIndex(ScreenItemData.COLUMN_RESOURCEID)));\n\t\t\t}\n\n\t\t\t// delete old graphs\n\t\t\tString str_graphids = graphids.toString().replace(\"[\", \"\").replace(\"]\", \"\");\n\t\t\tif (str_graphids.length()>0) {\n\t\t\t\tzabbixLocalDB.delete(GraphData.TABLE_NAME, GraphData.COLUMN_GRAPHID+\" IN (\"+str_graphids+\")\", null);\n\t\t\t\tzabbixLocalDB.delete(GraphItemData.TABLE_NAME, GraphItemData.COLUMN_GRAPHID+\" IN (\"+str_graphids+\")\", null);\n\t\t\t}\n\t\t\tzabbixLocalDB.delete(CacheData.TABLE_NAME, CacheData.COLUMN_KIND+\"='\"+GraphData.TABLE_NAME+\"' AND \"+CacheData.COLUMN_FILTER+\"='screenid=\"+screenid+'\\'', null);\n\n\t\t\tJsonArrayOrObjectReader graphs = _queryStream(\n\t\t\t\t\t\"graph.get\"\n\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t\t.put(isVersion2?\"selectGraphItems\":\"select_graph_items\", \"extend\")\n\t\t\t\t\t\t.put(isVersion2?\"selectItems\":\"select_items\", \"extend\")\n\t\t\t\t\t\t.put(\"output\", \"extend\")\n\t\t\t\t\t\t.put(\"graphids\", new JSONArray(graphids))\n\t\t\t);\n\t\t\tJsonObjectReader graphReader;\n\t\t\twhile ((graphReader = graphs.next()) != null) {\n\t\t\t\tboolean mustSetGraphid = false;\n\t\t\t\tGraphData scr = new GraphData();\n\t\t\t\twhile (graphReader.nextValueToken()) {\n\t\t\t\t\tString propName = graphReader.getCurrentName();\n\t\t\t\t\tif (propName.equals(GraphData.COLUMN_GRAPHID)) {\n\t\t\t\t\t\tscr.set(GraphData.COLUMN_GRAPHID, Long.parseLong(graphReader.getText()));\n\t\t\t\t\t} else if (propName.equals(GraphData.COLUMN_NAME)) {\n\t\t\t\t\t\tscr.set(GraphData.COLUMN_NAME, graphReader.getText());\n\t\t\t\t\t} else if (propName.equals(\"gitems\")) {\n\t\t\t\t\t\tmustSetGraphid = importGraphItems(graphReader.getJsonArray());\n\t\t\t\t\t} else if (propName.equals(\"items\")) {\n\t\t\t\t\t\timportItems(graphReader.getJsonArray(), 0, true);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tgraphReader.nextProperty();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tscr.insert(zabbixLocalDB);\n\t\t\t\tif (mustSetGraphid) {\n\t\t\t\t\tContentValues values = new ContentValues(1);\n\t\t\t\t\tvalues.put(GraphItemData.COLUMN_GRAPHID, (Long) scr.get(GraphData.COLUMN_GRAPHID));\n\t\t\t\t\tzabbixLocalDB.update(\n\t\t\t\t\t\t\tGraphItemData.TABLE_NAME\n\t\t\t\t\t\t\t, values\n\t\t\t\t\t\t\t, GraphItemData.COLUMN_GRAPHID+\"=-1\"\n\t\t\t\t\t\t\t, null);\n\t\t\t\t}\n\t\t\t}\n\t\t\tgraphs.close();\n\n\t\t\tsetCached(GraphData.TABLE_NAME, \"screenid=\"+screenid, ZabbixConfig.CACHE_LIFETIME_SCREENS);\n\t\t\t_endTransaction();\n\t\t}\n\t}\n\n\tpublic void importHistoryDetails(String itemid) throws ClientProtocolException, IOException, JSONException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\tif (!isCached(HistoryDetailData.TABLE_NAME, itemid)) {\n\t\t\t_startTransaction();\n\t\t\tzabbixLocalDB.delete(HistoryDetailData.TABLE_NAME, HistoryDetailData.COLUMN_ITEMID+\"=\"+itemid, null);\n\n\t\t\t// the past 2 hours\n\t\t\tlong time_till = new Date().getTime() / 1000;\n\t\t\tlong time_from = time_till - ZabbixConfig.HISTORY_GET_TIME_FROM_SHIFT; // jetzt-2h\n\n\t\t\t// Workaround: historydetails only comes if you use the correct \"history\"-parameter.\n\t\t\t// this parameter can be \"null\" or a number 0-4. Because we don't know when to use which,\n\t\t\t// we try them all, until we get results.\n\t\t\tInteger historytype = null;\n\t\t\tJSONObject result = _queryBuffer(\n\t\t\t\t\t\"history.get\"\n\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t\t.put(\"limit\", 1)\n\t\t\t\t\t\t.put(\"history\", historytype) // for integer ?\n\t\t\t\t\t\t.put(\"itemids\", new JSONArray().put(itemid))\n\t\t\t\t\t\t.put(\"time_from\", time_from)\n\t\t\t);\n\n\t\t\tJSONArray testHistorydetails = result.getJSONArray(\"result\");\n\t\t\tif (testHistorydetails.length() == 0) {\n\t\t\t\thistorytype = -1;\n\t\t\t\twhile (testHistorydetails.length() == 0 && ++historytype <= 4) {\n\t\t\t\t\t// if we get an empty array, we try another history parameter\n\t\t\t\t\tresult = _queryBuffer(\n\t\t\t\t\t\t\t\"history.get\"\n\t\t\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t\t\t\t.put(\"output\", \"extend\")\n\t\t\t\t\t\t\t\t.put(\"limit\", 1)\n\t\t\t\t\t\t\t\t.put(\"history\", historytype)\n\t\t\t\t\t\t\t\t.put(\"itemids\", new JSONArray().put(itemid))\n\t\t\t\t\t\t\t\t.put(\"time_from\", time_from)\n\t\t\t\t\t);\n\t\t\t\t\ttestHistorydetails = result.getJSONArray(\"result\");\n\t\t\t\t}\n\t\t\t}\n\t\t\t// correct historytype found and there are data\n\t\t\tif (testHistorydetails.length() > 0) {\n\t\t\t\t// count of the entries cannot be detected (zabbix bug),\n\t\t\t\t// so we use a fiction\n\t\t\t\tint numDetails = 400;\n\t\t\t\tint curI=0;\n\t\t\t\tJsonArrayOrObjectReader historydetails = _queryStream(\n\t\t\t\t\t\t\"history.get\"\n\t\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t\t\t.put(\"output\", \"extend\")\n\t\t\t\t\t\t\t.put(\"limit\", ZabbixConfig.HISTORY_GET_LIMIT)\n\t\t\t\t\t\t\t.put(\"history\", historytype)\n\t\t\t\t\t\t\t.put(\"itemids\", new JSONArray().put(itemid))\n\t\t\t\t\t\t\t.put(\"time_from\", time_from)\n\t\t\t\t\t\t\t.put(\"sortfield\", \"clock\")\n\t\t\t\t\t\t\t.put(\"sortorder\", \"DESC\")\n\t\t\t\t);\n\t\t\t\tJsonObjectReader historydetail;\n\t\t\t\ttry {\n\t\t\t\t\tint selI = 0;\n\t\t\t\t\twhile ((historydetail = historydetails.next()) != null) {\n\t\t\t\t\t\t// save only every 20th\n\t\t\t\t\t\tif (selI++ % 20 != 0) {\n\t\t\t\t\t\t\twhile (historydetail.nextValueToken()) {\n\t\t\t\t\t\t\t\thistorydetail.nextProperty();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tHistoryDetailData h = new HistoryDetailData();\n\t\t\t\t\t\twhile (historydetail.nextValueToken()) {\n\t\t\t\t\t\t\tString propName = historydetail.getCurrentName();\n\t\t\t\t\t\t\tif (propName.equals(HistoryDetailData.COLUMN_CLOCK)) {\n\t\t\t\t\t\t\t\th.set(HistoryDetailData.COLUMN_CLOCK, Integer.parseInt(historydetail.getText()));\n\t\t\t\t\t\t\t} else if (propName.equals(HistoryDetailData.COLUMN_ITEMID)) {\n\t\t\t\t\t\t\t\th.set(HistoryDetailData.COLUMN_ITEMID, Long.parseLong(historydetail.getText()));\n\t\t\t\t\t\t\t} else if (propName.equals(HistoryDetailData.COLUMN_VALUE)) {\n\t\t\t\t\t\t\t\th.set(HistoryDetailData.COLUMN_VALUE, Double.parseDouble(historydetail.getText()));\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\thistorydetail.nextProperty();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\th.insert(zabbixLocalDB);\n\t\t\t\t\t\tif (++curI % 10 == 0) {\n\t\t\t\t\t\t\tshowProgress(Math.min(curI*100/numDetails, 84));\n\t\t\t\t\t\t}\n\t\t\t\t\t\t_commitTransactionIfRecommended();\n\t\t\t\t\t}\n\t\t\t\t} catch (NumberFormatException e) {\n\t\t\t\t\t// data are unuseable, e.g. because it's a string\n\t\t\t\t}\n\t\t\t\thistorydetails.close();\n\t\t\t}\n\t\t\tsetCached(HistoryDetailData.TABLE_NAME, itemid, ZabbixConfig.CACHE_LIFETIME_HISTORY_DETAILS);\n\t\t\t_endTransaction();\n\t\t}\n\t}\n\n\tprivate long importHostGroups(JsonArrayOrObjectReader jsonArray) throws JsonParseException, IOException {\n\t\tlong firstHostGroupId = -1;\n\t\tJsonObjectReader hostReader;\n\t\twhile ((hostReader = jsonArray.next()) != null) {\n\t\t\tHostGroupData h = new HostGroupData();\n\t\t\twhile (hostReader.nextValueToken()) {\n\t\t\t\tString propName = hostReader.getCurrentName();\n\t\t\t\tif (propName.equals(HostGroupData.COLUMN_GROUPID)) {\n\t\t\t\t\tlong id = Long.parseLong(hostReader.getText());\n\t\t\t\t\tif (firstHostGroupId == -1) firstHostGroupId = id;\n\t\t\t\t\th.set(HostGroupData.COLUMN_GROUPID, id);\n\t\t\t\t} else if (propName.equals(HostGroupData.COLUMN_NAME)) {\n\t\t\t\t\th.set(HostGroupData.COLUMN_NAME, hostReader.getText());\n\t\t\t\t} else {\n\t\t\t\t\thostReader.nextProperty();\n\t\t\t\t}\n\t\t\t}\n\t\t\th.insert(zabbixLocalDB, HostGroupData.COLUMN_GROUPID);\n\t\t\t_commitTransactionIfRecommended();\n\t\t}\n\n\t\treturn firstHostGroupId;\n\t}\n\n\t/**\n\t * import the hosts from stream\n\t * @param jsonArray stream\n\t * @param numHosts count of hosts for progressbar. null if unknown.\n\t * @return Object[] {(String) comma-separated all Hostnames, (Long) 1. host id}\n\t * @throws JsonParseException\n\t * @throws IOException\n\t */\n\tprivate Object[] importHosts(JsonArrayOrObjectReader jsonArray, Integer numHosts) throws JsonParseException, IOException {\n\t\tList<String> hostnames = new ArrayList<String>();\n\t\tlong firstHostId = -1;\n\t\tJsonObjectReader hostReader;\n\t\tint i=0;\n\t\twhile ((hostReader = jsonArray.next()) != null) {\n\t\t\tHostData h = new HostData();\n\t\t\twhile (hostReader.nextValueToken()) {\n\t\t\t\tString propName = hostReader.getCurrentName();\n\t\t\t\tif (propName.equals(HostData.COLUMN_HOSTID)) {\n\t\t\t\t\th.set(HostData.COLUMN_HOSTID, Long.parseLong(hostReader.getText()));\n\t\t\t\t\tif (firstHostId == -1) {\n\t\t\t\t\t\tfirstHostId = (Long) h.get(HostData.COLUMN_HOSTID);\n\t\t\t\t\t}\n\t\t\t\t} else if (propName.equals(HostData.COLUMN_HOST)) {\n\t\t\t\t\tString host = hostReader.getText();\n\t\t\t\t\thostnames.add(host);\n\t\t\t\t\th.set(HostData.COLUMN_HOST, host);\n\t\t\t\t} else if (propName.equals(\"groups\")) {\n\t\t\t\t\tlong groupid = importHostGroups(hostReader.getJsonArray());\n\t\t\t\t\tif (groupid != -1) {\n\t\t\t\t\t\th.set(HostData.COLUMN_GROUPID, groupid);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\thostReader.nextProperty();\n\t\t\t\t}\n\t\t\t}\n\t\t\t// host without group will get group #0 (other)\n\t\t\tif (h.get(HostData.COLUMN_GROUPID) == null) {\n\t\t\t\th.set(HostData.COLUMN_GROUPID, 0);\n\t\t\t\t// create \"other\" hostgroup #1\n\t\t\t\tHostGroupData hg = new HostGroupData();\n\t\t\t\thg.set(HostGroupData.COLUMN_GROUPID, 0);\n\t\t\t\thg.set(HostGroupData.COLUMN_NAME, \"- \"+context.getResources().getString(R.string.other)+\" -\");\n\t\t\t\thg.insert(zabbixLocalDB, HostGroupData.COLUMN_GROUPID);\n\t\t\t}\n\t\t\th.insert(zabbixLocalDB, HostData.COLUMN_HOSTID);\n\t\t\tif (numHosts != null && ++i % 10 == 0) {\n\t\t\t\tshowProgress(i*100/numHosts);\n\t\t\t}\n\t\t\t_commitTransactionIfRecommended();\n\t\t}\n\n\t\treturn new Object[] {hostnames.toString().replaceAll(\"[\\\\[\\\\]]\", \"\"), firstHostId};\n\t}\n\n\tpublic void importHostsAndGroups() throws JSONException, IOException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\tif (!isCached(HostData.TABLE_NAME, null)) {\n\t\t\t_startTransaction();\n\t\t\tzabbixLocalDB.delete(HostData.TABLE_NAME, null, null);\n\t\t\tzabbixLocalDB.delete(HostGroupData.TABLE_NAME, null, null);\n\n\t\t\t// get count of hosts\n\t\t\tJSONObject result = _queryBuffer(\n\t\t\t\t\t\"host.get\"\n\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t\t.put(\"countOutput\", 1)\n\t\t\t\t\t\t.put(\"limit\", ZabbixConfig.HOST_GET_LIMIT)\n\t\t\t\t\t\t.put(isVersion2?\"selectGroups\":\"select_groups\", \"extend\")\n\t\t\t);\n\t\t\tint numHosts = result.getInt(\"result\");\n\t\t\tJsonArrayOrObjectReader hosts = _queryStream(\n\t\t\t\t\t\"host.get\"\n\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t\t.put(\"output\", \"extend\")\n\t\t\t\t\t\t.put(\"limit\", ZabbixConfig.HOST_GET_LIMIT)\n\t\t\t\t\t\t.put(isVersion2?\"selectGroups\":\"select_groups\", \"extend\")\n\t\t\t);\n\t\t\timportHosts(hosts, numHosts);\n\t\t\thosts.close();\n\n\t\t\tsetCached(HostData.TABLE_NAME, null, ZabbixConfig.CACHE_LIFETIME_HOSTS);\n\t\t\t_endTransaction();\n\t\t}\n\t}\n\n\t/**\n\t * import items from stream.\n\t * @param items stream\n\t * @param numItems count for progressbar, if 0 no progressbarupdate\n\t * @param checkBeforeInsert if true, only make an insert if item does not exist\n\t * @return the first item id\n\t * @throws JsonParseException\n\t * @throws IOException\n\t */\n\tprivate long importItems(JsonArrayOrObjectReader items, int numItems, boolean checkBeforeInsert) throws JsonParseException, IOException {\n\t\tlong firstItemId = -1;\n\t\tint curI=0;\n\t\tJsonObjectReader itemReader;\n\t\twhile ((itemReader = items.next()) != null) {\n\t\t\tItemData i = new ItemData();\n\t\t\tString key_ = null;\n\t\t\twhile (itemReader.nextValueToken()) {\n\t\t\t\tString propName = itemReader.getCurrentName();\n\t\t\t\tif (propName.equals(ItemData.COLUMN_ITEMID)) {\n\t\t\t\t\ti.set(ItemData.COLUMN_ITEMID, Long.parseLong(itemReader.getText()));\n\t\t\t\t\tif (firstItemId == -1) {\n\t\t\t\t\t\tfirstItemId = (Long) i.get(ItemData.COLUMN_ITEMID);\n\t\t\t\t\t}\n\t\t\t\t} else if (propName.equals(ItemData.COLUMN_HOSTID)) {\n\t\t\t\t\ti.set(ItemData.COLUMN_HOSTID, Long.parseLong(itemReader.getText()));\n\t\t\t\t} else if (propName.equals(ItemData.COLUMN_DESCRIPTION) || propName.equals(\"name\")) {\n\t\t\t\t\t// since zabbix 2.x is the name of the item \"name\"\n\t\t\t\t\t// before zabbix 2.x the name field was \"description\"\n\t\t\t\t\tif (isVersion2 && propName.equals(\"name\")) {\n\t\t\t\t\t\ti.set(ItemData.COLUMN_DESCRIPTION, itemReader.getText());\n\t\t\t\t\t} else if (!isVersion2) {\n\t\t\t\t\t\ti.set(ItemData.COLUMN_DESCRIPTION, itemReader.getText());\n\t\t\t\t\t}\n\t\t\t\t} else if (propName.equals(ItemData.COLUMN_LASTCLOCK)) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\ti.set(ItemData.COLUMN_LASTCLOCK, Integer.parseInt(itemReader.getText()));\n\t\t\t\t\t} catch (NumberFormatException e) {\n\t\t\t\t\t\t// ignore\n\t\t\t\t\t}\n\t\t\t\t} else if (propName.equals(ItemData.COLUMN_LASTVALUE)) {\n\t\t\t\t\ti.set(ItemData.COLUMN_LASTVALUE, itemReader.getText());\n\t\t\t\t} else if (propName.equals(ItemData.COLUMN_UNITS)) {\n\t\t\t\t\ti.set(ItemData.COLUMN_UNITS, itemReader.getText());\n\t\t\t\t} else if (propName.equals(\"key_\")) {\n\t\t\t\t\tkey_ = itemReader.getText();\n\t\t\t\t} else if (propName.equals(\"applications\")) {\n\t\t\t\t\t// at this point itemid and hostid is unknown\n\t\t\t\t\t// because of this, all applicationrelations will be saved with itemid and hostid \"-1\".\n\t\t\t\t\t// later the IDs will be replaced with the correct\n\t\t\t\t\timportApplications(-1, -1, itemReader.getJsonArray());\n\t\t\t\t} else {\n\t\t\t\t\titemReader.nextProperty();\n\t\t\t\t}\n\t\t\t}\n\t\t\t// if applicable replace placeholder\n\t\t\tString description = (String) i.get(ItemData.COLUMN_DESCRIPTION);\n\t\t\tif (description.matches(\".*\\\\$[0-9].*\")) {\n\t\t\t\tif (key_ != null && key_.indexOf('[') != -1) {\n\t\t\t\t\tString[] keys = key_.substring(key_.indexOf('[')+1, key_.indexOf(']')).split(\",\");\n\t\t\t\t\tfor (int ix=0; ix<keys.length; ix++) {\n\t\t\t\t\t\tdescription = description.replace(\"$\"+(ix+1), keys[ix]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\ti.set(ItemData.COLUMN_DESCRIPTION, description);\n\t\t\tif (checkBeforeInsert) {\n\t\t\t\ti.insert(zabbixLocalDB, ItemData.COLUMN_ITEMID);\n\t\t\t} else {\n\t\t\t\ti.insert(zabbixLocalDB);\n\t\t\t}\n\t\t\tif (numItems > 0 && ++curI % 10 == 0) {\n\t\t\t\tshowProgress(curI*100/numItems);\n\t\t\t}\n\n\t\t\t// now the \"-1\" IDs of applicationsrelation will be replaced with the correct itemID\n\t\t\tContentValues values = new ContentValues(2);\n\t\t\tvalues.put(ApplicationItemRelationData.COLUMN_ITEMID, (Long) i.get(ItemData.COLUMN_ITEMID));\n\t\t\tvalues.put(ApplicationItemRelationData.COLUMN_HOSTID, (Long) i.get(ItemData.COLUMN_HOSTID));\n\t\t\tzabbixLocalDB.update(\n\t\t\t\t\tApplicationItemRelationData.TABLE_NAME\n\t\t\t\t\t, values\n\t\t\t\t\t, ApplicationItemRelationData.COLUMN_ITEMID+\"=-1\"\n\t\t\t\t\t, null\n\t\t\t);\n\t\t}\n\t\treturn firstItemId;\n\t}\n\n\tpublic void importItems(long hostid) throws JSONException, IOException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\tif (!isCached(ItemData.TABLE_NAME, \"hostid=\"+hostid)) {\n\t\t\t_startTransaction();\n\t\t\tzabbixLocalDB.delete(ItemData.TABLE_NAME, ItemData.COLUMN_HOSTID+\"=\"+hostid, null);\n\t\t\tzabbixLocalDB.delete(ApplicationItemRelationData.TABLE_NAME, ApplicationItemRelationData.COLUMN_HOSTID+\"=\"+hostid, null);\n\n\t\t\t// count of items\n\t\t\tJSONObject result = _queryBuffer(\n\t\t\t\t\t\"item.get\"\n\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t.put(\"output\", \"extend\")\n\t\t\t\t\t.put(\"countOutput\", 1)\n\t\t\t\t\t.put(\"limit\", ZabbixConfig.ITEM_GET_LIMIT)\n\t\t\t\t\t.put(\"hostids\", new JSONArray().put(hostid))\n\t\t\t);\n\t\t\tint numItems = result.getInt(\"result\");\n\t\t\tJsonArrayOrObjectReader items = _queryStream(\n\t\t\t\t\t\"item.get\"\n\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t\t.put(\"output\", \"extend\")\n\t\t\t\t\t\t.put(\"limit\", ZabbixConfig.ITEM_GET_LIMIT)\n\t\t\t\t\t\t.put(isVersion2?\"selectApplications\":\"select_applications\", \"extend\")\n\t\t\t\t\t\t.put(\"hostids\", new JSONArray().put(hostid))\n\t\t\t);\n\t\t\timportItems(items, numItems, false);\n\t\t\titems.close();\n\n\t\t\tsetCached(ItemData.TABLE_NAME, \"hostid=\"+hostid, ZabbixConfig.CACHE_LIFETIME_ITEMS);\n\t\t\t_endTransaction();\n\t\t}\n\t}\n\n\tprivate void importScreenItems(JsonArrayOrObjectReader screenItems) throws JsonParseException, NumberFormatException, IOException {\n\t\tJsonObjectReader screenItemReader;\n\t\twhile ((screenItemReader = screenItems.next()) != null) {\n\t\t\tScreenItemData si = new ScreenItemData();\n\t\t\tint resourcetype = -1;\n\t\t\twhile (screenItemReader.nextValueToken()) {\n\t\t\t\tString propName = screenItemReader.getCurrentName();\n\t\t\t\tif (propName.equals(ScreenItemData.COLUMN_SCREENITEMID)) {\n\t\t\t\t\tsi.set(ScreenItemData.COLUMN_SCREENITEMID, Long.parseLong(screenItemReader.getText()));\n\t\t\t\t} else if (propName.equals(ScreenItemData.COLUMN_SCREENID)) {\n\t\t\t\t\tsi.set(ScreenItemData.COLUMN_SCREENID, Long.parseLong(screenItemReader.getText()));\n\t\t\t\t} else if (propName.equals(ScreenItemData.COLUMN_RESOURCEID)) {\n\t\t\t\t\tsi.set(ScreenItemData.COLUMN_RESOURCEID, Long.parseLong(screenItemReader.getText()));\n\t\t\t\t} else if (propName.equals(\"resourcetype\")) {\n\t\t\t\t\tresourcetype = Integer.parseInt(screenItemReader.getText());\n\t\t\t\t} else {\n\t\t\t\t\tscreenItemReader.nextProperty();\n\t\t\t\t}\n\t\t\t}\n\t\t\t// only resouretype == 0\n\t\t\tif (resourcetype == 0) {\n\t\t\t\tsi.insert(zabbixLocalDB);\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic void importScreens() throws ClientProtocolException, IOException, JSONException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\tif (!isCached(ScreenData.TABLE_NAME, null)) {\n\t\t\t_startTransaction();\n\n\t\t\tzabbixLocalDB.delete(ScreenData.TABLE_NAME, null, null);\n\t\t\tzabbixLocalDB.delete(ScreenItemData.TABLE_NAME, null, null);\n\t\t\tzabbixLocalDB.delete(CacheData.TABLE_NAME, CacheData.COLUMN_KIND+\"='\"+ScreenData.TABLE_NAME+\"'\", null);\n\n\t\t\tJsonArrayOrObjectReader screens = _queryStream(\n\t\t\t\t\t(isVersion2?\"s\":\"S\")+\"creen.get\"\n\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t\t.put(\"output\", \"extend\")\n\t\t\t\t\t\t.put(isVersion2?\"selectScreenItems\":\"select_screenitems\", \"extend\")\n\t\t\t);\n\t\t\tJsonObjectReader screenReader;\n\t\t\twhile ((screenReader = screens.next()) != null) {\n\t\t\t\tScreenData scr = new ScreenData();\n\t\t\t\twhile (screenReader.nextValueToken()) {\n\t\t\t\t\tString propName = screenReader.getCurrentName();\n\t\t\t\t\tif (propName.equals(ScreenData.COLUMN_SCREENID)) {\n\t\t\t\t\t\tscr.set(ScreenData.COLUMN_SCREENID, Long.parseLong(screenReader.getText()));\n\t\t\t\t\t} else if (propName.equals(ScreenData.COLUMN_NAME)) {\n\t\t\t\t\t\tscr.set(ScreenData.COLUMN_NAME, screenReader.getText());\n\t\t\t\t\t} else if (propName.equals(\"screenitems\")) {\n\t\t\t\t\t\timportScreenItems(screenReader.getJsonArray());\n\t\t\t\t\t} else {\n\t\t\t\t\t\tscreenReader.nextProperty();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tscr.insert(zabbixLocalDB);\n\t\t\t}\n\t\t\tscreens.close();\n\n\t\t\tsetCached(ScreenData.TABLE_NAME, null, ZabbixConfig.CACHE_LIFETIME_SCREENS);\n\t\t\t_endTransaction();\n\t\t}\n\t}\n\n\tpublic void importTrigger(String triggerid) throws JSONException, IOException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\tif (!isCached(TriggerData.TABLE_NAME, \"triggerid=\"+triggerid)) {\n\t\t\t_startTransaction();\n\n\t\t\tJsonArrayOrObjectReader trigger = _queryStream(\n\t\t\t\t\t\"trigger.get\"\n\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t\t.put(\"output\", \"extend\")\n\t\t\t\t\t\t.put(isVersion2?\"selectHosts\":\"select_hosts\", \"extend\")\n\t\t\t\t\t\t.put(\"triggerids\", new JSONArray().put(triggerid))\n\t\t\t);\n\t\t\timportTriggers(trigger);\n\t\t\ttrigger.close();\n\n\t\t\tsetCached(TriggerData.TABLE_NAME, \"triggerid=\"+triggerid, ZabbixConfig.CACHE_LIFETIME_TRIGGERS);\n\t\t\t_endTransaction();\n\t\t}\n\t}\n\n\t/**\n\t * importiert ein trigger mit dem attribute itemid. ggf. wird der trigger zuerst gelöscht und neu angelegt.\n\t * imports a trigger with the attribute itemid. if trigger already exists, it will be removed first.\n\t * @param triggerid\n\t * @throws JSONException\n\t * @throws IOException\n\t * @throws HttpAuthorizationRequiredException\n\t * @throws NoAPIAccessException\n\t */\n\tpublic void importTriggerColumnItemId(String triggerid) throws JSONException, IOException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\t// check if the trigger exists and if the itemid was set\n\t\tboolean mustImport = true;\n\t\tCursor cur = zabbixLocalDB.query(TriggerData.TABLE_NAME, null, TriggerData.COLUMN_TRIGGERID+\"=\"+triggerid, null, null, null, null);\n\t\tif (cur.moveToFirst()) {\n\t\t\tlong itemid = 0;\n\t\t\ttry {\n\t\t\t\titemid = cur.getLong(cur.getColumnIndex(TriggerData.COLUMN_ITEMID));\n\t\t\t} catch (Exception e) {\n\t\t\t\t// no itemid\n\t\t\t}\n\t\t\tif (itemid > 0) {\n\t\t\t\tmustImport = false;\n\t\t\t}\n\t\t}\n\t\tif (mustImport) {\n\t\t\t_startTransaction();\n\t\t\tzabbixLocalDB.delete(TriggerData.TABLE_NAME, TriggerData.COLUMN_TRIGGERID+\"=\"+triggerid, null);\n\t\t\tJsonArrayOrObjectReader triggers = _queryStream(\n\t\t\t\t\t\"trigger.get\"\n\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t\t.put(\"output\", \"extend\")\n\t\t\t\t\t\t.put(isVersion2?\"selectHosts\":\"select_hosts\", \"extend\")\n\t\t\t\t\t\t.put(isVersion2?\"selectGroups\":\"select_groups\", \"extend\")\n\t\t\t\t\t\t.put(isVersion2?\"selectItems\":\"select_items\", \"extend\")\n\t\t\t\t\t\t.put(\"triggerids\", new JSONArray().put(triggerid))\n\t\t\t\t\t\t.put(\"limit\", 1)\n\t\t\t);\n\t\t\timportTriggers(triggers);\n\t\t\t_endTransaction();\n\t\t}\n\t}\n\n\t/**\n\t * imports the \"warning\"-triggers\n\t * @throws JSONException\n\t * @throws IOException\n\t * @throws HttpAuthorizationRequiredException\n\t * @throws NoAPIAccessException\n\t */\n\tpublic void importTriggers() throws JSONException, IOException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\tif (!isCached(TriggerData.TABLE_NAME, null)) {\n\t\t\t// clear triggers\n\t\t\tzabbixLocalDB.delete(TriggerData.TABLE_NAME, null, null);\n\n\t\t\t_startTransaction();\n\n\t\t\tlong min = (new Date().getTime()/1000)-ZabbixConfig.STATUS_SHOW_TRIGGER_TIME;\n\t\t\tJsonArrayOrObjectReader triggers = _queryStream(\n\t\t\t\t\t\"trigger.get\"\n\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t\t.put(\"output\", \"extend\")\n\t\t\t\t\t\t.put(\"sortfield\", \"lastchange\")\n\t\t\t\t\t\t.put(\"sortorder\", \"desc\")\n\t\t\t\t\t\t.put(isVersion2?\"selectHosts\":\"select_hosts\", \"extend\")\n\t\t\t\t\t\t.put(isVersion2?\"selectGroups\":\"select_groups\", \"extend\")\n\t\t\t\t\t\t.put(isVersion2?\"selectItems\":\"select_items\", \"extend\")\n\t\t\t\t\t\t.put(\"lastChangeSince\", min)\n\t\t\t\t\t\t.put(\"only_true\", \"1\")\n\t\t\t\t\t\t.put(\"limit\", ZabbixConfig.TRIGGER_GET_LIMIT)\n\t\t\t\t\t\t.put(\"expandDescription\", true)\n\t\t\t);\n\t\t\timportTriggers(triggers);\n\t\t\ttriggers.close();\n\n\t\t\tsetCached(TriggerData.TABLE_NAME, null, ZabbixConfig.CACHE_LIFETIME_TRIGGERS);\n\t\t\t_endTransaction();\n\t\t}\n\t}\n\n\tprivate void importTriggers(JsonArrayOrObjectReader jsonArray) throws JsonParseException, IOException {\n\t\tJsonObjectReader triggerReader;\n\t\twhile ((triggerReader = jsonArray.next()) != null) {\n\t\t\tTriggerData t = new TriggerData();\n\t\t\twhile (triggerReader.nextValueToken()) {\n\t\t\t\tString propName = triggerReader.getCurrentName();\n\t\t\t\tif (propName.equals(TriggerData.COLUMN_TRIGGERID)) {\n\t\t\t\t\tt.set(TriggerData.COLUMN_TRIGGERID, Long.parseLong(triggerReader.getText()));\n\t\t\t\t} else if (propName.equals(TriggerData.COLUMN_COMMENTS)) {\n\t\t\t\t\tt.set(TriggerData.COLUMN_COMMENTS, triggerReader.getText());\n\t\t\t\t} else if (propName.equals(TriggerData.COLUMN_DESCRIPTION)) {\n\t\t\t\t\tt.set(TriggerData.COLUMN_DESCRIPTION, triggerReader.getText());\n\t\t\t\t} else if (propName.equals(TriggerData.COLUMN_EXPRESSION)) {\n\t\t\t\t\tt.set(TriggerData.COLUMN_EXPRESSION, triggerReader.getText());\n\t\t\t\t} else if (propName.equals(TriggerData.COLUMN_LASTCHANGE)) {\n\t\t\t\t\tt.set(TriggerData.COLUMN_LASTCHANGE, Integer.parseInt(triggerReader.getText()));\n\t\t\t\t} else if (propName.equals(TriggerData.COLUMN_PRIORITY)) {\n\t\t\t\t\tt.set(TriggerData.COLUMN_PRIORITY, Integer.parseInt(triggerReader.getText()));\n\t\t\t\t} else if (propName.equals(TriggerData.COLUMN_STATUS)) {\n\t\t\t\t\tt.set(TriggerData.COLUMN_STATUS, Integer.parseInt(triggerReader.getText()));\n\t\t\t\t} else if (propName.equals(TriggerData.COLUMN_VALUE)) {\n\t\t\t\t\tt.set(TriggerData.COLUMN_VALUE, Integer.parseInt(triggerReader.getText()));\n\t\t\t\t} else if (propName.equals(TriggerData.COLUMN_URL)) {\n\t\t\t\t\tt.set(TriggerData.COLUMN_URL, triggerReader.getText());\n\t\t\t\t} else if (propName.equals(\"hosts\")) {\n\t\t\t\t\tObject[] hostsCache = importHosts(triggerReader.getJsonArray(), null);\n\t\t\t\t\tt.set(TriggerData.COLUMN_HOSTS, hostsCache[0]);\n\t\t\t\t\tt.set(TriggerData.COLUMN_HOSTID, hostsCache[1]);\n\t\t\t\t} else if (propName.equals(\"groups\")) {\n\t\t\t\t\timportHostGroups(triggerReader.getJsonArray());\n\t\t\t\t} else if (propName.equals(\"items\")) {\n\t\t\t\t\t// store the first item id\n\t\t\t\t\tt.set(TriggerData.COLUMN_ITEMID, importItems(triggerReader.getJsonArray(), 1, true));\n\t\t\t\t} else {\n\t\t\t\t\ttriggerReader.nextProperty();\n\t\t\t\t}\n\t\t\t}\n\t\t\tt.insert(zabbixLocalDB, TriggerData.COLUMN_TRIGGERID);\n\t\t\t_commitTransactionIfRecommended();\n\t\t}\n\t}\n\n\tpublic void importTriggersByItemId(String itemid) throws JSONException, IOException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n\t\tif (!isCached(TriggerData.TABLE_NAME, \"itemid=\"+itemid)) {\n\t\t\t_startTransaction();\n\t\t\tzabbixLocalDB.delete(TriggerData.TABLE_NAME, TriggerData.COLUMN_ITEMID+\"=\"+itemid, null);\n\t\t\tJsonArrayOrObjectReader triggers = _queryStream(\n\t\t\t\t\t\"trigger.get\"\n\t\t\t\t\t, new JSONObject()\n\t\t\t\t\t\t.put(\"output\", \"extend\")\n\t\t\t\t\t\t.put(isVersion2?\"selectHosts\":\"select_hosts\", \"extend\")\n\t\t\t\t\t\t.put(isVersion2?\"selectGroups\":\"select_groups\", \"extend\")\n\t\t\t\t\t\t.put(isVersion2?\"selectItems\":\"select_items\", \"extend\")\n\t\t\t\t\t\t.put(\"itemids\", new JSONArray().put(itemid))\n\t\t\t\t\t\t.put(\"limit\", 1)\n\t\t\t\t\t\t.put(\"sortfield\", \"lastchange\")\n\t\t\t\t\t\t.put(\"sortorder\", \"DESC\")\n\t\t\t);\n\t\t\timportTriggers(triggers);\n\t\t\tsetCached(TriggerData.TABLE_NAME, \"itemid=\"+itemid, ZabbixConfig.CACHE_LIFETIME_TRIGGERS);\n\t\t\t_endTransaction();\n\t\t}\n\t}\n\n\tpublic boolean isCached(String kind, String filter) {\n\t\tSQLiteQueryBuilder sqlBuilder = new SQLiteQueryBuilder();\n\t\tsqlBuilder.setTables(CacheData.TABLE_NAME);\n\t\tsqlBuilder.appendWhere(CacheData.COLUMN_KIND+\"='\"+kind+\"' AND \");\n\t\tsqlBuilder.appendWhere(CacheData.COLUMN_FILTER+\n\t\t\t\t(filter==null?\" IS NULL\":\"='\"+filter+\"'\")\n\t\t);\n\t\tsqlBuilder.appendWhere(\" AND \"+CacheData.COLUMN_EXPIRE_DATE+\">\"+new Date().getTime()/1000);\n\t\tCursor cur = sqlBuilder.query(\n\t\t\tzabbixLocalDB,\n\t\t\tnull,\n\t\t\tnull,\n\t\t\tnull,\n\t\t\tnull,\n\t\t\tnull,\n\t\t\tnull\n\t\t);\n\t\tLog.i(\"ZabbixContentProvider\", \"isCached \"+kind+\"//\"+filter+\"//\"+cur.moveToFirst());\n\t\treturn cur.moveToFirst();\n\t}\n\n\t/**\n\t * public, for the unit test\n\t */\n\tpublic void setCached(String kind, String filter, int lifetime) {\n\t\tCacheData cache = new CacheData();\n\t\tcache.set(CacheData.COLUMN_EXPIRE_DATE, new Date().getTime()/1000 + lifetime);\n\t\tcache.set(CacheData.COLUMN_KIND, kind);\n\t\tif (filter != null) {\n\t\t\tcache.set(CacheData.COLUMN_FILTER, filter);\n\t\t}\n\t\tcache.insert(zabbixLocalDB);\n\t}\n\n\t/**\n\t * updates the progressbar in the gui\n\t * @param i 0..100\n\t */\n\tpublic void showProgress(int i) {\n\t\t// if applicable, transform the progress\n\t\tif (transformProgressStart != 0 && transformProgressEnd != 0) {\n\t\t\ti = (int) (transformProgressStart + (transformProgressEnd-transformProgressStart)*(double)i/100);\n\t\t}\n\n\t\tIntent intent = new Intent(ZabbixContentProvider.CONTENT_PROVIDER_INTENT_ACTION);\n\t\tintent.putExtra(\"flag\", ZabbixContentProvider.INTENT_FLAG_SHOW_PROGRESS);\n\t\tintent.putExtra(\"value\", i);\n\t\tcontext.sendBroadcast(intent);\n\t}\n\n\t/**\n\t * transforms the progress\n\t * @param start 0% => start%\n\t * @param end 100% => end%\n\t */\n\tpublic void transformProgress(int start, int end) {\n\t\ttransformProgressStart = start;\n\t\ttransformProgressEnd = end;\n\t}\n}\n"],
      "c_hash_sni": "976f9d4001cf9c49a39f3b93acb53607ea8c0bfd",
      "name_sni": "src/com/inovex/zabbixmobile/api/ZabbixService.java",
      "c_parents_ss": ["bae0223e3d008ee05a94f9b7db30eec6844110b6"],
      "c_imports_removed_t": ["<empty>"],
      "p_hash_sni": "bae0223e3d008ee05a94f9b7db30eec6844110b6",
      "c_imports_added_t": ["<empty>"],
      "p_methods_t": ["ApplicationData ApplicationItemRelationData ArrayList, String BasicHttpParams BufferedReader CacheData ContentValues CustomSSLSocketFactory Date DefaultHttpClient EventData GraphData GraphItemData HashSet, Long HistoryDetailData HostData HostGroupData HttpAuthorizationRequiredException HttpPost IOException IllegalStateException InputStreamReader Intent ItemData JSONArray JSONObject JsonArrayOrObjectReader JsonFactory NoAPIAccessException PreconditionFailedException RuntimeException SQLiteQueryBuilder Scheme SchemeRegistry ScreenData ScreenItemData StringBuilder StringEntity ThreadSafeClientConnManager TriggerData UsernamePasswordCredentials X509TrustManager _commitTransactionIfRecommended _endTransaction _queryBuffer _queryStream _startTransaction add addHeader append appendWhere authenticate beginTransaction close contains createJsonParser createSocket d delete endTransaction endsWith equals execute get getBoolean getColumnIndex getContent getCredentialsProvider getCurrentName getCurrentToken getDefaultSharedPreferences getDefaultType getEntity getInstance getInt getJSONArray getJSONObject getJsonArray getLong getMessage getParams getReasonPhrase getResources getSocketFactory getStatusCode getStatusLine getString getText getTime i importApplications importEvents importGraphItems importHostGroups importHosts importItems importScreenItems importTriggers inTransaction indexOf init insert isCached isClosed length load matches min moveToFirst moveToNext next nextProperty nextToken nextValue nextValueToken parseColor parseDouble parseInt parseLong printStackTrace put putExtra query read register replace replaceAll sendBroadcast set setCached setConnectionTimeout setContentCharset setCredentials setEntity setHostnameVerifier setRedirecting setTables setTransactionSuccessful setVersion showProgress split substring toString trim update"],
      "c_imports_removed_cs": "<empty>",
      "p_imports_t": ["android.database.sqlite.SQLiteQueryBuilder org.apache.http.conn.scheme.SchemeRegistry java.util.HashSet org.apache.http.params.BasicHttpParams android.content.Context org.apache.http.params.HttpParams org.apache.http.conn.scheme.PlainSocketFactory java.util.ArrayList com.inovex.zabbixmobile.model.ItemData com.inovex.zabbixmobile.model.HostData com.inovex.zabbixmobile.model.GraphData com.inovex.zabbixmobile.model.EventData org.apache.http.auth.UsernamePasswordCredentials org.apache.http.params.HttpConnectionParams android.content.SharedPreferences java.security.KeyManagementException org.apache.http.conn.ClientConnectionManager org.codehaus.jackson.JsonFactory org.apache.http.entity.StringEntity java.util.Set org.apache.http.params.HttpProtocolParams com.inovex.zabbixmobile.model.ApplicationItemRelationData com.inovex.zabbixmobile.model.TriggerData org.codehaus.jackson.JsonToken android.database.Cursor java.net.Socket android.content.Intent org.apache.http.protocol.HTTP org.json.JSONException java.net.UnknownHostException com.inovex.zabbixmobile.model.HistoryDetailData org.apache.http.HttpResponse java.security.KeyStore com.inovex.zabbixmobile.ZabbixContentProvider android.preference.PreferenceManager android.util.Log org.json.JSONObject java.security.NoSuchAlgorithmException org.apache.http.client.params.HttpClientParams java.io.IOException org.apache.http.conn.scheme.Scheme org.apache.http.client.methods.HttpPost javax.net.ssl.SSLContext org.apache.http.auth.AuthScope org.apache.http.conn.ssl.SSLSocketFactory java.security.KeyStoreException android.content.ContentValues java.io.InputStreamReader java.util.Date java.security.UnrecoverableKeyException android.graphics.Color org.apache.http.client.ClientProtocolException com.inovex.zabbixmobile.model.GraphItemData org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager org.json.JSONArray com.inovex.zabbixmobile.model.CacheData javax.net.ssl.SSLPeerUnverifiedException com.inovex.zabbixmobile.model.HostGroupData org.codehaus.jackson.JsonParseException java.security.cert.X509Certificate org.apache.http.HttpVersion android.database.sqlite.SQLiteDatabase java.util.List java.security.cert.CertificateException java.io.BufferedReader com.inovex.zabbixmobile.model.ApplicationData com.inovex.zabbixmobile.model.ScreenItemData javax.net.ssl.TrustManager com.inovex.zabbixmobile.model.ScreenData com.inovex.zabbixmobile.R org.codehaus.jackson.JsonParser org.apache.http.impl.client.DefaultHttpClient javax.net.ssl.X509TrustManager"],
      "p_subject_t": ["triggers are more stable"],
      "p_callsites_cs": "<unknown>.set(<unknown>, <unknown>)#org.apache.http.HttpEntity.getContent()#java.lang.String.equals(java.lang.String)#org.json.JSONArray.JSONArray()#<unknown>.set(<unknown>, java.lang.Object)#org.json.JSONObject.put(java.lang.String, java.lang.Integer)#org.json.JSONArray.put(java.lang.String)#org.json.JSONObject.JSONObject()#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.codehaus.jackson.JsonFactory.createJsonParser(java.io.InputStream)#java.lang.String.equals(<unknown>)#org.apache.http.StatusLine.getStatusCode()#<unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>)#org.json.JSONObject.put(java.lang.String, java.lang.String)#android.database.sqlite.SQLiteDatabase.inTransaction()#android.util.Log.d(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService._startTransaction()#java.lang.String.equals(java.lang.String)#org.codehaus.jackson.JsonFactory.JsonFactory()#com.inovex.zabbixmobile.api.ZabbixService._endTransaction()#org.json.JSONObject.put(java.lang.String, int)#android.content.ContentValues.ContentValues(int)#org.apache.http.conn.scheme.SchemeRegistry.SchemeRegistry()#<unknown>.insert(android.database.sqlite.SQLiteDatabase)#<unknown>.insert(android.database.sqlite.SQLiteDatabase)#com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject)#com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject)#com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject)#org.json.JSONObject.getJSONObject(java.lang.String)#java.io.InputStreamReader.InputStreamReader(java.io.InputStream)#android.content.Intent.putExtra(java.lang.String, <unknown>)#org.json.JSONArray.length()#java.lang.String.equals(java.lang.String)#<unknown>.set(<unknown>, <unknown>)#java.lang.String.equals(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService.PreconditionFailedException.PreconditionFailedException()#java.lang.StringBuilder.StringBuilder()#android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null)#<unknown>.nextValueToken()#org.json.JSONObject.JSONObject()#org.json.JSONObject.put(java.lang.String, int)#org.json.JSONObject.put(java.lang.String, org.json.JSONArray)#java.lang.String.equals(<unknown>)#<unknown>.get(<unknown>)#<unknown>.insert(android.database.sqlite.SQLiteDatabase)#android.content.Intent.putExtra(java.lang.String, <unknown>)#java.lang.String.equals(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService.importItems(<unknown>, int, boolean)#com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, java.lang.String, int)#android.util.Log.d(java.lang.String, java.lang.String)#org.json.JSONObject.put(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject)#org.apache.http.conn.scheme.Scheme.Scheme(java.lang.String, org.apache.http.conn.ssl.SSLSocketFactory, int)#org.apache.http.HttpEntity.getContent()#org.codehaus.jackson.JsonParser.close()#java.lang.String.equals(<unknown>)#<unknown>.nextValueToken()#<unknown>.getCurrentName()#org.json.JSONArray.JSONArray(java.util.Set<java.lang.Long>)#<unknown>.nextValueToken()#android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null)#<unknown>.getJsonArray()#com.inovex.zabbixmobile.api.ZabbixService._startTransaction()#org.json.JSONArray.JSONArray()#<unknown>.nextProperty()#java.lang.String.equals(java.lang.String)#android.database.sqlite.SQLiteDatabase.update(<unknown>, android.content.ContentValues, <unknown>, null)#java.util.Set<java.lang.Long>.add(<unknown>)#<unknown>.get(<unknown>)#<unknown>.get(<unknown>)#android.content.ContentValues.put(<unknown>, java.lang.Long)#java.lang.String.equals(java.lang.String)#org.apache.http.StatusLine.getReasonPhrase()#java.lang.RuntimeException.RuntimeException(java.lang.String)#<unknown>.nextProperty()#java.lang.Throwable.printStackTrace()#java.lang.String.equals(<unknown>)#java.lang.Long.parseLong(<unknown>)#org.json.JSONObject.put(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject)#<unknown>.getCurrentName()#android.content.ContentValues.put(<unknown>, java.lang.Long)#org.apache.http.entity.StringEntity.StringEntity(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject)#java.lang.String.equals(<unknown>)#<unknown>.EventData()#<unknown>.next()#<unknown>.set(<unknown>, <unknown>)#com.inovex.zabbixmobile.api.ZabbixService.CustomSSLSocketFactory.CustomSSLSocketFactory(java.security.KeyStore)#com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject)#<unknown>.getCurrentName()#java.util.List<java.lang.String>.add(java.lang.String)#org.json.JSONObject.put(java.lang.String, int)#<unknown>.getText()#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.apache.http.conn.ssl.SSLSocketFactory.setHostnameVerifier(org.apache.http.conn.ssl.X509HostnameVerifier)#<unknown>.set(<unknown>, <unknown>)#<unknown>.getText()#org.json.JSONObject.put(java.lang.String, long)#java.util.Date.Date()#android.util.Log.i(java.lang.String, java.lang.String)#org.json.JSONObject.put(java.lang.String, int)#org.json.JSONObject.put(java.lang.String, int)#<unknown>.set(<unknown>, <unknown>)#com.inovex.zabbixmobile.api.ZabbixService.authenticate()#android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null)#android.util.Log.d(java.lang.String, java.lang.String)#java.lang.String.equals(java.lang.String)#org.apache.http.HttpResponse.getEntity()#org.json.JSONObject.JSONObject()#com.inovex.zabbixmobile.api.ZabbixService.importItems(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader, int, boolean)#com.inovex.zabbixmobile.api.ZabbixService._startTransaction()#com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, null, int)#java.io.BufferedReader.read()#org.json.JSONObject.put(java.lang.String, long)#<unknown>.set(<unknown>, <unknown>)#android.database.Cursor.getLong(<unknown>)#java.lang.IllegalStateException.IllegalStateException(java.lang.String)#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.getCurrentName()#android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null)#android.util.Log.d(java.lang.String, java.lang.String)#<unknown>.set(<unknown>, <unknown>)#java.lang.String.equals(<unknown>)#org.json.JSONObject.put(java.lang.String, java.lang.String)#android.database.Cursor.moveToFirst()#com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, java.lang.String)#android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null)#java.lang.String.equals(java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, java.lang.String)#<unknown>.getText()#org.json.JSONObject.put(java.lang.String, java.lang.String)#android.content.Intent.putExtra(java.lang.String, <unknown>)#<unknown>.getCurrentName()#android.content.res.Resources.getString(<unknown>)#android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null)#android.database.sqlite.SQLiteDatabase.setTransactionSuccessful()#<unknown>.next()#<unknown>.getText()#<unknown>.nextValueToken()#com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject)#com.inovex.zabbixmobile.api.ZabbixService.showProgress(<unknown>)#java.io.IOException.IOException(java.lang.String)#<unknown>.getCurrentName()#android.util.Log.d(java.lang.String, java.lang.String)#java.lang.Object.toString()#org.json.JSONObject.toString()#<unknown>.set(<unknown>, <unknown>)#org.json.JSONArray.JSONArray()#org.apache.http.HttpResponse.getStatusLine()#org.json.JSONArray.JSONArray()#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.apache.http.impl.client.DefaultHttpClient.DefaultHttpClient()#org.json.JSONObject.put(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject)#org.apache.http.HttpResponse.getStatusLine()#java.lang.String.equals(<unknown>)#java.util.Date.Date()#android.util.Log.i(java.lang.String, java.lang.String)#android.content.Context.getResources()#org.apache.http.impl.client.CloseableHttpClient.execute(org.apache.http.client.methods.HttpPost)#com.inovex.zabbixmobile.api.ZabbixService._commitTransactionIfRecommended()#com.inovex.zabbixmobile.api.ZabbixService.importHostGroups(<unknown>)#android.content.Context.sendBroadcast(android.content.Intent)#android.content.Context.sendBroadcast(android.content.Intent)#com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, null, int)#java.lang.Integer.parseInt(<unknown>)#<unknown>.ApplicationData()#com.inovex.zabbixmobile.api.ZabbixService.NoAPIAccessException.NoAPIAccessException()#com.inovex.zabbixmobile.api.ZabbixService._commitTransactionIfRecommended()#<unknown>.getJsonArray()#org.apache.http.message.AbstractHttpMessage.addHeader(java.lang.String, java.lang.String)#org.json.JSONObject.put(java.lang.String, int)#java.lang.String.replace(java.lang.String, java.lang.String)#org.json.JSONArray.JSONArray()#<unknown>.set(<unknown>, <unknown>)#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.set(<unknown>, <unknown>)#org.json.JSONArray.JSONArray()#java.lang.String.equals(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, java.lang.String, int)#<unknown>.nextProperty()#<unknown>.set(<unknown>, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject)#org.json.JSONObject.JSONObject()#java.lang.String.contains(java.lang.String)#org.apache.http.client.methods.HttpEntityEnclosingRequestBase.setEntity(org.apache.http.entity.StringEntity)#com.inovex.zabbixmobile.api.ZabbixService.importTriggers(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader)#org.json.JSONObject.put(java.lang.String, int)#<unknown>.HostGroupData()#<unknown>.JsonArrayOrObjectReader(org.codehaus.jackson.JsonParser)#<unknown>.HostGroupData()#<unknown>.nextProperty()#java.lang.Long.parseLong(<unknown>)#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.json.JSONObject.put(java.lang.String, org.json.JSONArray)#org.json.JSONObject.put(java.lang.String, java.lang.Integer)#<unknown>.set(<unknown>, <unknown>)#<unknown>.close()#org.json.JSONObject.put(java.lang.String, org.json.JSONArray)#<unknown>.set(<unknown>, <unknown>)#java.lang.String.equals(java.lang.String)#android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null)#<unknown>.next()#org.json.JSONObject.toString()#java.lang.String.equals(<unknown>)#java.lang.String.equals(<unknown>)#android.database.sqlite.SQLiteDatabase.query(<unknown>, null, <unknown>, null, null, null, null)#<unknown>.set(<unknown>, <unknown>)#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.CacheData()#<unknown>.getText()#com.inovex.zabbixmobile.api.ZabbixService._startTransaction()#<unknown>.set(<unknown>, <unknown>)#com.inovex.zabbixmobile.api.ZabbixService._endTransaction()#<unknown>.set(<unknown>, int)#<unknown>.getJsonArray()#java.lang.String.equals(<unknown>)#java.util.Date.getTime()#java.lang.String.equals(java.lang.String)#org.json.JSONObject.put(java.lang.String, int)#<unknown>.set(<unknown>, <unknown>)#java.lang.Integer.parseInt(<unknown>)#org.codehaus.jackson.JsonParser.getCurrentName()#<unknown>.nextProperty()#com.inovex.zabbixmobile.api.ZabbixService._endTransaction()#java.lang.String.equals(<unknown>)#org.json.JSONObject.put(java.lang.String, int)#android.database.sqlite.SQLiteDatabase.update(<unknown>, android.content.ContentValues, <unknown>, null)#com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject)#com.inovex.zabbixmobile.api.ZabbixService._endTransaction()#java.lang.StringBuilder.append(char)#<unknown>.set(<unknown>, <unknown>)#<unknown>.get(<unknown>)#<unknown>.set(<unknown>, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject)#org.json.JSONObject.put(java.lang.String, java.lang.String)#android.database.Cursor.getLong(<unknown>)#java.lang.String.equals(<unknown>)#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.json.JSONObject.JSONObject()#org.apache.http.params.HttpProtocolParams.setVersion(org.apache.http.params.HttpParams, org.apache.http.HttpVersion)#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.HistoryDetailData()#android.util.Log.d(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService._startTransaction()#<unknown>.next()#<unknown>.set(<unknown>, <unknown>)#<unknown>.nextValueToken()#org.json.JSONObject.JSONObject()#java.lang.String.equals(<unknown>)#java.lang.Long.parseLong(<unknown>)#java.lang.Integer.parseInt(<unknown>)#org.apache.http.client.methods.HttpPost.HttpPost(java.lang.String)#org.apache.http.StatusLine.getStatusCode()#<unknown>.set(<unknown>, int)#java.lang.String.equals(java.lang.String)#java.lang.String.equals(<unknown>)#java.lang.String.equals(<unknown>)#<unknown>.getCurrentName()#java.util.ArrayList<java.lang.String>.ArrayList, String()#com.inovex.zabbixmobile.api.ZabbixService._startTransaction()#com.inovex.zabbixmobile.api.ZabbixService.importTriggers(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader)#org.json.JSONArray.put(java.lang.String)#<unknown>.nextValueToken()#org.json.JSONArray.put(java.lang.String)#<unknown>.set(<unknown>, <unknown>)#org.json.JSONObject.put(java.lang.String, int)#com.inovex.zabbixmobile.api.ZabbixService.importItems(<unknown>, int, boolean)#org.json.JSONObject.JSONObject()#com.inovex.zabbixmobile.api.ZabbixService.importTriggers(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService.importGraphItems(<unknown>)#<unknown>.ScreenItemData()#<unknown>.set(<unknown>, <unknown>)#<unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>)#android.preference.PreferenceManager.getDefaultSharedPreferences(android.content.Context)#org.json.JSONObject.length()#<unknown>.nextValueToken()#java.util.HashSet<java.lang.Long>.HashSet, Long()#java.lang.String.equals(java.lang.String)#android.content.SharedPreferences.getBoolean(java.lang.String, boolean)#<unknown>.insert(android.database.sqlite.SQLiteDatabase)#org.json.JSONObject.put(java.lang.String, org.json.JSONArray)#<unknown>.close()#com.inovex.zabbixmobile.api.ZabbixService.importHosts(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader, int)#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.next()#android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null)#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.json.JSONObject.getString(java.lang.String)#<unknown>.set(<unknown>, <unknown>)#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.close()#org.json.JSONObject.getString(java.lang.String)#java.lang.String.equals(java.lang.String)#java.lang.Long.parseLong(<unknown>)#org.codehaus.jackson.JsonParser.isClosed()#org.json.JSONObject.put(java.lang.String, int)#org.json.JSONObject.put(java.lang.String, org.json.JSONArray)#org.json.JSONObject.put(java.lang.String, long)#<unknown>.close()#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.set(<unknown>, long)#org.json.JSONObject.put(java.lang.String, org.json.JSONObject)#<unknown>.set(<unknown>, <unknown>)#com.inovex.zabbixmobile.api.ZabbixService._endTransaction()#java.lang.String.replaceAll(java.lang.String, java.lang.String)#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.nextValueToken()#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.apache.http.params.BasicHttpParams.BasicHttpParams()#android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null)#android.database.sqlite.SQLiteDatabase.beginTransaction()#com.inovex.zabbixmobile.api.ZabbixService._commitTransactionIfRecommended()#com.inovex.zabbixmobile.api.ZabbixService._endTransaction()#java.lang.String.equals(<unknown>)#<unknown>.insert(android.database.sqlite.SQLiteDatabase)#<unknown>.insert(android.database.sqlite.SQLiteDatabase)#org.json.JSONObject.put(java.lang.String, int)#<unknown>.next()#com.inovex.zabbixmobile.api.ZabbixService._startTransaction()#<unknown>.getJsonArray()#android.content.SharedPreferences.getString(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, null, int)#javax.net.SocketFactory.createSocket()#java.lang.Long.parseLong(<unknown>)#org.apache.http.client.CredentialsProvider.setCredentials(org.apache.http.auth.AuthScope, org.apache.http.auth.UsernamePasswordCredentials)#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.next()#com.inovex.zabbixmobile.api.ZabbixService.HttpAuthorizationRequiredException.HttpAuthorizationRequiredException()#android.database.sqlite.SQLiteQueryBuilder.query(android.database.sqlite.SQLiteDatabase, null, null, null, null, null, null)#java.util.Date.Date()#com.inovex.zabbixmobile.api.ZabbixService._commitTransactionIfRecommended()#<unknown>.set(<unknown>, java.lang.String)#org.json.JSONObject.JSONObject()#<unknown>.next()#<unknown>.set(<unknown>, <unknown>)#<unknown>.set(<unknown>, <unknown>)#com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject)#java.lang.String.equals(java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, java.lang.String)#java.lang.String.indexOf(char)#android.database.sqlite.SQLiteDatabase.query(<unknown>, null, <unknown>, null, null, null, null)#android.preference.PreferenceManager.getDefaultSharedPreferences(android.content.Context)#<unknown>.nextProperty()#org.apache.http.impl.client.CloseableHttpClient.execute(org.apache.http.client.methods.HttpPost)#<unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>)#com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, java.lang.String)#org.json.JSONObject.JSONObject()#<unknown>.close()#android.database.Cursor.getColumnIndex(<unknown>)#android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null)#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.nextProperty()#org.apache.http.conn.scheme.PlainSocketFactory.getSocketFactory()#com.inovex.zabbixmobile.api.ZabbixService._commitTransactionIfRecommended()#com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject)#java.lang.StringBuilder.toString()#org.json.JSONObject.put(java.lang.String, java.lang.String)#android.database.sqlite.SQLiteQueryBuilder.SQLiteQueryBuilder()#<unknown>.insert(android.database.sqlite.SQLiteDatabase)#org.apache.http.conn.scheme.SchemeRegistry.register(org.apache.http.conn.scheme.Scheme)#<unknown>.set(<unknown>, <unknown>)#org.json.JSONObject.JSONObject(java.lang.String)#java.lang.String.equals(<unknown>)#<unknown>.set(<unknown>, <unknown>)#<unknown>.set(<unknown>, <unknown>)#java.lang.IllegalStateException.IllegalStateException(java.lang.String)#java.lang.Double.parseDouble(<unknown>)#android.content.ContentValues.put(<unknown>, java.lang.Long)#android.database.sqlite.SQLiteQueryBuilder.appendWhere(<unknown>)#org.apache.http.conn.scheme.SchemeRegistry.register(org.apache.http.conn.scheme.Scheme)#org.json.JSONObject.getInt(java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService.importHosts(<unknown>, null)#org.json.JSONObject.put(java.lang.String, boolean)#java.lang.Long.parseLong(<unknown>)#java.lang.String.indexOf(char)#android.database.sqlite.SQLiteQueryBuilder.appendWhere(<unknown>)#java.lang.String.length()#java.lang.String.equals(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject)#<unknown>.nextProperty()#<unknown>.next()#android.content.SharedPreferences.getString(java.lang.String, java.lang.String)#<unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>)#com.inovex.zabbixmobile.api.ZabbixService.importTriggers(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader)#<unknown>.GraphData()#org.json.JSONArray.put(java.lang.String)#org.apache.http.impl.client.AbstractHttpClient.getParams()#<unknown>.set(<unknown>, long)#<unknown>.set(<unknown>, <unknown>)#org.json.JSONObject.getJSONObject(java.lang.String)#org.json.JSONObject.put(java.lang.String, java.lang.String)#java.lang.String.equals(java.lang.String)#org.json.JSONObject.getString(java.lang.String)#java.lang.String.equals(<unknown>)#java.lang.String.equals(<unknown>)#<unknown>.getCurrentName()#java.lang.String.equals(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService.showProgress(int)#<unknown>.getCurrentName()#com.inovex.zabbixmobile.api.ZabbixService.importHosts(<unknown>, null)#com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, java.lang.String, int)#org.json.JSONObject.put(java.lang.String, int)#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.close()#java.lang.String.replace(java.lang.String, java.lang.String)#java.lang.String.equals(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject)#com.inovex.zabbixmobile.api.ZabbixService._endTransaction()#android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null)#android.database.Cursor.moveToNext()#<unknown>.HostData()#<unknown>.set(<unknown>, long)#<unknown>.next()#com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject)#android.database.sqlite.SQLiteQueryBuilder.setTables(<unknown>)#java.util.Date.getTime()#org.json.JSONObject.put(java.lang.String, long)#android.content.ContentValues.ContentValues(int)#java.lang.Long.parseLong(<unknown>)#org.apache.http.HttpResponse.getEntity()#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.getText()#java.lang.String.equals(java.lang.String)#<unknown>.set(<unknown>, <unknown>)#<unknown>.set(<unknown>, <unknown>)#javax.net.ssl.SSLContext.init(null, javax.net.ssl.TrustManager[], null)#android.database.sqlite.SQLiteDatabase.endTransaction()#java.lang.String.equals(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, java.lang.String)#android.util.Log.d(java.lang.String, java.lang.String)#<unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>)#<unknown>.next()#<unknown>.close()#<unknown>.insert(android.database.sqlite.SQLiteDatabase)#org.json.JSONObject.put(java.lang.String, java.lang.String)#java.lang.Throwable.getMessage()#java.lang.String.equals(<unknown>)#java.lang.String.equals(<unknown>)#<unknown>.set(<unknown>, <unknown>)#com.inovex.zabbixmobile.api.ZabbixService._endTransaction()#javax.net.ssl.SSLContext.getSocketFactory()#org.json.JSONObject.JSONObject()#android.content.Context.getResources()#org.json.JSONObject.put(java.lang.String, int)#com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, null)#com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, java.lang.String, int)#java.lang.String.matches(java.lang.String)#<unknown>.set(<unknown>, <unknown>)#org.json.JSONArray.put(java.lang.String)#<unknown>.set(<unknown>, <unknown>)#android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null)#android.content.Context.sendBroadcast(android.content.Intent)#org.json.JSONObject.getJSONObject(java.lang.String)#<unknown>.get(<unknown>)#android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null)#java.lang.String.equals(<unknown>)#android.content.SharedPreferences.getBoolean(java.lang.String, boolean)#java.lang.Throwable.printStackTrace()#android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null)#org.json.JSONObject.put(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService._startTransaction()#android.content.Intent.putExtra(java.lang.String, int)#org.json.JSONObject.JSONObject()#<unknown>.getText()#com.inovex.zabbixmobile.api.ZabbixService._endTransaction()#org.apache.http.client.methods.HttpPost.HttpPost(java.lang.String)#android.content.SharedPreferences.getString(java.lang.String, java.lang.String)#<unknown>.GraphItemData()#com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, java.lang.String, int)#<unknown>.nextValueToken()#org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager.ThreadSafeClientConnManager(org.apache.http.params.HttpParams, org.apache.http.conn.scheme.SchemeRegistry)#<unknown>.ApplicationItemRelationData()#java.lang.Object.toString()#android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null)#org.json.JSONArray.JSONArray()#java.lang.String.equals(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService._startTransaction()#org.json.JSONObject.put(java.lang.String, org.json.JSONArray)#com.inovex.zabbixmobile.api.ZabbixService.importApplications(int, int, <unknown>)#<unknown>.set(<unknown>, int)#org.json.JSONObject.put(java.lang.String, int)#com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, java.lang.String, int)#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.json.JSONObject.JSONObject()#java.lang.Math.min(int, int)#com.inovex.zabbixmobile.api.ZabbixService.showProgress(<unknown>)#java.lang.String.equals(java.lang.String)#android.content.Intent.Intent(<unknown>)#java.lang.String.equals(<unknown>)#org.json.JSONObject.put(java.lang.String, int)#javax.net.ssl.SSLContext.getInstance(java.lang.String)#android.content.res.Resources.getString(<unknown>)#org.json.JSONObject.JSONObject()#android.content.Intent.Intent(<unknown>)#java.lang.String.equals(<unknown>)#<unknown>.nextProperty()#javax.net.ssl.SSLSocketFactory.createSocket(java.net.Socket, java.lang.String, int, boolean)#org.json.JSONObject.put(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject)#<unknown>.get(<unknown>)#java.io.IOException.IOException(java.lang.String)#java.lang.String.trim()#java.lang.String.contains(java.lang.String)#org.apache.http.entity.StringEntity.StringEntity(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService._endTransaction()#.X509TrustManager()#com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject)#android.graphics.Color.parseColor(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, null)#org.json.JSONObject.getJSONArray(java.lang.String)#org.apache.http.client.params.HttpClientParams.setRedirecting(org.apache.http.params.HttpParams, boolean)#com.inovex.zabbixmobile.api.ZabbixService._startTransaction()#<unknown>.getCurrentName()#java.lang.String.equals(<unknown>)#java.lang.Long.parseLong(<unknown>)#android.util.Log.d(java.lang.String, java.lang.String)#org.codehaus.jackson.JsonParser.getCurrentToken()#org.codehaus.jackson.JsonParser.nextValue()#java.lang.Long.parseLong(<unknown>)#<unknown>.getText()#java.util.Date.getTime()#android.content.Intent.putExtra(java.lang.String, <unknown>)#android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null)#<unknown>.get(<unknown>)#android.database.Cursor.moveToFirst()#org.apache.http.client.methods.HttpEntityEnclosingRequestBase.setEntity(org.apache.http.entity.StringEntity)#com.inovex.zabbixmobile.api.ZabbixService._commitTransactionIfRecommended()#com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, null)#android.database.sqlite.SQLiteQueryBuilder.appendWhere(<unknown>)#org.apache.http.auth.UsernamePasswordCredentials.UsernamePasswordCredentials(java.lang.String, java.lang.String)#java.util.Date.getTime()#java.lang.String.equals(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService._endTransaction()#org.json.JSONObject.put(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService.authenticate()#java.lang.String.equals(<unknown>)#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.json.JSONObject.put(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService.NoAPIAccessException.NoAPIAccessException()#org.json.JSONArray.put(long)#com.inovex.zabbixmobile.api.ZabbixService._endTransaction()#android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null)#<unknown>.getJsonArray()#<unknown>.ScreenData()#java.util.Date.Date()#java.util.Date.Date()#<unknown>.set(<unknown>, long)#<unknown>.getCurrentName()#org.json.JSONObject.put(java.lang.String, org.json.JSONArray)#<unknown>.set(<unknown>, long)#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.apache.http.params.HttpConnectionParams.setConnectionTimeout(org.apache.http.params.HttpParams, int)#org.json.JSONArray.length()#<unknown>.set(<unknown>, java.lang.String)#<unknown>.set(<unknown>, long)#java.util.Date.getTime()#<unknown>.set(<unknown>, <unknown>)#<unknown>.set(<unknown>, <unknown>)#org.json.JSONArray.put(java.lang.String)#java.lang.String.equals(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService.importScreenItems(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService.HttpAuthorizationRequiredException.HttpAuthorizationRequiredException()#<unknown>.getText()#org.json.JSONObject.put(java.lang.String, org.json.JSONArray)#com.inovex.zabbixmobile.api.ZabbixService.importEvents(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader, null)#org.json.JSONObject.JSONObject()#<unknown>.set(<unknown>, <unknown>)#com.inovex.zabbixmobile.api.ZabbixService.importHostGroups(<unknown>)#org.json.JSONObject.toString()#java.lang.Integer.parseInt(<unknown>)#java.lang.String.equals(java.lang.String)#org.apache.http.params.HttpProtocolParams.setContentCharset(org.apache.http.params.HttpParams, java.lang.String)#<unknown>.get(<unknown>)#android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null)#java.lang.String.equals(<unknown>)#<unknown>.set(<unknown>, <unknown>)#<unknown>.nextValueToken()#<unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>)#org.json.JSONObject.put(java.lang.String, org.json.JSONArray)#org.json.JSONObject.put(java.lang.String, java.lang.Integer)#<unknown>.getText()#<unknown>.set(<unknown>, <unknown>)#org.apache.http.message.AbstractHttpMessage.addHeader(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject)#org.json.JSONObject.getJSONArray(java.lang.String)#java.security.KeyStore.load(null, null)#java.lang.String.replace(java.lang.String, java.lang.String)#java.lang.Long.parseLong(<unknown>)#org.json.JSONObject.toString()#com.inovex.zabbixmobile.api.ZabbixService.importTriggers(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader)#android.util.Log.d(java.lang.String, java.lang.String)#android.content.SharedPreferences.getString(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, java.lang.String)#<unknown>.TriggerData()#android.content.SharedPreferences.getString(java.lang.String, java.lang.String)#android.content.Intent.Intent(<unknown>)#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.apache.http.impl.client.AbstractHttpClient.getCredentialsProvider()#<unknown>.set(<unknown>, <unknown>)#java.io.IOException.IOException(java.lang.String)#java.lang.String.trim()#org.json.JSONObject.put(java.lang.String, org.json.JSONArray)#java.lang.String.split(java.lang.String)#java.lang.String.equals(java.lang.String)#java.lang.String.endsWith(java.lang.String)#<unknown>.set(<unknown>, int)#com.inovex.zabbixmobile.api.ZabbixService.showProgress(int)#<unknown>.ItemData()#org.json.JSONObject.put(java.lang.String, int)#<unknown>.set(<unknown>, <unknown>)#org.codehaus.jackson.JsonParser.getText()#android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null)#org.apache.http.impl.client.DefaultHttpClient.DefaultHttpClient(org.apache.http.conn.ClientConnectionManager, org.apache.http.params.HttpParams)#<unknown>.close()#java.lang.IllegalStateException.IllegalStateException(java.lang.String)#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.codehaus.jackson.JsonParser.nextToken()#android.database.Cursor.getColumnIndex(<unknown>)#org.json.JSONObject.put(java.lang.String, org.json.JSONArray)#<unknown>.nextValueToken()#com.inovex.zabbixmobile.api.ZabbixService._startTransaction()#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.set(<unknown>, java.lang.String)#java.lang.String.substring(int, int)#java.lang.Long.parseLong(<unknown>)#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.json.JSONObject.getInt(java.lang.String)#java.lang.String.equals(java.lang.String)#<unknown>.set(<unknown>, <unknown>)#<unknown>.set(<unknown>, <unknown>)#java.security.KeyStore.getInstance(java.lang.String)#java.lang.Integer.parseInt(<unknown>)#java.lang.String.equals(java.lang.String)#<unknown>.nextProperty()#android.content.Intent.putExtra(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, null)#<unknown>.set(<unknown>, int)#java.io.BufferedReader.BufferedReader(java.io.InputStreamReader)#com.inovex.zabbixmobile.api.ZabbixService.importEvents(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader, int)#java.security.KeyStore.getDefaultType()#java.lang.String.equals(<unknown>)#<unknown>.getText()#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.set(<unknown>, java.lang.Object)#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.insert(android.database.sqlite.SQLiteDatabase)#<unknown>.nextProperty()#com.inovex.zabbixmobile.api.ZabbixService._startTransaction()#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.close()#<unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>)#org.json.JSONObject.put(java.lang.String, long)#com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, null, int)#<unknown>.getJsonArray()#<unknown>.set(<unknown>, <unknown>)#java.lang.String.equals(<unknown>)#org.apache.http.conn.scheme.Scheme.Scheme(java.lang.String, org.apache.http.conn.scheme.PlainSocketFactory, int)#org.json.JSONObject.put(java.lang.String, java.lang.String)#java.lang.String.equals(<unknown>)",
      "p_callsites_t": ["<unknown>.set(<unknown>, <unknown>) org.apache.http.HttpEntity.getContent() java.lang.String.equals(java.lang.String) org.json.JSONArray.JSONArray() <unknown>.set(<unknown>, java.lang.Object) org.json.JSONObject.put(java.lang.String, java.lang.Integer) org.json.JSONArray.put(java.lang.String) org.json.JSONObject.JSONObject() org.json.JSONObject.put(java.lang.String, java.lang.String) org.codehaus.jackson.JsonFactory.createJsonParser(java.io.InputStream) java.lang.String.equals(<unknown>) org.apache.http.StatusLine.getStatusCode() <unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>) org.json.JSONObject.put(java.lang.String, java.lang.String) android.database.sqlite.SQLiteDatabase.inTransaction() android.util.Log.d(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService._startTransaction() java.lang.String.equals(java.lang.String) org.codehaus.jackson.JsonFactory.JsonFactory() com.inovex.zabbixmobile.api.ZabbixService._endTransaction() org.json.JSONObject.put(java.lang.String, int) android.content.ContentValues.ContentValues(int) org.apache.http.conn.scheme.SchemeRegistry.SchemeRegistry() <unknown>.insert(android.database.sqlite.SQLiteDatabase) <unknown>.insert(android.database.sqlite.SQLiteDatabase) com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject) com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject) com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject) org.json.JSONObject.getJSONObject(java.lang.String) java.io.InputStreamReader.InputStreamReader(java.io.InputStream) android.content.Intent.putExtra(java.lang.String, <unknown>) org.json.JSONArray.length() java.lang.String.equals(java.lang.String) <unknown>.set(<unknown>, <unknown>) java.lang.String.equals(<unknown>) com.inovex.zabbixmobile.api.ZabbixService.PreconditionFailedException.PreconditionFailedException() java.lang.StringBuilder.StringBuilder() android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null) <unknown>.nextValueToken() org.json.JSONObject.JSONObject() org.json.JSONObject.put(java.lang.String, int) org.json.JSONObject.put(java.lang.String, org.json.JSONArray) java.lang.String.equals(<unknown>) <unknown>.get(<unknown>) <unknown>.insert(android.database.sqlite.SQLiteDatabase) android.content.Intent.putExtra(java.lang.String, <unknown>) java.lang.String.equals(<unknown>) com.inovex.zabbixmobile.api.ZabbixService.importItems(<unknown>, int, boolean) com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, java.lang.String, int) android.util.Log.d(java.lang.String, java.lang.String) org.json.JSONObject.put(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject) org.apache.http.conn.scheme.Scheme.Scheme(java.lang.String, org.apache.http.conn.ssl.SSLSocketFactory, int) org.apache.http.HttpEntity.getContent() org.codehaus.jackson.JsonParser.close() java.lang.String.equals(<unknown>) <unknown>.nextValueToken() <unknown>.getCurrentName() org.json.JSONArray.JSONArray(java.util.Set<java.lang.Long>) <unknown>.nextValueToken() android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null) <unknown>.getJsonArray() com.inovex.zabbixmobile.api.ZabbixService._startTransaction() org.json.JSONArray.JSONArray() <unknown>.nextProperty() java.lang.String.equals(java.lang.String) android.database.sqlite.SQLiteDatabase.update(<unknown>, android.content.ContentValues, <unknown>, null) java.util.Set<java.lang.Long>.add(<unknown>) <unknown>.get(<unknown>) <unknown>.get(<unknown>) android.content.ContentValues.put(<unknown>, java.lang.Long) java.lang.String.equals(java.lang.String) org.apache.http.StatusLine.getReasonPhrase() java.lang.RuntimeException.RuntimeException(java.lang.String) <unknown>.nextProperty() java.lang.Throwable.printStackTrace() java.lang.String.equals(<unknown>) java.lang.Long.parseLong(<unknown>) org.json.JSONObject.put(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject) <unknown>.getCurrentName() android.content.ContentValues.put(<unknown>, java.lang.Long) org.apache.http.entity.StringEntity.StringEntity(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject) java.lang.String.equals(<unknown>) <unknown>.EventData() <unknown>.next() <unknown>.set(<unknown>, <unknown>) com.inovex.zabbixmobile.api.ZabbixService.CustomSSLSocketFactory.CustomSSLSocketFactory(java.security.KeyStore) com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject) <unknown>.getCurrentName() java.util.List<java.lang.String>.add(java.lang.String) org.json.JSONObject.put(java.lang.String, int) <unknown>.getText() org.json.JSONObject.put(java.lang.String, java.lang.String) org.apache.http.conn.ssl.SSLSocketFactory.setHostnameVerifier(org.apache.http.conn.ssl.X509HostnameVerifier) <unknown>.set(<unknown>, <unknown>) <unknown>.getText() org.json.JSONObject.put(java.lang.String, long) java.util.Date.Date() android.util.Log.i(java.lang.String, java.lang.String) org.json.JSONObject.put(java.lang.String, int) org.json.JSONObject.put(java.lang.String, int) <unknown>.set(<unknown>, <unknown>) com.inovex.zabbixmobile.api.ZabbixService.authenticate() android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null) android.util.Log.d(java.lang.String, java.lang.String) java.lang.String.equals(java.lang.String) org.apache.http.HttpResponse.getEntity() org.json.JSONObject.JSONObject() com.inovex.zabbixmobile.api.ZabbixService.importItems(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader, int, boolean) com.inovex.zabbixmobile.api.ZabbixService._startTransaction() com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, null, int) java.io.BufferedReader.read() org.json.JSONObject.put(java.lang.String, long) <unknown>.set(<unknown>, <unknown>) android.database.Cursor.getLong(<unknown>) java.lang.IllegalStateException.IllegalStateException(java.lang.String) org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.getCurrentName() android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null) android.util.Log.d(java.lang.String, java.lang.String) <unknown>.set(<unknown>, <unknown>) java.lang.String.equals(<unknown>) org.json.JSONObject.put(java.lang.String, java.lang.String) android.database.Cursor.moveToFirst() com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, java.lang.String) android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null) java.lang.String.equals(java.lang.String) com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, java.lang.String) <unknown>.getText() org.json.JSONObject.put(java.lang.String, java.lang.String) android.content.Intent.putExtra(java.lang.String, <unknown>) <unknown>.getCurrentName() android.content.res.Resources.getString(<unknown>) android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null) android.database.sqlite.SQLiteDatabase.setTransactionSuccessful() <unknown>.next() <unknown>.getText() <unknown>.nextValueToken() com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject) com.inovex.zabbixmobile.api.ZabbixService.showProgress(<unknown>) java.io.IOException.IOException(java.lang.String) <unknown>.getCurrentName() android.util.Log.d(java.lang.String, java.lang.String) java.lang.Object.toString() org.json.JSONObject.toString() <unknown>.set(<unknown>, <unknown>) org.json.JSONArray.JSONArray() org.apache.http.HttpResponse.getStatusLine() org.json.JSONArray.JSONArray() org.json.JSONObject.put(java.lang.String, java.lang.String) org.apache.http.impl.client.DefaultHttpClient.DefaultHttpClient() org.json.JSONObject.put(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject) org.apache.http.HttpResponse.getStatusLine() java.lang.String.equals(<unknown>) java.util.Date.Date() android.util.Log.i(java.lang.String, java.lang.String) android.content.Context.getResources() org.apache.http.impl.client.CloseableHttpClient.execute(org.apache.http.client.methods.HttpPost) com.inovex.zabbixmobile.api.ZabbixService._commitTransactionIfRecommended() com.inovex.zabbixmobile.api.ZabbixService.importHostGroups(<unknown>) android.content.Context.sendBroadcast(android.content.Intent) android.content.Context.sendBroadcast(android.content.Intent) com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, null, int) java.lang.Integer.parseInt(<unknown>) <unknown>.ApplicationData() com.inovex.zabbixmobile.api.ZabbixService.NoAPIAccessException.NoAPIAccessException() com.inovex.zabbixmobile.api.ZabbixService._commitTransactionIfRecommended() <unknown>.getJsonArray() org.apache.http.message.AbstractHttpMessage.addHeader(java.lang.String, java.lang.String) org.json.JSONObject.put(java.lang.String, int) java.lang.String.replace(java.lang.String, java.lang.String) org.json.JSONArray.JSONArray() <unknown>.set(<unknown>, <unknown>) org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.set(<unknown>, <unknown>) org.json.JSONArray.JSONArray() java.lang.String.equals(<unknown>) com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, java.lang.String, int) <unknown>.nextProperty() <unknown>.set(<unknown>, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject) org.json.JSONObject.JSONObject() java.lang.String.contains(java.lang.String) org.apache.http.client.methods.HttpEntityEnclosingRequestBase.setEntity(org.apache.http.entity.StringEntity) com.inovex.zabbixmobile.api.ZabbixService.importTriggers(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader) org.json.JSONObject.put(java.lang.String, int) <unknown>.HostGroupData() <unknown>.JsonArrayOrObjectReader(org.codehaus.jackson.JsonParser) <unknown>.HostGroupData() <unknown>.nextProperty() java.lang.Long.parseLong(<unknown>) org.json.JSONObject.put(java.lang.String, java.lang.String) org.json.JSONObject.put(java.lang.String, org.json.JSONArray) org.json.JSONObject.put(java.lang.String, java.lang.Integer) <unknown>.set(<unknown>, <unknown>) <unknown>.close() org.json.JSONObject.put(java.lang.String, org.json.JSONArray) <unknown>.set(<unknown>, <unknown>) java.lang.String.equals(java.lang.String) android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null) <unknown>.next() org.json.JSONObject.toString() java.lang.String.equals(<unknown>) java.lang.String.equals(<unknown>) android.database.sqlite.SQLiteDatabase.query(<unknown>, null, <unknown>, null, null, null, null) <unknown>.set(<unknown>, <unknown>) org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.CacheData() <unknown>.getText() com.inovex.zabbixmobile.api.ZabbixService._startTransaction() <unknown>.set(<unknown>, <unknown>) com.inovex.zabbixmobile.api.ZabbixService._endTransaction() <unknown>.set(<unknown>, int) <unknown>.getJsonArray() java.lang.String.equals(<unknown>) java.util.Date.getTime() java.lang.String.equals(java.lang.String) org.json.JSONObject.put(java.lang.String, int) <unknown>.set(<unknown>, <unknown>) java.lang.Integer.parseInt(<unknown>) org.codehaus.jackson.JsonParser.getCurrentName() <unknown>.nextProperty() com.inovex.zabbixmobile.api.ZabbixService._endTransaction() java.lang.String.equals(<unknown>) org.json.JSONObject.put(java.lang.String, int) android.database.sqlite.SQLiteDatabase.update(<unknown>, android.content.ContentValues, <unknown>, null) com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject) com.inovex.zabbixmobile.api.ZabbixService._endTransaction() java.lang.StringBuilder.append(char) <unknown>.set(<unknown>, <unknown>) <unknown>.get(<unknown>) <unknown>.set(<unknown>, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject) org.json.JSONObject.put(java.lang.String, java.lang.String) android.database.Cursor.getLong(<unknown>) java.lang.String.equals(<unknown>) org.json.JSONObject.put(java.lang.String, java.lang.String) org.json.JSONObject.JSONObject() org.apache.http.params.HttpProtocolParams.setVersion(org.apache.http.params.HttpParams, org.apache.http.HttpVersion) org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.HistoryDetailData() android.util.Log.d(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService._startTransaction() <unknown>.next() <unknown>.set(<unknown>, <unknown>) <unknown>.nextValueToken() org.json.JSONObject.JSONObject() java.lang.String.equals(<unknown>) java.lang.Long.parseLong(<unknown>) java.lang.Integer.parseInt(<unknown>) org.apache.http.client.methods.HttpPost.HttpPost(java.lang.String) org.apache.http.StatusLine.getStatusCode() <unknown>.set(<unknown>, int) java.lang.String.equals(java.lang.String) java.lang.String.equals(<unknown>) java.lang.String.equals(<unknown>) <unknown>.getCurrentName() java.util.ArrayList<java.lang.String>.ArrayList, String() com.inovex.zabbixmobile.api.ZabbixService._startTransaction() com.inovex.zabbixmobile.api.ZabbixService.importTriggers(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader) org.json.JSONArray.put(java.lang.String) <unknown>.nextValueToken() org.json.JSONArray.put(java.lang.String) <unknown>.set(<unknown>, <unknown>) org.json.JSONObject.put(java.lang.String, int) com.inovex.zabbixmobile.api.ZabbixService.importItems(<unknown>, int, boolean) org.json.JSONObject.JSONObject() com.inovex.zabbixmobile.api.ZabbixService.importTriggers(<unknown>) com.inovex.zabbixmobile.api.ZabbixService.importGraphItems(<unknown>) <unknown>.ScreenItemData() <unknown>.set(<unknown>, <unknown>) <unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>) android.preference.PreferenceManager.getDefaultSharedPreferences(android.content.Context) org.json.JSONObject.length() <unknown>.nextValueToken() java.util.HashSet<java.lang.Long>.HashSet, Long() java.lang.String.equals(java.lang.String) android.content.SharedPreferences.getBoolean(java.lang.String, boolean) <unknown>.insert(android.database.sqlite.SQLiteDatabase) org.json.JSONObject.put(java.lang.String, org.json.JSONArray) <unknown>.close() com.inovex.zabbixmobile.api.ZabbixService.importHosts(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader, int) org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.next() android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null) org.json.JSONObject.put(java.lang.String, java.lang.String) org.json.JSONObject.getString(java.lang.String) <unknown>.set(<unknown>, <unknown>) org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.close() org.json.JSONObject.getString(java.lang.String) java.lang.String.equals(java.lang.String) java.lang.Long.parseLong(<unknown>) org.codehaus.jackson.JsonParser.isClosed() org.json.JSONObject.put(java.lang.String, int) org.json.JSONObject.put(java.lang.String, org.json.JSONArray) org.json.JSONObject.put(java.lang.String, long) <unknown>.close() org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.set(<unknown>, long) org.json.JSONObject.put(java.lang.String, org.json.JSONObject) <unknown>.set(<unknown>, <unknown>) com.inovex.zabbixmobile.api.ZabbixService._endTransaction() java.lang.String.replaceAll(java.lang.String, java.lang.String) org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.nextValueToken() org.json.JSONObject.put(java.lang.String, java.lang.String) org.json.JSONObject.put(java.lang.String, java.lang.String) org.apache.http.params.BasicHttpParams.BasicHttpParams() android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null) android.database.sqlite.SQLiteDatabase.beginTransaction() com.inovex.zabbixmobile.api.ZabbixService._commitTransactionIfRecommended() com.inovex.zabbixmobile.api.ZabbixService._endTransaction() java.lang.String.equals(<unknown>) <unknown>.insert(android.database.sqlite.SQLiteDatabase) <unknown>.insert(android.database.sqlite.SQLiteDatabase) org.json.JSONObject.put(java.lang.String, int) <unknown>.next() com.inovex.zabbixmobile.api.ZabbixService._startTransaction() <unknown>.getJsonArray() android.content.SharedPreferences.getString(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, null, int) javax.net.SocketFactory.createSocket() java.lang.Long.parseLong(<unknown>) org.apache.http.client.CredentialsProvider.setCredentials(org.apache.http.auth.AuthScope, org.apache.http.auth.UsernamePasswordCredentials) org.json.JSONObject.put(java.lang.String, java.lang.String) org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.next() com.inovex.zabbixmobile.api.ZabbixService.HttpAuthorizationRequiredException.HttpAuthorizationRequiredException() android.database.sqlite.SQLiteQueryBuilder.query(android.database.sqlite.SQLiteDatabase, null, null, null, null, null, null) java.util.Date.Date() com.inovex.zabbixmobile.api.ZabbixService._commitTransactionIfRecommended() <unknown>.set(<unknown>, java.lang.String) org.json.JSONObject.JSONObject() <unknown>.next() <unknown>.set(<unknown>, <unknown>) <unknown>.set(<unknown>, <unknown>) com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject) java.lang.String.equals(java.lang.String) com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, java.lang.String) java.lang.String.indexOf(char) android.database.sqlite.SQLiteDatabase.query(<unknown>, null, <unknown>, null, null, null, null) android.preference.PreferenceManager.getDefaultSharedPreferences(android.content.Context) <unknown>.nextProperty() org.apache.http.impl.client.CloseableHttpClient.execute(org.apache.http.client.methods.HttpPost) <unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>) com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, java.lang.String) org.json.JSONObject.JSONObject() <unknown>.close() android.database.Cursor.getColumnIndex(<unknown>) android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null) org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.nextProperty() org.apache.http.conn.scheme.PlainSocketFactory.getSocketFactory() com.inovex.zabbixmobile.api.ZabbixService._commitTransactionIfRecommended() com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject) java.lang.StringBuilder.toString() org.json.JSONObject.put(java.lang.String, java.lang.String) android.database.sqlite.SQLiteQueryBuilder.SQLiteQueryBuilder() <unknown>.insert(android.database.sqlite.SQLiteDatabase) org.apache.http.conn.scheme.SchemeRegistry.register(org.apache.http.conn.scheme.Scheme) <unknown>.set(<unknown>, <unknown>) org.json.JSONObject.JSONObject(java.lang.String) java.lang.String.equals(<unknown>) <unknown>.set(<unknown>, <unknown>) <unknown>.set(<unknown>, <unknown>) java.lang.IllegalStateException.IllegalStateException(java.lang.String) java.lang.Double.parseDouble(<unknown>) android.content.ContentValues.put(<unknown>, java.lang.Long) android.database.sqlite.SQLiteQueryBuilder.appendWhere(<unknown>) org.apache.http.conn.scheme.SchemeRegistry.register(org.apache.http.conn.scheme.Scheme) org.json.JSONObject.getInt(java.lang.String) com.inovex.zabbixmobile.api.ZabbixService.importHosts(<unknown>, null) org.json.JSONObject.put(java.lang.String, boolean) java.lang.Long.parseLong(<unknown>) java.lang.String.indexOf(char) android.database.sqlite.SQLiteQueryBuilder.appendWhere(<unknown>) java.lang.String.length() java.lang.String.equals(<unknown>) com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject) <unknown>.nextProperty() <unknown>.next() android.content.SharedPreferences.getString(java.lang.String, java.lang.String) <unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>) com.inovex.zabbixmobile.api.ZabbixService.importTriggers(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader) <unknown>.GraphData() org.json.JSONArray.put(java.lang.String) org.apache.http.impl.client.AbstractHttpClient.getParams() <unknown>.set(<unknown>, long) <unknown>.set(<unknown>, <unknown>) org.json.JSONObject.getJSONObject(java.lang.String) org.json.JSONObject.put(java.lang.String, java.lang.String) java.lang.String.equals(java.lang.String) org.json.JSONObject.getString(java.lang.String) java.lang.String.equals(<unknown>) java.lang.String.equals(<unknown>) <unknown>.getCurrentName() java.lang.String.equals(<unknown>) com.inovex.zabbixmobile.api.ZabbixService.showProgress(int) <unknown>.getCurrentName() com.inovex.zabbixmobile.api.ZabbixService.importHosts(<unknown>, null) com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, java.lang.String, int) org.json.JSONObject.put(java.lang.String, int) org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.close() java.lang.String.replace(java.lang.String, java.lang.String) java.lang.String.equals(<unknown>) com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject) com.inovex.zabbixmobile.api.ZabbixService._endTransaction() android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null) android.database.Cursor.moveToNext() <unknown>.HostData() <unknown>.set(<unknown>, long) <unknown>.next() com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject) android.database.sqlite.SQLiteQueryBuilder.setTables(<unknown>) java.util.Date.getTime() org.json.JSONObject.put(java.lang.String, long) android.content.ContentValues.ContentValues(int) java.lang.Long.parseLong(<unknown>) org.apache.http.HttpResponse.getEntity() org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.getText() java.lang.String.equals(java.lang.String) <unknown>.set(<unknown>, <unknown>) <unknown>.set(<unknown>, <unknown>) javax.net.ssl.SSLContext.init(null, javax.net.ssl.TrustManager[], null) android.database.sqlite.SQLiteDatabase.endTransaction() java.lang.String.equals(<unknown>) com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, java.lang.String) android.util.Log.d(java.lang.String, java.lang.String) <unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>) <unknown>.next() <unknown>.close() <unknown>.insert(android.database.sqlite.SQLiteDatabase) org.json.JSONObject.put(java.lang.String, java.lang.String) java.lang.Throwable.getMessage() java.lang.String.equals(<unknown>) java.lang.String.equals(<unknown>) <unknown>.set(<unknown>, <unknown>) com.inovex.zabbixmobile.api.ZabbixService._endTransaction() javax.net.ssl.SSLContext.getSocketFactory() org.json.JSONObject.JSONObject() android.content.Context.getResources() org.json.JSONObject.put(java.lang.String, int) com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, null) com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, java.lang.String, int) java.lang.String.matches(java.lang.String) <unknown>.set(<unknown>, <unknown>) org.json.JSONArray.put(java.lang.String) <unknown>.set(<unknown>, <unknown>) android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null) android.content.Context.sendBroadcast(android.content.Intent) org.json.JSONObject.getJSONObject(java.lang.String) <unknown>.get(<unknown>) android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null) java.lang.String.equals(<unknown>) android.content.SharedPreferences.getBoolean(java.lang.String, boolean) java.lang.Throwable.printStackTrace() android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null) org.json.JSONObject.put(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService._startTransaction() android.content.Intent.putExtra(java.lang.String, int) org.json.JSONObject.JSONObject() <unknown>.getText() com.inovex.zabbixmobile.api.ZabbixService._endTransaction() org.apache.http.client.methods.HttpPost.HttpPost(java.lang.String) android.content.SharedPreferences.getString(java.lang.String, java.lang.String) <unknown>.GraphItemData() com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, java.lang.String, int) <unknown>.nextValueToken() org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager.ThreadSafeClientConnManager(org.apache.http.params.HttpParams, org.apache.http.conn.scheme.SchemeRegistry) <unknown>.ApplicationItemRelationData() java.lang.Object.toString() android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null) org.json.JSONArray.JSONArray() java.lang.String.equals(<unknown>) com.inovex.zabbixmobile.api.ZabbixService._startTransaction() org.json.JSONObject.put(java.lang.String, org.json.JSONArray) com.inovex.zabbixmobile.api.ZabbixService.importApplications(int, int, <unknown>) <unknown>.set(<unknown>, int) org.json.JSONObject.put(java.lang.String, int) com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, java.lang.String, int) org.json.JSONObject.put(java.lang.String, java.lang.String) org.json.JSONObject.JSONObject() java.lang.Math.min(int, int) com.inovex.zabbixmobile.api.ZabbixService.showProgress(<unknown>) java.lang.String.equals(java.lang.String) android.content.Intent.Intent(<unknown>) java.lang.String.equals(<unknown>) org.json.JSONObject.put(java.lang.String, int) javax.net.ssl.SSLContext.getInstance(java.lang.String) android.content.res.Resources.getString(<unknown>) org.json.JSONObject.JSONObject() android.content.Intent.Intent(<unknown>) java.lang.String.equals(<unknown>) <unknown>.nextProperty() javax.net.ssl.SSLSocketFactory.createSocket(java.net.Socket, java.lang.String, int, boolean) org.json.JSONObject.put(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject) <unknown>.get(<unknown>) java.io.IOException.IOException(java.lang.String) java.lang.String.trim() java.lang.String.contains(java.lang.String) org.apache.http.entity.StringEntity.StringEntity(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService._endTransaction() .X509TrustManager() com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject) android.graphics.Color.parseColor(<unknown>) com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, null) org.json.JSONObject.getJSONArray(java.lang.String) org.apache.http.client.params.HttpClientParams.setRedirecting(org.apache.http.params.HttpParams, boolean) com.inovex.zabbixmobile.api.ZabbixService._startTransaction() <unknown>.getCurrentName() java.lang.String.equals(<unknown>) java.lang.Long.parseLong(<unknown>) android.util.Log.d(java.lang.String, java.lang.String) org.codehaus.jackson.JsonParser.getCurrentToken() org.codehaus.jackson.JsonParser.nextValue() java.lang.Long.parseLong(<unknown>) <unknown>.getText() java.util.Date.getTime() android.content.Intent.putExtra(java.lang.String, <unknown>) android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null) <unknown>.get(<unknown>) android.database.Cursor.moveToFirst() org.apache.http.client.methods.HttpEntityEnclosingRequestBase.setEntity(org.apache.http.entity.StringEntity) com.inovex.zabbixmobile.api.ZabbixService._commitTransactionIfRecommended() com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, null) android.database.sqlite.SQLiteQueryBuilder.appendWhere(<unknown>) org.apache.http.auth.UsernamePasswordCredentials.UsernamePasswordCredentials(java.lang.String, java.lang.String) java.util.Date.getTime() java.lang.String.equals(<unknown>) com.inovex.zabbixmobile.api.ZabbixService._endTransaction() org.json.JSONObject.put(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService.authenticate() java.lang.String.equals(<unknown>) org.json.JSONObject.put(java.lang.String, java.lang.String) org.json.JSONObject.put(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService.NoAPIAccessException.NoAPIAccessException() org.json.JSONArray.put(long) com.inovex.zabbixmobile.api.ZabbixService._endTransaction() android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null) <unknown>.getJsonArray() <unknown>.ScreenData() java.util.Date.Date() java.util.Date.Date() <unknown>.set(<unknown>, long) <unknown>.getCurrentName() org.json.JSONObject.put(java.lang.String, org.json.JSONArray) <unknown>.set(<unknown>, long) org.json.JSONObject.put(java.lang.String, java.lang.String) org.apache.http.params.HttpConnectionParams.setConnectionTimeout(org.apache.http.params.HttpParams, int) org.json.JSONArray.length() <unknown>.set(<unknown>, java.lang.String) <unknown>.set(<unknown>, long) java.util.Date.getTime() <unknown>.set(<unknown>, <unknown>) <unknown>.set(<unknown>, <unknown>) org.json.JSONArray.put(java.lang.String) java.lang.String.equals(<unknown>) com.inovex.zabbixmobile.api.ZabbixService.importScreenItems(<unknown>) com.inovex.zabbixmobile.api.ZabbixService.HttpAuthorizationRequiredException.HttpAuthorizationRequiredException() <unknown>.getText() org.json.JSONObject.put(java.lang.String, org.json.JSONArray) com.inovex.zabbixmobile.api.ZabbixService.importEvents(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader, null) org.json.JSONObject.JSONObject() <unknown>.set(<unknown>, <unknown>) com.inovex.zabbixmobile.api.ZabbixService.importHostGroups(<unknown>) org.json.JSONObject.toString() java.lang.Integer.parseInt(<unknown>) java.lang.String.equals(java.lang.String) org.apache.http.params.HttpProtocolParams.setContentCharset(org.apache.http.params.HttpParams, java.lang.String) <unknown>.get(<unknown>) android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null) java.lang.String.equals(<unknown>) <unknown>.set(<unknown>, <unknown>) <unknown>.nextValueToken() <unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>) org.json.JSONObject.put(java.lang.String, org.json.JSONArray) org.json.JSONObject.put(java.lang.String, java.lang.Integer) <unknown>.getText() <unknown>.set(<unknown>, <unknown>) org.apache.http.message.AbstractHttpMessage.addHeader(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject) org.json.JSONObject.getJSONArray(java.lang.String) java.security.KeyStore.load(null, null) java.lang.String.replace(java.lang.String, java.lang.String) java.lang.Long.parseLong(<unknown>) org.json.JSONObject.toString() com.inovex.zabbixmobile.api.ZabbixService.importTriggers(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader) android.util.Log.d(java.lang.String, java.lang.String) android.content.SharedPreferences.getString(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, java.lang.String) <unknown>.TriggerData() android.content.SharedPreferences.getString(java.lang.String, java.lang.String) android.content.Intent.Intent(<unknown>) org.json.JSONObject.put(java.lang.String, java.lang.String) org.apache.http.impl.client.AbstractHttpClient.getCredentialsProvider() <unknown>.set(<unknown>, <unknown>) java.io.IOException.IOException(java.lang.String) java.lang.String.trim() org.json.JSONObject.put(java.lang.String, org.json.JSONArray) java.lang.String.split(java.lang.String) java.lang.String.equals(java.lang.String) java.lang.String.endsWith(java.lang.String) <unknown>.set(<unknown>, int) com.inovex.zabbixmobile.api.ZabbixService.showProgress(int) <unknown>.ItemData() org.json.JSONObject.put(java.lang.String, int) <unknown>.set(<unknown>, <unknown>) org.codehaus.jackson.JsonParser.getText() android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null) org.apache.http.impl.client.DefaultHttpClient.DefaultHttpClient(org.apache.http.conn.ClientConnectionManager, org.apache.http.params.HttpParams) <unknown>.close() java.lang.IllegalStateException.IllegalStateException(java.lang.String) org.json.JSONObject.put(java.lang.String, java.lang.String) org.codehaus.jackson.JsonParser.nextToken() android.database.Cursor.getColumnIndex(<unknown>) org.json.JSONObject.put(java.lang.String, org.json.JSONArray) <unknown>.nextValueToken() com.inovex.zabbixmobile.api.ZabbixService._startTransaction() org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.set(<unknown>, java.lang.String) java.lang.String.substring(int, int) java.lang.Long.parseLong(<unknown>) org.json.JSONObject.put(java.lang.String, java.lang.String) org.json.JSONObject.getInt(java.lang.String) java.lang.String.equals(java.lang.String) <unknown>.set(<unknown>, <unknown>) <unknown>.set(<unknown>, <unknown>) java.security.KeyStore.getInstance(java.lang.String) java.lang.Integer.parseInt(<unknown>) java.lang.String.equals(java.lang.String) <unknown>.nextProperty() android.content.Intent.putExtra(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, null) <unknown>.set(<unknown>, int) java.io.BufferedReader.BufferedReader(java.io.InputStreamReader) com.inovex.zabbixmobile.api.ZabbixService.importEvents(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader, int) java.security.KeyStore.getDefaultType() java.lang.String.equals(<unknown>) <unknown>.getText() org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.set(<unknown>, java.lang.Object) org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.insert(android.database.sqlite.SQLiteDatabase) <unknown>.nextProperty() com.inovex.zabbixmobile.api.ZabbixService._startTransaction() org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.close() <unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>) org.json.JSONObject.put(java.lang.String, long) com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, null, int) <unknown>.getJsonArray() <unknown>.set(<unknown>, <unknown>) java.lang.String.equals(<unknown>) org.apache.http.conn.scheme.Scheme.Scheme(java.lang.String, org.apache.http.conn.scheme.PlainSocketFactory, int) org.json.JSONObject.put(java.lang.String, java.lang.String) java.lang.String.equals(<unknown>)"],
      "c_callsites_t": ["<unknown>.set(<unknown>, <unknown>) org.apache.http.HttpEntity.getContent() java.lang.String.equals(java.lang.String) org.json.JSONArray.JSONArray() <unknown>.set(<unknown>, java.lang.Object) org.json.JSONObject.put(java.lang.String, java.lang.Integer) org.json.JSONArray.put(java.lang.String) org.json.JSONObject.JSONObject() org.json.JSONObject.put(java.lang.String, java.lang.String) org.codehaus.jackson.JsonFactory.createJsonParser(java.io.InputStream) java.lang.String.equals(<unknown>) org.apache.http.StatusLine.getStatusCode() <unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>) org.json.JSONObject.put(java.lang.String, java.lang.String) android.database.sqlite.SQLiteDatabase.inTransaction() android.util.Log.d(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService._startTransaction() java.lang.String.equals(java.lang.String) org.codehaus.jackson.JsonFactory.JsonFactory() com.inovex.zabbixmobile.api.ZabbixService._endTransaction() org.json.JSONObject.put(java.lang.String, int) android.content.ContentValues.ContentValues(int) org.apache.http.conn.scheme.SchemeRegistry.SchemeRegistry() <unknown>.insert(android.database.sqlite.SQLiteDatabase) <unknown>.insert(android.database.sqlite.SQLiteDatabase) com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject) com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject) com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject) org.json.JSONObject.getJSONObject(java.lang.String) java.io.InputStreamReader.InputStreamReader(java.io.InputStream) android.content.Intent.putExtra(java.lang.String, <unknown>) org.json.JSONArray.length() java.lang.String.equals(java.lang.String) <unknown>.set(<unknown>, <unknown>) java.lang.String.equals(<unknown>) com.inovex.zabbixmobile.api.ZabbixService.PreconditionFailedException.PreconditionFailedException() java.lang.StringBuilder.StringBuilder() android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null) <unknown>.nextValueToken() org.json.JSONObject.JSONObject() org.json.JSONObject.put(java.lang.String, int) org.json.JSONObject.put(java.lang.String, org.json.JSONArray) java.lang.String.equals(<unknown>) <unknown>.get(<unknown>) <unknown>.insert(android.database.sqlite.SQLiteDatabase) android.content.Intent.putExtra(java.lang.String, <unknown>) java.lang.String.equals(<unknown>) com.inovex.zabbixmobile.api.ZabbixService.importItems(<unknown>, int, boolean) com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, java.lang.String, int) android.util.Log.d(java.lang.String, java.lang.String) org.json.JSONObject.put(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject) org.apache.http.conn.scheme.Scheme.Scheme(java.lang.String, org.apache.http.conn.ssl.SSLSocketFactory, int) org.apache.http.HttpEntity.getContent() org.codehaus.jackson.JsonParser.close() java.lang.String.equals(<unknown>) <unknown>.nextValueToken() <unknown>.getCurrentName() org.json.JSONArray.JSONArray(java.util.Set<java.lang.Long>) <unknown>.nextValueToken() android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null) <unknown>.getJsonArray() com.inovex.zabbixmobile.api.ZabbixService._startTransaction() org.json.JSONArray.JSONArray() <unknown>.nextProperty() java.lang.String.equals(java.lang.String) android.database.sqlite.SQLiteDatabase.update(<unknown>, android.content.ContentValues, <unknown>, null) java.util.Set<java.lang.Long>.add(<unknown>) <unknown>.get(<unknown>) <unknown>.get(<unknown>) android.content.ContentValues.put(<unknown>, java.lang.Long) java.lang.String.equals(java.lang.String) org.apache.http.StatusLine.getReasonPhrase() java.lang.RuntimeException.RuntimeException(java.lang.String) <unknown>.nextProperty() java.lang.Throwable.printStackTrace() java.lang.String.equals(<unknown>) java.lang.Long.parseLong(<unknown>) org.json.JSONObject.put(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject) <unknown>.getCurrentName() android.content.ContentValues.put(<unknown>, java.lang.Long) org.apache.http.entity.StringEntity.StringEntity(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject) java.lang.String.equals(<unknown>) <unknown>.EventData() <unknown>.next() <unknown>.set(<unknown>, <unknown>) com.inovex.zabbixmobile.api.ZabbixService.CustomSSLSocketFactory.CustomSSLSocketFactory(java.security.KeyStore) com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject) <unknown>.getCurrentName() java.util.List<java.lang.String>.add(java.lang.String) org.json.JSONObject.put(java.lang.String, int) <unknown>.getText() org.json.JSONObject.put(java.lang.String, java.lang.String) org.apache.http.conn.ssl.SSLSocketFactory.setHostnameVerifier(org.apache.http.conn.ssl.X509HostnameVerifier) <unknown>.set(<unknown>, <unknown>) <unknown>.getText() org.json.JSONObject.put(java.lang.String, long) java.util.Date.Date() org.json.JSONObject.put(java.lang.String, int) org.json.JSONObject.put(java.lang.String, int) <unknown>.set(<unknown>, <unknown>) com.inovex.zabbixmobile.api.ZabbixService.authenticate() android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null) android.util.Log.d(java.lang.String, java.lang.String) java.lang.String.equals(java.lang.String) org.apache.http.HttpResponse.getEntity() org.json.JSONObject.JSONObject() com.inovex.zabbixmobile.api.ZabbixService.importItems(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader, int, boolean) com.inovex.zabbixmobile.api.ZabbixService._startTransaction() com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, null, int) java.io.BufferedReader.read() org.json.JSONObject.put(java.lang.String, long) <unknown>.set(<unknown>, <unknown>) android.database.Cursor.getLong(<unknown>) java.lang.IllegalStateException.IllegalStateException(java.lang.String) org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.getCurrentName() android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null) android.util.Log.d(java.lang.String, java.lang.String) <unknown>.set(<unknown>, <unknown>) java.lang.String.equals(<unknown>) org.json.JSONObject.put(java.lang.String, java.lang.String) android.database.Cursor.moveToFirst() com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, java.lang.String) android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null) java.lang.String.equals(java.lang.String) com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, java.lang.String) <unknown>.getText() org.json.JSONObject.put(java.lang.String, java.lang.String) android.content.Intent.putExtra(java.lang.String, <unknown>) <unknown>.getCurrentName() android.content.res.Resources.getString(<unknown>) android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null) android.database.sqlite.SQLiteDatabase.setTransactionSuccessful() <unknown>.next() <unknown>.getText() <unknown>.nextValueToken() com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject) com.inovex.zabbixmobile.api.ZabbixService.showProgress(<unknown>) java.io.IOException.IOException(java.lang.String) <unknown>.getCurrentName() android.util.Log.d(java.lang.String, java.lang.String) java.lang.Object.toString() org.json.JSONObject.toString() <unknown>.set(<unknown>, <unknown>) org.json.JSONArray.JSONArray() org.apache.http.HttpResponse.getStatusLine() org.json.JSONArray.JSONArray() org.json.JSONObject.put(java.lang.String, java.lang.String) org.apache.http.impl.client.DefaultHttpClient.DefaultHttpClient() org.json.JSONObject.put(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject) org.apache.http.HttpResponse.getStatusLine() java.lang.String.equals(<unknown>) java.util.Date.Date() android.util.Log.i(java.lang.String, java.lang.String) android.content.Context.getResources() org.apache.http.impl.client.CloseableHttpClient.execute(org.apache.http.client.methods.HttpPost) com.inovex.zabbixmobile.api.ZabbixService._commitTransactionIfRecommended() com.inovex.zabbixmobile.api.ZabbixService.importHostGroups(<unknown>) android.content.Context.sendBroadcast(android.content.Intent) android.content.Context.sendBroadcast(android.content.Intent) com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, null, int) java.lang.Integer.parseInt(<unknown>) <unknown>.ApplicationData() com.inovex.zabbixmobile.api.ZabbixService.NoAPIAccessException.NoAPIAccessException() com.inovex.zabbixmobile.api.ZabbixService._commitTransactionIfRecommended() <unknown>.getJsonArray() org.apache.http.message.AbstractHttpMessage.addHeader(java.lang.String, java.lang.String) org.json.JSONObject.put(java.lang.String, int) java.lang.String.replace(java.lang.String, java.lang.String) org.json.JSONArray.JSONArray() <unknown>.set(<unknown>, <unknown>) org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.set(<unknown>, <unknown>) org.json.JSONArray.JSONArray() java.lang.String.equals(<unknown>) com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, java.lang.String, int) <unknown>.nextProperty() <unknown>.set(<unknown>, java.lang.String) org.json.JSONObject.JSONObject() java.lang.String.contains(java.lang.String) org.apache.http.client.methods.HttpEntityEnclosingRequestBase.setEntity(org.apache.http.entity.StringEntity) com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject) com.inovex.zabbixmobile.api.ZabbixService.importTriggers(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader) org.json.JSONObject.put(java.lang.String, int) <unknown>.HostGroupData() <unknown>.JsonArrayOrObjectReader(org.codehaus.jackson.JsonParser) <unknown>.HostGroupData() <unknown>.nextProperty() java.lang.Long.parseLong(<unknown>) org.json.JSONObject.put(java.lang.String, java.lang.String) org.json.JSONObject.put(java.lang.String, org.json.JSONArray) org.json.JSONObject.put(java.lang.String, java.lang.Integer) <unknown>.set(<unknown>, <unknown>) <unknown>.close() org.json.JSONObject.put(java.lang.String, org.json.JSONArray) <unknown>.set(<unknown>, <unknown>) java.lang.String.equals(java.lang.String) android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null) <unknown>.next() org.json.JSONObject.toString() java.lang.String.equals(<unknown>) java.lang.String.equals(<unknown>) android.database.sqlite.SQLiteDatabase.query(<unknown>, null, <unknown>, null, null, null, null) <unknown>.set(<unknown>, <unknown>) org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.CacheData() <unknown>.getText() com.inovex.zabbixmobile.api.ZabbixService._startTransaction() <unknown>.set(<unknown>, <unknown>) com.inovex.zabbixmobile.api.ZabbixService._endTransaction() <unknown>.set(<unknown>, int) <unknown>.getJsonArray() java.lang.String.equals(<unknown>) java.util.Date.getTime() java.lang.String.equals(java.lang.String) org.json.JSONObject.put(java.lang.String, int) <unknown>.set(<unknown>, <unknown>) java.lang.Integer.parseInt(<unknown>) org.codehaus.jackson.JsonParser.getCurrentName() <unknown>.nextProperty() com.inovex.zabbixmobile.api.ZabbixService._endTransaction() java.lang.String.equals(<unknown>) org.json.JSONObject.put(java.lang.String, int) android.database.sqlite.SQLiteDatabase.update(<unknown>, android.content.ContentValues, <unknown>, null) com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject) com.inovex.zabbixmobile.api.ZabbixService._endTransaction() java.lang.StringBuilder.append(char) <unknown>.set(<unknown>, <unknown>) <unknown>.get(<unknown>) <unknown>.set(<unknown>, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject) org.json.JSONObject.put(java.lang.String, java.lang.String) android.database.Cursor.getLong(<unknown>) java.lang.String.equals(<unknown>) org.json.JSONObject.put(java.lang.String, java.lang.String) org.json.JSONObject.JSONObject() org.apache.http.params.HttpProtocolParams.setVersion(org.apache.http.params.HttpParams, org.apache.http.HttpVersion) org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.HistoryDetailData() android.util.Log.d(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService._startTransaction() <unknown>.next() <unknown>.set(<unknown>, <unknown>) <unknown>.nextValueToken() org.json.JSONObject.JSONObject() java.lang.String.equals(<unknown>) java.lang.Long.parseLong(<unknown>) java.lang.Integer.parseInt(<unknown>) org.apache.http.client.methods.HttpPost.HttpPost(java.lang.String) org.apache.http.StatusLine.getStatusCode() <unknown>.set(<unknown>, int) java.lang.String.equals(java.lang.String) java.lang.String.equals(<unknown>) java.lang.String.equals(<unknown>) <unknown>.getCurrentName() java.util.ArrayList<java.lang.String>.ArrayList, String() com.inovex.zabbixmobile.api.ZabbixService._startTransaction() com.inovex.zabbixmobile.api.ZabbixService.importTriggers(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader) org.json.JSONArray.put(java.lang.String) <unknown>.nextValueToken() org.json.JSONArray.put(java.lang.String) <unknown>.set(<unknown>, <unknown>) org.json.JSONObject.put(java.lang.String, int) com.inovex.zabbixmobile.api.ZabbixService.importItems(<unknown>, int, boolean) org.json.JSONObject.JSONObject() com.inovex.zabbixmobile.api.ZabbixService.importTriggers(<unknown>) com.inovex.zabbixmobile.api.ZabbixService.importGraphItems(<unknown>) <unknown>.ScreenItemData() <unknown>.set(<unknown>, <unknown>) <unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>) android.preference.PreferenceManager.getDefaultSharedPreferences(android.content.Context) org.json.JSONObject.length() <unknown>.nextValueToken() java.util.HashSet<java.lang.Long>.HashSet, Long() java.lang.String.equals(java.lang.String) android.content.SharedPreferences.getBoolean(java.lang.String, boolean) <unknown>.insert(android.database.sqlite.SQLiteDatabase) org.json.JSONObject.put(java.lang.String, org.json.JSONArray) <unknown>.close() com.inovex.zabbixmobile.api.ZabbixService.importHosts(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader, int) org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.next() android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null) org.json.JSONObject.put(java.lang.String, java.lang.String) org.json.JSONObject.getString(java.lang.String) <unknown>.set(<unknown>, <unknown>) org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.close() org.json.JSONObject.getString(java.lang.String) java.lang.String.equals(java.lang.String) java.lang.Long.parseLong(<unknown>) org.codehaus.jackson.JsonParser.isClosed() org.json.JSONObject.put(java.lang.String, int) org.json.JSONObject.put(java.lang.String, org.json.JSONArray) java.lang.String.startsWith(java.lang.String) org.json.JSONObject.put(java.lang.String, long) <unknown>.close() org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.set(<unknown>, long) org.json.JSONObject.put(java.lang.String, org.json.JSONObject) <unknown>.set(<unknown>, <unknown>) com.inovex.zabbixmobile.api.ZabbixService._endTransaction() java.lang.String.replaceAll(java.lang.String, java.lang.String) org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.nextValueToken() org.json.JSONObject.put(java.lang.String, java.lang.String) org.json.JSONObject.put(java.lang.String, java.lang.String) org.apache.http.params.BasicHttpParams.BasicHttpParams() android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null) android.database.sqlite.SQLiteDatabase.beginTransaction() com.inovex.zabbixmobile.api.ZabbixService._commitTransactionIfRecommended() com.inovex.zabbixmobile.api.ZabbixService._endTransaction() java.lang.String.equals(<unknown>) <unknown>.insert(android.database.sqlite.SQLiteDatabase) <unknown>.insert(android.database.sqlite.SQLiteDatabase) org.json.JSONObject.put(java.lang.String, int) <unknown>.next() com.inovex.zabbixmobile.api.ZabbixService._startTransaction() <unknown>.getJsonArray() android.content.SharedPreferences.getString(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, null, int) javax.net.SocketFactory.createSocket() java.lang.Long.parseLong(<unknown>) org.apache.http.client.CredentialsProvider.setCredentials(org.apache.http.auth.AuthScope, org.apache.http.auth.UsernamePasswordCredentials) org.json.JSONObject.put(java.lang.String, java.lang.String) org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.next() com.inovex.zabbixmobile.api.ZabbixService.HttpAuthorizationRequiredException.HttpAuthorizationRequiredException() android.database.sqlite.SQLiteQueryBuilder.query(android.database.sqlite.SQLiteDatabase, null, null, null, null, null, null) java.util.Date.Date() com.inovex.zabbixmobile.api.ZabbixService._commitTransactionIfRecommended() <unknown>.set(<unknown>, java.lang.String) org.json.JSONObject.JSONObject() <unknown>.next() <unknown>.set(<unknown>, <unknown>) <unknown>.set(<unknown>, <unknown>) com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject) java.lang.String.equals(java.lang.String) com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, java.lang.String) java.lang.String.indexOf(char) android.database.sqlite.SQLiteDatabase.query(<unknown>, null, <unknown>, null, null, null, null) android.preference.PreferenceManager.getDefaultSharedPreferences(android.content.Context) <unknown>.nextProperty() org.apache.http.impl.client.CloseableHttpClient.execute(org.apache.http.client.methods.HttpPost) <unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>) com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, java.lang.String) org.json.JSONObject.JSONObject() <unknown>.close() android.database.Cursor.getColumnIndex(<unknown>) android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null) org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.nextProperty() org.apache.http.conn.scheme.PlainSocketFactory.getSocketFactory() com.inovex.zabbixmobile.api.ZabbixService._commitTransactionIfRecommended() com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject) java.lang.StringBuilder.toString() org.json.JSONObject.put(java.lang.String, java.lang.String) android.database.sqlite.SQLiteQueryBuilder.SQLiteQueryBuilder() <unknown>.insert(android.database.sqlite.SQLiteDatabase) org.apache.http.conn.scheme.SchemeRegistry.register(org.apache.http.conn.scheme.Scheme) <unknown>.set(<unknown>, <unknown>) org.json.JSONObject.JSONObject(java.lang.String) java.lang.String.equals(<unknown>) <unknown>.set(<unknown>, <unknown>) <unknown>.set(<unknown>, <unknown>) java.lang.IllegalStateException.IllegalStateException(java.lang.String) java.lang.Double.parseDouble(<unknown>) android.content.ContentValues.put(<unknown>, java.lang.Long) android.util.Log.i(java.lang.String, java.lang.String) android.database.sqlite.SQLiteQueryBuilder.appendWhere(<unknown>) org.apache.http.conn.scheme.SchemeRegistry.register(org.apache.http.conn.scheme.Scheme) org.json.JSONObject.getInt(java.lang.String) com.inovex.zabbixmobile.api.ZabbixService.importHosts(<unknown>, null) org.json.JSONObject.put(java.lang.String, boolean) java.lang.Long.parseLong(<unknown>) java.lang.String.indexOf(char) java.lang.String.equals(java.lang.String) android.database.sqlite.SQLiteQueryBuilder.appendWhere(<unknown>) java.lang.String.length() java.lang.String.equals(<unknown>) com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject) <unknown>.nextProperty() <unknown>.next() android.content.SharedPreferences.getString(java.lang.String, java.lang.String) <unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>) com.inovex.zabbixmobile.api.ZabbixService.importTriggers(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader) <unknown>.GraphData() org.json.JSONArray.put(java.lang.String) org.apache.http.impl.client.AbstractHttpClient.getParams() <unknown>.set(<unknown>, long) <unknown>.set(<unknown>, <unknown>) org.json.JSONObject.getJSONObject(java.lang.String) org.json.JSONObject.put(java.lang.String, java.lang.String) java.lang.String.equals(java.lang.String) org.json.JSONObject.getString(java.lang.String) java.lang.String.equals(<unknown>) java.lang.String.equals(<unknown>) <unknown>.getCurrentName() java.lang.String.equals(<unknown>) com.inovex.zabbixmobile.api.ZabbixService.showProgress(int) <unknown>.getCurrentName() com.inovex.zabbixmobile.api.ZabbixService.importHosts(<unknown>, null) com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, java.lang.String, int) org.json.JSONObject.put(java.lang.String, int) org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.close() java.lang.String.replace(java.lang.String, java.lang.String) java.lang.String.equals(<unknown>) com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject) com.inovex.zabbixmobile.api.ZabbixService._endTransaction() android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null) android.database.Cursor.moveToNext() <unknown>.HostData() <unknown>.set(<unknown>, long) <unknown>.next() com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject) android.database.sqlite.SQLiteQueryBuilder.setTables(<unknown>) java.util.Date.getTime() org.json.JSONObject.put(java.lang.String, long) android.content.ContentValues.ContentValues(int) java.lang.Long.parseLong(<unknown>) org.apache.http.HttpResponse.getEntity() org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.getText() java.lang.String.equals(java.lang.String) <unknown>.set(<unknown>, <unknown>) <unknown>.set(<unknown>, <unknown>) javax.net.ssl.SSLContext.init(null, javax.net.ssl.TrustManager[], null) android.database.sqlite.SQLiteDatabase.endTransaction() java.lang.String.equals(<unknown>) com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, java.lang.String) android.util.Log.d(java.lang.String, java.lang.String) <unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>) <unknown>.next() <unknown>.close() <unknown>.insert(android.database.sqlite.SQLiteDatabase) org.json.JSONObject.put(java.lang.String, java.lang.String) java.lang.Throwable.getMessage() java.lang.String.equals(<unknown>) java.lang.String.equals(<unknown>) <unknown>.set(<unknown>, <unknown>) com.inovex.zabbixmobile.api.ZabbixService._endTransaction() javax.net.ssl.SSLContext.getSocketFactory() org.json.JSONObject.JSONObject() android.content.Context.getResources() org.json.JSONObject.put(java.lang.String, int) com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, null) com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, java.lang.String, int) java.lang.String.matches(java.lang.String) <unknown>.set(<unknown>, <unknown>) org.json.JSONArray.put(java.lang.String) <unknown>.set(<unknown>, <unknown>) android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null) android.content.Context.sendBroadcast(android.content.Intent) org.json.JSONObject.getJSONObject(java.lang.String) <unknown>.get(<unknown>) android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null) java.lang.String.equals(<unknown>) android.content.SharedPreferences.getBoolean(java.lang.String, boolean) java.lang.Throwable.printStackTrace() android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null) org.json.JSONObject.put(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService._startTransaction() android.content.Intent.putExtra(java.lang.String, int) org.json.JSONObject.JSONObject() <unknown>.getText() com.inovex.zabbixmobile.api.ZabbixService._endTransaction() org.apache.http.client.methods.HttpPost.HttpPost(java.lang.String) android.content.SharedPreferences.getString(java.lang.String, java.lang.String) <unknown>.GraphItemData() com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, java.lang.String, int) <unknown>.nextValueToken() org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager.ThreadSafeClientConnManager(org.apache.http.params.HttpParams, org.apache.http.conn.scheme.SchemeRegistry) <unknown>.ApplicationItemRelationData() java.lang.Object.toString() android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null) org.json.JSONArray.JSONArray() java.lang.String.equals(<unknown>) com.inovex.zabbixmobile.api.ZabbixService._startTransaction() org.json.JSONObject.put(java.lang.String, org.json.JSONArray) com.inovex.zabbixmobile.api.ZabbixService.importApplications(int, int, <unknown>) <unknown>.set(<unknown>, int) org.json.JSONObject.put(java.lang.String, int) com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, java.lang.String, int) org.json.JSONObject.put(java.lang.String, java.lang.String) org.json.JSONObject.JSONObject() java.lang.Math.min(int, int) com.inovex.zabbixmobile.api.ZabbixService.showProgress(<unknown>) java.lang.String.equals(java.lang.String) android.content.Intent.Intent(<unknown>) java.lang.String.equals(<unknown>) org.json.JSONObject.put(java.lang.String, int) javax.net.ssl.SSLContext.getInstance(java.lang.String) android.content.res.Resources.getString(<unknown>) org.json.JSONObject.JSONObject() android.content.Intent.Intent(<unknown>) java.lang.String.equals(<unknown>) <unknown>.nextProperty() javax.net.ssl.SSLSocketFactory.createSocket(java.net.Socket, java.lang.String, int, boolean) org.json.JSONObject.put(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject) <unknown>.get(<unknown>) java.io.IOException.IOException(java.lang.String) java.lang.String.trim() java.lang.String.contains(java.lang.String) org.apache.http.entity.StringEntity.StringEntity(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService._endTransaction() .X509TrustManager() com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject) android.graphics.Color.parseColor(<unknown>) com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, null) org.json.JSONObject.getJSONArray(java.lang.String) org.apache.http.client.params.HttpClientParams.setRedirecting(org.apache.http.params.HttpParams, boolean) com.inovex.zabbixmobile.api.ZabbixService._startTransaction() <unknown>.getCurrentName() java.lang.String.equals(<unknown>) java.lang.Long.parseLong(<unknown>) android.util.Log.d(java.lang.String, java.lang.String) org.codehaus.jackson.JsonParser.getCurrentToken() org.codehaus.jackson.JsonParser.nextValue() java.lang.Long.parseLong(<unknown>) <unknown>.getText() java.util.Date.getTime() android.content.Intent.putExtra(java.lang.String, <unknown>) android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null) <unknown>.get(<unknown>) android.database.Cursor.moveToFirst() org.apache.http.client.methods.HttpEntityEnclosingRequestBase.setEntity(org.apache.http.entity.StringEntity) com.inovex.zabbixmobile.api.ZabbixService._commitTransactionIfRecommended() com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, null) android.database.sqlite.SQLiteQueryBuilder.appendWhere(<unknown>) org.apache.http.auth.UsernamePasswordCredentials.UsernamePasswordCredentials(java.lang.String, java.lang.String) java.util.Date.getTime() java.lang.String.equals(<unknown>) com.inovex.zabbixmobile.api.ZabbixService._endTransaction() org.json.JSONObject.put(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService.authenticate() java.lang.String.equals(<unknown>) org.json.JSONObject.put(java.lang.String, java.lang.String) org.json.JSONObject.put(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService.NoAPIAccessException.NoAPIAccessException() org.json.JSONArray.put(long) com.inovex.zabbixmobile.api.ZabbixService._endTransaction() android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null) <unknown>.getJsonArray() <unknown>.ScreenData() java.util.Date.Date() java.util.Date.Date() <unknown>.set(<unknown>, long) <unknown>.getCurrentName() org.json.JSONObject.put(java.lang.String, org.json.JSONArray) <unknown>.set(<unknown>, long) org.json.JSONObject.put(java.lang.String, java.lang.String) org.apache.http.params.HttpConnectionParams.setConnectionTimeout(org.apache.http.params.HttpParams, int) org.json.JSONArray.length() <unknown>.set(<unknown>, java.lang.String) <unknown>.set(<unknown>, long) java.util.Date.getTime() <unknown>.set(<unknown>, <unknown>) <unknown>.set(<unknown>, <unknown>) org.json.JSONArray.put(java.lang.String) java.lang.String.equals(<unknown>) com.inovex.zabbixmobile.api.ZabbixService.importScreenItems(<unknown>) com.inovex.zabbixmobile.api.ZabbixService.HttpAuthorizationRequiredException.HttpAuthorizationRequiredException() <unknown>.getText() org.json.JSONObject.put(java.lang.String, org.json.JSONArray) com.inovex.zabbixmobile.api.ZabbixService.importEvents(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader, null) org.json.JSONObject.JSONObject() <unknown>.set(<unknown>, <unknown>) com.inovex.zabbixmobile.api.ZabbixService.importHostGroups(<unknown>) org.json.JSONObject.toString() java.lang.Integer.parseInt(<unknown>) android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null) org.apache.http.params.HttpProtocolParams.setContentCharset(org.apache.http.params.HttpParams, java.lang.String) <unknown>.get(<unknown>) java.lang.String.equals(<unknown>) <unknown>.set(<unknown>, <unknown>) <unknown>.nextValueToken() <unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>) org.json.JSONObject.put(java.lang.String, org.json.JSONArray) org.json.JSONObject.put(java.lang.String, java.lang.Integer) <unknown>.getText() <unknown>.set(<unknown>, <unknown>) org.apache.http.message.AbstractHttpMessage.addHeader(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject) org.json.JSONObject.getJSONArray(java.lang.String) java.security.KeyStore.load(null, null) java.lang.String.replace(java.lang.String, java.lang.String) java.lang.Long.parseLong(<unknown>) org.json.JSONObject.toString() com.inovex.zabbixmobile.api.ZabbixService.importTriggers(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader) android.util.Log.d(java.lang.String, java.lang.String) android.content.SharedPreferences.getString(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, java.lang.String) <unknown>.TriggerData() android.content.SharedPreferences.getString(java.lang.String, java.lang.String) android.content.Intent.Intent(<unknown>) org.json.JSONObject.put(java.lang.String, java.lang.String) org.apache.http.impl.client.AbstractHttpClient.getCredentialsProvider() <unknown>.set(<unknown>, <unknown>) java.io.IOException.IOException(java.lang.String) java.lang.String.trim() org.json.JSONObject.put(java.lang.String, org.json.JSONArray) java.lang.String.split(java.lang.String) java.lang.String.equals(java.lang.String) java.lang.String.endsWith(java.lang.String) <unknown>.set(<unknown>, int) com.inovex.zabbixmobile.api.ZabbixService.showProgress(int) <unknown>.ItemData() org.json.JSONObject.put(java.lang.String, int) <unknown>.set(<unknown>, <unknown>) org.codehaus.jackson.JsonParser.getText() android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null) org.apache.http.impl.client.DefaultHttpClient.DefaultHttpClient(org.apache.http.conn.ClientConnectionManager, org.apache.http.params.HttpParams) <unknown>.close() java.lang.IllegalStateException.IllegalStateException(java.lang.String) org.json.JSONObject.put(java.lang.String, java.lang.String) org.codehaus.jackson.JsonParser.nextToken() android.database.Cursor.getColumnIndex(<unknown>) org.json.JSONObject.put(java.lang.String, org.json.JSONArray) <unknown>.nextValueToken() com.inovex.zabbixmobile.api.ZabbixService._startTransaction() org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.set(<unknown>, java.lang.String) java.lang.String.substring(int, int) java.lang.Long.parseLong(<unknown>) org.json.JSONObject.put(java.lang.String, java.lang.String) org.json.JSONObject.getInt(java.lang.String) java.lang.String.equals(java.lang.String) <unknown>.set(<unknown>, <unknown>) <unknown>.set(<unknown>, <unknown>) java.security.KeyStore.getInstance(java.lang.String) java.lang.Integer.parseInt(<unknown>) java.lang.String.equals(java.lang.String) <unknown>.nextProperty() android.content.Intent.putExtra(java.lang.String, java.lang.String) com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, null) <unknown>.set(<unknown>, int) java.io.BufferedReader.BufferedReader(java.io.InputStreamReader) com.inovex.zabbixmobile.api.ZabbixService.importEvents(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader, int) java.security.KeyStore.getDefaultType() java.lang.String.equals(<unknown>) <unknown>.getText() org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.set(<unknown>, java.lang.Object) org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.insert(android.database.sqlite.SQLiteDatabase) <unknown>.nextProperty() com.inovex.zabbixmobile.api.ZabbixService._startTransaction() org.json.JSONObject.put(java.lang.String, java.lang.String) <unknown>.close() <unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>) org.json.JSONObject.put(java.lang.String, long) com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, null, int) <unknown>.getJsonArray() <unknown>.set(<unknown>, <unknown>) java.lang.String.equals(<unknown>) org.apache.http.conn.scheme.Scheme.Scheme(java.lang.String, org.apache.http.conn.scheme.PlainSocketFactory, int) org.json.JSONObject.put(java.lang.String, java.lang.String) java.lang.String.equals(<unknown>)"],
      "c_callsites_added_t": ["java.lang.String.startsWith(java.lang.String)"],
      "c_methods_t": ["ApplicationData ApplicationItemRelationData ArrayList, String BasicHttpParams BufferedReader CacheData ContentValues CustomSSLSocketFactory Date DefaultHttpClient EventData GraphData GraphItemData HashSet, Long HistoryDetailData HostData HostGroupData HttpAuthorizationRequiredException HttpPost IOException IllegalStateException InputStreamReader Intent ItemData JSONArray JSONObject JsonArrayOrObjectReader JsonFactory NoAPIAccessException PreconditionFailedException RuntimeException SQLiteQueryBuilder Scheme SchemeRegistry ScreenData ScreenItemData StringBuilder StringEntity ThreadSafeClientConnManager TriggerData UsernamePasswordCredentials X509TrustManager _commitTransactionIfRecommended _endTransaction _queryBuffer _queryStream _startTransaction add addHeader append appendWhere authenticate beginTransaction close contains createJsonParser createSocket d delete endTransaction endsWith equals execute get getBoolean getColumnIndex getContent getCredentialsProvider getCurrentName getCurrentToken getDefaultSharedPreferences getDefaultType getEntity getInstance getInt getJSONArray getJSONObject getJsonArray getLong getMessage getParams getReasonPhrase getResources getSocketFactory getStatusCode getStatusLine getString getText getTime i importApplications importEvents importGraphItems importHostGroups importHosts importItems importScreenItems importTriggers inTransaction indexOf init insert isCached isClosed length load matches min moveToFirst moveToNext next nextProperty nextToken nextValue nextValueToken parseColor parseDouble parseInt parseLong printStackTrace put putExtra query read register replace replaceAll sendBroadcast set setCached setConnectionTimeout setContentCharset setCredentials setEntity setHostnameVerifier setRedirecting setTables setTransactionSuccessful setVersion showProgress split startsWith substring toString trim update"],
      "id": "inovex/zax\u0000src/com/inovex/zabbixmobile/api/ZabbixService.java\u0000bae0223e3d008ee05a94f9b7db30eec6844110b6\u0000976f9d4001cf9c49a39f3b93acb53607ea8c0bfd",
      "p_comments_t": ["\t\t\t// create ApplicationItemRelation /** \n * public, for the unit test\n */\n /** \n * import the hosts from stream\n * @param jsonArray stream\n * @param numHosts count of hosts for progressbar. null if unknown.\n * @return Object[] {(String) comma-separated all Hostnames, (Long) 1. host id}\n * @throws JsonParseException\n * @throws IOException\n */\n \t\t\t// result array found /** \n * import graph items\n * @param graphItems\n * @return true, if graphid column has to be updated from -1 to the correct graphid later.\n * @throws JsonParseException\n * @throws NumberFormatException\n * @throws IOException\n */\n \t\t\t\t\t\t// save only every 20th \t\t\t// wrong password. token remains null \t\t\t// the past 2 hours \t\t\t\t\t// data are unuseable, e.g. because it's a string /** \n * @param events stream\n * @param numEvents if null, no progressbar-update AND only isert, if it does not exist. If !null, progressbar-update AND always insert without checking\n * @throws JsonParseException\n * @throws IOException\n */\n \t\t\t\t\t// Precondition failed / Looks like Zabbix 1.8.2 \t\t\t// get API version \t\t\t// if #0 \"other\" does not exist yet, it has to be created \t\t\t\t\t// later the IDs will be replaced with the correct /** \n * zabbix api call. data will be parsed as json object on-the-fly. Caution: use this only for api calls with a small return data.\n * @param method\n * @param params\n * @return\n * @throws ClientProtocolException\n * @throws IOException\n * @throws JSONException\n * @throws HttpAuthorizationRequiredException\n * @throws NoAPIAccessException\n */\n /** \n * begin sql transaction\n */\n \t\t\t\t\t\t// first do a new auth and then try the same api call again \t\t\t\t// no itemid \t\t\t// count of items /** \n * init\n * @param context android context\n * @param zabbixLocalDB sqlite\n */\n \t\t\t// create applications that does not exist \t\t\t\t// so we use a fiction \t\t\t// only resouretype == 0 /** \n * probably too old zabbix <= 1.8.2\n */\n /** \n * zabbix auth. user and pwd from app preferences\n * @return true success\n * @throws ClientProtocolException\n * @throws IOException\n * @throws JSONException\n * @throws HttpAuthorizationRequiredException\n * @throws NoAPIAccessException\n */\n /** \n * close the last http stream\n */\n \t\t\t// Workaround: historydetails only comes if you use the correct \"history\"-parameter. /** \n * transforms the progress\n * @param start 0% => start%\n * @param end 100% => end%\n */\n \t\t\t\t// in Zabbix version <2.0, this is not default \t\t\t\t// file not found \t\t\t\t\t// hex string => color int \t\tHttpClientParams.setRedirecting(params, true); // redirecting \t\t\t// if applicable replace placeholder \t\t\t// if graphid-column was not set, this must be done later. temporary graphid=-1 \t\t// for GUI unit test, just return true /** \n * imports the \"warning\"-triggers\n * @throws JSONException\n * @throws IOException\n * @throws HttpAuthorizationRequiredException\n * @throws NoAPIAccessException\n */\n \t\t\t// event is parsed and can be inserted into the db \t\tpublic static final int EVENT_GET_TIME_FROM_SHIFT = 7*24*60*60; // -7 days \t\t// http request \t\t\t\t\t// store hosts namen \t\t\t\t// http auth failed \t\t\t\t\t// at this point itemid and hostid is unknown \t\t\t\t\t// import triggers \t\t\t// we try them all, until we get results. /** \n * importiert ein trigger mit dem attribute itemid. ggf. wird der trigger zuerst gelöscht und neu angelegt. imports a trigger with the attribute itemid. if trigger already exists, it will be removed first.\n * @param triggerid\n * @throws JSONException\n * @throws IOException\n * @throws HttpAuthorizationRequiredException\n * @throws NoAPIAccessException\n */\n \t\t\t\t\t// import hosts \t\t\t// for unit test \t\t\t\t// ignore \t\t\tlong time_from = time_till - ZabbixConfig.HISTORY_GET_TIME_FROM_SHIFT; // jetzt-2h \t\t\t// or a json object /** \n * zabbix error: no api access\n */\n /** \n * counts the sql inserts/updates and do a transaction commit to save the memory\n */\n \t\t\t// send intent to GUI \t\t\t\t\t// before zabbix 2.x the name field was \"description\" \t\t\t\t\t// if we get an empty array, we try another history parameter \t\t\t\t\t// store the first item id \t\t// check if the trigger exists and if the itemid was set /** \n * global constants\n */\n \t\t\t\t// create \"other\" hostgroup #1 \t\t\t// if there's no application, the ID #0 must be added (for other) \t\t\t\t\t// because of this, all applicationrelations will be saved with itemid and hostid \"-1\". \t\tpublic static final int HISTORY_GET_TIME_FROM_SHIFT = 8*60*60; // -8h \t\t\t\t\t\t.put(\"history\", historytype) // for integer ? /** \n * interface to connect to the zabbix server\n */\n /** \n * acknowledge zabbix event. Sets ack-flag with comment. Caution: This is supported only for Zabbix version >= 1.8.4\n * @param eventid\n * @param comment\n * @return true, success.\n * @throws ClientProtocolException\n * @throws IOException\n * @throws JSONException\n * @throws HttpAuthorizationRequiredException\n * @throws NoAPIAccessException\n */\n \t\t\t// store the last stream to close it if an exception will be thrown /** \n * zabbix api call as stream.\n * @param method\n * @param params\n * @return stream im json array wrapper\n * @throws JSONException\n * @throws IOException\n * @throws HttpAuthorizationRequiredException\n * @throws NoAPIAccessException\n */\n \t\t// if applicable http auth \t\t\t// correct historytype found and there are data \t\t\t\t// count of the entries cannot be detected (zabbix bug), /** \n * import items from stream.\n * @param items stream\n * @param numItems count for progressbar, if 0 no progressbarupdate\n * @param checkBeforeInsert if true, only make an insert if item does not exist\n * @return the first item id\n * @throws JsonParseException\n * @throws IOException\n */\n \t\t\t// collect all graphids /** \n * http auth is needed\n */\n \t\t\t// ignore for unit test /** \n * commit sql transaction\n */\n \t\t\t// delete old graphs \t\t\t// host without group will get group #0 (other) \t\t\t// there's no result \t\t// if applicable, transform the progress \t\t\t// SSL not trusted \t\t\t// internet problem \t\t\tif (jp.nextToken() != JsonToken.START_ARRAY && jp.getCurrentToken() != JsonToken.START_OBJECT) { // go inside the array \t\tpublic static final int CACHE_LIFETIME_APPLICATIONS = 2*24*60*60; // 2 days \t\t\t\t\t// since zabbix 2.x is the name of the item \"name\" \t\t\t// now the \"-1\" IDs of applicationsrelation will be replaced with the correct itemID \t\t\t// get count of hosts /** \n * import the newest events\n * @throws ClientProtocolException\n * @throws IOException\n * @throws JSONException\n * @throws HttpAuthorizationRequiredException\n * @throws NoAPIAccessException\n */\n /** \n * updates the progressbar in the gui\n * @param i 0..100\n */\n \t\t\t\t\t\t// ignore \t\t\t\t\t// first do a new auth and then try the same api call again /** \n * import the newest event of a trigger\n * @param triggerid\n * @throws JSONException\n * @throws IOException\n * @throws HttpAuthorizationRequiredException\n * @throws NoAPIAccessException\n */\n \t\t// it can be an (empty) array \t\t\t// this parameter can be \"null\" or a number 0-4. Because we don't know when to use which, \t\t\t// clear triggers"],
      "p_email_sni": "jonas.gehring@inovex.de",
      "c_callsites_removed_t": ["<empty>"],
      "c_callsites_cs": "<unknown>.set(<unknown>, <unknown>)#org.apache.http.HttpEntity.getContent()#java.lang.String.equals(java.lang.String)#org.json.JSONArray.JSONArray()#<unknown>.set(<unknown>, java.lang.Object)#org.json.JSONObject.put(java.lang.String, java.lang.Integer)#org.json.JSONArray.put(java.lang.String)#org.json.JSONObject.JSONObject()#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.codehaus.jackson.JsonFactory.createJsonParser(java.io.InputStream)#java.lang.String.equals(<unknown>)#org.apache.http.StatusLine.getStatusCode()#<unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>)#org.json.JSONObject.put(java.lang.String, java.lang.String)#android.database.sqlite.SQLiteDatabase.inTransaction()#android.util.Log.d(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService._startTransaction()#java.lang.String.equals(java.lang.String)#org.codehaus.jackson.JsonFactory.JsonFactory()#com.inovex.zabbixmobile.api.ZabbixService._endTransaction()#org.json.JSONObject.put(java.lang.String, int)#android.content.ContentValues.ContentValues(int)#org.apache.http.conn.scheme.SchemeRegistry.SchemeRegistry()#<unknown>.insert(android.database.sqlite.SQLiteDatabase)#<unknown>.insert(android.database.sqlite.SQLiteDatabase)#com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject)#com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject)#com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject)#org.json.JSONObject.getJSONObject(java.lang.String)#java.io.InputStreamReader.InputStreamReader(java.io.InputStream)#android.content.Intent.putExtra(java.lang.String, <unknown>)#org.json.JSONArray.length()#java.lang.String.equals(java.lang.String)#<unknown>.set(<unknown>, <unknown>)#java.lang.String.equals(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService.PreconditionFailedException.PreconditionFailedException()#java.lang.StringBuilder.StringBuilder()#android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null)#<unknown>.nextValueToken()#org.json.JSONObject.JSONObject()#org.json.JSONObject.put(java.lang.String, int)#org.json.JSONObject.put(java.lang.String, org.json.JSONArray)#java.lang.String.equals(<unknown>)#<unknown>.get(<unknown>)#<unknown>.insert(android.database.sqlite.SQLiteDatabase)#android.content.Intent.putExtra(java.lang.String, <unknown>)#java.lang.String.equals(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService.importItems(<unknown>, int, boolean)#com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, java.lang.String, int)#android.util.Log.d(java.lang.String, java.lang.String)#org.json.JSONObject.put(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject)#org.apache.http.conn.scheme.Scheme.Scheme(java.lang.String, org.apache.http.conn.ssl.SSLSocketFactory, int)#org.apache.http.HttpEntity.getContent()#org.codehaus.jackson.JsonParser.close()#java.lang.String.equals(<unknown>)#<unknown>.nextValueToken()#<unknown>.getCurrentName()#org.json.JSONArray.JSONArray(java.util.Set<java.lang.Long>)#<unknown>.nextValueToken()#android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null)#<unknown>.getJsonArray()#com.inovex.zabbixmobile.api.ZabbixService._startTransaction()#org.json.JSONArray.JSONArray()#<unknown>.nextProperty()#java.lang.String.equals(java.lang.String)#android.database.sqlite.SQLiteDatabase.update(<unknown>, android.content.ContentValues, <unknown>, null)#java.util.Set<java.lang.Long>.add(<unknown>)#<unknown>.get(<unknown>)#<unknown>.get(<unknown>)#android.content.ContentValues.put(<unknown>, java.lang.Long)#java.lang.String.equals(java.lang.String)#org.apache.http.StatusLine.getReasonPhrase()#java.lang.RuntimeException.RuntimeException(java.lang.String)#<unknown>.nextProperty()#java.lang.Throwable.printStackTrace()#java.lang.String.equals(<unknown>)#java.lang.Long.parseLong(<unknown>)#org.json.JSONObject.put(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject)#<unknown>.getCurrentName()#android.content.ContentValues.put(<unknown>, java.lang.Long)#org.apache.http.entity.StringEntity.StringEntity(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject)#java.lang.String.equals(<unknown>)#<unknown>.EventData()#<unknown>.next()#<unknown>.set(<unknown>, <unknown>)#com.inovex.zabbixmobile.api.ZabbixService.CustomSSLSocketFactory.CustomSSLSocketFactory(java.security.KeyStore)#com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject)#<unknown>.getCurrentName()#java.util.List<java.lang.String>.add(java.lang.String)#org.json.JSONObject.put(java.lang.String, int)#<unknown>.getText()#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.apache.http.conn.ssl.SSLSocketFactory.setHostnameVerifier(org.apache.http.conn.ssl.X509HostnameVerifier)#<unknown>.set(<unknown>, <unknown>)#<unknown>.getText()#org.json.JSONObject.put(java.lang.String, long)#java.util.Date.Date()#org.json.JSONObject.put(java.lang.String, int)#org.json.JSONObject.put(java.lang.String, int)#<unknown>.set(<unknown>, <unknown>)#com.inovex.zabbixmobile.api.ZabbixService.authenticate()#android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null)#android.util.Log.d(java.lang.String, java.lang.String)#java.lang.String.equals(java.lang.String)#org.apache.http.HttpResponse.getEntity()#org.json.JSONObject.JSONObject()#com.inovex.zabbixmobile.api.ZabbixService.importItems(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader, int, boolean)#com.inovex.zabbixmobile.api.ZabbixService._startTransaction()#com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, null, int)#java.io.BufferedReader.read()#org.json.JSONObject.put(java.lang.String, long)#<unknown>.set(<unknown>, <unknown>)#android.database.Cursor.getLong(<unknown>)#java.lang.IllegalStateException.IllegalStateException(java.lang.String)#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.getCurrentName()#android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null)#android.util.Log.d(java.lang.String, java.lang.String)#<unknown>.set(<unknown>, <unknown>)#java.lang.String.equals(<unknown>)#org.json.JSONObject.put(java.lang.String, java.lang.String)#android.database.Cursor.moveToFirst()#com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, java.lang.String)#android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null)#java.lang.String.equals(java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, java.lang.String)#<unknown>.getText()#org.json.JSONObject.put(java.lang.String, java.lang.String)#android.content.Intent.putExtra(java.lang.String, <unknown>)#<unknown>.getCurrentName()#android.content.res.Resources.getString(<unknown>)#android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null)#android.database.sqlite.SQLiteDatabase.setTransactionSuccessful()#<unknown>.next()#<unknown>.getText()#<unknown>.nextValueToken()#com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject)#com.inovex.zabbixmobile.api.ZabbixService.showProgress(<unknown>)#java.io.IOException.IOException(java.lang.String)#<unknown>.getCurrentName()#android.util.Log.d(java.lang.String, java.lang.String)#java.lang.Object.toString()#org.json.JSONObject.toString()#<unknown>.set(<unknown>, <unknown>)#org.json.JSONArray.JSONArray()#org.apache.http.HttpResponse.getStatusLine()#org.json.JSONArray.JSONArray()#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.apache.http.impl.client.DefaultHttpClient.DefaultHttpClient()#org.json.JSONObject.put(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject)#org.apache.http.HttpResponse.getStatusLine()#java.lang.String.equals(<unknown>)#java.util.Date.Date()#android.util.Log.i(java.lang.String, java.lang.String)#android.content.Context.getResources()#org.apache.http.impl.client.CloseableHttpClient.execute(org.apache.http.client.methods.HttpPost)#com.inovex.zabbixmobile.api.ZabbixService._commitTransactionIfRecommended()#com.inovex.zabbixmobile.api.ZabbixService.importHostGroups(<unknown>)#android.content.Context.sendBroadcast(android.content.Intent)#android.content.Context.sendBroadcast(android.content.Intent)#com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, null, int)#java.lang.Integer.parseInt(<unknown>)#<unknown>.ApplicationData()#com.inovex.zabbixmobile.api.ZabbixService.NoAPIAccessException.NoAPIAccessException()#com.inovex.zabbixmobile.api.ZabbixService._commitTransactionIfRecommended()#<unknown>.getJsonArray()#org.apache.http.message.AbstractHttpMessage.addHeader(java.lang.String, java.lang.String)#org.json.JSONObject.put(java.lang.String, int)#java.lang.String.replace(java.lang.String, java.lang.String)#org.json.JSONArray.JSONArray()#<unknown>.set(<unknown>, <unknown>)#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.set(<unknown>, <unknown>)#org.json.JSONArray.JSONArray()#java.lang.String.equals(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, java.lang.String, int)#<unknown>.nextProperty()#<unknown>.set(<unknown>, java.lang.String)#org.json.JSONObject.JSONObject()#java.lang.String.contains(java.lang.String)#org.apache.http.client.methods.HttpEntityEnclosingRequestBase.setEntity(org.apache.http.entity.StringEntity)#com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject)#com.inovex.zabbixmobile.api.ZabbixService.importTriggers(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader)#org.json.JSONObject.put(java.lang.String, int)#<unknown>.HostGroupData()#<unknown>.JsonArrayOrObjectReader(org.codehaus.jackson.JsonParser)#<unknown>.HostGroupData()#<unknown>.nextProperty()#java.lang.Long.parseLong(<unknown>)#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.json.JSONObject.put(java.lang.String, org.json.JSONArray)#org.json.JSONObject.put(java.lang.String, java.lang.Integer)#<unknown>.set(<unknown>, <unknown>)#<unknown>.close()#org.json.JSONObject.put(java.lang.String, org.json.JSONArray)#<unknown>.set(<unknown>, <unknown>)#java.lang.String.equals(java.lang.String)#android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null)#<unknown>.next()#org.json.JSONObject.toString()#java.lang.String.equals(<unknown>)#java.lang.String.equals(<unknown>)#android.database.sqlite.SQLiteDatabase.query(<unknown>, null, <unknown>, null, null, null, null)#<unknown>.set(<unknown>, <unknown>)#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.CacheData()#<unknown>.getText()#com.inovex.zabbixmobile.api.ZabbixService._startTransaction()#<unknown>.set(<unknown>, <unknown>)#com.inovex.zabbixmobile.api.ZabbixService._endTransaction()#<unknown>.set(<unknown>, int)#<unknown>.getJsonArray()#java.lang.String.equals(<unknown>)#java.util.Date.getTime()#java.lang.String.equals(java.lang.String)#org.json.JSONObject.put(java.lang.String, int)#<unknown>.set(<unknown>, <unknown>)#java.lang.Integer.parseInt(<unknown>)#org.codehaus.jackson.JsonParser.getCurrentName()#<unknown>.nextProperty()#com.inovex.zabbixmobile.api.ZabbixService._endTransaction()#java.lang.String.equals(<unknown>)#org.json.JSONObject.put(java.lang.String, int)#android.database.sqlite.SQLiteDatabase.update(<unknown>, android.content.ContentValues, <unknown>, null)#com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject)#com.inovex.zabbixmobile.api.ZabbixService._endTransaction()#java.lang.StringBuilder.append(char)#<unknown>.set(<unknown>, <unknown>)#<unknown>.get(<unknown>)#<unknown>.set(<unknown>, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject)#org.json.JSONObject.put(java.lang.String, java.lang.String)#android.database.Cursor.getLong(<unknown>)#java.lang.String.equals(<unknown>)#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.json.JSONObject.JSONObject()#org.apache.http.params.HttpProtocolParams.setVersion(org.apache.http.params.HttpParams, org.apache.http.HttpVersion)#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.HistoryDetailData()#android.util.Log.d(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService._startTransaction()#<unknown>.next()#<unknown>.set(<unknown>, <unknown>)#<unknown>.nextValueToken()#org.json.JSONObject.JSONObject()#java.lang.String.equals(<unknown>)#java.lang.Long.parseLong(<unknown>)#java.lang.Integer.parseInt(<unknown>)#org.apache.http.client.methods.HttpPost.HttpPost(java.lang.String)#org.apache.http.StatusLine.getStatusCode()#<unknown>.set(<unknown>, int)#java.lang.String.equals(java.lang.String)#java.lang.String.equals(<unknown>)#java.lang.String.equals(<unknown>)#<unknown>.getCurrentName()#java.util.ArrayList<java.lang.String>.ArrayList, String()#com.inovex.zabbixmobile.api.ZabbixService._startTransaction()#com.inovex.zabbixmobile.api.ZabbixService.importTriggers(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader)#org.json.JSONArray.put(java.lang.String)#<unknown>.nextValueToken()#org.json.JSONArray.put(java.lang.String)#<unknown>.set(<unknown>, <unknown>)#org.json.JSONObject.put(java.lang.String, int)#com.inovex.zabbixmobile.api.ZabbixService.importItems(<unknown>, int, boolean)#org.json.JSONObject.JSONObject()#com.inovex.zabbixmobile.api.ZabbixService.importTriggers(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService.importGraphItems(<unknown>)#<unknown>.ScreenItemData()#<unknown>.set(<unknown>, <unknown>)#<unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>)#android.preference.PreferenceManager.getDefaultSharedPreferences(android.content.Context)#org.json.JSONObject.length()#<unknown>.nextValueToken()#java.util.HashSet<java.lang.Long>.HashSet, Long()#java.lang.String.equals(java.lang.String)#android.content.SharedPreferences.getBoolean(java.lang.String, boolean)#<unknown>.insert(android.database.sqlite.SQLiteDatabase)#org.json.JSONObject.put(java.lang.String, org.json.JSONArray)#<unknown>.close()#com.inovex.zabbixmobile.api.ZabbixService.importHosts(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader, int)#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.next()#android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null)#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.json.JSONObject.getString(java.lang.String)#<unknown>.set(<unknown>, <unknown>)#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.close()#org.json.JSONObject.getString(java.lang.String)#java.lang.String.equals(java.lang.String)#java.lang.Long.parseLong(<unknown>)#org.codehaus.jackson.JsonParser.isClosed()#org.json.JSONObject.put(java.lang.String, int)#org.json.JSONObject.put(java.lang.String, org.json.JSONArray)#java.lang.String.startsWith(java.lang.String)#org.json.JSONObject.put(java.lang.String, long)#<unknown>.close()#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.set(<unknown>, long)#org.json.JSONObject.put(java.lang.String, org.json.JSONObject)#<unknown>.set(<unknown>, <unknown>)#com.inovex.zabbixmobile.api.ZabbixService._endTransaction()#java.lang.String.replaceAll(java.lang.String, java.lang.String)#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.nextValueToken()#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.apache.http.params.BasicHttpParams.BasicHttpParams()#android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null)#android.database.sqlite.SQLiteDatabase.beginTransaction()#com.inovex.zabbixmobile.api.ZabbixService._commitTransactionIfRecommended()#com.inovex.zabbixmobile.api.ZabbixService._endTransaction()#java.lang.String.equals(<unknown>)#<unknown>.insert(android.database.sqlite.SQLiteDatabase)#<unknown>.insert(android.database.sqlite.SQLiteDatabase)#org.json.JSONObject.put(java.lang.String, int)#<unknown>.next()#com.inovex.zabbixmobile.api.ZabbixService._startTransaction()#<unknown>.getJsonArray()#android.content.SharedPreferences.getString(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, null, int)#javax.net.SocketFactory.createSocket()#java.lang.Long.parseLong(<unknown>)#org.apache.http.client.CredentialsProvider.setCredentials(org.apache.http.auth.AuthScope, org.apache.http.auth.UsernamePasswordCredentials)#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.next()#com.inovex.zabbixmobile.api.ZabbixService.HttpAuthorizationRequiredException.HttpAuthorizationRequiredException()#android.database.sqlite.SQLiteQueryBuilder.query(android.database.sqlite.SQLiteDatabase, null, null, null, null, null, null)#java.util.Date.Date()#com.inovex.zabbixmobile.api.ZabbixService._commitTransactionIfRecommended()#<unknown>.set(<unknown>, java.lang.String)#org.json.JSONObject.JSONObject()#<unknown>.next()#<unknown>.set(<unknown>, <unknown>)#<unknown>.set(<unknown>, <unknown>)#com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject)#java.lang.String.equals(java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, java.lang.String)#java.lang.String.indexOf(char)#android.database.sqlite.SQLiteDatabase.query(<unknown>, null, <unknown>, null, null, null, null)#android.preference.PreferenceManager.getDefaultSharedPreferences(android.content.Context)#<unknown>.nextProperty()#org.apache.http.impl.client.CloseableHttpClient.execute(org.apache.http.client.methods.HttpPost)#<unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>)#com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, java.lang.String)#org.json.JSONObject.JSONObject()#<unknown>.close()#android.database.Cursor.getColumnIndex(<unknown>)#android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null)#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.nextProperty()#org.apache.http.conn.scheme.PlainSocketFactory.getSocketFactory()#com.inovex.zabbixmobile.api.ZabbixService._commitTransactionIfRecommended()#com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject)#java.lang.StringBuilder.toString()#org.json.JSONObject.put(java.lang.String, java.lang.String)#android.database.sqlite.SQLiteQueryBuilder.SQLiteQueryBuilder()#<unknown>.insert(android.database.sqlite.SQLiteDatabase)#org.apache.http.conn.scheme.SchemeRegistry.register(org.apache.http.conn.scheme.Scheme)#<unknown>.set(<unknown>, <unknown>)#org.json.JSONObject.JSONObject(java.lang.String)#java.lang.String.equals(<unknown>)#<unknown>.set(<unknown>, <unknown>)#<unknown>.set(<unknown>, <unknown>)#java.lang.IllegalStateException.IllegalStateException(java.lang.String)#java.lang.Double.parseDouble(<unknown>)#android.content.ContentValues.put(<unknown>, java.lang.Long)#android.util.Log.i(java.lang.String, java.lang.String)#android.database.sqlite.SQLiteQueryBuilder.appendWhere(<unknown>)#org.apache.http.conn.scheme.SchemeRegistry.register(org.apache.http.conn.scheme.Scheme)#org.json.JSONObject.getInt(java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService.importHosts(<unknown>, null)#org.json.JSONObject.put(java.lang.String, boolean)#java.lang.Long.parseLong(<unknown>)#java.lang.String.indexOf(char)#java.lang.String.equals(java.lang.String)#android.database.sqlite.SQLiteQueryBuilder.appendWhere(<unknown>)#java.lang.String.length()#java.lang.String.equals(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject)#<unknown>.nextProperty()#<unknown>.next()#android.content.SharedPreferences.getString(java.lang.String, java.lang.String)#<unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>)#com.inovex.zabbixmobile.api.ZabbixService.importTriggers(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader)#<unknown>.GraphData()#org.json.JSONArray.put(java.lang.String)#org.apache.http.impl.client.AbstractHttpClient.getParams()#<unknown>.set(<unknown>, long)#<unknown>.set(<unknown>, <unknown>)#org.json.JSONObject.getJSONObject(java.lang.String)#org.json.JSONObject.put(java.lang.String, java.lang.String)#java.lang.String.equals(java.lang.String)#org.json.JSONObject.getString(java.lang.String)#java.lang.String.equals(<unknown>)#java.lang.String.equals(<unknown>)#<unknown>.getCurrentName()#java.lang.String.equals(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService.showProgress(int)#<unknown>.getCurrentName()#com.inovex.zabbixmobile.api.ZabbixService.importHosts(<unknown>, null)#com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, java.lang.String, int)#org.json.JSONObject.put(java.lang.String, int)#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.close()#java.lang.String.replace(java.lang.String, java.lang.String)#java.lang.String.equals(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject)#com.inovex.zabbixmobile.api.ZabbixService._endTransaction()#android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null)#android.database.Cursor.moveToNext()#<unknown>.HostData()#<unknown>.set(<unknown>, long)#<unknown>.next()#com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject)#android.database.sqlite.SQLiteQueryBuilder.setTables(<unknown>)#java.util.Date.getTime()#org.json.JSONObject.put(java.lang.String, long)#android.content.ContentValues.ContentValues(int)#java.lang.Long.parseLong(<unknown>)#org.apache.http.HttpResponse.getEntity()#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.getText()#java.lang.String.equals(java.lang.String)#<unknown>.set(<unknown>, <unknown>)#<unknown>.set(<unknown>, <unknown>)#javax.net.ssl.SSLContext.init(null, javax.net.ssl.TrustManager[], null)#android.database.sqlite.SQLiteDatabase.endTransaction()#java.lang.String.equals(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, java.lang.String)#android.util.Log.d(java.lang.String, java.lang.String)#<unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>)#<unknown>.next()#<unknown>.close()#<unknown>.insert(android.database.sqlite.SQLiteDatabase)#org.json.JSONObject.put(java.lang.String, java.lang.String)#java.lang.Throwable.getMessage()#java.lang.String.equals(<unknown>)#java.lang.String.equals(<unknown>)#<unknown>.set(<unknown>, <unknown>)#com.inovex.zabbixmobile.api.ZabbixService._endTransaction()#javax.net.ssl.SSLContext.getSocketFactory()#org.json.JSONObject.JSONObject()#android.content.Context.getResources()#org.json.JSONObject.put(java.lang.String, int)#com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, null)#com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, java.lang.String, int)#java.lang.String.matches(java.lang.String)#<unknown>.set(<unknown>, <unknown>)#org.json.JSONArray.put(java.lang.String)#<unknown>.set(<unknown>, <unknown>)#android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null)#android.content.Context.sendBroadcast(android.content.Intent)#org.json.JSONObject.getJSONObject(java.lang.String)#<unknown>.get(<unknown>)#android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null)#java.lang.String.equals(<unknown>)#android.content.SharedPreferences.getBoolean(java.lang.String, boolean)#java.lang.Throwable.printStackTrace()#android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null)#org.json.JSONObject.put(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService._startTransaction()#android.content.Intent.putExtra(java.lang.String, int)#org.json.JSONObject.JSONObject()#<unknown>.getText()#com.inovex.zabbixmobile.api.ZabbixService._endTransaction()#org.apache.http.client.methods.HttpPost.HttpPost(java.lang.String)#android.content.SharedPreferences.getString(java.lang.String, java.lang.String)#<unknown>.GraphItemData()#com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, java.lang.String, int)#<unknown>.nextValueToken()#org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager.ThreadSafeClientConnManager(org.apache.http.params.HttpParams, org.apache.http.conn.scheme.SchemeRegistry)#<unknown>.ApplicationItemRelationData()#java.lang.Object.toString()#android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null)#org.json.JSONArray.JSONArray()#java.lang.String.equals(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService._startTransaction()#org.json.JSONObject.put(java.lang.String, org.json.JSONArray)#com.inovex.zabbixmobile.api.ZabbixService.importApplications(int, int, <unknown>)#<unknown>.set(<unknown>, int)#org.json.JSONObject.put(java.lang.String, int)#com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, java.lang.String, int)#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.json.JSONObject.JSONObject()#java.lang.Math.min(int, int)#com.inovex.zabbixmobile.api.ZabbixService.showProgress(<unknown>)#java.lang.String.equals(java.lang.String)#android.content.Intent.Intent(<unknown>)#java.lang.String.equals(<unknown>)#org.json.JSONObject.put(java.lang.String, int)#javax.net.ssl.SSLContext.getInstance(java.lang.String)#android.content.res.Resources.getString(<unknown>)#org.json.JSONObject.JSONObject()#android.content.Intent.Intent(<unknown>)#java.lang.String.equals(<unknown>)#<unknown>.nextProperty()#javax.net.ssl.SSLSocketFactory.createSocket(java.net.Socket, java.lang.String, int, boolean)#org.json.JSONObject.put(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService._queryStream(java.lang.String, org.json.JSONObject)#<unknown>.get(<unknown>)#java.io.IOException.IOException(java.lang.String)#java.lang.String.trim()#java.lang.String.contains(java.lang.String)#org.apache.http.entity.StringEntity.StringEntity(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService._endTransaction()#.X509TrustManager()#com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject)#android.graphics.Color.parseColor(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, null)#org.json.JSONObject.getJSONArray(java.lang.String)#org.apache.http.client.params.HttpClientParams.setRedirecting(org.apache.http.params.HttpParams, boolean)#com.inovex.zabbixmobile.api.ZabbixService._startTransaction()#<unknown>.getCurrentName()#java.lang.String.equals(<unknown>)#java.lang.Long.parseLong(<unknown>)#android.util.Log.d(java.lang.String, java.lang.String)#org.codehaus.jackson.JsonParser.getCurrentToken()#org.codehaus.jackson.JsonParser.nextValue()#java.lang.Long.parseLong(<unknown>)#<unknown>.getText()#java.util.Date.getTime()#android.content.Intent.putExtra(java.lang.String, <unknown>)#android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null)#<unknown>.get(<unknown>)#android.database.Cursor.moveToFirst()#org.apache.http.client.methods.HttpEntityEnclosingRequestBase.setEntity(org.apache.http.entity.StringEntity)#com.inovex.zabbixmobile.api.ZabbixService._commitTransactionIfRecommended()#com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, null)#android.database.sqlite.SQLiteQueryBuilder.appendWhere(<unknown>)#org.apache.http.auth.UsernamePasswordCredentials.UsernamePasswordCredentials(java.lang.String, java.lang.String)#java.util.Date.getTime()#java.lang.String.equals(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService._endTransaction()#org.json.JSONObject.put(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService.authenticate()#java.lang.String.equals(<unknown>)#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.json.JSONObject.put(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService.NoAPIAccessException.NoAPIAccessException()#org.json.JSONArray.put(long)#com.inovex.zabbixmobile.api.ZabbixService._endTransaction()#android.database.sqlite.SQLiteDatabase.delete(<unknown>, <unknown>, null)#<unknown>.getJsonArray()#<unknown>.ScreenData()#java.util.Date.Date()#java.util.Date.Date()#<unknown>.set(<unknown>, long)#<unknown>.getCurrentName()#org.json.JSONObject.put(java.lang.String, org.json.JSONArray)#<unknown>.set(<unknown>, long)#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.apache.http.params.HttpConnectionParams.setConnectionTimeout(org.apache.http.params.HttpParams, int)#org.json.JSONArray.length()#<unknown>.set(<unknown>, java.lang.String)#<unknown>.set(<unknown>, long)#java.util.Date.getTime()#<unknown>.set(<unknown>, <unknown>)#<unknown>.set(<unknown>, <unknown>)#org.json.JSONArray.put(java.lang.String)#java.lang.String.equals(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService.importScreenItems(<unknown>)#com.inovex.zabbixmobile.api.ZabbixService.HttpAuthorizationRequiredException.HttpAuthorizationRequiredException()#<unknown>.getText()#org.json.JSONObject.put(java.lang.String, org.json.JSONArray)#com.inovex.zabbixmobile.api.ZabbixService.importEvents(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader, null)#org.json.JSONObject.JSONObject()#<unknown>.set(<unknown>, <unknown>)#com.inovex.zabbixmobile.api.ZabbixService.importHostGroups(<unknown>)#org.json.JSONObject.toString()#java.lang.Integer.parseInt(<unknown>)#android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null)#org.apache.http.params.HttpProtocolParams.setContentCharset(org.apache.http.params.HttpParams, java.lang.String)#<unknown>.get(<unknown>)#java.lang.String.equals(<unknown>)#<unknown>.set(<unknown>, <unknown>)#<unknown>.nextValueToken()#<unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>)#org.json.JSONObject.put(java.lang.String, org.json.JSONArray)#org.json.JSONObject.put(java.lang.String, java.lang.Integer)#<unknown>.getText()#<unknown>.set(<unknown>, <unknown>)#org.apache.http.message.AbstractHttpMessage.addHeader(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService._queryBuffer(java.lang.String, org.json.JSONObject)#org.json.JSONObject.getJSONArray(java.lang.String)#java.security.KeyStore.load(null, null)#java.lang.String.replace(java.lang.String, java.lang.String)#java.lang.Long.parseLong(<unknown>)#org.json.JSONObject.toString()#com.inovex.zabbixmobile.api.ZabbixService.importTriggers(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader)#android.util.Log.d(java.lang.String, java.lang.String)#android.content.SharedPreferences.getString(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, java.lang.String)#<unknown>.TriggerData()#android.content.SharedPreferences.getString(java.lang.String, java.lang.String)#android.content.Intent.Intent(<unknown>)#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.apache.http.impl.client.AbstractHttpClient.getCredentialsProvider()#<unknown>.set(<unknown>, <unknown>)#java.io.IOException.IOException(java.lang.String)#java.lang.String.trim()#org.json.JSONObject.put(java.lang.String, org.json.JSONArray)#java.lang.String.split(java.lang.String)#java.lang.String.equals(java.lang.String)#java.lang.String.endsWith(java.lang.String)#<unknown>.set(<unknown>, int)#com.inovex.zabbixmobile.api.ZabbixService.showProgress(int)#<unknown>.ItemData()#org.json.JSONObject.put(java.lang.String, int)#<unknown>.set(<unknown>, <unknown>)#org.codehaus.jackson.JsonParser.getText()#android.database.sqlite.SQLiteDatabase.delete(<unknown>, null, null)#org.apache.http.impl.client.DefaultHttpClient.DefaultHttpClient(org.apache.http.conn.ClientConnectionManager, org.apache.http.params.HttpParams)#<unknown>.close()#java.lang.IllegalStateException.IllegalStateException(java.lang.String)#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.codehaus.jackson.JsonParser.nextToken()#android.database.Cursor.getColumnIndex(<unknown>)#org.json.JSONObject.put(java.lang.String, org.json.JSONArray)#<unknown>.nextValueToken()#com.inovex.zabbixmobile.api.ZabbixService._startTransaction()#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.set(<unknown>, java.lang.String)#java.lang.String.substring(int, int)#java.lang.Long.parseLong(<unknown>)#org.json.JSONObject.put(java.lang.String, java.lang.String)#org.json.JSONObject.getInt(java.lang.String)#java.lang.String.equals(java.lang.String)#<unknown>.set(<unknown>, <unknown>)#<unknown>.set(<unknown>, <unknown>)#java.security.KeyStore.getInstance(java.lang.String)#java.lang.Integer.parseInt(<unknown>)#java.lang.String.equals(java.lang.String)#<unknown>.nextProperty()#android.content.Intent.putExtra(java.lang.String, java.lang.String)#com.inovex.zabbixmobile.api.ZabbixService.isCached(<unknown>, null)#<unknown>.set(<unknown>, int)#java.io.BufferedReader.BufferedReader(java.io.InputStreamReader)#com.inovex.zabbixmobile.api.ZabbixService.importEvents(com.inovex.zabbixmobile.api.JsonArrayOrObjectReader, int)#java.security.KeyStore.getDefaultType()#java.lang.String.equals(<unknown>)#<unknown>.getText()#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.set(<unknown>, java.lang.Object)#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.insert(android.database.sqlite.SQLiteDatabase)#<unknown>.nextProperty()#com.inovex.zabbixmobile.api.ZabbixService._startTransaction()#org.json.JSONObject.put(java.lang.String, java.lang.String)#<unknown>.close()#<unknown>.insert(android.database.sqlite.SQLiteDatabase, <unknown>)#org.json.JSONObject.put(java.lang.String, long)#com.inovex.zabbixmobile.api.ZabbixService.setCached(<unknown>, null, int)#<unknown>.getJsonArray()#<unknown>.set(<unknown>, <unknown>)#java.lang.String.equals(<unknown>)#org.apache.http.conn.scheme.Scheme.Scheme(java.lang.String, org.apache.http.conn.scheme.PlainSocketFactory, int)#org.json.JSONObject.put(java.lang.String, java.lang.String)#java.lang.String.equals(<unknown>)",
      "p_body_t": ["<empty>"],
      "c_patch_t": [" \tpublic class ZabbixConfig {\n \t\tpublic static final int APPLICATION_GET_LIMIT = 1000;\n \t\tpublic static final int EVENTS_GET_LIMIT = 60;\n-\t\tpublic static final int HISTORY_GET_TIME_FROM_SHIFT = 8*60*60; // -8h\n+\t\tpublic static final int HISTORY_GET_TIME_FROM_SHIFT = 24*60*60; // -24h\n \t\tpublic static final int HISTORY_GET_LIMIT = 8000;\n \t\tpublic static final int HOSTGROUP_GET_LIMIT = 200;\n \t\tpublic static final int HOST_GET_LIMIT = 300;\n@@ -172,6 +172,11 @@ public class ZabbixService {\n \tprivate int transformProgressEnd;\n \tprivate boolean _notAuthorizedRetry;\n \tprivate boolean isVersion2 = true;\n+\t/**\n+\t * The API version. From 1.8.3 (maybe earlier) to 2.0 (excluded), this was 1.3. With 2.0, it changed to 1.4. \n+\t * Finally, since 2.0.4, the API version matches the program version.\n+\t */\n+\tprivate String apiVersion = \"\";\n \n \t/**\n \t * init\n@@ -499,8 +504,9 @@ public class ZabbixService {\n \t\t\t\t\t\"apiinfo.version\"\n \t\t\t\t\t, new JSONObject()\n \t\t\t);\n-\t\t\tisVersion2 = result.getString(\"result\").equals(\"1.4\");\n-\t\t\tLog.i(\"ZabbixService\", \"Zabbix Server Version: isVersion2=\"+isVersion2);\n+\t\t\tapiVersion = result.getString(\"result\");\n+\t\t\tisVersion2 = (apiVersion.equals(\"1.4\") || apiVersion.startsWith(\"2\"));\n+\t\t\tLog.i(\"ZabbixService\", \"Zabbix API Version: \" + apiVersion);\n \t\t}\n \t\treturn token != null;\n \t}\n@@ -802,7 +808,7 @@ public class ZabbixService {\n \n \t\t\t// the past 2 hours\n \t\t\tlong time_till = new Date().getTime() / 1000;\n-\t\t\tlong time_from = time_till - ZabbixConfig.HISTORY_GET_TIME_FROM_SHIFT; // jetzt-2h\n+\t\t\tlong time_from = time_till - ZabbixConfig.HISTORY_GET_TIME_FROM_SHIFT;\n \n \t\t\t// Workaround: historydetails only comes if you use the correct \"history\"-parameter.\n \t\t\t// this parameter can be \"null\" or a number 0-4. Because we don't know when to use which,"],
      "c_body_t": ["<empty>"],
      "c_email_sni": "jschamburger@inovex.de",
      "p_patch_t": [" \t */\n \tpublic void importTriggers() throws JSONException, IOException, HttpAuthorizationRequiredException, NoAPIAccessException, PreconditionFailedException {\n \t\tif (!isCached(TriggerData.TABLE_NAME, null)) {\n+\t\t\t// clear triggers\n+\t\t\tzabbixLocalDB.delete(TriggerData.TABLE_NAME, null, null);\n+\n \t\t\t_startTransaction();\n \n \t\t\tlong min = (new Date().getTime()/1000)-ZabbixConfig.STATUS_SHOW_TRIGGER_TIME;"],
      "repo_sni": "inovex/zax",
      "_version_": 1526823823713763328,
      "c_user_sni": "Johannes Schamburger",
      "c_callsites_added_cs": "java.lang.String.startsWith(java.lang.String)",
      "p_parents_ss": ["df53c588a80d246f2f77494f72b9fc4b285728ad"],
      "p_user_sni": "Jonas Gehring",
      "c_subject_t": ["- libraries are now in libs folder (as suggested by the Android documentation) - removed references to the source code of other projects - corrected distinction between API version 1.3, 1.4 and 2.x - enlarged time range of item history details - small bugfixes in main.xml and main_tablet.xml - compatibility with latest GraphView library"],
      "c_imports_added_cs": "<empty>",
      "c_callsites_removed_cs": "<empty>"
    }, {
      "c_patch_no_context_t": ["-\t\tonSongFinished(PlayerHater.FINISH_SKIP_BUTTON);\n+\t\tonSongFinished(nowPlaying(), PlayerHater.FINISH_SKIP_BUTTON);\n+\tpublic void enqueue(int position, Song song) {\n+\t\tgetQueue().addSongAtPosition(song, position);\n+\t}\n+\n+\t@Override\n-\t\tonSongFinished(PlayerHater.FINISH_SKIP_BUTTON);\n-\t\treturn getQueue().skipTo(position);\n+\t\tonSongFinished(nowPlaying(), PlayerHater.FINISH_SKIP_BUTTON);\n+\t\tif (getQueue().skipTo(position)) {\n+\t\t\treturn true;\n+\t\t} else {\n+\t\t\tcommitTransaction();\n+\t\t\treturn false;\n+\t\t}\n-\t\tonSongFinished(PlayerHater.FINISH_SKIP_BUTTON);\n+\t\tonSongFinished(nowPlaying(), PlayerHater.FINISH_SKIP_BUTTON);\n-\t\t\tonSongFinished(PlayerHater.FINISH_SKIP_BUTTON);\n+\t\t\tonSongFinished(nowPlaying(), PlayerHater.FINISH_SKIP_BUTTON);\n-\t\treturn getQueue().getPosition() + (isPlaying() ? 1 : 0);\n+\t\treturn getQueue().getPosition() + (getCurrentPosition() > 0 ? 1 : 0);\n-\t\tonSongChanged();\n+\t\tonSongChanged(nowPlaying);\n-\t\tonNextSongChanged();\n+\t\tonNextSongChanged(nextSong);\n-\t\t\tonSongFinished(PlayerHater.FINISH_SONG_END);\n+\t\t\tonSongFinished(nowPlaying(), PlayerHater.FINISH_SONG_END);\n-\t\t\tonSongFinished(PlayerHater.FINISH_ERROR);\n+\t\t\tonSongFinished(nowPlaying(), PlayerHater.FINISH_ERROR);"],
      "p_patch_no_context_t": ["-\t\tif (peekMediaPlayer() != null) {\n-\t\t\tmMediaPlayerPool.recycle(peekMediaPlayer(), was == null ? null\n-\t\t\t\t\t: was.getUri());\n-\t\t}\n+\t\tmMediaPlayerPool.recycle(peekMediaPlayer());\n-\t\t\tSynchronousPlayer player = peekMediaPlayer();\n+\t\t\tmMediaPlayerPool.recycle(peekMediaPlayer());\n-\t\t\tmMediaPlayerPool.recycle(player, nowPlaying().getUri());\n-\t\t\tSynchronousPlayer player = peekMediaPlayer();\n+\t\t\tmMediaPlayerPool.recycle(peekMediaPlayer());\n-\t\t\tmMediaPlayerPool.recycle(player, nowPlaying().getUri());"],
      "c_date_tdt": "Jun 5, 2013 7:19:33 AM",
      "c_imports_t": ["org.prx.playerhater.songs.SongQueue org.prx.playerhater.service.PlayerHaterService android.media.MediaPlayer.OnCompletionListener org.prx.playerhater.mediaplayer.SynchronousPlayer org.prx.playerhater.songs.SongQueue.OnQueuedSongsChangedListener android.media.MediaPlayer.OnErrorListener android.media.MediaPlayer org.prx.playerhater.mediaplayer.MediaPlayerPool"],
      "c_contents_t": ["/*******************************************************************************\n * Copyright 2013 Chris Rhoden, Rebecca Nesson, Public Radio Exchange\n * \n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * \n *   http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n ******************************************************************************/\n\npackage org.prx.playerhater;\n\nimport org.prx.playerhater.mediaplayer.MediaPlayerPool;\nimport org.prx.playerhater.mediaplayer.SynchronousPlayer;\nimport org.prx.playerhater.service.PlayerHaterService;\nimport org.prx.playerhater.songs.SongQueue;\nimport org.prx.playerhater.songs.SongQueue.OnQueuedSongsChangedListener;\n\nimport android.media.MediaPlayer;\nimport android.media.MediaPlayer.OnCompletionListener;\nimport android.media.MediaPlayer.OnErrorListener;\n\npublic class PlaybackService extends PlayerHaterService implements\n\t\tOnQueuedSongsChangedListener, OnErrorListener, OnCompletionListener {\n\n\tprivate MediaPlayerPool mMediaPlayerPool;\n\n\t@Override\n\tpublic void onCreate() {\n\t\tsuper.onCreate();\n\t\tmMediaPlayerPool = new MediaPlayerPool();\n\t}\n\n\t@Override\n\tpublic void onDestroy() {\n\t\tmMediaPlayerPool.release();\n\t\tsuper.onDestroy();\n\t}\n\n\t@Override\n\tpublic boolean play(Song song, int startTime) {\n\t\tonSongFinished(nowPlaying(), PlayerHater.FINISH_SKIP_BUTTON);\n\t\tonNowPlayingChanged(song, nowPlaying());\n\t\tgetQueue().appendAndSkip(song);\n\t\tseekTo(startTime);\n\t\treturn play();\n\t}\n\n\t@Override\n\tpublic boolean seekTo(int startTime) {\n\t\tgetMediaPlayer().seekTo(startTime);\n\t\treturn true;\n\t}\n\n\t@Override\n\tpublic int enqueue(Song song) {\n\t\tint q = getQueue().appendSong(song);\n\t\treturn q;\n\t}\n\n\t@Override\n\tpublic void enqueue(int position, Song song) {\n\t\tgetQueue().addSongAtPosition(song, position);\n\t}\n\n\t@Override\n\tpublic boolean skipTo(int position) {\n\t\tstartTransaction();\n\t\tonSongFinished(nowPlaying(), PlayerHater.FINISH_SKIP_BUTTON);\n\t\tif (getQueue().skipTo(position)) {\n\t\t\treturn true;\n\t\t} else {\n\t\t\tcommitTransaction();\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t@Override\n\tpublic void skip() {\n\t\tstartTransaction();\n\t\tonSongFinished(nowPlaying(), PlayerHater.FINISH_SKIP_BUTTON);\n\t\tgetQueue().next();\n\t}\n\n\t@Override\n\tpublic void skipBack() {\n\t\tif (getCurrentPosition() < 2000) {\n\t\t\tstartTransaction();\n\t\t\tonSongFinished(nowPlaying(), PlayerHater.FINISH_SKIP_BUTTON);\n\t\t\tgetQueue().back();\n\t\t} else {\n\t\t\tseekTo(0);\n\t\t}\n\t}\n\n\t@Override\n\tpublic void emptyQueue() {\n\t\tgetQueue().empty();\n\t}\n\n\t@Override\n\tpublic Song nowPlaying() {\n\t\treturn getQueue().getNowPlaying();\n\t}\n\n\tprivate SongQueue mQueue;\n\n\tprivate SongQueue getQueue() {\n\t\tif (mQueue == null) {\n\t\t\tmQueue = new SongQueue();\n\t\t\tmQueue.setQueuedSongsChangedListener(this);\n\t\t}\n\t\treturn mQueue;\n\t}\n\n\t@Override\n\tpublic int getQueueLength() {\n\t\treturn getQueue().size();\n\t}\n\n\t@Override\n\tpublic int getQueuePosition() {\n\t\treturn getQueue().getPosition() + (getCurrentPosition() > 0 ? 1 : 0);\n\t}\n\n\t@Override\n\tpublic boolean removeFromQueue(int position) {\n\t\treturn getQueue().remove(position);\n\t}\n\n\t@Override\n\tpublic void onNowPlayingChanged(Song nowPlaying, Song was) {\n\t\tstartTransaction();\n\t\tmMediaPlayerPool.recycle(peekMediaPlayer());\n\t\tif (nowPlaying == null) {\n\t\t\tsetMediaPlayer(null);\n\t\t} else {\n\t\t\tsetMediaPlayer(mMediaPlayerPool.getPlayer(getApplicationContext(),\n\t\t\t\t\tnowPlaying.getUri()));\n\t\t\tif (isPlaying()) {\n\t\t\t\tgetMediaPlayer().start();\n\t\t\t}\n\t\t}\n\t\tcommitTransaction();\n\t\tonSongChanged(nowPlaying);\n\t}\n\n\t@Override\n\tpublic void onNextSongChanged(Song nextSong, Song was) {\n\t\tif (nextSong != null) {\n\t\t\tmMediaPlayerPool\n\t\t\t\t\t.prepare(getApplicationContext(), nextSong.getUri());\n\t\t}\n\t\tonNextSongChanged(nextSong);\n\t}\n\n\t@Override\n\tpublic void onCompletion(MediaPlayer mp) {\n\t\tif (peekMediaPlayer() != null && peekMediaPlayer().equals(mp)) {\n\t\t\tstartTransaction();\n\t\t\tmMediaPlayerPool.recycle(peekMediaPlayer());\n\t\t\tsetMediaPlayer(null);\n\t\t\tonSongFinished(nowPlaying(), PlayerHater.FINISH_SONG_END);\n\t\t\tgetQueue().next();\n\t\t}\n\t}\n\n\t@Override\n\tpublic boolean onError(MediaPlayer mp, int what, int extra) {\n\t\tif (peekMediaPlayer() != null && peekMediaPlayer().equals(mp)) {\n\t\t\tstartTransaction();\n\t\t\tmMediaPlayerPool.recycle(peekMediaPlayer());\n\t\t\tsetMediaPlayer(null);\n\t\t\tonSongFinished(nowPlaying(), PlayerHater.FINISH_ERROR);\n\t\t\tgetQueue().next();\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\t@Override\n\tpublic Song getNextSong() {\n\t\treturn getQueue().getNextPlaying();\n\t}\n\n\t@Override\n\tprotected void setMediaPlayer(SynchronousPlayer mediaPlayer) {\n\t\tSynchronousPlayer oldPlayer = peekMediaPlayer();\n\t\tif (oldPlayer != null) {\n\t\t\toldPlayer.setOnErrorListener(null);\n\t\t\toldPlayer.setOnCompletionListener(null);\n\t\t}\n\t\tsuper.setMediaPlayer(mediaPlayer);\n\t\tif (mediaPlayer != null) {\n\t\t\tmediaPlayer.setOnErrorListener(this);\n\t\t\tmediaPlayer.setOnCompletionListener(this);\n\t\t}\n\t}\n}\n"],
      "p_date_tdt": "Jun 4, 2013 11:08:28 AM",
      "c_comments_t": ["<empty>"],
      "p_contents_t": ["/*******************************************************************************\n * Copyright 2013 Chris Rhoden, Rebecca Nesson, Public Radio Exchange\n * \n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * \n *   http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n ******************************************************************************/\n\npackage org.prx.playerhater;\n\nimport org.prx.playerhater.mediaplayer.MediaPlayerPool;\nimport org.prx.playerhater.mediaplayer.SynchronousPlayer;\nimport org.prx.playerhater.service.PlayerHaterService;\nimport org.prx.playerhater.songs.SongQueue;\nimport org.prx.playerhater.songs.SongQueue.OnQueuedSongsChangedListener;\n\nimport android.media.MediaPlayer;\nimport android.media.MediaPlayer.OnCompletionListener;\nimport android.media.MediaPlayer.OnErrorListener;\n\npublic class PlaybackService extends PlayerHaterService implements\n\t\tOnQueuedSongsChangedListener, OnErrorListener, OnCompletionListener {\n\n\tprivate MediaPlayerPool mMediaPlayerPool;\n\n\t@Override\n\tpublic void onCreate() {\n\t\tsuper.onCreate();\n\t\tmMediaPlayerPool = new MediaPlayerPool();\n\t}\n\n\t@Override\n\tpublic void onDestroy() {\n\t\tmMediaPlayerPool.release();\n\t\tsuper.onDestroy();\n\t}\n\n\t@Override\n\tpublic boolean play(Song song, int startTime) {\n\t\tonSongFinished(PlayerHater.FINISH_SKIP_BUTTON);\n\t\tonNowPlayingChanged(song, nowPlaying());\n\t\tgetQueue().appendAndSkip(song);\n\t\tseekTo(startTime);\n\t\treturn play();\n\t}\n\n\t@Override\n\tpublic boolean seekTo(int startTime) {\n\t\tgetMediaPlayer().seekTo(startTime);\n\t\treturn true;\n\t}\n\n\t@Override\n\tpublic int enqueue(Song song) {\n\t\tint q = getQueue().appendSong(song);\n\t\treturn q;\n\t}\n\n\t@Override\n\tpublic boolean skipTo(int position) {\n\t\tstartTransaction();\n\t\tonSongFinished(PlayerHater.FINISH_SKIP_BUTTON);\n\t\treturn getQueue().skipTo(position);\n\t}\n\n\t@Override\n\tpublic void skip() {\n\t\tstartTransaction();\n\t\tonSongFinished(PlayerHater.FINISH_SKIP_BUTTON);\n\t\tgetQueue().next();\n\t}\n\n\t@Override\n\tpublic void skipBack() {\n\t\tif (getCurrentPosition() < 2000) {\n\t\t\tstartTransaction();\n\t\t\tonSongFinished(PlayerHater.FINISH_SKIP_BUTTON);\n\t\t\tgetQueue().back();\n\t\t} else {\n\t\t\tseekTo(0);\n\t\t}\n\t}\n\n\t@Override\n\tpublic void emptyQueue() {\n\t\tgetQueue().empty();\n\t}\n\n\t@Override\n\tpublic Song nowPlaying() {\n\t\treturn getQueue().getNowPlaying();\n\t}\n\n\tprivate SongQueue mQueue;\n\n\tprivate SongQueue getQueue() {\n\t\tif (mQueue == null) {\n\t\t\tmQueue = new SongQueue();\n\t\t\tmQueue.setQueuedSongsChangedListener(this);\n\t\t}\n\t\treturn mQueue;\n\t}\n\n\t@Override\n\tpublic int getQueueLength() {\n\t\treturn getQueue().size();\n\t}\n\n\t@Override\n\tpublic int getQueuePosition() {\n\t\treturn getQueue().getPosition() + (isPlaying() ? 1 : 0);\n\t}\n\n\t@Override\n\tpublic boolean removeFromQueue(int position) {\n\t\treturn getQueue().remove(position);\n\t}\n\n\t@Override\n\tpublic void onNowPlayingChanged(Song nowPlaying, Song was) {\n\t\tstartTransaction();\n\t\tmMediaPlayerPool.recycle(peekMediaPlayer());\n\t\tif (nowPlaying == null) {\n\t\t\tsetMediaPlayer(null);\n\t\t} else {\n\t\t\tsetMediaPlayer(mMediaPlayerPool.getPlayer(getApplicationContext(),\n\t\t\t\t\tnowPlaying.getUri()));\n\t\t\tif (isPlaying()) {\n\t\t\t\tgetMediaPlayer().start();\n\t\t\t}\n\t\t}\n\t\tcommitTransaction();\n\t\tonSongChanged();\n\t}\n\n\t@Override\n\tpublic void onNextSongChanged(Song nextSong, Song was) {\n\t\tif (nextSong != null) {\n\t\t\tmMediaPlayerPool\n\t\t\t\t\t.prepare(getApplicationContext(), nextSong.getUri());\n\t\t}\n\t\tonNextSongChanged();\n\t}\n\n\t@Override\n\tpublic void onCompletion(MediaPlayer mp) {\n\t\tif (peekMediaPlayer() != null && peekMediaPlayer().equals(mp)) {\n\t\t\tstartTransaction();\n\t\t\tmMediaPlayerPool.recycle(peekMediaPlayer());\n\t\t\tsetMediaPlayer(null);\n\t\t\tonSongFinished(PlayerHater.FINISH_SONG_END);\n\t\t\tgetQueue().next();\n\t\t}\n\t}\n\n\t@Override\n\tpublic boolean onError(MediaPlayer mp, int what, int extra) {\n\t\tif (peekMediaPlayer() != null && peekMediaPlayer().equals(mp)) {\n\t\t\tstartTransaction();\n\t\t\tmMediaPlayerPool.recycle(peekMediaPlayer());\n\t\t\tsetMediaPlayer(null);\n\t\t\tonSongFinished(PlayerHater.FINISH_ERROR);\n\t\t\tgetQueue().next();\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\t@Override\n\tpublic Song getNextSong() {\n\t\treturn getQueue().getNextPlaying();\n\t}\n\n\t@Override\n\tprotected void setMediaPlayer(SynchronousPlayer mediaPlayer) {\n\t\tSynchronousPlayer oldPlayer = peekMediaPlayer();\n\t\tif (oldPlayer != null) {\n\t\t\toldPlayer.setOnErrorListener(null);\n\t\t\toldPlayer.setOnCompletionListener(null);\n\t\t}\n\t\tsuper.setMediaPlayer(mediaPlayer);\n\t\tif (mediaPlayer != null) {\n\t\t\tmediaPlayer.setOnErrorListener(this);\n\t\t\tmediaPlayer.setOnCompletionListener(this);\n\t\t}\n\t}\n}\n"],
      "c_hash_sni": "9e97d3f64b77342df67e00a029e5b35851ed7afa",
      "name_sni": "src/main/java/org/prx/playerhater/PlaybackService.java",
      "c_parents_ss": ["3eec6bb02717a9a34fd618ca7c0a107f96552477"],
      "c_imports_removed_t": ["<empty>"],
      "p_hash_sni": "3eec6bb02717a9a34fd618ca7c0a107f96552477",
      "c_imports_added_t": ["<empty>"],
      "p_methods_t": ["MediaPlayerPool SongQueue appendAndSkip appendSong back commitTransaction empty equals getApplicationContext getCurrentPosition getMediaPlayer getNextPlaying getNowPlaying getPlayer getPosition getQueue getUri isPlaying next nowPlaying onNextSongChanged onNowPlayingChanged onSongChanged onSongFinished peekMediaPlayer play prepare recycle release remove seekTo setMediaPlayer setOnCompletionListener setOnErrorListener setQueuedSongsChangedListener size skipTo start startTransaction"],
      "c_imports_removed_cs": "<empty>",
      "p_imports_t": ["org.prx.playerhater.songs.SongQueue org.prx.playerhater.service.PlayerHaterService android.media.MediaPlayer.OnCompletionListener org.prx.playerhater.mediaplayer.SynchronousPlayer org.prx.playerhater.songs.SongQueue.OnQueuedSongsChangedListener android.media.MediaPlayer.OnErrorListener android.media.MediaPlayer org.prx.playerhater.mediaplayer.MediaPlayerPool"],
      "p_subject_t": ["fixes"],
      "p_callsites_cs": "<unknown>.peekMediaPlayer()#<unknown>.setOnErrorListener(null)#<unknown>.recycle(<unknown>)#<unknown>.recycle(<unknown>)#org.prx.playerhater.PlaybackService.setMediaPlayer(null)#<unknown>.remove(int)#org.prx.playerhater.PlaybackService.getQueue()#<unknown>.setQueuedSongsChangedListener(org.prx.playerhater.PlaybackService)#<unknown>.SongQueue()#<unknown>.next()#<unknown>.next()#<unknown>.onSongFinished(<unknown>)#<unknown>.getMediaPlayer()#<unknown>.equals(android.media.MediaPlayer)#<unknown>.peekMediaPlayer()#<unknown>.setOnCompletionListener(org.prx.playerhater.PlaybackService)#org.prx.playerhater.PlaybackService.getQueue()#<unknown>.recycle(<unknown>)#<unknown>.onSongFinished(<unknown>)#<unknown>.next()#<unknown>.release()#<unknown>.startTransaction()#org.prx.playerhater.PlaybackService.getQueue()#org.prx.playerhater.PlaybackService.setMediaPlayer(null)#org.prx.playerhater.PlaybackService.onNowPlayingChanged(org.prx.playerhater.Song, org.prx.playerhater.Song)#org.prx.playerhater.PlaybackService.getQueue()#<unknown>.setOnErrorListener(org.prx.playerhater.PlaybackService)#org.prx.playerhater.PlaybackService.setMediaPlayer(<unknown>)#<unknown>.onSongFinished(<unknown>)#<unknown>.skipTo(int)#org.prx.playerhater.PlaybackService.onNextSongChanged()#org.prx.playerhater.PlaybackService.play()#<unknown>.appendSong(org.prx.playerhater.Song)#<unknown>.onSongFinished(<unknown>)#org.prx.playerhater.PlaybackService.getQueue()#org.prx.playerhater.PlaybackService.setMediaPlayer(null)#<unknown>.seekTo(int)#<unknown>.startTransaction()#org.prx.playerhater.PlaybackService.getQueue()#org.prx.playerhater.PlaybackService.getQueue()#<unknown>.startTransaction()#org.prx.playerhater.PlaybackService.getQueue()#<unknown>.start()#<unknown>.onSongChanged()#<unknown>.isPlaying()#<unknown>.getNextPlaying()#<unknown>.size()#<unknown>.commitTransaction()#<unknown>.startTransaction()#<unknown>.MediaPlayerPool()#<unknown>.getApplicationContext()#<unknown>.appendAndSkip(org.prx.playerhater.Song)#org.prx.playerhater.PlaybackService.getQueue()#org.prx.playerhater.PlaybackService.nowPlaying()#<unknown>.startTransaction()#<unknown>.peekMediaPlayer()#<unknown>.peekMediaPlayer()#org.prx.playerhater.PlaybackService.getQueue()#org.prx.playerhater.PlaybackService.getQueue()#<unknown>.getApplicationContext()#org.prx.playerhater.PlaybackService.seekTo(int)#<unknown>.empty()#org.prx.playerhater.PlaybackService.seekTo(int)#<unknown>.prepare(<unknown>, <unknown>)#<unknown>.onSongFinished(<unknown>)#<unknown>.equals(android.media.MediaPlayer)#<unknown>.getCurrentPosition()#<unknown>.getMediaPlayer()#<unknown>.getUri()#org.prx.playerhater.PlaybackService.getQueue()#<unknown>.onSongFinished(<unknown>)#<unknown>.isPlaying()#org.prx.playerhater.PlaybackService.getQueue()#<unknown>.getUri()#<unknown>.getNowPlaying()#<unknown>.back()#<unknown>.getPosition()#<unknown>.getPlayer(<unknown>, <unknown>)#<unknown>.setOnCompletionListener(null)#<unknown>.startTransaction()",
      "p_callsites_t": ["<unknown>.peekMediaPlayer() <unknown>.setOnErrorListener(null) <unknown>.recycle(<unknown>) <unknown>.recycle(<unknown>) org.prx.playerhater.PlaybackService.setMediaPlayer(null) <unknown>.remove(int) org.prx.playerhater.PlaybackService.getQueue() <unknown>.setQueuedSongsChangedListener(org.prx.playerhater.PlaybackService) <unknown>.SongQueue() <unknown>.next() <unknown>.next() <unknown>.onSongFinished(<unknown>) <unknown>.getMediaPlayer() <unknown>.equals(android.media.MediaPlayer) <unknown>.peekMediaPlayer() <unknown>.setOnCompletionListener(org.prx.playerhater.PlaybackService) org.prx.playerhater.PlaybackService.getQueue() <unknown>.recycle(<unknown>) <unknown>.onSongFinished(<unknown>) <unknown>.next() <unknown>.release() <unknown>.startTransaction() org.prx.playerhater.PlaybackService.getQueue() org.prx.playerhater.PlaybackService.setMediaPlayer(null) org.prx.playerhater.PlaybackService.onNowPlayingChanged(org.prx.playerhater.Song, org.prx.playerhater.Song) org.prx.playerhater.PlaybackService.getQueue() <unknown>.setOnErrorListener(org.prx.playerhater.PlaybackService) org.prx.playerhater.PlaybackService.setMediaPlayer(<unknown>) <unknown>.onSongFinished(<unknown>) <unknown>.skipTo(int) org.prx.playerhater.PlaybackService.onNextSongChanged() org.prx.playerhater.PlaybackService.play() <unknown>.appendSong(org.prx.playerhater.Song) <unknown>.onSongFinished(<unknown>) org.prx.playerhater.PlaybackService.getQueue() org.prx.playerhater.PlaybackService.setMediaPlayer(null) <unknown>.seekTo(int) <unknown>.startTransaction() org.prx.playerhater.PlaybackService.getQueue() org.prx.playerhater.PlaybackService.getQueue() <unknown>.startTransaction() org.prx.playerhater.PlaybackService.getQueue() <unknown>.start() <unknown>.onSongChanged() <unknown>.isPlaying() <unknown>.getNextPlaying() <unknown>.size() <unknown>.commitTransaction() <unknown>.startTransaction() <unknown>.MediaPlayerPool() <unknown>.getApplicationContext() <unknown>.appendAndSkip(org.prx.playerhater.Song) org.prx.playerhater.PlaybackService.getQueue() org.prx.playerhater.PlaybackService.nowPlaying() <unknown>.startTransaction() <unknown>.peekMediaPlayer() <unknown>.peekMediaPlayer() org.prx.playerhater.PlaybackService.getQueue() org.prx.playerhater.PlaybackService.getQueue() <unknown>.getApplicationContext() org.prx.playerhater.PlaybackService.seekTo(int) <unknown>.empty() org.prx.playerhater.PlaybackService.seekTo(int) <unknown>.prepare(<unknown>, <unknown>) <unknown>.onSongFinished(<unknown>) <unknown>.equals(android.media.MediaPlayer) <unknown>.getCurrentPosition() <unknown>.getMediaPlayer() <unknown>.getUri() org.prx.playerhater.PlaybackService.getQueue() <unknown>.onSongFinished(<unknown>) <unknown>.isPlaying() org.prx.playerhater.PlaybackService.getQueue() <unknown>.getUri() <unknown>.getNowPlaying() <unknown>.back() <unknown>.getPosition() <unknown>.getPlayer(<unknown>, <unknown>) <unknown>.setOnCompletionListener(null) <unknown>.startTransaction()"],
      "c_callsites_t": ["<unknown>.peekMediaPlayer() <unknown>.setOnErrorListener(null) <unknown>.recycle(<unknown>) <unknown>.recycle(<unknown>) org.prx.playerhater.PlaybackService.setMediaPlayer(null) <unknown>.remove(int) org.prx.playerhater.PlaybackService.getQueue() <unknown>.setQueuedSongsChangedListener(org.prx.playerhater.PlaybackService) <unknown>.SongQueue() <unknown>.onSongFinished(org.prx.playerhater.Song, <unknown>) org.prx.playerhater.PlaybackService.nowPlaying() <unknown>.commitTransaction() <unknown>.next() <unknown>.next() <unknown>.getMediaPlayer() <unknown>.equals(android.media.MediaPlayer) <unknown>.peekMediaPlayer() <unknown>.onSongFinished(org.prx.playerhater.Song, <unknown>) <unknown>.setOnCompletionListener(org.prx.playerhater.PlaybackService) org.prx.playerhater.PlaybackService.getQueue() <unknown>.recycle(<unknown>) org.prx.playerhater.PlaybackService.onNextSongChanged(org.prx.playerhater.Song) <unknown>.next() <unknown>.release() <unknown>.addSongAtPosition(org.prx.playerhater.Song, int) org.prx.playerhater.PlaybackService.getQueue() <unknown>.startTransaction() org.prx.playerhater.PlaybackService.setMediaPlayer(null) org.prx.playerhater.PlaybackService.onNowPlayingChanged(org.prx.playerhater.Song, org.prx.playerhater.Song) org.prx.playerhater.PlaybackService.getQueue() <unknown>.setOnErrorListener(org.prx.playerhater.PlaybackService) org.prx.playerhater.PlaybackService.setMediaPlayer(<unknown>) org.prx.playerhater.PlaybackService.nowPlaying() <unknown>.skipTo(int) <unknown>.onSongFinished(org.prx.playerhater.Song, <unknown>) org.prx.playerhater.PlaybackService.play() <unknown>.appendSong(org.prx.playerhater.Song) <unknown>.getCurrentPosition() org.prx.playerhater.PlaybackService.setMediaPlayer(null) org.prx.playerhater.PlaybackService.getQueue() <unknown>.seekTo(int) <unknown>.startTransaction() org.prx.playerhater.PlaybackService.getQueue() org.prx.playerhater.PlaybackService.getQueue() <unknown>.startTransaction() org.prx.playerhater.PlaybackService.getQueue() <unknown>.start() org.prx.playerhater.PlaybackService.nowPlaying() <unknown>.onSongFinished(org.prx.playerhater.Song, <unknown>) <unknown>.isPlaying() <unknown>.getNextPlaying() <unknown>.size() <unknown>.commitTransaction() <unknown>.startTransaction() org.prx.playerhater.PlaybackService.nowPlaying() <unknown>.MediaPlayerPool() <unknown>.getApplicationContext() <unknown>.appendAndSkip(org.prx.playerhater.Song) org.prx.playerhater.PlaybackService.getQueue() org.prx.playerhater.PlaybackService.nowPlaying() <unknown>.onSongFinished(org.prx.playerhater.Song, <unknown>) <unknown>.peekMediaPlayer() <unknown>.startTransaction() org.prx.playerhater.PlaybackService.nowPlaying() <unknown>.peekMediaPlayer() org.prx.playerhater.PlaybackService.getQueue() org.prx.playerhater.PlaybackService.getQueue() <unknown>.getApplicationContext() org.prx.playerhater.PlaybackService.seekTo(int) <unknown>.empty() org.prx.playerhater.PlaybackService.seekTo(int) <unknown>.prepare(<unknown>, <unknown>) <unknown>.equals(android.media.MediaPlayer) <unknown>.getCurrentPosition() <unknown>.getMediaPlayer() <unknown>.getUri() org.prx.playerhater.PlaybackService.getQueue() <unknown>.onSongFinished(org.prx.playerhater.Song, <unknown>) org.prx.playerhater.PlaybackService.getQueue() <unknown>.getUri() <unknown>.getNowPlaying() <unknown>.back() <unknown>.getPosition() <unknown>.getPlayer(<unknown>, <unknown>) <unknown>.onSongChanged(org.prx.playerhater.Song) <unknown>.startTransaction() <unknown>.setOnCompletionListener(null)"],
      "c_callsites_added_t": ["<unknown>.onSongFinished(org.prx.playerhater.Song, <unknown>) <unknown>.onSongFinished(org.prx.playerhater.Song, <unknown>) org.prx.playerhater.PlaybackService.onNextSongChanged(org.prx.playerhater.Song) <unknown>.addSongAtPosition(org.prx.playerhater.Song, int) org.prx.playerhater.PlaybackService.nowPlaying() <unknown>.onSongFinished(org.prx.playerhater.Song, <unknown>) org.prx.playerhater.PlaybackService.nowPlaying() <unknown>.onSongFinished(org.prx.playerhater.Song, <unknown>) <unknown>.commitTransaction() org.prx.playerhater.PlaybackService.nowPlaying() org.prx.playerhater.PlaybackService.nowPlaying() <unknown>.onSongFinished(org.prx.playerhater.Song, <unknown>) org.prx.playerhater.PlaybackService.nowPlaying() <unknown>.getCurrentPosition() <unknown>.onSongFinished(org.prx.playerhater.Song, <unknown>) <unknown>.onSongChanged(org.prx.playerhater.Song)"],
      "c_methods_t": ["MediaPlayerPool SongQueue addSongAtPosition appendAndSkip appendSong back commitTransaction empty equals getApplicationContext getCurrentPosition getMediaPlayer getNextPlaying getNowPlaying getPlayer getPosition getQueue getUri isPlaying next nowPlaying onNextSongChanged onNowPlayingChanged onSongChanged onSongFinished peekMediaPlayer play prepare recycle release remove seekTo setMediaPlayer setOnCompletionListener setOnErrorListener setQueuedSongsChangedListener size skipTo start startTransaction"],
      "id": "chrisrhoden/PlayerHater\u0000src/main/java/org/prx/playerhater/PlaybackService.java\u00003eec6bb02717a9a34fd618ca7c0a107f96552477\u00009e97d3f64b77342df67e00a029e5b35851ed7afa",
      "p_comments_t": ["<empty>"],
      "p_email_sni": "carhoden@gmail.com",
      "c_callsites_removed_t": ["<unknown>.onSongFinished(<unknown>) <unknown>.onSongFinished(<unknown>) <unknown>.onSongFinished(<unknown>) org.prx.playerhater.PlaybackService.onNextSongChanged() <unknown>.onSongFinished(<unknown>) <unknown>.onSongChanged() <unknown>.onSongFinished(<unknown>) <unknown>.onSongFinished(<unknown>) <unknown>.isPlaying()"],
      "c_callsites_cs": "<unknown>.peekMediaPlayer()#<unknown>.setOnErrorListener(null)#<unknown>.recycle(<unknown>)#<unknown>.recycle(<unknown>)#org.prx.playerhater.PlaybackService.setMediaPlayer(null)#<unknown>.remove(int)#org.prx.playerhater.PlaybackService.getQueue()#<unknown>.setQueuedSongsChangedListener(org.prx.playerhater.PlaybackService)#<unknown>.SongQueue()#<unknown>.onSongFinished(org.prx.playerhater.Song, <unknown>)#org.prx.playerhater.PlaybackService.nowPlaying()#<unknown>.commitTransaction()#<unknown>.next()#<unknown>.next()#<unknown>.getMediaPlayer()#<unknown>.equals(android.media.MediaPlayer)#<unknown>.peekMediaPlayer()#<unknown>.onSongFinished(org.prx.playerhater.Song, <unknown>)#<unknown>.setOnCompletionListener(org.prx.playerhater.PlaybackService)#org.prx.playerhater.PlaybackService.getQueue()#<unknown>.recycle(<unknown>)#org.prx.playerhater.PlaybackService.onNextSongChanged(org.prx.playerhater.Song)#<unknown>.next()#<unknown>.release()#<unknown>.addSongAtPosition(org.prx.playerhater.Song, int)#org.prx.playerhater.PlaybackService.getQueue()#<unknown>.startTransaction()#org.prx.playerhater.PlaybackService.setMediaPlayer(null)#org.prx.playerhater.PlaybackService.onNowPlayingChanged(org.prx.playerhater.Song, org.prx.playerhater.Song)#org.prx.playerhater.PlaybackService.getQueue()#<unknown>.setOnErrorListener(org.prx.playerhater.PlaybackService)#org.prx.playerhater.PlaybackService.setMediaPlayer(<unknown>)#org.prx.playerhater.PlaybackService.nowPlaying()#<unknown>.skipTo(int)#<unknown>.onSongFinished(org.prx.playerhater.Song, <unknown>)#org.prx.playerhater.PlaybackService.play()#<unknown>.appendSong(org.prx.playerhater.Song)#<unknown>.getCurrentPosition()#org.prx.playerhater.PlaybackService.setMediaPlayer(null)#org.prx.playerhater.PlaybackService.getQueue()#<unknown>.seekTo(int)#<unknown>.startTransaction()#org.prx.playerhater.PlaybackService.getQueue()#org.prx.playerhater.PlaybackService.getQueue()#<unknown>.startTransaction()#org.prx.playerhater.PlaybackService.getQueue()#<unknown>.start()#org.prx.playerhater.PlaybackService.nowPlaying()#<unknown>.onSongFinished(org.prx.playerhater.Song, <unknown>)#<unknown>.isPlaying()#<unknown>.getNextPlaying()#<unknown>.size()#<unknown>.commitTransaction()#<unknown>.startTransaction()#org.prx.playerhater.PlaybackService.nowPlaying()#<unknown>.MediaPlayerPool()#<unknown>.getApplicationContext()#<unknown>.appendAndSkip(org.prx.playerhater.Song)#org.prx.playerhater.PlaybackService.getQueue()#org.prx.playerhater.PlaybackService.nowPlaying()#<unknown>.onSongFinished(org.prx.playerhater.Song, <unknown>)#<unknown>.peekMediaPlayer()#<unknown>.startTransaction()#org.prx.playerhater.PlaybackService.nowPlaying()#<unknown>.peekMediaPlayer()#org.prx.playerhater.PlaybackService.getQueue()#org.prx.playerhater.PlaybackService.getQueue()#<unknown>.getApplicationContext()#org.prx.playerhater.PlaybackService.seekTo(int)#<unknown>.empty()#org.prx.playerhater.PlaybackService.seekTo(int)#<unknown>.prepare(<unknown>, <unknown>)#<unknown>.equals(android.media.MediaPlayer)#<unknown>.getCurrentPosition()#<unknown>.getMediaPlayer()#<unknown>.getUri()#org.prx.playerhater.PlaybackService.getQueue()#<unknown>.onSongFinished(org.prx.playerhater.Song, <unknown>)#org.prx.playerhater.PlaybackService.getQueue()#<unknown>.getUri()#<unknown>.getNowPlaying()#<unknown>.back()#<unknown>.getPosition()#<unknown>.getPlayer(<unknown>, <unknown>)#<unknown>.onSongChanged(org.prx.playerhater.Song)#<unknown>.startTransaction()#<unknown>.setOnCompletionListener(null)",
      "p_body_t": ["<empty>"],
      "c_patch_t": [" \n \t@Override\n \tpublic boolean play(Song song, int startTime) {\n-\t\tonSongFinished(PlayerHater.FINISH_SKIP_BUTTON);\n+\t\tonSongFinished(nowPlaying(), PlayerHater.FINISH_SKIP_BUTTON);\n \t\tonNowPlayingChanged(song, nowPlaying());\n \t\tgetQueue().appendAndSkip(song);\n \t\tseekTo(startTime);\n@@ -65,16 +65,26 @@ public class PlaybackService extends PlayerHaterService implements\n \t}\n \n \t@Override\n+\tpublic void enqueue(int position, Song song) {\n+\t\tgetQueue().addSongAtPosition(song, position);\n+\t}\n+\n+\t@Override\n \tpublic boolean skipTo(int position) {\n \t\tstartTransaction();\n-\t\tonSongFinished(PlayerHater.FINISH_SKIP_BUTTON);\n-\t\treturn getQueue().skipTo(position);\n+\t\tonSongFinished(nowPlaying(), PlayerHater.FINISH_SKIP_BUTTON);\n+\t\tif (getQueue().skipTo(position)) {\n+\t\t\treturn true;\n+\t\t} else {\n+\t\t\tcommitTransaction();\n+\t\t\treturn false;\n+\t\t}\n \t}\n \n \t@Override\n \tpublic void skip() {\n \t\tstartTransaction();\n-\t\tonSongFinished(PlayerHater.FINISH_SKIP_BUTTON);\n+\t\tonSongFinished(nowPlaying(), PlayerHater.FINISH_SKIP_BUTTON);\n \t\tgetQueue().next();\n \t}\n \n@@ -82,7 +92,7 @@ public class PlaybackService extends PlayerHaterService implements\n \tpublic void skipBack() {\n \t\tif (getCurrentPosition() < 2000) {\n \t\t\tstartTransaction();\n-\t\t\tonSongFinished(PlayerHater.FINISH_SKIP_BUTTON);\n+\t\t\tonSongFinished(nowPlaying(), PlayerHater.FINISH_SKIP_BUTTON);\n \t\t\tgetQueue().back();\n \t\t} else {\n \t\t\tseekTo(0);\n@@ -116,7 +126,7 @@ public class PlaybackService extends PlayerHaterService implements\n \n \t@Override\n \tpublic int getQueuePosition() {\n-\t\treturn getQueue().getPosition() + (isPlaying() ? 1 : 0);\n+\t\treturn getQueue().getPosition() + (getCurrentPosition() > 0 ? 1 : 0);\n \t}\n \n \t@Override\n@@ -138,7 +148,7 @@ public class PlaybackService extends PlayerHaterService implements\n \t\t\t}\n \t\t}\n \t\tcommitTransaction();\n-\t\tonSongChanged();\n+\t\tonSongChanged(nowPlaying);\n \t}\n \n \t@Override\n@@ -147,7 +157,7 @@ public class PlaybackService extends PlayerHaterService implements\n \t\t\tmMediaPlayerPool\n \t\t\t\t\t.prepare(getApplicationContext(), nextSong.getUri());\n \t\t}\n-\t\tonNextSongChanged();\n+\t\tonNextSongChanged(nextSong);\n \t}\n \n \t@Override\n@@ -156,7 +166,7 @@ public class PlaybackService extends PlayerHaterService implements\n \t\t\tstartTransaction();\n \t\t\tmMediaPlayerPool.recycle(peekMediaPlayer());\n \t\t\tsetMediaPlayer(null);\n-\t\t\tonSongFinished(PlayerHater.FINISH_SONG_END);\n+\t\t\tonSongFinished(nowPlaying(), PlayerHater.FINISH_SONG_END);\n \t\t\tgetQueue().next();\n \t\t}\n \t}\n@@ -167,7 +177,7 @@ public class PlaybackService extends PlayerHaterService implements\n \t\t\tstartTransaction();\n \t\t\tmMediaPlayerPool.recycle(peekMediaPlayer());\n \t\t\tsetMediaPlayer(null);\n-\t\t\tonSongFinished(PlayerHater.FINISH_ERROR);\n+\t\t\tonSongFinished(nowPlaying(), PlayerHater.FINISH_ERROR);\n \t\t\tgetQueue().next();\n \t\t\treturn true;\n \t\t}"],
      "c_body_t": ["<empty>"],
      "c_email_sni": "carhoden@gmail.com",
      "p_patch_t": [" \t@Override\n \tpublic void onNowPlayingChanged(Song nowPlaying, Song was) {\n \t\tstartTransaction();\n-\t\tif (peekMediaPlayer() != null) {\n-\t\t\tmMediaPlayerPool.recycle(peekMediaPlayer(), was == null ? null\n-\t\t\t\t\t: was.getUri());\n-\t\t}\n+\t\tmMediaPlayerPool.recycle(peekMediaPlayer());\n \t\tif (nowPlaying == null) {\n \t\t\tsetMediaPlayer(null);\n \t\t} else {\n@@ -157,9 +154,8 @@ public class PlaybackService extends PlayerHaterService implements\n \tpublic void onCompletion(MediaPlayer mp) {\n \t\tif (peekMediaPlayer() != null && peekMediaPlayer().equals(mp)) {\n \t\t\tstartTransaction();\n-\t\t\tSynchronousPlayer player = peekMediaPlayer();\n+\t\t\tmMediaPlayerPool.recycle(peekMediaPlayer());\n \t\t\tsetMediaPlayer(null);\n-\t\t\tmMediaPlayerPool.recycle(player, nowPlaying().getUri());\n \t\t\tonSongFinished(PlayerHater.FINISH_SONG_END);\n \t\t\tgetQueue().next();\n \t\t}\n@@ -169,9 +165,8 @@ public class PlaybackService extends PlayerHaterService implements\n \tpublic boolean onError(MediaPlayer mp, int what, int extra) {\n \t\tif (peekMediaPlayer() != null && peekMediaPlayer().equals(mp)) {\n \t\t\tstartTransaction();\n-\t\t\tSynchronousPlayer player = peekMediaPlayer();\n+\t\t\tmMediaPlayerPool.recycle(peekMediaPlayer());\n \t\t\tsetMediaPlayer(null);\n-\t\t\tmMediaPlayerPool.recycle(player, nowPlaying().getUri());\n \t\t\tonSongFinished(PlayerHater.FINISH_ERROR);\n \t\t\tgetQueue().next();\n \t\t\treturn true;"],
      "repo_sni": "chrisrhoden/PlayerHater",
      "_version_": 1526803907616964608,
      "c_user_sni": "chrisrhoden",
      "c_callsites_added_cs": "<unknown>.onSongFinished(org.prx.playerhater.Song, <unknown>)#<unknown>.onSongFinished(org.prx.playerhater.Song, <unknown>)#org.prx.playerhater.PlaybackService.onNextSongChanged(org.prx.playerhater.Song)#<unknown>.addSongAtPosition(org.prx.playerhater.Song, int)#org.prx.playerhater.PlaybackService.nowPlaying()#<unknown>.onSongFinished(org.prx.playerhater.Song, <unknown>)#org.prx.playerhater.PlaybackService.nowPlaying()#<unknown>.onSongFinished(org.prx.playerhater.Song, <unknown>)#<unknown>.commitTransaction()#org.prx.playerhater.PlaybackService.nowPlaying()#org.prx.playerhater.PlaybackService.nowPlaying()#<unknown>.onSongFinished(org.prx.playerhater.Song, <unknown>)#org.prx.playerhater.PlaybackService.nowPlaying()#<unknown>.getCurrentPosition()#<unknown>.onSongFinished(org.prx.playerhater.Song, <unknown>)#<unknown>.onSongChanged(org.prx.playerhater.Song)",
      "p_parents_ss": ["080589b32d9174c485c3d5acf959c200c6e78654"],
      "p_user_sni": "chrisrhoden",
      "c_subject_t": ["allow enqueueing at a specific position and other fixes"],
      "c_imports_added_cs": "<empty>",
      "c_callsites_removed_cs": "<unknown>.onSongFinished(<unknown>)#<unknown>.onSongFinished(<unknown>)#<unknown>.onSongFinished(<unknown>)#org.prx.playerhater.PlaybackService.onNextSongChanged()#<unknown>.onSongFinished(<unknown>)#<unknown>.onSongChanged()#<unknown>.onSongFinished(<unknown>)#<unknown>.onSongFinished(<unknown>)#<unknown>.isPlaying()"
    }, {
      "c_patch_no_context_t": ["-\tprivate MediaPlayerPool mMediaPlayerPool;\n+\tprivate MediaPlayerPool<SynchronousPlayer> mMediaPlayerPool;\n-\t\tmMediaPlayerPool = new MediaPlayerPool();\n+\t\tmMediaPlayerPool = MediaPlayerPool.getInstance(SynchronousPlayer.class);"],
      "p_patch_no_context_t": ["-"],
      "c_date_tdt": "Jun 14, 2013 12:22:13 PM",
      "c_imports_t": ["org.prx.playerhater.songs.SongQueue org.prx.playerhater.service.PlayerHaterService android.media.MediaPlayer.OnCompletionListener org.prx.playerhater.mediaplayer.SynchronousPlayer org.prx.playerhater.songs.SongQueue.OnQueuedSongsChangedListener android.media.MediaPlayer.OnErrorListener android.media.MediaPlayer org.prx.playerhater.mediaplayer.MediaPlayerPool"],
      "c_contents_t": ["/*******************************************************************************\n * Copyright 2013 Chris Rhoden, Rebecca Nesson, Public Radio Exchange\n * \n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * \n *   http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n ******************************************************************************/\npackage org.prx.playerhater;\n\nimport org.prx.playerhater.mediaplayer.MediaPlayerPool;\nimport org.prx.playerhater.mediaplayer.SynchronousPlayer;\nimport org.prx.playerhater.service.PlayerHaterService;\nimport org.prx.playerhater.songs.SongQueue;\nimport org.prx.playerhater.songs.SongQueue.OnQueuedSongsChangedListener;\n\nimport android.media.MediaPlayer;\nimport android.media.MediaPlayer.OnCompletionListener;\nimport android.media.MediaPlayer.OnErrorListener;\n\npublic class PlaybackService extends PlayerHaterService implements\n\t\tOnQueuedSongsChangedListener, OnErrorListener, OnCompletionListener {\n\n\tprivate MediaPlayerPool<SynchronousPlayer> mMediaPlayerPool;\n\n\t@Override\n\tpublic void onCreate() {\n\t\tsuper.onCreate();\n\t\tmMediaPlayerPool = MediaPlayerPool.getInstance(SynchronousPlayer.class);\n\t}\n\n\t@Override\n\tpublic void onDestroy() {\n\t\tmMediaPlayerPool.release();\n\t\tsuper.onDestroy();\n\t}\n\n\t@Override\n\tpublic boolean play(Song song, int startTime) {\n\t\tonSongFinished(nowPlaying(), PlayerHater.FINISH_SKIP_BUTTON);\n\t\tonNowPlayingChanged(song, nowPlaying());\n\t\tgetQueue().appendAndSkip(song);\n\t\tseekTo(startTime);\n\t\treturn play();\n\t}\n\n\t@Override\n\tpublic boolean seekTo(int startTime) {\n\t\tgetMediaPlayer().seekTo(startTime);\n\t\treturn true;\n\t}\n\n\t@Override\n\tpublic int enqueue(Song song) {\n\t\tint q = getQueue().appendSong(song);\n\t\treturn q;\n\t}\n\n\t@Override\n\tpublic void enqueue(int position, Song song) {\n\t\tgetQueue().addSongAtPosition(song, position);\n\t}\n\n\t@Override\n\tpublic boolean skipTo(int position) {\n\t\tstartTransaction();\n\t\tonSongFinished(nowPlaying(), PlayerHater.FINISH_SKIP_BUTTON);\n\t\tif (getQueue().skipTo(position)) {\n\t\t\treturn true;\n\t\t} else {\n\t\t\tcommitTransaction();\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t@Override\n\tpublic void skip() {\n\t\tif (nextAllowed()) {\n\t\t\tstartTransaction();\n\t\t\tonSongFinished(nowPlaying(), PlayerHater.FINISH_SKIP_BUTTON);\n\t\t\tgetQueue().next();\n\t\t}\n\t}\n\n\t@Override\n\tpublic void skipBack() {\n\t\tif (previousAllowed()) {\n\t\t\tif (getCurrentPosition() < 2000) {\n\t\t\t\tstartTransaction();\n\t\t\t\tonSongFinished(nowPlaying(), PlayerHater.FINISH_SKIP_BUTTON);\n\t\t\t\tgetQueue().back();\n\t\t\t} else {\n\t\t\t\tseekTo(0);\n\t\t\t}\n\t\t}\n\t}\n\n\t@Override\n\tpublic void emptyQueue() {\n\t\tgetQueue().empty();\n\t}\n\n\t@Override\n\tpublic Song nowPlaying() {\n\t\treturn getQueue().getNowPlaying();\n\t}\n\n\tprivate SongQueue mQueue;\n\n\tprivate SongQueue getQueue() {\n\t\tif (mQueue == null) {\n\t\t\tmQueue = new SongQueue();\n\t\t\tmQueue.setQueuedSongsChangedListener(this);\n\t\t}\n\t\treturn mQueue;\n\t}\n\n\t@Override\n\tpublic int getQueueLength() {\n\t\treturn getQueue().size();\n\t}\n\n\t@Override\n\tpublic int getQueuePosition() {\n\t\treturn getQueue().getPosition() - (getCurrentPosition() > 0 ? 0 : 1);\n\t}\n\n\t@Override\n\tpublic boolean removeFromQueue(int position) {\n\t\treturn getQueue().remove(position);\n\t}\n\n\t@Override\n\tpublic void onNowPlayingChanged(Song nowPlaying, Song was) {\n\t\tstartTransaction();\n\t\tmMediaPlayerPool.recycle(peekMediaPlayer());\n\t\tif (nowPlaying == null) {\n\t\t\tsetMediaPlayer(null);\n\t\t} else {\n\t\t\tsetMediaPlayer(mMediaPlayerPool.getPlayer(getApplicationContext(),\n\t\t\t\t\tnowPlaying.getUri()));\n\t\t\tif (isPlaying()) {\n\t\t\t\tgetMediaPlayer().start();\n\t\t\t}\n\t\t}\n\t\tcommitTransaction();\n\t\tonSongChanged(nowPlaying);\n\t}\n\n\t@Override\n\tpublic void onNextSongChanged(Song nextSong, Song was) {\n\t\tif (nextSong != null) {\n\t\t\tmMediaPlayerPool\n\t\t\t\t\t.prepare(getApplicationContext(), nextSong.getUri());\n\t\t}\n\t\tonNextSongChanged(nextSong);\n\t}\n\n\t@Override\n\tpublic void onCompletion(MediaPlayer mp) {\n\t\tif (peekMediaPlayer() != null && peekMediaPlayer().equals(mp)) {\n\t\t\tstartTransaction();\n\t\t\tmMediaPlayerPool.recycle(peekMediaPlayer());\n\t\t\tsetMediaPlayer(null);\n\t\t\tonSongFinished(nowPlaying(), PlayerHater.FINISH_SONG_END);\n\t\t\tgetQueue().next();\n\t\t}\n\t}\n\n\t@Override\n\tpublic boolean onError(MediaPlayer mp, int what, int extra) {\n\t\tif (peekMediaPlayer() != null && peekMediaPlayer().equals(mp)) {\n\t\t\tstartTransaction();\n\t\t\tmMediaPlayerPool.recycle(peekMediaPlayer());\n\t\t\tsetMediaPlayer(null);\n\t\t\tonSongFinished(nowPlaying(), PlayerHater.FINISH_ERROR);\n\t\t\tgetQueue().next();\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\t@Override\n\tpublic Song getNextSong() {\n\t\treturn getQueue().getNextPlaying();\n\t}\n\n\t@Override\n\tprotected synchronized void setMediaPlayer(SynchronousPlayer mediaPlayer) {\n\t\tSynchronousPlayer oldPlayer = peekMediaPlayer();\n\t\tif (oldPlayer != null) {\n\t\t\toldPlayer.setOnErrorListener(null);\n\t\t\toldPlayer.setOnCompletionListener(null);\n\t\t}\n\t\tsuper.setMediaPlayer(mediaPlayer);\n\t\tif (mediaPlayer != null) {\n\t\t\tmediaPlayer.setOnErrorListener(this);\n\t\t\tmediaPlayer.setOnCompletionListener(this);\n\t\t}\n\t}\n}\n"],
      "p_date_tdt": "Jun 14, 2013 11:56:16 AM",
      "c_comments_t": ["<empty>"],
      "p_contents_t": ["/*******************************************************************************\n * Copyright 2013 Chris Rhoden, Rebecca Nesson, Public Radio Exchange\n * \n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * \n *   http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n ******************************************************************************/\npackage org.prx.playerhater;\n\nimport org.prx.playerhater.mediaplayer.MediaPlayerPool;\nimport org.prx.playerhater.mediaplayer.SynchronousPlayer;\nimport org.prx.playerhater.service.PlayerHaterService;\nimport org.prx.playerhater.songs.SongQueue;\nimport org.prx.playerhater.songs.SongQueue.OnQueuedSongsChangedListener;\n\nimport android.media.MediaPlayer;\nimport android.media.MediaPlayer.OnCompletionListener;\nimport android.media.MediaPlayer.OnErrorListener;\n\npublic class PlaybackService extends PlayerHaterService implements\n\t\tOnQueuedSongsChangedListener, OnErrorListener, OnCompletionListener {\n\n\tprivate MediaPlayerPool mMediaPlayerPool;\n\n\t@Override\n\tpublic void onCreate() {\n\t\tsuper.onCreate();\n\t\tmMediaPlayerPool = new MediaPlayerPool();\n\t}\n\n\t@Override\n\tpublic void onDestroy() {\n\t\tmMediaPlayerPool.release();\n\t\tsuper.onDestroy();\n\t}\n\n\t@Override\n\tpublic boolean play(Song song, int startTime) {\n\t\tonSongFinished(nowPlaying(), PlayerHater.FINISH_SKIP_BUTTON);\n\t\tonNowPlayingChanged(song, nowPlaying());\n\t\tgetQueue().appendAndSkip(song);\n\t\tseekTo(startTime);\n\t\treturn play();\n\t}\n\n\t@Override\n\tpublic boolean seekTo(int startTime) {\n\t\tgetMediaPlayer().seekTo(startTime);\n\t\treturn true;\n\t}\n\n\t@Override\n\tpublic int enqueue(Song song) {\n\t\tint q = getQueue().appendSong(song);\n\t\treturn q;\n\t}\n\n\t@Override\n\tpublic void enqueue(int position, Song song) {\n\t\tgetQueue().addSongAtPosition(song, position);\n\t}\n\n\t@Override\n\tpublic boolean skipTo(int position) {\n\t\tstartTransaction();\n\t\tonSongFinished(nowPlaying(), PlayerHater.FINISH_SKIP_BUTTON);\n\t\tif (getQueue().skipTo(position)) {\n\t\t\treturn true;\n\t\t} else {\n\t\t\tcommitTransaction();\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t@Override\n\tpublic void skip() {\n\t\tif (nextAllowed()) {\n\t\t\tstartTransaction();\n\t\t\tonSongFinished(nowPlaying(), PlayerHater.FINISH_SKIP_BUTTON);\n\t\t\tgetQueue().next();\n\t\t}\n\t}\n\n\t@Override\n\tpublic void skipBack() {\n\t\tif (previousAllowed()) {\n\t\t\tif (getCurrentPosition() < 2000) {\n\t\t\t\tstartTransaction();\n\t\t\t\tonSongFinished(nowPlaying(), PlayerHater.FINISH_SKIP_BUTTON);\n\t\t\t\tgetQueue().back();\n\t\t\t} else {\n\t\t\t\tseekTo(0);\n\t\t\t}\n\t\t}\n\t}\n\n\t@Override\n\tpublic void emptyQueue() {\n\t\tgetQueue().empty();\n\t}\n\n\t@Override\n\tpublic Song nowPlaying() {\n\t\treturn getQueue().getNowPlaying();\n\t}\n\n\tprivate SongQueue mQueue;\n\n\tprivate SongQueue getQueue() {\n\t\tif (mQueue == null) {\n\t\t\tmQueue = new SongQueue();\n\t\t\tmQueue.setQueuedSongsChangedListener(this);\n\t\t}\n\t\treturn mQueue;\n\t}\n\n\t@Override\n\tpublic int getQueueLength() {\n\t\treturn getQueue().size();\n\t}\n\n\t@Override\n\tpublic int getQueuePosition() {\n\t\treturn getQueue().getPosition() - (getCurrentPosition() > 0 ? 0 : 1);\n\t}\n\n\t@Override\n\tpublic boolean removeFromQueue(int position) {\n\t\treturn getQueue().remove(position);\n\t}\n\n\t@Override\n\tpublic void onNowPlayingChanged(Song nowPlaying, Song was) {\n\t\tstartTransaction();\n\t\tmMediaPlayerPool.recycle(peekMediaPlayer());\n\t\tif (nowPlaying == null) {\n\t\t\tsetMediaPlayer(null);\n\t\t} else {\n\t\t\tsetMediaPlayer(mMediaPlayerPool.getPlayer(getApplicationContext(),\n\t\t\t\t\tnowPlaying.getUri()));\n\t\t\tif (isPlaying()) {\n\t\t\t\tgetMediaPlayer().start();\n\t\t\t}\n\t\t}\n\t\tcommitTransaction();\n\t\tonSongChanged(nowPlaying);\n\t}\n\n\t@Override\n\tpublic void onNextSongChanged(Song nextSong, Song was) {\n\t\tif (nextSong != null) {\n\t\t\tmMediaPlayerPool\n\t\t\t\t\t.prepare(getApplicationContext(), nextSong.getUri());\n\t\t}\n\t\tonNextSongChanged(nextSong);\n\t}\n\n\t@Override\n\tpublic void onCompletion(MediaPlayer mp) {\n\t\tif (peekMediaPlayer() != null && peekMediaPlayer().equals(mp)) {\n\t\t\tstartTransaction();\n\t\t\tmMediaPlayerPool.recycle(peekMediaPlayer());\n\t\t\tsetMediaPlayer(null);\n\t\t\tonSongFinished(nowPlaying(), PlayerHater.FINISH_SONG_END);\n\t\t\tgetQueue().next();\n\t\t}\n\t}\n\n\t@Override\n\tpublic boolean onError(MediaPlayer mp, int what, int extra) {\n\t\tif (peekMediaPlayer() != null && peekMediaPlayer().equals(mp)) {\n\t\t\tstartTransaction();\n\t\t\tmMediaPlayerPool.recycle(peekMediaPlayer());\n\t\t\tsetMediaPlayer(null);\n\t\t\tonSongFinished(nowPlaying(), PlayerHater.FINISH_ERROR);\n\t\t\tgetQueue().next();\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\t@Override\n\tpublic Song getNextSong() {\n\t\treturn getQueue().getNextPlaying();\n\t}\n\n\t@Override\n\tprotected synchronized void setMediaPlayer(SynchronousPlayer mediaPlayer) {\n\t\tSynchronousPlayer oldPlayer = peekMediaPlayer();\n\t\tif (oldPlayer != null) {\n\t\t\toldPlayer.setOnErrorListener(null);\n\t\t\toldPlayer.setOnCompletionListener(null);\n\t\t}\n\t\tsuper.setMediaPlayer(mediaPlayer);\n\t\tif (mediaPlayer != null) {\n\t\t\tmediaPlayer.setOnErrorListener(this);\n\t\t\tmediaPlayer.setOnCompletionListener(this);\n\t\t}\n\t}\n}\n"],
      "c_hash_sni": "3daf80a7f1ca48a34011221f1156479f6843ef88",
      "name_sni": "src/main/java/org/prx/playerhater/PlaybackService.java",
      "c_parents_ss": ["507230ea2070740a9a3528c29e1c2dadf83e1d25"],
      "c_imports_removed_t": ["<empty>"],
      "p_hash_sni": "507230ea2070740a9a3528c29e1c2dadf83e1d25",
      "c_imports_added_t": ["<empty>"],
      "p_methods_t": ["MediaPlayerPool SongQueue addSongAtPosition appendAndSkip appendSong back commitTransaction empty equals getApplicationContext getCurrentPosition getMediaPlayer getNextPlaying getNowPlaying getPlayer getPosition getQueue getUri isPlaying next nextAllowed nowPlaying onNextSongChanged onNowPlayingChanged onSongChanged onSongFinished peekMediaPlayer play prepare previousAllowed recycle release remove seekTo setMediaPlayer setOnCompletionListener setOnErrorListener setQueuedSongsChangedListener size skipTo start startTransaction"],
      "c_imports_removed_cs": "<empty>",
      "p_imports_t": ["org.prx.playerhater.songs.SongQueue org.prx.playerhater.service.PlayerHaterService android.media.MediaPlayer.OnCompletionListener org.prx.playerhater.mediaplayer.SynchronousPlayer org.prx.playerhater.songs.SongQueue.OnQueuedSongsChangedListener android.media.MediaPlayer.OnErrorListener android.media.MediaPlayer org.prx.playerhater.mediaplayer.MediaPlayerPool"],
      "p_subject_t": ["copyright"],
      "p_callsites_cs": "<unknown>.peekMediaPlayer()#<unknown>.setOnErrorListener(null)#<unknown>.recycle(<unknown>)#<unknown>.recycle(<unknown>)#org.prx.playerhater.PlaybackService.setMediaPlayer(null)#<unknown>.remove(int)#<unknown>.nextAllowed()#org.prx.playerhater.PlaybackService.getQueue()#<unknown>.previousAllowed()#<unknown>.setQueuedSongsChangedListener(org.prx.playerhater.PlaybackService)#<unknown>.SongQueue()#<unknown>.onSongFinished(org.prx.playerhater.Song, <unknown>)#org.prx.playerhater.PlaybackService.nowPlaying()#<unknown>.commitTransaction()#<unknown>.next()#<unknown>.next()#<unknown>.getMediaPlayer()#<unknown>.equals(android.media.MediaPlayer)#<unknown>.peekMediaPlayer()#<unknown>.onSongFinished(org.prx.playerhater.Song, <unknown>)#<unknown>.setOnCompletionListener(org.prx.playerhater.PlaybackService)#org.prx.playerhater.PlaybackService.getQueue()#<unknown>.recycle(<unknown>)#org.prx.playerhater.PlaybackService.onNextSongChanged(org.prx.playerhater.Song)#<unknown>.next()#<unknown>.release()#<unknown>.addSongAtPosition(org.prx.playerhater.Song, int)#org.prx.playerhater.PlaybackService.getQueue()#<unknown>.startTransaction()#org.prx.playerhater.PlaybackService.setMediaPlayer(null)#org.prx.playerhater.PlaybackService.onNowPlayingChanged(org.prx.playerhater.Song, org.prx.playerhater.Song)#org.prx.playerhater.PlaybackService.getQueue()#<unknown>.setOnErrorListener(org.prx.playerhater.PlaybackService)#org.prx.playerhater.PlaybackService.setMediaPlayer(<unknown>)#org.prx.playerhater.PlaybackService.nowPlaying()#<unknown>.skipTo(int)#<unknown>.onSongFinished(org.prx.playerhater.Song, <unknown>)#org.prx.playerhater.PlaybackService.play()#<unknown>.appendSong(org.prx.playerhater.Song)#<unknown>.getCurrentPosition()#org.prx.playerhater.PlaybackService.setMediaPlayer(null)#org.prx.playerhater.PlaybackService.getQueue()#<unknown>.seekTo(int)#<unknown>.startTransaction()#org.prx.playerhater.PlaybackService.getQueue()#org.prx.playerhater.PlaybackService.getQueue()#<unknown>.startTransaction()#org.prx.playerhater.PlaybackService.getQueue()#<unknown>.start()#org.prx.playerhater.PlaybackService.nowPlaying()#<unknown>.onSongFinished(org.prx.playerhater.Song, <unknown>)#<unknown>.isPlaying()#<unknown>.getNextPlaying()#<unknown>.size()#<unknown>.commitTransaction()#<unknown>.startTransaction()#org.prx.playerhater.PlaybackService.nowPlaying()#<unknown>.MediaPlayerPool()#<unknown>.getApplicationContext()#<unknown>.appendAndSkip(org.prx.playerhater.Song)#org.prx.playerhater.PlaybackService.getQueue()#org.prx.playerhater.PlaybackService.nowPlaying()#<unknown>.onSongFinished(org.prx.playerhater.Song, <unknown>)#<unknown>.peekMediaPlayer()#<unknown>.startTransaction()#org.prx.playerhater.PlaybackService.nowPlaying()#<unknown>.peekMediaPlayer()#org.prx.playerhater.PlaybackService.getQueue()#org.prx.playerhater.PlaybackService.getQueue()#<unknown>.getApplicationContext()#org.prx.playerhater.PlaybackService.seekTo(int)#<unknown>.empty()#org.prx.playerhater.PlaybackService.seekTo(int)#<unknown>.prepare(<unknown>, <unknown>)#<unknown>.equals(android.media.MediaPlayer)#<unknown>.getCurrentPosition()#<unknown>.getMediaPlayer()#<unknown>.getUri()#org.prx.playerhater.PlaybackService.getQueue()#<unknown>.onSongFinished(org.prx.playerhater.Song, <unknown>)#org.prx.playerhater.PlaybackService.getQueue()#<unknown>.getUri()#<unknown>.getNowPlaying()#<unknown>.back()#<unknown>.getPosition()#<unknown>.getPlayer(<unknown>, <unknown>)#<unknown>.onSongChanged(org.prx.playerhater.Song)#<unknown>.startTransaction()#<unknown>.setOnCompletionListener(null)",
      "p_callsites_t": ["<unknown>.peekMediaPlayer() <unknown>.setOnErrorListener(null) <unknown>.recycle(<unknown>) <unknown>.recycle(<unknown>) org.prx.playerhater.PlaybackService.setMediaPlayer(null) <unknown>.remove(int) <unknown>.nextAllowed() org.prx.playerhater.PlaybackService.getQueue() <unknown>.previousAllowed() <unknown>.setQueuedSongsChangedListener(org.prx.playerhater.PlaybackService) <unknown>.SongQueue() <unknown>.onSongFinished(org.prx.playerhater.Song, <unknown>) org.prx.playerhater.PlaybackService.nowPlaying() <unknown>.commitTransaction() <unknown>.next() <unknown>.next() <unknown>.getMediaPlayer() <unknown>.equals(android.media.MediaPlayer) <unknown>.peekMediaPlayer() <unknown>.onSongFinished(org.prx.playerhater.Song, <unknown>) <unknown>.setOnCompletionListener(org.prx.playerhater.PlaybackService) org.prx.playerhater.PlaybackService.getQueue() <unknown>.recycle(<unknown>) org.prx.playerhater.PlaybackService.onNextSongChanged(org.prx.playerhater.Song) <unknown>.next() <unknown>.release() <unknown>.addSongAtPosition(org.prx.playerhater.Song, int) org.prx.playerhater.PlaybackService.getQueue() <unknown>.startTransaction() org.prx.playerhater.PlaybackService.setMediaPlayer(null) org.prx.playerhater.PlaybackService.onNowPlayingChanged(org.prx.playerhater.Song, org.prx.playerhater.Song) org.prx.playerhater.PlaybackService.getQueue() <unknown>.setOnErrorListener(org.prx.playerhater.PlaybackService) org.prx.playerhater.PlaybackService.setMediaPlayer(<unknown>) org.prx.playerhater.PlaybackService.nowPlaying() <unknown>.skipTo(int) <unknown>.onSongFinished(org.prx.playerhater.Song, <unknown>) org.prx.playerhater.PlaybackService.play() <unknown>.appendSong(org.prx.playerhater.Song) <unknown>.getCurrentPosition() org.prx.playerhater.PlaybackService.setMediaPlayer(null) org.prx.playerhater.PlaybackService.getQueue() <unknown>.seekTo(int) <unknown>.startTransaction() org.prx.playerhater.PlaybackService.getQueue() org.prx.playerhater.PlaybackService.getQueue() <unknown>.startTransaction() org.prx.playerhater.PlaybackService.getQueue() <unknown>.start() org.prx.playerhater.PlaybackService.nowPlaying() <unknown>.onSongFinished(org.prx.playerhater.Song, <unknown>) <unknown>.isPlaying() <unknown>.getNextPlaying() <unknown>.size() <unknown>.commitTransaction() <unknown>.startTransaction() org.prx.playerhater.PlaybackService.nowPlaying() <unknown>.MediaPlayerPool() <unknown>.getApplicationContext() <unknown>.appendAndSkip(org.prx.playerhater.Song) org.prx.playerhater.PlaybackService.getQueue() org.prx.playerhater.PlaybackService.nowPlaying() <unknown>.onSongFinished(org.prx.playerhater.Song, <unknown>) <unknown>.peekMediaPlayer() <unknown>.startTransaction() org.prx.playerhater.PlaybackService.nowPlaying() <unknown>.peekMediaPlayer() org.prx.playerhater.PlaybackService.getQueue() org.prx.playerhater.PlaybackService.getQueue() <unknown>.getApplicationContext() org.prx.playerhater.PlaybackService.seekTo(int) <unknown>.empty() org.prx.playerhater.PlaybackService.seekTo(int) <unknown>.prepare(<unknown>, <unknown>) <unknown>.equals(android.media.MediaPlayer) <unknown>.getCurrentPosition() <unknown>.getMediaPlayer() <unknown>.getUri() org.prx.playerhater.PlaybackService.getQueue() <unknown>.onSongFinished(org.prx.playerhater.Song, <unknown>) org.prx.playerhater.PlaybackService.getQueue() <unknown>.getUri() <unknown>.getNowPlaying() <unknown>.back() <unknown>.getPosition() <unknown>.getPlayer(<unknown>, <unknown>) <unknown>.onSongChanged(org.prx.playerhater.Song) <unknown>.startTransaction() <unknown>.setOnCompletionListener(null)"],
      "c_callsites_t": ["<unknown>.peekMediaPlayer() <unknown>.setOnErrorListener(null) <unknown>.recycle(<unknown>) <unknown>.recycle(<unknown>) org.prx.playerhater.PlaybackService.setMediaPlayer(null) <unknown>.remove(int) <unknown>.nextAllowed() org.prx.playerhater.PlaybackService.getQueue() <unknown>.previousAllowed() <unknown>.setQueuedSongsChangedListener(org.prx.playerhater.PlaybackService) <unknown>.SongQueue() <unknown>.onSongFinished(org.prx.playerhater.Song, <unknown>) org.prx.playerhater.PlaybackService.nowPlaying() <unknown>.commitTransaction() <unknown>.next() <unknown>.next() <unknown>.getMediaPlayer() <unknown>.equals(android.media.MediaPlayer) <unknown>.peekMediaPlayer() <unknown>.onSongFinished(org.prx.playerhater.Song, <unknown>) <unknown>.setOnCompletionListener(org.prx.playerhater.PlaybackService) org.prx.playerhater.PlaybackService.getQueue() <unknown>.recycle(<unknown>) org.prx.playerhater.PlaybackService.onNextSongChanged(org.prx.playerhater.Song) <unknown>.next() <unknown>.release() <unknown>.addSongAtPosition(org.prx.playerhater.Song, int) org.prx.playerhater.PlaybackService.getQueue() <unknown>.startTransaction() org.prx.playerhater.PlaybackService.setMediaPlayer(null) org.prx.playerhater.PlaybackService.onNowPlayingChanged(org.prx.playerhater.Song, org.prx.playerhater.Song) org.prx.playerhater.PlaybackService.getQueue() <unknown>.setOnErrorListener(org.prx.playerhater.PlaybackService) org.prx.playerhater.PlaybackService.setMediaPlayer(<unknown>) org.prx.playerhater.PlaybackService.nowPlaying() <unknown>.skipTo(int) <unknown>.onSongFinished(org.prx.playerhater.Song, <unknown>) org.prx.playerhater.PlaybackService.play() <unknown>.appendSong(org.prx.playerhater.Song) <unknown>.getCurrentPosition() org.prx.playerhater.PlaybackService.setMediaPlayer(null) org.prx.playerhater.PlaybackService.getQueue() <unknown>.seekTo(int) <unknown>.startTransaction() org.prx.playerhater.PlaybackService.getQueue() org.prx.playerhater.PlaybackService.getQueue() <unknown>.startTransaction() org.prx.playerhater.PlaybackService.getQueue() <unknown>.start() org.prx.playerhater.PlaybackService.nowPlaying() <unknown>.onSongFinished(org.prx.playerhater.Song, <unknown>) <unknown>.isPlaying() <unknown>.getNextPlaying() <unknown>.size() <unknown>.commitTransaction() <unknown>.startTransaction() org.prx.playerhater.PlaybackService.nowPlaying() <unknown>.getApplicationContext() <unknown>.appendAndSkip(org.prx.playerhater.Song) org.prx.playerhater.PlaybackService.getQueue() org.prx.playerhater.PlaybackService.nowPlaying() <unknown>.onSongFinished(org.prx.playerhater.Song, <unknown>) <unknown>.getInstance(java.lang.Class) <unknown>.peekMediaPlayer() <unknown>.startTransaction() org.prx.playerhater.PlaybackService.nowPlaying() <unknown>.peekMediaPlayer() org.prx.playerhater.PlaybackService.getQueue() org.prx.playerhater.PlaybackService.getQueue() <unknown>.getApplicationContext() org.prx.playerhater.PlaybackService.seekTo(int) <unknown>.empty() org.prx.playerhater.PlaybackService.seekTo(int) <unknown>.prepare(<unknown>, <unknown>) <unknown>.equals(android.media.MediaPlayer) <unknown>.getCurrentPosition() <unknown>.getMediaPlayer() <unknown>.getUri() org.prx.playerhater.PlaybackService.getQueue() <unknown>.onSongFinished(org.prx.playerhater.Song, <unknown>) org.prx.playerhater.PlaybackService.getQueue() <unknown>.getUri() <unknown>.getNowPlaying() <unknown>.back() <unknown>.getPosition() <unknown>.getPlayer(<unknown>, <unknown>) <unknown>.onSongChanged(org.prx.playerhater.Song) <unknown>.startTransaction() <unknown>.setOnCompletionListener(null)"],
      "c_callsites_added_t": ["<unknown>.getInstance(java.lang.Class)"],
      "c_methods_t": ["SongQueue addSongAtPosition appendAndSkip appendSong back commitTransaction empty equals getApplicationContext getCurrentPosition getInstance getMediaPlayer getNextPlaying getNowPlaying getPlayer getPosition getQueue getUri isPlaying next nextAllowed nowPlaying onNextSongChanged onNowPlayingChanged onSongChanged onSongFinished peekMediaPlayer play prepare previousAllowed recycle release remove seekTo setMediaPlayer setOnCompletionListener setOnErrorListener setQueuedSongsChangedListener size skipTo start startTransaction"],
      "id": "chrisrhoden/PlayerHater\u0000src/main/java/org/prx/playerhater/PlaybackService.java\u0000507230ea2070740a9a3528c29e1c2dadf83e1d25\u00003daf80a7f1ca48a34011221f1156479f6843ef88",
      "p_comments_t": ["<empty>"],
      "p_email_sni": "carhoden@gmail.com",
      "c_callsites_removed_t": ["<unknown>.MediaPlayerPool()"],
      "c_callsites_cs": "<unknown>.peekMediaPlayer()#<unknown>.setOnErrorListener(null)#<unknown>.recycle(<unknown>)#<unknown>.recycle(<unknown>)#org.prx.playerhater.PlaybackService.setMediaPlayer(null)#<unknown>.remove(int)#<unknown>.nextAllowed()#org.prx.playerhater.PlaybackService.getQueue()#<unknown>.previousAllowed()#<unknown>.setQueuedSongsChangedListener(org.prx.playerhater.PlaybackService)#<unknown>.SongQueue()#<unknown>.onSongFinished(org.prx.playerhater.Song, <unknown>)#org.prx.playerhater.PlaybackService.nowPlaying()#<unknown>.commitTransaction()#<unknown>.next()#<unknown>.next()#<unknown>.getMediaPlayer()#<unknown>.equals(android.media.MediaPlayer)#<unknown>.peekMediaPlayer()#<unknown>.onSongFinished(org.prx.playerhater.Song, <unknown>)#<unknown>.setOnCompletionListener(org.prx.playerhater.PlaybackService)#org.prx.playerhater.PlaybackService.getQueue()#<unknown>.recycle(<unknown>)#org.prx.playerhater.PlaybackService.onNextSongChanged(org.prx.playerhater.Song)#<unknown>.next()#<unknown>.release()#<unknown>.addSongAtPosition(org.prx.playerhater.Song, int)#org.prx.playerhater.PlaybackService.getQueue()#<unknown>.startTransaction()#org.prx.playerhater.PlaybackService.setMediaPlayer(null)#org.prx.playerhater.PlaybackService.onNowPlayingChanged(org.prx.playerhater.Song, org.prx.playerhater.Song)#org.prx.playerhater.PlaybackService.getQueue()#<unknown>.setOnErrorListener(org.prx.playerhater.PlaybackService)#org.prx.playerhater.PlaybackService.setMediaPlayer(<unknown>)#org.prx.playerhater.PlaybackService.nowPlaying()#<unknown>.skipTo(int)#<unknown>.onSongFinished(org.prx.playerhater.Song, <unknown>)#org.prx.playerhater.PlaybackService.play()#<unknown>.appendSong(org.prx.playerhater.Song)#<unknown>.getCurrentPosition()#org.prx.playerhater.PlaybackService.setMediaPlayer(null)#org.prx.playerhater.PlaybackService.getQueue()#<unknown>.seekTo(int)#<unknown>.startTransaction()#org.prx.playerhater.PlaybackService.getQueue()#org.prx.playerhater.PlaybackService.getQueue()#<unknown>.startTransaction()#org.prx.playerhater.PlaybackService.getQueue()#<unknown>.start()#org.prx.playerhater.PlaybackService.nowPlaying()#<unknown>.onSongFinished(org.prx.playerhater.Song, <unknown>)#<unknown>.isPlaying()#<unknown>.getNextPlaying()#<unknown>.size()#<unknown>.commitTransaction()#<unknown>.startTransaction()#org.prx.playerhater.PlaybackService.nowPlaying()#<unknown>.getApplicationContext()#<unknown>.appendAndSkip(org.prx.playerhater.Song)#org.prx.playerhater.PlaybackService.getQueue()#org.prx.playerhater.PlaybackService.nowPlaying()#<unknown>.onSongFinished(org.prx.playerhater.Song, <unknown>)#<unknown>.getInstance(java.lang.Class)#<unknown>.peekMediaPlayer()#<unknown>.startTransaction()#org.prx.playerhater.PlaybackService.nowPlaying()#<unknown>.peekMediaPlayer()#org.prx.playerhater.PlaybackService.getQueue()#org.prx.playerhater.PlaybackService.getQueue()#<unknown>.getApplicationContext()#org.prx.playerhater.PlaybackService.seekTo(int)#<unknown>.empty()#org.prx.playerhater.PlaybackService.seekTo(int)#<unknown>.prepare(<unknown>, <unknown>)#<unknown>.equals(android.media.MediaPlayer)#<unknown>.getCurrentPosition()#<unknown>.getMediaPlayer()#<unknown>.getUri()#org.prx.playerhater.PlaybackService.getQueue()#<unknown>.onSongFinished(org.prx.playerhater.Song, <unknown>)#org.prx.playerhater.PlaybackService.getQueue()#<unknown>.getUri()#<unknown>.getNowPlaying()#<unknown>.back()#<unknown>.getPosition()#<unknown>.getPlayer(<unknown>, <unknown>)#<unknown>.onSongChanged(org.prx.playerhater.Song)#<unknown>.startTransaction()#<unknown>.setOnCompletionListener(null)",
      "p_body_t": ["<empty>"],
      "c_patch_t": [" public class PlaybackService extends PlayerHaterService implements\n \t\tOnQueuedSongsChangedListener, OnErrorListener, OnCompletionListener {\n \n-\tprivate MediaPlayerPool mMediaPlayerPool;\n+\tprivate MediaPlayerPool<SynchronousPlayer> mMediaPlayerPool;\n \n \t@Override\n \tpublic void onCreate() {\n \t\tsuper.onCreate();\n-\t\tmMediaPlayerPool = new MediaPlayerPool();\n+\t\tmMediaPlayerPool = MediaPlayerPool.getInstance(SynchronousPlayer.class);\n \t}\n \n \t@Override"],
      "c_body_t": ["<empty>"],
      "c_email_sni": "carhoden@gmail.com",
      "p_patch_t": ["  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  ******************************************************************************/\n-\n package org.prx.playerhater;\n \n import org.prx.playerhater.mediaplayer.MediaPlayerPool;"],
      "repo_sni": "chrisrhoden/PlayerHater",
      "_version_": 1526803907622207488,
      "c_user_sni": "chrisrhoden",
      "c_callsites_added_cs": "<unknown>.getInstance(java.lang.Class)",
      "p_parents_ss": ["a6c4bf92694a59e52556e4268a8e6728235200e0"],
      "p_user_sni": "chrisrhoden",
      "c_subject_t": ["generics, holy no"],
      "c_imports_added_cs": "<empty>",
      "c_callsites_removed_cs": "<unknown>.MediaPlayerPool()"
    }]]
  }
}